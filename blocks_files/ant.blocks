StartClass 1
Class(org.apache.tools.ant.Main,N,N,Public);
Attribute(DEFAULT_BUILD_FILENAME,java.lang.String,Public,Y,Y,);
Attribute(msgOutputLevel,int,Private,N,N,);
Attribute(buildFile,java.io.File,Private,N,N,);
Attribute(out,java.io.PrintStream,Private,Y,N,);
Attribute(err,java.io.PrintStream,Private,Y,N,);
Attribute(targets,java.util.Vector,Private,N,N,);
Attribute(definedProps,java.util.Properties,Private,N,N,);
Attribute(listeners,java.util.Vector,Private,N,N,);
Attribute(propertyFiles,java.util.Vector,Private,N,N,);
Attribute(allowInput,boolean,Private,N,N,);
Attribute(keepGoingMode,boolean,Private,N,N,);
Attribute(loggerClassname,java.lang.String,Private,N,N,);
Attribute(inputHandlerClassname,java.lang.String,Private,N,N,);
Attribute(emacsMode,boolean,Private,N,N,);
Attribute(readyToRun,boolean,Private,N,N,);
Attribute(projectHelp,boolean,Private,N,N,);
Attribute(isLogFileUsed,boolean,Private,Y,N,);
Attribute(threadPriority,java.lang.Integer,Private,N,N,);
Attribute(proxy,boolean,Private,N,N,);
Attribute(antVersion,java.lang.String,Private,Y,N,);
Attribute(class$org$apache$tools$ant$Main,java.lang.Class,Public,Y,N,);
Attribute(class$org$apache$tools$ant$BuildListener,java.lang.Class,Public,Y,N,);
Attribute(class$org$apache$tools$ant$input$InputHandler,java.lang.Class,Public,Y,N,);
Attribute(class$org$apache$tools$ant$BuildLogger,java.lang.Class,Public,Y,N,);
Method(printMessage,void,Private,Y,N);
Method(start,void,Public,Y,N);
Method(startAnt,void,Public,N,N);
Method(exit,void,Protected,N,N);
Method(handleLogfile,void,Private,Y,N);
Method(main,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Protected,N,N);
Method(processArgs,void,Private,N,N);
Method(getParentFile,java.io.File,Private,N,N);
Method(findBuildFile,java.io.File,Private,N,N);
Method(runBuild,void,Private,N,N);
Method(addBuildListeners,void,Protected,N,N);
Method(addInputHandler,void,Private,N,N);
Method(createLogger,org.apache.tools.ant.BuildLogger,Private,N,N);
Method(printUsage,void,Private,Y,N);
Method(printVersion,void,Private,Y,N);
Method(getAntVersion,java.lang.String,Public,Y,N);
Method(printDescription,void,Private,Y,N);
Method(printTargets,void,Private,Y,N);
Method(findTargetPosition,int,Private,Y,N);
Method(printTargets$2,void,Private,Y,N);
Method(class$,java.lang.Class,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(printMessage,java.lang.Throwable,);
Parameter(start,java.lang.String[],);
Parameter(start,java.util.Properties,);
Parameter(start,java.lang.ClassLoader,);
Parameter(startAnt,java.lang.String[],);
Parameter(startAnt,java.util.Properties,);
Parameter(startAnt,java.lang.ClassLoader,);
Parameter(exit,int,);
Parameter(main,java.lang.String[],);
Parameter(<init>$2,java.lang.String[],);
Parameter(processArgs,java.lang.String[],);
Parameter(getParentFile,java.io.File,);
Parameter(findBuildFile,java.lang.String,);
Parameter(findBuildFile,java.lang.String,);
Parameter(runBuild,java.lang.ClassLoader,);
Parameter(addBuildListeners,org.apache.tools.ant.Project,);
Parameter(addInputHandler,org.apache.tools.ant.Project,);
Parameter(printDescription,org.apache.tools.ant.Project,);
Parameter(printTargets,org.apache.tools.ant.Project,);
Parameter(printTargets,boolean,);
Parameter(findTargetPosition,java.util.Vector,);
Parameter(findTargetPosition,java.lang.String,);
Parameter(printTargets$2,org.apache.tools.ant.Project,);
Parameter(printTargets$2,java.util.Vector,);
Parameter(printTargets$2,java.util.Vector,);
Parameter(printTargets$2,java.lang.String,);
Parameter(printTargets$2,int,);
Parameter(class$,java.lang.String,);
Call(METHOD,org.apache.tools.ant.Main,start --> <init>,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Main,start --> startAnt,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Main,startAnt --> processArgs,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Main,startAnt --> handleLogfile,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Main,startAnt --> printMessage,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Main,startAnt --> exit,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Main,startAnt --> runBuild,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Main,main --> start,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Main,<init>$2 --> processArgs,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Main,processArgs --> printUsage,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Main,processArgs --> printVersion,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Main,processArgs --> findBuildFile,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Main,findBuildFile --> getParentFile,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Main,runBuild --> addBuildListeners,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Main,runBuild --> addInputHandler,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Main,runBuild --> printDescription,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Main,runBuild --> printTargets,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Main,addBuildListeners --> createLogger,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Main,addBuildListeners --> class$,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Main,addInputHandler --> class$,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Main,createLogger --> class$,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Main,printVersion --> getAntVersion,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Main,getAntVersion --> class$,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Main,printTargets --> findTargetPosition,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Main,printTargets --> printTargets$2,org.apache.tools.ant.Main,);
Call(ATTRIBUTE,org.apache.tools.ant.Main,startAnt --> definedProps,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,startAnt --> err,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,handleLogfile --> isLogFileUsed,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,handleLogfile --> out,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,handleLogfile --> err,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init> --> msgOutputLevel,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init> --> targets,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init> --> definedProps,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init> --> listeners,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init> --> propertyFiles,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init> --> allowInput,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init> --> keepGoingMode,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init> --> loggerClassname,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init> --> inputHandlerClassname,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init> --> emacsMode,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init> --> readyToRun,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init> --> projectHelp,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init> --> threadPriority,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init> --> proxy,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init>$2 --> msgOutputLevel,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init>$2 --> targets,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init>$2 --> definedProps,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init>$2 --> listeners,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init>$2 --> propertyFiles,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init>$2 --> allowInput,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init>$2 --> keepGoingMode,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init>$2 --> loggerClassname,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init>$2 --> inputHandlerClassname,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init>$2 --> emacsMode,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init>$2 --> readyToRun,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init>$2 --> projectHelp,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init>$2 --> threadPriority,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<init>$2 --> proxy,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> listeners,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> definedProps,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> loggerClassname,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> inputHandlerClassname,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> propertyFiles,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> threadPriority,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> targets,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> buildFile,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> msgOutputLevel,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> out,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> err,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> msgOutputLevel,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> allowInput,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> isLogFileUsed,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> buildFile,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> loggerClassname,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> inputHandlerClassname,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> emacsMode,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> projectHelp,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> keepGoingMode,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> threadPriority,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> proxy,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> out,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> err,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,processArgs --> readyToRun,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,getParentFile --> msgOutputLevel,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,findBuildFile --> msgOutputLevel,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,runBuild --> readyToRun,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,runBuild --> allowInput,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,runBuild --> projectHelp,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,runBuild --> threadPriority,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,runBuild --> definedProps,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,runBuild --> buildFile,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,runBuild --> keepGoingMode,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,runBuild --> proxy,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,runBuild --> msgOutputLevel,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,runBuild --> targets,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,addBuildListeners --> listeners,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,addBuildListeners --> class$org$apache$tools$ant$Main,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,addBuildListeners --> class$org$apache$tools$ant$BuildListener,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,addBuildListeners --> class$org$apache$tools$ant$Main,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,addBuildListeners --> class$org$apache$tools$ant$BuildListener,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,addInputHandler --> inputHandlerClassname,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,addInputHandler --> class$org$apache$tools$ant$Main,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,addInputHandler --> class$org$apache$tools$ant$input$InputHandler,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,addInputHandler --> class$org$apache$tools$ant$Main,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,addInputHandler --> class$org$apache$tools$ant$input$InputHandler,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,createLogger --> loggerClassname,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,createLogger --> class$org$apache$tools$ant$Main,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,createLogger --> class$org$apache$tools$ant$BuildLogger,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,createLogger --> msgOutputLevel,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,createLogger --> out,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,createLogger --> err,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,createLogger --> emacsMode,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,createLogger --> class$org$apache$tools$ant$Main,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,createLogger --> class$org$apache$tools$ant$BuildLogger,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,getAntVersion --> antVersion,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,getAntVersion --> class$org$apache$tools$ant$Main,org.apache.tools.ant.Main,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Main,getAntVersion --> class$org$apache$tools$ant$Main,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,getAntVersion --> antVersion,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<clinit> --> out,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<clinit> --> err,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<clinit> --> isLogFileUsed,org.apache.tools.ant.Main,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Main,<clinit> --> antVersion,org.apache.tools.ant.Main,WRITE);
Call(METHOD,org.apache.tools.ant.Main,startAnt --> validateVersion,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Main,startAnt --> getStatus,org.apache.tools.ant.ExitStatusException,);
Call(METHOD,org.apache.tools.ant.Main,handleLogfile --> close$3,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.Main,processArgs --> doReport,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Main,processArgs --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.Main,processArgs --> close$4,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.Main,findBuildFile --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.Main,runBuild --> <init>,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Main,runBuild --> setCoreLoader,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Main,runBuild --> setDefaultInputStream,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Main,runBuild --> <init>,org.apache.tools.ant.DemuxInputStream,);
Call(METHOD,org.apache.tools.ant.Main,runBuild --> <init>,org.apache.tools.ant.DemuxOutputStream,);
Call(METHOD,org.apache.tools.ant.Main,runBuild --> fireBuildStarted,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Main,runBuild --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Main,runBuild --> log,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Main,runBuild --> init,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Main,runBuild --> setUserProperty,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Main,runBuild --> setKeepGoingMode,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Main,runBuild --> <init>,org.apache.tools.ant.util.ProxySetup,);
Call(METHOD,org.apache.tools.ant.Main,runBuild --> enableProxies,org.apache.tools.ant.util.ProxySetup,);
Call(METHOD,org.apache.tools.ant.Main,runBuild --> configureProject,org.apache.tools.ant.ProjectHelper,);
Call(METHOD,org.apache.tools.ant.Main,runBuild --> fireBuildFinished,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Main,runBuild --> getDefaultTarget,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Main,runBuild --> executeTargets,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Main,addBuildListeners --> addBuildListener,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Main,addBuildListeners --> newInstance$2,org.apache.tools.ant.util.ClasspathUtils,);
Call(METHOD,org.apache.tools.ant.Main,addBuildListeners --> setProjectReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Main,addInputHandler --> <init>,org.apache.tools.ant.input.DefaultInputHandler,);
Call(METHOD,org.apache.tools.ant.Main,addInputHandler --> newInstance$2,org.apache.tools.ant.util.ClasspathUtils,);
Call(METHOD,org.apache.tools.ant.Main,addInputHandler --> setProjectReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Main,addInputHandler --> setInputHandler,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Main,createLogger --> newInstance$2,org.apache.tools.ant.util.ClasspathUtils,);
Call(METHOD,org.apache.tools.ant.Main,createLogger --> <init>,org.apache.tools.ant.DefaultLogger,);
Call(METHOD,org.apache.tools.ant.Main,createLogger --> setMessageOutputLevel,org.apache.tools.ant.BuildLogger,);
Call(METHOD,org.apache.tools.ant.Main,createLogger --> setOutputPrintStream,org.apache.tools.ant.BuildLogger,);
Call(METHOD,org.apache.tools.ant.Main,createLogger --> setErrorPrintStream,org.apache.tools.ant.BuildLogger,);
Call(METHOD,org.apache.tools.ant.Main,createLogger --> setEmacsMode,org.apache.tools.ant.BuildLogger,);
Call(METHOD,org.apache.tools.ant.Main,getAntVersion --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.Main,printDescription --> getDescription,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Main,printDescription --> log,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Main,printTargets --> getTargets,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Main,printTargets --> getName,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.Main,printTargets --> getDescription,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.Main,printTargets --> getDefaultTarget,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Main,printTargets --> log,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Main,printTargets$2 --> log$2,org.apache.tools.ant.Project,);
EndClass 1
StartClass 2
Class(org.apache.tools.ant.BuildException,N,N,Public);
Attribute(cause,java.lang.Throwable,Private,N,N,);
Attribute(location,org.apache.tools.ant.Location,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(<init>$5,void,Public,N,N);
Method(<init>$6,void,Public,N,N);
Method(<init>$7,void,Public,N,N);
Method(getException,java.lang.Throwable,Public,N,N);
Method(getCause,java.lang.Throwable,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(setLocation,void,Public,N,N);
Method(getLocation,org.apache.tools.ant.Location,Public,N,N);
Method(printStackTrace,void,Public,N,N);
Method(printStackTrace$2,void,Public,N,N);
Method(printStackTrace$3,void,Public,N,N);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$3,java.lang.String,);
Parameter(<init>$3,java.lang.Throwable,);
Parameter(<init>$4,java.lang.String,);
Parameter(<init>$4,java.lang.Throwable,);
Parameter(<init>$4,org.apache.tools.ant.Location,);
Parameter(<init>$5,java.lang.Throwable,);
Parameter(<init>$6,java.lang.String,);
Parameter(<init>$6,org.apache.tools.ant.Location,);
Parameter(<init>$7,java.lang.Throwable,);
Parameter(<init>$7,org.apache.tools.ant.Location,);
Parameter(setLocation,org.apache.tools.ant.Location,);
Parameter(printStackTrace$2,java.io.PrintStream,);
Parameter(printStackTrace$3,java.io.PrintWriter,);
SubClass(org.apache.tools.ant.ExitStatusException);
SubClass(org.apache.tools.ant.UnsupportedElementException);
SubClass(org.apache.tools.ant.UnsupportedAttributeException);
Composition(org.apache.tools.ant.Location);
Call(METHOD,org.apache.tools.ant.BuildException,<init>$4 --> <init>$3,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.BuildException,<init>$7 --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.BuildException,getCause --> getException,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.BuildException,printStackTrace --> printStackTrace$2,org.apache.tools.ant.BuildException,);
Call(ATTRIBUTE,org.apache.tools.ant.BuildException,<init> --> location,org.apache.tools.ant.BuildException,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildException,<init>$2 --> location,org.apache.tools.ant.BuildException,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildException,<init>$3 --> location,org.apache.tools.ant.BuildException,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildException,<init>$3 --> cause,org.apache.tools.ant.BuildException,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildException,<init>$4 --> location,org.apache.tools.ant.BuildException,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildException,<init>$5 --> location,org.apache.tools.ant.BuildException,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildException,<init>$5 --> cause,org.apache.tools.ant.BuildException,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildException,<init>$6 --> location,org.apache.tools.ant.BuildException,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildException,<init>$7 --> location,org.apache.tools.ant.BuildException,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildException,getException --> cause,org.apache.tools.ant.BuildException,READ);
Call(ATTRIBUTE,org.apache.tools.ant.BuildException,toString --> location,org.apache.tools.ant.BuildException,READ);
Call(ATTRIBUTE,org.apache.tools.ant.BuildException,setLocation --> location,org.apache.tools.ant.BuildException,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildException,getLocation --> location,org.apache.tools.ant.BuildException,READ);
Call(ATTRIBUTE,org.apache.tools.ant.BuildException,printStackTrace$2 --> cause,org.apache.tools.ant.BuildException,READ);
Call(ATTRIBUTE,org.apache.tools.ant.BuildException,printStackTrace$3 --> cause,org.apache.tools.ant.BuildException,READ);
Call(ATTRIBUTE,org.apache.tools.ant.BuildException,<init> --> UNKNOWN_LOCATION,org.apache.tools.ant.Location,READ);
Call(ATTRIBUTE,org.apache.tools.ant.BuildException,<init>$2 --> UNKNOWN_LOCATION,org.apache.tools.ant.Location,READ);
Call(ATTRIBUTE,org.apache.tools.ant.BuildException,<init>$3 --> UNKNOWN_LOCATION,org.apache.tools.ant.Location,READ);
Call(ATTRIBUTE,org.apache.tools.ant.BuildException,<init>$5 --> UNKNOWN_LOCATION,org.apache.tools.ant.Location,READ);
Call(ATTRIBUTE,org.apache.tools.ant.BuildException,<init>$6 --> UNKNOWN_LOCATION,org.apache.tools.ant.Location,READ);
Call(METHOD,org.apache.tools.ant.BuildException,toString --> toString,org.apache.tools.ant.Location,);
EndClass 2
StartClass 3
Class(org.apache.tools.ant.Project,N,N,Public);
Attribute(LINE_SEP,java.lang.String,Private,Y,Y,);
Attribute(MSG_ERR,int,Public,Y,Y,);
Attribute(MSG_WARN,int,Public,Y,Y,);
Attribute(MSG_INFO,int,Public,Y,Y,);
Attribute(MSG_VERBOSE,int,Public,Y,Y,);
Attribute(MSG_DEBUG,int,Public,Y,Y,);
Attribute(VISITING,java.lang.String,Private,Y,Y,);
Attribute(VISITED,java.lang.String,Private,Y,Y,);
Attribute(JAVA_1_0,java.lang.String,Public,Y,Y,,);
Attribute(JAVA_1_1,java.lang.String,Public,Y,Y,,);
Attribute(JAVA_1_2,java.lang.String,Public,Y,Y,,);
Attribute(JAVA_1_3,java.lang.String,Public,Y,Y,,);
Attribute(JAVA_1_4,java.lang.String,Public,Y,Y,,);
Attribute(TOKEN_START,java.lang.String,Public,Y,Y,);
Attribute(TOKEN_END,java.lang.String,Public,Y,Y,);
Attribute(FILE_UTILS,org.apache.tools.ant.util.FileUtils,Private,Y,Y,);
Attribute(name,java.lang.String,Private,N,N,);
Attribute(description,java.lang.String,Private,N,N,);
Attribute(references,java.util.Hashtable,Private,N,N,);
Attribute(idReferences,java.util.HashMap,Private,N,N,);
Attribute(parentIdProject,org.apache.tools.ant.Project,Private,N,N,);
Attribute(defaultTarget,java.lang.String,Private,N,N,);
Attribute(targets,java.util.Hashtable,Private,N,N,);
Attribute(globalFilterSet,org.apache.tools.ant.types.FilterSet,Private,N,N,);
Attribute(globalFilters,org.apache.tools.ant.types.FilterSetCollection,Private,N,N,);
Attribute(baseDir,java.io.File,Private,N,N,);
Attribute(listeners,java.util.Vector,Private,N,N,);
Attribute(coreLoader,java.lang.ClassLoader,Private,N,N,);
Attribute(threadTasks,java.util.Map,Private,N,N,);
Attribute(threadGroupTasks,java.util.Map,Private,N,N,);
Attribute(inputHandler,org.apache.tools.ant.input.InputHandler,Private,N,N,);
Attribute(defaultInputStream,java.io.InputStream,Private,N,N,);
Attribute(keepGoingMode,boolean,Private,N,N,);
Attribute(loggingMessage,boolean,Private,N,N,);
Attribute(class$org$apache$tools$ant$Project,java.lang.Class,Public,Y,N,);
Attribute(class$org$apache$tools$ant$Task,java.lang.Class,Public,Y,N,);
Attribute(class$org$apache$tools$ant$helper$DefaultExecutor,java.lang.Class,Public,Y,N,);
Method(setInputHandler,void,Public,N,N);
Method(setDefaultInputStream,void,Public,N,N);
Method(getDefaultInputStream,java.io.InputStream,Public,N,N);
Method(getInputHandler,org.apache.tools.ant.input.InputHandler,Public,N,N);
Method(<init>,void,Public,N,N);
Method(createSubProject,org.apache.tools.ant.Project,Public,N,N);
Method(initSubProject,void,Public,N,N);
Method(init,void,Public,N,N);
Method(initProperties,void,Public,N,N);
Method(setAntLib,void,Private,N,N);
Method(createClassLoader,org.apache.tools.ant.AntClassLoader,Public,N,N);
Method(createClassLoader$2,org.apache.tools.ant.AntClassLoader,Public,N,N);
Method(setCoreLoader,void,Public,N,N);
Method(getCoreLoader,java.lang.ClassLoader,Public,N,N);
Method(addBuildListener,void,Public,N,N);
Method(removeBuildListener,void,Public,N,N);
Method(getBuildListeners,java.util.Vector,Public,N,N);
Method(log,void,Public,N,N);
Method(log$2,void,Public,N,N);
Method(log$3,void,Public,N,N);
Method(log$4,void,Public,N,N);
Method(log$5,void,Public,N,N);
Method(log$6,void,Public,N,N);
Method(log$7,void,Public,N,N);
Method(getGlobalFilterSet,org.apache.tools.ant.types.FilterSet,Public,N,N);
Method(setProperty,void,Public,N,N);
Method(setNewProperty,void,Public,N,N);
Method(setUserProperty,void,Public,N,N);
Method(setInheritedProperty,void,Public,N,N);
Method(setPropertyInternal,void,Private,N,N);
Method(getProperty,java.lang.String,Public,N,N);
Method(replaceProperties,java.lang.String,Public,N,N);
Method(getUserProperty,java.lang.String,Public,N,N);
Method(getProperties,java.util.Hashtable,Public,N,N);
Method(getUserProperties,java.util.Hashtable,Public,N,N);
Method(copyUserProperties,void,Public,N,N);
Method(copyInheritedProperties,void,Public,N,N);
Method(setDefaultTarget,void,Public,N,N);
Method(getDefaultTarget,java.lang.String,Public,N,N);
Method(setDefault,void,Public,N,N);
Method(setName,void,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(setDescription,void,Public,N,N);
Method(getDescription,java.lang.String,Public,N,N);
Method(addFilter,void,Public,N,N);
Method(getFilters,java.util.Hashtable,Public,N,N);
Method(setBasedir,void,Public,N,N);
Method(setBaseDir,void,Public,N,N);
Method(getBaseDir,java.io.File,Public,N,N);
Method(setKeepGoingMode,void,Public,N,N);
Method(isKeepGoingMode,boolean,Public,N,N);
Method(getJavaVersion,java.lang.String,Public,Y,N);
Method(setJavaVersionProperty,void,Public,N,N);
Method(setSystemProperties,void,Public,N,N);
Method(addTaskDefinition,void,Public,N,N);
Method(checkTaskClass,void,Public,N,N);
Method(getTaskDefinitions,java.util.Hashtable,Public,N,N);
Method(addDataTypeDefinition,void,Public,N,N);
Method(getDataTypeDefinitions,java.util.Hashtable,Public,N,N);
Method(addTarget,void,Public,N,N);
Method(addTarget$2,void,Public,N,N);
Method(addOrReplaceTarget,void,Public,N,N);
Method(addOrReplaceTarget$2,void,Public,N,N);
Method(getTargets,java.util.Hashtable,Public,N,N);
Method(createTask,org.apache.tools.ant.Task,Public,N,N);
Method(createDataType,java.lang.Object,Public,N,N);
Method(setExecutor,void,Public,N,N);
Method(getExecutor,org.apache.tools.ant.Executor,Public,N,N);
Method(executeTargets,void,Public,N,N);
Method(demuxOutput,void,Public,N,N);
Method(defaultInput,int,Public,N,N);
Method(demuxInput,int,Public,N,N);
Method(demuxFlush,void,Public,N,N);
Method(executeTarget,void,Public,N,N);
Method(executeSortedTargets,void,Public,N,N);
Method(resolveFile,java.io.File,Public,N,N);
Method(resolveFile$2,java.io.File,Public,N,N);
Method(translatePath,java.lang.String,Public,Y,N);
Method(copyFile,void,Public,N,N);
Method(copyFile$2,void,Public,N,N);
Method(copyFile$3,void,Public,N,N);
Method(copyFile$4,void,Public,N,N);
Method(copyFile$5,void,Public,N,N);
Method(copyFile$6,void,Public,N,N);
Method(copyFile$7,void,Public,N,N);
Method(copyFile$8,void,Public,N,N);
Method(setFileLastModified,void,Public,N,N);
Method(toBoolean,boolean,Public,Y,N);
Method(topoSort,java.util.Vector,Public,N,N);
Method(topoSort$2,java.util.Vector,Public,N,N);
Method(topoSort$3,java.util.Vector,Public,N,N);
Method(tsort,void,Private,N,N);
Method(makeCircularException,org.apache.tools.ant.BuildException,Private,Y,N);
Method(inheritIDReferences,void,Public,N,N);
Method(resolveIdReference,java.lang.Object,Private,N,N);
Method(addIdReference,void,Public,N,N);
Method(addReference,void,Public,N,N);
Method(getReferences,java.util.Hashtable,Public,N,N);
Method(getReference,java.lang.Object,Public,N,N);
Method(getElementName,java.lang.String,Public,N,N);
Method(fireBuildStarted,void,Public,N,N);
Method(fireBuildFinished,void,Public,N,N);
Method(fireSubBuildStarted,void,Public,N,N);
Method(fireSubBuildFinished,void,Public,N,N);
Method(fireTargetStarted,void,Protected,N,N);
Method(fireTargetFinished,void,Protected,N,N);
Method(fireTaskStarted,void,Protected,N,N);
Method(fireTaskFinished,void,Protected,N,N);
Method(fireMessageLoggedEvent,void,Private,N,N);
Method(fireMessageLogged,void,Protected,N,N);
Method(fireMessageLogged$2,void,Protected,N,N);
Method(fireMessageLogged$3,void,Protected,N,N);
Method(fireMessageLogged$4,void,Protected,N,N);
Method(fireMessageLogged$5,void,Protected,N,N);
Method(fireMessageLogged$6,void,Protected,N,N);
Method(registerThreadTask,void,Public,N,N);
Method(getThreadTask,org.apache.tools.ant.Task,Public,N,N);
Method(setProjectReference,void,Public,N,N);
Method(getResource,org.apache.tools.ant.types.Resource,Public,N,N);
Method(class$,java.lang.Class,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(setInputHandler,org.apache.tools.ant.input.InputHandler,);
Parameter(setDefaultInputStream,java.io.InputStream,);
Parameter(initSubProject,org.apache.tools.ant.Project,);
Parameter(createClassLoader,org.apache.tools.ant.types.Path,);
Parameter(createClassLoader$2,java.lang.ClassLoader,);
Parameter(createClassLoader$2,org.apache.tools.ant.types.Path,);
Parameter(setCoreLoader,java.lang.ClassLoader,);
Parameter(addBuildListener,org.apache.tools.ant.BuildListener,);
Parameter(removeBuildListener,org.apache.tools.ant.BuildListener,);
Parameter(log,java.lang.String,);
Parameter(log$2,java.lang.String,);
Parameter(log$2,int,);
Parameter(log$3,java.lang.String,);
Parameter(log$3,java.lang.Throwable,);
Parameter(log$3,int,);
Parameter(log$4,org.apache.tools.ant.Task,);
Parameter(log$4,java.lang.String,);
Parameter(log$4,int,);
Parameter(log$5,org.apache.tools.ant.Task,);
Parameter(log$5,java.lang.String,);
Parameter(log$5,java.lang.Throwable,);
Parameter(log$5,int,);
Parameter(log$6,org.apache.tools.ant.Target,);
Parameter(log$6,java.lang.String,);
Parameter(log$6,int,);
Parameter(log$7,org.apache.tools.ant.Target,);
Parameter(log$7,java.lang.String,);
Parameter(log$7,java.lang.Throwable,);
Parameter(log$7,int,);
Parameter(setProperty,java.lang.String,);
Parameter(setProperty,java.lang.String,);
Parameter(setNewProperty,java.lang.String,);
Parameter(setNewProperty,java.lang.String,);
Parameter(setUserProperty,java.lang.String,);
Parameter(setUserProperty,java.lang.String,);
Parameter(setInheritedProperty,java.lang.String,);
Parameter(setInheritedProperty,java.lang.String,);
Parameter(setPropertyInternal,java.lang.String,);
Parameter(setPropertyInternal,java.lang.String,);
Parameter(getProperty,java.lang.String,);
Parameter(replaceProperties,java.lang.String,);
Parameter(getUserProperty,java.lang.String,);
Parameter(copyUserProperties,org.apache.tools.ant.Project,);
Parameter(copyInheritedProperties,org.apache.tools.ant.Project,);
Parameter(setDefaultTarget,java.lang.String,);
Parameter(setDefault,java.lang.String,);
Parameter(setName,java.lang.String,);
Parameter(setDescription,java.lang.String,);
Parameter(addFilter,java.lang.String,);
Parameter(addFilter,java.lang.String,);
Parameter(setBasedir,java.lang.String,);
Parameter(setBaseDir,java.io.File,);
Parameter(setKeepGoingMode,boolean,);
Parameter(addTaskDefinition,java.lang.String,);
Parameter(addTaskDefinition,java.lang.Class,);
Parameter(checkTaskClass,java.lang.Class,);
Parameter(addDataTypeDefinition,java.lang.String,);
Parameter(addDataTypeDefinition,java.lang.Class,);
Parameter(addTarget,org.apache.tools.ant.Target,);
Parameter(addTarget$2,java.lang.String,);
Parameter(addTarget$2,org.apache.tools.ant.Target,);
Parameter(addOrReplaceTarget,org.apache.tools.ant.Target,);
Parameter(addOrReplaceTarget$2,java.lang.String,);
Parameter(addOrReplaceTarget$2,org.apache.tools.ant.Target,);
Parameter(createTask,java.lang.String,);
Parameter(createDataType,java.lang.String,);
Parameter(setExecutor,org.apache.tools.ant.Executor,);
Parameter(executeTargets,java.util.Vector,);
Parameter(demuxOutput,java.lang.String,);
Parameter(demuxOutput,boolean,);
Parameter(defaultInput,byte[],);
Parameter(defaultInput,int,);
Parameter(defaultInput,int,);
Parameter(demuxInput,byte[],);
Parameter(demuxInput,int,);
Parameter(demuxInput,int,);
Parameter(demuxFlush,java.lang.String,);
Parameter(demuxFlush,boolean,);
Parameter(executeTarget,java.lang.String,);
Parameter(executeSortedTargets,java.util.Vector,);
Parameter(resolveFile,java.lang.String,);
Parameter(resolveFile,java.io.File,);
Parameter(resolveFile$2,java.lang.String,);
Parameter(translatePath,java.lang.String,);
Parameter(copyFile,java.lang.String,);
Parameter(copyFile,java.lang.String,);
Parameter(copyFile$2,java.lang.String,);
Parameter(copyFile$2,java.lang.String,);
Parameter(copyFile$2,boolean,);
Parameter(copyFile$3,java.lang.String,);
Parameter(copyFile$3,java.lang.String,);
Parameter(copyFile$3,boolean,);
Parameter(copyFile$3,boolean,);
Parameter(copyFile$4,java.lang.String,);
Parameter(copyFile$4,java.lang.String,);
Parameter(copyFile$4,boolean,);
Parameter(copyFile$4,boolean,);
Parameter(copyFile$4,boolean,);
Parameter(copyFile$5,java.io.File,);
Parameter(copyFile$5,java.io.File,);
Parameter(copyFile$6,java.io.File,);
Parameter(copyFile$6,java.io.File,);
Parameter(copyFile$6,boolean,);
Parameter(copyFile$7,java.io.File,);
Parameter(copyFile$7,java.io.File,);
Parameter(copyFile$7,boolean,);
Parameter(copyFile$7,boolean,);
Parameter(copyFile$8,java.io.File,);
Parameter(copyFile$8,java.io.File,);
Parameter(copyFile$8,boolean,);
Parameter(copyFile$8,boolean,);
Parameter(copyFile$8,boolean,);
Parameter(setFileLastModified,java.io.File,);
Parameter(setFileLastModified,long,);
Parameter(toBoolean,java.lang.String,);
Parameter(topoSort,java.lang.String,);
Parameter(topoSort,java.util.Hashtable,);
Parameter(topoSort$2,java.lang.String,);
Parameter(topoSort$2,java.util.Hashtable,);
Parameter(topoSort$2,boolean,);
Parameter(topoSort$3,java.lang.String[],);
Parameter(topoSort$3,java.util.Hashtable,);
Parameter(topoSort$3,boolean,);
Parameter(tsort,java.lang.String,);
Parameter(tsort,java.util.Hashtable,);
Parameter(tsort,java.util.Hashtable,);
Parameter(tsort,java.util.Stack,);
Parameter(tsort,java.util.Vector,);
Parameter(makeCircularException,java.lang.String,);
Parameter(makeCircularException,java.util.Stack,);
Parameter(inheritIDReferences,org.apache.tools.ant.Project,);
Parameter(resolveIdReference,java.lang.String,);
Parameter(resolveIdReference,org.apache.tools.ant.Project,);
Parameter(addIdReference,java.lang.String,);
Parameter(addIdReference,java.lang.Object,);
Parameter(addReference,java.lang.String,);
Parameter(addReference,java.lang.Object,);
Parameter(getReference,java.lang.String,);
Parameter(getElementName,java.lang.Object,);
Parameter(fireBuildFinished,java.lang.Throwable,);
Parameter(fireSubBuildFinished,java.lang.Throwable,);
Parameter(fireTargetStarted,org.apache.tools.ant.Target,);
Parameter(fireTargetFinished,org.apache.tools.ant.Target,);
Parameter(fireTargetFinished,java.lang.Throwable,);
Parameter(fireTaskStarted,org.apache.tools.ant.Task,);
Parameter(fireTaskFinished,org.apache.tools.ant.Task,);
Parameter(fireTaskFinished,java.lang.Throwable,);
Parameter(fireMessageLoggedEvent,org.apache.tools.ant.BuildEvent,);
Parameter(fireMessageLoggedEvent,java.lang.String,);
Parameter(fireMessageLoggedEvent,int,);
Parameter(fireMessageLogged,org.apache.tools.ant.Project,);
Parameter(fireMessageLogged,java.lang.String,);
Parameter(fireMessageLogged,int,);
Parameter(fireMessageLogged$2,org.apache.tools.ant.Project,);
Parameter(fireMessageLogged$2,java.lang.String,);
Parameter(fireMessageLogged$2,java.lang.Throwable,);
Parameter(fireMessageLogged$2,int,);
Parameter(fireMessageLogged$3,org.apache.tools.ant.Target,);
Parameter(fireMessageLogged$3,java.lang.String,);
Parameter(fireMessageLogged$3,int,);
Parameter(fireMessageLogged$4,org.apache.tools.ant.Target,);
Parameter(fireMessageLogged$4,java.lang.String,);
Parameter(fireMessageLogged$4,java.lang.Throwable,);
Parameter(fireMessageLogged$4,int,);
Parameter(fireMessageLogged$5,org.apache.tools.ant.Task,);
Parameter(fireMessageLogged$5,java.lang.String,);
Parameter(fireMessageLogged$5,int,);
Parameter(fireMessageLogged$6,org.apache.tools.ant.Task,);
Parameter(fireMessageLogged$6,java.lang.String,);
Parameter(fireMessageLogged$6,java.lang.Throwable,);
Parameter(fireMessageLogged$6,int,);
Parameter(registerThreadTask,java.lang.Thread,);
Parameter(registerThreadTask,org.apache.tools.ant.Task,);
Parameter(getThreadTask,java.lang.Thread,);
Parameter(setProjectReference,java.lang.Object,);
Parameter(getResource,java.lang.String,);
Parameter(class$,java.lang.String,);
Realization(org.apache.tools.ant.types.ResourceFactory);
Composition(org.apache.tools.ant.util.FileUtils);
Composition(org.apache.tools.ant.Project);
Composition(org.apache.tools.ant.types.FilterSet);
Composition(org.apache.tools.ant.types.FilterSetCollection);
Composition(org.apache.tools.ant.input.InputHandler);
Call(METHOD,org.apache.tools.ant.Project,createSubProject --> <init>,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,createSubProject --> initSubProject,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,initSubProject --> getDefaultInputStream,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,initSubProject --> setDefaultInputStream,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,initSubProject --> isKeepGoingMode,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,initSubProject --> setKeepGoingMode,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,initSubProject --> getExecutor,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,initSubProject --> setExecutor,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,init --> initProperties,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,initProperties --> setJavaVersionProperty,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,initProperties --> setSystemProperties,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,initProperties --> setPropertyInternal,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,initProperties --> setAntLib,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,setAntLib --> class$,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,setAntLib --> setPropertyInternal,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,addBuildListener --> getBuildListeners,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,removeBuildListener --> getBuildListeners,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,log --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,log$2 --> log$3,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,log$3 --> fireMessageLogged$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,log$4 --> fireMessageLogged$6,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,log$5 --> fireMessageLogged$6,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,log$6 --> log$7,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,log$7 --> fireMessageLogged$4,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,setName --> setUserProperty,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,setBasedir --> setBaseDir,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,setBaseDir --> setPropertyInternal,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,setBaseDir --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,getBaseDir --> setBasedir,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,setJavaVersionProperty --> setPropertyInternal,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,setJavaVersionProperty --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,setSystemProperties --> setPropertyInternal,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,checkTaskClass --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,checkTaskClass --> class$,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,addTarget --> addTarget$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,addTarget$2 --> addOrReplaceTarget$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,addOrReplaceTarget --> addOrReplaceTarget$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,addOrReplaceTarget$2 --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,setExecutor --> addReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,getExecutor --> getReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,getExecutor --> getProperty,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,getExecutor --> class$,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,getExecutor --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,getExecutor --> setExecutor,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,executeTargets --> getExecutor,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,demuxOutput --> getThreadTask,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,demuxOutput --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,demuxInput --> getThreadTask,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,demuxInput --> defaultInput,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,demuxFlush --> getThreadTask,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,demuxFlush --> fireMessageLogged,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,executeTarget --> topoSort$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,executeTarget --> executeSortedTargets,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,executeSortedTargets --> log$6,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,setFileLastModified --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,topoSort --> topoSort$3,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,topoSort$2 --> topoSort$3,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,topoSort$3 --> tsort,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,topoSort$3 --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,tsort --> tsort,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,tsort --> makeCircularException,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,resolveIdReference --> resolveIdReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,resolveIdReference --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,addReference --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,getReference --> resolveIdReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,getReference --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,fireTaskStarted --> registerThreadTask,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,fireTaskFinished --> registerThreadTask,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,fireMessageLogged --> fireMessageLogged$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,fireMessageLogged$2 --> fireMessageLoggedEvent,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,fireMessageLogged$3 --> fireMessageLogged$4,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,fireMessageLogged$4 --> fireMessageLoggedEvent,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,fireMessageLogged$5 --> fireMessageLogged$6,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,fireMessageLogged$6 --> fireMessageLoggedEvent,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,setProjectReference --> class$,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Project,getResource --> getBaseDir,org.apache.tools.ant.Project,);
Call(ATTRIBUTE,org.apache.tools.ant.Project,setInputHandler --> inputHandler,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,setDefaultInputStream --> defaultInputStream,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,getDefaultInputStream --> defaultInputStream,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,getInputHandler --> inputHandler,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,<init> --> globalFilterSet,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,<init> --> references,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,<init> --> idReferences,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,<init> --> parentIdProject,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,<init> --> targets,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,<init> --> globalFilterSet,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,<init> --> globalFilters,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,<init> --> listeners,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,<init> --> coreLoader,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,<init> --> threadTasks,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,<init> --> threadGroupTasks,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,<init> --> inputHandler,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,<init> --> defaultInputStream,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,<init> --> keepGoingMode,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,<init> --> loggingMessage,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,setAntLib --> class$org$apache$tools$ant$Project,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,setAntLib --> class$org$apache$tools$ant$Project,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,setCoreLoader --> coreLoader,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,getCoreLoader --> coreLoader,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,addBuildListener --> listeners,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,addBuildListener --> listeners,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,removeBuildListener --> listeners,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,getBuildListeners --> listeners,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,getGlobalFilterSet --> globalFilterSet,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,setDefaultTarget --> defaultTarget,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,getDefaultTarget --> defaultTarget,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,setDefault --> defaultTarget,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,setName --> name,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,getName --> name,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,setDescription --> description,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,getDescription --> description,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,getDescription --> description,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,addFilter --> globalFilterSet,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,getFilters --> globalFilterSet,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,setBaseDir --> FILE_UTILS,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,setBaseDir --> baseDir,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,setBaseDir --> baseDir,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,getBaseDir --> baseDir,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,setKeepGoingMode --> keepGoingMode,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,isKeepGoingMode --> keepGoingMode,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,checkTaskClass --> class$org$apache$tools$ant$Task,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,checkTaskClass --> class$org$apache$tools$ant$Task,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,addTarget$2 --> targets,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,addOrReplaceTarget$2 --> targets,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,getTargets --> targets,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,getExecutor --> class$org$apache$tools$ant$helper$DefaultExecutor,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,getExecutor --> coreLoader,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,getExecutor --> class$org$apache$tools$ant$helper$DefaultExecutor,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,defaultInput --> defaultInputStream,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,executeTarget --> targets,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,executeSortedTargets --> keepGoingMode,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,resolveFile --> FILE_UTILS,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,resolveFile$2 --> FILE_UTILS,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,resolveFile$2 --> baseDir,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,copyFile --> FILE_UTILS,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,copyFile$2 --> FILE_UTILS,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,copyFile$2 --> globalFilters,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,copyFile$3 --> FILE_UTILS,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,copyFile$3 --> globalFilters,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,copyFile$4 --> FILE_UTILS,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,copyFile$4 --> globalFilters,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,copyFile$5 --> FILE_UTILS,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,copyFile$6 --> FILE_UTILS,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,copyFile$6 --> globalFilters,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,copyFile$7 --> FILE_UTILS,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,copyFile$7 --> globalFilters,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,copyFile$8 --> FILE_UTILS,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,copyFile$8 --> globalFilters,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,setFileLastModified --> FILE_UTILS,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,tsort --> name,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,inheritIDReferences --> parentIdProject,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,resolveIdReference --> idReferences,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,resolveIdReference --> parentIdProject,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,resolveIdReference --> LINE_SEP,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,addIdReference --> idReferences,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,addReference --> references,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,getReferences --> references,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,getReference --> references,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,fireBuildStarted --> listeners,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,fireBuildFinished --> listeners,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,fireSubBuildStarted --> listeners,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,fireSubBuildFinished --> listeners,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,fireTargetStarted --> listeners,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,fireTargetFinished --> listeners,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,fireTaskStarted --> listeners,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,fireTaskFinished --> listeners,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,fireMessageLoggedEvent --> loggingMessage,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,fireMessageLoggedEvent --> listeners,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,fireMessageLoggedEvent --> loggingMessage,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,registerThreadTask --> threadTasks,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,registerThreadTask --> threadGroupTasks,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,getThreadTask --> threadTasks,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,getThreadTask --> threadGroupTasks,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,setProjectReference --> class$org$apache$tools$ant$Project,org.apache.tools.ant.Project,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Project,setProjectReference --> class$org$apache$tools$ant$Project,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,<clinit> --> LINE_SEP,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,<clinit> --> FILE_UTILS,org.apache.tools.ant.Project,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Project,fireMessageLoggedEvent --> LINE_SEP,org.apache.tools.ant.util.StringUtils,READ);
Call(METHOD,org.apache.tools.ant.Project,<init> --> <init>,org.apache.tools.ant.Project$AntRefTable,);
Call(METHOD,org.apache.tools.ant.Project,<init> --> <init>,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.Project,<init> --> setProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.Project,<init> --> <init>$2,org.apache.tools.ant.types.FilterSetCollection,);
Call(METHOD,org.apache.tools.ant.Project,<init> --> <init>,org.apache.tools.ant.input.DefaultInputHandler,);
Call(METHOD,org.apache.tools.ant.Project,initSubProject --> getComponentHelper,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.Project,initSubProject --> initSubProject,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.Project,initSubProject --> getSubProjectExecutor,org.apache.tools.ant.Executor,);
Call(METHOD,org.apache.tools.ant.Project,init --> getComponentHelper,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.Project,init --> initDefaultDefinitions,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.Project,initProperties --> getAntVersion,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Project,createClassLoader --> <init>,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.Project,createClassLoader$2 --> <init>,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.Project,setProperty --> getPropertyHelper,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,setProperty --> setProperty,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,setNewProperty --> getPropertyHelper,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,setNewProperty --> setNewProperty,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,setUserProperty --> getPropertyHelper,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,setUserProperty --> setUserProperty,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,setInheritedProperty --> getPropertyHelper,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,setInheritedProperty --> setInheritedProperty,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,setPropertyInternal --> getPropertyHelper,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,setPropertyInternal --> setProperty,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,getProperty --> getPropertyHelper,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,getProperty --> getProperty,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,replaceProperties --> getPropertyHelper,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,replaceProperties --> replaceProperties,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,getUserProperty --> getPropertyHelper,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,getUserProperty --> getUserProperty,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,getProperties --> getPropertyHelper,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,getProperties --> getProperties,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,getUserProperties --> getPropertyHelper,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,getUserProperties --> getUserProperties,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,copyUserProperties --> getPropertyHelper,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,copyUserProperties --> copyUserProperties,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,copyInheritedProperties --> getPropertyHelper,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,copyInheritedProperties --> copyInheritedProperties,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,getDescription --> getDescription,org.apache.tools.ant.types.Description,);
Call(METHOD,org.apache.tools.ant.Project,addFilter --> <init>,org.apache.tools.ant.types.FilterSet$Filter,);
Call(METHOD,org.apache.tools.ant.Project,addFilter --> addFilter,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.Project,getFilters --> getFilterHash,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.Project,setBaseDir --> normalize,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.Project,setBaseDir --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.Project,getBaseDir --> printStackTrace,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.Project,getJavaVersion --> getJavaVersion,org.apache.tools.ant.util.JavaEnvUtils,);
Call(METHOD,org.apache.tools.ant.Project,setJavaVersionProperty --> getJavaVersion,org.apache.tools.ant.util.JavaEnvUtils,);
Call(METHOD,org.apache.tools.ant.Project,setJavaVersionProperty --> isJavaVersion,org.apache.tools.ant.util.JavaEnvUtils,);
Call(METHOD,org.apache.tools.ant.Project,setJavaVersionProperty --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.Project,addTaskDefinition --> getComponentHelper,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.Project,addTaskDefinition --> addTaskDefinition,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.Project,checkTaskClass --> getComponentHelper,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.Project,checkTaskClass --> checkTaskClass,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.Project,checkTaskClass --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.Project,checkTaskClass --> <init>$3,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.Project,checkTaskClass --> checkTaskClass,org.apache.tools.ant.TaskAdapter,);
Call(METHOD,org.apache.tools.ant.Project,getTaskDefinitions --> getComponentHelper,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.Project,getTaskDefinitions --> getTaskDefinitions,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.Project,addDataTypeDefinition --> getComponentHelper,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.Project,addDataTypeDefinition --> addDataTypeDefinition,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.Project,getDataTypeDefinitions --> getComponentHelper,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.Project,getDataTypeDefinitions --> getDataTypeDefinitions,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.Project,addTarget --> getName,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.Project,addTarget$2 --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.Project,addOrReplaceTarget --> getName,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.Project,addOrReplaceTarget$2 --> setProject,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.Project,createTask --> getComponentHelper,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.Project,createTask --> createTask,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.Project,createDataType --> getComponentHelper,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.Project,createDataType --> createDataType,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.Project,getExecutor --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.Project,executeTargets --> executeTargets,org.apache.tools.ant.Executor,);
Call(METHOD,org.apache.tools.ant.Project,demuxOutput --> handleErrorOutput,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Project,demuxOutput --> handleOutput,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Project,demuxInput --> handleInput,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Project,demuxFlush --> handleErrorFlush,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Project,demuxFlush --> handleFlush,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Project,executeTarget --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.Project,executeSortedTargets --> getDependencies,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.Project,executeSortedTargets --> getName,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.Project,executeSortedTargets --> performTasks,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.Project,executeSortedTargets --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.Project,resolveFile --> resolveFile,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.Project,resolveFile$2 --> resolveFile,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.Project,translatePath --> translatePath,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.Project,copyFile --> copyFile,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.Project,copyFile$2 --> copyFile$2,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.Project,copyFile$3 --> copyFile$3,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.Project,copyFile$4 --> copyFile$4,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.Project,copyFile$5 --> copyFile$8,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.Project,copyFile$6 --> copyFile$9,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.Project,copyFile$7 --> copyFile$10,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.Project,copyFile$8 --> copyFile$11,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.Project,setFileLastModified --> setFileLastModified,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.Project,tsort --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.Project,tsort --> getDependencies,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.Project,makeCircularException --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.Project,resolveIdReference --> copy,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.Project,resolveIdReference --> maybeConfigure,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.Project,resolveIdReference --> getRealThing,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.Project,addReference --> access$000,org.apache.tools.ant.Project$AntRefTable,);
Call(METHOD,org.apache.tools.ant.Project,getReference --> getPropertyHelper,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,getReference --> parsePropertyString,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.Project,getElementName --> getComponentHelper,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.Project,getElementName --> getElementName,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.Project,fireBuildStarted --> <init>,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.Project,fireBuildStarted --> buildStarted,org.apache.tools.ant.BuildListener,);
Call(METHOD,org.apache.tools.ant.Project,fireBuildFinished --> <init>,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.Project,fireBuildFinished --> setException,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.Project,fireBuildFinished --> buildFinished,org.apache.tools.ant.BuildListener,);
Call(METHOD,org.apache.tools.ant.Project,fireBuildFinished --> clearCache,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.Project,fireSubBuildStarted --> <init>,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.Project,fireSubBuildStarted --> subBuildStarted,org.apache.tools.ant.SubBuildListener,);
Call(METHOD,org.apache.tools.ant.Project,fireSubBuildFinished --> <init>,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.Project,fireSubBuildFinished --> setException,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.Project,fireSubBuildFinished --> subBuildFinished,org.apache.tools.ant.SubBuildListener,);
Call(METHOD,org.apache.tools.ant.Project,fireTargetStarted --> <init>$2,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.Project,fireTargetStarted --> targetStarted,org.apache.tools.ant.BuildListener,);
Call(METHOD,org.apache.tools.ant.Project,fireTargetFinished --> <init>$2,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.Project,fireTargetFinished --> setException,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.Project,fireTargetFinished --> targetFinished,org.apache.tools.ant.BuildListener,);
Call(METHOD,org.apache.tools.ant.Project,fireTaskStarted --> <init>$3,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.Project,fireTaskStarted --> taskStarted,org.apache.tools.ant.BuildListener,);
Call(METHOD,org.apache.tools.ant.Project,fireTaskFinished --> <init>$3,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.Project,fireTaskFinished --> setException,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.Project,fireTaskFinished --> taskFinished,org.apache.tools.ant.BuildListener,);
Call(METHOD,org.apache.tools.ant.Project,fireMessageLoggedEvent --> setMessage,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.Project,fireMessageLoggedEvent --> messageLogged,org.apache.tools.ant.BuildListener,);
Call(METHOD,org.apache.tools.ant.Project,fireMessageLogged$2 --> <init>,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.Project,fireMessageLogged$2 --> setException,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.Project,fireMessageLogged$4 --> <init>$2,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.Project,fireMessageLogged$4 --> setException,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.Project,fireMessageLogged$6 --> <init>$3,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.Project,fireMessageLogged$6 --> setException,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.Project,setProjectReference --> setProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.Project,getResource --> <init>$2,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.Project,<clinit> --> getFileUtils,org.apache.tools.ant.util.FileUtils,);
EndClass 3
StartClass 4
Class(org.apache.tools.ant.BuildLogger,Y,Y,Public);
Method(setMessageOutputLevel,void,Public,N,Y);
Method(setOutputPrintStream,void,Public,N,Y);
Method(setEmacsMode,void,Public,N,Y);
Method(setErrorPrintStream,void,Public,N,Y);
Parameter(setMessageOutputLevel,int,);
Parameter(setOutputPrintStream,java.io.PrintStream,);
Parameter(setEmacsMode,boolean,);
Parameter(setErrorPrintStream,java.io.PrintStream,);
Realization(org.apache.tools.ant.BuildListener);
EndClass 4
StartClass 5
Class(org.apache.tools.ant.BuildListener,Y,Y,Public);
Method(buildStarted,void,Public,N,Y);
Method(buildFinished,void,Public,N,Y);
Method(targetStarted,void,Public,N,Y);
Method(targetFinished,void,Public,N,Y);
Method(taskStarted,void,Public,N,Y);
Method(taskFinished,void,Public,N,Y);
Method(messageLogged,void,Public,N,Y);
Parameter(buildStarted,org.apache.tools.ant.BuildEvent,);
Parameter(buildFinished,org.apache.tools.ant.BuildEvent,);
Parameter(targetStarted,org.apache.tools.ant.BuildEvent,);
Parameter(targetFinished,org.apache.tools.ant.BuildEvent,);
Parameter(taskStarted,org.apache.tools.ant.BuildEvent,);
Parameter(taskFinished,org.apache.tools.ant.BuildEvent,);
Parameter(messageLogged,org.apache.tools.ant.BuildEvent,);
EndClass 5
StartClass 6
Class(org.apache.tools.ant.ProjectHelper,N,N,Public);
Attribute(ANT_CORE_URI,java.lang.String,Public,Y,Y,);
Attribute(ANT_CURRENT_URI,java.lang.String,Public,Y,Y,);
Attribute(ANTLIB_URI,java.lang.String,Public,Y,Y,);
Attribute(ANT_TYPE,java.lang.String,Public,Y,Y,);
Attribute(HELPER_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(SERVICE_ID,java.lang.String,Public,Y,Y,);
Attribute(PROJECTHELPER_REFERENCE,java.lang.String,Public,Y,Y,);
Attribute(importStack,java.util.Vector,Private,N,N,);
Method(configureProject,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Method(getImportStack,java.util.Vector,Public,N,N);
Method(parse,void,Public,N,N);
Method(getProjectHelper,org.apache.tools.ant.ProjectHelper,Public,Y,N);
Method(newHelper,org.apache.tools.ant.ProjectHelper,Private,Y,N);
Method(getContextClassLoader,java.lang.ClassLoader,Public,Y,N);
Method(configure,void,Public,Y,N);
Method(addText,void,Public,Y,N);
Method(addText$2,void,Public,Y,N);
Method(storeChild,void,Public,Y,N);
Method(replaceProperties,java.lang.String,Public,Y,N);
Method(replaceProperties$2,java.lang.String,Public,Y,N);
Method(parsePropertyString,void,Public,Y,N);
Method(genComponentName,java.lang.String,Public,Y,N);
Method(extractUriFromComponentName,java.lang.String,Public,Y,N);
Method(extractNameFromComponentName,java.lang.String,Public,Y,N);
Method(addLocationToBuildException,org.apache.tools.ant.BuildException,Public,Y,N);
Parameter(configureProject,org.apache.tools.ant.Project,);
Parameter(configureProject,java.io.File,);
Parameter(parse,org.apache.tools.ant.Project,);
Parameter(parse,java.lang.Object,);
Parameter(newHelper,java.lang.String,);
Parameter(configure,java.lang.Object,);
Parameter(configure,org.xml.sax.AttributeList,);
Parameter(configure,org.apache.tools.ant.Project,);
Parameter(addText,org.apache.tools.ant.Project,);
Parameter(addText,java.lang.Object,);
Parameter(addText,char[],);
Parameter(addText,int,);
Parameter(addText,int,);
Parameter(addText$2,org.apache.tools.ant.Project,);
Parameter(addText$2,java.lang.Object,);
Parameter(addText$2,java.lang.String,);
Parameter(storeChild,org.apache.tools.ant.Project,);
Parameter(storeChild,java.lang.Object,);
Parameter(storeChild,java.lang.Object,);
Parameter(storeChild,java.lang.String,);
Parameter(replaceProperties,org.apache.tools.ant.Project,);
Parameter(replaceProperties,java.lang.String,);
Parameter(replaceProperties$2,org.apache.tools.ant.Project,);
Parameter(replaceProperties$2,java.lang.String,);
Parameter(replaceProperties$2,java.util.Hashtable,);
Parameter(parsePropertyString,java.lang.String,);
Parameter(parsePropertyString,java.util.Vector,);
Parameter(parsePropertyString,java.util.Vector,);
Parameter(genComponentName,java.lang.String,);
Parameter(genComponentName,java.lang.String,);
Parameter(extractUriFromComponentName,java.lang.String,);
Parameter(extractNameFromComponentName,java.lang.String,);
Parameter(addLocationToBuildException,org.apache.tools.ant.BuildException,);
Parameter(addLocationToBuildException,org.apache.tools.ant.Location,);
SubClass(org.apache.tools.ant.helper.ProjectHelper2);
SubClass(org.apache.tools.ant.helper.ProjectHelperImpl);
Call(METHOD,org.apache.tools.ant.ProjectHelper,configureProject --> getProjectHelper,org.apache.tools.ant.ProjectHelper,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,configureProject --> parse,org.apache.tools.ant.ProjectHelper,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,getProjectHelper --> newHelper,org.apache.tools.ant.ProjectHelper,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,configure --> replaceProperties$2,org.apache.tools.ant.ProjectHelper,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,addText --> addText$2,org.apache.tools.ant.ProjectHelper,);
Call(ATTRIBUTE,org.apache.tools.ant.ProjectHelper,<init> --> importStack,org.apache.tools.ant.ProjectHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ProjectHelper,getImportStack --> importStack,org.apache.tools.ant.ProjectHelper,READ);
Call(METHOD,org.apache.tools.ant.ProjectHelper,configureProject --> addReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,parse --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,getProjectHelper --> getContextClassLoader,org.apache.tools.ant.util.LoaderUtils,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,getProjectHelper --> <init>,org.apache.tools.ant.helper.ProjectHelper2,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,newHelper --> getContextClassLoader,org.apache.tools.ant.util.LoaderUtils,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,newHelper --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,getContextClassLoader --> isContextLoaderAvailable,org.apache.tools.ant.util.LoaderUtils,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,getContextClassLoader --> getContextClassLoader,org.apache.tools.ant.util.LoaderUtils,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,configure --> getProxy,org.apache.tools.ant.TypeAdapter,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,configure --> getHelper$2,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,configure --> getProperties,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,configure --> setAttribute,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,addText$2 --> getProxy,org.apache.tools.ant.TypeAdapter,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,addText$2 --> getHelper$2,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,addText$2 --> addText,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,storeChild --> getHelper$2,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,storeChild --> storeElement,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,replaceProperties --> replaceProperties,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,replaceProperties$2 --> getPropertyHelper,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,replaceProperties$2 --> replaceProperties,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,parsePropertyString --> parsePropertyStringDefault,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,addLocationToBuildException --> getLocation,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,addLocationToBuildException --> toString,org.apache.tools.ant.Location,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,addLocationToBuildException --> <init>$3,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.ProjectHelper,addLocationToBuildException --> <init>$4,org.apache.tools.ant.BuildException,);
EndClass 6
StartClass 7
Class(org.apache.tools.ant.DefaultLogger,N,N,Public);
Attribute(LEFT_COLUMN_SIZE,int,Public,Y,Y,);
Attribute(out,java.io.PrintStream,Protected,N,N,);
Attribute(err,java.io.PrintStream,Protected,N,N,);
Attribute(msgOutputLevel,int,Protected,N,N,);
Attribute(startTime,long,Private,N,N,);
Attribute(lSep,java.lang.String,Protected,Y,Y,);
Attribute(emacsMode,boolean,Protected,N,N,);
Method(<init>,void,Public,N,N);
Method(setMessageOutputLevel,void,Public,N,N);
Method(setOutputPrintStream,void,Public,N,N);
Method(setErrorPrintStream,void,Public,N,N);
Method(setEmacsMode,void,Public,N,N);
Method(buildStarted,void,Public,N,N);
Method(buildFinished,void,Public,N,N);
Method(getBuildFailedMessage,java.lang.String,Protected,N,N);
Method(getBuildSuccessfulMessage,java.lang.String,Protected,N,N);
Method(targetStarted,void,Public,N,N);
Method(targetFinished,void,Public,N,N);
Method(taskStarted,void,Public,N,N);
Method(taskFinished,void,Public,N,N);
Method(messageLogged,void,Public,N,N);
Method(formatTime,java.lang.String,Protected,Y,N);
Method(printMessage,void,Protected,N,N);
Method(log,void,Protected,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(setMessageOutputLevel,int,);
Parameter(setOutputPrintStream,java.io.PrintStream,);
Parameter(setErrorPrintStream,java.io.PrintStream,);
Parameter(setEmacsMode,boolean,);
Parameter(buildStarted,org.apache.tools.ant.BuildEvent,);
Parameter(buildFinished,org.apache.tools.ant.BuildEvent,);
Parameter(targetStarted,org.apache.tools.ant.BuildEvent,);
Parameter(targetFinished,org.apache.tools.ant.BuildEvent,);
Parameter(taskStarted,org.apache.tools.ant.BuildEvent,);
Parameter(taskFinished,org.apache.tools.ant.BuildEvent,);
Parameter(messageLogged,org.apache.tools.ant.BuildEvent,);
Parameter(formatTime,long,);
Parameter(printMessage,java.lang.String,);
Parameter(printMessage,java.io.PrintStream,);
Parameter(printMessage,int,);
Parameter(log,java.lang.String,);
Realization(org.apache.tools.ant.BuildLogger);
Call(METHOD,org.apache.tools.ant.DefaultLogger,buildFinished --> getBuildSuccessfulMessage,org.apache.tools.ant.DefaultLogger,);
Call(METHOD,org.apache.tools.ant.DefaultLogger,buildFinished --> getBuildFailedMessage,org.apache.tools.ant.DefaultLogger,);
Call(METHOD,org.apache.tools.ant.DefaultLogger,buildFinished --> formatTime,org.apache.tools.ant.DefaultLogger,);
Call(METHOD,org.apache.tools.ant.DefaultLogger,buildFinished --> printMessage,org.apache.tools.ant.DefaultLogger,);
Call(METHOD,org.apache.tools.ant.DefaultLogger,buildFinished --> log,org.apache.tools.ant.DefaultLogger,);
Call(METHOD,org.apache.tools.ant.DefaultLogger,targetStarted --> printMessage,org.apache.tools.ant.DefaultLogger,);
Call(METHOD,org.apache.tools.ant.DefaultLogger,targetStarted --> log,org.apache.tools.ant.DefaultLogger,);
Call(METHOD,org.apache.tools.ant.DefaultLogger,messageLogged --> printMessage,org.apache.tools.ant.DefaultLogger,);
Call(METHOD,org.apache.tools.ant.DefaultLogger,messageLogged --> log,org.apache.tools.ant.DefaultLogger,);
Call(ATTRIBUTE,org.apache.tools.ant.DefaultLogger,<init> --> msgOutputLevel,org.apache.tools.ant.DefaultLogger,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DefaultLogger,<init> --> startTime,org.apache.tools.ant.DefaultLogger,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DefaultLogger,<init> --> emacsMode,org.apache.tools.ant.DefaultLogger,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DefaultLogger,setMessageOutputLevel --> msgOutputLevel,org.apache.tools.ant.DefaultLogger,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DefaultLogger,setOutputPrintStream --> out,org.apache.tools.ant.DefaultLogger,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DefaultLogger,setErrorPrintStream --> err,org.apache.tools.ant.DefaultLogger,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DefaultLogger,setEmacsMode --> emacsMode,org.apache.tools.ant.DefaultLogger,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DefaultLogger,buildStarted --> startTime,org.apache.tools.ant.DefaultLogger,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DefaultLogger,buildFinished --> msgOutputLevel,org.apache.tools.ant.DefaultLogger,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DefaultLogger,buildFinished --> lSep,org.apache.tools.ant.DefaultLogger,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DefaultLogger,buildFinished --> startTime,org.apache.tools.ant.DefaultLogger,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DefaultLogger,buildFinished --> out,org.apache.tools.ant.DefaultLogger,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DefaultLogger,buildFinished --> err,org.apache.tools.ant.DefaultLogger,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DefaultLogger,targetStarted --> msgOutputLevel,org.apache.tools.ant.DefaultLogger,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DefaultLogger,targetStarted --> out,org.apache.tools.ant.DefaultLogger,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DefaultLogger,messageLogged --> msgOutputLevel,org.apache.tools.ant.DefaultLogger,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DefaultLogger,messageLogged --> emacsMode,org.apache.tools.ant.DefaultLogger,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DefaultLogger,messageLogged --> out,org.apache.tools.ant.DefaultLogger,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DefaultLogger,messageLogged --> err,org.apache.tools.ant.DefaultLogger,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DefaultLogger,<clinit> --> lSep,org.apache.tools.ant.DefaultLogger,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DefaultLogger,buildFinished --> LINE_SEP,org.apache.tools.ant.util.StringUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DefaultLogger,targetStarted --> LINE_SEP,org.apache.tools.ant.util.StringUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DefaultLogger,messageLogged --> LINE_SEP,org.apache.tools.ant.util.StringUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DefaultLogger,<clinit> --> LINE_SEP,org.apache.tools.ant.util.StringUtils,READ);
Call(METHOD,org.apache.tools.ant.DefaultLogger,buildFinished --> getException,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.DefaultLogger,buildFinished --> getStackTrace,org.apache.tools.ant.util.StringUtils,);
Call(METHOD,org.apache.tools.ant.DefaultLogger,targetStarted --> getTarget,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.DefaultLogger,targetStarted --> getName,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.DefaultLogger,targetStarted --> getPriority,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.DefaultLogger,messageLogged --> getPriority,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.DefaultLogger,messageLogged --> getTask,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.DefaultLogger,messageLogged --> getTaskName,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.DefaultLogger,messageLogged --> getMessage,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.DefaultLogger,messageLogged --> getException,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.DefaultLogger,messageLogged --> getStackTrace,org.apache.tools.ant.util.StringUtils,);
Call(METHOD,org.apache.tools.ant.DefaultLogger,formatTime --> formatElapsedTime,org.apache.tools.ant.util.DateUtils,);
EndClass 7
StartClass 8
Class(org.apache.tools.ant.ExitStatusException,N,N,Public);
Attribute(status,int,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(getStatus,int,Public,N,N);
Parameter(<init>,int,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,int,);
Parameter(<init>$3,java.lang.String,);
Parameter(<init>$3,int,);
Parameter(<init>$3,org.apache.tools.ant.Location,);
SuperClass(org.apache.tools.ant.BuildException);
Generalization(org.apache.tools.ant.BuildException);
Call(ATTRIBUTE,org.apache.tools.ant.ExitStatusException,<init> --> status,org.apache.tools.ant.ExitStatusException,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ExitStatusException,<init>$2 --> status,org.apache.tools.ant.ExitStatusException,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ExitStatusException,<init>$3 --> status,org.apache.tools.ant.ExitStatusException,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ExitStatusException,getStatus --> status,org.apache.tools.ant.ExitStatusException,READ);
Call(METHOD,org.apache.tools.ant.ExitStatusException,<init> --> <init>,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.ExitStatusException,<init>$2 --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.ExitStatusException,<init>$3 --> <init>$6,org.apache.tools.ant.BuildException,);
EndClass 8
StartClass 9
Class(org.apache.tools.ant.DemuxInputStream,N,N,Public);
Attribute(project,org.apache.tools.ant.Project,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(read,int,Public,N,N);
Method(read$2,int,Public,N,N);
Parameter(<init>,org.apache.tools.ant.Project,);
Parameter(read$2,byte[],);
Parameter(read$2,int,);
Parameter(read$2,int,);
Composition(org.apache.tools.ant.Project);
Call(ATTRIBUTE,org.apache.tools.ant.DemuxInputStream,<init> --> project,org.apache.tools.ant.DemuxInputStream,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DemuxInputStream,read --> project,org.apache.tools.ant.DemuxInputStream,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DemuxInputStream,read$2 --> project,org.apache.tools.ant.DemuxInputStream,READ);
Call(METHOD,org.apache.tools.ant.DemuxInputStream,read --> demuxInput,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.DemuxInputStream,read$2 --> demuxInput,org.apache.tools.ant.Project,);
EndClass 9
StartClass 10
Class(org.apache.tools.ant.util.ClasspathUtils,N,N,Public);
Attribute(REUSE_LOADER_REF,java.lang.String,Public,Y,Y,);
Attribute(class$java$lang$Object,java.lang.Class,Public,Y,N,);
Method(<init>,void,Public,N,N);
Method(getClassLoaderForPath,java.lang.ClassLoader,Public,Y,N);
Method(getClassLoaderForPath$2,java.lang.ClassLoader,Public,Y,N);
Method(getClassLoaderForPath$3,java.lang.ClassLoader,Public,Y,N);
Method(getClassLoaderForPath$4,java.lang.ClassLoader,Public,Y,N);
Method(getClassLoaderForPath$5,java.lang.ClassLoader,Public,Y,N);
Method(getUniqueClassLoaderForPath,java.lang.ClassLoader,Public,Y,N);
Method(newInstance,java.lang.Object,Public,Y,N);
Method(newInstance$2,java.lang.Object,Public,Y,N);
Method(getDelegate,org.apache.tools.ant.util.ClasspathUtils$Delegate,Public,Y,N);
Method(isMagicPropertySet,boolean,Private,Y,N);
Method(class$,java.lang.Class,Public,Y,N);
Method(access$000,boolean,Public,Y,N);
Parameter(getClassLoaderForPath,org.apache.tools.ant.Project,);
Parameter(getClassLoaderForPath,org.apache.tools.ant.types.Reference,);
Parameter(getClassLoaderForPath$2,org.apache.tools.ant.Project,);
Parameter(getClassLoaderForPath$2,org.apache.tools.ant.types.Reference,);
Parameter(getClassLoaderForPath$2,boolean,);
Parameter(getClassLoaderForPath$3,org.apache.tools.ant.Project,);
Parameter(getClassLoaderForPath$3,org.apache.tools.ant.types.Path,);
Parameter(getClassLoaderForPath$3,java.lang.String,);
Parameter(getClassLoaderForPath$4,org.apache.tools.ant.Project,);
Parameter(getClassLoaderForPath$4,org.apache.tools.ant.types.Path,);
Parameter(getClassLoaderForPath$4,java.lang.String,);
Parameter(getClassLoaderForPath$4,boolean,);
Parameter(getClassLoaderForPath$5,org.apache.tools.ant.Project,);
Parameter(getClassLoaderForPath$5,org.apache.tools.ant.types.Path,);
Parameter(getClassLoaderForPath$5,java.lang.String,);
Parameter(getClassLoaderForPath$5,boolean,);
Parameter(getClassLoaderForPath$5,boolean,);
Parameter(getUniqueClassLoaderForPath,org.apache.tools.ant.Project,);
Parameter(getUniqueClassLoaderForPath,org.apache.tools.ant.types.Path,);
Parameter(getUniqueClassLoaderForPath,boolean,);
Parameter(newInstance,java.lang.String,);
Parameter(newInstance,java.lang.ClassLoader,);
Parameter(newInstance$2,java.lang.String,);
Parameter(newInstance$2,java.lang.ClassLoader,);
Parameter(newInstance$2,java.lang.Class,);
Parameter(getDelegate,org.apache.tools.ant.ProjectComponent,);
Parameter(isMagicPropertySet,org.apache.tools.ant.Project,);
Parameter(class$,java.lang.String,);
Parameter(access$000,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils,getClassLoaderForPath --> getClassLoaderForPath$2,org.apache.tools.ant.util.ClasspathUtils,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils,getClassLoaderForPath$2 --> getClassLoaderForPath$4,org.apache.tools.ant.util.ClasspathUtils,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils,getClassLoaderForPath$3 --> getClassLoaderForPath$4,org.apache.tools.ant.util.ClasspathUtils,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils,getClassLoaderForPath$4 --> isMagicPropertySet,org.apache.tools.ant.util.ClasspathUtils,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils,getClassLoaderForPath$4 --> getClassLoaderForPath$5,org.apache.tools.ant.util.ClasspathUtils,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils,getClassLoaderForPath$5 --> getUniqueClassLoaderForPath,org.apache.tools.ant.util.ClasspathUtils,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils,newInstance --> class$,org.apache.tools.ant.util.ClasspathUtils,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils,newInstance --> newInstance$2,org.apache.tools.ant.util.ClasspathUtils,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils,access$000 --> isMagicPropertySet,org.apache.tools.ant.util.ClasspathUtils,);
Call(ATTRIBUTE,org.apache.tools.ant.util.ClasspathUtils,newInstance --> class$java$lang$Object,org.apache.tools.ant.util.ClasspathUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.ClasspathUtils,newInstance --> class$java$lang$Object,org.apache.tools.ant.util.ClasspathUtils,WRITE);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils,getClassLoaderForPath$2 --> getRefId,org.apache.tools.ant.types.Reference,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils,getClassLoaderForPath$2 --> getReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils,getClassLoaderForPath$2 --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils,getClassLoaderForPath$5 --> getReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils,getClassLoaderForPath$5 --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils,getClassLoaderForPath$5 --> addReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils,getUniqueClassLoaderForPath --> createClassLoader,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils,getUniqueClassLoaderForPath --> setParentFirst,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils,getUniqueClassLoaderForPath --> addJavaLibraries,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils,newInstance$2 --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils,newInstance$2 --> <init>$3,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils,getDelegate --> <init>,org.apache.tools.ant.util.ClasspathUtils$Delegate,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils,isMagicPropertySet --> getProperty,org.apache.tools.ant.Project,);
EndClass 10
StartClass 11
Class(org.apache.tools.ant.util.FileUtils,N,N,Public);
Attribute(PRIMARY_INSTANCE,org.apache.tools.ant.util.FileUtils,Private,Y,Y,);
Attribute(rand,java.util.Random,Private,Y,N,);
Attribute(onNetWare,boolean,Private,Y,N,);
Attribute(onDos,boolean,Private,Y,N,);
Attribute(onWin9x,boolean,Private,Y,N,);
Attribute(onWindows,boolean,Private,Y,N,);
Attribute(BUF_SIZE,int,Public,Y,Y,);
Attribute(FAT_FILE_TIMESTAMP_GRANULARITY,long,Public,Y,Y,);
Attribute(UNIX_FILE_TIMESTAMP_GRANULARITY,long,Public,Y,Y,);
Attribute(NTFS_FILE_TIMESTAMP_GRANULARITY,long,Public,Y,Y,);
Attribute(cacheFromUriLock,java.lang.Object,Private,N,N,);
Attribute(cacheFromUriRequest,java.lang.String,Private,N,N,);
Attribute(cacheFromUriResponse,java.lang.String,Private,N,N,);
Attribute(class$java$io$File,java.lang.Class,Public,Y,N,);
Method(newFileUtils,org.apache.tools.ant.util.FileUtils,Public,Y,N);
Method(getFileUtils,org.apache.tools.ant.util.FileUtils,Public,Y,N);
Method(<init>,void,Protected,N,N);
Method(getFileURL,java.net.URL,Public,N,N);
Method(copyFile,void,Public,N,N);
Method(copyFile$2,void,Public,N,N);
Method(copyFile$3,void,Public,N,N);
Method(copyFile$4,void,Public,N,N);
Method(copyFile$5,void,Public,N,N);
Method(copyFile$6,void,Public,N,N);
Method(copyFile$7,void,Public,N,N);
Method(copyFile$8,void,Public,N,N);
Method(copyFile$9,void,Public,N,N);
Method(copyFile$10,void,Public,N,N);
Method(copyFile$11,void,Public,N,N);
Method(copyFile$12,void,Public,N,N);
Method(copyFile$13,void,Public,N,N);
Method(copyFile$14,void,Public,N,N);
Method(setFileLastModified,void,Public,N,N);
Method(resolveFile,java.io.File,Public,N,N);
Method(isContextRelativePath,boolean,Public,Y,N);
Method(isAbsolutePath,boolean,Public,Y,N);
Method(translatePath,java.lang.String,Public,Y,N);
Method(normalize,java.io.File,Public,N,N);
Method(dissect,java.lang.String[],Public,N,N);
Method(toVMSPath,java.lang.String,Public,N,N);
Method(createTempFile,java.io.File,Public,N,N);
Method(createTempFile$2,java.io.File,Public,N,N);
Method(contentEquals,boolean,Public,N,N);
Method(contentEquals$2,boolean,Public,N,N);
Method(getParentFile,java.io.File,Public,N,N);
Method(readFully,java.lang.String,Public,Y,N);
Method(readFully$2,java.lang.String,Public,Y,N);
Method(createNewFile,boolean,Public,N,N);
Method(createNewFile$2,boolean,Public,N,N);
Method(isSymbolicLink,boolean,Public,N,N);
Method(removeLeadingPath,java.lang.String,Public,N,N);
Method(isLeadingPath,boolean,Public,N,N);
Method(toURI,java.lang.String,Public,N,N);
Method(fromURI,java.lang.String,Public,N,N);
Method(fileNameEquals,boolean,Public,N,N);
Method(rename,void,Public,N,N);
Method(getFileTimestampGranularity,long,Public,N,N);
Method(isUpToDate,boolean,Public,N,N);
Method(isUpToDate$2,boolean,Public,N,N);
Method(isUpToDate$3,boolean,Public,N,N);
Method(isUpToDate$4,boolean,Public,N,N);
Method(close,void,Public,Y,N);
Method(close$2,void,Public,Y,N);
Method(close$3,void,Public,Y,N);
Method(close$4,void,Public,Y,N);
Method(delete,void,Public,Y,N);
Method(getRelativePath,java.lang.String,Public,Y,N);
Method(getPathStack,java.lang.String[],Public,Y,N);
Method(getPath,java.lang.String,Public,Y,N);
Method(getPath$2,java.lang.String,Public,Y,N);
Method(getDefaultEncoding,java.lang.String,Public,N,N);
Method(class$,java.lang.Class,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(getFileURL,java.io.File,);
Parameter(copyFile,java.lang.String,);
Parameter(copyFile,java.lang.String,);
Parameter(copyFile$2,java.lang.String,);
Parameter(copyFile$2,java.lang.String,);
Parameter(copyFile$2,org.apache.tools.ant.types.FilterSetCollection,);
Parameter(copyFile$3,java.lang.String,);
Parameter(copyFile$3,java.lang.String,);
Parameter(copyFile$3,org.apache.tools.ant.types.FilterSetCollection,);
Parameter(copyFile$3,boolean,);
Parameter(copyFile$4,java.lang.String,);
Parameter(copyFile$4,java.lang.String,);
Parameter(copyFile$4,org.apache.tools.ant.types.FilterSetCollection,);
Parameter(copyFile$4,boolean,);
Parameter(copyFile$4,boolean,);
Parameter(copyFile$5,java.lang.String,);
Parameter(copyFile$5,java.lang.String,);
Parameter(copyFile$5,org.apache.tools.ant.types.FilterSetCollection,);
Parameter(copyFile$5,boolean,);
Parameter(copyFile$5,boolean,);
Parameter(copyFile$5,java.lang.String,);
Parameter(copyFile$6,java.lang.String,);
Parameter(copyFile$6,java.lang.String,);
Parameter(copyFile$6,org.apache.tools.ant.types.FilterSetCollection,);
Parameter(copyFile$6,java.util.Vector,);
Parameter(copyFile$6,boolean,);
Parameter(copyFile$6,boolean,);
Parameter(copyFile$6,java.lang.String,);
Parameter(copyFile$6,org.apache.tools.ant.Project,);
Parameter(copyFile$7,java.lang.String,);
Parameter(copyFile$7,java.lang.String,);
Parameter(copyFile$7,org.apache.tools.ant.types.FilterSetCollection,);
Parameter(copyFile$7,java.util.Vector,);
Parameter(copyFile$7,boolean,);
Parameter(copyFile$7,boolean,);
Parameter(copyFile$7,java.lang.String,);
Parameter(copyFile$7,java.lang.String,);
Parameter(copyFile$7,org.apache.tools.ant.Project,);
Parameter(copyFile$8,java.io.File,);
Parameter(copyFile$8,java.io.File,);
Parameter(copyFile$9,java.io.File,);
Parameter(copyFile$9,java.io.File,);
Parameter(copyFile$9,org.apache.tools.ant.types.FilterSetCollection,);
Parameter(copyFile$10,java.io.File,);
Parameter(copyFile$10,java.io.File,);
Parameter(copyFile$10,org.apache.tools.ant.types.FilterSetCollection,);
Parameter(copyFile$10,boolean,);
Parameter(copyFile$11,java.io.File,);
Parameter(copyFile$11,java.io.File,);
Parameter(copyFile$11,org.apache.tools.ant.types.FilterSetCollection,);
Parameter(copyFile$11,boolean,);
Parameter(copyFile$11,boolean,);
Parameter(copyFile$12,java.io.File,);
Parameter(copyFile$12,java.io.File,);
Parameter(copyFile$12,org.apache.tools.ant.types.FilterSetCollection,);
Parameter(copyFile$12,boolean,);
Parameter(copyFile$12,boolean,);
Parameter(copyFile$12,java.lang.String,);
Parameter(copyFile$13,java.io.File,);
Parameter(copyFile$13,java.io.File,);
Parameter(copyFile$13,org.apache.tools.ant.types.FilterSetCollection,);
Parameter(copyFile$13,java.util.Vector,);
Parameter(copyFile$13,boolean,);
Parameter(copyFile$13,boolean,);
Parameter(copyFile$13,java.lang.String,);
Parameter(copyFile$13,org.apache.tools.ant.Project,);
Parameter(copyFile$14,java.io.File,);
Parameter(copyFile$14,java.io.File,);
Parameter(copyFile$14,org.apache.tools.ant.types.FilterSetCollection,);
Parameter(copyFile$14,java.util.Vector,);
Parameter(copyFile$14,boolean,);
Parameter(copyFile$14,boolean,);
Parameter(copyFile$14,java.lang.String,);
Parameter(copyFile$14,java.lang.String,);
Parameter(copyFile$14,org.apache.tools.ant.Project,);
Parameter(setFileLastModified,java.io.File,);
Parameter(setFileLastModified,long,);
Parameter(resolveFile,java.io.File,);
Parameter(resolveFile,java.lang.String,);
Parameter(isContextRelativePath,java.lang.String,);
Parameter(isAbsolutePath,java.lang.String,);
Parameter(translatePath,java.lang.String,);
Parameter(normalize,java.lang.String,);
Parameter(dissect,java.lang.String,);
Parameter(toVMSPath,java.io.File,);
Parameter(createTempFile,java.lang.String,);
Parameter(createTempFile,java.lang.String,);
Parameter(createTempFile,java.io.File,);
Parameter(createTempFile$2,java.lang.String,);
Parameter(createTempFile$2,java.lang.String,);
Parameter(createTempFile$2,java.io.File,);
Parameter(createTempFile$2,boolean,);
Parameter(contentEquals,java.io.File,);
Parameter(contentEquals,java.io.File,);
Parameter(contentEquals$2,java.io.File,);
Parameter(contentEquals$2,java.io.File,);
Parameter(contentEquals$2,boolean,);
Parameter(getParentFile,java.io.File,);
Parameter(readFully,java.io.Reader,);
Parameter(readFully$2,java.io.Reader,);
Parameter(readFully$2,int,);
Parameter(createNewFile,java.io.File,);
Parameter(createNewFile$2,java.io.File,);
Parameter(createNewFile$2,boolean,);
Parameter(isSymbolicLink,java.io.File,);
Parameter(isSymbolicLink,java.lang.String,);
Parameter(removeLeadingPath,java.io.File,);
Parameter(removeLeadingPath,java.io.File,);
Parameter(isLeadingPath,java.io.File,);
Parameter(isLeadingPath,java.io.File,);
Parameter(toURI,java.lang.String,);
Parameter(fromURI,java.lang.String,);
Parameter(fileNameEquals,java.io.File,);
Parameter(fileNameEquals,java.io.File,);
Parameter(rename,java.io.File,);
Parameter(rename,java.io.File,);
Parameter(isUpToDate,java.io.File,);
Parameter(isUpToDate,java.io.File,);
Parameter(isUpToDate,long,);
Parameter(isUpToDate$2,java.io.File,);
Parameter(isUpToDate$2,java.io.File,);
Parameter(isUpToDate$3,long,);
Parameter(isUpToDate$3,long,);
Parameter(isUpToDate$3,long,);
Parameter(isUpToDate$4,long,);
Parameter(isUpToDate$4,long,);
Parameter(close,java.io.Writer,);
Parameter(close$2,java.io.Reader,);
Parameter(close$3,java.io.OutputStream,);
Parameter(close$4,java.io.InputStream,);
Parameter(delete,java.io.File,);
Parameter(getRelativePath,java.io.File,);
Parameter(getRelativePath,java.io.File,);
Parameter(getPathStack,java.lang.String,);
Parameter(getPath,java.util.List,);
Parameter(getPath$2,java.util.List,);
Parameter(getPath$2,char,);
Parameter(class$,java.lang.String,);
Composition(org.apache.tools.ant.util.FileUtils);
Call(METHOD,org.apache.tools.ant.util.FileUtils,newFileUtils --> <init>,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,getFileURL --> toURI,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,copyFile --> copyFile$11,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,copyFile$2 --> copyFile$11,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,copyFile$3 --> copyFile$11,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,copyFile$4 --> copyFile$11,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,copyFile$5 --> copyFile$12,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,copyFile$6 --> copyFile$13,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,copyFile$7 --> copyFile$14,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,copyFile$8 --> copyFile$11,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,copyFile$9 --> copyFile$11,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,copyFile$10 --> copyFile$11,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,copyFile$11 --> copyFile$12,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,copyFile$12 --> copyFile$13,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,copyFile$13 --> copyFile$14,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,resolveFile --> isAbsolutePath,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,resolveFile --> isContextRelativePath,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,resolveFile --> dissect,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,resolveFile --> normalize,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,normalize --> dissect,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,dissect --> isAbsolutePath,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,toVMSPath --> normalize,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,createTempFile --> createTempFile$2,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,contentEquals --> contentEquals$2,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,readFully --> readFully$2,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,removeLeadingPath --> normalize,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,isLeadingPath --> normalize,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,toURI --> class$,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,toURI --> resolveFile,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,fromURI --> isAbsolutePath,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,fromURI --> normalize,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,fileNameEquals --> normalize,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,rename --> copyFile$8,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,isUpToDate --> isUpToDate$3,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,isUpToDate$2 --> getFileTimestampGranularity,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,isUpToDate$2 --> isUpToDate,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,isUpToDate$4 --> getFileTimestampGranularity,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,isUpToDate$4 --> isUpToDate$3,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,getRelativePath --> getPathStack,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,getRelativePath --> getPath,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,getPath --> getPath$2,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,getDefaultEncoding --> close$2,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,<clinit> --> <init>,org.apache.tools.ant.util.FileUtils,);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,getFileUtils --> PRIMARY_INSTANCE,org.apache.tools.ant.util.FileUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,<init> --> cacheFromUriLock,org.apache.tools.ant.util.FileUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,<init> --> cacheFromUriRequest,org.apache.tools.ant.util.FileUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,<init> --> cacheFromUriResponse,org.apache.tools.ant.util.FileUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,isContextRelativePath --> onDos,org.apache.tools.ant.util.FileUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,isContextRelativePath --> onNetWare,org.apache.tools.ant.util.FileUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,isAbsolutePath --> onDos,org.apache.tools.ant.util.FileUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,isAbsolutePath --> onNetWare,org.apache.tools.ant.util.FileUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,dissect --> onDos,org.apache.tools.ant.util.FileUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,dissect --> onNetWare,org.apache.tools.ant.util.FileUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,createTempFile$2 --> rand,org.apache.tools.ant.util.FileUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,toURI --> class$java$io$File,org.apache.tools.ant.util.FileUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,toURI --> class$java$io$File,org.apache.tools.ant.util.FileUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,fromURI --> cacheFromUriLock,org.apache.tools.ant.util.FileUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,fromURI --> cacheFromUriRequest,org.apache.tools.ant.util.FileUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,fromURI --> cacheFromUriResponse,org.apache.tools.ant.util.FileUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,fromURI --> cacheFromUriRequest,org.apache.tools.ant.util.FileUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,fromURI --> cacheFromUriResponse,org.apache.tools.ant.util.FileUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,getFileTimestampGranularity --> onWin9x,org.apache.tools.ant.util.FileUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,getFileTimestampGranularity --> onWindows,org.apache.tools.ant.util.FileUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,getFileTimestampGranularity --> onDos,org.apache.tools.ant.util.FileUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,<clinit> --> PRIMARY_INSTANCE,org.apache.tools.ant.util.FileUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,<clinit> --> rand,org.apache.tools.ant.util.FileUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,<clinit> --> onNetWare,org.apache.tools.ant.util.FileUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,<clinit> --> onDos,org.apache.tools.ant.util.FileUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,<clinit> --> onWin9x,org.apache.tools.ant.util.FileUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils,<clinit> --> onWindows,org.apache.tools.ant.util.FileUtils,WRITE);
Call(METHOD,org.apache.tools.ant.util.FileUtils,copyFile$14 --> <init>$3,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,copyFile$14 --> copyResource$3,org.apache.tools.ant.util.ResourceUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,setFileLastModified --> <init>$3,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,setFileLastModified --> setLastModified,org.apache.tools.ant.util.ResourceUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,translatePath --> <init>,org.apache.tools.ant.PathTokenizer,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,translatePath --> hasMoreTokens,org.apache.tools.ant.PathTokenizer,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,translatePath --> nextToken,org.apache.tools.ant.PathTokenizer,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,dissect --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,contentEquals$2 --> <init>$3,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,contentEquals$2 --> contentEquals,org.apache.tools.ant.util.ResourceUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,toURI --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,getPathStack --> split,org.apache.tools.ant.util.StringUtils,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,getDefaultEncoding --> <init>,org.apache.tools.ant.util.FileUtils$1,);
Call(METHOD,org.apache.tools.ant.util.FileUtils,<clinit> --> isFamily,org.apache.tools.ant.taskdefs.condition.Os,);
EndClass 11
StartClass 12
Class(org.apache.tools.ant.Diagnostics,N,N,Public);
Attribute(BIG_DRIFT_LIMIT,int,Private,Y,Y,);
Attribute(TEST_FILE_SIZE,int,Private,Y,Y,);
Attribute(KILOBYTE,int,Private,Y,Y,);
Attribute(SECONDS_PER_MILLISECOND,int,Private,Y,Y,);
Attribute(SECONDS_PER_MINUTE,int,Private,Y,Y,);
Attribute(MINUTES_PER_HOUR,int,Private,Y,Y,);
Attribute(TEST_CLASS,java.lang.String,Private,Y,Y,);
Attribute(ERROR_PROPERTY_ACCESS_BLOCKED,java.lang.String,Protected,Y,Y,);
Attribute(class$org$apache$tools$ant$Main,java.lang.Class,Public,Y,N,);
Attribute(array$Ljava$lang$String,java.lang.Class,Public,Y,N,);
Method(<init>,void,Private,N,N);
Method(isOptionalAvailable,boolean,Public,Y,N);
Method(validateVersion,void,Public,Y,N);
Method(listLibraries,java.io.File[],Public,Y,N);
Method(listJarFiles,java.io.File[],Private,Y,N);
Method(main,void,Public,Y,N);
Method(getImplementationVersion,java.lang.String,Private,Y,N);
Method(getXmlParserName,java.lang.String,Private,Y,N);
Method(getSAXParser,javax.xml.parsers.SAXParser,Private,Y,N);
Method(getXMLParserLocation,java.lang.String,Private,Y,N);
Method(getNamespaceParserName,java.lang.String,Private,Y,N);
Method(getNamespaceParserLocation,java.lang.String,Private,Y,N);
Method(ignoreThrowable,void,Private,Y,N);
Method(getClassLocation,java.lang.String,Private,Y,N);
Method(doReport,void,Public,Y,N);
Method(header,void,Private,Y,N);
Method(doReportSystemProperties,void,Private,Y,N);
Method(getProperty,java.lang.String,Private,Y,N);
Method(doReportAntProperties,void,Private,Y,N);
Method(doReportAntHomeLibraries,void,Private,Y,N);
Method(doReportUserHomeLibraries,void,Private,Y,N);
Method(printLibraries,void,Private,Y,N);
Method(doReportWhich,void,Private,Y,N);
Method(doReportTasksAvailability,void,Private,Y,N);
Method(doReportParserInfo,void,Private,Y,N);
Method(printParserInfo,void,Private,Y,N);
Method(doReportTempDir,void,Private,Y,N);
Method(doReportLocale,void,Private,Y,N);
Method(printProperty,void,Private,Y,N);
Method(doReportProxy,void,Private,Y,N);
Method(class$,java.lang.Class,Public,Y,N);
Parameter(listJarFiles,java.io.File,);
Parameter(main,java.lang.String[],);
Parameter(getImplementationVersion,java.lang.Class,);
Parameter(ignoreThrowable,java.lang.Throwable,);
Parameter(getClassLocation,java.lang.Class,);
Parameter(doReport,java.io.PrintStream,);
Parameter(header,java.io.PrintStream,);
Parameter(header,java.lang.String,);
Parameter(doReportSystemProperties,java.io.PrintStream,);
Parameter(getProperty,java.lang.String,);
Parameter(doReportAntProperties,java.io.PrintStream,);
Parameter(doReportAntHomeLibraries,java.io.PrintStream,);
Parameter(doReportUserHomeLibraries,java.io.PrintStream,);
Parameter(printLibraries,java.io.File[],);
Parameter(printLibraries,java.io.PrintStream,);
Parameter(doReportWhich,java.io.PrintStream,);
Parameter(doReportTasksAvailability,java.io.PrintStream,);
Parameter(doReportParserInfo,java.io.PrintStream,);
Parameter(printParserInfo,java.io.PrintStream,);
Parameter(printParserInfo,java.lang.String,);
Parameter(printParserInfo,java.lang.String,);
Parameter(printParserInfo,java.lang.String,);
Parameter(doReportTempDir,java.io.PrintStream,);
Parameter(doReportLocale,java.io.PrintStream,);
Parameter(printProperty,java.io.PrintStream,);
Parameter(printProperty,java.lang.String,);
Parameter(doReportProxy,java.io.PrintStream,);
Parameter(class$,java.lang.String,);
Call(METHOD,org.apache.tools.ant.Diagnostics,validateVersion --> class$,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,validateVersion --> getImplementationVersion,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,validateVersion --> ignoreThrowable,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,listLibraries --> listJarFiles,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,main --> doReport,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,getXmlParserName --> getSAXParser,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,getSAXParser --> ignoreThrowable,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,getXMLParserLocation --> getSAXParser,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,getXMLParserLocation --> getClassLocation,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,getNamespaceParserName --> ignoreThrowable,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,getNamespaceParserLocation --> getClassLocation,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,getNamespaceParserLocation --> ignoreThrowable,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReport --> header,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReport --> class$,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReport --> getImplementationVersion,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReport --> ignoreThrowable,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReport --> doReportAntProperties,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReport --> doReportAntHomeLibraries,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReport --> doReportUserHomeLibraries,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReport --> doReportTasksAvailability,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReport --> doReportWhich,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReport --> doReportParserInfo,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReport --> doReportSystemProperties,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReport --> doReportTempDir,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReport --> doReportLocale,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReport --> doReportProxy,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReportSystemProperties --> ignoreThrowable,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReportSystemProperties --> getProperty,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReportAntHomeLibraries --> listLibraries,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReportAntHomeLibraries --> printLibraries,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReportUserHomeLibraries --> listJarFiles,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReportUserHomeLibraries --> printLibraries,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReportWhich --> class$,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReportTasksAvailability --> class$,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReportParserInfo --> getXmlParserName,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReportParserInfo --> getXMLParserLocation,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReportParserInfo --> printParserInfo,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReportParserInfo --> getNamespaceParserName,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReportParserInfo --> getNamespaceParserLocation,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReportTempDir --> ignoreThrowable,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,printProperty --> getProperty,org.apache.tools.ant.Diagnostics,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReportProxy --> printProperty,org.apache.tools.ant.Diagnostics,);
Call(ATTRIBUTE,org.apache.tools.ant.Diagnostics,validateVersion --> class$org$apache$tools$ant$Main,org.apache.tools.ant.Diagnostics,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Diagnostics,validateVersion --> class$org$apache$tools$ant$Main,org.apache.tools.ant.Diagnostics,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Diagnostics,doReport --> class$org$apache$tools$ant$Main,org.apache.tools.ant.Diagnostics,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Diagnostics,doReport --> class$org$apache$tools$ant$Main,org.apache.tools.ant.Diagnostics,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Diagnostics,doReportWhich --> array$Ljava$lang$String,org.apache.tools.ant.Diagnostics,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Diagnostics,doReportWhich --> array$Ljava$lang$String,org.apache.tools.ant.Diagnostics,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Diagnostics,doReportTasksAvailability --> class$org$apache$tools$ant$Main,org.apache.tools.ant.Diagnostics,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Diagnostics,doReportTasksAvailability --> class$org$apache$tools$ant$Main,org.apache.tools.ant.Diagnostics,WRITE);
Call(METHOD,org.apache.tools.ant.Diagnostics,validateVersion --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.Diagnostics,listJarFiles --> <init>,org.apache.tools.ant.Diagnostics$1,);
Call(METHOD,org.apache.tools.ant.Diagnostics,getNamespaceParserName --> getNamespaceXMLReader,org.apache.tools.ant.util.JAXPUtils,);
Call(METHOD,org.apache.tools.ant.Diagnostics,getNamespaceParserLocation --> getNamespaceXMLReader,org.apache.tools.ant.util.JAXPUtils,);
Call(METHOD,org.apache.tools.ant.Diagnostics,getClassLocation --> getClassSource,org.apache.tools.ant.util.LoaderUtils,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReport --> getAntVersion,org.apache.tools.ant.Main,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReportAntProperties --> <init>,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReportAntProperties --> initProperties,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReportAntProperties --> getProperty,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReportTempDir --> close$3,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.Diagnostics,doReportProxy --> getJavaVersionNumber,org.apache.tools.ant.util.JavaEnvUtils,);
EndClass 12
StartClass 13
Class(org.apache.tools.ant.util.ProxySetup,N,N,Public);
Attribute(owner,org.apache.tools.ant.Project,Private,N,N,);
Attribute(USE_SYSTEM_PROXIES,java.lang.String,Public,Y,Y,);
Attribute(HTTP_PROXY_HOST,java.lang.String,Public,Y,Y,);
Attribute(HTTP_PROXY_PORT,java.lang.String,Public,Y,Y,);
Attribute(HTTPS_PROXY_HOST,java.lang.String,Public,Y,Y,);
Attribute(HTTPS_PROXY_PORT,java.lang.String,Public,Y,Y,);
Attribute(FTP_PROXY_HOST,java.lang.String,Public,Y,Y,);
Attribute(FTP_PROXY_PORT,java.lang.String,Public,Y,Y,);
Attribute(HTTP_NON_PROXY_HOSTS,java.lang.String,Public,Y,Y,);
Attribute(HTTPS_NON_PROXY_HOSTS,java.lang.String,Public,Y,Y,);
Attribute(FTP_NON_PROXY_HOSTS,java.lang.String,Public,Y,Y,);
Attribute(HTTP_PROXY_USERNAME,java.lang.String,Public,Y,Y,);
Attribute(HTTP_PROXY_PASSWORD,java.lang.String,Public,Y,Y,);
Attribute(SOCKS_PROXY_HOST,java.lang.String,Public,Y,Y,);
Attribute(SOCKS_PROXY_PORT,java.lang.String,Public,Y,Y,);
Attribute(SOCKS_PROXY_USERNAME,java.lang.String,Public,Y,Y,);
Attribute(SOCKS_PROXY_PASSWORD,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(getSystemProxySetting,java.lang.String,Public,Y,N);
Method(enableProxies,void,Public,N,N);
Parameter(<init>,org.apache.tools.ant.Project,);
Composition(org.apache.tools.ant.Project);
Call(METHOD,org.apache.tools.ant.util.ProxySetup,enableProxies --> getSystemProxySetting,org.apache.tools.ant.util.ProxySetup,);
Call(ATTRIBUTE,org.apache.tools.ant.util.ProxySetup,<init> --> owner,org.apache.tools.ant.util.ProxySetup,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.ProxySetup,enableProxies --> owner,org.apache.tools.ant.util.ProxySetup,READ);
Call(METHOD,org.apache.tools.ant.util.ProxySetup,enableProxies --> getProperty,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.util.ProxySetup,enableProxies --> toBoolean,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.util.ProxySetup,enableProxies --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.util.ProxySetup,enableProxies --> log,org.apache.tools.ant.Project,);
EndClass 13
StartClass 14
Class(org.apache.tools.ant.Target,N,N,Public);
Attribute(name,java.lang.String,Private,N,N,);
Attribute(ifCondition,java.lang.String,Private,N,N,);
Attribute(unlessCondition,java.lang.String,Private,N,N,);
Attribute(dependencies,java.util.List,Private,N,N,);
Attribute(children,java.util.List,Private,N,N,);
Attribute(location,org.apache.tools.ant.Location,Private,N,N,);
Attribute(project,org.apache.tools.ant.Project,Private,N,N,);
Attribute(description,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(setProject,void,Public,N,N);
Method(getProject,org.apache.tools.ant.Project,Public,N,N);
Method(setLocation,void,Public,N,N);
Method(getLocation,org.apache.tools.ant.Location,Public,N,N);
Method(setDepends,void,Public,N,N);
Method(setName,void,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(addTask,void,Public,N,N);
Method(addDataType,void,Public,N,N);
Method(getTasks,org.apache.tools.ant.Task[],Public,N,N);
Method(addDependency,void,Public,N,N);
Method(getDependencies,java.util.Enumeration,Public,N,N);
Method(dependsOn,boolean,Public,N,N);
Method(setIf,void,Public,N,N);
Method(getIf,java.lang.String,Public,N,N);
Method(setUnless,void,Public,N,N);
Method(getUnless,java.lang.String,Public,N,N);
Method(setDescription,void,Public,N,N);
Method(getDescription,java.lang.String,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(execute,void,Public,N,N);
Method(performTasks,void,Public,N,N);
Method(replaceChild,void,Public,N,N);
Method(replaceChild$2,void,Public,N,N);
Method(testIfCondition,boolean,Private,N,N);
Method(testUnlessCondition,boolean,Private,N,N);
Parameter(<init>$2,org.apache.tools.ant.Target,);
Parameter(setProject,org.apache.tools.ant.Project,);
Parameter(setLocation,org.apache.tools.ant.Location,);
Parameter(setDepends,java.lang.String,);
Parameter(setName,java.lang.String,);
Parameter(addTask,org.apache.tools.ant.Task,);
Parameter(addDataType,org.apache.tools.ant.RuntimeConfigurable,);
Parameter(addDependency,java.lang.String,);
Parameter(dependsOn,java.lang.String,);
Parameter(setIf,java.lang.String,);
Parameter(setUnless,java.lang.String,);
Parameter(setDescription,java.lang.String,);
Parameter(replaceChild,org.apache.tools.ant.Task,);
Parameter(replaceChild,org.apache.tools.ant.RuntimeConfigurable,);
Parameter(replaceChild$2,org.apache.tools.ant.Task,);
Parameter(replaceChild$2,org.apache.tools.ant.Task,);
Realization(org.apache.tools.ant.TaskContainer);
Composition(org.apache.tools.ant.Location);
Composition(org.apache.tools.ant.Project);
Call(METHOD,org.apache.tools.ant.Target,setDepends --> getName,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.Target,setDepends --> addDependency,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.Target,dependsOn --> getProject,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.Target,dependsOn --> getName,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.Target,execute --> testIfCondition,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.Target,execute --> testUnlessCondition,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.Target,performTasks --> execute,org.apache.tools.ant.Target,);
Call(ATTRIBUTE,org.apache.tools.ant.Target,<init> --> ifCondition,org.apache.tools.ant.Target,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Target,<init> --> unlessCondition,org.apache.tools.ant.Target,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Target,<init> --> dependencies,org.apache.tools.ant.Target,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Target,<init> --> children,org.apache.tools.ant.Target,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Target,<init> --> location,org.apache.tools.ant.Target,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Target,<init> --> description,org.apache.tools.ant.Target,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Target,<init>$2 --> name,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,<init>$2 --> ifCondition,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,<init>$2 --> unlessCondition,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,<init>$2 --> dependencies,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,<init>$2 --> location,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,<init>$2 --> project,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,<init>$2 --> description,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,<init>$2 --> children,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,<init>$2 --> ifCondition,org.apache.tools.ant.Target,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Target,<init>$2 --> unlessCondition,org.apache.tools.ant.Target,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Target,<init>$2 --> dependencies,org.apache.tools.ant.Target,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Target,<init>$2 --> children,org.apache.tools.ant.Target,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Target,<init>$2 --> location,org.apache.tools.ant.Target,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Target,<init>$2 --> description,org.apache.tools.ant.Target,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Target,<init>$2 --> name,org.apache.tools.ant.Target,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Target,<init>$2 --> project,org.apache.tools.ant.Target,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Target,setProject --> project,org.apache.tools.ant.Target,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Target,getProject --> project,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,setLocation --> location,org.apache.tools.ant.Target,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Target,getLocation --> location,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,setName --> name,org.apache.tools.ant.Target,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Target,getName --> name,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,addTask --> children,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,addDataType --> children,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,getTasks --> children,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,addDependency --> dependencies,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,addDependency --> dependencies,org.apache.tools.ant.Target,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Target,getDependencies --> dependencies,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,setIf --> ifCondition,org.apache.tools.ant.Target,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Target,getIf --> ifCondition,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,setUnless --> unlessCondition,org.apache.tools.ant.Target,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Target,getUnless --> unlessCondition,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,setDescription --> description,org.apache.tools.ant.Target,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Target,getDescription --> description,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,toString --> name,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,execute --> children,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,execute --> project,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,execute --> ifCondition,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,execute --> unlessCondition,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,performTasks --> project,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,replaceChild --> children,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,replaceChild$2 --> children,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,testIfCondition --> ifCondition,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,testIfCondition --> project,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,testUnlessCondition --> unlessCondition,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,testUnlessCondition --> project,org.apache.tools.ant.Target,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,<init> --> UNKNOWN_LOCATION,org.apache.tools.ant.Location,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Target,<init>$2 --> UNKNOWN_LOCATION,org.apache.tools.ant.Location,READ);
Call(METHOD,org.apache.tools.ant.Target,setDepends --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.Target,getDependencies --> <init>,org.apache.tools.ant.util.CollectionUtils$EmptyEnumeration,);
Call(METHOD,org.apache.tools.ant.Target,dependsOn --> getTargets,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Target,dependsOn --> topoSort$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Target,execute --> perform,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Target,execute --> maybeConfigure,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.Target,execute --> replaceProperties,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Target,execute --> log$6,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Target,performTasks --> fireTargetStarted,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Target,performTasks --> fireTargetFinished,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Target,testIfCondition --> replaceProperties,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Target,testIfCondition --> getProperty,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Target,testUnlessCondition --> replaceProperties,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Target,testUnlessCondition --> getProperty,org.apache.tools.ant.Project,);
EndClass 14
StartClass 15
Class(org.apache.tools.ant.input.InputHandler,Y,Y,Public);
Method(handleInput,void,Public,N,Y);
Parameter(handleInput,org.apache.tools.ant.input.InputRequest,);
EndClass 15
StartClass 16
Class(org.apache.tools.ant.DemuxOutputStream,N,N,Public);
Attribute(MAX_SIZE,int,Private,Y,Y,);
Attribute(INTIAL_SIZE,int,Private,Y,Y,);
Attribute(CR,int,Private,Y,Y,);
Attribute(LF,int,Private,Y,Y,);
Attribute(buffers,java.util.WeakHashMap,Private,N,N,);
Attribute(project,org.apache.tools.ant.Project,Private,N,N,);
Attribute(isErrorStream,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getBufferInfo,org.apache.tools.ant.DemuxOutputStream$BufferInfo,Private,N,N);
Method(resetBufferInfo,void,Private,N,N);
Method(removeBuffer,void,Private,N,N);
Method(write,void,Public,N,N);
Method(processBuffer,void,Protected,N,N);
Method(processFlush,void,Protected,N,N);
Method(close,void,Public,N,N);
Method(flush,void,Public,N,N);
Method(write$2,void,Public,N,N);
Parameter(<init>,org.apache.tools.ant.Project,);
Parameter(<init>,boolean,);
Parameter(write,int,);
Parameter(processBuffer,java.io.ByteArrayOutputStream,);
Parameter(processFlush,java.io.ByteArrayOutputStream,);
Parameter(write$2,byte[],);
Parameter(write$2,int,);
Parameter(write$2,int,);
Composition(org.apache.tools.ant.Project);
Call(METHOD,org.apache.tools.ant.DemuxOutputStream,write --> getBufferInfo,org.apache.tools.ant.DemuxOutputStream,);
Call(METHOD,org.apache.tools.ant.DemuxOutputStream,write --> processBuffer,org.apache.tools.ant.DemuxOutputStream,);
Call(METHOD,org.apache.tools.ant.DemuxOutputStream,processBuffer --> resetBufferInfo,org.apache.tools.ant.DemuxOutputStream,);
Call(METHOD,org.apache.tools.ant.DemuxOutputStream,processFlush --> resetBufferInfo,org.apache.tools.ant.DemuxOutputStream,);
Call(METHOD,org.apache.tools.ant.DemuxOutputStream,close --> flush,org.apache.tools.ant.DemuxOutputStream,);
Call(METHOD,org.apache.tools.ant.DemuxOutputStream,close --> removeBuffer,org.apache.tools.ant.DemuxOutputStream,);
Call(METHOD,org.apache.tools.ant.DemuxOutputStream,flush --> getBufferInfo,org.apache.tools.ant.DemuxOutputStream,);
Call(METHOD,org.apache.tools.ant.DemuxOutputStream,flush --> processFlush,org.apache.tools.ant.DemuxOutputStream,);
Call(METHOD,org.apache.tools.ant.DemuxOutputStream,write$2 --> getBufferInfo,org.apache.tools.ant.DemuxOutputStream,);
Call(METHOD,org.apache.tools.ant.DemuxOutputStream,write$2 --> write,org.apache.tools.ant.DemuxOutputStream,);
Call(ATTRIBUTE,org.apache.tools.ant.DemuxOutputStream,<init> --> buffers,org.apache.tools.ant.DemuxOutputStream,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DemuxOutputStream,<init> --> project,org.apache.tools.ant.DemuxOutputStream,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DemuxOutputStream,<init> --> isErrorStream,org.apache.tools.ant.DemuxOutputStream,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DemuxOutputStream,getBufferInfo --> buffers,org.apache.tools.ant.DemuxOutputStream,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DemuxOutputStream,resetBufferInfo --> buffers,org.apache.tools.ant.DemuxOutputStream,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DemuxOutputStream,removeBuffer --> buffers,org.apache.tools.ant.DemuxOutputStream,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DemuxOutputStream,processBuffer --> project,org.apache.tools.ant.DemuxOutputStream,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DemuxOutputStream,processBuffer --> isErrorStream,org.apache.tools.ant.DemuxOutputStream,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DemuxOutputStream,processFlush --> project,org.apache.tools.ant.DemuxOutputStream,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DemuxOutputStream,processFlush --> isErrorStream,org.apache.tools.ant.DemuxOutputStream,READ);
Call(METHOD,org.apache.tools.ant.DemuxOutputStream,getBufferInfo --> <init>$2,org.apache.tools.ant.DemuxOutputStream$BufferInfo,);
Call(METHOD,org.apache.tools.ant.DemuxOutputStream,getBufferInfo --> access$102,org.apache.tools.ant.DemuxOutputStream$BufferInfo,);
Call(METHOD,org.apache.tools.ant.DemuxOutputStream,getBufferInfo --> access$202,org.apache.tools.ant.DemuxOutputStream$BufferInfo,);
Call(METHOD,org.apache.tools.ant.DemuxOutputStream,resetBufferInfo --> access$100,org.apache.tools.ant.DemuxOutputStream$BufferInfo,);
Call(METHOD,org.apache.tools.ant.DemuxOutputStream,resetBufferInfo --> access$102,org.apache.tools.ant.DemuxOutputStream$BufferInfo,);
Call(METHOD,org.apache.tools.ant.DemuxOutputStream,resetBufferInfo --> access$202,org.apache.tools.ant.DemuxOutputStream$BufferInfo,);
Call(METHOD,org.apache.tools.ant.DemuxOutputStream,write --> access$100,org.apache.tools.ant.DemuxOutputStream$BufferInfo,);
Call(METHOD,org.apache.tools.ant.DemuxOutputStream,write --> access$200,org.apache.tools.ant.DemuxOutputStream$BufferInfo,);
Call(METHOD,org.apache.tools.ant.DemuxOutputStream,write --> access$202,org.apache.tools.ant.DemuxOutputStream$BufferInfo,);
Call(METHOD,org.apache.tools.ant.DemuxOutputStream,processBuffer --> demuxOutput,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.DemuxOutputStream,processFlush --> demuxFlush,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.DemuxOutputStream,flush --> access$100,org.apache.tools.ant.DemuxOutputStream$BufferInfo,);
Call(METHOD,org.apache.tools.ant.DemuxOutputStream,write$2 --> access$100,org.apache.tools.ant.DemuxOutputStream$BufferInfo,);
EndClass 16
StartClass 17
Class(org.apache.tools.ant.input.DefaultInputHandler,N,N,Public);
Method(<init>,void,Public,N,N);
Method(handleInput,void,Public,N,N);
Method(getPrompt,java.lang.String,Protected,N,N);
Method(getInputStream,java.io.InputStream,Protected,N,N);
Parameter(handleInput,org.apache.tools.ant.input.InputRequest,);
Parameter(getPrompt,org.apache.tools.ant.input.InputRequest,);
Realization(org.apache.tools.ant.input.InputHandler);
Call(METHOD,org.apache.tools.ant.input.DefaultInputHandler,handleInput --> getPrompt,org.apache.tools.ant.input.DefaultInputHandler,);
Call(METHOD,org.apache.tools.ant.input.DefaultInputHandler,handleInput --> getInputStream,org.apache.tools.ant.input.DefaultInputHandler,);
Call(METHOD,org.apache.tools.ant.input.DefaultInputHandler,handleInput --> setInput,org.apache.tools.ant.input.InputRequest,);
Call(METHOD,org.apache.tools.ant.input.DefaultInputHandler,handleInput --> <init>$3,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.input.DefaultInputHandler,handleInput --> isInputValid,org.apache.tools.ant.input.InputRequest,);
Call(METHOD,org.apache.tools.ant.input.DefaultInputHandler,getPrompt --> getPrompt,org.apache.tools.ant.input.InputRequest,);
Call(METHOD,org.apache.tools.ant.input.DefaultInputHandler,getPrompt --> getDefaultValue,org.apache.tools.ant.input.InputRequest,);
Call(METHOD,org.apache.tools.ant.input.DefaultInputHandler,getPrompt --> getChoices,org.apache.tools.ant.input.MultipleChoiceInputRequest,);
EndClass 17
StartClass 18
Class(org.apache.tools.ant.Location,N,N,Public);
Attribute(fileName,java.lang.String,Private,N,N,);
Attribute(lineNumber,int,Private,N,N,);
Attribute(columnNumber,int,Private,N,N,);
Attribute(UNKNOWN_LOCATION,org.apache.tools.ant.Location,Public,Y,Y,);
Attribute(FILE_UTILS,org.apache.tools.ant.util.FileUtils,Private,Y,Y,);
Method(<init>,void,Private,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(getFileName,java.lang.String,Public,N,N);
Method(getLineNumber,int,Public,N,N);
Method(getColumnNumber,int,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$3,org.xml.sax.Locator,);
Parameter(<init>$4,java.lang.String,);
Parameter(<init>$4,int,);
Parameter(<init>$4,int,);
Parameter(equals,java.lang.Object,);
Composition(org.apache.tools.ant.Location);
Composition(org.apache.tools.ant.util.FileUtils);
Call(METHOD,org.apache.tools.ant.Location,<init> --> <init>$4,org.apache.tools.ant.Location,);
Call(METHOD,org.apache.tools.ant.Location,<init>$2 --> <init>$4,org.apache.tools.ant.Location,);
Call(METHOD,org.apache.tools.ant.Location,<init>$3 --> <init>$4,org.apache.tools.ant.Location,);
Call(METHOD,org.apache.tools.ant.Location,equals --> toString,org.apache.tools.ant.Location,);
Call(METHOD,org.apache.tools.ant.Location,hashCode --> toString,org.apache.tools.ant.Location,);
Call(METHOD,org.apache.tools.ant.Location,<clinit> --> <init>,org.apache.tools.ant.Location,);
Call(ATTRIBUTE,org.apache.tools.ant.Location,<init>$4 --> FILE_UTILS,org.apache.tools.ant.Location,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Location,<init>$4 --> fileName,org.apache.tools.ant.Location,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Location,<init>$4 --> lineNumber,org.apache.tools.ant.Location,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Location,<init>$4 --> columnNumber,org.apache.tools.ant.Location,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Location,getFileName --> fileName,org.apache.tools.ant.Location,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Location,getLineNumber --> lineNumber,org.apache.tools.ant.Location,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Location,getColumnNumber --> columnNumber,org.apache.tools.ant.Location,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Location,toString --> fileName,org.apache.tools.ant.Location,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Location,toString --> lineNumber,org.apache.tools.ant.Location,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Location,<clinit> --> UNKNOWN_LOCATION,org.apache.tools.ant.Location,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Location,<clinit> --> FILE_UTILS,org.apache.tools.ant.Location,WRITE);
Call(METHOD,org.apache.tools.ant.Location,<init>$4 --> fromURI,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.Location,<clinit> --> getFileUtils,org.apache.tools.ant.util.FileUtils,);
EndClass 18
StartClass 19
Class(org.apache.tools.ant.types.ResourceFactory,Y,Y,Public);
Method(getResource,org.apache.tools.ant.types.Resource,Public,N,Y);
Parameter(getResource,java.lang.String,);
EndClass 19
StartClass 20
Class(org.apache.tools.ant.types.FilterSet,N,N,Public);
Attribute(DEFAULT_TOKEN_START,java.lang.String,Public,Y,Y,);
Attribute(DEFAULT_TOKEN_END,java.lang.String,Public,Y,Y,);
Attribute(startOfToken,java.lang.String,Private,N,N,);
Attribute(endOfToken,java.lang.String,Private,N,N,);
Attribute(passedTokens,java.util.Vector,Private,N,N,);
Attribute(duplicateToken,boolean,Private,N,N,);
Attribute(recurse,boolean,Private,N,N,);
Attribute(filterHash,java.util.Hashtable,Private,N,N,);
Attribute(filtersFiles,java.util.Vector,Private,N,N,);
Attribute(onMissingFiltersFile,org.apache.tools.ant.types.FilterSet$OnMissing,Private,N,N,);
Attribute(readingFiles,boolean,Private,N,N,);
Attribute(recurseDepth,int,Private,N,N,);
Attribute(filters,java.util.Vector,Private,N,N,);
Attribute(class$org$apache$tools$ant$types$FilterSet,java.lang.Class,Public,Y,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Protected,N,N);
Method(getFilters,java.util.Vector,Protected,N,N);
Method(getRef,org.apache.tools.ant.types.FilterSet,Protected,N,N);
Method(getFilterHash,java.util.Hashtable,Public,N,N);
Method(setFiltersfile,void,Public,N,N);
Method(setBeginToken,void,Public,N,N);
Method(getBeginToken,java.lang.String,Public,N,N);
Method(setEndToken,void,Public,N,N);
Method(getEndToken,java.lang.String,Public,N,N);
Method(setRecurse,void,Public,N,N);
Method(isRecurse,boolean,Public,N,N);
Method(readFiltersFromFile,void,Public,N,N);
Method(replaceTokens,java.lang.String,Public,N,N);
Method(addFilter,void,Public,N,N);
Method(createFiltersfile,org.apache.tools.ant.types.FilterSet$FiltersFile,Public,N,N);
Method(addFilter$2,void,Public,N,N);
Method(addConfiguredFilterSet,void,Public,N,N);
Method(hasFilters,boolean,Public,N,N);
Method(clone,java.lang.Object,Public,N,N);
Method(setOnMissingFiltersFile,void,Public,N,N);
Method(getOnMissingFiltersFile,org.apache.tools.ant.types.FilterSet$OnMissing,Public,N,N);
Method(iReplaceTokens,java.lang.String,Private,N,N);
Method(replaceTokens$2,java.lang.String,Private,N,N);
Method(handleMissingFile,void,Private,N,N);
Method(access$000,java.util.Vector,Public,Y,N);
Method(class$,java.lang.Class,Public,Y,N);
Parameter(<init>$2,org.apache.tools.ant.types.FilterSet,);
Parameter(setFiltersfile,java.io.File,);
Parameter(setBeginToken,java.lang.String,);
Parameter(setEndToken,java.lang.String,);
Parameter(setRecurse,boolean,);
Parameter(readFiltersFromFile,java.io.File,);
Parameter(replaceTokens,java.lang.String,);
Parameter(addFilter,org.apache.tools.ant.types.FilterSet$Filter,);
Parameter(addFilter$2,java.lang.String,);
Parameter(addFilter$2,java.lang.String,);
Parameter(addConfiguredFilterSet,org.apache.tools.ant.types.FilterSet,);
Parameter(setOnMissingFiltersFile,org.apache.tools.ant.types.FilterSet$OnMissing,);
Parameter(iReplaceTokens,java.lang.String,);
Parameter(replaceTokens$2,java.lang.String,);
Parameter(replaceTokens$2,java.lang.String,);
Parameter(handleMissingFile,java.lang.String,);
Parameter(access$000,org.apache.tools.ant.types.FilterSet,);
Parameter(class$,java.lang.String,);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.DataType);
Composition(org.apache.tools.ant.types.FilterSet$OnMissing);
Call(METHOD,org.apache.tools.ant.types.FilterSet,<init>$2 --> getFilters,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,getFilters --> getRef,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,getFilters --> getFilters,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,getFilters --> readFiltersFromFile,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,getRef --> class$,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,getFilterHash --> getFilters,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,getBeginToken --> getRef,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,getBeginToken --> getBeginToken,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,getEndToken --> getRef,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,getEndToken --> getEndToken,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,readFiltersFromFile --> handleMissingFile,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,readFiltersFromFile --> getFilters,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,replaceTokens --> iReplaceTokens,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,addFilter$2 --> addFilter,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,addConfiguredFilterSet --> getFilters,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,addConfiguredFilterSet --> addFilter,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,hasFilters --> getFilters,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,clone --> getRef,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,clone --> clone,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,clone --> getFilters,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,iReplaceTokens --> getBeginToken,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,iReplaceTokens --> getEndToken,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,iReplaceTokens --> getFilterHash,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,iReplaceTokens --> replaceTokens$2,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,replaceTokens$2 --> getBeginToken,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,replaceTokens$2 --> getEndToken,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,replaceTokens$2 --> iReplaceTokens,org.apache.tools.ant.types.FilterSet,);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,<init> --> startOfToken,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,<init> --> endOfToken,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,<init> --> duplicateToken,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,<init> --> recurse,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,<init> --> filterHash,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,<init> --> filtersFiles,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,<init> --> onMissingFiltersFile,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,<init> --> readingFiles,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,<init> --> recurseDepth,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,<init> --> filters,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,<init>$2 --> startOfToken,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,<init>$2 --> endOfToken,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,<init>$2 --> duplicateToken,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,<init>$2 --> recurse,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,<init>$2 --> filterHash,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,<init>$2 --> filtersFiles,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,<init>$2 --> onMissingFiltersFile,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,<init>$2 --> readingFiles,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,<init>$2 --> recurseDepth,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,<init>$2 --> filters,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,getFilters --> readingFiles,org.apache.tools.ant.types.FilterSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,getFilters --> filtersFiles,org.apache.tools.ant.types.FilterSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,getFilters --> filters,org.apache.tools.ant.types.FilterSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,getFilters --> readingFiles,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,getRef --> class$org$apache$tools$ant$types$FilterSet,org.apache.tools.ant.types.FilterSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,getRef --> class$org$apache$tools$ant$types$FilterSet,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,getFilterHash --> filterHash,org.apache.tools.ant.types.FilterSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,getFilterHash --> filterHash,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,setFiltersfile --> filtersFiles,org.apache.tools.ant.types.FilterSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,setBeginToken --> startOfToken,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,getBeginToken --> startOfToken,org.apache.tools.ant.types.FilterSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,setEndToken --> endOfToken,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,getEndToken --> endOfToken,org.apache.tools.ant.types.FilterSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,setRecurse --> recurse,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,isRecurse --> recurse,org.apache.tools.ant.types.FilterSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,readFiltersFromFile --> filterHash,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,addFilter --> filters,org.apache.tools.ant.types.FilterSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,addFilter --> filterHash,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,clone --> filters,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,setOnMissingFiltersFile --> onMissingFiltersFile,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,getOnMissingFiltersFile --> onMissingFiltersFile,org.apache.tools.ant.types.FilterSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,iReplaceTokens --> recurse,org.apache.tools.ant.types.FilterSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,replaceTokens$2 --> recurseDepth,org.apache.tools.ant.types.FilterSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,replaceTokens$2 --> passedTokens,org.apache.tools.ant.types.FilterSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,replaceTokens$2 --> duplicateToken,org.apache.tools.ant.types.FilterSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,replaceTokens$2 --> passedTokens,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,replaceTokens$2 --> recurseDepth,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,replaceTokens$2 --> duplicateToken,org.apache.tools.ant.types.FilterSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,handleMissingFile --> onMissingFiltersFile,org.apache.tools.ant.types.FilterSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,access$000 --> filtersFiles,org.apache.tools.ant.types.FilterSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,<init> --> FAIL,org.apache.tools.ant.types.FilterSet$OnMissing,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet,<init>$2 --> FAIL,org.apache.tools.ant.types.FilterSet$OnMissing,READ);
Call(METHOD,org.apache.tools.ant.types.FilterSet,<init> --> <init>,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,<init>$2 --> <init>,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,getFilters --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,getRef --> getCheckedRef$3,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,getFilterHash --> getToken,org.apache.tools.ant.types.FilterSet$Filter,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,getFilterHash --> getValue,org.apache.tools.ant.types.FilterSet$Filter,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,setFiltersfile --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,setFiltersfile --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,setBeginToken --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,setBeginToken --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,setBeginToken --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,getBeginToken --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,setEndToken --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,setEndToken --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,setEndToken --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,getEndToken --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,readFiltersFromFile --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,readFiltersFromFile --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,readFiltersFromFile --> log$2,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,readFiltersFromFile --> <init>,org.apache.tools.ant.types.FilterSet$Filter,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,readFiltersFromFile --> close$4,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,readFiltersFromFile --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,addFilter --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,addFilter --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,createFiltersfile --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,createFiltersfile --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,createFiltersfile --> <init>,org.apache.tools.ant.types.FilterSet$FiltersFile,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,addFilter$2 --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,addFilter$2 --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,addFilter$2 --> <init>,org.apache.tools.ant.types.FilterSet$Filter,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,addConfiguredFilterSet --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,addConfiguredFilterSet --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,clone --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,clone --> clone,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,clone --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,clone --> setProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,clone --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,iReplaceTokens --> log$2,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,handleMissingFile --> getIndex,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,handleMissingFile --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.FilterSet,handleMissingFile --> log$2,org.apache.tools.ant.ProjectComponent,);
EndClass 20
StartClass 21
Class(org.apache.tools.ant.types.FilterSetCollection,N,N,Public);
Attribute(filterSets,java.util.Vector,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(addFilterSet,void,Public,N,N);
Method(replaceTokens,java.lang.String,Public,N,N);
Method(hasFilters,boolean,Public,N,N);
Parameter(<init>$2,org.apache.tools.ant.types.FilterSet,);
Parameter(addFilterSet,org.apache.tools.ant.types.FilterSet,);
Parameter(replaceTokens,java.lang.String,);
Call(METHOD,org.apache.tools.ant.types.FilterSetCollection,<init>$2 --> addFilterSet,org.apache.tools.ant.types.FilterSetCollection,);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSetCollection,<init> --> filterSets,org.apache.tools.ant.types.FilterSetCollection,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSetCollection,<init>$2 --> filterSets,org.apache.tools.ant.types.FilterSetCollection,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSetCollection,addFilterSet --> filterSets,org.apache.tools.ant.types.FilterSetCollection,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSetCollection,replaceTokens --> filterSets,org.apache.tools.ant.types.FilterSetCollection,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSetCollection,hasFilters --> filterSets,org.apache.tools.ant.types.FilterSetCollection,READ);
Call(METHOD,org.apache.tools.ant.types.FilterSetCollection,replaceTokens --> replaceTokens,org.apache.tools.ant.types.FilterSet,);
Call(METHOD,org.apache.tools.ant.types.FilterSetCollection,hasFilters --> hasFilters,org.apache.tools.ant.types.FilterSet,);
EndClass 21
StartClass 22
Class(org.apache.tools.ant.AntClassLoader,N,N,Public);
Attribute(FILE_UTILS,org.apache.tools.ant.util.FileUtils,Private,Y,Y,);
Attribute(BUFFER_SIZE,int,Private,Y,Y,);
Attribute(NUMBER_OF_STRINGS,int,Private,Y,Y,);
Attribute(pathComponents,java.util.Vector,Private,N,N,);
Attribute(project,org.apache.tools.ant.Project,Private,N,N,);
Attribute(parentFirst,boolean,Private,N,N,);
Attribute(systemPackages,java.util.Vector,Private,N,N,);
Attribute(loaderPackages,java.util.Vector,Private,N,N,);
Attribute(ignoreBase,boolean,Private,N,N,);
Attribute(parent,java.lang.ClassLoader,Private,N,N,);
Attribute(zipFiles,java.util.Hashtable,Private,N,N,);
Attribute(pathMap,java.util.Map,Private,Y,N,);
Attribute(savedContextLoader,java.lang.ClassLoader,Private,N,N,);
Attribute(isContextLoaderSaved,boolean,Private,N,N,);
Attribute(class$org$apache$tools$ant$AntClassLoader,java.lang.Class,Public,Y,N,);
Attribute(class$org$apache$tools$ant$Project,java.lang.Class,Public,Y,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(<init>$5,void,Public,N,N);
Method(<init>$6,void,Public,N,N);
Method(setProject,void,Public,N,N);
Method(setClassPath,void,Public,N,N);
Method(setParent,void,Public,N,N);
Method(setParentFirst,void,Public,N,N);
Method(log,void,Protected,N,N);
Method(setThreadContextLoader,void,Public,N,N);
Method(resetThreadContextLoader,void,Public,N,N);
Method(addPathElement,void,Public,N,N);
Method(addPathFile,void,Protected,N,N);
Method(getClasspath,java.lang.String,Public,N,N);
Method(setIsolated,void,Public,N,N);
Method(initializeClass,void,Public,Y,N);
Method(addSystemPackageRoot,void,Public,N,N);
Method(addLoaderPackageRoot,void,Public,N,N);
Method(forceLoadClass,java.lang.Class,Public,N,N);
Method(forceLoadSystemClass,java.lang.Class,Public,N,N);
Method(getResourceAsStream,java.io.InputStream,Public,N,N);
Method(loadResource,java.io.InputStream,Private,N,N);
Method(loadBaseResource,java.io.InputStream,Private,N,N);
Method(getResourceStream,java.io.InputStream,Private,N,N);
Method(isParentFirst,boolean,Private,N,N);
Method(getRootLoader,java.lang.ClassLoader,Private,N,N);
Method(getResource,java.net.URL,Public,N,N);
Method(findResources,java.util.Enumeration,Protected,N,N);
Method(getResourceURL,java.net.URL,Protected,N,N);
Method(loadClass,java.lang.Class,Protected,N,N);
Method(getClassFilename,java.lang.String,Private,N,N);
Method(defineClassFromData,java.lang.Class,Protected,N,N);
Method(definePackage,void,Protected,N,N);
Method(getJarManifest,java.util.jar.Manifest,Private,N,N);
Method(definePackage$2,void,Protected,N,N);
Method(getClassFromStream,java.lang.Class,Private,N,N);
Method(findClass,java.lang.Class,Public,N,N);
Method(isInPath,boolean,Protected,N,N);
Method(findClassInComponents,java.lang.Class,Private,N,N);
Method(findBaseClass,java.lang.Class,Private,N,N);
Method(cleanup,void,Public,N,N);
Method(buildStarted,void,Public,N,N);
Method(buildFinished,void,Public,N,N);
Method(subBuildFinished,void,Public,N,N);
Method(subBuildStarted,void,Public,N,N);
Method(targetStarted,void,Public,N,N);
Method(targetFinished,void,Public,N,N);
Method(taskStarted,void,Public,N,N);
Method(taskFinished,void,Public,N,N);
Method(messageLogged,void,Public,N,N);
Method(addJavaLibraries,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(access$000,java.util.Vector,Public,Y,N);
Method(class$,java.lang.Class,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,java.lang.ClassLoader,);
Parameter(<init>,org.apache.tools.ant.Project,);
Parameter(<init>,org.apache.tools.ant.types.Path,);
Parameter(<init>$3,org.apache.tools.ant.Project,);
Parameter(<init>$3,org.apache.tools.ant.types.Path,);
Parameter(<init>$4,java.lang.ClassLoader,);
Parameter(<init>$4,org.apache.tools.ant.Project,);
Parameter(<init>$4,org.apache.tools.ant.types.Path,);
Parameter(<init>$4,boolean,);
Parameter(<init>$5,org.apache.tools.ant.Project,);
Parameter(<init>$5,org.apache.tools.ant.types.Path,);
Parameter(<init>$5,boolean,);
Parameter(<init>$6,java.lang.ClassLoader,);
Parameter(<init>$6,boolean,);
Parameter(setProject,org.apache.tools.ant.Project,);
Parameter(setClassPath,org.apache.tools.ant.types.Path,);
Parameter(setParent,java.lang.ClassLoader,);
Parameter(setParentFirst,boolean,);
Parameter(log,java.lang.String,);
Parameter(log,int,);
Parameter(addPathElement,java.lang.String,);
Parameter(addPathFile,java.io.File,);
Parameter(setIsolated,boolean,);
Parameter(initializeClass,java.lang.Class,);
Parameter(addSystemPackageRoot,java.lang.String,);
Parameter(addLoaderPackageRoot,java.lang.String,);
Parameter(forceLoadClass,java.lang.String,);
Parameter(forceLoadSystemClass,java.lang.String,);
Parameter(getResourceAsStream,java.lang.String,);
Parameter(loadResource,java.lang.String,);
Parameter(loadBaseResource,java.lang.String,);
Parameter(getResourceStream,java.io.File,);
Parameter(getResourceStream,java.lang.String,);
Parameter(isParentFirst,java.lang.String,);
Parameter(getResource,java.lang.String,);
Parameter(findResources,java.lang.String,);
Parameter(getResourceURL,java.io.File,);
Parameter(getResourceURL,java.lang.String,);
Parameter(loadClass,java.lang.String,);
Parameter(loadClass,boolean,);
Parameter(getClassFilename,java.lang.String,);
Parameter(defineClassFromData,java.io.File,);
Parameter(defineClassFromData,byte[],);
Parameter(defineClassFromData,java.lang.String,);
Parameter(definePackage,java.io.File,);
Parameter(definePackage,java.lang.String,);
Parameter(getJarManifest,java.io.File,);
Parameter(definePackage$2,java.io.File,);
Parameter(definePackage$2,java.lang.String,);
Parameter(definePackage$2,java.util.jar.Manifest,);
Parameter(getClassFromStream,java.io.InputStream,);
Parameter(getClassFromStream,java.lang.String,);
Parameter(getClassFromStream,java.io.File,);
Parameter(findClass,java.lang.String,);
Parameter(isInPath,java.io.File,);
Parameter(findClassInComponents,java.lang.String,);
Parameter(findBaseClass,java.lang.String,);
Parameter(buildStarted,org.apache.tools.ant.BuildEvent,);
Parameter(buildFinished,org.apache.tools.ant.BuildEvent,);
Parameter(subBuildFinished,org.apache.tools.ant.BuildEvent,);
Parameter(subBuildStarted,org.apache.tools.ant.BuildEvent,);
Parameter(targetStarted,org.apache.tools.ant.BuildEvent,);
Parameter(targetFinished,org.apache.tools.ant.BuildEvent,);
Parameter(taskStarted,org.apache.tools.ant.BuildEvent,);
Parameter(taskFinished,org.apache.tools.ant.BuildEvent,);
Parameter(messageLogged,org.apache.tools.ant.BuildEvent,);
Parameter(access$000,org.apache.tools.ant.AntClassLoader,);
Parameter(class$,java.lang.String,);
Realization(org.apache.tools.ant.SubBuildListener);
Composition(org.apache.tools.ant.util.FileUtils);
Composition(org.apache.tools.ant.Project);
Call(METHOD,org.apache.tools.ant.AntClassLoader,<init> --> setParent,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,<init> --> setClassPath,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,<init> --> setProject,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,<init>$2 --> setParent,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,<init>$3 --> setParent,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,<init>$3 --> setProject,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,<init>$3 --> setClassPath,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,<init>$4 --> <init>$3,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,<init>$4 --> setParent,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,<init>$4 --> setParentFirst,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,<init>$4 --> addJavaLibraries,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,<init>$5 --> <init>$4,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,<init>$6 --> setParent,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,setClassPath --> addPathElement,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,setParent --> class$,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,addPathElement --> addPathFile,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,addPathFile --> log,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,addPathFile --> isInPath,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,addPathFile --> addPathFile,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,forceLoadClass --> log,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,forceLoadClass --> findClass,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,forceLoadSystemClass --> log,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,forceLoadSystemClass --> findBaseClass,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,getResourceAsStream --> isParentFirst,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,getResourceAsStream --> loadBaseResource,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,getResourceAsStream --> log,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,getResourceAsStream --> loadResource,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,loadResource --> getResourceStream,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,getResourceStream --> log,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,getResource --> isParentFirst,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,getResource --> log,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,getResource --> getResourceURL,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,getResource --> getRootLoader,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,findResources --> isParentFirst,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,findResources --> getRootLoader,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,loadClass --> isParentFirst,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,loadClass --> findBaseClass,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,loadClass --> log,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,loadClass --> findClass,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,defineClassFromData --> definePackage,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,defineClassFromData --> class$,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,definePackage --> getJarManifest,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,definePackage --> definePackage$2,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,getClassFromStream --> defineClassFromData,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,findClass --> log,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,findClass --> findClassInComponents,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,findClassInComponents --> getClassFilename,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,findClassInComponents --> getResourceStream,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,findClassInComponents --> log,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,findClassInComponents --> getClassFromStream,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,buildFinished --> cleanup,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,subBuildFinished --> cleanup,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,addJavaLibraries --> addSystemPackageRoot,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,toString --> getClasspath,org.apache.tools.ant.AntClassLoader,);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init> --> pathComponents,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init> --> parentFirst,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init> --> systemPackages,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init> --> loaderPackages,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init> --> ignoreBase,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init> --> parent,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init> --> zipFiles,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init> --> savedContextLoader,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init> --> isContextLoaderSaved,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$2 --> pathComponents,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$2 --> parentFirst,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$2 --> systemPackages,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$2 --> loaderPackages,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$2 --> ignoreBase,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$2 --> parent,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$2 --> zipFiles,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$2 --> savedContextLoader,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$2 --> isContextLoaderSaved,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$3 --> pathComponents,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$3 --> parentFirst,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$3 --> systemPackages,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$3 --> loaderPackages,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$3 --> ignoreBase,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$3 --> parent,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$3 --> zipFiles,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$3 --> savedContextLoader,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$3 --> isContextLoaderSaved,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$6 --> pathComponents,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$6 --> parentFirst,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$6 --> systemPackages,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$6 --> loaderPackages,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$6 --> ignoreBase,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$6 --> parent,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$6 --> zipFiles,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$6 --> savedContextLoader,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$6 --> isContextLoaderSaved,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<init>$6 --> project,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,setProject --> project,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,setClassPath --> pathComponents,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,setParent --> class$org$apache$tools$ant$AntClassLoader,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,setParent --> class$org$apache$tools$ant$AntClassLoader,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,setParent --> parent,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,setParentFirst --> parentFirst,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,log --> project,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,setThreadContextLoader --> isContextLoaderSaved,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,setThreadContextLoader --> project,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,setThreadContextLoader --> savedContextLoader,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,setThreadContextLoader --> isContextLoaderSaved,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,resetThreadContextLoader --> isContextLoaderSaved,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,resetThreadContextLoader --> savedContextLoader,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,resetThreadContextLoader --> savedContextLoader,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,resetThreadContextLoader --> isContextLoaderSaved,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,addPathElement --> project,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,addPathFile --> pathComponents,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,addPathFile --> pathMap,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,addPathFile --> FILE_UTILS,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,getClasspath --> pathComponents,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,setIsolated --> ignoreBase,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,addSystemPackageRoot --> systemPackages,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,addLoaderPackageRoot --> loaderPackages,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,loadResource --> pathComponents,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,loadBaseResource --> parent,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,getResourceStream --> zipFiles,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,isParentFirst --> parentFirst,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,isParentFirst --> systemPackages,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,isParentFirst --> loaderPackages,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,getResource --> parent,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,getResource --> pathComponents,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,getResource --> ignoreBase,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,findResources --> parent,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,findResources --> ignoreBase,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,getResourceURL --> FILE_UTILS,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,getResourceURL --> zipFiles,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,loadClass --> ignoreBase,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,defineClassFromData --> class$org$apache$tools$ant$Project,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,defineClassFromData --> class$org$apache$tools$ant$Project,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,isInPath --> pathComponents,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,findClassInComponents --> pathComponents,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,findBaseClass --> parent,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,cleanup --> zipFiles,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,cleanup --> project,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,cleanup --> zipFiles,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,cleanup --> project,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,subBuildFinished --> project,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,access$000 --> pathComponents,org.apache.tools.ant.AntClassLoader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<clinit> --> FILE_UTILS,org.apache.tools.ant.AntClassLoader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader,<clinit> --> pathMap,org.apache.tools.ant.AntClassLoader,WRITE);
Call(METHOD,org.apache.tools.ant.AntClassLoader,setProject --> addBuildListener,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,setClassPath --> concatSystemClasspath$2,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,setClassPath --> list,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,log --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,setThreadContextLoader --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,setThreadContextLoader --> isContextLoaderAvailable,org.apache.tools.ant.util.LoaderUtils,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,setThreadContextLoader --> getContextClassLoader,org.apache.tools.ant.util.LoaderUtils,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,setThreadContextLoader --> getProperty,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,setThreadContextLoader --> setContextClassLoader,org.apache.tools.ant.util.LoaderUtils,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,resetThreadContextLoader --> isContextLoaderAvailable,org.apache.tools.ant.util.LoaderUtils,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,resetThreadContextLoader --> setContextClassLoader,org.apache.tools.ant.util.LoaderUtils,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,addPathElement --> resolveFile$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,addPathElement --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,addPathFile --> <init>$2,org.apache.tools.ant.taskdefs.Manifest,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,addPathFile --> getMainSection,org.apache.tools.ant.taskdefs.Manifest,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,addPathFile --> getAttributeValue,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,addPathFile --> getFileURL,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,findResources --> <init>,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,findResources --> <init>,org.apache.tools.ant.util.CollectionUtils$EmptyEnumeration,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,findResources --> append,org.apache.tools.ant.util.CollectionUtils,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,getResourceURL --> getFileURL,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,definePackage$2 --> getFileUtils,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,definePackage$2 --> toURI,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,cleanup --> removeBuildListener,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,subBuildFinished --> getProject,org.apache.tools.ant.BuildEvent,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,addJavaLibraries --> getJrePackages,org.apache.tools.ant.util.JavaEnvUtils,);
Call(METHOD,org.apache.tools.ant.AntClassLoader,<clinit> --> getFileUtils,org.apache.tools.ant.util.FileUtils,);
EndClass 22
StartClass 23
Class(org.apache.tools.ant.types.Path,N,N,Public);
Attribute(systemClasspath,org.apache.tools.ant.types.Path,Public,Y,N,);
Attribute(systemBootClasspath,org.apache.tools.ant.types.Path,Public,Y,N,);
Attribute(EMPTY_ITERATOR,java.util.Iterator,Private,Y,Y,);
Attribute(union,org.apache.tools.ant.types.resources.Union,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(setLocation,void,Public,N,N);
Method(setPath,void,Public,N,N);
Method(setRefid,void,Public,N,N);
Method(createPathElement,org.apache.tools.ant.types.Path$PathElement,Public,N,N);
Method(addFileset,void,Public,N,N);
Method(addFilelist,void,Public,N,N);
Method(addDirset,void,Public,N,N);
Method(add,void,Public,N,N);
Method(add$2,void,Public,N,N);
Method(createPath,org.apache.tools.ant.types.Path,Public,N,N);
Method(append,void,Public,N,N);
Method(addExisting,void,Public,N,N);
Method(addExisting$2,void,Public,N,N);
Method(list,java.lang.String[],Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(translatePath,java.lang.String[],Public,Y,N);
Method(translateFile,java.lang.String,Public,Y,N);
Method(translateFileSep,boolean,Protected,Y,N);
Method(size,int,Public,N,N);
Method(clone,java.lang.Object,Public,N,N);
Method(dieOnCircularReference,void,Protected,N,N);
Method(resolveFile,java.io.File,Private,Y,N);
Method(concatSystemClasspath,org.apache.tools.ant.types.Path,Public,N,N);
Method(concatSystemClasspath$2,org.apache.tools.ant.types.Path,Public,N,N);
Method(concatSystemBootClasspath,org.apache.tools.ant.types.Path,Public,N,N);
Method(concatSpecialPath,org.apache.tools.ant.types.Path,Private,N,N);
Method(addJavaRuntime,void,Public,N,N);
Method(addExtdirs,void,Public,N,N);
Method(iterator,java.util.Iterator,Public,N,N);
Method(isFilesystemOnly,boolean,Public,N,N);
Method(assertFilesystemOnly,org.apache.tools.ant.types.ResourceCollection,Protected,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,org.apache.tools.ant.Project,);
Parameter(<init>,java.lang.String,);
Parameter(<init>$2,org.apache.tools.ant.Project,);
Parameter(setLocation,java.io.File,);
Parameter(setPath,java.lang.String,);
Parameter(setRefid,org.apache.tools.ant.types.Reference,);
Parameter(addFileset,org.apache.tools.ant.types.FileSet,);
Parameter(addFilelist,org.apache.tools.ant.types.FileList,);
Parameter(addDirset,org.apache.tools.ant.types.DirSet,);
Parameter(add,org.apache.tools.ant.types.Path,);
Parameter(add$2,org.apache.tools.ant.types.ResourceCollection,);
Parameter(append,org.apache.tools.ant.types.Path,);
Parameter(addExisting,org.apache.tools.ant.types.Path,);
Parameter(addExisting$2,org.apache.tools.ant.types.Path,);
Parameter(addExisting$2,boolean,);
Parameter(translatePath,org.apache.tools.ant.Project,);
Parameter(translatePath,java.lang.String,);
Parameter(translateFile,java.lang.String,);
Parameter(translateFileSep,java.lang.StringBuffer,);
Parameter(translateFileSep,int,);
Parameter(dieOnCircularReference,java.util.Stack,);
Parameter(dieOnCircularReference,org.apache.tools.ant.Project,);
Parameter(resolveFile,org.apache.tools.ant.Project,);
Parameter(resolveFile,java.lang.String,);
Parameter(concatSystemClasspath$2,java.lang.String,);
Parameter(concatSystemBootClasspath,java.lang.String,);
Parameter(concatSpecialPath,java.lang.String,);
Parameter(concatSpecialPath,org.apache.tools.ant.types.Path,);
Parameter(addExtdirs,org.apache.tools.ant.types.Path,);
Parameter(assertFilesystemOnly,org.apache.tools.ant.types.ResourceCollection,);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.DataType);
Realization(org.apache.tools.ant.types.ResourceCollection);
Composition(org.apache.tools.ant.types.Path);
Composition(org.apache.tools.ant.types.resources.Union);
Call(METHOD,org.apache.tools.ant.types.Path,<init> --> <init>$2,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,<init> --> createPathElement,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,setLocation --> createPathElement,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,setPath --> createPathElement,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,createPathElement --> add$2,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,addFileset --> add$2,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,addFilelist --> add$2,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,addDirset --> add$2,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,add --> add$2,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,createPath --> <init>$2,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,createPath --> add,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,append --> add,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,addExisting --> addExisting$2,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,addExisting$2 --> list,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,addExisting$2 --> resolveFile,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,addExisting$2 --> setLocation,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,list --> list,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,list --> assertFilesystemOnly,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,translatePath --> resolveFile,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,translatePath --> translateFileSep,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,translateFile --> translateFileSep,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,size --> size,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,size --> assertFilesystemOnly,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,concatSystemClasspath --> concatSystemClasspath$2,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,concatSystemClasspath$2 --> concatSpecialPath,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,concatSystemBootClasspath --> concatSpecialPath,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,concatSpecialPath --> <init>$2,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,concatSpecialPath --> addExisting$2,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,concatSpecialPath --> addExisting,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,addJavaRuntime --> addFileset,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,addJavaRuntime --> addExisting,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,addJavaRuntime --> <init>,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,addExtdirs --> <init>,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,addExtdirs --> list,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,addExtdirs --> resolveFile,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,addExtdirs --> addFileset,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,iterator --> iterator,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,iterator --> assertFilesystemOnly,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,isFilesystemOnly --> isFilesystemOnly,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,isFilesystemOnly --> assertFilesystemOnly,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path,<clinit> --> <init>,org.apache.tools.ant.types.Path,);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path,<init>$2 --> union,org.apache.tools.ant.types.Path,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path,setRefid --> union,org.apache.tools.ant.types.Path,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path,add$2 --> union,org.apache.tools.ant.types.Path,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path,add$2 --> union,org.apache.tools.ant.types.Path,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path,list --> union,org.apache.tools.ant.types.Path,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path,toString --> union,org.apache.tools.ant.types.Path,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path,size --> union,org.apache.tools.ant.types.Path,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path,clone --> union,org.apache.tools.ant.types.Path,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path,clone --> union,org.apache.tools.ant.types.Path,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path,dieOnCircularReference --> union,org.apache.tools.ant.types.Path,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path,concatSystemClasspath$2 --> systemClasspath,org.apache.tools.ant.types.Path,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path,concatSystemBootClasspath --> systemBootClasspath,org.apache.tools.ant.types.Path,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path,addJavaRuntime --> systemBootClasspath,org.apache.tools.ant.types.Path,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path,iterator --> union,org.apache.tools.ant.types.Path,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path,iterator --> EMPTY_ITERATOR,org.apache.tools.ant.types.Path,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path,isFilesystemOnly --> union,org.apache.tools.ant.types.Path,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path,<clinit> --> systemClasspath,org.apache.tools.ant.types.Path,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path,<clinit> --> systemBootClasspath,org.apache.tools.ant.types.Path,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path,<clinit> --> EMPTY_ITERATOR,org.apache.tools.ant.types.Path,WRITE);
Call(METHOD,org.apache.tools.ant.types.Path,<init> --> setPath,org.apache.tools.ant.types.Path$PathElement,);
Call(METHOD,org.apache.tools.ant.types.Path,<init>$2 --> <init>,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,<init>$2 --> setProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.Path,setLocation --> checkAttributesAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,setLocation --> setLocation,org.apache.tools.ant.types.Path$PathElement,);
Call(METHOD,org.apache.tools.ant.types.Path,setPath --> checkAttributesAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,setPath --> setPath,org.apache.tools.ant.types.Path$PathElement,);
Call(METHOD,org.apache.tools.ant.types.Path,setRefid --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,setRefid --> setRefid,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,createPathElement --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,createPathElement --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,createPathElement --> <init>,org.apache.tools.ant.types.Path$PathElement,);
Call(METHOD,org.apache.tools.ant.types.Path,addFileset --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.Path,addFileset --> setProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.Path,addFilelist --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.Path,addFilelist --> setProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.Path,addDirset --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.Path,addDirset --> setProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.Path,add --> circularReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,add --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.Path,add --> setProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.Path,add$2 --> checkChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,add$2 --> <init>,org.apache.tools.ant.types.resources.Union,);
Call(METHOD,org.apache.tools.ant.types.Path,add$2 --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.Path,add$2 --> setProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.Path,add$2 --> setCache,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,);
Call(METHOD,org.apache.tools.ant.types.Path,add$2 --> add,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,);
Call(METHOD,org.apache.tools.ant.types.Path,add$2 --> setChecked,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,createPath --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.Path,addExisting$2 --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.Path,addExisting$2 --> log$2,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.Path,list --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,list --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,list --> list,org.apache.tools.ant.types.resources.Union,);
Call(METHOD,org.apache.tools.ant.types.Path,toString --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,toString --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,toString --> toString,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,);
Call(METHOD,org.apache.tools.ant.types.Path,translatePath --> <init>,org.apache.tools.ant.PathTokenizer,);
Call(METHOD,org.apache.tools.ant.types.Path,translatePath --> hasMoreTokens,org.apache.tools.ant.PathTokenizer,);
Call(METHOD,org.apache.tools.ant.types.Path,translatePath --> nextToken,org.apache.tools.ant.PathTokenizer,);
Call(METHOD,org.apache.tools.ant.types.Path,translatePath --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.types.Path,size --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,size --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,size --> dieOnCircularReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,size --> size,org.apache.tools.ant.types.ResourceCollection,);
Call(METHOD,org.apache.tools.ant.types.Path,clone --> clone,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,clone --> clone,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,);
Call(METHOD,org.apache.tools.ant.types.Path,clone --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.Path,dieOnCircularReference --> isChecked,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,dieOnCircularReference --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,dieOnCircularReference --> dieOnCircularReference$3,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,dieOnCircularReference --> invokeCircularReferenceCheck,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,dieOnCircularReference --> setChecked,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,resolveFile --> getFileUtils,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.types.Path,resolveFile --> getBaseDir,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.types.Path,resolveFile --> resolveFile,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.types.Path,concatSpecialPath --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.Path,concatSpecialPath --> getProperty,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.types.Path,concatSpecialPath --> log$2,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.Path,addJavaRuntime --> isKaffe,org.apache.tools.ant.util.JavaEnvUtils,);
Call(METHOD,org.apache.tools.ant.types.Path,addJavaRuntime --> <init>,org.apache.tools.ant.types.FileSet,);
Call(METHOD,org.apache.tools.ant.types.Path,addJavaRuntime --> setDir,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.Path,addJavaRuntime --> setIncludes,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.Path,addExtdirs --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.Path,addExtdirs --> <init>,org.apache.tools.ant.types.FileSet,);
Call(METHOD,org.apache.tools.ant.types.Path,addExtdirs --> setDir,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.Path,addExtdirs --> setIncludes,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.Path,iterator --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,iterator --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,iterator --> dieOnCircularReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,iterator --> iterator,org.apache.tools.ant.types.ResourceCollection,);
Call(METHOD,org.apache.tools.ant.types.Path,isFilesystemOnly --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,isFilesystemOnly --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,isFilesystemOnly --> dieOnCircularReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,assertFilesystemOnly --> isFilesystemOnly,org.apache.tools.ant.types.ResourceCollection,);
Call(METHOD,org.apache.tools.ant.types.Path,assertFilesystemOnly --> getDataTypeName,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Path,assertFilesystemOnly --> <init>$2,org.apache.tools.ant.BuildException,);
EndClass 23
StartClass 24
Class(org.apache.tools.ant.Task,N,Y,Public);
Attribute(target,org.apache.tools.ant.Target,Protected,N,N,);
Attribute(taskName,java.lang.String,Protected,N,N,);
Attribute(taskType,java.lang.String,Protected,N,N,);
Attribute(wrapper,org.apache.tools.ant.RuntimeConfigurable,Protected,N,N,);
Attribute(invalid,boolean,Private,N,N,);
Attribute(replacement,org.apache.tools.ant.UnknownElement,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setOwningTarget,void,Public,N,N);
Method(getOwningTarget,org.apache.tools.ant.Target,Public,N,N);
Method(setTaskName,void,Public,N,N);
Method(getTaskName,java.lang.String,Public,N,N);
Method(setTaskType,void,Public,N,N);
Method(init,void,Public,N,N);
Method(execute,void,Public,N,N);
Method(getRuntimeConfigurableWrapper,org.apache.tools.ant.RuntimeConfigurable,Public,N,N);
Method(setRuntimeConfigurableWrapper,void,Public,N,N);
Method(maybeConfigure,void,Public,N,N);
Method(reconfigure,void,Public,N,N);
Method(handleOutput,void,Protected,N,N);
Method(handleFlush,void,Protected,N,N);
Method(handleInput,int,Protected,N,N);
Method(handleErrorOutput,void,Protected,N,N);
Method(handleErrorFlush,void,Protected,N,N);
Method(log,void,Public,N,N);
Method(log$2,void,Public,N,N);
Method(log$3,void,Public,N,N);
Method(log$4,void,Public,N,N);
Method(perform,void,Public,N,N);
Method(markInvalid,void,Public,N,N);
Method(isInvalid,boolean,Protected,N,N);
Method(getReplacement,org.apache.tools.ant.UnknownElement,Private,N,N);
Method(replaceChildren,void,Private,N,N);
Method(getTaskType,java.lang.String,Public,N,N);
Method(getWrapper,org.apache.tools.ant.RuntimeConfigurable,Protected,N,N);
Method(bindToOwner,void,Public,N,N);
Parameter(setOwningTarget,org.apache.tools.ant.Target,);
Parameter(setTaskName,java.lang.String,);
Parameter(setTaskType,java.lang.String,);
Parameter(setRuntimeConfigurableWrapper,org.apache.tools.ant.RuntimeConfigurable,);
Parameter(handleOutput,java.lang.String,);
Parameter(handleFlush,java.lang.String,);
Parameter(handleInput,byte[],);
Parameter(handleInput,int,);
Parameter(handleInput,int,);
Parameter(handleErrorOutput,java.lang.String,);
Parameter(handleErrorFlush,java.lang.String,);
Parameter(log,java.lang.String,);
Parameter(log$2,java.lang.String,);
Parameter(log$2,int,);
Parameter(log$3,java.lang.Throwable,);
Parameter(log$3,int,);
Parameter(log$4,java.lang.String,);
Parameter(log$4,java.lang.Throwable,);
Parameter(log$4,int,);
Parameter(replaceChildren,org.apache.tools.ant.RuntimeConfigurable,);
Parameter(replaceChildren,org.apache.tools.ant.UnknownElement,);
Parameter(bindToOwner,org.apache.tools.ant.Task,);
SuperClass(org.apache.tools.ant.ProjectComponent);
SubClass(org.apache.tools.ant.UnknownElement);
SubClass(org.apache.tools.ant.TaskAdapter);
SubClass(org.apache.tools.ant.taskdefs.PreSetDef);
SubClass(org.apache.tools.ant.taskdefs.Typedef);
SubClass(org.apache.tools.ant.taskdefs.Definer);
SubClass(org.apache.tools.ant.taskdefs.DefBase);
SubClass(org.apache.tools.ant.taskdefs.AntlibDefinition);
SubClass(org.apache.tools.ant.taskdefs.Antlib);
Generalization(org.apache.tools.ant.ProjectComponent);
Composition(org.apache.tools.ant.Target);
Composition(org.apache.tools.ant.RuntimeConfigurable);
Composition(org.apache.tools.ant.UnknownElement);
Call(METHOD,org.apache.tools.ant.Task,getRuntimeConfigurableWrapper --> getTaskName,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Task,maybeConfigure --> getReplacement,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Task,handleOutput --> log$2,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Task,handleFlush --> handleOutput,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Task,handleErrorOutput --> log$2,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Task,handleErrorFlush --> handleErrorOutput,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Task,log --> log$2,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Task,log$3 --> log$4,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Task,perform --> maybeConfigure,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Task,perform --> getReplacement,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Task,perform --> perform,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Task,getReplacement --> setTaskType,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Task,getReplacement --> setTaskName,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Task,getReplacement --> setOwningTarget,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Task,getReplacement --> setRuntimeConfigurableWrapper,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Task,getReplacement --> replaceChildren,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Task,replaceChildren --> setRuntimeConfigurableWrapper,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Task,replaceChildren --> replaceChildren,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Task,bindToOwner --> getOwningTarget,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Task,bindToOwner --> setOwningTarget,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Task,bindToOwner --> getTaskName,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Task,bindToOwner --> setTaskName,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Task,bindToOwner --> getTaskType,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.Task,bindToOwner --> setTaskType,org.apache.tools.ant.Task,);
Call(ATTRIBUTE,org.apache.tools.ant.Task,setOwningTarget --> target,org.apache.tools.ant.Task,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Task,getOwningTarget --> target,org.apache.tools.ant.Task,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Task,setTaskName --> taskName,org.apache.tools.ant.Task,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Task,getTaskName --> taskName,org.apache.tools.ant.Task,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Task,setTaskType --> taskType,org.apache.tools.ant.Task,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Task,getRuntimeConfigurableWrapper --> wrapper,org.apache.tools.ant.Task,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Task,getRuntimeConfigurableWrapper --> wrapper,org.apache.tools.ant.Task,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Task,setRuntimeConfigurableWrapper --> wrapper,org.apache.tools.ant.Task,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Task,maybeConfigure --> invalid,org.apache.tools.ant.Task,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Task,maybeConfigure --> wrapper,org.apache.tools.ant.Task,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Task,reconfigure --> wrapper,org.apache.tools.ant.Task,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Task,perform --> invalid,org.apache.tools.ant.Task,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Task,markInvalid --> invalid,org.apache.tools.ant.Task,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Task,isInvalid --> invalid,org.apache.tools.ant.Task,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Task,getReplacement --> replacement,org.apache.tools.ant.Task,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Task,getReplacement --> taskType,org.apache.tools.ant.Task,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Task,getReplacement --> taskName,org.apache.tools.ant.Task,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Task,getReplacement --> target,org.apache.tools.ant.Task,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Task,getReplacement --> wrapper,org.apache.tools.ant.Task,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Task,getReplacement --> replacement,org.apache.tools.ant.Task,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.Task,getTaskType --> taskType,org.apache.tools.ant.Task,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Task,getWrapper --> wrapper,org.apache.tools.ant.Task,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Task,perform --> UNKNOWN_LOCATION,org.apache.tools.ant.Location,READ);
Call(ATTRIBUTE,org.apache.tools.ant.Task,getReplacement --> location,org.apache.tools.ant.ProjectComponent,READ);
Call(METHOD,org.apache.tools.ant.Task,<init> --> <init>,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.Task,getRuntimeConfigurableWrapper --> <init>,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.Task,maybeConfigure --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.Task,maybeConfigure --> maybeConfigure,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.Task,reconfigure --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.Task,reconfigure --> reconfigure,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.Task,handleInput --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.Task,handleInput --> defaultInput,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Task,log$2 --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.Task,log$2 --> log$4,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Task,log$2 --> log$2,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.Task,log$4 --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.Task,log$4 --> log$5,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Task,log$4 --> log$2,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.Task,perform --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.Task,perform --> fireTaskStarted,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Task,perform --> execute,org.apache.tools.ant.dispatch.DispatchUtils,);
Call(METHOD,org.apache.tools.ant.Task,perform --> fireTaskFinished,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.Task,perform --> getLocation,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.Task,perform --> getLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.Task,perform --> setLocation,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.Task,perform --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.Task,perform --> getTask,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.Task,getReplacement --> <init>,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.Task,getReplacement --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.Task,getReplacement --> setProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.Task,getReplacement --> setLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.Task,getReplacement --> setProxy,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.Task,getReplacement --> replaceChild$2,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.Task,getReplacement --> maybeConfigure,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.Task,replaceChildren --> getChildren,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.Task,replaceChildren --> getElementTag,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.Task,replaceChildren --> <init>,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.Task,replaceChildren --> addChild,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.Task,replaceChildren --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.Task,replaceChildren --> setProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.Task,replaceChildren --> setProxy,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.Task,bindToOwner --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.Task,bindToOwner --> setProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.Task,bindToOwner --> getDescription,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.Task,bindToOwner --> setDescription,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.Task,bindToOwner --> getLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.Task,bindToOwner --> setLocation,org.apache.tools.ant.ProjectComponent,);
EndClass 24
StartClass 25
Class(org.apache.tools.ant.Executor,Y,Y,Public);
Method(executeTargets,void,Public,N,Y);
Method(getSubProjectExecutor,org.apache.tools.ant.Executor,Public,N,Y);
Parameter(executeTargets,org.apache.tools.ant.Project,);
Parameter(executeTargets,java.lang.String[],);
EndClass 25
StartClass 26
Class(org.apache.tools.ant.BuildEvent,N,N,Public);
Attribute(project,org.apache.tools.ant.Project,Private,N,N,);
Attribute(target,org.apache.tools.ant.Target,Private,N,N,);
Attribute(task,org.apache.tools.ant.Task,Private,N,N,);
Attribute(message,java.lang.String,Private,N,N,);
Attribute(priority,int,Private,N,N,);
Attribute(exception,java.lang.Throwable,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(setMessage,void,Public,N,N);
Method(setException,void,Public,N,N);
Method(getProject,org.apache.tools.ant.Project,Public,N,N);
Method(getTarget,org.apache.tools.ant.Target,Public,N,N);
Method(getTask,org.apache.tools.ant.Task,Public,N,N);
Method(getMessage,java.lang.String,Public,N,N);
Method(getPriority,int,Public,N,N);
Method(getException,java.lang.Throwable,Public,N,N);
Parameter(<init>,org.apache.tools.ant.Project,);
Parameter(<init>$2,org.apache.tools.ant.Target,);
Parameter(<init>$3,org.apache.tools.ant.Task,);
Parameter(setMessage,java.lang.String,);
Parameter(setMessage,int,);
Parameter(setException,java.lang.Throwable,);
Composition(org.apache.tools.ant.Project);
Composition(org.apache.tools.ant.Target);
Composition(org.apache.tools.ant.Task);
Call(ATTRIBUTE,org.apache.tools.ant.BuildEvent,<init> --> priority,org.apache.tools.ant.BuildEvent,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildEvent,<init> --> project,org.apache.tools.ant.BuildEvent,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildEvent,<init> --> target,org.apache.tools.ant.BuildEvent,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildEvent,<init> --> task,org.apache.tools.ant.BuildEvent,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildEvent,<init>$2 --> priority,org.apache.tools.ant.BuildEvent,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildEvent,<init>$2 --> project,org.apache.tools.ant.BuildEvent,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildEvent,<init>$2 --> target,org.apache.tools.ant.BuildEvent,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildEvent,<init>$2 --> task,org.apache.tools.ant.BuildEvent,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildEvent,<init>$3 --> priority,org.apache.tools.ant.BuildEvent,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildEvent,<init>$3 --> project,org.apache.tools.ant.BuildEvent,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildEvent,<init>$3 --> target,org.apache.tools.ant.BuildEvent,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildEvent,<init>$3 --> task,org.apache.tools.ant.BuildEvent,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildEvent,setMessage --> message,org.apache.tools.ant.BuildEvent,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildEvent,setMessage --> priority,org.apache.tools.ant.BuildEvent,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildEvent,setException --> exception,org.apache.tools.ant.BuildEvent,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.BuildEvent,getProject --> project,org.apache.tools.ant.BuildEvent,READ);
Call(ATTRIBUTE,org.apache.tools.ant.BuildEvent,getTarget --> target,org.apache.tools.ant.BuildEvent,READ);
Call(ATTRIBUTE,org.apache.tools.ant.BuildEvent,getTask --> task,org.apache.tools.ant.BuildEvent,READ);
Call(ATTRIBUTE,org.apache.tools.ant.BuildEvent,getMessage --> message,org.apache.tools.ant.BuildEvent,READ);
Call(ATTRIBUTE,org.apache.tools.ant.BuildEvent,getPriority --> priority,org.apache.tools.ant.BuildEvent,READ);
Call(ATTRIBUTE,org.apache.tools.ant.BuildEvent,getException --> exception,org.apache.tools.ant.BuildEvent,READ);
Call(METHOD,org.apache.tools.ant.BuildEvent,<init>$2 --> getProject,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.BuildEvent,<init>$3 --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.BuildEvent,<init>$3 --> getOwningTarget,org.apache.tools.ant.Task,);
EndClass 26
StartClass 27
Class(org.apache.tools.ant.types.Resource,N,N,Public);
Attribute(UNKNOWN_SIZE,long,Public,Y,Y,);
Attribute(UNKNOWN_DATETIME,long,Public,Y,Y,);
Attribute(MAGIC,int,Protected,Y,Y,);
Attribute(NULL_NAME,int,Private,Y,Y,);
Attribute(name,java.lang.String,Private,N,N,);
Attribute(exists,java.lang.Boolean,Private,N,N,);
Attribute(lastmodified,java.lang.Long,Private,N,N,);
Attribute(directory,java.lang.Boolean,Private,N,N,);
Attribute(size,java.lang.Long,Private,N,N,);
Method(getMagicNumber,int,Protected,Y,N);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(<init>$5,void,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(setName,void,Public,N,N);
Method(isExists,boolean,Public,N,N);
Method(setExists,void,Public,N,N);
Method(getLastModified,long,Public,N,N);
Method(setLastModified,void,Public,N,N);
Method(isDirectory,boolean,Public,N,N);
Method(setDirectory,void,Public,N,N);
Method(setSize,void,Public,N,N);
Method(getSize,long,Public,N,N);
Method(clone,java.lang.Object,Public,N,N);
Method(compareTo,int,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(getInputStream,java.io.InputStream,Public,N,N);
Method(getOutputStream,java.io.OutputStream,Public,N,N);
Method(iterator,java.util.Iterator,Public,N,N);
Method(size,int,Public,N,N);
Method(isFilesystemOnly,boolean,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(toLongString,java.lang.String,Public,N,N);
Method(setRefid,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(getMagicNumber,byte[],);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$3,java.lang.String,);
Parameter(<init>$3,boolean,);
Parameter(<init>$3,long,);
Parameter(<init>$4,java.lang.String,);
Parameter(<init>$4,boolean,);
Parameter(<init>$4,long,);
Parameter(<init>$4,boolean,);
Parameter(<init>$5,java.lang.String,);
Parameter(<init>$5,boolean,);
Parameter(<init>$5,long,);
Parameter(<init>$5,boolean,);
Parameter(<init>$5,long,);
Parameter(setName,java.lang.String,);
Parameter(setExists,boolean,);
Parameter(setLastModified,long,);
Parameter(setDirectory,boolean,);
Parameter(setSize,long,);
Parameter(compareTo,java.lang.Object,);
Parameter(equals,java.lang.Object,);
Parameter(setRefid,org.apache.tools.ant.types.Reference,);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
SubClass(org.apache.tools.ant.types.resources.FileResource);
Generalization(org.apache.tools.ant.types.DataType);
Realization(org.apache.tools.ant.types.ResourceCollection);
Call(METHOD,org.apache.tools.ant.types.Resource,<init>$2 --> <init>$4,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,<init>$3 --> <init>$4,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,<init>$4 --> <init>$5,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,<init>$5 --> setName,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,<init>$5 --> setExists,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,<init>$5 --> setLastModified,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,<init>$5 --> setDirectory,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,<init>$5 --> setSize,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,getName --> getName,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,isExists --> isExists,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,getLastModified --> getLastModified,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,getLastModified --> isExists,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,isDirectory --> isDirectory,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,getSize --> getSize,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,getSize --> isExists,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,compareTo --> toString,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,equals --> compareTo,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,hashCode --> getName,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,getInputStream --> getInputStream,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,getOutputStream --> getOutputStream,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,iterator --> iterator,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,size --> size,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,isFilesystemOnly --> isFilesystemOnly,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,toString --> getName,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,toLongString --> toLongString,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,toLongString --> toString,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.Resource,<clinit> --> getMagicNumber,org.apache.tools.ant.types.Resource,);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,<init> --> name,org.apache.tools.ant.types.Resource,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,<init> --> exists,org.apache.tools.ant.types.Resource,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,<init> --> lastmodified,org.apache.tools.ant.types.Resource,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,<init> --> directory,org.apache.tools.ant.types.Resource,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,<init> --> size,org.apache.tools.ant.types.Resource,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,<init>$5 --> name,org.apache.tools.ant.types.Resource,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,<init>$5 --> exists,org.apache.tools.ant.types.Resource,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,<init>$5 --> lastmodified,org.apache.tools.ant.types.Resource,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,<init>$5 --> directory,org.apache.tools.ant.types.Resource,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,<init>$5 --> size,org.apache.tools.ant.types.Resource,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,getName --> name,org.apache.tools.ant.types.Resource,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,setName --> name,org.apache.tools.ant.types.Resource,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,isExists --> exists,org.apache.tools.ant.types.Resource,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,setExists --> exists,org.apache.tools.ant.types.Resource,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,getLastModified --> lastmodified,org.apache.tools.ant.types.Resource,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,setLastModified --> lastmodified,org.apache.tools.ant.types.Resource,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,isDirectory --> directory,org.apache.tools.ant.types.Resource,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,setDirectory --> directory,org.apache.tools.ant.types.Resource,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,setSize --> size,org.apache.tools.ant.types.Resource,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,getSize --> size,org.apache.tools.ant.types.Resource,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,hashCode --> MAGIC,org.apache.tools.ant.types.Resource,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,hashCode --> NULL_NAME,org.apache.tools.ant.types.Resource,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,setRefid --> name,org.apache.tools.ant.types.Resource,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,setRefid --> exists,org.apache.tools.ant.types.Resource,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,setRefid --> lastmodified,org.apache.tools.ant.types.Resource,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,setRefid --> directory,org.apache.tools.ant.types.Resource,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,setRefid --> size,org.apache.tools.ant.types.Resource,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,<clinit> --> MAGIC,org.apache.tools.ant.types.Resource,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource,<clinit> --> NULL_NAME,org.apache.tools.ant.types.Resource,WRITE);
Call(METHOD,org.apache.tools.ant.types.Resource,<init> --> <init>,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,<init>$5 --> <init>,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,getName --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,getName --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,setName --> checkAttributesAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,isExists --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,isExists --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,setExists --> checkAttributesAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,getLastModified --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,getLastModified --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,setLastModified --> checkAttributesAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,isDirectory --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,isDirectory --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,setDirectory --> checkAttributesAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,setSize --> checkAttributesAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,getSize --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,getSize --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,clone --> clone,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,compareTo --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,compareTo --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,equals --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,equals --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,hashCode --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,hashCode --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,getInputStream --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,getInputStream --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,getOutputStream --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,getOutputStream --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,iterator --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,iterator --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,iterator --> <init>,org.apache.tools.ant.types.Resource$1,);
Call(METHOD,org.apache.tools.ant.types.Resource,size --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,size --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,isFilesystemOnly --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,isFilesystemOnly --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,toString --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,toString --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,toLongString --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,toLongString --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,toLongString --> getDataTypeName,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,setRefid --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Resource,setRefid --> setRefid,org.apache.tools.ant.types.DataType,);
EndClass 27
StartClass 28
Class(org.apache.tools.ant.types.Description,N,N,Public);
Method(<init>,void,Public,N,N);
Method(addText,void,Public,N,N);
Method(getDescription,java.lang.String,Public,Y,N);
Method(concatDescriptions,void,Private,Y,N);
Method(findElementInTarget,java.util.Vector,Private,Y,N);
Parameter(addText,java.lang.String,);
Parameter(getDescription,org.apache.tools.ant.Project,);
Parameter(concatDescriptions,org.apache.tools.ant.Project,);
Parameter(concatDescriptions,org.apache.tools.ant.Target,);
Parameter(concatDescriptions,java.lang.StringBuffer,);
Parameter(findElementInTarget,org.apache.tools.ant.Project,);
Parameter(findElementInTarget,org.apache.tools.ant.Target,);
Parameter(findElementInTarget,java.lang.String,);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.DataType);
Call(METHOD,org.apache.tools.ant.types.Description,getDescription --> concatDescriptions,org.apache.tools.ant.types.Description,);
Call(METHOD,org.apache.tools.ant.types.Description,concatDescriptions --> findElementInTarget,org.apache.tools.ant.types.Description,);
Call(METHOD,org.apache.tools.ant.types.Description,<init> --> <init>,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Description,addText --> getProjectHelper,org.apache.tools.ant.ProjectHelper,);
Call(METHOD,org.apache.tools.ant.types.Description,addText --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.Description,addText --> getDescription,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.types.Description,addText --> setDescription,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.types.Description,getDescription --> getReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.types.Description,concatDescriptions --> getWrapper,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.types.Description,concatDescriptions --> getText,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.types.Description,concatDescriptions --> replaceProperties,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.types.Description,findElementInTarget --> getTasks,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.types.Description,findElementInTarget --> getTaskName,org.apache.tools.ant.Task,);
EndClass 28
StartClass 29
Class(org.apache.tools.ant.util.JavaEnvUtils,N,N,Public);
Attribute(IS_DOS,boolean,Private,Y,Y,);
Attribute(IS_NETWARE,boolean,Private,Y,Y,);
Attribute(IS_AIX,boolean,Private,Y,Y,);
Attribute(JAVA_HOME,java.lang.String,Private,Y,Y,);
Attribute(FILE_UTILS,org.apache.tools.ant.util.FileUtils,Private,Y,Y,);
Attribute(javaVersion,java.lang.String,Private,Y,N,);
Attribute(javaVersionNumber,int,Private,Y,N,);
Attribute(JAVA_1_0,java.lang.String,Public,Y,Y,);
Attribute(JAVA_1_1,java.lang.String,Public,Y,Y,);
Attribute(JAVA_1_2,java.lang.String,Public,Y,Y,);
Attribute(JAVA_1_3,java.lang.String,Public,Y,Y,);
Attribute(JAVA_1_4,java.lang.String,Public,Y,Y,);
Attribute(JAVA_1_5,java.lang.String,Public,Y,Y,);
Attribute(JAVA_1_6,java.lang.String,Public,Y,Y,);
Attribute(kaffeDetected,boolean,Private,Y,N,);
Attribute(jrePackages,java.util.Vector,Private,Y,N,);
Method(<init>,void,Private,N,N);
Method(getJavaVersion,java.lang.String,Public,Y,N);
Method(getJavaVersionNumber,int,Public,Y,N);
Method(isJavaVersion,boolean,Public,Y,N);
Method(isAtLeastJavaVersion,boolean,Public,Y,N);
Method(isKaffe,boolean,Public,Y,N);
Method(getJreExecutable,java.lang.String,Public,Y,N);
Method(getJdkExecutable,java.lang.String,Public,Y,N);
Method(addExtension,java.lang.String,Private,Y,N);
Method(findInDir,java.io.File,Private,Y,N);
Method(buildJrePackages,void,Private,Y,N);
Method(getJrePackageTestCases,java.util.Vector,Public,Y,N);
Method(getJrePackages,java.util.Vector,Public,Y,N);
Method(createVmsJavaOptionFile,java.io.File,Public,Y,N);
Method(getJavaHome,java.lang.String,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(isJavaVersion,java.lang.String,);
Parameter(isAtLeastJavaVersion,java.lang.String,);
Parameter(getJreExecutable,java.lang.String,);
Parameter(getJdkExecutable,java.lang.String,);
Parameter(addExtension,java.lang.String,);
Parameter(findInDir,java.lang.String,);
Parameter(findInDir,java.lang.String,);
Parameter(createVmsJavaOptionFile,java.lang.String[],);
Composition(org.apache.tools.ant.util.FileUtils);
Call(METHOD,org.apache.tools.ant.util.JavaEnvUtils,getJreExecutable --> findInDir,org.apache.tools.ant.util.JavaEnvUtils,);
Call(METHOD,org.apache.tools.ant.util.JavaEnvUtils,getJreExecutable --> addExtension,org.apache.tools.ant.util.JavaEnvUtils,);
Call(METHOD,org.apache.tools.ant.util.JavaEnvUtils,getJdkExecutable --> findInDir,org.apache.tools.ant.util.JavaEnvUtils,);
Call(METHOD,org.apache.tools.ant.util.JavaEnvUtils,getJdkExecutable --> getJreExecutable,org.apache.tools.ant.util.JavaEnvUtils,);
Call(METHOD,org.apache.tools.ant.util.JavaEnvUtils,findInDir --> addExtension,org.apache.tools.ant.util.JavaEnvUtils,);
Call(METHOD,org.apache.tools.ant.util.JavaEnvUtils,getJrePackages --> buildJrePackages,org.apache.tools.ant.util.JavaEnvUtils,);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,getJavaVersion --> javaVersion,org.apache.tools.ant.util.JavaEnvUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,getJavaVersionNumber --> javaVersionNumber,org.apache.tools.ant.util.JavaEnvUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,isJavaVersion --> javaVersion,org.apache.tools.ant.util.JavaEnvUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,isAtLeastJavaVersion --> javaVersion,org.apache.tools.ant.util.JavaEnvUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,isKaffe --> kaffeDetected,org.apache.tools.ant.util.JavaEnvUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,getJreExecutable --> IS_NETWARE,org.apache.tools.ant.util.JavaEnvUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,getJreExecutable --> IS_AIX,org.apache.tools.ant.util.JavaEnvUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,getJreExecutable --> JAVA_HOME,org.apache.tools.ant.util.JavaEnvUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,getJdkExecutable --> IS_NETWARE,org.apache.tools.ant.util.JavaEnvUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,getJdkExecutable --> IS_AIX,org.apache.tools.ant.util.JavaEnvUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,getJdkExecutable --> JAVA_HOME,org.apache.tools.ant.util.JavaEnvUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,addExtension --> IS_DOS,org.apache.tools.ant.util.JavaEnvUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,findInDir --> FILE_UTILS,org.apache.tools.ant.util.JavaEnvUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,buildJrePackages --> javaVersionNumber,org.apache.tools.ant.util.JavaEnvUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,buildJrePackages --> jrePackages,org.apache.tools.ant.util.JavaEnvUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,buildJrePackages --> jrePackages,org.apache.tools.ant.util.JavaEnvUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,getJrePackageTestCases --> javaVersionNumber,org.apache.tools.ant.util.JavaEnvUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,getJrePackages --> jrePackages,org.apache.tools.ant.util.JavaEnvUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,createVmsJavaOptionFile --> FILE_UTILS,org.apache.tools.ant.util.JavaEnvUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,getJavaHome --> JAVA_HOME,org.apache.tools.ant.util.JavaEnvUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,<clinit> --> javaVersionNumber,org.apache.tools.ant.util.JavaEnvUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,<clinit> --> IS_DOS,org.apache.tools.ant.util.JavaEnvUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,<clinit> --> IS_NETWARE,org.apache.tools.ant.util.JavaEnvUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,<clinit> --> IS_AIX,org.apache.tools.ant.util.JavaEnvUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,<clinit> --> JAVA_HOME,org.apache.tools.ant.util.JavaEnvUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,<clinit> --> FILE_UTILS,org.apache.tools.ant.util.JavaEnvUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,<clinit> --> javaVersion,org.apache.tools.ant.util.JavaEnvUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,<clinit> --> javaVersionNumber,org.apache.tools.ant.util.JavaEnvUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.JavaEnvUtils,<clinit> --> kaffeDetected,org.apache.tools.ant.util.JavaEnvUtils,WRITE);
Call(METHOD,org.apache.tools.ant.util.JavaEnvUtils,findInDir --> normalize,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.JavaEnvUtils,createVmsJavaOptionFile --> createTempFile,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.JavaEnvUtils,createVmsJavaOptionFile --> close,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.JavaEnvUtils,<clinit> --> isFamily,org.apache.tools.ant.taskdefs.condition.Os,);
Call(METHOD,org.apache.tools.ant.util.JavaEnvUtils,<clinit> --> isName,org.apache.tools.ant.taskdefs.condition.Os,);
Call(METHOD,org.apache.tools.ant.util.JavaEnvUtils,<clinit> --> getFileUtils,org.apache.tools.ant.util.FileUtils,);
EndClass 29
StartClass 30
Class(org.apache.tools.ant.types.resources.FileResource,N,N,Public);
Attribute(FILE_UTILS,org.apache.tools.ant.util.FileUtils,Private,Y,Y,);
Attribute(NULL_FILE,int,Private,Y,Y,);
Attribute(file,java.io.File,Private,N,N,);
Attribute(baseDir,java.io.File,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(setFile,void,Public,N,N);
Method(getFile,java.io.File,Public,N,N);
Method(setBaseDir,void,Public,N,N);
Method(getBaseDir,java.io.File,Public,N,N);
Method(setRefid,void,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(isExists,boolean,Public,N,N);
Method(getLastModified,long,Public,N,N);
Method(isDirectory,boolean,Public,N,N);
Method(getSize,long,Public,N,N);
Method(getInputStream,java.io.InputStream,Public,N,N);
Method(getOutputStream,java.io.OutputStream,Public,N,N);
Method(compareTo,int,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(isFilesystemOnly,boolean,Public,N,N);
Method(touch,void,Public,N,N);
Method(getNotNullFile,java.io.File,Protected,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>$2,java.io.File,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$3,java.io.File,);
Parameter(<init>$4,org.apache.tools.ant.Project,);
Parameter(<init>$4,java.lang.String,);
Parameter(setFile,java.io.File,);
Parameter(setBaseDir,java.io.File,);
Parameter(setRefid,org.apache.tools.ant.types.Reference,);
Parameter(compareTo,java.lang.Object,);
Parameter(equals,java.lang.Object,);
Parameter(touch,long,);
SuperClass(org.apache.tools.ant.types.Resource);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.Resource);
Realization(org.apache.tools.ant.types.resources.Touchable);
Composition(org.apache.tools.ant.util.FileUtils);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,<init>$2 --> setFile,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,<init>$2 --> setBaseDir,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,<init>$3 --> setFile,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,<init>$4 --> <init>$3,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getFile --> getFile,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getBaseDir --> getBaseDir,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getName --> getBaseDir,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getName --> getNotNullFile,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,isExists --> getNotNullFile,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getLastModified --> getNotNullFile,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,isDirectory --> getNotNullFile,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getSize --> getNotNullFile,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getInputStream --> getNotNullFile,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getOutputStream --> getNotNullFile,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,compareTo --> equals,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,compareTo --> getFile,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,equals --> getFile,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,hashCode --> getFile,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,isFilesystemOnly --> isFilesystemOnly,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,touch --> touch,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,touch --> getNotNullFile,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getNotNullFile --> getFile,org.apache.tools.ant.types.resources.FileResource,);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResource,<init>$2 --> FILE_UTILS,org.apache.tools.ant.types.resources.FileResource,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResource,setFile --> file,org.apache.tools.ant.types.resources.FileResource,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResource,getFile --> file,org.apache.tools.ant.types.resources.FileResource,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResource,setBaseDir --> baseDir,org.apache.tools.ant.types.resources.FileResource,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResource,getBaseDir --> baseDir,org.apache.tools.ant.types.resources.FileResource,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResource,setRefid --> file,org.apache.tools.ant.types.resources.FileResource,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResource,setRefid --> baseDir,org.apache.tools.ant.types.resources.FileResource,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResource,getName --> FILE_UTILS,org.apache.tools.ant.types.resources.FileResource,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResource,hashCode --> NULL_FILE,org.apache.tools.ant.types.resources.FileResource,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResource,toString --> file,org.apache.tools.ant.types.resources.FileResource,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResource,toString --> FILE_UTILS,org.apache.tools.ant.types.resources.FileResource,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResource,<clinit> --> FILE_UTILS,org.apache.tools.ant.types.resources.FileResource,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResource,<clinit> --> NULL_FILE,org.apache.tools.ant.types.resources.FileResource,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResource,hashCode --> MAGIC,org.apache.tools.ant.types.Resource,READ);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,<init> --> <init>,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,<init>$2 --> <init>,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,<init>$2 --> resolveFile,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,<init>$3 --> <init>,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,<init>$4 --> resolveFile$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,<init>$4 --> setProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,setFile --> checkAttributesAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getFile --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getFile --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,setBaseDir --> checkAttributesAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getBaseDir --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getBaseDir --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,setRefid --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,setRefid --> setRefid,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getName --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getName --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getName --> getName,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getName --> removeLeadingPath,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,isExists --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,isExists --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,isExists --> isExists,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getLastModified --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getLastModified --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getLastModified --> getLastModified,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,isDirectory --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,isDirectory --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,isDirectory --> isDirectory,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getSize --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getSize --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getSize --> getSize,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getInputStream --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getInputStream --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getInputStream --> getInputStream,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getOutputStream --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getOutputStream --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getOutputStream --> getOutputStream,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,compareTo --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,compareTo --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,compareTo --> compareTo,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,equals --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,equals --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,hashCode --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,hashCode --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,toString --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,toString --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,toString --> normalize,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,isFilesystemOnly --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,isFilesystemOnly --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,touch --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,touch --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,getNotNullFile --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,<clinit> --> getFileUtils,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResource,<clinit> --> getMagicNumber,org.apache.tools.ant.types.Resource,);
EndClass 30
StartClass 31
Class(org.apache.tools.ant.UnknownElement,N,N,Public);
Attribute(elementName,java.lang.String,Private,N,N,);
Attribute(namespace,java.lang.String,Private,N,N,);
Attribute(qname,java.lang.String,Private,N,N,);
Attribute(realThing,java.lang.Object,Private,N,N,);
Attribute(children,java.util.List,Private,N,N,);
Attribute(presetDefed,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getChildren,java.util.List,Public,N,N);
Method(getTag,java.lang.String,Public,N,N);
Method(getNamespace,java.lang.String,Public,N,N);
Method(setNamespace,void,Public,N,N);
Method(getQName,java.lang.String,Public,N,N);
Method(setQName,void,Public,N,N);
Method(getWrapper,org.apache.tools.ant.RuntimeConfigurable,Public,N,N);
Method(maybeConfigure,void,Public,N,N);
Method(configure,void,Public,N,N);
Method(handleOutput,void,Protected,N,N);
Method(handleInput,int,Protected,N,N);
Method(handleFlush,void,Protected,N,N);
Method(handleErrorOutput,void,Protected,N,N);
Method(handleErrorFlush,void,Protected,N,N);
Method(execute,void,Public,N,N);
Method(addChild,void,Public,N,N);
Method(handleChildren,void,Protected,N,N);
Method(getComponentName,java.lang.String,Protected,N,N);
Method(applyPreSet,void,Public,N,N);
Method(makeObject,java.lang.Object,Protected,N,N);
Method(makeTask,org.apache.tools.ant.Task,Protected,N,N);
Method(getNotFoundException,org.apache.tools.ant.BuildException,Protected,N,N);
Method(getTaskName,java.lang.String,Public,N,N);
Method(getTask,org.apache.tools.ant.Task,Public,N,N);
Method(getRealThing,java.lang.Object,Public,N,N);
Method(setRealThing,void,Public,N,N);
Method(handleChild,boolean,Private,N,N);
Method(similar,boolean,Public,N,N);
Method(equalsString,boolean,Private,Y,N);
Method(copy,org.apache.tools.ant.UnknownElement,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(setNamespace,java.lang.String,);
Parameter(setQName,java.lang.String,);
Parameter(configure,java.lang.Object,);
Parameter(handleOutput,java.lang.String,);
Parameter(handleInput,byte[],);
Parameter(handleInput,int,);
Parameter(handleInput,int,);
Parameter(handleFlush,java.lang.String,);
Parameter(handleErrorOutput,java.lang.String,);
Parameter(handleErrorFlush,java.lang.String,);
Parameter(addChild,org.apache.tools.ant.UnknownElement,);
Parameter(handleChildren,java.lang.Object,);
Parameter(handleChildren,org.apache.tools.ant.RuntimeConfigurable,);
Parameter(applyPreSet,org.apache.tools.ant.UnknownElement,);
Parameter(makeObject,org.apache.tools.ant.UnknownElement,);
Parameter(makeObject,org.apache.tools.ant.RuntimeConfigurable,);
Parameter(makeTask,org.apache.tools.ant.UnknownElement,);
Parameter(makeTask,org.apache.tools.ant.RuntimeConfigurable,);
Parameter(getNotFoundException,java.lang.String,);
Parameter(getNotFoundException,java.lang.String,);
Parameter(setRealThing,java.lang.Object,);
Parameter(handleChild,java.lang.String,);
Parameter(handleChild,org.apache.tools.ant.IntrospectionHelper,);
Parameter(handleChild,java.lang.Object,);
Parameter(handleChild,org.apache.tools.ant.UnknownElement,);
Parameter(handleChild,org.apache.tools.ant.RuntimeConfigurable,);
Parameter(similar,java.lang.Object,);
Parameter(equalsString,java.lang.String,);
Parameter(equalsString,java.lang.String,);
Parameter(copy,org.apache.tools.ant.Project,);
SuperClass(org.apache.tools.ant.Task);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.Task);
Call(METHOD,org.apache.tools.ant.UnknownElement,maybeConfigure --> getWrapper,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,maybeConfigure --> makeObject,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,maybeConfigure --> configure,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,configure --> getWrapper,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,configure --> handleChildren,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,execute --> getWrapper,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChildren --> getNamespace,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChildren --> handleChild,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChildren --> getTag,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,getComponentName --> getNamespace,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,getComponentName --> getTag,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,applyPreSet --> getWrapper,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeObject --> getComponentName,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeObject --> getNamespace,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeObject --> getNotFoundException,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeObject --> applyPreSet,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeObject --> getTaskName,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeObject --> makeObject,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeTask --> getTag,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChild --> getNamespace,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChild --> getTag,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChild --> applyPreSet,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChild --> handleChildren,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,similar --> equalsString,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,similar --> getWrapper,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,similar --> similar,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> getTag,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> <init>,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> getNamespace,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> setNamespace,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> getQName,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> setQName,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> getTaskName,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> getWrapper,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> copy,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> addChild,org.apache.tools.ant.UnknownElement,);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,<init> --> namespace,org.apache.tools.ant.UnknownElement,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,<init> --> children,org.apache.tools.ant.UnknownElement,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,<init> --> presetDefed,org.apache.tools.ant.UnknownElement,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,<init> --> elementName,org.apache.tools.ant.UnknownElement,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,getChildren --> children,org.apache.tools.ant.UnknownElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,getTag --> elementName,org.apache.tools.ant.UnknownElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,getNamespace --> namespace,org.apache.tools.ant.UnknownElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,setNamespace --> namespace,org.apache.tools.ant.UnknownElement,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,getQName --> qname,org.apache.tools.ant.UnknownElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,setQName --> qname,org.apache.tools.ant.UnknownElement,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,maybeConfigure --> realThing,org.apache.tools.ant.UnknownElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,configure --> realThing,org.apache.tools.ant.UnknownElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,configure --> realThing,org.apache.tools.ant.UnknownElement,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,handleOutput --> realThing,org.apache.tools.ant.UnknownElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,handleInput --> realThing,org.apache.tools.ant.UnknownElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,handleFlush --> realThing,org.apache.tools.ant.UnknownElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,handleErrorOutput --> realThing,org.apache.tools.ant.UnknownElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,handleErrorFlush --> realThing,org.apache.tools.ant.UnknownElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,execute --> realThing,org.apache.tools.ant.UnknownElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,execute --> elementName,org.apache.tools.ant.UnknownElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,execute --> realThing,org.apache.tools.ant.UnknownElement,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,addChild --> children,org.apache.tools.ant.UnknownElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,addChild --> children,org.apache.tools.ant.UnknownElement,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,handleChildren --> children,org.apache.tools.ant.UnknownElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,applyPreSet --> presetDefed,org.apache.tools.ant.UnknownElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,applyPreSet --> children,org.apache.tools.ant.UnknownElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,applyPreSet --> children,org.apache.tools.ant.UnknownElement,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,applyPreSet --> presetDefed,org.apache.tools.ant.UnknownElement,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,getTaskName --> realThing,org.apache.tools.ant.UnknownElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,getTask --> realThing,org.apache.tools.ant.UnknownElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,getRealThing --> realThing,org.apache.tools.ant.UnknownElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,setRealThing --> realThing,org.apache.tools.ant.UnknownElement,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,similar --> elementName,org.apache.tools.ant.UnknownElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,similar --> namespace,org.apache.tools.ant.UnknownElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,similar --> qname,org.apache.tools.ant.UnknownElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.UnknownElement,similar --> children,org.apache.tools.ant.UnknownElement,READ);
Call(METHOD,org.apache.tools.ant.UnknownElement,<init> --> <init>,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,setNamespace --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.UnknownElement,setNamespace --> getComponentHelper,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.UnknownElement,setNamespace --> getCurrentAntlibUri,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.UnknownElement,getWrapper --> getWrapper,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,configure --> setProxy,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.UnknownElement,configure --> setRuntimeConfigurableWrapper,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,configure --> getId,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.UnknownElement,configure --> getOwningTarget,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,configure --> replaceChild$2,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.UnknownElement,configure --> maybeConfigure,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,configure --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.UnknownElement,configure --> maybeConfigure,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleOutput --> handleOutput,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleInput --> handleInput,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleFlush --> handleFlush,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleErrorOutput --> handleErrorOutput,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleErrorFlush --> handleErrorOutput,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,execute --> getLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.UnknownElement,execute --> <init>$6,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.UnknownElement,execute --> execute,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,execute --> setProxy,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChildren --> getProxy,org.apache.tools.ant.TypeAdapter,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChildren --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChildren --> getHelper$2,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChildren --> getChild,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChildren --> throwNotSupported,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChildren --> addTask,org.apache.tools.ant.TaskContainer,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChildren --> getElementTag,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChildren --> getElement,org.apache.tools.ant.UnsupportedElementException,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChildren --> <init>$3,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.UnknownElement,getComponentName --> genComponentName,org.apache.tools.ant.ProjectHelper,);
Call(METHOD,org.apache.tools.ant.UnknownElement,applyPreSet --> applyPreSet,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeObject --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeObject --> getComponentHelper,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeObject --> createComponent,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeObject --> createObject,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeObject --> getPreSets,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeObject --> getTaskType,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeObject --> setTaskType,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeObject --> setTaskName,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeObject --> init,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeObject --> getOwningTarget,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeObject --> setOwningTarget,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeObject --> getLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeObject --> setLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeTask --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeTask --> createTask,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeTask --> getLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeTask --> setLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeTask --> getOwningTarget,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeTask --> setOwningTarget,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,makeTask --> init,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,getNotFoundException --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.UnknownElement,getNotFoundException --> getComponentHelper,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.UnknownElement,getNotFoundException --> diagnoseCreationFailure,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.UnknownElement,getNotFoundException --> getLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.UnknownElement,getNotFoundException --> <init>$6,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.UnknownElement,getTaskName --> getTaskName,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChild --> genComponentName,org.apache.tools.ant.ProjectHelper,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChild --> supportsNestedElement$2,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChild --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChild --> getElementCreator,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChild --> getPolyType,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChild --> setPolyType,org.apache.tools.ant.IntrospectionHelper$Creator,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChild --> create,org.apache.tools.ant.IntrospectionHelper$Creator,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChild --> getRealObject,org.apache.tools.ant.IntrospectionHelper$Creator,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChild --> getPreSets,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChild --> setCreator,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChild --> setProxy,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChild --> setRuntimeConfigurableWrapper,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChild --> setTaskName,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChild --> setTaskType,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChild --> getLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChild --> setLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChild --> maybeConfigure,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.UnknownElement,handleChild --> store,org.apache.tools.ant.IntrospectionHelper$Creator,);
Call(METHOD,org.apache.tools.ant.UnknownElement,similar --> getAttributeMap,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.UnknownElement,similar --> getText,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> setProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> getTaskType,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> setTaskType,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> setTaskName,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> getLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> setLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> getOwningTarget,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> <init>,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> setProject,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> setOwningTarget,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> <init>,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> getPolyType,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> setPolyType,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> getAttributeMap,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> setAttribute,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> getText,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> addText,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> getChildren,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> getProxy,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.UnknownElement,copy --> addChild,org.apache.tools.ant.RuntimeConfigurable,);
EndClass 31
StartClass 32
Class(org.apache.tools.ant.ComponentHelper,N,N,Public);
Attribute(antTypeTable,org.apache.tools.ant.ComponentHelper$AntTypeTable,Private,N,N,);
Attribute(taskClassDefinitions,java.util.Hashtable,Private,N,N,);
Attribute(rebuildTaskClassDefinitions,boolean,Private,N,N,);
Attribute(typeClassDefinitions,java.util.Hashtable,Private,N,N,);
Attribute(rebuildTypeClassDefinitions,boolean,Private,N,N,);
Attribute(checkedNamespaces,java.util.Set,Private,N,N,);
Attribute(antLibStack,java.util.Stack,Private,N,N,);
Attribute(antLibCurrentUri,java.lang.String,Private,N,N,);
Attribute(next,org.apache.tools.ant.ComponentHelper,Private,N,N,);
Attribute(project,org.apache.tools.ant.Project,Private,N,N,);
Attribute(ERROR_NO_TASK_LIST_LOAD,java.lang.String,Private,Y,Y,);
Attribute(ERROR_NO_TYPE_LIST_LOAD,java.lang.String,Private,Y,Y,);
Attribute(COMPONENT_HELPER_REFERENCE,java.lang.String,Public,Y,Y,);
Attribute(BUILD_SYSCLASSPATH_ONLY,java.lang.String,Private,Y,Y,);
Attribute(ANT_PROPERTY_TASK,java.lang.String,Private,Y,Y,);
Attribute(defaultDefinitions,java.util.Properties[],Private,Y,N,);
Attribute(class$org$apache$tools$ant$TaskAdapter,java.lang.Class,Public,Y,N,);
Attribute(class$org$apache$tools$ant$Task,java.lang.Class,Public,Y,N,);
Attribute(class$org$apache$tools$ant$taskdefs$Property,java.lang.Class,Public,Y,N,);
Attribute(class$org$apache$tools$ant$Project,java.lang.Class,Public,Y,N,);
Attribute(class$org$apache$tools$ant$ComponentHelper,java.lang.Class,Public,Y,N,);
Method(getComponentHelper,org.apache.tools.ant.ComponentHelper,Public,Y,N);
Method(<init>,void,Protected,N,N);
Method(setNext,void,Public,N,N);
Method(getNext,org.apache.tools.ant.ComponentHelper,Public,N,N);
Method(setProject,void,Public,N,N);
Method(initSubProject,void,Public,N,N);
Method(createComponent,java.lang.Object,Public,N,N);
Method(createComponent$2,java.lang.Object,Public,N,N);
Method(getComponentClass,java.lang.Class,Public,N,N);
Method(getDefinition,org.apache.tools.ant.AntTypeDefinition,Public,N,N);
Method(initDefaultDefinitions,void,Public,N,N);
Method(addTaskDefinition,void,Public,N,N);
Method(checkTaskClass,void,Public,N,N);
Method(getTaskDefinitions,java.util.Hashtable,Public,N,N);
Method(getDataTypeDefinitions,java.util.Hashtable,Public,N,N);
Method(addDataTypeDefinition,void,Public,N,N);
Method(addDataTypeDefinition$2,void,Public,N,N);
Method(getAntTypeTable,java.util.Hashtable,Public,N,N);
Method(createTask,org.apache.tools.ant.Task,Public,N,N);
Method(createNewTask,org.apache.tools.ant.Task,Private,N,N);
Method(createDataType,java.lang.Object,Public,N,N);
Method(getElementName,java.lang.String,Public,N,N);
Method(getElementName$2,java.lang.String,Public,N,N);
Method(getElementName$3,java.lang.String,Public,Y,N);
Method(getUnmappedElementName,java.lang.String,Private,Y,N);
Method(getProject,org.apache.tools.ant.Project,Private,Y,N);
Method(validDefinition,boolean,Private,N,N);
Method(sameDefinition,boolean,Private,N,N);
Method(updateDataTypeDefinition,void,Private,N,N);
Method(enterAntLib,void,Public,N,N);
Method(getCurrentAntlibUri,java.lang.String,Public,N,N);
Method(exitAntLib,void,Public,N,N);
Method(initTasks,void,Private,N,N);
Method(getClassLoader,java.lang.ClassLoader,Private,N,N);
Method(getDefaultDefinitions,java.util.Properties,Private,Y,N);
Method(initTypes,void,Private,N,N);
Method(checkNamespace,void,Private,N,N);
Method(diagnoseCreationFailure,java.lang.String,Public,N,N);
Method(class$,java.lang.Class,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(getComponentHelper,org.apache.tools.ant.Project,);
Parameter(setNext,org.apache.tools.ant.ComponentHelper,);
Parameter(setProject,org.apache.tools.ant.Project,);
Parameter(initSubProject,org.apache.tools.ant.ComponentHelper,);
Parameter(createComponent,org.apache.tools.ant.UnknownElement,);
Parameter(createComponent,java.lang.String,);
Parameter(createComponent,java.lang.String,);
Parameter(createComponent$2,java.lang.String,);
Parameter(getComponentClass,java.lang.String,);
Parameter(getDefinition,java.lang.String,);
Parameter(addTaskDefinition,java.lang.String,);
Parameter(addTaskDefinition,java.lang.Class,);
Parameter(checkTaskClass,java.lang.Class,);
Parameter(addDataTypeDefinition,java.lang.String,);
Parameter(addDataTypeDefinition,java.lang.Class,);
Parameter(addDataTypeDefinition$2,org.apache.tools.ant.AntTypeDefinition,);
Parameter(createTask,java.lang.String,);
Parameter(createNewTask,java.lang.String,);
Parameter(createDataType,java.lang.String,);
Parameter(getElementName,java.lang.Object,);
Parameter(getElementName$2,java.lang.Object,);
Parameter(getElementName$2,boolean,);
Parameter(getElementName$3,org.apache.tools.ant.Project,);
Parameter(getElementName$3,java.lang.Object,);
Parameter(getElementName$3,boolean,);
Parameter(getUnmappedElementName,java.lang.Class,);
Parameter(getUnmappedElementName,boolean,);
Parameter(getProject,java.lang.Object,);
Parameter(validDefinition,org.apache.tools.ant.AntTypeDefinition,);
Parameter(sameDefinition,org.apache.tools.ant.AntTypeDefinition,);
Parameter(sameDefinition,org.apache.tools.ant.AntTypeDefinition,);
Parameter(updateDataTypeDefinition,org.apache.tools.ant.AntTypeDefinition,);
Parameter(enterAntLib,java.lang.String,);
Parameter(getClassLoader,java.lang.ClassLoader,);
Parameter(getDefaultDefinitions,boolean,);
Parameter(checkNamespace,java.lang.String,);
Parameter(diagnoseCreationFailure,java.lang.String,);
Parameter(diagnoseCreationFailure,java.lang.String,);
Parameter(class$,java.lang.String,);
Composition(org.apache.tools.ant.ComponentHelper$AntTypeTable);
Composition(org.apache.tools.ant.ComponentHelper);
Composition(org.apache.tools.ant.Project);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getComponentHelper --> <init>,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getComponentHelper --> setProject,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,createComponent --> createComponent$2,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,createComponent$2 --> getDefinition,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getComponentClass --> getDefinition,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getDefinition --> checkNamespace,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,initDefaultDefinitions --> initTasks,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,initDefaultDefinitions --> initTypes,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,addTaskDefinition --> checkTaskClass,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,addTaskDefinition --> class$,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,addTaskDefinition --> updateDataTypeDefinition,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,checkTaskClass --> class$,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getTaskDefinitions --> class$,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getDataTypeDefinitions --> class$,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,addDataTypeDefinition --> updateDataTypeDefinition,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,addDataTypeDefinition$2 --> updateDataTypeDefinition,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,createTask --> createNewTask,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,createTask --> class$,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,createTask --> addTaskDefinition,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,createNewTask --> getComponentClass,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,createNewTask --> class$,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,createNewTask --> createComponent$2,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,createDataType --> createComponent$2,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getElementName --> getElementName$2,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getElementName$2 --> getUnmappedElementName,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getElementName$3 --> getProject,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getElementName$3 --> getUnmappedElementName,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getElementName$3 --> getComponentHelper,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getElementName$3 --> getElementName$2,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getProject --> class$,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,sameDefinition --> validDefinition,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,updateDataTypeDefinition --> sameDefinition,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,updateDataTypeDefinition --> class$,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,initTasks --> getClassLoader,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,initTasks --> getDefaultDefinitions,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,initTasks --> class$,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getDefaultDefinitions --> class$,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,initTypes --> getClassLoader,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,initTypes --> getDefaultDefinitions,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,diagnoseCreationFailure --> getDefinition,org.apache.tools.ant.ComponentHelper,);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,<init> --> taskClassDefinitions,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,<init> --> rebuildTaskClassDefinitions,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,<init> --> typeClassDefinitions,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,<init> --> rebuildTypeClassDefinitions,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,<init> --> checkedNamespaces,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,<init> --> antLibStack,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,<init> --> antLibCurrentUri,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,setNext --> next,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getNext --> next,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,setProject --> project,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,setProject --> antTypeTable,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,initSubProject --> antTypeTable,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,initSubProject --> checkedNamespaces,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,createComponent$2 --> project,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getComponentClass --> project,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getDefinition --> antTypeTable,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,addTaskDefinition --> class$org$apache$tools$ant$TaskAdapter,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,addTaskDefinition --> class$org$apache$tools$ant$Task,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,addTaskDefinition --> class$org$apache$tools$ant$TaskAdapter,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,addTaskDefinition --> class$org$apache$tools$ant$Task,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,checkTaskClass --> project,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,checkTaskClass --> class$org$apache$tools$ant$Task,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,checkTaskClass --> class$org$apache$tools$ant$Task,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getTaskDefinitions --> taskClassDefinitions,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getTaskDefinitions --> antTypeTable,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getTaskDefinitions --> rebuildTaskClassDefinitions,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getTaskDefinitions --> class$org$apache$tools$ant$Task,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getTaskDefinitions --> class$org$apache$tools$ant$Task,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getTaskDefinitions --> rebuildTaskClassDefinitions,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getDataTypeDefinitions --> typeClassDefinitions,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getDataTypeDefinitions --> antTypeTable,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getDataTypeDefinitions --> rebuildTypeClassDefinitions,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getDataTypeDefinitions --> class$org$apache$tools$ant$Task,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getDataTypeDefinitions --> class$org$apache$tools$ant$Task,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getDataTypeDefinitions --> rebuildTypeClassDefinitions,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,addDataTypeDefinition --> project,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getAntTypeTable --> antTypeTable,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,createTask --> class$org$apache$tools$ant$taskdefs$Property,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,createTask --> class$org$apache$tools$ant$taskdefs$Property,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,createNewTask --> class$org$apache$tools$ant$Task,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,createNewTask --> project,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,createNewTask --> class$org$apache$tools$ant$Task,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getElementName$2 --> antTypeTable,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getElementName$2 --> project,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getProject --> class$org$apache$tools$ant$Project,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getProject --> class$org$apache$tools$ant$Project,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,validDefinition --> project,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,sameDefinition --> project,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,updateDataTypeDefinition --> antTypeTable,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,updateDataTypeDefinition --> class$org$apache$tools$ant$Task,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,updateDataTypeDefinition --> project,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,updateDataTypeDefinition --> rebuildTaskClassDefinitions,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,updateDataTypeDefinition --> rebuildTypeClassDefinitions,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,updateDataTypeDefinition --> class$org$apache$tools$ant$Task,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,enterAntLib --> antLibStack,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,enterAntLib --> antLibCurrentUri,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getCurrentAntlibUri --> antLibCurrentUri,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,exitAntLib --> antLibStack,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,exitAntLib --> antLibCurrentUri,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,initTasks --> class$org$apache$tools$ant$Task,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,initTasks --> class$org$apache$tools$ant$TaskAdapter,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,initTasks --> antTypeTable,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,initTasks --> class$org$apache$tools$ant$Task,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,initTasks --> class$org$apache$tools$ant$TaskAdapter,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getClassLoader --> project,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getDefaultDefinitions --> defaultDefinitions,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getDefaultDefinitions --> class$org$apache$tools$ant$ComponentHelper,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,getDefaultDefinitions --> class$org$apache$tools$ant$ComponentHelper,org.apache.tools.ant.ComponentHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,initTypes --> antTypeTable,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,checkNamespace --> checkedNamespaces,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,checkNamespace --> project,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,diagnoseCreationFailure --> project,org.apache.tools.ant.ComponentHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper,<clinit> --> defaultDefinitions,org.apache.tools.ant.ComponentHelper,WRITE);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getComponentHelper --> getReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getComponentHelper --> addReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,setProject --> <init>,org.apache.tools.ant.ComponentHelper$AntTypeTable,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,initSubProject --> getName,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,createComponent --> getLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,createComponent --> setLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,createComponent --> setTaskType,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,createComponent --> getTaskName,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,createComponent --> setTaskName,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,createComponent --> getOwningTarget,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,createComponent --> setOwningTarget,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,createComponent --> init,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,createComponent$2 --> create,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getComponentClass --> getExposedClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getDefinition --> getDefinition,org.apache.tools.ant.ComponentHelper$AntTypeTable,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,addTaskDefinition --> <init>,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,addTaskDefinition --> setName,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,addTaskDefinition --> setClassLoader,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,addTaskDefinition --> setClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,addTaskDefinition --> setAdapterClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,addTaskDefinition --> setClassName,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,addTaskDefinition --> setAdaptToClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,checkTaskClass --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,checkTaskClass --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,checkTaskClass --> checkTaskClass,org.apache.tools.ant.TaskAdapter,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getTaskDefinitions --> getExposedClass,org.apache.tools.ant.ComponentHelper$AntTypeTable,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getTaskDefinitions --> getTypeClass,org.apache.tools.ant.ComponentHelper$AntTypeTable,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getDataTypeDefinitions --> getExposedClass,org.apache.tools.ant.ComponentHelper$AntTypeTable,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getDataTypeDefinitions --> getTypeClass,org.apache.tools.ant.ComponentHelper$AntTypeTable,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,addDataTypeDefinition --> <init>,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,addDataTypeDefinition --> setName,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,addDataTypeDefinition --> setClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,addDataTypeDefinition --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,createNewTask --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,createNewTask --> setTaskType,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,createNewTask --> setTaskName,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,createNewTask --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getElementName$2 --> getClassName,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getElementName$2 --> getExposedClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getElementName$2 --> getName,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getProject --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,validDefinition --> getTypeClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,validDefinition --> getExposedClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,sameDefinition --> sameDefinition,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,updateDataTypeDefinition --> getName,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,updateDataTypeDefinition --> getDefinition,org.apache.tools.ant.ComponentHelper$AntTypeTable,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,updateDataTypeDefinition --> getExposedClass,org.apache.tools.ant.ComponentHelper$AntTypeTable,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,updateDataTypeDefinition --> similarDefinition,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,updateDataTypeDefinition --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,updateDataTypeDefinition --> getClassName,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,initTasks --> <init>,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,initTasks --> setName,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,initTasks --> setClassName,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,initTasks --> setClassLoader,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,initTasks --> setAdaptToClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,initTasks --> setAdapterClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getClassLoader --> getProperty,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getClassLoader --> getCoreLoader,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getDefaultDefinitions --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getDefaultDefinitions --> close$4,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,getDefaultDefinitions --> <init>$3,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,initTypes --> <init>,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,initTypes --> setName,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,initTypes --> setClassName,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,initTypes --> setClassLoader,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,checkNamespace --> extractUriFromComponentName,org.apache.tools.ant.ProjectHelper,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,checkNamespace --> <init>,org.apache.tools.ant.taskdefs.Typedef,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,checkNamespace --> setProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,checkNamespace --> init,org.apache.tools.ant.taskdefs.DefBase,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,checkNamespace --> setURI,org.apache.tools.ant.taskdefs.AntlibDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,checkNamespace --> setTaskName,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,checkNamespace --> makeResourceFromURI,org.apache.tools.ant.taskdefs.Definer,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,checkNamespace --> setResource,org.apache.tools.ant.taskdefs.Definer,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,checkNamespace --> <init>$2,org.apache.tools.ant.taskdefs.Definer$OnError,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,checkNamespace --> setOnError,org.apache.tools.ant.taskdefs.Definer,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,checkNamespace --> execute,org.apache.tools.ant.taskdefs.Definer,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,diagnoseCreationFailure --> getClassName,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,diagnoseCreationFailure --> innerGetTypeClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper,diagnoseCreationFailure --> innerCreateAndSet,org.apache.tools.ant.AntTypeDefinition,);
EndClass 32
StartClass 33
Class(org.apache.tools.ant.types.FilterSet$Filter,N,N,Public);
Attribute(token,java.lang.String,Public,N,N,);
Attribute(value,java.lang.String,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(setToken,void,Public,N,N);
Method(setValue,void,Public,N,N);
Method(getToken,java.lang.String,Public,N,N);
Method(getValue,java.lang.String,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.String,);
Parameter(setToken,java.lang.String,);
Parameter(setValue,java.lang.String,);
Call(METHOD,org.apache.tools.ant.types.FilterSet$Filter,<init> --> setToken,org.apache.tools.ant.types.FilterSet$Filter,);
Call(METHOD,org.apache.tools.ant.types.FilterSet$Filter,<init> --> setValue,org.apache.tools.ant.types.FilterSet$Filter,);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet$Filter,setToken --> token,org.apache.tools.ant.types.FilterSet$Filter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet$Filter,setValue --> value,org.apache.tools.ant.types.FilterSet$Filter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet$Filter,getToken --> token,org.apache.tools.ant.types.FilterSet$Filter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet$Filter,getValue --> value,org.apache.tools.ant.types.FilterSet$Filter,READ);
EndClass 33
StartClass 34
Class(org.apache.tools.ant.util.StringUtils,N,N,Public);
Attribute(LINE_SEP,java.lang.String,Public,Y,Y,);
Method(<init>,void,Private,N,N);
Method(lineSplit,java.util.Vector,Public,Y,N);
Method(split,java.util.Vector,Public,Y,N);
Method(replace,java.lang.String,Public,Y,N);
Method(getStackTrace,java.lang.String,Public,Y,N);
Method(endsWith,boolean,Public,Y,N);
Method(resolveBackSlash,java.lang.String,Public,Y,N);
Method(parseHumanSizes,long,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(lineSplit,java.lang.String,);
Parameter(split,java.lang.String,);
Parameter(split,int,);
Parameter(replace,java.lang.String,);
Parameter(replace,java.lang.String,);
Parameter(replace,java.lang.String,);
Parameter(getStackTrace,java.lang.Throwable,);
Parameter(endsWith,java.lang.StringBuffer,);
Parameter(endsWith,java.lang.String,);
Parameter(resolveBackSlash,java.lang.String,);
Parameter(parseHumanSizes,java.lang.String,);
Call(METHOD,org.apache.tools.ant.util.StringUtils,lineSplit --> split,org.apache.tools.ant.util.StringUtils,);
Call(ATTRIBUTE,org.apache.tools.ant.util.StringUtils,<clinit> --> LINE_SEP,org.apache.tools.ant.util.StringUtils,WRITE);
EndClass 34
StartClass 35
Class(org.apache.tools.ant.SubBuildListener,Y,Y,Public);
Method(subBuildStarted,void,Public,N,Y);
Method(subBuildFinished,void,Public,N,Y);
Parameter(subBuildStarted,org.apache.tools.ant.BuildEvent,);
Parameter(subBuildFinished,org.apache.tools.ant.BuildEvent,);
Realization(org.apache.tools.ant.BuildListener);
EndClass 35
StartClass 36
Class(org.apache.tools.ant.TaskAdapter,N,N,Public);
Attribute(proxy,java.lang.Object,Private,N,N,);
Attribute(class$org$apache$tools$ant$dispatch$Dispatchable,java.lang.Class,Public,Y,N,);
Attribute(class$org$apache$tools$ant$Location,java.lang.Class,Public,Y,N,);
Attribute(class$org$apache$tools$ant$Project,java.lang.Class,Public,Y,N,);
Method(<init>,void,Public,N,N);
Method(checkTaskClass,void,Public,Y,N);
Method(checkProxyClass,void,Public,N,N);
Method(execute,void,Public,N,N);
Method(setProxy,void,Public,N,N);
Method(getProxy,java.lang.Object,Public,N,N);
Method(class$,java.lang.Class,Public,Y,N);
Parameter(checkTaskClass,java.lang.Class,);
Parameter(checkTaskClass,org.apache.tools.ant.Project,);
Parameter(checkProxyClass,java.lang.Class,);
Parameter(setProxy,java.lang.Object,);
Parameter(class$,java.lang.String,);
SuperClass(org.apache.tools.ant.Task);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.Task);
Realization(org.apache.tools.ant.TypeAdapter);
Call(METHOD,org.apache.tools.ant.TaskAdapter,checkTaskClass --> class$,org.apache.tools.ant.TaskAdapter,);
Call(METHOD,org.apache.tools.ant.TaskAdapter,checkProxyClass --> checkTaskClass,org.apache.tools.ant.TaskAdapter,);
Call(METHOD,org.apache.tools.ant.TaskAdapter,execute --> class$,org.apache.tools.ant.TaskAdapter,);
Call(ATTRIBUTE,org.apache.tools.ant.TaskAdapter,checkTaskClass --> class$org$apache$tools$ant$dispatch$Dispatchable,org.apache.tools.ant.TaskAdapter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.TaskAdapter,checkTaskClass --> class$org$apache$tools$ant$dispatch$Dispatchable,org.apache.tools.ant.TaskAdapter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.TaskAdapter,execute --> proxy,org.apache.tools.ant.TaskAdapter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.TaskAdapter,execute --> class$org$apache$tools$ant$Location,org.apache.tools.ant.TaskAdapter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.TaskAdapter,execute --> class$org$apache$tools$ant$Project,org.apache.tools.ant.TaskAdapter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.TaskAdapter,execute --> class$org$apache$tools$ant$Location,org.apache.tools.ant.TaskAdapter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.TaskAdapter,execute --> class$org$apache$tools$ant$Project,org.apache.tools.ant.TaskAdapter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.TaskAdapter,setProxy --> proxy,org.apache.tools.ant.TaskAdapter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.TaskAdapter,getProxy --> proxy,org.apache.tools.ant.TaskAdapter,READ);
Call(METHOD,org.apache.tools.ant.TaskAdapter,<init> --> <init>,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.TaskAdapter,checkTaskClass --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.TaskAdapter,checkTaskClass --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.TaskAdapter,checkTaskClass --> <init>$3,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.TaskAdapter,checkProxyClass --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.TaskAdapter,execute --> getLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.TaskAdapter,execute --> log$2,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.TaskAdapter,execute --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.TaskAdapter,execute --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.TaskAdapter,execute --> execute,org.apache.tools.ant.dispatch.DispatchUtils,);
EndClass 36
StartClass 37
Class(org.apache.tools.ant.Project$AntRefTable,N,N,NA);
Method(<init>,void,Public,N,N);
Method(getReal,java.lang.Object,Private,N,N);
Method(get,java.lang.Object,Public,N,N);
Method(access$000,java.lang.Object,Public,Y,N);
Parameter(getReal,java.lang.Object,);
Parameter(get,java.lang.Object,);
Parameter(access$000,org.apache.tools.ant.Project$AntRefTable,);
Parameter(access$000,java.lang.Object,);
Call(METHOD,org.apache.tools.ant.Project$AntRefTable,get --> getReal,org.apache.tools.ant.Project$AntRefTable,);
Call(METHOD,org.apache.tools.ant.Project$AntRefTable,access$000 --> getReal,org.apache.tools.ant.Project$AntRefTable,);
Call(METHOD,org.apache.tools.ant.Project$AntRefTable,get --> maybeConfigure,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.Project$AntRefTable,get --> getRealThing,org.apache.tools.ant.UnknownElement,);
EndClass 37
StartClass 38
Class(org.apache.tools.ant.ProjectComponent,N,Y,Public);
Attribute(project,org.apache.tools.ant.Project,Protected,N,N,);
Attribute(location,org.apache.tools.ant.Location,Protected,N,N,);
Attribute(description,java.lang.String,Protected,N,N,);
Method(<init>,void,Public,N,N);
Method(setProject,void,Public,N,N);
Method(getProject,org.apache.tools.ant.Project,Public,N,N);
Method(getLocation,org.apache.tools.ant.Location,Public,N,N);
Method(setLocation,void,Public,N,N);
Method(setDescription,void,Public,N,N);
Method(getDescription,java.lang.String,Public,N,N);
Method(log,void,Public,N,N);
Method(log$2,void,Public,N,N);
Method(clone,java.lang.Object,Public,N,N);
Parameter(setProject,org.apache.tools.ant.Project,);
Parameter(setLocation,org.apache.tools.ant.Location,);
Parameter(setDescription,java.lang.String,);
Parameter(log,java.lang.String,);
Parameter(log$2,java.lang.String,);
Parameter(log$2,int,);
SubClass(org.apache.tools.ant.UnknownElement);
SubClass(org.apache.tools.ant.TaskAdapter);
SubClass(org.apache.tools.ant.taskdefs.PreSetDef);
SubClass(org.apache.tools.ant.taskdefs.Typedef);
SubClass(org.apache.tools.ant.taskdefs.Definer);
SubClass(org.apache.tools.ant.taskdefs.DefBase);
SubClass(org.apache.tools.ant.taskdefs.AntlibDefinition);
SubClass(org.apache.tools.ant.taskdefs.Antlib);
SubClass(org.apache.tools.ant.Task);
SubClass(org.apache.tools.ant.types.FilterSet);
SubClass(org.apache.tools.ant.types.Path);
SubClass(org.apache.tools.ant.types.resources.FileResource);
SubClass(org.apache.tools.ant.types.Resource);
SubClass(org.apache.tools.ant.types.Description);
SubClass(org.apache.tools.ant.types.FileList);
SubClass(org.apache.tools.ant.types.resources.Resources);
SubClass(org.apache.tools.ant.types.FileSet);
SubClass(org.apache.tools.ant.types.DirSet);
SubClass(org.apache.tools.ant.types.AbstractFileSet);
SubClass(org.apache.tools.ant.types.resources.Union);
SubClass(org.apache.tools.ant.types.resources.BaseResourceCollectionContainer);
SubClass(org.apache.tools.ant.types.resources.selectors.And);
SubClass(org.apache.tools.ant.types.resources.Restrict);
SubClass(org.apache.tools.ant.types.resources.selectors.Or);
SubClass(org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer);
SubClass(org.apache.tools.ant.types.resources.Restrict$1);
SubClass(org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper);
SubClass(org.apache.tools.ant.types.FilterChain);
SubClass(org.apache.tools.ant.types.AntFilterReader);
SubClass(org.apache.tools.ant.types.PatternSet);
SubClass(org.apache.tools.ant.types.selectors.ExtendSelector);
SubClass(org.apache.tools.ant.types.selectors.PresentSelector);
SubClass(org.apache.tools.ant.types.selectors.DateSelector);
SubClass(org.apache.tools.ant.types.selectors.SizeSelector);
SubClass(org.apache.tools.ant.types.selectors.FilenameSelector);
SubClass(org.apache.tools.ant.types.selectors.TypeSelector);
SubClass(org.apache.tools.ant.types.selectors.ContainsSelector);
SubClass(org.apache.tools.ant.types.selectors.DepthSelector);
SubClass(org.apache.tools.ant.types.selectors.ContainsRegexpSelector);
SubClass(org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector);
SubClass(org.apache.tools.ant.types.selectors.BaseExtendSelector);
SubClass(org.apache.tools.ant.types.selectors.SelectSelector);
SubClass(org.apache.tools.ant.types.selectors.AndSelector);
SubClass(org.apache.tools.ant.types.selectors.OrSelector);
SubClass(org.apache.tools.ant.types.selectors.NotSelector);
SubClass(org.apache.tools.ant.types.selectors.NoneSelector);
SubClass(org.apache.tools.ant.types.selectors.MajoritySelector);
SubClass(org.apache.tools.ant.types.selectors.BaseSelectorContainer);
SubClass(org.apache.tools.ant.types.selectors.DifferentSelector);
SubClass(org.apache.tools.ant.types.selectors.DependSelector);
SubClass(org.apache.tools.ant.types.selectors.MappingSelector);
SubClass(org.apache.tools.ant.types.selectors.BaseSelector);
SubClass(org.apache.tools.ant.types.Mapper);
SubClass(org.apache.tools.ant.types.RegularExpression);
SubClass(org.apache.tools.ant.types.Substitution);
SubClass(org.apache.tools.ant.types.DataType);
SubClass(org.apache.tools.ant.util.LineTokenizer);
SubClass(org.apache.tools.ant.filters.TokenFilter$DeleteCharacters);
SubClass(org.apache.tools.ant.filters.TokenFilter$ContainsRegex);
SubClass(org.apache.tools.ant.filters.TokenFilter$ReplaceRegex);
SubClass(org.apache.tools.ant.filters.TokenFilter$Trim);
SubClass(org.apache.tools.ant.filters.TokenFilter$ReplaceString);
SubClass(org.apache.tools.ant.filters.TokenFilter$IgnoreBlank);
SubClass(org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter);
SubClass(org.apache.tools.ant.filters.TokenFilter$ContainsString);
SubClass(org.apache.tools.ant.filters.TokenFilter$StringTokenizer);
SubClass(org.apache.tools.ant.util.StringTokenizer);
SubClass(org.apache.tools.ant.filters.TokenFilter$FileTokenizer);
SubClass(org.apache.tools.ant.util.FileTokenizer);
Composition(org.apache.tools.ant.Project);
Composition(org.apache.tools.ant.Location);
Call(METHOD,org.apache.tools.ant.ProjectComponent,log --> log$2,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.ProjectComponent,log$2 --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.ProjectComponent,clone --> getLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.ProjectComponent,clone --> setLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.ProjectComponent,clone --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.ProjectComponent,clone --> setProject,org.apache.tools.ant.ProjectComponent,);
Call(ATTRIBUTE,org.apache.tools.ant.ProjectComponent,<init> --> location,org.apache.tools.ant.ProjectComponent,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ProjectComponent,setProject --> project,org.apache.tools.ant.ProjectComponent,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ProjectComponent,getProject --> project,org.apache.tools.ant.ProjectComponent,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ProjectComponent,getLocation --> location,org.apache.tools.ant.ProjectComponent,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ProjectComponent,setLocation --> location,org.apache.tools.ant.ProjectComponent,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ProjectComponent,setDescription --> description,org.apache.tools.ant.ProjectComponent,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ProjectComponent,getDescription --> description,org.apache.tools.ant.ProjectComponent,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ProjectComponent,<init> --> UNKNOWN_LOCATION,org.apache.tools.ant.Location,READ);
Call(METHOD,org.apache.tools.ant.ProjectComponent,log$2 --> log$2,org.apache.tools.ant.Project,);
EndClass 38
StartClass 39
Class(org.apache.tools.ant.PropertyHelper,N,N,Public);
Attribute(project,org.apache.tools.ant.Project,Private,N,N,);
Attribute(next,org.apache.tools.ant.PropertyHelper,Private,N,N,);
Attribute(properties,java.util.Hashtable,Private,N,N,);
Attribute(userProperties,java.util.Hashtable,Private,N,N,);
Attribute(inheritedProperties,java.util.Hashtable,Private,N,N,);
Method(<init>,void,Protected,N,N);
Method(setProject,void,Public,N,N);
Method(setNext,void,Public,N,N);
Method(getNext,org.apache.tools.ant.PropertyHelper,Public,N,N);
Method(getPropertyHelper,org.apache.tools.ant.PropertyHelper,Public,Y,N);
Method(setPropertyHook,boolean,Public,N,N);
Method(getPropertyHook,java.lang.Object,Public,N,N);
Method(parsePropertyString,void,Public,N,N);
Method(replaceProperties,java.lang.String,Public,N,N);
Method(setProperty,boolean,Public,N,N);
Method(setNewProperty,void,Public,N,N);
Method(setUserProperty,void,Public,N,N);
Method(setInheritedProperty,void,Public,N,N);
Method(getProperty,java.lang.Object,Public,N,N);
Method(getUserProperty,java.lang.Object,Public,N,N);
Method(getProperties,java.util.Hashtable,Public,N,N);
Method(getUserProperties,java.util.Hashtable,Public,N,N);
Method(getInternalProperties,java.util.Hashtable,Protected,N,N);
Method(getInternalUserProperties,java.util.Hashtable,Protected,N,N);
Method(getInternalInheritedProperties,java.util.Hashtable,Protected,N,N);
Method(copyInheritedProperties,void,Public,N,N);
Method(copyUserProperties,void,Public,N,N);
Method(parsePropertyStringDefault,void,Public,Y,N);
Parameter(setProject,org.apache.tools.ant.Project,);
Parameter(setNext,org.apache.tools.ant.PropertyHelper,);
Parameter(getPropertyHelper,org.apache.tools.ant.Project,);
Parameter(setPropertyHook,java.lang.String,);
Parameter(setPropertyHook,java.lang.String,);
Parameter(setPropertyHook,java.lang.Object,);
Parameter(setPropertyHook,boolean,);
Parameter(setPropertyHook,boolean,);
Parameter(setPropertyHook,boolean,);
Parameter(getPropertyHook,java.lang.String,);
Parameter(getPropertyHook,java.lang.String,);
Parameter(getPropertyHook,boolean,);
Parameter(parsePropertyString,java.lang.String,);
Parameter(parsePropertyString,java.util.Vector,);
Parameter(parsePropertyString,java.util.Vector,);
Parameter(replaceProperties,java.lang.String,);
Parameter(replaceProperties,java.lang.String,);
Parameter(replaceProperties,java.util.Hashtable,);
Parameter(setProperty,java.lang.String,);
Parameter(setProperty,java.lang.String,);
Parameter(setProperty,java.lang.Object,);
Parameter(setProperty,boolean,);
Parameter(setNewProperty,java.lang.String,);
Parameter(setNewProperty,java.lang.String,);
Parameter(setNewProperty,java.lang.Object,);
Parameter(setUserProperty,java.lang.String,);
Parameter(setUserProperty,java.lang.String,);
Parameter(setUserProperty,java.lang.Object,);
Parameter(setInheritedProperty,java.lang.String,);
Parameter(setInheritedProperty,java.lang.String,);
Parameter(setInheritedProperty,java.lang.Object,);
Parameter(getProperty,java.lang.String,);
Parameter(getProperty,java.lang.String,);
Parameter(getUserProperty,java.lang.String,);
Parameter(getUserProperty,java.lang.String,);
Parameter(copyInheritedProperties,org.apache.tools.ant.Project,);
Parameter(copyUserProperties,org.apache.tools.ant.Project,);
Parameter(parsePropertyStringDefault,java.lang.String,);
Parameter(parsePropertyStringDefault,java.util.Vector,);
Parameter(parsePropertyStringDefault,java.util.Vector,);
Composition(org.apache.tools.ant.Project);
Composition(org.apache.tools.ant.PropertyHelper);
Call(METHOD,org.apache.tools.ant.PropertyHelper,getPropertyHelper --> <init>,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,getPropertyHelper --> setProject,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,setPropertyHook --> getNext,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,setPropertyHook --> setPropertyHook,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,getPropertyHook --> getNext,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,getPropertyHook --> getPropertyHook,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,parsePropertyString --> parsePropertyStringDefault,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,replaceProperties --> parsePropertyString,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,replaceProperties --> getProperty,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,setProperty --> setPropertyHook,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,setNewProperty --> setPropertyHook,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,setUserProperty --> setPropertyHook,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,setInheritedProperty --> setPropertyHook,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,getProperty --> getPropertyHook,org.apache.tools.ant.PropertyHelper,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,getUserProperty --> getPropertyHook,org.apache.tools.ant.PropertyHelper,);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,<init> --> properties,org.apache.tools.ant.PropertyHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,<init> --> userProperties,org.apache.tools.ant.PropertyHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,<init> --> inheritedProperties,org.apache.tools.ant.PropertyHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,setProject --> project,org.apache.tools.ant.PropertyHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,setNext --> next,org.apache.tools.ant.PropertyHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,getNext --> next,org.apache.tools.ant.PropertyHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,getPropertyHook --> project,org.apache.tools.ant.PropertyHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,replaceProperties --> project,org.apache.tools.ant.PropertyHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,setProperty --> userProperties,org.apache.tools.ant.PropertyHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,setProperty --> project,org.apache.tools.ant.PropertyHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,setProperty --> properties,org.apache.tools.ant.PropertyHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,setNewProperty --> properties,org.apache.tools.ant.PropertyHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,setNewProperty --> project,org.apache.tools.ant.PropertyHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,setUserProperty --> project,org.apache.tools.ant.PropertyHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,setUserProperty --> userProperties,org.apache.tools.ant.PropertyHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,setUserProperty --> properties,org.apache.tools.ant.PropertyHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,setInheritedProperty --> inheritedProperties,org.apache.tools.ant.PropertyHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,setInheritedProperty --> project,org.apache.tools.ant.PropertyHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,setInheritedProperty --> userProperties,org.apache.tools.ant.PropertyHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,setInheritedProperty --> properties,org.apache.tools.ant.PropertyHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,getProperty --> properties,org.apache.tools.ant.PropertyHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,getUserProperty --> userProperties,org.apache.tools.ant.PropertyHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,getProperties --> properties,org.apache.tools.ant.PropertyHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,getUserProperties --> userProperties,org.apache.tools.ant.PropertyHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,getInternalProperties --> properties,org.apache.tools.ant.PropertyHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,getInternalUserProperties --> userProperties,org.apache.tools.ant.PropertyHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,getInternalInheritedProperties --> inheritedProperties,org.apache.tools.ant.PropertyHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,copyInheritedProperties --> inheritedProperties,org.apache.tools.ant.PropertyHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,copyUserProperties --> userProperties,org.apache.tools.ant.PropertyHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PropertyHelper,copyUserProperties --> inheritedProperties,org.apache.tools.ant.PropertyHelper,READ);
Call(METHOD,org.apache.tools.ant.PropertyHelper,getPropertyHelper --> getReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,getPropertyHelper --> addReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,getPropertyHook --> getReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,replaceProperties --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,setProperty --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,setNewProperty --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,setUserProperty --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,setInheritedProperty --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,copyInheritedProperties --> getUserProperty,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,copyInheritedProperties --> setInheritedProperty,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,copyUserProperties --> setUserProperty,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.PropertyHelper,parsePropertyStringDefault --> <init>$2,org.apache.tools.ant.BuildException,);
EndClass 39
StartClass 40
Class(org.apache.tools.ant.IntrospectionHelper,N,N,Public);
Attribute(EMPTY_MAP,java.util.Map,Private,Y,Y,);
Attribute(HELPERS,java.util.Map,Private,Y,Y,);
Attribute(PRIMITIVE_TYPE_MAP,java.util.Map,Private,Y,Y,);
Attribute(MAX_REPORT_NESTED_TEXT,int,Private,Y,Y,);
Attribute(ELLIPSIS,java.lang.String,Private,Y,Y,);
Attribute(attributeTypes,java.util.Hashtable,Private,N,N,);
Attribute(attributeSetters,java.util.Hashtable,Private,N,N,);
Attribute(nestedTypes,java.util.Hashtable,Private,N,N,);
Attribute(nestedCreators,java.util.Hashtable,Private,N,N,);
Attribute(addTypeMethods,java.util.List,Private,N,N,);
Attribute(addText,java.lang.reflect.Method,Private,N,N,);
Attribute(bean,java.lang.Class,Private,N,N,);
Attribute(class$java$lang$Boolean,java.lang.Class,Public,Y,N,);
Attribute(class$java$lang$Byte,java.lang.Class,Public,Y,N,);
Attribute(class$java$lang$Character,java.lang.Class,Public,Y,N,);
Attribute(class$java$lang$Short,java.lang.Class,Public,Y,N,);
Attribute(class$java$lang$Integer,java.lang.Class,Public,Y,N,);
Attribute(class$java$lang$Long,java.lang.Class,Public,Y,N,);
Attribute(class$java$lang$Float,java.lang.Class,Public,Y,N,);
Attribute(class$java$lang$Double,java.lang.Class,Public,Y,N,);
Attribute(class$org$apache$tools$ant$ProjectComponent,java.lang.Class,Public,Y,N,);
Attribute(class$org$apache$tools$ant$Task,java.lang.Class,Public,Y,N,);
Attribute(class$java$lang$String,java.lang.Class,Public,Y,N,);
Attribute(class$org$apache$tools$ant$Project,java.lang.Class,Public,Y,N,);
Attribute(class$org$apache$tools$ant$Location,java.lang.Class,Public,Y,N,);
Attribute(class$org$apache$tools$ant$DynamicElement,java.lang.Class,Public,Y,N,);
Attribute(class$org$apache$tools$ant$DynamicElementNS,java.lang.Class,Public,Y,N,);
Attribute(class$org$apache$tools$ant$TaskContainer,java.lang.Class,Public,Y,N,);
Attribute(class$java$lang$Class,java.lang.Class,Public,Y,N,);
Attribute(class$java$io$File,java.lang.Class,Public,Y,N,);
Attribute(class$org$apache$tools$ant$types$EnumeratedAttribute,java.lang.Class,Public,Y,N,);
Method(<init>,void,Private,N,N);
Method(isHiddenSetMethod,boolean,Private,N,N);
Method(getHelper,org.apache.tools.ant.IntrospectionHelper,Public,Y,N);
Method(getHelper$2,org.apache.tools.ant.IntrospectionHelper,Public,Y,N);
Method(setAttribute,void,Public,N,N);
Method(addText,void,Public,N,N);
Method(throwNotSupported,void,Public,N,N);
Method(getNestedCreator,org.apache.tools.ant.IntrospectionHelper$NestedCreator,Private,N,N);
Method(createElement,java.lang.Object,Public,N,N);
Method(getElementCreator,org.apache.tools.ant.IntrospectionHelper$Creator,Public,N,N);
Method(isDynamic,boolean,Public,N,N);
Method(isContainer,boolean,Public,N,N);
Method(supportsNestedElement,boolean,Public,N,N);
Method(supportsNestedElement$2,boolean,Public,N,N);
Method(storeElement,void,Public,N,N);
Method(getElementType,java.lang.Class,Public,N,N);
Method(getAttributeType,java.lang.Class,Public,N,N);
Method(getAddTextMethod,java.lang.reflect.Method,Public,N,N);
Method(getElementMethod,java.lang.reflect.Method,Public,N,N);
Method(getAttributeMethod,java.lang.reflect.Method,Public,N,N);
Method(supportsCharacters,boolean,Public,N,N);
Method(getAttributes,java.util.Enumeration,Public,N,N);
Method(getAttributeMap,java.util.Map,Public,N,N);
Method(getNestedElements,java.util.Enumeration,Public,N,N);
Method(getNestedElementMap,java.util.Map,Public,N,N);
Method(getExtensionPoints,java.util.List,Public,N,N);
Method(createAttributeSetter,org.apache.tools.ant.IntrospectionHelper$AttributeSetter,Private,N,N);
Method(getElementName,java.lang.String,Protected,N,N);
Method(getPropertyName,java.lang.String,Private,N,N);
Method(clearCache,void,Public,Y,N);
Method(createAddTypeCreator,org.apache.tools.ant.IntrospectionHelper$NestedCreator,Private,N,N);
Method(insertAddTypeMethod,void,Private,N,N);
Method(findMatchingMethod,java.lang.reflect.Method,Private,N,N);
Method(condenseText,java.lang.String,Private,N,N);
Method(class$,java.lang.Class,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,java.lang.Class,);
Parameter(isHiddenSetMethod,java.lang.String,);
Parameter(isHiddenSetMethod,java.lang.Class,);
Parameter(getHelper,java.lang.Class,);
Parameter(getHelper$2,org.apache.tools.ant.Project,);
Parameter(getHelper$2,java.lang.Class,);
Parameter(setAttribute,org.apache.tools.ant.Project,);
Parameter(setAttribute,java.lang.Object,);
Parameter(setAttribute,java.lang.String,);
Parameter(setAttribute,java.lang.String,);
Parameter(addText,org.apache.tools.ant.Project,);
Parameter(addText,java.lang.Object,);
Parameter(addText,java.lang.String,);
Parameter(throwNotSupported,org.apache.tools.ant.Project,);
Parameter(throwNotSupported,java.lang.Object,);
Parameter(throwNotSupported,java.lang.String,);
Parameter(getNestedCreator,org.apache.tools.ant.Project,);
Parameter(getNestedCreator,java.lang.String,);
Parameter(getNestedCreator,java.lang.Object,);
Parameter(getNestedCreator,java.lang.String,);
Parameter(getNestedCreator,org.apache.tools.ant.UnknownElement,);
Parameter(createElement,org.apache.tools.ant.Project,);
Parameter(createElement,java.lang.Object,);
Parameter(createElement,java.lang.String,);
Parameter(getElementCreator,org.apache.tools.ant.Project,);
Parameter(getElementCreator,java.lang.String,);
Parameter(getElementCreator,java.lang.Object,);
Parameter(getElementCreator,java.lang.String,);
Parameter(getElementCreator,org.apache.tools.ant.UnknownElement,);
Parameter(supportsNestedElement,java.lang.String,);
Parameter(supportsNestedElement$2,java.lang.String,);
Parameter(supportsNestedElement$2,java.lang.String,);
Parameter(storeElement,org.apache.tools.ant.Project,);
Parameter(storeElement,java.lang.Object,);
Parameter(storeElement,java.lang.Object,);
Parameter(storeElement,java.lang.String,);
Parameter(getElementType,java.lang.String,);
Parameter(getAttributeType,java.lang.String,);
Parameter(getElementMethod,java.lang.String,);
Parameter(getAttributeMethod,java.lang.String,);
Parameter(createAttributeSetter,java.lang.reflect.Method,);
Parameter(createAttributeSetter,java.lang.Class,);
Parameter(createAttributeSetter,java.lang.String,);
Parameter(getElementName,org.apache.tools.ant.Project,);
Parameter(getElementName,java.lang.Object,);
Parameter(getPropertyName,java.lang.String,);
Parameter(getPropertyName,java.lang.String,);
Parameter(createAddTypeCreator,org.apache.tools.ant.Project,);
Parameter(createAddTypeCreator,java.lang.Object,);
Parameter(createAddTypeCreator,java.lang.String,);
Parameter(insertAddTypeMethod,java.lang.reflect.Method,);
Parameter(findMatchingMethod,java.lang.Class,);
Parameter(findMatchingMethod,java.util.List,);
Parameter(condenseText,java.lang.String,);
Parameter(class$,java.lang.String,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,<init> --> insertAddTypeMethod,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,<init> --> class$,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,<init> --> isHiddenSetMethod,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,<init> --> isContainer,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,<init> --> getPropertyName,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,<init> --> createAttributeSetter,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,isHiddenSetMethod --> class$,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,getHelper --> getHelper$2,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,getHelper$2 --> <init>,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,setAttribute --> getElementName,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,addText --> condenseText,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,getNestedCreator --> createAddTypeCreator,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,getNestedCreator --> throwNotSupported,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,createElement --> getNestedCreator,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,getElementCreator --> getNestedCreator,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,isDynamic --> class$,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,isContainer --> class$,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,supportsNestedElement --> isDynamic,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,supportsNestedElement$2 --> isDynamic,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,getAddTextMethod --> supportsCharacters,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,createAttributeSetter --> class$,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,createAddTypeCreator --> findMatchingMethod,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,<clinit> --> class$,org.apache.tools.ant.IntrospectionHelper,);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<init> --> class$org$apache$tools$ant$ProjectComponent,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<init> --> class$org$apache$tools$ant$Task,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<init> --> class$java$lang$String,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<init> --> attributeSetters,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<init> --> attributeTypes,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<init> --> nestedCreators,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<init> --> nestedTypes,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<init> --> class$org$apache$tools$ant$Project,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<init> --> attributeTypes,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<init> --> attributeSetters,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<init> --> nestedTypes,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<init> --> nestedCreators,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<init> --> addTypeMethods,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<init> --> addText,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<init> --> bean,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<init> --> class$org$apache$tools$ant$ProjectComponent,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<init> --> class$org$apache$tools$ant$Task,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<init> --> class$java$lang$String,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<init> --> class$org$apache$tools$ant$Project,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,isHiddenSetMethod --> class$org$apache$tools$ant$Location,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,isHiddenSetMethod --> class$java$lang$String,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,isHiddenSetMethod --> class$org$apache$tools$ant$Location,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,isHiddenSetMethod --> class$java$lang$String,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,getHelper$2 --> HELPERS,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,getHelper$2 --> bean,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,setAttribute --> attributeSetters,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,addText --> addText,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,getNestedCreator --> nestedCreators,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,isDynamic --> class$org$apache$tools$ant$DynamicElement,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,isDynamic --> bean,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,isDynamic --> class$org$apache$tools$ant$DynamicElementNS,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,isDynamic --> class$org$apache$tools$ant$DynamicElement,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,isDynamic --> class$org$apache$tools$ant$DynamicElementNS,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,isContainer --> class$org$apache$tools$ant$TaskContainer,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,isContainer --> bean,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,isContainer --> class$org$apache$tools$ant$TaskContainer,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,supportsNestedElement --> nestedCreators,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,supportsNestedElement --> addTypeMethods,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,supportsNestedElement$2 --> nestedCreators,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,supportsNestedElement$2 --> addTypeMethods,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,storeElement --> nestedCreators,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,getElementType --> nestedTypes,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,getElementType --> bean,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,getAttributeType --> attributeTypes,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,getAttributeType --> bean,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,getAddTextMethod --> bean,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,getAddTextMethod --> addText,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,getElementMethod --> nestedCreators,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,getElementMethod --> bean,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,getAttributeMethod --> attributeSetters,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,getAttributeMethod --> bean,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,supportsCharacters --> addText,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,getAttributes --> attributeSetters,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,getAttributeMap --> attributeTypes,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,getAttributeMap --> EMPTY_MAP,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,getNestedElements --> nestedTypes,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,getNestedElementMap --> nestedTypes,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,getNestedElementMap --> EMPTY_MAP,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,getExtensionPoints --> addTypeMethods,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,createAttributeSetter --> PRIMITIVE_TYPE_MAP,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,createAttributeSetter --> class$java$lang$String,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,createAttributeSetter --> class$java$lang$Character,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,createAttributeSetter --> class$java$lang$Boolean,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,createAttributeSetter --> class$java$lang$Class,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,createAttributeSetter --> class$java$io$File,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,createAttributeSetter --> class$org$apache$tools$ant$types$EnumeratedAttribute,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,createAttributeSetter --> class$org$apache$tools$ant$Project,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,createAttributeSetter --> class$java$lang$String,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,createAttributeSetter --> class$java$lang$Character,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,createAttributeSetter --> class$java$lang$Boolean,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,createAttributeSetter --> class$java$lang$Class,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,createAttributeSetter --> class$java$io$File,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,createAttributeSetter --> class$org$apache$tools$ant$types$EnumeratedAttribute,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,createAttributeSetter --> class$org$apache$tools$ant$Project,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,clearCache --> HELPERS,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,createAddTypeCreator --> addTypeMethods,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,insertAddTypeMethod --> addTypeMethods,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<clinit> --> class$java$lang$Boolean,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<clinit> --> class$java$lang$Byte,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<clinit> --> class$java$lang$Character,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<clinit> --> class$java$lang$Short,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<clinit> --> class$java$lang$Integer,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<clinit> --> class$java$lang$Long,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<clinit> --> class$java$lang$Float,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<clinit> --> class$java$lang$Double,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<clinit> --> PRIMITIVE_TYPE_MAP,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<clinit> --> EMPTY_MAP,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<clinit> --> HELPERS,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<clinit> --> PRIMITIVE_TYPE_MAP,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<clinit> --> class$java$lang$Boolean,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<clinit> --> class$java$lang$Byte,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<clinit> --> class$java$lang$Character,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<clinit> --> class$java$lang$Short,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<clinit> --> class$java$lang$Integer,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<clinit> --> class$java$lang$Long,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<clinit> --> class$java$lang$Float,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper,<clinit> --> class$java$lang$Double,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,<init> --> <init>,org.apache.tools.ant.IntrospectionHelper$CreateNestedCreator,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,<init> --> <init>,org.apache.tools.ant.IntrospectionHelper$AddNestedCreator,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,setAttribute --> extractUriFromComponentName,org.apache.tools.ant.ProjectHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,setAttribute --> extractNameFromComponentName,org.apache.tools.ant.ProjectHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,setAttribute --> setDynamicAttribute,org.apache.tools.ant.DynamicAttributeNS,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,setAttribute --> setDynamicAttribute,org.apache.tools.ant.DynamicAttribute,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,setAttribute --> <init>,org.apache.tools.ant.UnsupportedAttributeException,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,setAttribute --> set,org.apache.tools.ant.IntrospectionHelper$AttributeSetter,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,setAttribute --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,addText --> getElementName,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,addText --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,addText --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,throwNotSupported --> getElementName,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,throwNotSupported --> <init>,org.apache.tools.ant.UnsupportedElementException,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,getNestedCreator --> extractUriFromComponentName,org.apache.tools.ant.ProjectHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,getNestedCreator --> extractNameFromComponentName,org.apache.tools.ant.ProjectHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,getNestedCreator --> getQName,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,getNestedCreator --> getNamespace,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,getNestedCreator --> createDynamicElement,org.apache.tools.ant.DynamicElementNS,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,getNestedCreator --> <init>,org.apache.tools.ant.IntrospectionHelper$1,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,getNestedCreator --> createDynamicElement,org.apache.tools.ant.DynamicElement,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,getNestedCreator --> <init>,org.apache.tools.ant.IntrospectionHelper$2,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,createElement --> create,org.apache.tools.ant.IntrospectionHelper$NestedCreator,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,createElement --> setProjectReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,createElement --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,getElementCreator --> <init>$2,org.apache.tools.ant.IntrospectionHelper$Creator,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,supportsNestedElement$2 --> extractUriFromComponentName,org.apache.tools.ant.ProjectHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,supportsNestedElement$2 --> extractNameFromComponentName,org.apache.tools.ant.ProjectHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,storeElement --> store,org.apache.tools.ant.IntrospectionHelper$NestedCreator,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,storeElement --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,getElementType --> <init>,org.apache.tools.ant.UnsupportedElementException,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,getAttributeType --> <init>,org.apache.tools.ant.UnsupportedAttributeException,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,getAddTextMethod --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,getElementMethod --> <init>,org.apache.tools.ant.UnsupportedElementException,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,getElementMethod --> access$100,org.apache.tools.ant.IntrospectionHelper$NestedCreator,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,getAttributeMethod --> <init>,org.apache.tools.ant.UnsupportedAttributeException,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,getAttributeMethod --> access$200,org.apache.tools.ant.IntrospectionHelper$AttributeSetter,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,createAttributeSetter --> <init>,org.apache.tools.ant.IntrospectionHelper$3,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,createAttributeSetter --> <init>,org.apache.tools.ant.IntrospectionHelper$4,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,createAttributeSetter --> <init>,org.apache.tools.ant.IntrospectionHelper$5,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,createAttributeSetter --> <init>,org.apache.tools.ant.IntrospectionHelper$6,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,createAttributeSetter --> <init>,org.apache.tools.ant.IntrospectionHelper$7,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,createAttributeSetter --> <init>,org.apache.tools.ant.IntrospectionHelper$8,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,createAttributeSetter --> <init>,org.apache.tools.ant.IntrospectionHelper$9,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,createAttributeSetter --> <init>,org.apache.tools.ant.IntrospectionHelper$10,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,getElementName --> getElementName,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,createAddTypeCreator --> getComponentHelper,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,createAddTypeCreator --> getComponentClass,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,createAddTypeCreator --> createComponent$2,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,createAddTypeCreator --> createObject,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,createAddTypeCreator --> <init>,org.apache.tools.ant.IntrospectionHelper$11,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper,findMatchingMethod --> <init>$2,org.apache.tools.ant.BuildException,);
EndClass 40
StartClass 41
Class(org.apache.tools.ant.TypeAdapter,Y,Y,Public);
Method(setProject,void,Public,N,Y);
Method(getProject,org.apache.tools.ant.Project,Public,N,Y);
Method(setProxy,void,Public,N,Y);
Method(getProxy,java.lang.Object,Public,N,Y);
Method(checkProxyClass,void,Public,N,Y);
Parameter(setProject,org.apache.tools.ant.Project,);
Parameter(setProxy,java.lang.Object,);
Parameter(checkProxyClass,java.lang.Class,);
EndClass 41
StartClass 42
Class(org.apache.tools.ant.util.LoaderUtils,N,N,Public);
Attribute(FILE_UTILS,org.apache.tools.ant.util.FileUtils,Private,Y,Y,);
Attribute(class$org$apache$tools$ant$util$LoaderUtils,java.lang.Class,Public,Y,N,);
Method(<init>,void,Public,N,N);
Method(setContextClassLoader,void,Public,Y,N);
Method(getContextClassLoader,java.lang.ClassLoader,Public,Y,N);
Method(isContextLoaderAvailable,boolean,Public,Y,N);
Method(normalizeSource,java.io.File,Private,Y,N);
Method(getClassSource,java.io.File,Public,Y,N);
Method(getResourceSource,java.io.File,Public,Y,N);
Method(classNameToResource,java.lang.String,Public,Y,N);
Method(classExists,boolean,Public,Y,N);
Method(class$,java.lang.Class,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(setContextClassLoader,java.lang.ClassLoader,);
Parameter(normalizeSource,java.io.File,);
Parameter(getClassSource,java.lang.Class,);
Parameter(getResourceSource,java.lang.ClassLoader,);
Parameter(getResourceSource,java.lang.String,);
Parameter(classNameToResource,java.lang.String,);
Parameter(classExists,java.lang.ClassLoader,);
Parameter(classExists,java.lang.String,);
Parameter(class$,java.lang.String,);
Composition(org.apache.tools.ant.util.FileUtils);
Call(METHOD,org.apache.tools.ant.util.LoaderUtils,getClassSource --> normalizeSource,org.apache.tools.ant.util.LoaderUtils,);
Call(METHOD,org.apache.tools.ant.util.LoaderUtils,getResourceSource --> class$,org.apache.tools.ant.util.LoaderUtils,);
Call(METHOD,org.apache.tools.ant.util.LoaderUtils,getResourceSource --> normalizeSource,org.apache.tools.ant.util.LoaderUtils,);
Call(METHOD,org.apache.tools.ant.util.LoaderUtils,classExists --> classNameToResource,org.apache.tools.ant.util.LoaderUtils,);
Call(ATTRIBUTE,org.apache.tools.ant.util.LoaderUtils,normalizeSource --> FILE_UTILS,org.apache.tools.ant.util.LoaderUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.LoaderUtils,getResourceSource --> class$org$apache$tools$ant$util$LoaderUtils,org.apache.tools.ant.util.LoaderUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.LoaderUtils,getResourceSource --> class$org$apache$tools$ant$util$LoaderUtils,org.apache.tools.ant.util.LoaderUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.LoaderUtils,<clinit> --> FILE_UTILS,org.apache.tools.ant.util.LoaderUtils,WRITE);
Call(METHOD,org.apache.tools.ant.util.LoaderUtils,normalizeSource --> normalize,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.LoaderUtils,<clinit> --> getFileUtils,org.apache.tools.ant.util.FileUtils,);
EndClass 42
StartClass 43
Class(org.apache.tools.ant.helper.ProjectHelper2,N,N,Public);
Attribute(elementHandler,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,Private,Y,N,);
Attribute(targetHandler,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,Private,Y,N,);
Attribute(mainHandler,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,Private,Y,N,);
Attribute(projectHandler,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,Private,Y,N,);
Attribute(FILE_UTILS,org.apache.tools.ant.util.FileUtils,Private,Y,Y,);
Method(<init>,void,Public,N,N);
Method(parseUnknownElement,org.apache.tools.ant.UnknownElement,Public,N,N);
Method(parse,void,Public,N,N);
Method(parse$2,void,Public,N,N);
Method(getMainHandler,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,Protected,Y,N);
Method(setMainHandler,void,Protected,Y,N);
Method(getProjectHandler,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,Protected,Y,N);
Method(setProjectHandler,void,Protected,Y,N);
Method(getTargetHandler,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,Protected,Y,N);
Method(setTargetHandler,void,Protected,Y,N);
Method(getElementHandler,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,Protected,Y,N);
Method(setElementHandler,void,Protected,Y,N);
Method(access$100,org.apache.tools.ant.util.FileUtils,Public,Y,N);
Method(access$200,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,Public,Y,N);
Method(access$300,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,Public,Y,N);
Method(access$400,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(parseUnknownElement,org.apache.tools.ant.Project,);
Parameter(parseUnknownElement,java.net.URL,);
Parameter(parse,org.apache.tools.ant.Project,);
Parameter(parse,java.lang.Object,);
Parameter(parse$2,org.apache.tools.ant.Project,);
Parameter(parse$2,java.lang.Object,);
Parameter(parse$2,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,);
Parameter(setMainHandler,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,);
Parameter(setProjectHandler,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,);
Parameter(setTargetHandler,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,);
Parameter(setElementHandler,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,);
SuperClass(org.apache.tools.ant.ProjectHelper);
Generalization(org.apache.tools.ant.ProjectHelper);
Composition(org.apache.tools.ant.helper.ProjectHelper2$AntHandler);
Composition(org.apache.tools.ant.util.FileUtils);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parseUnknownElement --> parse$2,org.apache.tools.ant.helper.ProjectHelper2,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse --> parse$2,org.apache.tools.ant.helper.ProjectHelper2,);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2,parseUnknownElement --> elementHandler,org.apache.tools.ant.helper.ProjectHelper2,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2,parse --> mainHandler,org.apache.tools.ant.helper.ProjectHelper2,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2,parse$2 --> FILE_UTILS,org.apache.tools.ant.helper.ProjectHelper2,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2,getMainHandler --> mainHandler,org.apache.tools.ant.helper.ProjectHelper2,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2,setMainHandler --> mainHandler,org.apache.tools.ant.helper.ProjectHelper2,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2,getProjectHandler --> projectHandler,org.apache.tools.ant.helper.ProjectHelper2,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2,setProjectHandler --> projectHandler,org.apache.tools.ant.helper.ProjectHelper2,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2,getTargetHandler --> targetHandler,org.apache.tools.ant.helper.ProjectHelper2,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2,setTargetHandler --> targetHandler,org.apache.tools.ant.helper.ProjectHelper2,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2,getElementHandler --> elementHandler,org.apache.tools.ant.helper.ProjectHelper2,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2,setElementHandler --> elementHandler,org.apache.tools.ant.helper.ProjectHelper2,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2,access$100 --> FILE_UTILS,org.apache.tools.ant.helper.ProjectHelper2,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2,access$200 --> projectHandler,org.apache.tools.ant.helper.ProjectHelper2,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2,access$300 --> targetHandler,org.apache.tools.ant.helper.ProjectHelper2,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2,access$400 --> elementHandler,org.apache.tools.ant.helper.ProjectHelper2,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2,<clinit> --> elementHandler,org.apache.tools.ant.helper.ProjectHelper2,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2,<clinit> --> targetHandler,org.apache.tools.ant.helper.ProjectHelper2,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2,<clinit> --> mainHandler,org.apache.tools.ant.helper.ProjectHelper2,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2,<clinit> --> projectHandler,org.apache.tools.ant.helper.ProjectHelper2,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2,<clinit> --> FILE_UTILS,org.apache.tools.ant.helper.ProjectHelper2,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2,parse$2 --> UNKNOWN_LOCATION,org.apache.tools.ant.Location,READ);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,<init> --> <init>,org.apache.tools.ant.ProjectHelper,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parseUnknownElement --> <init>,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parseUnknownElement --> setProject,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parseUnknownElement --> <init>,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parseUnknownElement --> addTarget,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parseUnknownElement --> setImplicitTarget,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parseUnknownElement --> getProject,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parseUnknownElement --> <init>,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parseUnknownElement --> getTasks,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parseUnknownElement --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse --> getImportStack,org.apache.tools.ant.ProjectHelper,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse --> getReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse --> <init>,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse --> addReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse --> getTargets,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse --> setIgnoreProjectTag,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse --> getCurrentTarget,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse --> getImplicitTarget,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse --> getCurrentTargets,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse --> <init>,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse --> setProject,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse --> setName,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse --> setCurrentTarget,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse --> setCurrentTargets,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse --> setImplicitTarget,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse --> <init>,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse --> execute,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse$2 --> access$000,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse$2 --> normalize,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse$2 --> setBuildFile,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse$2 --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse$2 --> getNamespaceXMLReader,org.apache.tools.ant.util.JAXPUtils,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse$2 --> toURI,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse$2 --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse$2 --> close$4,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse$2 --> <init>$4,org.apache.tools.ant.Location,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse$2 --> getLocation,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse$2 --> setLocation,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse$2 --> <init>$4,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse$2 --> <init>$3,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,parse$2 --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,<clinit> --> <init>,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,<clinit> --> <init>,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,<clinit> --> <init>,org.apache.tools.ant.helper.ProjectHelper2$MainHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,<clinit> --> <init>,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2,<clinit> --> getFileUtils,org.apache.tools.ant.util.FileUtils,);
EndClass 43
StartClass 44
Class(org.apache.tools.ant.util.DateUtils,N,N,Public);
Attribute(ISO8601_DATETIME_PATTERN,java.lang.String,Public,Y,Y,);
Attribute(ISO8601_DATE_PATTERN,java.lang.String,Public,Y,Y,);
Attribute(ISO8601_TIME_PATTERN,java.lang.String,Public,Y,Y,);
Attribute(DATE_HEADER_FORMAT,java.text.DateFormat,Public,Y,Y,);
Attribute(MINUTE_SECONDS,java.text.MessageFormat,Private,Y,Y,);
Attribute(LIMITS,double[],Private,Y,Y,);
Attribute(MINUTES_PART,java.lang.String[],Private,Y,Y,);
Attribute(SECONDS_PART,java.lang.String[],Private,Y,Y,);
Attribute(MINUTES_FORMAT,java.text.ChoiceFormat,Private,Y,Y,);
Attribute(SECONDS_FORMAT,java.text.ChoiceFormat,Private,Y,Y,);
Method(<init>,void,Private,N,N);
Method(format,java.lang.String,Public,Y,N);
Method(format$2,java.lang.String,Public,Y,N);
Method(formatElapsedTime,java.lang.String,Public,Y,N);
Method(createDateFormat,java.text.DateFormat,Private,Y,N);
Method(getPhaseOfMoon,int,Public,Y,N);
Method(getDateForHeader,java.lang.String,Public,Y,N);
Method(parseIso8601DateTime,java.util.Date,Public,Y,N);
Method(parseIso8601Date,java.util.Date,Public,Y,N);
Method(parseIso8601DateTimeOrDate,java.util.Date,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(format,long,);
Parameter(format,java.lang.String,);
Parameter(format$2,java.util.Date,);
Parameter(format$2,java.lang.String,);
Parameter(formatElapsedTime,long,);
Parameter(createDateFormat,java.lang.String,);
Parameter(getPhaseOfMoon,java.util.Calendar,);
Parameter(parseIso8601DateTime,java.lang.String,);
Parameter(parseIso8601Date,java.lang.String,);
Parameter(parseIso8601DateTimeOrDate,java.lang.String,);
Call(METHOD,org.apache.tools.ant.util.DateUtils,format --> format$2,org.apache.tools.ant.util.DateUtils,);
Call(METHOD,org.apache.tools.ant.util.DateUtils,format$2 --> createDateFormat,org.apache.tools.ant.util.DateUtils,);
Call(METHOD,org.apache.tools.ant.util.DateUtils,parseIso8601DateTimeOrDate --> parseIso8601DateTime,org.apache.tools.ant.util.DateUtils,);
Call(METHOD,org.apache.tools.ant.util.DateUtils,parseIso8601DateTimeOrDate --> parseIso8601Date,org.apache.tools.ant.util.DateUtils,);
Call(ATTRIBUTE,org.apache.tools.ant.util.DateUtils,formatElapsedTime --> MINUTE_SECONDS,org.apache.tools.ant.util.DateUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.DateUtils,getDateForHeader --> DATE_HEADER_FORMAT,org.apache.tools.ant.util.DateUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.DateUtils,<clinit> --> LIMITS,org.apache.tools.ant.util.DateUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.DateUtils,<clinit> --> MINUTES_PART,org.apache.tools.ant.util.DateUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.DateUtils,<clinit> --> SECONDS_PART,org.apache.tools.ant.util.DateUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.DateUtils,<clinit> --> MINUTE_SECONDS,org.apache.tools.ant.util.DateUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.DateUtils,<clinit> --> MINUTES_FORMAT,org.apache.tools.ant.util.DateUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.DateUtils,<clinit> --> SECONDS_FORMAT,org.apache.tools.ant.util.DateUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.DateUtils,<clinit> --> DATE_HEADER_FORMAT,org.apache.tools.ant.util.DateUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.DateUtils,<clinit> --> MINUTE_SECONDS,org.apache.tools.ant.util.DateUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.DateUtils,<clinit> --> LIMITS,org.apache.tools.ant.util.DateUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.DateUtils,<clinit> --> MINUTES_PART,org.apache.tools.ant.util.DateUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.DateUtils,<clinit> --> SECONDS_PART,org.apache.tools.ant.util.DateUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.DateUtils,<clinit> --> MINUTES_FORMAT,org.apache.tools.ant.util.DateUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.DateUtils,<clinit> --> SECONDS_FORMAT,org.apache.tools.ant.util.DateUtils,WRITE);
EndClass 44
StartClass 45
Class(org.apache.tools.ant.types.Reference,N,N,Public);
Attribute(refid,java.lang.String,Private,N,N,);
Attribute(project,org.apache.tools.ant.Project,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(setRefId,void,Public,N,N);
Method(getRefId,java.lang.String,Public,N,N);
Method(setProject,void,Public,N,N);
Method(getProject,org.apache.tools.ant.Project,Public,N,N);
Method(getReferencedObject,java.lang.Object,Public,N,N);
Method(getReferencedObject$2,java.lang.Object,Public,N,N);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$3,org.apache.tools.ant.Project,);
Parameter(<init>$3,java.lang.String,);
Parameter(setRefId,java.lang.String,);
Parameter(setProject,org.apache.tools.ant.Project,);
Parameter(getReferencedObject,org.apache.tools.ant.Project,);
Composition(org.apache.tools.ant.Project);
Call(METHOD,org.apache.tools.ant.types.Reference,<init>$2 --> setRefId,org.apache.tools.ant.types.Reference,);
Call(METHOD,org.apache.tools.ant.types.Reference,<init>$3 --> setRefId,org.apache.tools.ant.types.Reference,);
Call(METHOD,org.apache.tools.ant.types.Reference,<init>$3 --> setProject,org.apache.tools.ant.types.Reference,);
Call(METHOD,org.apache.tools.ant.types.Reference,getReferencedObject$2 --> getReferencedObject,org.apache.tools.ant.types.Reference,);
Call(ATTRIBUTE,org.apache.tools.ant.types.Reference,setRefId --> refid,org.apache.tools.ant.types.Reference,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Reference,getRefId --> refid,org.apache.tools.ant.types.Reference,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Reference,setProject --> project,org.apache.tools.ant.types.Reference,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Reference,getProject --> project,org.apache.tools.ant.types.Reference,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Reference,getReferencedObject --> refid,org.apache.tools.ant.types.Reference,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Reference,getReferencedObject --> project,org.apache.tools.ant.types.Reference,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Reference,getReferencedObject$2 --> project,org.apache.tools.ant.types.Reference,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Reference,getReferencedObject$2 --> refid,org.apache.tools.ant.types.Reference,READ);
Call(METHOD,org.apache.tools.ant.types.Reference,getReferencedObject --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.Reference,getReferencedObject --> getReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.types.Reference,getReferencedObject$2 --> <init>$2,org.apache.tools.ant.BuildException,);
EndClass 45
StartClass 46
Class(org.apache.tools.ant.util.ClasspathUtils$Delegate,N,N,Public);
Attribute(component,org.apache.tools.ant.ProjectComponent,Private,N,Y,);
Attribute(classpath,org.apache.tools.ant.types.Path,Private,N,N,);
Attribute(classpathId,java.lang.String,Private,N,N,);
Attribute(className,java.lang.String,Private,N,N,);
Attribute(loaderId,java.lang.String,Private,N,N,);
Attribute(reverseLoader,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setClasspath,void,Public,N,N);
Method(createClasspath,org.apache.tools.ant.types.Path,Public,N,N);
Method(setClassname,void,Public,N,N);
Method(setClasspathref,void,Public,N,N);
Method(setReverseLoader,void,Public,N,N);
Method(setLoaderRef,void,Public,N,N);
Method(getClassLoader,java.lang.ClassLoader,Public,N,N);
Method(getContextProject,org.apache.tools.ant.Project,Private,N,N);
Method(getClassLoadId,java.lang.String,Public,N,N);
Method(newInstance,java.lang.Object,Public,N,N);
Method(getClasspath,org.apache.tools.ant.types.Path,Public,N,N);
Method(isReverseLoader,boolean,Public,N,N);
Parameter(<init>,org.apache.tools.ant.ProjectComponent,);
Parameter(setClasspath,org.apache.tools.ant.types.Path,);
Parameter(setClassname,java.lang.String,);
Parameter(setClasspathref,org.apache.tools.ant.types.Reference,);
Parameter(setReverseLoader,boolean,);
Parameter(setLoaderRef,org.apache.tools.ant.types.Reference,);
Composition(org.apache.tools.ant.ProjectComponent);
Composition(org.apache.tools.ant.types.Path);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils$Delegate,setClasspathref --> createClasspath,org.apache.tools.ant.util.ClasspathUtils$Delegate,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils$Delegate,getClassLoader --> getContextProject,org.apache.tools.ant.util.ClasspathUtils$Delegate,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils$Delegate,getClassLoader --> getClassLoadId,org.apache.tools.ant.util.ClasspathUtils$Delegate,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils$Delegate,newInstance --> getClassLoader,org.apache.tools.ant.util.ClasspathUtils$Delegate,);
Call(ATTRIBUTE,org.apache.tools.ant.util.ClasspathUtils$Delegate,<init> --> reverseLoader,org.apache.tools.ant.util.ClasspathUtils$Delegate,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.ClasspathUtils$Delegate,<init> --> component,org.apache.tools.ant.util.ClasspathUtils$Delegate,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.ClasspathUtils$Delegate,setClasspath --> classpath,org.apache.tools.ant.util.ClasspathUtils$Delegate,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.ClasspathUtils$Delegate,setClasspath --> classpath,org.apache.tools.ant.util.ClasspathUtils$Delegate,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.ClasspathUtils$Delegate,createClasspath --> classpath,org.apache.tools.ant.util.ClasspathUtils$Delegate,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.ClasspathUtils$Delegate,createClasspath --> component,org.apache.tools.ant.util.ClasspathUtils$Delegate,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.ClasspathUtils$Delegate,createClasspath --> classpath,org.apache.tools.ant.util.ClasspathUtils$Delegate,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.ClasspathUtils$Delegate,setClassname --> className,org.apache.tools.ant.util.ClasspathUtils$Delegate,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.ClasspathUtils$Delegate,setClasspathref --> classpathId,org.apache.tools.ant.util.ClasspathUtils$Delegate,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.ClasspathUtils$Delegate,setReverseLoader --> reverseLoader,org.apache.tools.ant.util.ClasspathUtils$Delegate,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.ClasspathUtils$Delegate,setLoaderRef --> loaderId,org.apache.tools.ant.util.ClasspathUtils$Delegate,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.ClasspathUtils$Delegate,getClassLoader --> classpath,org.apache.tools.ant.util.ClasspathUtils$Delegate,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.ClasspathUtils$Delegate,getClassLoader --> reverseLoader,org.apache.tools.ant.util.ClasspathUtils$Delegate,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.ClasspathUtils$Delegate,getClassLoader --> loaderId,org.apache.tools.ant.util.ClasspathUtils$Delegate,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.ClasspathUtils$Delegate,getContextProject --> component,org.apache.tools.ant.util.ClasspathUtils$Delegate,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.ClasspathUtils$Delegate,getClassLoadId --> loaderId,org.apache.tools.ant.util.ClasspathUtils$Delegate,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.ClasspathUtils$Delegate,getClassLoadId --> classpathId,org.apache.tools.ant.util.ClasspathUtils$Delegate,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.ClasspathUtils$Delegate,newInstance --> className,org.apache.tools.ant.util.ClasspathUtils$Delegate,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.ClasspathUtils$Delegate,getClasspath --> classpath,org.apache.tools.ant.util.ClasspathUtils$Delegate,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.ClasspathUtils$Delegate,isReverseLoader --> reverseLoader,org.apache.tools.ant.util.ClasspathUtils$Delegate,READ);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils$Delegate,setClasspath --> append,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils$Delegate,createClasspath --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils$Delegate,createClasspath --> <init>$2,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils$Delegate,createClasspath --> createPath,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils$Delegate,setClasspathref --> getRefId,org.apache.tools.ant.types.Reference,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils$Delegate,setClasspathref --> setRefid,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils$Delegate,setLoaderRef --> getRefId,org.apache.tools.ant.types.Reference,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils$Delegate,getClassLoader --> access$000,org.apache.tools.ant.util.ClasspathUtils,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils$Delegate,getClassLoader --> getClassLoaderForPath$5,org.apache.tools.ant.util.ClasspathUtils,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils$Delegate,getContextProject --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.util.ClasspathUtils$Delegate,newInstance --> newInstance,org.apache.tools.ant.util.ClasspathUtils,);
EndClass 46
StartClass 47
Class(org.apache.tools.ant.types.resources.Touchable,Y,Y,Public);
Method(touch,void,Public,N,Y);
Parameter(touch,long,);
EndClass 47
StartClass 48
Class(org.apache.tools.ant.PathTokenizer,N,N,Public);
Attribute(tokenizer,java.util.StringTokenizer,Private,N,N,);
Attribute(lookahead,java.lang.String,Private,N,N,);
Attribute(onNetWare,boolean,Private,N,N,);
Attribute(dosStyleFilesystem,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(hasMoreTokens,boolean,Public,N,N);
Method(nextToken,java.lang.String,Public,N,N);
Parameter(<init>,java.lang.String,);
Call(ATTRIBUTE,org.apache.tools.ant.PathTokenizer,<init> --> onNetWare,org.apache.tools.ant.PathTokenizer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PathTokenizer,<init> --> lookahead,org.apache.tools.ant.PathTokenizer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.PathTokenizer,<init> --> onNetWare,org.apache.tools.ant.PathTokenizer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.PathTokenizer,<init> --> tokenizer,org.apache.tools.ant.PathTokenizer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.PathTokenizer,<init> --> dosStyleFilesystem,org.apache.tools.ant.PathTokenizer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.PathTokenizer,hasMoreTokens --> lookahead,org.apache.tools.ant.PathTokenizer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PathTokenizer,hasMoreTokens --> tokenizer,org.apache.tools.ant.PathTokenizer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PathTokenizer,nextToken --> lookahead,org.apache.tools.ant.PathTokenizer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PathTokenizer,nextToken --> tokenizer,org.apache.tools.ant.PathTokenizer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PathTokenizer,nextToken --> onNetWare,org.apache.tools.ant.PathTokenizer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PathTokenizer,nextToken --> dosStyleFilesystem,org.apache.tools.ant.PathTokenizer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.PathTokenizer,nextToken --> lookahead,org.apache.tools.ant.PathTokenizer,WRITE);
Call(METHOD,org.apache.tools.ant.PathTokenizer,<init> --> isFamily,org.apache.tools.ant.taskdefs.condition.Os,);
EndClass 48
StartClass 49
Class(org.apache.tools.ant.util.ResourceUtils,N,N,Public);
Attribute(FILE_UTILS,org.apache.tools.ant.util.FileUtils,Private,Y,Y,);
Attribute(NOT_EXISTS,org.apache.tools.ant.types.resources.selectors.ResourceSelector,Private,Y,Y,);
Method(<init>,void,Public,N,N);
Method(selectOutOfDateSources,org.apache.tools.ant.types.Resource[],Public,Y,N);
Method(selectOutOfDateSources$2,org.apache.tools.ant.types.Resource[],Public,Y,N);
Method(selectOutOfDateSources$3,org.apache.tools.ant.types.ResourceCollection,Public,Y,N);
Method(copyResource,void,Public,Y,N);
Method(copyResource$2,void,Public,Y,N);
Method(copyResource$3,void,Public,Y,N);
Method(setLastModified,void,Public,Y,N);
Method(contentEquals,boolean,Public,Y,N);
Method(compareContent,int,Public,Y,N);
Method(binaryCompare,int,Private,Y,N);
Method(textCompare,int,Private,Y,N);
Method(logFuture,void,Private,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(selectOutOfDateSources,org.apache.tools.ant.ProjectComponent,);
Parameter(selectOutOfDateSources,org.apache.tools.ant.types.Resource[],);
Parameter(selectOutOfDateSources,org.apache.tools.ant.util.FileNameMapper,);
Parameter(selectOutOfDateSources,org.apache.tools.ant.types.ResourceFactory,);
Parameter(selectOutOfDateSources$2,org.apache.tools.ant.ProjectComponent,);
Parameter(selectOutOfDateSources$2,org.apache.tools.ant.types.Resource[],);
Parameter(selectOutOfDateSources$2,org.apache.tools.ant.util.FileNameMapper,);
Parameter(selectOutOfDateSources$2,org.apache.tools.ant.types.ResourceFactory,);
Parameter(selectOutOfDateSources$2,long,);
Parameter(selectOutOfDateSources$3,org.apache.tools.ant.ProjectComponent,);
Parameter(selectOutOfDateSources$3,org.apache.tools.ant.types.ResourceCollection,);
Parameter(selectOutOfDateSources$3,org.apache.tools.ant.util.FileNameMapper,);
Parameter(selectOutOfDateSources$3,org.apache.tools.ant.types.ResourceFactory,);
Parameter(selectOutOfDateSources$3,long,);
Parameter(copyResource,org.apache.tools.ant.types.Resource,);
Parameter(copyResource,org.apache.tools.ant.types.Resource,);
Parameter(copyResource$2,org.apache.tools.ant.types.Resource,);
Parameter(copyResource$2,org.apache.tools.ant.types.Resource,);
Parameter(copyResource$2,org.apache.tools.ant.Project,);
Parameter(copyResource$3,org.apache.tools.ant.types.Resource,);
Parameter(copyResource$3,org.apache.tools.ant.types.Resource,);
Parameter(copyResource$3,org.apache.tools.ant.types.FilterSetCollection,);
Parameter(copyResource$3,java.util.Vector,);
Parameter(copyResource$3,boolean,);
Parameter(copyResource$3,boolean,);
Parameter(copyResource$3,java.lang.String,);
Parameter(copyResource$3,java.lang.String,);
Parameter(copyResource$3,org.apache.tools.ant.Project,);
Parameter(setLastModified,org.apache.tools.ant.types.resources.Touchable,);
Parameter(setLastModified,long,);
Parameter(contentEquals,org.apache.tools.ant.types.Resource,);
Parameter(contentEquals,org.apache.tools.ant.types.Resource,);
Parameter(contentEquals,boolean,);
Parameter(compareContent,org.apache.tools.ant.types.Resource,);
Parameter(compareContent,org.apache.tools.ant.types.Resource,);
Parameter(compareContent,boolean,);
Parameter(binaryCompare,org.apache.tools.ant.types.Resource,);
Parameter(binaryCompare,org.apache.tools.ant.types.Resource,);
Parameter(textCompare,org.apache.tools.ant.types.Resource,);
Parameter(textCompare,org.apache.tools.ant.types.Resource,);
Parameter(logFuture,org.apache.tools.ant.ProjectComponent,);
Parameter(logFuture,org.apache.tools.ant.types.ResourceCollection,);
Parameter(logFuture,long,);
Composition(org.apache.tools.ant.util.FileUtils);
Composition(org.apache.tools.ant.types.resources.selectors.ResourceSelector);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources --> selectOutOfDateSources$2,org.apache.tools.ant.util.ResourceUtils,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$2 --> selectOutOfDateSources$3,org.apache.tools.ant.util.ResourceUtils,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$3 --> logFuture,org.apache.tools.ant.util.ResourceUtils,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,copyResource --> copyResource$2,org.apache.tools.ant.util.ResourceUtils,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,copyResource$2 --> copyResource$3,org.apache.tools.ant.util.ResourceUtils,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,copyResource$3 --> setLastModified,org.apache.tools.ant.util.ResourceUtils,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,contentEquals --> compareContent,org.apache.tools.ant.util.ResourceUtils,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,compareContent --> textCompare,org.apache.tools.ant.util.ResourceUtils,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,compareContent --> binaryCompare,org.apache.tools.ant.util.ResourceUtils,);
Call(ATTRIBUTE,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources --> FILE_UTILS,org.apache.tools.ant.util.ResourceUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$3 --> NOT_EXISTS,org.apache.tools.ant.util.ResourceUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.ResourceUtils,<clinit> --> FILE_UTILS,org.apache.tools.ant.util.ResourceUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.ResourceUtils,<clinit> --> NOT_EXISTS,org.apache.tools.ant.util.ResourceUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$3 --> NONE,org.apache.tools.ant.types.resources.Resources,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$3 --> FILE,org.apache.tools.ant.types.resources.selectors.Type,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.ResourceUtils,logFuture --> AFTER,org.apache.tools.ant.types.TimeComparison,READ);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources --> getFileTimestampGranularity,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$2 --> <init>,org.apache.tools.ant.types.resources.Union,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$2 --> addAll,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$2 --> size,org.apache.tools.ant.types.ResourceCollection,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$2 --> listResources,org.apache.tools.ant.types.resources.Union,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$3 --> size,org.apache.tools.ant.types.ResourceCollection,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$3 --> log$2,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$3 --> getInstance,org.apache.tools.ant.types.resources.Union,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$3 --> <init>,org.apache.tools.ant.types.resources.Union,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$3 --> iterator,org.apache.tools.ant.types.ResourceCollection,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$3 --> getName,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$3 --> mapFileName,org.apache.tools.ant.util.FileNameMapper,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$3 --> getResource,org.apache.tools.ant.types.ResourceFactory,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$3 --> add,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$3 --> <init>,org.apache.tools.ant.types.resources.Restrict,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$3 --> <init>$2,org.apache.tools.ant.util.ResourceUtils$Outdated,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$3 --> <init>$2,org.apache.tools.ant.types.resources.selectors.Or,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$3 --> <init>$2,org.apache.tools.ant.types.resources.selectors.And,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$3 --> add$2,org.apache.tools.ant.types.resources.Restrict,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$3 --> add,org.apache.tools.ant.types.resources.Restrict,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$3 --> size,org.apache.tools.ant.types.resources.Restrict,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$3 --> iterator,org.apache.tools.ant.types.resources.Restrict,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$3 --> isExists,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$3 --> toString,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,selectOutOfDateSources$3 --> size,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,copyResource$3 --> getLastModified,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,copyResource$3 --> isExists,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,copyResource$3 --> hasFilters,org.apache.tools.ant.types.FilterSetCollection,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,copyResource$3 --> getInputStream,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,copyResource$3 --> getOutputStream,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,copyResource$3 --> <init>,org.apache.tools.ant.filters.util.ChainReaderHelper,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,copyResource$3 --> setBufferSize,org.apache.tools.ant.filters.util.ChainReaderHelper,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,copyResource$3 --> setPrimaryReader,org.apache.tools.ant.filters.util.ChainReaderHelper,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,copyResource$3 --> setFilterChains,org.apache.tools.ant.filters.util.ChainReaderHelper,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,copyResource$3 --> setProject,org.apache.tools.ant.filters.util.ChainReaderHelper,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,copyResource$3 --> getAssembledReader,org.apache.tools.ant.filters.util.ChainReaderHelper,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,copyResource$3 --> <init>,org.apache.tools.ant.util.LineTokenizer,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,copyResource$3 --> setIncludeDelims,org.apache.tools.ant.util.LineTokenizer,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,copyResource$3 --> getToken,org.apache.tools.ant.util.LineTokenizer,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,copyResource$3 --> replaceTokens,org.apache.tools.ant.types.FilterSetCollection,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,copyResource$3 --> close,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,copyResource$3 --> close$2,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,copyResource$3 --> close$3,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,copyResource$3 --> close$4,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,setLastModified --> touch,org.apache.tools.ant.types.resources.Touchable,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,contentEquals --> isExists,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,contentEquals --> isDirectory,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,contentEquals --> equals,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,contentEquals --> getSize,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,compareContent --> equals,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,compareContent --> isExists,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,compareContent --> isDirectory,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,binaryCompare --> getInputStream,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,binaryCompare --> close$4,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,textCompare --> getInputStream,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,textCompare --> close$2,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,logFuture --> <init>,org.apache.tools.ant.types.resources.selectors.Date,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,logFuture --> setMillis,org.apache.tools.ant.types.resources.selectors.Date,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,logFuture --> setWhen,org.apache.tools.ant.types.resources.selectors.Date,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,logFuture --> <init>,org.apache.tools.ant.types.resources.Restrict,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,logFuture --> add$2,org.apache.tools.ant.types.resources.Restrict,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,logFuture --> add,org.apache.tools.ant.types.resources.Restrict,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,logFuture --> iterator,org.apache.tools.ant.types.resources.Restrict,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,logFuture --> getName,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,logFuture --> log$2,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,<clinit> --> getFileUtils,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,<clinit> --> <init>,org.apache.tools.ant.types.resources.selectors.Exists,);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils,<clinit> --> <init>$2,org.apache.tools.ant.types.resources.selectors.Not,);
EndClass 49
StartClass 50
Class(org.apache.tools.ant.util.FileUtils$1,N,N,NA);
Attribute(this$0,org.apache.tools.ant.util.FileUtils,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(read,int,Public,N,N);
Parameter(<init>,org.apache.tools.ant.util.FileUtils,);
Composition(org.apache.tools.ant.util.FileUtils);
Call(ATTRIBUTE,org.apache.tools.ant.util.FileUtils$1,<init> --> this$0,org.apache.tools.ant.util.FileUtils$1,WRITE);
EndClass 50
StartClass 51
Class(org.apache.tools.ant.taskdefs.condition.Os,N,N,Public);
Attribute(OS_NAME,java.lang.String,Private,Y,Y,);
Attribute(OS_ARCH,java.lang.String,Private,Y,Y,);
Attribute(OS_VERSION,java.lang.String,Private,Y,Y,);
Attribute(PATH_SEP,java.lang.String,Private,Y,Y,);
Attribute(family,java.lang.String,Private,N,N,);
Attribute(name,java.lang.String,Private,N,N,);
Attribute(version,java.lang.String,Private,N,N,);
Attribute(arch,java.lang.String,Private,N,N,);
Attribute(FAMILY_WINDOWS,java.lang.String,Public,Y,Y,);
Attribute(FAMILY_9X,java.lang.String,Public,Y,Y,);
Attribute(FAMILY_NT,java.lang.String,Public,Y,Y,);
Attribute(FAMILY_OS2,java.lang.String,Public,Y,Y,);
Attribute(FAMILY_NETWARE,java.lang.String,Public,Y,Y,);
Attribute(FAMILY_DOS,java.lang.String,Public,Y,Y,);
Attribute(FAMILY_MAC,java.lang.String,Public,Y,Y,);
Attribute(FAMILY_TANDEM,java.lang.String,Public,Y,Y,);
Attribute(FAMILY_UNIX,java.lang.String,Public,Y,Y,);
Attribute(FAMILY_VMS,java.lang.String,Public,Y,Y,);
Attribute(FAMILY_ZOS,java.lang.String,Public,Y,Y,);
Attribute(FAMILY_OS400,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(setFamily,void,Public,N,N);
Method(setName,void,Public,N,N);
Method(setArch,void,Public,N,N);
Method(setVersion,void,Public,N,N);
Method(eval,boolean,Public,N,N);
Method(isFamily,boolean,Public,Y,N);
Method(isName,boolean,Public,Y,N);
Method(isArch,boolean,Public,Y,N);
Method(isVersion,boolean,Public,Y,N);
Method(isOs,boolean,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>$2,java.lang.String,);
Parameter(setFamily,java.lang.String,);
Parameter(setName,java.lang.String,);
Parameter(setArch,java.lang.String,);
Parameter(setVersion,java.lang.String,);
Parameter(isFamily,java.lang.String,);
Parameter(isName,java.lang.String,);
Parameter(isArch,java.lang.String,);
Parameter(isVersion,java.lang.String,);
Parameter(isOs,java.lang.String,);
Parameter(isOs,java.lang.String,);
Parameter(isOs,java.lang.String,);
Parameter(isOs,java.lang.String,);
Realization(org.apache.tools.ant.taskdefs.condition.Condition);
Call(METHOD,org.apache.tools.ant.taskdefs.condition.Os,<init>$2 --> setFamily,org.apache.tools.ant.taskdefs.condition.Os,);
Call(METHOD,org.apache.tools.ant.taskdefs.condition.Os,eval --> isOs,org.apache.tools.ant.taskdefs.condition.Os,);
Call(METHOD,org.apache.tools.ant.taskdefs.condition.Os,isFamily --> isOs,org.apache.tools.ant.taskdefs.condition.Os,);
Call(METHOD,org.apache.tools.ant.taskdefs.condition.Os,isName --> isOs,org.apache.tools.ant.taskdefs.condition.Os,);
Call(METHOD,org.apache.tools.ant.taskdefs.condition.Os,isArch --> isOs,org.apache.tools.ant.taskdefs.condition.Os,);
Call(METHOD,org.apache.tools.ant.taskdefs.condition.Os,isVersion --> isOs,org.apache.tools.ant.taskdefs.condition.Os,);
Call(METHOD,org.apache.tools.ant.taskdefs.condition.Os,isOs --> isFamily,org.apache.tools.ant.taskdefs.condition.Os,);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.condition.Os,setFamily --> family,org.apache.tools.ant.taskdefs.condition.Os,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.condition.Os,setName --> name,org.apache.tools.ant.taskdefs.condition.Os,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.condition.Os,setArch --> arch,org.apache.tools.ant.taskdefs.condition.Os,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.condition.Os,setVersion --> version,org.apache.tools.ant.taskdefs.condition.Os,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.condition.Os,eval --> family,org.apache.tools.ant.taskdefs.condition.Os,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.condition.Os,eval --> name,org.apache.tools.ant.taskdefs.condition.Os,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.condition.Os,eval --> arch,org.apache.tools.ant.taskdefs.condition.Os,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.condition.Os,eval --> version,org.apache.tools.ant.taskdefs.condition.Os,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.condition.Os,isOs --> OS_NAME,org.apache.tools.ant.taskdefs.condition.Os,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.condition.Os,isOs --> PATH_SEP,org.apache.tools.ant.taskdefs.condition.Os,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.condition.Os,isOs --> OS_ARCH,org.apache.tools.ant.taskdefs.condition.Os,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.condition.Os,isOs --> OS_VERSION,org.apache.tools.ant.taskdefs.condition.Os,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.condition.Os,<clinit> --> OS_NAME,org.apache.tools.ant.taskdefs.condition.Os,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.condition.Os,<clinit> --> OS_ARCH,org.apache.tools.ant.taskdefs.condition.Os,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.condition.Os,<clinit> --> OS_VERSION,org.apache.tools.ant.taskdefs.condition.Os,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.condition.Os,<clinit> --> PATH_SEP,org.apache.tools.ant.taskdefs.condition.Os,WRITE);
Call(METHOD,org.apache.tools.ant.taskdefs.condition.Os,isOs --> <init>$2,org.apache.tools.ant.BuildException,);
EndClass 51
StartClass 52
Class(org.apache.tools.ant.Diagnostics$1,N,N,NA);
Method(<init>,void,Public,N,N);
Method(accept,boolean,Public,N,N);
Parameter(accept,java.io.File,);
Parameter(accept,java.lang.String,);
EndClass 52
StartClass 53
Class(org.apache.tools.ant.util.JAXPUtils,N,N,Public);
Attribute(FILE_UTILS,org.apache.tools.ant.util.FileUtils,Private,Y,Y,);
Attribute(parserFactory,javax.xml.parsers.SAXParserFactory,Private,Y,N,);
Attribute(nsParserFactory,javax.xml.parsers.SAXParserFactory,Private,Y,N,);
Attribute(builderFactory,javax.xml.parsers.DocumentBuilderFactory,Private,Y,N,);
Method(<init>,void,Public,N,N);
Method(getParserFactory,javax.xml.parsers.SAXParserFactory,Public,Y,N);
Method(getNSParserFactory,javax.xml.parsers.SAXParserFactory,Public,Y,N);
Method(newParserFactory,javax.xml.parsers.SAXParserFactory,Public,Y,N);
Method(getParser,org.xml.sax.Parser,Public,Y,N);
Method(getXMLReader,org.xml.sax.XMLReader,Public,Y,N);
Method(getNamespaceXMLReader,org.xml.sax.XMLReader,Public,Y,N);
Method(getSystemId,java.lang.String,Public,Y,N);
Method(getDocumentBuilder,javax.xml.parsers.DocumentBuilder,Public,Y,N);
Method(newSAXParser,javax.xml.parsers.SAXParser,Private,Y,N);
Method(convertToBuildException,org.apache.tools.ant.BuildException,Private,Y,N);
Method(getDocumentBuilderFactory,javax.xml.parsers.DocumentBuilderFactory,Private,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(getSystemId,java.io.File,);
Parameter(newSAXParser,javax.xml.parsers.SAXParserFactory,);
Parameter(convertToBuildException,org.xml.sax.SAXException,);
Composition(org.apache.tools.ant.util.FileUtils);
Call(METHOD,org.apache.tools.ant.util.JAXPUtils,getParserFactory --> newParserFactory,org.apache.tools.ant.util.JAXPUtils,);
Call(METHOD,org.apache.tools.ant.util.JAXPUtils,getNSParserFactory --> newParserFactory,org.apache.tools.ant.util.JAXPUtils,);
Call(METHOD,org.apache.tools.ant.util.JAXPUtils,getParser --> getParserFactory,org.apache.tools.ant.util.JAXPUtils,);
Call(METHOD,org.apache.tools.ant.util.JAXPUtils,getParser --> newSAXParser,org.apache.tools.ant.util.JAXPUtils,);
Call(METHOD,org.apache.tools.ant.util.JAXPUtils,getParser --> convertToBuildException,org.apache.tools.ant.util.JAXPUtils,);
Call(METHOD,org.apache.tools.ant.util.JAXPUtils,getXMLReader --> getParserFactory,org.apache.tools.ant.util.JAXPUtils,);
Call(METHOD,org.apache.tools.ant.util.JAXPUtils,getXMLReader --> newSAXParser,org.apache.tools.ant.util.JAXPUtils,);
Call(METHOD,org.apache.tools.ant.util.JAXPUtils,getXMLReader --> convertToBuildException,org.apache.tools.ant.util.JAXPUtils,);
Call(METHOD,org.apache.tools.ant.util.JAXPUtils,getNamespaceXMLReader --> getNSParserFactory,org.apache.tools.ant.util.JAXPUtils,);
Call(METHOD,org.apache.tools.ant.util.JAXPUtils,getNamespaceXMLReader --> newSAXParser,org.apache.tools.ant.util.JAXPUtils,);
Call(METHOD,org.apache.tools.ant.util.JAXPUtils,getNamespaceXMLReader --> convertToBuildException,org.apache.tools.ant.util.JAXPUtils,);
Call(METHOD,org.apache.tools.ant.util.JAXPUtils,getDocumentBuilder --> getDocumentBuilderFactory,org.apache.tools.ant.util.JAXPUtils,);
Call(METHOD,org.apache.tools.ant.util.JAXPUtils,newSAXParser --> convertToBuildException,org.apache.tools.ant.util.JAXPUtils,);
Call(ATTRIBUTE,org.apache.tools.ant.util.JAXPUtils,getParserFactory --> parserFactory,org.apache.tools.ant.util.JAXPUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.JAXPUtils,getParserFactory --> parserFactory,org.apache.tools.ant.util.JAXPUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.JAXPUtils,getNSParserFactory --> nsParserFactory,org.apache.tools.ant.util.JAXPUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.JAXPUtils,getNSParserFactory --> nsParserFactory,org.apache.tools.ant.util.JAXPUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.JAXPUtils,getSystemId --> FILE_UTILS,org.apache.tools.ant.util.JAXPUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.JAXPUtils,getDocumentBuilderFactory --> builderFactory,org.apache.tools.ant.util.JAXPUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.JAXPUtils,getDocumentBuilderFactory --> builderFactory,org.apache.tools.ant.util.JAXPUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.JAXPUtils,<clinit> --> FILE_UTILS,org.apache.tools.ant.util.JAXPUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.JAXPUtils,<clinit> --> parserFactory,org.apache.tools.ant.util.JAXPUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.JAXPUtils,<clinit> --> nsParserFactory,org.apache.tools.ant.util.JAXPUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.JAXPUtils,<clinit> --> builderFactory,org.apache.tools.ant.util.JAXPUtils,WRITE);
Call(METHOD,org.apache.tools.ant.util.JAXPUtils,newParserFactory --> <init>$3,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.util.JAXPUtils,getSystemId --> toURI,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.util.JAXPUtils,getDocumentBuilder --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.util.JAXPUtils,newSAXParser --> <init>$3,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.util.JAXPUtils,convertToBuildException --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.util.JAXPUtils,getDocumentBuilderFactory --> <init>$3,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.util.JAXPUtils,<clinit> --> getFileUtils,org.apache.tools.ant.util.FileUtils,);
EndClass 53
StartClass 54
Class(org.apache.tools.ant.TaskContainer,Y,Y,Public);
Method(addTask,void,Public,N,Y);
Parameter(addTask,org.apache.tools.ant.Task,);
EndClass 54
StartClass 55
Class(org.apache.tools.ant.RuntimeConfigurable,N,N,Public);
Attribute(EMPTY_HASHTABLE,java.util.Hashtable,Private,Y,Y,);
Attribute(elementTag,java.lang.String,Private,N,N,);
Attribute(children,java.util.List,Private,N,N,);
Attribute(wrappedObject,java.lang.Object,Private,N,N,);
Attribute(creator,org.apache.tools.ant.IntrospectionHelper$Creator,Private,N,N,);
Attribute(attributes,org.xml.sax.AttributeList,Private,N,N,);
Attribute(attributeNames,java.util.List,Private,N,N,);
Attribute(attributeMap,java.util.Map,Private,N,N,);
Attribute(characters,java.lang.StringBuffer,Private,N,N,);
Attribute(proxyConfigured,boolean,Private,N,N,);
Attribute(polyType,java.lang.String,Private,N,N,);
Attribute(id,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setProxy,void,Public,N,N);
Method(setCreator,void,Public,N,N);
Method(getProxy,java.lang.Object,Public,N,N);
Method(getId,java.lang.String,Public,N,N);
Method(getPolyType,java.lang.String,Public,N,N);
Method(setPolyType,void,Public,N,N);
Method(setAttributes,void,Public,N,N);
Method(setAttribute,void,Public,N,N);
Method(removeAttribute,void,Public,N,N);
Method(getAttributeMap,java.util.Hashtable,Public,N,N);
Method(getAttributes,org.xml.sax.AttributeList,Public,N,N);
Method(addChild,void,Public,N,N);
Method(getChild,org.apache.tools.ant.RuntimeConfigurable,Public,N,N);
Method(getChildren,java.util.Enumeration,Public,N,N);
Method(addText,void,Public,N,N);
Method(addText$2,void,Public,N,N);
Method(getText,java.lang.StringBuffer,Public,N,N);
Method(setElementTag,void,Public,N,N);
Method(getElementTag,java.lang.String,Public,N,N);
Method(maybeConfigure,void,Public,N,N);
Method(maybeConfigure$2,void,Public,N,N);
Method(reconfigure,void,Public,N,N);
Method(applyPreSet,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,java.lang.Object,);
Parameter(<init>,java.lang.String,);
Parameter(setProxy,java.lang.Object,);
Parameter(setCreator,org.apache.tools.ant.IntrospectionHelper$Creator,);
Parameter(setPolyType,java.lang.String,);
Parameter(setAttributes,org.xml.sax.AttributeList,);
Parameter(setAttribute,java.lang.String,);
Parameter(setAttribute,java.lang.String,);
Parameter(removeAttribute,java.lang.String,);
Parameter(addChild,org.apache.tools.ant.RuntimeConfigurable,);
Parameter(getChild,int,);
Parameter(addText,java.lang.String,);
Parameter(addText$2,char[],);
Parameter(addText$2,int,);
Parameter(addText$2,int,);
Parameter(setElementTag,java.lang.String,);
Parameter(maybeConfigure,org.apache.tools.ant.Project,);
Parameter(maybeConfigure$2,org.apache.tools.ant.Project,);
Parameter(maybeConfigure$2,boolean,);
Parameter(reconfigure,org.apache.tools.ant.Project,);
Parameter(applyPreSet,org.apache.tools.ant.RuntimeConfigurable,);
Composition(org.apache.tools.ant.IntrospectionHelper$Creator);
Call(METHOD,org.apache.tools.ant.RuntimeConfigurable,<init> --> setProxy,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.RuntimeConfigurable,<init> --> setElementTag,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.RuntimeConfigurable,setAttributes --> setAttribute,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.RuntimeConfigurable,maybeConfigure --> maybeConfigure$2,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.RuntimeConfigurable,maybeConfigure$2 --> getElementTag,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.RuntimeConfigurable,reconfigure --> maybeConfigure,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.RuntimeConfigurable,applyPreSet --> setAttribute,org.apache.tools.ant.RuntimeConfigurable,);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,<init> --> elementTag,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,<init> --> children,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,<init> --> wrappedObject,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,<init> --> attributeNames,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,<init> --> attributeMap,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,<init> --> characters,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,<init> --> proxyConfigured,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,<init> --> polyType,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,<init> --> id,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,setProxy --> wrappedObject,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,setProxy --> proxyConfigured,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,setCreator --> creator,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,getProxy --> wrappedObject,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,getId --> id,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,getPolyType --> polyType,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,setPolyType --> polyType,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,setAttributes --> attributes,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,setAttribute --> attributeNames,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,setAttribute --> attributeMap,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,setAttribute --> polyType,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,setAttribute --> attributeNames,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,setAttribute --> attributeMap,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,setAttribute --> id,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,removeAttribute --> attributeNames,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,removeAttribute --> attributeMap,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,getAttributeMap --> attributeMap,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,getAttributeMap --> EMPTY_HASHTABLE,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,getAttributes --> attributes,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,addChild --> children,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,addChild --> children,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,getChild --> children,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,getChildren --> children,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,addText --> characters,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,addText --> characters,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,addText$2 --> characters,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,addText$2 --> characters,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,getText --> characters,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,setElementTag --> elementTag,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,getElementTag --> elementTag,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,maybeConfigure$2 --> proxyConfigured,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,maybeConfigure$2 --> wrappedObject,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,maybeConfigure$2 --> attributeNames,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,maybeConfigure$2 --> attributeMap,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,maybeConfigure$2 --> characters,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,maybeConfigure$2 --> id,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,maybeConfigure$2 --> proxyConfigured,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,reconfigure --> proxyConfigured,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,applyPreSet --> attributeMap,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,applyPreSet --> polyType,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,applyPreSet --> children,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,applyPreSet --> characters,org.apache.tools.ant.RuntimeConfigurable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,applyPreSet --> polyType,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,applyPreSet --> children,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,applyPreSet --> characters,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.RuntimeConfigurable,<clinit> --> EMPTY_HASHTABLE,org.apache.tools.ant.RuntimeConfigurable,WRITE);
Call(METHOD,org.apache.tools.ant.RuntimeConfigurable,<init> --> setRuntimeConfigurableWrapper,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.RuntimeConfigurable,getChildren --> <init>,org.apache.tools.ant.util.CollectionUtils$EmptyEnumeration,);
Call(METHOD,org.apache.tools.ant.RuntimeConfigurable,maybeConfigure$2 --> getProxy,org.apache.tools.ant.TypeAdapter,);
Call(METHOD,org.apache.tools.ant.RuntimeConfigurable,maybeConfigure$2 --> getHelper$2,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.RuntimeConfigurable,maybeConfigure$2 --> replaceProperties,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.RuntimeConfigurable,maybeConfigure$2 --> setAttribute,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.RuntimeConfigurable,maybeConfigure$2 --> getAttribute,org.apache.tools.ant.UnsupportedAttributeException,);
Call(METHOD,org.apache.tools.ant.RuntimeConfigurable,maybeConfigure$2 --> <init>$3,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.RuntimeConfigurable,maybeConfigure$2 --> addText$2,org.apache.tools.ant.ProjectHelper,);
Call(METHOD,org.apache.tools.ant.RuntimeConfigurable,maybeConfigure$2 --> addReference,org.apache.tools.ant.Project,);
EndClass 55
StartClass 56
Class(org.apache.tools.ant.util.CollectionUtils,N,N,Public);
Method(<init>,void,Public,N,N);
Method(equals,boolean,Public,Y,N);
Method(equals$2,boolean,Public,Y,N);
Method(putAll,void,Public,Y,N);
Method(append,java.util.Enumeration,Public,Y,N);
Method(asEnumeration,java.util.Enumeration,Public,Y,N);
Method(asIterator,java.util.Iterator,Public,Y,N);
Parameter(equals,java.util.Vector,);
Parameter(equals,java.util.Vector,);
Parameter(equals$2,java.util.Dictionary,);
Parameter(equals$2,java.util.Dictionary,);
Parameter(putAll,java.util.Dictionary,);
Parameter(putAll,java.util.Dictionary,);
Parameter(append,java.util.Enumeration,);
Parameter(append,java.util.Enumeration,);
Parameter(asEnumeration,java.util.Iterator,);
Parameter(asIterator,java.util.Enumeration,);
Call(METHOD,org.apache.tools.ant.util.CollectionUtils,append --> <init>,org.apache.tools.ant.util.CollectionUtils$CompoundEnumeration,);
Call(METHOD,org.apache.tools.ant.util.CollectionUtils,asEnumeration --> <init>,org.apache.tools.ant.util.CollectionUtils$1,);
Call(METHOD,org.apache.tools.ant.util.CollectionUtils,asIterator --> <init>,org.apache.tools.ant.util.CollectionUtils$2,);
EndClass 56
StartClass 57
Class(org.apache.tools.ant.util.CollectionUtils$EmptyEnumeration,N,N,Public);
Method(<init>,void,Public,N,N);
Method(hasMoreElements,boolean,Public,N,N);
Method(nextElement,java.lang.Object,Public,N,N);
EndClass 57
StartClass 58
Class(org.apache.tools.ant.input.InputRequest,N,N,Public);
Attribute(prompt,java.lang.String,Private,N,N,);
Attribute(input,java.lang.String,Private,N,N,);
Attribute(defaultValue,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getPrompt,java.lang.String,Public,N,N);
Method(setInput,void,Public,N,N);
Method(isInputValid,boolean,Public,N,N);
Method(getInput,java.lang.String,Public,N,N);
Method(getDefaultValue,java.lang.String,Public,N,N);
Method(setDefaultValue,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(setInput,java.lang.String,);
Parameter(setDefaultValue,java.lang.String,);
SubClass(org.apache.tools.ant.input.MultipleChoiceInputRequest);
Call(ATTRIBUTE,org.apache.tools.ant.input.InputRequest,<init> --> prompt,org.apache.tools.ant.input.InputRequest,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.input.InputRequest,getPrompt --> prompt,org.apache.tools.ant.input.InputRequest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.input.InputRequest,setInput --> input,org.apache.tools.ant.input.InputRequest,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.input.InputRequest,getInput --> input,org.apache.tools.ant.input.InputRequest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.input.InputRequest,getDefaultValue --> defaultValue,org.apache.tools.ant.input.InputRequest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.input.InputRequest,setDefaultValue --> defaultValue,org.apache.tools.ant.input.InputRequest,WRITE);
EndClass 58
StartClass 59
Class(org.apache.tools.ant.DemuxOutputStream$BufferInfo,N,N,NA);
Attribute(buffer,java.io.ByteArrayOutputStream,Private,N,N,);
Attribute(crSeen,boolean,Private,N,N,);
Method(<init>,void,Private,N,N);
Method(<init>$2,void,Public,N,N);
Method(access$102,java.io.ByteArrayOutputStream,Public,Y,N);
Method(access$202,boolean,Public,Y,N);
Method(access$100,java.io.ByteArrayOutputStream,Public,Y,N);
Method(access$200,boolean,Public,Y,N);
Parameter(<init>$2,org.apache.tools.ant.DemuxOutputStream$1,);
Parameter(access$102,org.apache.tools.ant.DemuxOutputStream$BufferInfo,);
Parameter(access$102,java.io.ByteArrayOutputStream,);
Parameter(access$202,org.apache.tools.ant.DemuxOutputStream$BufferInfo,);
Parameter(access$202,boolean,);
Parameter(access$100,org.apache.tools.ant.DemuxOutputStream$BufferInfo,);
Parameter(access$200,org.apache.tools.ant.DemuxOutputStream$BufferInfo,);
Call(METHOD,org.apache.tools.ant.DemuxOutputStream$BufferInfo,<init>$2 --> <init>,org.apache.tools.ant.DemuxOutputStream$BufferInfo,);
Call(ATTRIBUTE,org.apache.tools.ant.DemuxOutputStream$BufferInfo,<init> --> crSeen,org.apache.tools.ant.DemuxOutputStream$BufferInfo,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DemuxOutputStream$BufferInfo,access$102 --> buffer,org.apache.tools.ant.DemuxOutputStream$BufferInfo,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DemuxOutputStream$BufferInfo,access$202 --> crSeen,org.apache.tools.ant.DemuxOutputStream$BufferInfo,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DemuxOutputStream$BufferInfo,access$100 --> buffer,org.apache.tools.ant.DemuxOutputStream$BufferInfo,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DemuxOutputStream$BufferInfo,access$200 --> crSeen,org.apache.tools.ant.DemuxOutputStream$BufferInfo,READ);
EndClass 59
StartClass 60
Class(org.apache.tools.ant.DemuxOutputStream$1,N,N,NA);
EndClass 60
StartClass 61
Class(org.apache.tools.ant.input.MultipleChoiceInputRequest,N,N,Public);
Attribute(choices,java.util.Vector,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getChoices,java.util.Vector,Public,N,N);
Method(isInputValid,boolean,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.util.Vector,);
SuperClass(org.apache.tools.ant.input.InputRequest);
Generalization(org.apache.tools.ant.input.InputRequest);
Call(ATTRIBUTE,org.apache.tools.ant.input.MultipleChoiceInputRequest,<init> --> choices,org.apache.tools.ant.input.MultipleChoiceInputRequest,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.input.MultipleChoiceInputRequest,getChoices --> choices,org.apache.tools.ant.input.MultipleChoiceInputRequest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.input.MultipleChoiceInputRequest,isInputValid --> choices,org.apache.tools.ant.input.MultipleChoiceInputRequest,READ);
Call(METHOD,org.apache.tools.ant.input.MultipleChoiceInputRequest,<init> --> <init>,org.apache.tools.ant.input.InputRequest,);
Call(METHOD,org.apache.tools.ant.input.MultipleChoiceInputRequest,isInputValid --> getInput,org.apache.tools.ant.input.InputRequest,);
Call(METHOD,org.apache.tools.ant.input.MultipleChoiceInputRequest,isInputValid --> getDefaultValue,org.apache.tools.ant.input.InputRequest,);
EndClass 61
StartClass 62
Class(org.apache.tools.ant.types.DataType,N,Y,Public);
Attribute(ref,org.apache.tools.ant.types.Reference,Protected,N,N,);
Attribute(checked,boolean,Protected,N,N,);
Method(<init>,void,Public,N,N);
Method(isReference,boolean,Public,N,N);
Method(setRefid,void,Public,N,N);
Method(getDataTypeName,java.lang.String,Protected,N,N);
Method(dieOnCircularReference,void,Protected,N,N);
Method(dieOnCircularReference$2,void,Protected,N,N);
Method(dieOnCircularReference$3,void,Protected,N,N);
Method(invokeCircularReferenceCheck,void,Public,Y,N);
Method(getCheckedRef,java.lang.Object,Protected,N,N);
Method(getCheckedRef$2,java.lang.Object,Protected,N,N);
Method(getCheckedRef$3,java.lang.Object,Protected,N,N);
Method(getCheckedRef$4,java.lang.Object,Protected,N,N);
Method(tooManyAttributes,org.apache.tools.ant.BuildException,Protected,N,N);
Method(noChildrenAllowed,org.apache.tools.ant.BuildException,Protected,N,N);
Method(circularReference,org.apache.tools.ant.BuildException,Protected,N,N);
Method(isChecked,boolean,Protected,N,N);
Method(setChecked,void,Protected,N,N);
Method(getRefid,org.apache.tools.ant.types.Reference,Public,N,N);
Method(checkAttributesAllowed,void,Protected,N,N);
Method(checkChildrenAllowed,void,Protected,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(clone,java.lang.Object,Public,N,N);
Parameter(setRefid,org.apache.tools.ant.types.Reference,);
Parameter(dieOnCircularReference$2,org.apache.tools.ant.Project,);
Parameter(dieOnCircularReference$3,java.util.Stack,);
Parameter(dieOnCircularReference$3,org.apache.tools.ant.Project,);
Parameter(invokeCircularReferenceCheck,org.apache.tools.ant.types.DataType,);
Parameter(invokeCircularReferenceCheck,java.util.Stack,);
Parameter(invokeCircularReferenceCheck,org.apache.tools.ant.Project,);
Parameter(getCheckedRef$2,org.apache.tools.ant.Project,);
Parameter(getCheckedRef$3,java.lang.Class,);
Parameter(getCheckedRef$3,java.lang.String,);
Parameter(getCheckedRef$4,java.lang.Class,);
Parameter(getCheckedRef$4,java.lang.String,);
Parameter(getCheckedRef$4,org.apache.tools.ant.Project,);
Parameter(setChecked,boolean,);
SuperClass(org.apache.tools.ant.ProjectComponent);
SubClass(org.apache.tools.ant.types.FilterSet);
SubClass(org.apache.tools.ant.types.Path);
SubClass(org.apache.tools.ant.types.resources.FileResource);
SubClass(org.apache.tools.ant.types.Resource);
SubClass(org.apache.tools.ant.types.Description);
SubClass(org.apache.tools.ant.types.FileList);
SubClass(org.apache.tools.ant.types.resources.Resources);
SubClass(org.apache.tools.ant.types.FileSet);
SubClass(org.apache.tools.ant.types.DirSet);
SubClass(org.apache.tools.ant.types.AbstractFileSet);
SubClass(org.apache.tools.ant.types.resources.Union);
SubClass(org.apache.tools.ant.types.resources.BaseResourceCollectionContainer);
SubClass(org.apache.tools.ant.types.resources.selectors.And);
SubClass(org.apache.tools.ant.types.resources.Restrict);
SubClass(org.apache.tools.ant.types.resources.selectors.Or);
SubClass(org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer);
SubClass(org.apache.tools.ant.types.resources.Restrict$1);
SubClass(org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper);
SubClass(org.apache.tools.ant.types.FilterChain);
SubClass(org.apache.tools.ant.types.AntFilterReader);
SubClass(org.apache.tools.ant.types.PatternSet);
SubClass(org.apache.tools.ant.types.selectors.ExtendSelector);
SubClass(org.apache.tools.ant.types.selectors.PresentSelector);
SubClass(org.apache.tools.ant.types.selectors.DateSelector);
SubClass(org.apache.tools.ant.types.selectors.SizeSelector);
SubClass(org.apache.tools.ant.types.selectors.FilenameSelector);
SubClass(org.apache.tools.ant.types.selectors.TypeSelector);
SubClass(org.apache.tools.ant.types.selectors.ContainsSelector);
SubClass(org.apache.tools.ant.types.selectors.DepthSelector);
SubClass(org.apache.tools.ant.types.selectors.ContainsRegexpSelector);
SubClass(org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector);
SubClass(org.apache.tools.ant.types.selectors.BaseExtendSelector);
SubClass(org.apache.tools.ant.types.selectors.SelectSelector);
SubClass(org.apache.tools.ant.types.selectors.AndSelector);
SubClass(org.apache.tools.ant.types.selectors.OrSelector);
SubClass(org.apache.tools.ant.types.selectors.NotSelector);
SubClass(org.apache.tools.ant.types.selectors.NoneSelector);
SubClass(org.apache.tools.ant.types.selectors.MajoritySelector);
SubClass(org.apache.tools.ant.types.selectors.BaseSelectorContainer);
SubClass(org.apache.tools.ant.types.selectors.DifferentSelector);
SubClass(org.apache.tools.ant.types.selectors.DependSelector);
SubClass(org.apache.tools.ant.types.selectors.MappingSelector);
SubClass(org.apache.tools.ant.types.selectors.BaseSelector);
SubClass(org.apache.tools.ant.types.Mapper);
SubClass(org.apache.tools.ant.types.RegularExpression);
SubClass(org.apache.tools.ant.types.Substitution);
Generalization(org.apache.tools.ant.ProjectComponent);
Composition(org.apache.tools.ant.types.Reference);
Call(METHOD,org.apache.tools.ant.types.DataType,dieOnCircularReference --> dieOnCircularReference$2,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.DataType,dieOnCircularReference$2 --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.DataType,dieOnCircularReference$2 --> dieOnCircularReference$3,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.DataType,dieOnCircularReference$3 --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.DataType,dieOnCircularReference$3 --> circularReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.DataType,dieOnCircularReference$3 --> dieOnCircularReference$3,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.DataType,invokeCircularReferenceCheck --> dieOnCircularReference$3,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.DataType,getCheckedRef --> getCheckedRef$2,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.DataType,getCheckedRef$2 --> getDataTypeName,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.DataType,getCheckedRef$2 --> getCheckedRef$4,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.DataType,getCheckedRef$3 --> getCheckedRef$4,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.DataType,getCheckedRef$4 --> dieOnCircularReference$2,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.DataType,checkAttributesAllowed --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.DataType,checkAttributesAllowed --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.DataType,checkChildrenAllowed --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.DataType,checkChildrenAllowed --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.DataType,toString --> getDataTypeName,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.DataType,clone --> getRefid,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.DataType,clone --> setRefid,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.DataType,clone --> isChecked,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.DataType,clone --> setChecked,org.apache.tools.ant.types.DataType,);
Call(ATTRIBUTE,org.apache.tools.ant.types.DataType,<init> --> checked,org.apache.tools.ant.types.DataType,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.DataType,isReference --> ref,org.apache.tools.ant.types.DataType,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.DataType,setRefid --> ref,org.apache.tools.ant.types.DataType,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.DataType,setRefid --> checked,org.apache.tools.ant.types.DataType,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.DataType,dieOnCircularReference$2 --> checked,org.apache.tools.ant.types.DataType,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.DataType,dieOnCircularReference$3 --> checked,org.apache.tools.ant.types.DataType,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.DataType,dieOnCircularReference$3 --> ref,org.apache.tools.ant.types.DataType,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.DataType,dieOnCircularReference$3 --> checked,org.apache.tools.ant.types.DataType,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.DataType,getCheckedRef$4 --> ref,org.apache.tools.ant.types.DataType,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.DataType,isChecked --> checked,org.apache.tools.ant.types.DataType,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.DataType,setChecked --> checked,org.apache.tools.ant.types.DataType,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.DataType,getRefid --> ref,org.apache.tools.ant.types.DataType,READ);
Call(METHOD,org.apache.tools.ant.types.DataType,<init> --> <init>,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.DataType,getDataTypeName --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.DataType,getDataTypeName --> getElementName$3,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.types.DataType,dieOnCircularReference --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.DataType,dieOnCircularReference$2 --> <init>$2,org.apache.tools.ant.util.IdentityStack,);
Call(METHOD,org.apache.tools.ant.types.DataType,dieOnCircularReference$3 --> getReferencedObject,org.apache.tools.ant.types.Reference,);
Call(METHOD,org.apache.tools.ant.types.DataType,dieOnCircularReference$3 --> getInstance,org.apache.tools.ant.util.IdentityStack,);
Call(METHOD,org.apache.tools.ant.types.DataType,dieOnCircularReference$3 --> contains,org.apache.tools.ant.util.IdentityStack,);
Call(METHOD,org.apache.tools.ant.types.DataType,getCheckedRef --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.DataType,getCheckedRef$3 --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.DataType,getCheckedRef$4 --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.DataType,getCheckedRef$4 --> getReferencedObject,org.apache.tools.ant.types.Reference,);
Call(METHOD,org.apache.tools.ant.types.DataType,getCheckedRef$4 --> log$2,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.DataType,getCheckedRef$4 --> getRefId,org.apache.tools.ant.types.Reference,);
Call(METHOD,org.apache.tools.ant.types.DataType,tooManyAttributes --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.DataType,noChildrenAllowed --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.DataType,circularReference --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.DataType,toString --> getDescription,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.DataType,clone --> clone,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.DataType,clone --> getDescription,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.DataType,clone --> setDescription,org.apache.tools.ant.ProjectComponent,);
EndClass 62
StartClass 63
Class(org.apache.tools.ant.helper.ProjectHelperImpl,N,N,Public);
Attribute(FILE_UTILS,org.apache.tools.ant.util.FileUtils,Private,Y,Y,);
Attribute(parser,org.xml.sax.Parser,Private,N,N,);
Attribute(project,org.apache.tools.ant.Project,Private,N,N,);
Attribute(buildFile,java.io.File,Private,N,N,);
Attribute(buildFileParent,java.io.File,Private,N,N,);
Attribute(locator,org.xml.sax.Locator,Private,N,N,);
Attribute(implicitTarget,org.apache.tools.ant.Target,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(parse,void,Public,N,N);
Method(handleElement,void,Private,Y,N);
Method(configureId,void,Private,N,N);
Method(access$000,org.xml.sax.Parser,Public,Y,N);
Method(access$100,org.xml.sax.Locator,Public,Y,N);
Method(access$200,org.apache.tools.ant.Project,Public,Y,N);
Method(access$300,org.apache.tools.ant.util.FileUtils,Public,Y,N);
Method(access$400,java.io.File,Public,Y,N);
Method(access$500,java.io.File,Public,Y,N);
Method(access$102,org.xml.sax.Locator,Public,Y,N);
Method(access$600,org.apache.tools.ant.Target,Public,Y,N);
Method(access$700,void,Public,Y,N);
Method(access$800,void,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(parse,org.apache.tools.ant.Project,);
Parameter(parse,java.lang.Object,);
Parameter(handleElement,org.apache.tools.ant.helper.ProjectHelperImpl,);
Parameter(handleElement,org.xml.sax.DocumentHandler,);
Parameter(handleElement,org.apache.tools.ant.Target,);
Parameter(handleElement,java.lang.String,);
Parameter(handleElement,org.xml.sax.AttributeList,);
Parameter(configureId,java.lang.Object,);
Parameter(configureId,org.xml.sax.AttributeList,);
Parameter(access$000,org.apache.tools.ant.helper.ProjectHelperImpl,);
Parameter(access$100,org.apache.tools.ant.helper.ProjectHelperImpl,);
Parameter(access$200,org.apache.tools.ant.helper.ProjectHelperImpl,);
Parameter(access$400,org.apache.tools.ant.helper.ProjectHelperImpl,);
Parameter(access$500,org.apache.tools.ant.helper.ProjectHelperImpl,);
Parameter(access$102,org.apache.tools.ant.helper.ProjectHelperImpl,);
Parameter(access$102,org.xml.sax.Locator,);
Parameter(access$600,org.apache.tools.ant.helper.ProjectHelperImpl,);
Parameter(access$700,org.apache.tools.ant.helper.ProjectHelperImpl,);
Parameter(access$700,org.xml.sax.DocumentHandler,);
Parameter(access$700,org.apache.tools.ant.Target,);
Parameter(access$700,java.lang.String,);
Parameter(access$700,org.xml.sax.AttributeList,);
Parameter(access$800,org.apache.tools.ant.helper.ProjectHelperImpl,);
Parameter(access$800,java.lang.Object,);
Parameter(access$800,org.xml.sax.AttributeList,);
SuperClass(org.apache.tools.ant.ProjectHelper);
Generalization(org.apache.tools.ant.ProjectHelper);
Composition(org.apache.tools.ant.util.FileUtils);
Composition(org.apache.tools.ant.Project);
Composition(org.apache.tools.ant.Target);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,access$700 --> handleElement,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,access$800 --> configureId,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl,<init> --> implicitTarget,org.apache.tools.ant.helper.ProjectHelperImpl,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl,<init> --> implicitTarget,org.apache.tools.ant.helper.ProjectHelperImpl,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl,parse --> buildFile,org.apache.tools.ant.helper.ProjectHelperImpl,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl,parse --> FILE_UTILS,org.apache.tools.ant.helper.ProjectHelperImpl,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl,parse --> parser,org.apache.tools.ant.helper.ProjectHelperImpl,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl,parse --> project,org.apache.tools.ant.helper.ProjectHelperImpl,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl,parse --> buildFile,org.apache.tools.ant.helper.ProjectHelperImpl,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl,parse --> buildFileParent,org.apache.tools.ant.helper.ProjectHelperImpl,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl,parse --> parser,org.apache.tools.ant.helper.ProjectHelperImpl,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl,handleElement --> project,org.apache.tools.ant.helper.ProjectHelperImpl,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl,configureId --> project,org.apache.tools.ant.helper.ProjectHelperImpl,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl,access$000 --> parser,org.apache.tools.ant.helper.ProjectHelperImpl,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl,access$100 --> locator,org.apache.tools.ant.helper.ProjectHelperImpl,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl,access$200 --> project,org.apache.tools.ant.helper.ProjectHelperImpl,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl,access$300 --> FILE_UTILS,org.apache.tools.ant.helper.ProjectHelperImpl,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl,access$400 --> buildFileParent,org.apache.tools.ant.helper.ProjectHelperImpl,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl,access$500 --> buildFile,org.apache.tools.ant.helper.ProjectHelperImpl,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl,access$102 --> locator,org.apache.tools.ant.helper.ProjectHelperImpl,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl,access$600 --> implicitTarget,org.apache.tools.ant.helper.ProjectHelperImpl,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl,<clinit> --> FILE_UTILS,org.apache.tools.ant.helper.ProjectHelperImpl,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl,parse --> UNKNOWN_LOCATION,org.apache.tools.ant.Location,READ);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,<init> --> <init>,org.apache.tools.ant.ProjectHelper,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,<init> --> <init>,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,<init> --> setName,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,parse --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,parse --> getParser,org.apache.tools.ant.util.JAXPUtils,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,parse --> getXMLReader,org.apache.tools.ant.util.JAXPUtils,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,parse --> toURI,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,parse --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,parse --> <init>,org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,parse --> close$4,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,parse --> <init>$4,org.apache.tools.ant.Location,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,parse --> getLocation,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,parse --> setLocation,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,parse --> <init>$4,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,parse --> <init>$3,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,parse --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,handleElement --> <init>,org.apache.tools.ant.helper.ProjectHelperImpl$DescriptionHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,handleElement --> getDataTypeDefinitions,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,handleElement --> <init>,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,handleElement --> init,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,handleElement --> <init>,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,handleElement --> init,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,configureId --> addReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl,<clinit> --> getFileUtils,org.apache.tools.ant.util.FileUtils,);
EndClass 63
StartClass 64
Class(org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,N,N,Public);
Attribute(parent,org.apache.tools.ant.AntTypeDefinition,Private,N,N,);
Attribute(element,org.apache.tools.ant.UnknownElement,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setClass,void,Public,N,N);
Method(setClassName,void,Public,N,N);
Method(getClassName,java.lang.String,Public,N,N);
Method(setAdapterClass,void,Public,N,N);
Method(setAdaptToClass,void,Public,N,N);
Method(setClassLoader,void,Public,N,N);
Method(getClassLoader,java.lang.ClassLoader,Public,N,N);
Method(getExposedClass,java.lang.Class,Public,N,N);
Method(getTypeClass,java.lang.Class,Public,N,N);
Method(checkClass,void,Public,N,N);
Method(createObject,java.lang.Object,Public,N,N);
Method(getPreSets,org.apache.tools.ant.UnknownElement,Public,N,N);
Method(create,java.lang.Object,Public,N,N);
Method(sameDefinition,boolean,Public,N,N);
Method(similarDefinition,boolean,Public,N,N);
Parameter(<init>,org.apache.tools.ant.AntTypeDefinition,);
Parameter(<init>,org.apache.tools.ant.UnknownElement,);
Parameter(setClass,java.lang.Class,);
Parameter(setClassName,java.lang.String,);
Parameter(setAdapterClass,java.lang.Class,);
Parameter(setAdaptToClass,java.lang.Class,);
Parameter(setClassLoader,java.lang.ClassLoader,);
Parameter(getExposedClass,org.apache.tools.ant.Project,);
Parameter(getTypeClass,org.apache.tools.ant.Project,);
Parameter(checkClass,org.apache.tools.ant.Project,);
Parameter(createObject,org.apache.tools.ant.Project,);
Parameter(create,org.apache.tools.ant.Project,);
Parameter(sameDefinition,org.apache.tools.ant.AntTypeDefinition,);
Parameter(sameDefinition,org.apache.tools.ant.Project,);
Parameter(similarDefinition,org.apache.tools.ant.AntTypeDefinition,);
Parameter(similarDefinition,org.apache.tools.ant.Project,);
SuperClass(org.apache.tools.ant.AntTypeDefinition);
Generalization(org.apache.tools.ant.AntTypeDefinition);
Composition(org.apache.tools.ant.AntTypeDefinition);
Composition(org.apache.tools.ant.UnknownElement);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,<init> --> element,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,<init> --> parent,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,<init> --> parent,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,<init> --> element,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,getClassName --> parent,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,getClassLoader --> parent,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,getExposedClass --> parent,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,getTypeClass --> parent,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,checkClass --> parent,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,createObject --> parent,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,getPreSets --> element,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,sameDefinition --> parent,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,sameDefinition --> element,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,similarDefinition --> parent,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,similarDefinition --> element,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,READ);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,<init> --> <init>,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,<init> --> applyPreSet,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,setClass --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,setClassName --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,getClassName --> getClassName,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,setAdapterClass --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,setAdaptToClass --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,setClassLoader --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,getClassLoader --> getClassLoader,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,getExposedClass --> getExposedClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,getTypeClass --> getTypeClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,checkClass --> checkClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,createObject --> create,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,sameDefinition --> sameDefinition,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,sameDefinition --> similar,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,similarDefinition --> similarDefinition,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,similarDefinition --> similar,org.apache.tools.ant.UnknownElement,);
EndClass 64
StartClass 65
Class(org.apache.tools.ant.taskdefs.PreSetDef,N,N,Public);
Attribute(nestedTask,org.apache.tools.ant.UnknownElement,Private,N,N,);
Attribute(name,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setName,void,Public,N,N);
Method(addTask,void,Public,N,N);
Method(execute,void,Public,N,N);
Parameter(setName,java.lang.String,);
Parameter(addTask,org.apache.tools.ant.Task,);
SuperClass(org.apache.tools.ant.taskdefs.AntlibDefinition);
SuperClass(org.apache.tools.ant.Task);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.taskdefs.AntlibDefinition);
Realization(org.apache.tools.ant.TaskContainer);
Composition(org.apache.tools.ant.UnknownElement);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.PreSetDef,setName --> name,org.apache.tools.ant.taskdefs.PreSetDef,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.PreSetDef,addTask --> nestedTask,org.apache.tools.ant.taskdefs.PreSetDef,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.PreSetDef,addTask --> nestedTask,org.apache.tools.ant.taskdefs.PreSetDef,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.PreSetDef,execute --> nestedTask,org.apache.tools.ant.taskdefs.PreSetDef,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.PreSetDef,execute --> name,org.apache.tools.ant.taskdefs.PreSetDef,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.PreSetDef,execute --> name,org.apache.tools.ant.taskdefs.PreSetDef,WRITE);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef,<init> --> <init>,org.apache.tools.ant.taskdefs.AntlibDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef,addTask --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef,execute --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef,execute --> getURI,org.apache.tools.ant.taskdefs.AntlibDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef,execute --> genComponentName,org.apache.tools.ant.ProjectHelper,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef,execute --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef,execute --> getComponentHelper,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef,execute --> getNamespace,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef,execute --> getTag,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef,execute --> getDefinition,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef,execute --> <init>,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef,execute --> setName,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef,execute --> addDataTypeDefinition$2,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.taskdefs.PreSetDef,execute --> log$2,org.apache.tools.ant.Task,);
EndClass 65
StartClass 66
Class(org.apache.tools.ant.IntrospectionHelper$Creator,N,N,Public);
Attribute(nestedCreator,org.apache.tools.ant.IntrospectionHelper$NestedCreator,Private,N,N,);
Attribute(parent,java.lang.Object,Private,N,N,);
Attribute(project,org.apache.tools.ant.Project,Private,N,N,);
Attribute(nestedObject,java.lang.Object,Private,N,N,);
Attribute(polyType,java.lang.String,Private,N,N,);
Method(<init>,void,Private,N,N);
Method(setPolyType,void,Public,N,N);
Method(create,java.lang.Object,Public,N,N);
Method(getRealObject,java.lang.Object,Public,N,N);
Method(store,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>,org.apache.tools.ant.Project,);
Parameter(<init>,java.lang.Object,);
Parameter(<init>,org.apache.tools.ant.IntrospectionHelper$NestedCreator,);
Parameter(setPolyType,java.lang.String,);
Parameter(<init>$2,org.apache.tools.ant.Project,);
Parameter(<init>$2,java.lang.Object,);
Parameter(<init>$2,org.apache.tools.ant.IntrospectionHelper$NestedCreator,);
Parameter(<init>$2,org.apache.tools.ant.IntrospectionHelper$1,);
Composition(org.apache.tools.ant.IntrospectionHelper$NestedCreator);
Composition(org.apache.tools.ant.Project);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$Creator,<init>$2 --> <init>,org.apache.tools.ant.IntrospectionHelper$Creator,);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$Creator,<init> --> project,org.apache.tools.ant.IntrospectionHelper$Creator,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$Creator,<init> --> parent,org.apache.tools.ant.IntrospectionHelper$Creator,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$Creator,<init> --> nestedCreator,org.apache.tools.ant.IntrospectionHelper$Creator,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$Creator,setPolyType --> polyType,org.apache.tools.ant.IntrospectionHelper$Creator,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$Creator,create --> polyType,org.apache.tools.ant.IntrospectionHelper$Creator,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$Creator,create --> nestedCreator,org.apache.tools.ant.IntrospectionHelper$Creator,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$Creator,create --> project,org.apache.tools.ant.IntrospectionHelper$Creator,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$Creator,create --> nestedObject,org.apache.tools.ant.IntrospectionHelper$Creator,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$Creator,create --> parent,org.apache.tools.ant.IntrospectionHelper$Creator,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$Creator,create --> nestedObject,org.apache.tools.ant.IntrospectionHelper$Creator,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$Creator,getRealObject --> nestedCreator,org.apache.tools.ant.IntrospectionHelper$Creator,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$Creator,store --> nestedCreator,org.apache.tools.ant.IntrospectionHelper$Creator,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$Creator,store --> parent,org.apache.tools.ant.IntrospectionHelper$Creator,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$Creator,store --> nestedObject,org.apache.tools.ant.IntrospectionHelper$Creator,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$Creator,store --> polyType,org.apache.tools.ant.IntrospectionHelper$Creator,READ);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$Creator,create --> isPolyMorphic,org.apache.tools.ant.IntrospectionHelper$NestedCreator,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$Creator,create --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$Creator,create --> getComponentHelper,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$Creator,create --> createComponent$2,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$Creator,create --> create,org.apache.tools.ant.IntrospectionHelper$NestedCreator,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$Creator,create --> setProjectReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$Creator,create --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$Creator,getRealObject --> getRealObject,org.apache.tools.ant.IntrospectionHelper$NestedCreator,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$Creator,store --> store,org.apache.tools.ant.IntrospectionHelper$NestedCreator,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$Creator,store --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$Creator,store --> <init>$2,org.apache.tools.ant.BuildException,);
EndClass 66
StartClass 67
Class(org.apache.tools.ant.UnsupportedElementException,N,N,Public);
Attribute(element,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getElement,java.lang.String,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.String,);
SuperClass(org.apache.tools.ant.BuildException);
Generalization(org.apache.tools.ant.BuildException);
Call(ATTRIBUTE,org.apache.tools.ant.UnsupportedElementException,<init> --> element,org.apache.tools.ant.UnsupportedElementException,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.UnsupportedElementException,getElement --> element,org.apache.tools.ant.UnsupportedElementException,READ);
Call(METHOD,org.apache.tools.ant.UnsupportedElementException,<init> --> <init>$2,org.apache.tools.ant.BuildException,);
EndClass 67
StartClass 68
Class(org.apache.tools.ant.dispatch.DispatchUtils,N,N,Public);
Method(<init>,void,Public,N,N);
Method(execute,void,Public,Y,N);
Parameter(execute,java.lang.Object,);
Call(METHOD,org.apache.tools.ant.dispatch.DispatchUtils,execute --> getRealThing,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.dispatch.DispatchUtils,execute --> getActionParameterName,org.apache.tools.ant.dispatch.Dispatchable,);
Call(METHOD,org.apache.tools.ant.dispatch.DispatchUtils,execute --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.dispatch.DispatchUtils,execute --> setRealThing,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.dispatch.DispatchUtils,execute --> <init>$5,org.apache.tools.ant.BuildException,);
EndClass 68
StartClass 69
Class(org.apache.tools.ant.ComponentHelper$AntTypeTable,N,N,NA);
Attribute(project,org.apache.tools.ant.Project,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getDefinition,org.apache.tools.ant.AntTypeDefinition,Public,N,N);
Method(get,java.lang.Object,Public,N,N);
Method(create,java.lang.Object,Public,N,N);
Method(getTypeClass,java.lang.Class,Public,N,N);
Method(getExposedClass,java.lang.Class,Public,N,N);
Method(contains,boolean,Public,N,N);
Method(containsValue,boolean,Public,N,N);
Parameter(<init>,org.apache.tools.ant.Project,);
Parameter(getDefinition,java.lang.String,);
Parameter(get,java.lang.Object,);
Parameter(create,java.lang.String,);
Parameter(getTypeClass,java.lang.String,);
Parameter(getExposedClass,java.lang.String,);
Parameter(contains,java.lang.Object,);
Parameter(containsValue,java.lang.Object,);
Composition(org.apache.tools.ant.Project);
Call(METHOD,org.apache.tools.ant.ComponentHelper$AntTypeTable,get --> getTypeClass,org.apache.tools.ant.ComponentHelper$AntTypeTable,);
Call(METHOD,org.apache.tools.ant.ComponentHelper$AntTypeTable,create --> getDefinition,org.apache.tools.ant.ComponentHelper$AntTypeTable,);
Call(METHOD,org.apache.tools.ant.ComponentHelper$AntTypeTable,getTypeClass --> getDefinition,org.apache.tools.ant.ComponentHelper$AntTypeTable,);
Call(METHOD,org.apache.tools.ant.ComponentHelper$AntTypeTable,getExposedClass --> getDefinition,org.apache.tools.ant.ComponentHelper$AntTypeTable,);
Call(METHOD,org.apache.tools.ant.ComponentHelper$AntTypeTable,containsValue --> contains,org.apache.tools.ant.ComponentHelper$AntTypeTable,);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper$AntTypeTable,<init> --> project,org.apache.tools.ant.ComponentHelper$AntTypeTable,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper$AntTypeTable,create --> project,org.apache.tools.ant.ComponentHelper$AntTypeTable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper$AntTypeTable,getTypeClass --> project,org.apache.tools.ant.ComponentHelper$AntTypeTable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper$AntTypeTable,getExposedClass --> project,org.apache.tools.ant.ComponentHelper$AntTypeTable,READ);
Call(ATTRIBUTE,org.apache.tools.ant.ComponentHelper$AntTypeTable,contains --> project,org.apache.tools.ant.ComponentHelper$AntTypeTable,READ);
Call(METHOD,org.apache.tools.ant.ComponentHelper$AntTypeTable,create --> create,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper$AntTypeTable,getTypeClass --> getTypeClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper$AntTypeTable,getExposedClass --> getExposedClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.ComponentHelper$AntTypeTable,contains --> getExposedClass,org.apache.tools.ant.AntTypeDefinition,);
EndClass 69
StartClass 70
Class(org.apache.tools.ant.AntTypeDefinition,N,N,Public);
Attribute(name,java.lang.String,Private,N,N,);
Attribute(clazz,java.lang.Class,Private,N,N,);
Attribute(adapterClass,java.lang.Class,Private,N,N,);
Attribute(adaptToClass,java.lang.Class,Private,N,N,);
Attribute(className,java.lang.String,Private,N,N,);
Attribute(classLoader,java.lang.ClassLoader,Private,N,N,);
Attribute(class$org$apache$tools$ant$Project,java.lang.Class,Public,Y,N,);
Method(<init>,void,Public,N,N);
Method(setName,void,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(setClass,void,Public,N,N);
Method(setClassName,void,Public,N,N);
Method(getClassName,java.lang.String,Public,N,N);
Method(setAdapterClass,void,Public,N,N);
Method(setAdaptToClass,void,Public,N,N);
Method(setClassLoader,void,Public,N,N);
Method(getClassLoader,java.lang.ClassLoader,Public,N,N);
Method(getExposedClass,java.lang.Class,Public,N,N);
Method(getTypeClass,java.lang.Class,Public,N,N);
Method(innerGetTypeClass,java.lang.Class,Public,N,N);
Method(create,java.lang.Object,Public,N,N);
Method(icreate,java.lang.Object,Private,N,N);
Method(checkClass,void,Public,N,N);
Method(createAndSet,java.lang.Object,Private,N,N);
Method(innerCreateAndSet,java.lang.Object,Public,N,N);
Method(sameDefinition,boolean,Public,N,N);
Method(similarDefinition,boolean,Public,N,N);
Method(extractClassname,java.lang.String,Private,N,N);
Method(class$,java.lang.Class,Public,Y,N);
Parameter(setName,java.lang.String,);
Parameter(setClass,java.lang.Class,);
Parameter(setClassName,java.lang.String,);
Parameter(setAdapterClass,java.lang.Class,);
Parameter(setAdaptToClass,java.lang.Class,);
Parameter(setClassLoader,java.lang.ClassLoader,);
Parameter(getExposedClass,org.apache.tools.ant.Project,);
Parameter(getTypeClass,org.apache.tools.ant.Project,);
Parameter(create,org.apache.tools.ant.Project,);
Parameter(icreate,org.apache.tools.ant.Project,);
Parameter(checkClass,org.apache.tools.ant.Project,);
Parameter(createAndSet,org.apache.tools.ant.Project,);
Parameter(createAndSet,java.lang.Class,);
Parameter(innerCreateAndSet,java.lang.Class,);
Parameter(innerCreateAndSet,org.apache.tools.ant.Project,);
Parameter(sameDefinition,org.apache.tools.ant.AntTypeDefinition,);
Parameter(sameDefinition,org.apache.tools.ant.Project,);
Parameter(similarDefinition,org.apache.tools.ant.AntTypeDefinition,);
Parameter(similarDefinition,org.apache.tools.ant.Project,);
Parameter(extractClassname,java.lang.Class,);
Parameter(class$,java.lang.String,);
SubClass(org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition);
Call(METHOD,org.apache.tools.ant.AntTypeDefinition,getExposedClass --> getTypeClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.AntTypeDefinition,getTypeClass --> innerGetTypeClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.AntTypeDefinition,create --> icreate,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.AntTypeDefinition,icreate --> getTypeClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.AntTypeDefinition,icreate --> createAndSet,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.AntTypeDefinition,checkClass --> getTypeClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.AntTypeDefinition,checkClass --> getName,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.AntTypeDefinition,checkClass --> createAndSet,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.AntTypeDefinition,createAndSet --> innerCreateAndSet,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.AntTypeDefinition,innerCreateAndSet --> class$,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.AntTypeDefinition,sameDefinition --> getTypeClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.AntTypeDefinition,sameDefinition --> getExposedClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.AntTypeDefinition,similarDefinition --> getClassName,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.AntTypeDefinition,similarDefinition --> extractClassname,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.AntTypeDefinition,similarDefinition --> getClassLoader,org.apache.tools.ant.AntTypeDefinition,);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,setName --> name,org.apache.tools.ant.AntTypeDefinition,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,getName --> name,org.apache.tools.ant.AntTypeDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,setClass --> classLoader,org.apache.tools.ant.AntTypeDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,setClass --> className,org.apache.tools.ant.AntTypeDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,setClass --> clazz,org.apache.tools.ant.AntTypeDefinition,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,setClass --> classLoader,org.apache.tools.ant.AntTypeDefinition,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,setClass --> className,org.apache.tools.ant.AntTypeDefinition,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,setClassName --> className,org.apache.tools.ant.AntTypeDefinition,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,getClassName --> className,org.apache.tools.ant.AntTypeDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,setAdapterClass --> adapterClass,org.apache.tools.ant.AntTypeDefinition,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,setAdaptToClass --> adaptToClass,org.apache.tools.ant.AntTypeDefinition,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,setClassLoader --> classLoader,org.apache.tools.ant.AntTypeDefinition,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,getClassLoader --> classLoader,org.apache.tools.ant.AntTypeDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,getExposedClass --> adaptToClass,org.apache.tools.ant.AntTypeDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,getExposedClass --> adapterClass,org.apache.tools.ant.AntTypeDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,getTypeClass --> name,org.apache.tools.ant.AntTypeDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,getTypeClass --> className,org.apache.tools.ant.AntTypeDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,innerGetTypeClass --> clazz,org.apache.tools.ant.AntTypeDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,innerGetTypeClass --> classLoader,org.apache.tools.ant.AntTypeDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,innerGetTypeClass --> className,org.apache.tools.ant.AntTypeDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,innerGetTypeClass --> clazz,org.apache.tools.ant.AntTypeDefinition,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,icreate --> adapterClass,org.apache.tools.ant.AntTypeDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,icreate --> adaptToClass,org.apache.tools.ant.AntTypeDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,checkClass --> clazz,org.apache.tools.ant.AntTypeDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,checkClass --> adapterClass,org.apache.tools.ant.AntTypeDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,checkClass --> adaptToClass,org.apache.tools.ant.AntTypeDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,checkClass --> clazz,org.apache.tools.ant.AntTypeDefinition,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,createAndSet --> name,org.apache.tools.ant.AntTypeDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,innerCreateAndSet --> class$org$apache$tools$ant$Project,org.apache.tools.ant.AntTypeDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,innerCreateAndSet --> class$org$apache$tools$ant$Project,org.apache.tools.ant.AntTypeDefinition,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,sameDefinition --> adapterClass,org.apache.tools.ant.AntTypeDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,sameDefinition --> adaptToClass,org.apache.tools.ant.AntTypeDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,similarDefinition --> adapterClass,org.apache.tools.ant.AntTypeDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntTypeDefinition,similarDefinition --> adaptToClass,org.apache.tools.ant.AntTypeDefinition,READ);
Call(METHOD,org.apache.tools.ant.AntTypeDefinition,getTypeClass --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.AntTypeDefinition,icreate --> setProxy,org.apache.tools.ant.TypeAdapter,);
Call(METHOD,org.apache.tools.ant.AntTypeDefinition,checkClass --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.AntTypeDefinition,checkClass --> checkProxyClass,org.apache.tools.ant.TypeAdapter,);
Call(METHOD,org.apache.tools.ant.AntTypeDefinition,createAndSet --> <init>$3,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.AntTypeDefinition,createAndSet --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.AntTypeDefinition,innerCreateAndSet --> setProjectReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.AntTypeDefinition,similarDefinition --> getClasspath,org.apache.tools.ant.AntClassLoader,);
EndClass 70
StartClass 71
Class(org.apache.tools.ant.taskdefs.Typedef,N,N,Public);
Method(<init>,void,Public,N,N);
SuperClass(org.apache.tools.ant.taskdefs.Definer);
SuperClass(org.apache.tools.ant.taskdefs.DefBase);
SuperClass(org.apache.tools.ant.taskdefs.AntlibDefinition);
SuperClass(org.apache.tools.ant.Task);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.taskdefs.Definer);
Call(METHOD,org.apache.tools.ant.taskdefs.Typedef,<init> --> <init>,org.apache.tools.ant.taskdefs.Definer,);
EndClass 71
StartClass 72
Class(org.apache.tools.ant.taskdefs.Definer$OnError,N,N,Public);
Attribute(FAIL,int,Public,Y,Y,);
Attribute(REPORT,int,Public,Y,Y,);
Attribute(IGNORE,int,Public,Y,Y,);
Attribute(FAIL_ALL,int,Public,Y,Y,);
Attribute(POLICY_FAIL,java.lang.String,Public,Y,Y,);
Attribute(POLICY_REPORT,java.lang.String,Public,Y,Y,);
Attribute(POLICY_IGNORE,java.lang.String,Public,Y,Y,);
Attribute(POLICY_FAILALL,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getValues,java.lang.String[],Public,N,N);
Parameter(<init>$2,java.lang.String,);
SuperClass(org.apache.tools.ant.types.EnumeratedAttribute);
Generalization(org.apache.tools.ant.types.EnumeratedAttribute);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer$OnError,<init> --> <init>,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer$OnError,<init>$2 --> <init>,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer$OnError,<init>$2 --> setValue,org.apache.tools.ant.types.EnumeratedAttribute,);
EndClass 72
StartClass 73
Class(org.apache.tools.ant.taskdefs.Definer,N,Y,Public);
Attribute(ANTLIB_XML,java.lang.String,Private,Y,Y,);
Attribute(resourceStack,org.apache.tools.ant.taskdefs.Definer$ResourceStack,Private,Y,N,);
Attribute(name,java.lang.String,Private,N,N,);
Attribute(classname,java.lang.String,Private,N,N,);
Attribute(file,java.io.File,Private,N,N,);
Attribute(resource,java.lang.String,Private,N,N,);
Attribute(format,int,Private,N,N,);
Attribute(definerSet,boolean,Private,N,N,);
Attribute(onError,int,Private,N,N,);
Attribute(adapter,java.lang.String,Private,N,N,);
Attribute(adaptTo,java.lang.String,Private,N,N,);
Attribute(adapterClass,java.lang.Class,Private,N,N,);
Attribute(adaptToClass,java.lang.Class,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setOnError,void,Public,N,N);
Method(setFormat,void,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(getFile,java.io.File,Public,N,N);
Method(getResource,java.lang.String,Public,N,N);
Method(execute,void,Public,N,N);
Method(makeResourceFromURI,java.lang.String,Public,Y,N);
Method(fileToURL,java.net.URL,Private,N,N);
Method(resourceToURLs,java.util.Enumeration,Private,N,N);
Method(loadProperties,void,Protected,N,N);
Method(loadAntlib,void,Private,N,N);
Method(setFile,void,Public,N,N);
Method(setResource,void,Public,N,N);
Method(setAntlib,void,Public,N,N);
Method(setName,void,Public,N,N);
Method(getClassname,java.lang.String,Public,N,N);
Method(setClassname,void,Public,N,N);
Method(setAdapter,void,Public,N,N);
Method(setAdapterClass,void,Protected,N,N);
Method(setAdaptTo,void,Public,N,N);
Method(setAdaptToClass,void,Protected,N,N);
Method(addDefinition,void,Protected,N,N);
Method(tooManyDefinitions,void,Private,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(setOnError,org.apache.tools.ant.taskdefs.Definer$OnError,);
Parameter(setFormat,org.apache.tools.ant.taskdefs.Definer$Format,);
Parameter(makeResourceFromURI,java.lang.String,);
Parameter(resourceToURLs,java.lang.ClassLoader,);
Parameter(loadProperties,java.lang.ClassLoader,);
Parameter(loadProperties,java.net.URL,);
Parameter(loadAntlib,java.lang.ClassLoader,);
Parameter(loadAntlib,java.net.URL,);
Parameter(setFile,java.io.File,);
Parameter(setResource,java.lang.String,);
Parameter(setAntlib,java.lang.String,);
Parameter(setName,java.lang.String,);
Parameter(setClassname,java.lang.String,);
Parameter(setAdapter,java.lang.String,);
Parameter(setAdapterClass,java.lang.Class,);
Parameter(setAdaptTo,java.lang.String,);
Parameter(setAdaptToClass,java.lang.Class,);
Parameter(addDefinition,java.lang.ClassLoader,);
Parameter(addDefinition,java.lang.String,);
Parameter(addDefinition,java.lang.String,);
SuperClass(org.apache.tools.ant.taskdefs.DefBase);
SuperClass(org.apache.tools.ant.taskdefs.AntlibDefinition);
SuperClass(org.apache.tools.ant.Task);
SuperClass(org.apache.tools.ant.ProjectComponent);
SubClass(org.apache.tools.ant.taskdefs.Typedef);
Generalization(org.apache.tools.ant.taskdefs.DefBase);
Composition(org.apache.tools.ant.taskdefs.Definer$ResourceStack);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,execute --> makeResourceFromURI,org.apache.tools.ant.taskdefs.Definer,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,execute --> setResource,org.apache.tools.ant.taskdefs.Definer,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,execute --> addDefinition,org.apache.tools.ant.taskdefs.Definer,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,execute --> fileToURL,org.apache.tools.ant.taskdefs.Definer,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,execute --> resourceToURLs,org.apache.tools.ant.taskdefs.Definer,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,execute --> loadProperties,org.apache.tools.ant.taskdefs.Definer,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,execute --> loadAntlib,org.apache.tools.ant.taskdefs.Definer,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,loadProperties --> addDefinition,org.apache.tools.ant.taskdefs.Definer,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,setFile --> tooManyDefinitions,org.apache.tools.ant.taskdefs.Definer,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,setResource --> tooManyDefinitions,org.apache.tools.ant.taskdefs.Definer,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,setAntlib --> tooManyDefinitions,org.apache.tools.ant.taskdefs.Definer,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,setName --> tooManyDefinitions,org.apache.tools.ant.taskdefs.Definer,);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,<init> --> format,org.apache.tools.ant.taskdefs.Definer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,<init> --> definerSet,org.apache.tools.ant.taskdefs.Definer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,<init> --> onError,org.apache.tools.ant.taskdefs.Definer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,setOnError --> onError,org.apache.tools.ant.taskdefs.Definer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,setFormat --> format,org.apache.tools.ant.taskdefs.Definer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,getName --> name,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,getFile --> file,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,getResource --> resource,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,execute --> definerSet,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,execute --> name,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,execute --> classname,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,execute --> file,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,execute --> format,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,execute --> resourceStack,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,fileToURL --> file,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,fileToURL --> onError,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,resourceToURLs --> resource,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,resourceToURLs --> onError,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,loadProperties --> name,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,loadProperties --> classname,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,loadProperties --> name,org.apache.tools.ant.taskdefs.Definer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,loadProperties --> classname,org.apache.tools.ant.taskdefs.Definer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,setFile --> definerSet,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,setFile --> definerSet,org.apache.tools.ant.taskdefs.Definer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,setFile --> file,org.apache.tools.ant.taskdefs.Definer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,setResource --> definerSet,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,setResource --> definerSet,org.apache.tools.ant.taskdefs.Definer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,setResource --> resource,org.apache.tools.ant.taskdefs.Definer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,setAntlib --> definerSet,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,setAntlib --> resource,org.apache.tools.ant.taskdefs.Definer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,setAntlib --> definerSet,org.apache.tools.ant.taskdefs.Definer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,setName --> definerSet,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,setName --> definerSet,org.apache.tools.ant.taskdefs.Definer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,setName --> name,org.apache.tools.ant.taskdefs.Definer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,getClassname --> classname,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,setClassname --> classname,org.apache.tools.ant.taskdefs.Definer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,setAdapter --> adapter,org.apache.tools.ant.taskdefs.Definer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,setAdapterClass --> adapterClass,org.apache.tools.ant.taskdefs.Definer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,setAdaptTo --> adaptTo,org.apache.tools.ant.taskdefs.Definer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,setAdaptToClass --> adaptToClass,org.apache.tools.ant.taskdefs.Definer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,addDefinition --> onError,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,addDefinition --> adapter,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,addDefinition --> adaptTo,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,addDefinition --> adapterClass,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,addDefinition --> adaptToClass,org.apache.tools.ant.taskdefs.Definer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,addDefinition --> adapterClass,org.apache.tools.ant.taskdefs.Definer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,addDefinition --> adaptToClass,org.apache.tools.ant.taskdefs.Definer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer,<clinit> --> resourceStack,org.apache.tools.ant.taskdefs.Definer,WRITE);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,<init> --> <init>,org.apache.tools.ant.taskdefs.DefBase,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,setOnError --> getIndex,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,setFormat --> getIndex,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,execute --> createLoader,org.apache.tools.ant.taskdefs.DefBase,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,execute --> getURI,org.apache.tools.ant.taskdefs.AntlibDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,execute --> getTaskName,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,execute --> getLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,execute --> <init>$6,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,execute --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,execute --> <init>,org.apache.tools.ant.taskdefs.Definer$1,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,execute --> getStack,org.apache.tools.ant.taskdefs.Definer$ResourceStack,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,execute --> log$2,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,fileToURL --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,fileToURL --> log$2,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,resourceToURLs --> getLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,resourceToURLs --> <init>$4,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,resourceToURLs --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,resourceToURLs --> log$2,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,loadProperties --> log$2,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,loadProperties --> close$4,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,loadProperties --> getLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,loadProperties --> <init>$7,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,loadAntlib --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,loadAntlib --> getURI,org.apache.tools.ant.taskdefs.AntlibDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,loadAntlib --> createAntlib,org.apache.tools.ant.taskdefs.Antlib,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,loadAntlib --> setClassLoader,org.apache.tools.ant.taskdefs.Antlib,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,loadAntlib --> setURI,org.apache.tools.ant.taskdefs.Antlib,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,loadAntlib --> execute,org.apache.tools.ant.taskdefs.Antlib,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,loadAntlib --> getLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,loadAntlib --> addLocationToBuildException,org.apache.tools.ant.ProjectHelper,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,setAntlib --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,setAntlib --> setURI,org.apache.tools.ant.taskdefs.AntlibDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,addDefinition --> getURI,org.apache.tools.ant.taskdefs.AntlibDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,addDefinition --> genComponentName,org.apache.tools.ant.ProjectHelper,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,addDefinition --> <init>,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,addDefinition --> setName,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,addDefinition --> setClassName,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,addDefinition --> setClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,addDefinition --> setAdapterClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,addDefinition --> setAdaptToClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,addDefinition --> setClassLoader,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,addDefinition --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,addDefinition --> checkClass,org.apache.tools.ant.AntTypeDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,addDefinition --> getComponentHelper,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,addDefinition --> addDataTypeDefinition$2,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,addDefinition --> getTaskName,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,addDefinition --> getLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,addDefinition --> <init>$4,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,addDefinition --> getLocation,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,addDefinition --> log$2,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,tooManyDefinitions --> getLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,tooManyDefinitions --> <init>$6,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer,<clinit> --> <init>$2,org.apache.tools.ant.taskdefs.Definer$ResourceStack,);
EndClass 73
StartClass 74
Class(org.apache.tools.ant.types.FilterSet$OnMissing,N,N,Public);
Attribute(VALUES,java.lang.String[],Private,Y,Y,);
Attribute(FAIL,org.apache.tools.ant.types.FilterSet$OnMissing,Public,Y,Y,);
Attribute(WARN,org.apache.tools.ant.types.FilterSet$OnMissing,Public,Y,Y,);
Attribute(IGNORE,org.apache.tools.ant.types.FilterSet$OnMissing,Public,Y,Y,);
Attribute(FAIL_INDEX,int,Private,Y,Y,);
Attribute(WARN_INDEX,int,Private,Y,Y,);
Attribute(IGNORE_INDEX,int,Private,Y,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getValues,java.lang.String[],Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>$2,java.lang.String,);
SuperClass(org.apache.tools.ant.types.EnumeratedAttribute);
Generalization(org.apache.tools.ant.types.EnumeratedAttribute);
Composition(org.apache.tools.ant.types.FilterSet$OnMissing);
Call(METHOD,org.apache.tools.ant.types.FilterSet$OnMissing,<clinit> --> <init>$2,org.apache.tools.ant.types.FilterSet$OnMissing,);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet$OnMissing,getValues --> VALUES,org.apache.tools.ant.types.FilterSet$OnMissing,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet$OnMissing,<clinit> --> VALUES,org.apache.tools.ant.types.FilterSet$OnMissing,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet$OnMissing,<clinit> --> FAIL,org.apache.tools.ant.types.FilterSet$OnMissing,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet$OnMissing,<clinit> --> WARN,org.apache.tools.ant.types.FilterSet$OnMissing,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet$OnMissing,<clinit> --> IGNORE,org.apache.tools.ant.types.FilterSet$OnMissing,WRITE);
Call(METHOD,org.apache.tools.ant.types.FilterSet$OnMissing,<init> --> <init>,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.FilterSet$OnMissing,<init>$2 --> <init>,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.FilterSet$OnMissing,<init>$2 --> setValue,org.apache.tools.ant.types.EnumeratedAttribute,);
EndClass 74
StartClass 75
Class(org.apache.tools.ant.types.FilterSet$FiltersFile,N,N,Public);
Attribute(this$0,org.apache.tools.ant.types.FilterSet,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(setFile,void,Public,N,N);
Parameter(<init>,org.apache.tools.ant.types.FilterSet,);
Parameter(setFile,java.io.File,);
Composition(org.apache.tools.ant.types.FilterSet);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet$FiltersFile,<init> --> this$0,org.apache.tools.ant.types.FilterSet$FiltersFile,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterSet$FiltersFile,setFile --> this$0,org.apache.tools.ant.types.FilterSet$FiltersFile,READ);
Call(METHOD,org.apache.tools.ant.types.FilterSet$FiltersFile,setFile --> access$000,org.apache.tools.ant.types.FilterSet,);
EndClass 75
StartClass 76
Class(org.apache.tools.ant.AntClassLoader$ResourceEnumeration,N,N,NA);
Attribute(resourceName,java.lang.String,Private,N,N,);
Attribute(pathElementsIndex,int,Private,N,N,);
Attribute(nextResource,java.net.URL,Private,N,N,);
Attribute(this$0,org.apache.tools.ant.AntClassLoader,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(hasMoreElements,boolean,Public,N,N);
Method(nextElement,java.lang.Object,Public,N,N);
Method(findNextResource,void,Private,N,N);
Parameter(<init>,org.apache.tools.ant.AntClassLoader,);
Parameter(<init>,java.lang.String,);
Composition(org.apache.tools.ant.AntClassLoader);
Call(METHOD,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,<init> --> findNextResource,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,);
Call(METHOD,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,nextElement --> findNextResource,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,<init> --> this$0,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,<init> --> resourceName,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,<init> --> pathElementsIndex,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,hasMoreElements --> nextResource,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,nextElement --> nextResource,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,findNextResource --> pathElementsIndex,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,findNextResource --> this$0,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,findNextResource --> resourceName,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,READ);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,findNextResource --> pathElementsIndex,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,findNextResource --> nextResource,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,WRITE);
Call(METHOD,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,findNextResource --> access$000,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.AntClassLoader$ResourceEnumeration,findNextResource --> getResourceURL,org.apache.tools.ant.AntClassLoader,);
EndClass 76
StartClass 77
Class(org.apache.tools.ant.taskdefs.ManifestException,N,N,Public);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.lang.String,);
EndClass 77
StartClass 78
Class(org.apache.tools.ant.taskdefs.Manifest,N,N,Public);
Attribute(ATTRIBUTE_MANIFEST_VERSION,java.lang.String,Public,Y,Y,);
Attribute(ATTRIBUTE_SIGNATURE_VERSION,java.lang.String,Public,Y,Y,);
Attribute(ATTRIBUTE_NAME,java.lang.String,Public,Y,Y,);
Attribute(ATTRIBUTE_FROM,java.lang.String,Public,Y,Y,);
Attribute(ATTRIBUTE_CLASSPATH,java.lang.String,Public,Y,Y,);
Attribute(DEFAULT_MANIFEST_VERSION,java.lang.String,Public,Y,Y,);
Attribute(MAX_LINE_LENGTH,int,Public,Y,Y,);
Attribute(MAX_SECTION_LENGTH,int,Public,Y,Y,);
Attribute(EOL,java.lang.String,Public,Y,Y,);
Attribute(ERROR_FROM_FORBIDDEN,java.lang.String,Public,Y,Y,);
Attribute(JAR_ENCODING,java.lang.String,Public,Y,Y,);
Attribute(manifestVersion,java.lang.String,Private,N,N,);
Attribute(mainSection,org.apache.tools.ant.taskdefs.Manifest$Section,Private,N,N,);
Attribute(sections,java.util.Hashtable,Private,N,N,);
Attribute(sectionIndex,java.util.Vector,Private,N,N,);
Attribute(class$org$apache$tools$ant$taskdefs$Manifest,java.lang.Class,Public,Y,N,);
Method(getDefaultManifest,org.apache.tools.ant.taskdefs.Manifest,Public,Y,N);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(addConfiguredSection,void,Public,N,N);
Method(addConfiguredAttribute,void,Public,N,N);
Method(merge,void,Public,N,N);
Method(merge$2,void,Public,N,N);
Method(write,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(getWarnings,java.util.Enumeration,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(getManifestVersion,java.lang.String,Public,N,N);
Method(getMainSection,org.apache.tools.ant.taskdefs.Manifest$Section,Public,N,N);
Method(getSection,org.apache.tools.ant.taskdefs.Manifest$Section,Public,N,N);
Method(getSectionNames,java.util.Enumeration,Public,N,N);
Method(class$,java.lang.Class,Public,Y,N);
Parameter(<init>$2,java.io.Reader,);
Parameter(addConfiguredSection,org.apache.tools.ant.taskdefs.Manifest$Section,);
Parameter(addConfiguredAttribute,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Parameter(merge,org.apache.tools.ant.taskdefs.Manifest,);
Parameter(merge$2,org.apache.tools.ant.taskdefs.Manifest,);
Parameter(merge$2,boolean,);
Parameter(write,java.io.PrintWriter,);
Parameter(equals,java.lang.Object,);
Parameter(getSection,java.lang.String,);
Parameter(class$,java.lang.String,);
Composition(org.apache.tools.ant.taskdefs.Manifest$Section);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,getDefaultManifest --> class$,org.apache.tools.ant.taskdefs.Manifest,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,getDefaultManifest --> <init>$2,org.apache.tools.ant.taskdefs.Manifest,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,getDefaultManifest --> getMainSection,org.apache.tools.ant.taskdefs.Manifest,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,<init>$2 --> addConfiguredSection,org.apache.tools.ant.taskdefs.Manifest,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,merge --> merge$2,org.apache.tools.ant.taskdefs.Manifest,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,merge$2 --> getSectionNames,org.apache.tools.ant.taskdefs.Manifest,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,merge$2 --> addConfiguredSection,org.apache.tools.ant.taskdefs.Manifest,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,write --> getSection,org.apache.tools.ant.taskdefs.Manifest,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,toString --> write,org.apache.tools.ant.taskdefs.Manifest,);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,getDefaultManifest --> class$org$apache$tools$ant$taskdefs$Manifest,org.apache.tools.ant.taskdefs.Manifest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,getDefaultManifest --> class$org$apache$tools$ant$taskdefs$Manifest,org.apache.tools.ant.taskdefs.Manifest,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,<init> --> manifestVersion,org.apache.tools.ant.taskdefs.Manifest,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,<init> --> mainSection,org.apache.tools.ant.taskdefs.Manifest,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,<init> --> sections,org.apache.tools.ant.taskdefs.Manifest,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,<init> --> sectionIndex,org.apache.tools.ant.taskdefs.Manifest,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,<init>$2 --> mainSection,org.apache.tools.ant.taskdefs.Manifest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,<init>$2 --> manifestVersion,org.apache.tools.ant.taskdefs.Manifest,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,<init>$2 --> mainSection,org.apache.tools.ant.taskdefs.Manifest,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,<init>$2 --> sections,org.apache.tools.ant.taskdefs.Manifest,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,<init>$2 --> sectionIndex,org.apache.tools.ant.taskdefs.Manifest,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,addConfiguredSection --> sections,org.apache.tools.ant.taskdefs.Manifest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,addConfiguredSection --> sectionIndex,org.apache.tools.ant.taskdefs.Manifest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,addConfiguredAttribute --> mainSection,org.apache.tools.ant.taskdefs.Manifest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,addConfiguredAttribute --> manifestVersion,org.apache.tools.ant.taskdefs.Manifest,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,merge$2 --> mainSection,org.apache.tools.ant.taskdefs.Manifest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,merge$2 --> manifestVersion,org.apache.tools.ant.taskdefs.Manifest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,merge$2 --> sections,org.apache.tools.ant.taskdefs.Manifest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,merge$2 --> mainSection,org.apache.tools.ant.taskdefs.Manifest,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,merge$2 --> manifestVersion,org.apache.tools.ant.taskdefs.Manifest,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,write --> manifestVersion,org.apache.tools.ant.taskdefs.Manifest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,write --> mainSection,org.apache.tools.ant.taskdefs.Manifest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,write --> sectionIndex,org.apache.tools.ant.taskdefs.Manifest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,getWarnings --> mainSection,org.apache.tools.ant.taskdefs.Manifest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,getWarnings --> sections,org.apache.tools.ant.taskdefs.Manifest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,hashCode --> manifestVersion,org.apache.tools.ant.taskdefs.Manifest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,hashCode --> mainSection,org.apache.tools.ant.taskdefs.Manifest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,hashCode --> sections,org.apache.tools.ant.taskdefs.Manifest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,equals --> manifestVersion,org.apache.tools.ant.taskdefs.Manifest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,equals --> mainSection,org.apache.tools.ant.taskdefs.Manifest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,equals --> sections,org.apache.tools.ant.taskdefs.Manifest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,getManifestVersion --> manifestVersion,org.apache.tools.ant.taskdefs.Manifest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,getMainSection --> mainSection,org.apache.tools.ant.taskdefs.Manifest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,getSection --> sections,org.apache.tools.ant.taskdefs.Manifest,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest,getSectionNames --> sectionIndex,org.apache.tools.ant.taskdefs.Manifest,READ);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,getDefaultManifest --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,getDefaultManifest --> <init>$3,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,getDefaultManifest --> access$000,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,getDefaultManifest --> close$2,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,getDefaultManifest --> close$4,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,getDefaultManifest --> <init>$3,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,<init> --> <init>,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,<init>$2 --> <init>,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,<init>$2 --> read,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,<init>$2 --> getAttributeValue,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,<init>$2 --> removeAttribute,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,<init>$2 --> <init>$2,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,<init>$2 --> getName,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,<init>$2 --> <init>,org.apache.tools.ant.taskdefs.ManifestException,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,<init>$2 --> getValue,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,<init>$2 --> addAttributeAndCheck,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,<init>$2 --> setName,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,addConfiguredSection --> getName,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,addConfiguredSection --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,addConfiguredAttribute --> getKey,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,addConfiguredAttribute --> getValue,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,addConfiguredAttribute --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,addConfiguredAttribute --> addConfiguredAttribute,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,merge$2 --> clone,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,merge$2 --> merge,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,write --> getAttributeValue,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,write --> removeAttribute,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,write --> write,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,write --> <init>$3,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,write --> addConfiguredAttribute,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,getWarnings --> getWarnings,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,hashCode --> hashCode,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest,equals --> equals,org.apache.tools.ant.taskdefs.Manifest$Section,);
EndClass 78
StartClass 79
Class(org.apache.tools.ant.taskdefs.Manifest$Section,N,N,Public);
Attribute(warnings,java.util.Vector,Private,N,N,);
Attribute(name,java.lang.String,Private,N,N,);
Attribute(attributes,java.util.Hashtable,Private,N,N,);
Attribute(attributeIndex,java.util.Vector,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setName,void,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(read,java.lang.String,Public,N,N);
Method(merge,void,Public,N,N);
Method(write,void,Public,N,N);
Method(getAttribute,org.apache.tools.ant.taskdefs.Manifest$Attribute,Public,N,N);
Method(getAttributeKeys,java.util.Enumeration,Public,N,N);
Method(getAttributeValue,java.lang.String,Public,N,N);
Method(removeAttribute,void,Public,N,N);
Method(addConfiguredAttribute,void,Public,N,N);
Method(addAttributeAndCheck,java.lang.String,Public,N,N);
Method(clone,java.lang.Object,Public,N,N);
Method(storeAttribute,void,Private,N,N);
Method(getWarnings,java.util.Enumeration,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(access$000,void,Public,Y,N);
Parameter(setName,java.lang.String,);
Parameter(read,java.io.BufferedReader,);
Parameter(merge,org.apache.tools.ant.taskdefs.Manifest$Section,);
Parameter(write,java.io.PrintWriter,);
Parameter(getAttribute,java.lang.String,);
Parameter(getAttributeValue,java.lang.String,);
Parameter(removeAttribute,java.lang.String,);
Parameter(addConfiguredAttribute,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Parameter(addAttributeAndCheck,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Parameter(storeAttribute,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Parameter(equals,java.lang.Object,);
Parameter(access$000,org.apache.tools.ant.taskdefs.Manifest$Section,);
Parameter(access$000,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,read --> addAttributeAndCheck,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,read --> getAttribute,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,merge --> getName,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,merge --> getAttributeKeys,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,merge --> getAttribute,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,merge --> storeAttribute,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,write --> getAttributeKeys,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,write --> getAttribute,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,getAttributeValue --> getAttribute,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,addConfiguredAttribute --> addAttributeAndCheck,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,addAttributeAndCheck --> storeAttribute,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,clone --> <init>,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,clone --> setName,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,clone --> getAttributeKeys,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,clone --> getAttribute,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,clone --> storeAttribute,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,access$000 --> storeAttribute,org.apache.tools.ant.taskdefs.Manifest$Section,);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Section,<init> --> warnings,org.apache.tools.ant.taskdefs.Manifest$Section,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Section,<init> --> name,org.apache.tools.ant.taskdefs.Manifest$Section,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Section,<init> --> attributes,org.apache.tools.ant.taskdefs.Manifest$Section,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Section,<init> --> attributeIndex,org.apache.tools.ant.taskdefs.Manifest$Section,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Section,setName --> name,org.apache.tools.ant.taskdefs.Manifest$Section,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Section,getName --> name,org.apache.tools.ant.taskdefs.Manifest$Section,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Section,read --> name,org.apache.tools.ant.taskdefs.Manifest$Section,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Section,read --> name,org.apache.tools.ant.taskdefs.Manifest$Section,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Section,merge --> name,org.apache.tools.ant.taskdefs.Manifest$Section,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Section,merge --> warnings,org.apache.tools.ant.taskdefs.Manifest$Section,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Section,write --> name,org.apache.tools.ant.taskdefs.Manifest$Section,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Section,getAttribute --> attributes,org.apache.tools.ant.taskdefs.Manifest$Section,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Section,getAttributeKeys --> attributeIndex,org.apache.tools.ant.taskdefs.Manifest$Section,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Section,removeAttribute --> attributes,org.apache.tools.ant.taskdefs.Manifest$Section,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Section,removeAttribute --> attributeIndex,org.apache.tools.ant.taskdefs.Manifest$Section,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Section,addAttributeAndCheck --> warnings,org.apache.tools.ant.taskdefs.Manifest$Section,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Section,addAttributeAndCheck --> attributes,org.apache.tools.ant.taskdefs.Manifest$Section,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Section,clone --> name,org.apache.tools.ant.taskdefs.Manifest$Section,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Section,storeAttribute --> attributes,org.apache.tools.ant.taskdefs.Manifest$Section,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Section,storeAttribute --> attributeIndex,org.apache.tools.ant.taskdefs.Manifest$Section,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Section,getWarnings --> warnings,org.apache.tools.ant.taskdefs.Manifest$Section,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Section,hashCode --> attributes,org.apache.tools.ant.taskdefs.Manifest$Section,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Section,equals --> attributes,org.apache.tools.ant.taskdefs.Manifest$Section,READ);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,read --> <init>,org.apache.tools.ant.taskdefs.ManifestException,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,read --> addContinuation,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,read --> <init>$2,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,read --> getKey,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,merge --> <init>,org.apache.tools.ant.taskdefs.ManifestException,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,merge --> <init>,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,merge --> setName,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,merge --> getValues,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,merge --> addValue,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,write --> <init>$3,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,write --> write,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,getAttributeValue --> getValue,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,addConfiguredAttribute --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,addAttributeAndCheck --> getName,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,addAttributeAndCheck --> getValue,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,addAttributeAndCheck --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,addAttributeAndCheck --> getKey,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,addAttributeAndCheck --> getValues,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,addAttributeAndCheck --> addValue,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,addAttributeAndCheck --> <init>,org.apache.tools.ant.taskdefs.ManifestException,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,clone --> getName,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,clone --> getValue,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,clone --> <init>$3,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Section,storeAttribute --> getKey,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
EndClass 79
StartClass 80
Class(org.apache.tools.ant.types.ResourceCollection,Y,Y,Public);
Method(iterator,java.util.Iterator,Public,N,Y);
Method(size,int,Public,N,Y);
Method(isFilesystemOnly,boolean,Public,N,Y);
EndClass 80
StartClass 81
Class(org.apache.tools.ant.types.resources.Union,N,N,Public);
Method(getInstance,org.apache.tools.ant.types.resources.Union,Public,Y,N);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(list,java.lang.String[],Public,N,N);
Method(listResources,org.apache.tools.ant.types.Resource[],Public,N,N);
Method(getCollection,java.util.Collection,Protected,N,N);
Method(getCollection$2,java.util.Collection,Protected,N,N);
Method(nextRC,org.apache.tools.ant.types.ResourceCollection,Private,Y,N);
Parameter(getInstance,org.apache.tools.ant.types.ResourceCollection,);
Parameter(<init>$2,org.apache.tools.ant.types.ResourceCollection,);
Parameter(getCollection$2,boolean,);
Parameter(nextRC,java.util.Iterator,);
SuperClass(org.apache.tools.ant.types.resources.BaseResourceCollectionContainer);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.resources.BaseResourceCollectionContainer);
Call(METHOD,org.apache.tools.ant.types.resources.Union,getInstance --> <init>$2,org.apache.tools.ant.types.resources.Union,);
Call(METHOD,org.apache.tools.ant.types.resources.Union,list --> list,org.apache.tools.ant.types.resources.Union,);
Call(METHOD,org.apache.tools.ant.types.resources.Union,list --> getCollection$2,org.apache.tools.ant.types.resources.Union,);
Call(METHOD,org.apache.tools.ant.types.resources.Union,listResources --> listResources,org.apache.tools.ant.types.resources.Union,);
Call(METHOD,org.apache.tools.ant.types.resources.Union,listResources --> getCollection,org.apache.tools.ant.types.resources.Union,);
Call(METHOD,org.apache.tools.ant.types.resources.Union,getCollection --> getCollection$2,org.apache.tools.ant.types.resources.Union,);
Call(METHOD,org.apache.tools.ant.types.resources.Union,getCollection$2 --> nextRC,org.apache.tools.ant.types.resources.Union,);
Call(METHOD,org.apache.tools.ant.types.resources.Union,<init> --> <init>,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.Union,<init>$2 --> <init>,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.Union,<init>$2 --> add,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.Union,list --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Union,list --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Union,listResources --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Union,listResources --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Union,getCollection$2 --> getResourceCollections,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.Union,getCollection$2 --> iterator,org.apache.tools.ant.types.ResourceCollection,);
EndClass 81
StartClass 82
Class(org.apache.tools.ant.types.Path$PathElement,N,N,Public);
Attribute(parts,java.lang.String[],Private,N,N,);
Attribute(this$0,org.apache.tools.ant.types.Path,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(setLocation,void,Public,N,N);
Method(setPath,void,Public,N,N);
Method(getParts,java.lang.String[],Public,N,N);
Method(iterator,java.util.Iterator,Public,N,N);
Method(isFilesystemOnly,boolean,Public,N,N);
Method(size,int,Public,N,N);
Parameter(<init>,org.apache.tools.ant.types.Path,);
Parameter(setLocation,java.io.File,);
Parameter(setPath,java.lang.String,);
Realization(org.apache.tools.ant.types.ResourceCollection);
Composition(org.apache.tools.ant.types.Path);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path$PathElement,<init> --> this$0,org.apache.tools.ant.types.Path$PathElement,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path$PathElement,setLocation --> parts,org.apache.tools.ant.types.Path$PathElement,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path$PathElement,setPath --> this$0,org.apache.tools.ant.types.Path$PathElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path$PathElement,setPath --> parts,org.apache.tools.ant.types.Path$PathElement,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path$PathElement,getParts --> parts,org.apache.tools.ant.types.Path$PathElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path$PathElement,iterator --> parts,org.apache.tools.ant.types.Path$PathElement,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Path$PathElement,size --> parts,org.apache.tools.ant.types.Path$PathElement,READ);
Call(METHOD,org.apache.tools.ant.types.Path$PathElement,setLocation --> translateFile,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path$PathElement,setPath --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.Path$PathElement,setPath --> translatePath,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Path$PathElement,iterator --> <init>$3,org.apache.tools.ant.types.resources.FileResourceIterator,);
EndClass 82
StartClass 83
Class(org.apache.tools.ant.types.FileSet,N,N,Public);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Protected,N,N);
Method(clone,java.lang.Object,Public,N,N);
Method(iterator,java.util.Iterator,Public,N,N);
Method(size,int,Public,N,N);
Method(isFilesystemOnly,boolean,Public,N,N);
Parameter(<init>$2,org.apache.tools.ant.types.FileSet,);
SuperClass(org.apache.tools.ant.types.AbstractFileSet);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.AbstractFileSet);
Realization(org.apache.tools.ant.types.ResourceCollection);
Call(METHOD,org.apache.tools.ant.types.FileSet,clone --> clone,org.apache.tools.ant.types.FileSet,);
Call(METHOD,org.apache.tools.ant.types.FileSet,iterator --> iterator,org.apache.tools.ant.types.FileSet,);
Call(METHOD,org.apache.tools.ant.types.FileSet,size --> size,org.apache.tools.ant.types.FileSet,);
Call(METHOD,org.apache.tools.ant.types.FileSet,<init> --> <init>,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.FileSet,<init>$2 --> <init>$2,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.FileSet,clone --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FileSet,clone --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.FileSet,clone --> getRef,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.FileSet,clone --> clone,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.FileSet,iterator --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FileSet,iterator --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.FileSet,iterator --> getRef,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.FileSet,iterator --> getDir$2,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.FileSet,iterator --> getDirectoryScanner$2,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.FileSet,iterator --> getIncludedFiles,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.types.FileSet,iterator --> <init>$3,org.apache.tools.ant.types.resources.FileResourceIterator,);
Call(METHOD,org.apache.tools.ant.types.FileSet,size --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FileSet,size --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.FileSet,size --> getRef,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.FileSet,size --> getDirectoryScanner$2,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.FileSet,size --> getIncludedFilesCount,org.apache.tools.ant.DirectoryScanner,);
EndClass 83
StartClass 84
Class(org.apache.tools.ant.types.FileList,N,N,Public);
Attribute(filenames,java.util.Vector,Private,N,N,);
Attribute(dir,java.io.File,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Protected,N,N);
Method(setRefid,void,Public,N,N);
Method(setDir,void,Public,N,N);
Method(getDir,java.io.File,Public,N,N);
Method(setFiles,void,Public,N,N);
Method(getFiles,java.lang.String[],Public,N,N);
Method(getRef,org.apache.tools.ant.types.FileList,Protected,N,N);
Method(addConfiguredFile,void,Public,N,N);
Method(iterator,java.util.Iterator,Public,N,N);
Method(size,int,Public,N,N);
Method(isFilesystemOnly,boolean,Public,N,N);
Parameter(<init>$2,org.apache.tools.ant.types.FileList,);
Parameter(setRefid,org.apache.tools.ant.types.Reference,);
Parameter(setDir,java.io.File,);
Parameter(getDir,org.apache.tools.ant.Project,);
Parameter(setFiles,java.lang.String,);
Parameter(getFiles,org.apache.tools.ant.Project,);
Parameter(getRef,org.apache.tools.ant.Project,);
Parameter(addConfiguredFile,org.apache.tools.ant.types.FileList$FileName,);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.DataType);
Realization(org.apache.tools.ant.types.ResourceCollection);
Call(METHOD,org.apache.tools.ant.types.FileList,getDir --> getRef,org.apache.tools.ant.types.FileList,);
Call(METHOD,org.apache.tools.ant.types.FileList,getDir --> getDir,org.apache.tools.ant.types.FileList,);
Call(METHOD,org.apache.tools.ant.types.FileList,getFiles --> getRef,org.apache.tools.ant.types.FileList,);
Call(METHOD,org.apache.tools.ant.types.FileList,getFiles --> getFiles,org.apache.tools.ant.types.FileList,);
Call(METHOD,org.apache.tools.ant.types.FileList,iterator --> getRef,org.apache.tools.ant.types.FileList,);
Call(METHOD,org.apache.tools.ant.types.FileList,iterator --> iterator,org.apache.tools.ant.types.FileList,);
Call(METHOD,org.apache.tools.ant.types.FileList,size --> getRef,org.apache.tools.ant.types.FileList,);
Call(METHOD,org.apache.tools.ant.types.FileList,size --> size,org.apache.tools.ant.types.FileList,);
Call(ATTRIBUTE,org.apache.tools.ant.types.FileList,<init> --> filenames,org.apache.tools.ant.types.FileList,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FileList,<init>$2 --> dir,org.apache.tools.ant.types.FileList,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FileList,<init>$2 --> filenames,org.apache.tools.ant.types.FileList,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FileList,<init>$2 --> filenames,org.apache.tools.ant.types.FileList,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FileList,<init>$2 --> dir,org.apache.tools.ant.types.FileList,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FileList,setRefid --> dir,org.apache.tools.ant.types.FileList,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FileList,setRefid --> filenames,org.apache.tools.ant.types.FileList,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FileList,setDir --> dir,org.apache.tools.ant.types.FileList,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FileList,getDir --> dir,org.apache.tools.ant.types.FileList,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FileList,setFiles --> filenames,org.apache.tools.ant.types.FileList,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FileList,getFiles --> dir,org.apache.tools.ant.types.FileList,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FileList,getFiles --> filenames,org.apache.tools.ant.types.FileList,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FileList,addConfiguredFile --> filenames,org.apache.tools.ant.types.FileList,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FileList,iterator --> dir,org.apache.tools.ant.types.FileList,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FileList,iterator --> filenames,org.apache.tools.ant.types.FileList,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FileList,size --> filenames,org.apache.tools.ant.types.FileList,READ);
Call(METHOD,org.apache.tools.ant.types.FileList,<init> --> <init>,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FileList,<init>$2 --> <init>,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FileList,<init>$2 --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.FileList,<init>$2 --> setProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.FileList,setRefid --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FileList,setRefid --> setRefid,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FileList,setDir --> checkAttributesAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FileList,getDir --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FileList,setFiles --> checkAttributesAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FileList,getFiles --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FileList,getFiles --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.FileList,getRef --> getCheckedRef$2,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FileList,addConfiguredFile --> getName,org.apache.tools.ant.types.FileList$FileName,);
Call(METHOD,org.apache.tools.ant.types.FileList,addConfiguredFile --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.FileList,iterator --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FileList,iterator --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.FileList,iterator --> <init>$3,org.apache.tools.ant.types.resources.FileResourceIterator,);
Call(METHOD,org.apache.tools.ant.types.FileList,size --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FileList,size --> getProject,org.apache.tools.ant.ProjectComponent,);
EndClass 84
StartClass 85
Class(org.apache.tools.ant.types.DirSet,N,N,Public);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Protected,N,N);
Method(clone,java.lang.Object,Public,N,N);
Method(iterator,java.util.Iterator,Public,N,N);
Method(size,int,Public,N,N);
Method(isFilesystemOnly,boolean,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Parameter(<init>$2,org.apache.tools.ant.types.DirSet,);
SuperClass(org.apache.tools.ant.types.AbstractFileSet);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.AbstractFileSet);
Realization(org.apache.tools.ant.types.ResourceCollection);
Call(METHOD,org.apache.tools.ant.types.DirSet,clone --> clone,org.apache.tools.ant.types.DirSet,);
Call(METHOD,org.apache.tools.ant.types.DirSet,iterator --> iterator,org.apache.tools.ant.types.DirSet,);
Call(METHOD,org.apache.tools.ant.types.DirSet,size --> size,org.apache.tools.ant.types.DirSet,);
Call(METHOD,org.apache.tools.ant.types.DirSet,<init> --> <init>,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.DirSet,<init>$2 --> <init>$2,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.DirSet,clone --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.DirSet,clone --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.DirSet,clone --> getRef,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.DirSet,clone --> clone,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.DirSet,iterator --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.DirSet,iterator --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.DirSet,iterator --> getRef,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.DirSet,iterator --> getDir$2,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.DirSet,iterator --> getDirectoryScanner$2,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.DirSet,iterator --> getIncludedDirectories,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.types.DirSet,iterator --> <init>$3,org.apache.tools.ant.types.resources.FileResourceIterator,);
Call(METHOD,org.apache.tools.ant.types.DirSet,size --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.DirSet,size --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.DirSet,size --> getRef,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.DirSet,size --> getDirectoryScanner$2,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.DirSet,size --> getIncludedDirsCount,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.types.DirSet,toString --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.DirSet,toString --> getDirectoryScanner$2,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.DirSet,toString --> getIncludedDirectories,org.apache.tools.ant.DirectoryScanner,);
EndClass 85
StartClass 86
Class(org.apache.tools.ant.types.Resource$1,N,N,NA);
Attribute(done,boolean,Private,N,N,);
Attribute(this$0,org.apache.tools.ant.types.Resource,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(hasNext,boolean,Public,N,N);
Method(next,java.lang.Object,Public,N,N);
Method(remove,void,Public,N,N);
Parameter(<init>,org.apache.tools.ant.types.Resource,);
Composition(org.apache.tools.ant.types.Resource);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource$1,<init> --> this$0,org.apache.tools.ant.types.Resource$1,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource$1,<init> --> done,org.apache.tools.ant.types.Resource$1,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource$1,hasNext --> done,org.apache.tools.ant.types.Resource$1,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource$1,next --> done,org.apache.tools.ant.types.Resource$1,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource$1,next --> this$0,org.apache.tools.ant.types.Resource$1,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Resource$1,next --> done,org.apache.tools.ant.types.Resource$1,WRITE);
EndClass 86
StartClass 87
Class(org.apache.tools.ant.IntrospectionHelper$NestedCreator,N,Y,NA);
Attribute(method,java.lang.reflect.Method,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getMethod,java.lang.reflect.Method,Public,N,N);
Method(isPolyMorphic,boolean,Public,N,N);
Method(getRealObject,java.lang.Object,Public,N,N);
Method(create,java.lang.Object,Public,N,Y);
Method(store,void,Public,N,N);
Method(access$100,java.lang.reflect.Method,Public,Y,N);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(create,org.apache.tools.ant.Project,);
Parameter(create,java.lang.Object,);
Parameter(create,java.lang.Object,);
Parameter(store,java.lang.Object,);
Parameter(store,java.lang.Object,);
Parameter(access$100,org.apache.tools.ant.IntrospectionHelper$NestedCreator,);
SubClass(org.apache.tools.ant.IntrospectionHelper$1);
SubClass(org.apache.tools.ant.IntrospectionHelper$11);
SubClass(org.apache.tools.ant.IntrospectionHelper$2);
SubClass(org.apache.tools.ant.IntrospectionHelper$AddNestedCreator);
SubClass(org.apache.tools.ant.IntrospectionHelper$CreateNestedCreator);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$NestedCreator,<init> --> method,org.apache.tools.ant.IntrospectionHelper$NestedCreator,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$NestedCreator,getMethod --> method,org.apache.tools.ant.IntrospectionHelper$NestedCreator,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$NestedCreator,access$100 --> method,org.apache.tools.ant.IntrospectionHelper$NestedCreator,READ);
EndClass 87
StartClass 88
Class(org.apache.tools.ant.IntrospectionHelper$AttributeSetter,N,Y,NA);
Attribute(method,java.lang.reflect.Method,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(set,void,Public,N,Y);
Method(access$200,java.lang.reflect.Method,Public,Y,N);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(set,org.apache.tools.ant.Project,);
Parameter(set,java.lang.Object,);
Parameter(set,java.lang.String,);
Parameter(access$200,org.apache.tools.ant.IntrospectionHelper$AttributeSetter,);
SubClass(org.apache.tools.ant.IntrospectionHelper$10);
SubClass(org.apache.tools.ant.IntrospectionHelper$7);
SubClass(org.apache.tools.ant.IntrospectionHelper$8);
SubClass(org.apache.tools.ant.IntrospectionHelper$9);
SubClass(org.apache.tools.ant.IntrospectionHelper$3);
SubClass(org.apache.tools.ant.IntrospectionHelper$4);
SubClass(org.apache.tools.ant.IntrospectionHelper$5);
SubClass(org.apache.tools.ant.IntrospectionHelper$6);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$AttributeSetter,<init> --> method,org.apache.tools.ant.IntrospectionHelper$AttributeSetter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$AttributeSetter,access$200 --> method,org.apache.tools.ant.IntrospectionHelper$AttributeSetter,READ);
EndClass 88
StartClass 89
Class(org.apache.tools.ant.IntrospectionHelper$10,N,N,NA);
Attribute(val$finalIncludeProject,boolean,Private,N,Y,);
Attribute(val$finalConstructor,java.lang.reflect.Constructor,Private,N,Y,);
Attribute(val$m,java.lang.reflect.Method,Private,N,Y,);
Attribute(this$0,org.apache.tools.ant.IntrospectionHelper,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(set,void,Public,N,N);
Parameter(<init>,org.apache.tools.ant.IntrospectionHelper,);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(<init>,boolean,);
Parameter(<init>,java.lang.reflect.Constructor,);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(set,org.apache.tools.ant.Project,);
Parameter(set,java.lang.Object,);
Parameter(set,java.lang.String,);
SuperClass(org.apache.tools.ant.IntrospectionHelper$AttributeSetter);
Generalization(org.apache.tools.ant.IntrospectionHelper$AttributeSetter);
Composition(org.apache.tools.ant.IntrospectionHelper);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$10,<init> --> this$0,org.apache.tools.ant.IntrospectionHelper$10,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$10,<init> --> val$finalIncludeProject,org.apache.tools.ant.IntrospectionHelper$10,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$10,<init> --> val$finalConstructor,org.apache.tools.ant.IntrospectionHelper$10,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$10,<init> --> val$m,org.apache.tools.ant.IntrospectionHelper$10,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$10,set --> val$finalIncludeProject,org.apache.tools.ant.IntrospectionHelper$10,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$10,set --> val$finalConstructor,org.apache.tools.ant.IntrospectionHelper$10,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$10,set --> val$m,org.apache.tools.ant.IntrospectionHelper$10,READ);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$10,<init> --> <init>,org.apache.tools.ant.IntrospectionHelper$AttributeSetter,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$10,set --> setProjectReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$10,set --> <init>$5,org.apache.tools.ant.BuildException,);
EndClass 89
StartClass 90
Class(org.apache.tools.ant.IntrospectionHelper$1,N,N,NA);
Attribute(val$nestedElement,java.lang.Object,Private,N,Y,);
Attribute(this$0,org.apache.tools.ant.IntrospectionHelper,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(create,java.lang.Object,Public,N,N);
Parameter(<init>,org.apache.tools.ant.IntrospectionHelper,);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(<init>,java.lang.Object,);
Parameter(create,org.apache.tools.ant.Project,);
Parameter(create,java.lang.Object,);
Parameter(create,java.lang.Object,);
SuperClass(org.apache.tools.ant.IntrospectionHelper$NestedCreator);
Generalization(org.apache.tools.ant.IntrospectionHelper$NestedCreator);
Composition(org.apache.tools.ant.IntrospectionHelper);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$1,<init> --> this$0,org.apache.tools.ant.IntrospectionHelper$1,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$1,<init> --> val$nestedElement,org.apache.tools.ant.IntrospectionHelper$1,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$1,create --> val$nestedElement,org.apache.tools.ant.IntrospectionHelper$1,READ);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$1,<init> --> <init>,org.apache.tools.ant.IntrospectionHelper$NestedCreator,);
EndClass 90
StartClass 91
Class(org.apache.tools.ant.IntrospectionHelper$11,N,N,NA);
Attribute(val$realObject,java.lang.Object,Private,N,Y,);
Attribute(val$nestedObject,java.lang.Object,Private,N,Y,);
Attribute(this$0,org.apache.tools.ant.IntrospectionHelper,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(create,java.lang.Object,Public,N,N);
Method(getRealObject,java.lang.Object,Public,N,N);
Method(store,void,Public,N,N);
Parameter(<init>,org.apache.tools.ant.IntrospectionHelper,);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(<init>,java.lang.Object,);
Parameter(<init>,java.lang.Object,);
Parameter(create,org.apache.tools.ant.Project,);
Parameter(create,java.lang.Object,);
Parameter(create,java.lang.Object,);
Parameter(store,java.lang.Object,);
Parameter(store,java.lang.Object,);
SuperClass(org.apache.tools.ant.IntrospectionHelper$NestedCreator);
Generalization(org.apache.tools.ant.IntrospectionHelper$NestedCreator);
Composition(org.apache.tools.ant.IntrospectionHelper);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$11,<init> --> this$0,org.apache.tools.ant.IntrospectionHelper$11,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$11,<init> --> val$realObject,org.apache.tools.ant.IntrospectionHelper$11,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$11,<init> --> val$nestedObject,org.apache.tools.ant.IntrospectionHelper$11,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$11,create --> val$realObject,org.apache.tools.ant.IntrospectionHelper$11,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$11,create --> val$nestedObject,org.apache.tools.ant.IntrospectionHelper$11,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$11,getRealObject --> val$realObject,org.apache.tools.ant.IntrospectionHelper$11,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$11,store --> val$realObject,org.apache.tools.ant.IntrospectionHelper$11,READ);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$11,<init> --> <init>,org.apache.tools.ant.IntrospectionHelper$NestedCreator,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$11,create --> getMethod,org.apache.tools.ant.IntrospectionHelper$NestedCreator,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$11,store --> getMethod,org.apache.tools.ant.IntrospectionHelper$NestedCreator,);
EndClass 91
StartClass 92
Class(org.apache.tools.ant.IntrospectionHelper$2,N,N,NA);
Attribute(val$nestedElement,java.lang.Object,Private,N,Y,);
Attribute(this$0,org.apache.tools.ant.IntrospectionHelper,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(create,java.lang.Object,Public,N,N);
Parameter(<init>,org.apache.tools.ant.IntrospectionHelper,);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(<init>,java.lang.Object,);
Parameter(create,org.apache.tools.ant.Project,);
Parameter(create,java.lang.Object,);
Parameter(create,java.lang.Object,);
SuperClass(org.apache.tools.ant.IntrospectionHelper$NestedCreator);
Generalization(org.apache.tools.ant.IntrospectionHelper$NestedCreator);
Composition(org.apache.tools.ant.IntrospectionHelper);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$2,<init> --> this$0,org.apache.tools.ant.IntrospectionHelper$2,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$2,<init> --> val$nestedElement,org.apache.tools.ant.IntrospectionHelper$2,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$2,create --> val$nestedElement,org.apache.tools.ant.IntrospectionHelper$2,READ);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$2,<init> --> <init>,org.apache.tools.ant.IntrospectionHelper$NestedCreator,);
EndClass 92
StartClass 93
Class(org.apache.tools.ant.IntrospectionHelper$7,N,N,NA);
Attribute(val$m,java.lang.reflect.Method,Private,N,Y,);
Attribute(this$0,org.apache.tools.ant.IntrospectionHelper,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(set,void,Public,N,N);
Parameter(<init>,org.apache.tools.ant.IntrospectionHelper,);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(set,org.apache.tools.ant.Project,);
Parameter(set,java.lang.Object,);
Parameter(set,java.lang.String,);
SuperClass(org.apache.tools.ant.IntrospectionHelper$AttributeSetter);
Generalization(org.apache.tools.ant.IntrospectionHelper$AttributeSetter);
Composition(org.apache.tools.ant.IntrospectionHelper);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$7,<init> --> this$0,org.apache.tools.ant.IntrospectionHelper$7,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$7,<init> --> val$m,org.apache.tools.ant.IntrospectionHelper$7,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$7,set --> val$m,org.apache.tools.ant.IntrospectionHelper$7,READ);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$7,<init> --> <init>,org.apache.tools.ant.IntrospectionHelper$AttributeSetter,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$7,set --> resolveFile$2,org.apache.tools.ant.Project,);
EndClass 93
StartClass 94
Class(org.apache.tools.ant.IntrospectionHelper$8,N,N,NA);
Attribute(val$reflectedArg,java.lang.Class,Private,N,Y,);
Attribute(val$m,java.lang.reflect.Method,Private,N,Y,);
Attribute(this$0,org.apache.tools.ant.IntrospectionHelper,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(set,void,Public,N,N);
Parameter(<init>,org.apache.tools.ant.IntrospectionHelper,);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(<init>,java.lang.Class,);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(set,org.apache.tools.ant.Project,);
Parameter(set,java.lang.Object,);
Parameter(set,java.lang.String,);
SuperClass(org.apache.tools.ant.IntrospectionHelper$AttributeSetter);
Generalization(org.apache.tools.ant.IntrospectionHelper$AttributeSetter);
Composition(org.apache.tools.ant.IntrospectionHelper);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$8,<init> --> this$0,org.apache.tools.ant.IntrospectionHelper$8,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$8,<init> --> val$reflectedArg,org.apache.tools.ant.IntrospectionHelper$8,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$8,<init> --> val$m,org.apache.tools.ant.IntrospectionHelper$8,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$8,set --> val$reflectedArg,org.apache.tools.ant.IntrospectionHelper$8,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$8,set --> val$m,org.apache.tools.ant.IntrospectionHelper$8,READ);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$8,<init> --> <init>,org.apache.tools.ant.IntrospectionHelper$AttributeSetter,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$8,set --> setValue,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$8,set --> <init>$5,org.apache.tools.ant.BuildException,);
EndClass 94
StartClass 95
Class(org.apache.tools.ant.DynamicAttribute,Y,Y,Public);
Method(setDynamicAttribute,void,Public,N,Y);
Parameter(setDynamicAttribute,java.lang.String,);
Parameter(setDynamicAttribute,java.lang.String,);
EndClass 95
StartClass 96
Class(org.apache.tools.ant.IntrospectionHelper$9,N,N,NA);
Attribute(val$m,java.lang.reflect.Method,Private,N,Y,);
Attribute(val$reflectedArg,java.lang.Class,Private,N,Y,);
Attribute(this$0,org.apache.tools.ant.IntrospectionHelper,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(set,void,Public,N,N);
Parameter(<init>,org.apache.tools.ant.IntrospectionHelper,);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(<init>,java.lang.Class,);
Parameter(set,org.apache.tools.ant.Project,);
Parameter(set,java.lang.Object,);
Parameter(set,java.lang.String,);
SuperClass(org.apache.tools.ant.IntrospectionHelper$AttributeSetter);
Generalization(org.apache.tools.ant.IntrospectionHelper$AttributeSetter);
Composition(org.apache.tools.ant.IntrospectionHelper);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$9,<init> --> this$0,org.apache.tools.ant.IntrospectionHelper$9,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$9,<init> --> val$m,org.apache.tools.ant.IntrospectionHelper$9,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$9,<init> --> val$reflectedArg,org.apache.tools.ant.IntrospectionHelper$9,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$9,set --> val$m,org.apache.tools.ant.IntrospectionHelper$9,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$9,set --> val$reflectedArg,org.apache.tools.ant.IntrospectionHelper$9,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$9,set --> class$java$lang$String,org.apache.tools.ant.IntrospectionHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$9,set --> class$java$lang$String,org.apache.tools.ant.IntrospectionHelper,WRITE);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$9,<init> --> <init>,org.apache.tools.ant.IntrospectionHelper$AttributeSetter,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$9,set --> class$,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$9,set --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$9,set --> <init>$5,org.apache.tools.ant.BuildException,);
EndClass 96
StartClass 97
Class(org.apache.tools.ant.IntrospectionHelper$3,N,N,NA);
Attribute(val$m,java.lang.reflect.Method,Private,N,Y,);
Attribute(this$0,org.apache.tools.ant.IntrospectionHelper,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(set,void,Public,N,N);
Parameter(<init>,org.apache.tools.ant.IntrospectionHelper,);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(set,org.apache.tools.ant.Project,);
Parameter(set,java.lang.Object,);
Parameter(set,java.lang.String,);
SuperClass(org.apache.tools.ant.IntrospectionHelper$AttributeSetter);
Generalization(org.apache.tools.ant.IntrospectionHelper$AttributeSetter);
Composition(org.apache.tools.ant.IntrospectionHelper);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$3,<init> --> this$0,org.apache.tools.ant.IntrospectionHelper$3,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$3,<init> --> val$m,org.apache.tools.ant.IntrospectionHelper$3,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$3,set --> val$m,org.apache.tools.ant.IntrospectionHelper$3,READ);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$3,<init> --> <init>,org.apache.tools.ant.IntrospectionHelper$AttributeSetter,);
EndClass 97
StartClass 98
Class(org.apache.tools.ant.IntrospectionHelper$4,N,N,NA);
Attribute(val$attrName,java.lang.String,Private,N,Y,);
Attribute(val$m,java.lang.reflect.Method,Private,N,Y,);
Attribute(this$0,org.apache.tools.ant.IntrospectionHelper,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(set,void,Public,N,N);
Parameter(<init>,org.apache.tools.ant.IntrospectionHelper,);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(set,org.apache.tools.ant.Project,);
Parameter(set,java.lang.Object,);
Parameter(set,java.lang.String,);
SuperClass(org.apache.tools.ant.IntrospectionHelper$AttributeSetter);
Generalization(org.apache.tools.ant.IntrospectionHelper$AttributeSetter);
Composition(org.apache.tools.ant.IntrospectionHelper);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$4,<init> --> this$0,org.apache.tools.ant.IntrospectionHelper$4,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$4,<init> --> val$attrName,org.apache.tools.ant.IntrospectionHelper$4,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$4,<init> --> val$m,org.apache.tools.ant.IntrospectionHelper$4,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$4,set --> val$attrName,org.apache.tools.ant.IntrospectionHelper$4,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$4,set --> val$m,org.apache.tools.ant.IntrospectionHelper$4,READ);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$4,<init> --> <init>,org.apache.tools.ant.IntrospectionHelper$AttributeSetter,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$4,set --> <init>$2,org.apache.tools.ant.BuildException,);
EndClass 98
StartClass 99
Class(org.apache.tools.ant.IntrospectionHelper$5,N,N,NA);
Attribute(val$m,java.lang.reflect.Method,Private,N,Y,);
Attribute(this$0,org.apache.tools.ant.IntrospectionHelper,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(set,void,Public,N,N);
Parameter(<init>,org.apache.tools.ant.IntrospectionHelper,);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(set,org.apache.tools.ant.Project,);
Parameter(set,java.lang.Object,);
Parameter(set,java.lang.String,);
SuperClass(org.apache.tools.ant.IntrospectionHelper$AttributeSetter);
Generalization(org.apache.tools.ant.IntrospectionHelper$AttributeSetter);
Composition(org.apache.tools.ant.IntrospectionHelper);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$5,<init> --> this$0,org.apache.tools.ant.IntrospectionHelper$5,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$5,<init> --> val$m,org.apache.tools.ant.IntrospectionHelper$5,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$5,set --> val$m,org.apache.tools.ant.IntrospectionHelper$5,READ);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$5,<init> --> <init>,org.apache.tools.ant.IntrospectionHelper$AttributeSetter,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$5,set --> toBoolean,org.apache.tools.ant.Project,);
EndClass 99
StartClass 100
Class(org.apache.tools.ant.IntrospectionHelper$6,N,N,NA);
Attribute(val$m,java.lang.reflect.Method,Private,N,Y,);
Attribute(this$0,org.apache.tools.ant.IntrospectionHelper,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(set,void,Public,N,N);
Parameter(<init>,org.apache.tools.ant.IntrospectionHelper,);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(set,org.apache.tools.ant.Project,);
Parameter(set,java.lang.Object,);
Parameter(set,java.lang.String,);
SuperClass(org.apache.tools.ant.IntrospectionHelper$AttributeSetter);
Generalization(org.apache.tools.ant.IntrospectionHelper$AttributeSetter);
Composition(org.apache.tools.ant.IntrospectionHelper);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$6,<init> --> this$0,org.apache.tools.ant.IntrospectionHelper$6,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$6,<init> --> val$m,org.apache.tools.ant.IntrospectionHelper$6,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$6,set --> val$m,org.apache.tools.ant.IntrospectionHelper$6,READ);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$6,<init> --> <init>,org.apache.tools.ant.IntrospectionHelper$AttributeSetter,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$6,set --> <init>$5,org.apache.tools.ant.BuildException,);
EndClass 100
StartClass 101
Class(org.apache.tools.ant.IntrospectionHelper$AddNestedCreator,N,N,NA);
Attribute(ADD,int,Public,Y,Y,);
Attribute(ADD_CONFIGURED,int,Public,Y,Y,);
Attribute(constructor,java.lang.reflect.Constructor,Private,N,N,);
Attribute(behavior,int,Private,N,N,);
Attribute(this$0,org.apache.tools.ant.IntrospectionHelper,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(isPolyMorphic,boolean,Public,N,N);
Method(create,java.lang.Object,Public,N,N);
Method(store,void,Public,N,N);
Method(istore,void,Private,N,N);
Parameter(<init>,org.apache.tools.ant.IntrospectionHelper,);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(<init>,java.lang.reflect.Constructor,);
Parameter(<init>,int,);
Parameter(create,org.apache.tools.ant.Project,);
Parameter(create,java.lang.Object,);
Parameter(create,java.lang.Object,);
Parameter(store,java.lang.Object,);
Parameter(store,java.lang.Object,);
Parameter(istore,java.lang.Object,);
Parameter(istore,java.lang.Object,);
SuperClass(org.apache.tools.ant.IntrospectionHelper$NestedCreator);
Generalization(org.apache.tools.ant.IntrospectionHelper$NestedCreator);
Composition(org.apache.tools.ant.IntrospectionHelper);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$AddNestedCreator,create --> istore,org.apache.tools.ant.IntrospectionHelper$AddNestedCreator,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$AddNestedCreator,store --> istore,org.apache.tools.ant.IntrospectionHelper$AddNestedCreator,);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$AddNestedCreator,<init> --> this$0,org.apache.tools.ant.IntrospectionHelper$AddNestedCreator,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$AddNestedCreator,<init> --> constructor,org.apache.tools.ant.IntrospectionHelper$AddNestedCreator,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$AddNestedCreator,<init> --> behavior,org.apache.tools.ant.IntrospectionHelper$AddNestedCreator,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$AddNestedCreator,create --> constructor,org.apache.tools.ant.IntrospectionHelper$AddNestedCreator,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$AddNestedCreator,create --> behavior,org.apache.tools.ant.IntrospectionHelper$AddNestedCreator,READ);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$AddNestedCreator,store --> behavior,org.apache.tools.ant.IntrospectionHelper$AddNestedCreator,READ);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$AddNestedCreator,<init> --> <init>,org.apache.tools.ant.IntrospectionHelper$NestedCreator,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$AddNestedCreator,create --> createObject,org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$AddNestedCreator,istore --> getMethod,org.apache.tools.ant.IntrospectionHelper$NestedCreator,);
EndClass 101
StartClass 102
Class(org.apache.tools.ant.DynamicElementNS,Y,Y,Public);
Method(createDynamicElement,java.lang.Object,Public,N,Y);
Parameter(createDynamicElement,java.lang.String,);
Parameter(createDynamicElement,java.lang.String,);
Parameter(createDynamicElement,java.lang.String,);
EndClass 102
StartClass 103
Class(org.apache.tools.ant.DynamicElement,Y,Y,Public);
Method(createDynamicElement,java.lang.Object,Public,N,Y);
Parameter(createDynamicElement,java.lang.String,);
EndClass 103
StartClass 104
Class(org.apache.tools.ant.DynamicAttributeNS,Y,Y,Public);
Method(setDynamicAttribute,void,Public,N,Y);
Parameter(setDynamicAttribute,java.lang.String,);
Parameter(setDynamicAttribute,java.lang.String,);
Parameter(setDynamicAttribute,java.lang.String,);
Parameter(setDynamicAttribute,java.lang.String,);
EndClass 104
StartClass 105
Class(org.apache.tools.ant.IntrospectionHelper$CreateNestedCreator,N,N,NA);
Attribute(this$0,org.apache.tools.ant.IntrospectionHelper,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(create,java.lang.Object,Public,N,N);
Parameter(<init>,org.apache.tools.ant.IntrospectionHelper,);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(create,org.apache.tools.ant.Project,);
Parameter(create,java.lang.Object,);
Parameter(create,java.lang.Object,);
SuperClass(org.apache.tools.ant.IntrospectionHelper$NestedCreator);
Generalization(org.apache.tools.ant.IntrospectionHelper$NestedCreator);
Composition(org.apache.tools.ant.IntrospectionHelper);
Call(ATTRIBUTE,org.apache.tools.ant.IntrospectionHelper$CreateNestedCreator,<init> --> this$0,org.apache.tools.ant.IntrospectionHelper$CreateNestedCreator,WRITE);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$CreateNestedCreator,<init> --> <init>,org.apache.tools.ant.IntrospectionHelper$NestedCreator,);
Call(METHOD,org.apache.tools.ant.IntrospectionHelper$CreateNestedCreator,create --> getMethod,org.apache.tools.ant.IntrospectionHelper$NestedCreator,);
EndClass 105
StartClass 106
Class(org.apache.tools.ant.UnsupportedAttributeException,N,N,Public);
Attribute(attribute,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getAttribute,java.lang.String,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.String,);
SuperClass(org.apache.tools.ant.BuildException);
Generalization(org.apache.tools.ant.BuildException);
Call(ATTRIBUTE,org.apache.tools.ant.UnsupportedAttributeException,<init> --> attribute,org.apache.tools.ant.UnsupportedAttributeException,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.UnsupportedAttributeException,getAttribute --> attribute,org.apache.tools.ant.UnsupportedAttributeException,READ);
Call(METHOD,org.apache.tools.ant.UnsupportedAttributeException,<init> --> <init>$2,org.apache.tools.ant.BuildException,);
EndClass 106
StartClass 107
Class(org.apache.tools.ant.helper.ProjectHelper2$AntHandler,N,N,Public);
Method(<init>,void,Public,N,N);
Method(onStartElement,void,Public,N,N);
Method(onStartChild,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,Public,N,N);
Method(onEndChild,void,Public,N,N);
Method(onEndElement,void,Public,N,N);
Method(characters,void,Public,N,N);
Method(checkNamespace,void,Protected,N,N);
Parameter(onStartElement,java.lang.String,);
Parameter(onStartElement,java.lang.String,);
Parameter(onStartElement,java.lang.String,);
Parameter(onStartElement,org.xml.sax.Attributes,);
Parameter(onStartElement,org.apache.tools.ant.helper.AntXMLContext,);
Parameter(onStartChild,java.lang.String,);
Parameter(onStartChild,java.lang.String,);
Parameter(onStartChild,java.lang.String,);
Parameter(onStartChild,org.xml.sax.Attributes,);
Parameter(onStartChild,org.apache.tools.ant.helper.AntXMLContext,);
Parameter(onEndChild,java.lang.String,);
Parameter(onEndChild,java.lang.String,);
Parameter(onEndChild,java.lang.String,);
Parameter(onEndChild,org.apache.tools.ant.helper.AntXMLContext,);
Parameter(onEndElement,java.lang.String,);
Parameter(onEndElement,java.lang.String,);
Parameter(onEndElement,org.apache.tools.ant.helper.AntXMLContext,);
Parameter(characters,char[],);
Parameter(characters,int,);
Parameter(characters,int,);
Parameter(characters,org.apache.tools.ant.helper.AntXMLContext,);
Parameter(checkNamespace,java.lang.String,);
SubClass(org.apache.tools.ant.helper.ProjectHelper2$ElementHandler);
SubClass(org.apache.tools.ant.helper.ProjectHelper2$MainHandler);
SubClass(org.apache.tools.ant.helper.ProjectHelper2$TargetHandler);
SubClass(org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,onStartChild --> getLocator,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,characters --> getLocator,org.apache.tools.ant.helper.AntXMLContext,);
EndClass 107
StartClass 108
Class(org.apache.tools.ant.helper.ProjectHelper2$RootHandler,N,N,Public);
Attribute(antHandlers,java.util.Stack,Private,N,N,);
Attribute(currentHandler,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,Private,N,N,);
Attribute(context,org.apache.tools.ant.helper.AntXMLContext,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getCurrentAntHandler,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,Public,N,N);
Method(resolveEntity,org.xml.sax.InputSource,Public,N,N);
Method(startElement,void,Public,N,N);
Method(setDocumentLocator,void,Public,N,N);
Method(endElement,void,Public,N,N);
Method(characters,void,Public,N,N);
Method(startPrefixMapping,void,Public,N,N);
Method(endPrefixMapping,void,Public,N,N);
Method(access$000,org.apache.tools.ant.helper.AntXMLContext,Public,Y,N);
Parameter(<init>,org.apache.tools.ant.helper.AntXMLContext,);
Parameter(<init>,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,);
Parameter(resolveEntity,java.lang.String,);
Parameter(resolveEntity,java.lang.String,);
Parameter(startElement,java.lang.String,);
Parameter(startElement,java.lang.String,);
Parameter(startElement,java.lang.String,);
Parameter(startElement,org.xml.sax.Attributes,);
Parameter(setDocumentLocator,org.xml.sax.Locator,);
Parameter(endElement,java.lang.String,);
Parameter(endElement,java.lang.String,);
Parameter(endElement,java.lang.String,);
Parameter(characters,char[],);
Parameter(characters,int,);
Parameter(characters,int,);
Parameter(startPrefixMapping,java.lang.String,);
Parameter(startPrefixMapping,java.lang.String,);
Parameter(endPrefixMapping,java.lang.String,);
Parameter(access$000,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,);
Composition(org.apache.tools.ant.helper.ProjectHelper2$AntHandler);
Composition(org.apache.tools.ant.helper.AntXMLContext);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,<init> --> antHandlers,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,<init> --> currentHandler,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,<init> --> antHandlers,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,<init> --> currentHandler,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,<init> --> context,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,getCurrentAntHandler --> currentHandler,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,resolveEntity --> context,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,startElement --> currentHandler,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,startElement --> context,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,startElement --> antHandlers,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,startElement --> currentHandler,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,setDocumentLocator --> context,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,endElement --> currentHandler,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,endElement --> context,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,endElement --> antHandlers,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,endElement --> currentHandler,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,characters --> currentHandler,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,characters --> context,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,startPrefixMapping --> context,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,endPrefixMapping --> context,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,access$000 --> context,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,READ);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,resolveEntity --> getProject,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,resolveEntity --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,resolveEntity --> access$100,org.apache.tools.ant.helper.ProjectHelper2,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,resolveEntity --> fromURI,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,resolveEntity --> getBuildFileParent,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,resolveEntity --> resolveFile,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,resolveEntity --> getBuildFile,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,resolveEntity --> toURI,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,startElement --> onStartChild,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,startElement --> onStartElement,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,setDocumentLocator --> setLocator,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,endElement --> onEndElement,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,endElement --> onEndChild,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,characters --> characters,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,startPrefixMapping --> startPrefixMapping,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$RootHandler,endPrefixMapping --> endPrefixMapping,org.apache.tools.ant.helper.AntXMLContext,);
EndClass 108
StartClass 109
Class(org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,N,N,Public);
Method(<init>,void,Public,N,N);
Method(onStartElement,void,Public,N,N);
Method(characters,void,Public,N,N);
Method(onStartChild,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,Public,N,N);
Method(onEndElement,void,Public,N,N);
Parameter(onStartElement,java.lang.String,);
Parameter(onStartElement,java.lang.String,);
Parameter(onStartElement,java.lang.String,);
Parameter(onStartElement,org.xml.sax.Attributes,);
Parameter(onStartElement,org.apache.tools.ant.helper.AntXMLContext,);
Parameter(characters,char[],);
Parameter(characters,int,);
Parameter(characters,int,);
Parameter(characters,org.apache.tools.ant.helper.AntXMLContext,);
Parameter(onStartChild,java.lang.String,);
Parameter(onStartChild,java.lang.String,);
Parameter(onStartChild,java.lang.String,);
Parameter(onStartChild,org.xml.sax.Attributes,);
Parameter(onStartChild,org.apache.tools.ant.helper.AntXMLContext,);
Parameter(onEndElement,java.lang.String,);
Parameter(onEndElement,java.lang.String,);
Parameter(onEndElement,org.apache.tools.ant.helper.AntXMLContext,);
SuperClass(org.apache.tools.ant.helper.ProjectHelper2$AntHandler);
Generalization(org.apache.tools.ant.helper.ProjectHelper2$AntHandler);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,<init> --> <init>,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> currentWrapper,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> getProxy,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> <init>,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> getProject,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> setProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> setNamespace,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> setQName,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> getNamespace,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> genComponentName,org.apache.tools.ant.ProjectHelper,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> setTaskType,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> setTaskName,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> getLocator,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> <init>$4,org.apache.tools.ant.Location,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> setLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> getCurrentTarget,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> setOwningTarget,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> addChild,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> addTask,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> configureId,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> getTaskName,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> <init>,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> getPrefixMapping,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> setAttribute,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> addChild,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartElement --> pushWrapper,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,characters --> currentWrapper,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,characters --> addText$2,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onStartChild --> access$400,org.apache.tools.ant.helper.ProjectHelper2,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ElementHandler,onEndElement --> popWrapper,org.apache.tools.ant.helper.AntXMLContext,);
EndClass 109
StartClass 110
Class(org.apache.tools.ant.helper.AntXMLContext,N,N,Public);
Attribute(project,org.apache.tools.ant.Project,Private,N,N,);
Attribute(buildFile,java.io.File,Private,N,N,);
Attribute(targetVector,java.util.Vector,Private,N,N,);
Attribute(buildFileParent,java.io.File,Private,N,N,);
Attribute(currentProjectName,java.lang.String,Private,N,N,);
Attribute(locator,org.xml.sax.Locator,Private,N,N,);
Attribute(implicitTarget,org.apache.tools.ant.Target,Private,N,N,);
Attribute(currentTarget,org.apache.tools.ant.Target,Private,N,N,);
Attribute(wStack,java.util.Vector,Private,N,N,);
Attribute(ignoreProjectTag,boolean,Private,N,N,);
Attribute(prefixMapping,java.util.Map,Private,N,N,);
Attribute(currentTargets,java.util.Map,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setBuildFile,void,Public,N,N);
Method(getBuildFile,java.io.File,Public,N,N);
Method(getBuildFileParent,java.io.File,Public,N,N);
Method(getProject,org.apache.tools.ant.Project,Public,N,N);
Method(getCurrentProjectName,java.lang.String,Public,N,N);
Method(setCurrentProjectName,void,Public,N,N);
Method(currentWrapper,org.apache.tools.ant.RuntimeConfigurable,Public,N,N);
Method(parentWrapper,org.apache.tools.ant.RuntimeConfigurable,Public,N,N);
Method(pushWrapper,void,Public,N,N);
Method(popWrapper,void,Public,N,N);
Method(getWrapperStack,java.util.Vector,Public,N,N);
Method(addTarget,void,Public,N,N);
Method(getCurrentTarget,org.apache.tools.ant.Target,Public,N,N);
Method(getImplicitTarget,org.apache.tools.ant.Target,Public,N,N);
Method(setCurrentTarget,void,Public,N,N);
Method(setImplicitTarget,void,Public,N,N);
Method(getTargets,java.util.Vector,Public,N,N);
Method(configureId,void,Public,N,N);
Method(getLocator,org.xml.sax.Locator,Public,N,N);
Method(setLocator,void,Public,N,N);
Method(isIgnoringProjectTag,boolean,Public,N,N);
Method(setIgnoreProjectTag,void,Public,N,N);
Method(startPrefixMapping,void,Public,N,N);
Method(endPrefixMapping,void,Public,N,N);
Method(getPrefixMapping,java.lang.String,Public,N,N);
Method(getCurrentTargets,java.util.Map,Public,N,N);
Method(setCurrentTargets,void,Public,N,N);
Parameter(<init>,org.apache.tools.ant.Project,);
Parameter(setBuildFile,java.io.File,);
Parameter(setCurrentProjectName,java.lang.String,);
Parameter(pushWrapper,org.apache.tools.ant.RuntimeConfigurable,);
Parameter(addTarget,org.apache.tools.ant.Target,);
Parameter(setCurrentTarget,org.apache.tools.ant.Target,);
Parameter(setImplicitTarget,org.apache.tools.ant.Target,);
Parameter(configureId,java.lang.Object,);
Parameter(configureId,org.xml.sax.Attributes,);
Parameter(setLocator,org.xml.sax.Locator,);
Parameter(setIgnoreProjectTag,boolean,);
Parameter(startPrefixMapping,java.lang.String,);
Parameter(startPrefixMapping,java.lang.String,);
Parameter(endPrefixMapping,java.lang.String,);
Parameter(getPrefixMapping,java.lang.String,);
Parameter(setCurrentTargets,java.util.Map,);
Composition(org.apache.tools.ant.Project);
Composition(org.apache.tools.ant.Target);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,<init> --> implicitTarget,org.apache.tools.ant.helper.AntXMLContext,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,<init> --> targetVector,org.apache.tools.ant.helper.AntXMLContext,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,<init> --> targetVector,org.apache.tools.ant.helper.AntXMLContext,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,<init> --> implicitTarget,org.apache.tools.ant.helper.AntXMLContext,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,<init> --> currentTarget,org.apache.tools.ant.helper.AntXMLContext,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,<init> --> wStack,org.apache.tools.ant.helper.AntXMLContext,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,<init> --> ignoreProjectTag,org.apache.tools.ant.helper.AntXMLContext,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,<init> --> prefixMapping,org.apache.tools.ant.helper.AntXMLContext,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,<init> --> currentTargets,org.apache.tools.ant.helper.AntXMLContext,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,<init> --> project,org.apache.tools.ant.helper.AntXMLContext,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,setBuildFile --> implicitTarget,org.apache.tools.ant.helper.AntXMLContext,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,setBuildFile --> buildFile,org.apache.tools.ant.helper.AntXMLContext,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,setBuildFile --> buildFileParent,org.apache.tools.ant.helper.AntXMLContext,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,getBuildFile --> buildFile,org.apache.tools.ant.helper.AntXMLContext,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,getBuildFileParent --> buildFileParent,org.apache.tools.ant.helper.AntXMLContext,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,getProject --> project,org.apache.tools.ant.helper.AntXMLContext,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,getCurrentProjectName --> currentProjectName,org.apache.tools.ant.helper.AntXMLContext,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,setCurrentProjectName --> currentProjectName,org.apache.tools.ant.helper.AntXMLContext,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,currentWrapper --> wStack,org.apache.tools.ant.helper.AntXMLContext,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,parentWrapper --> wStack,org.apache.tools.ant.helper.AntXMLContext,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,pushWrapper --> wStack,org.apache.tools.ant.helper.AntXMLContext,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,popWrapper --> wStack,org.apache.tools.ant.helper.AntXMLContext,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,getWrapperStack --> wStack,org.apache.tools.ant.helper.AntXMLContext,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,addTarget --> targetVector,org.apache.tools.ant.helper.AntXMLContext,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,addTarget --> currentTarget,org.apache.tools.ant.helper.AntXMLContext,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,getCurrentTarget --> currentTarget,org.apache.tools.ant.helper.AntXMLContext,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,getImplicitTarget --> implicitTarget,org.apache.tools.ant.helper.AntXMLContext,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,setCurrentTarget --> currentTarget,org.apache.tools.ant.helper.AntXMLContext,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,setImplicitTarget --> implicitTarget,org.apache.tools.ant.helper.AntXMLContext,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,getTargets --> targetVector,org.apache.tools.ant.helper.AntXMLContext,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,configureId --> project,org.apache.tools.ant.helper.AntXMLContext,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,getLocator --> locator,org.apache.tools.ant.helper.AntXMLContext,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,setLocator --> locator,org.apache.tools.ant.helper.AntXMLContext,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,isIgnoringProjectTag --> ignoreProjectTag,org.apache.tools.ant.helper.AntXMLContext,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,setIgnoreProjectTag --> ignoreProjectTag,org.apache.tools.ant.helper.AntXMLContext,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,startPrefixMapping --> prefixMapping,org.apache.tools.ant.helper.AntXMLContext,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,endPrefixMapping --> prefixMapping,org.apache.tools.ant.helper.AntXMLContext,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,getPrefixMapping --> prefixMapping,org.apache.tools.ant.helper.AntXMLContext,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,getCurrentTargets --> currentTargets,org.apache.tools.ant.helper.AntXMLContext,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.AntXMLContext,setCurrentTargets --> currentTargets,org.apache.tools.ant.helper.AntXMLContext,WRITE);
Call(METHOD,org.apache.tools.ant.helper.AntXMLContext,<init> --> <init>,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.AntXMLContext,<init> --> setProject,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.AntXMLContext,<init> --> setName,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.AntXMLContext,setBuildFile --> <init>$2,org.apache.tools.ant.Location,);
Call(METHOD,org.apache.tools.ant.helper.AntXMLContext,setBuildFile --> setLocation,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.AntXMLContext,configureId --> addIdReference,org.apache.tools.ant.Project,);
EndClass 110
StartClass 111
Class(org.apache.tools.ant.helper.ProjectHelper2$MainHandler,N,N,Public);
Method(<init>,void,Public,N,N);
Method(onStartChild,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,Public,N,N);
Parameter(onStartChild,java.lang.String,);
Parameter(onStartChild,java.lang.String,);
Parameter(onStartChild,java.lang.String,);
Parameter(onStartChild,org.xml.sax.Attributes,);
Parameter(onStartChild,org.apache.tools.ant.helper.AntXMLContext,);
SuperClass(org.apache.tools.ant.helper.ProjectHelper2$AntHandler);
Generalization(org.apache.tools.ant.helper.ProjectHelper2$AntHandler);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$MainHandler,<init> --> <init>,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$MainHandler,onStartChild --> access$200,org.apache.tools.ant.helper.ProjectHelper2,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$MainHandler,onStartChild --> getLocator,org.apache.tools.ant.helper.AntXMLContext,);
EndClass 111
StartClass 112
Class(org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,N,N,Public);
Method(<init>,void,Public,N,N);
Method(onStartElement,void,Public,N,N);
Method(onStartChild,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,Public,N,N);
Method(onEndElement,void,Public,N,N);
Parameter(onStartElement,java.lang.String,);
Parameter(onStartElement,java.lang.String,);
Parameter(onStartElement,java.lang.String,);
Parameter(onStartElement,org.xml.sax.Attributes,);
Parameter(onStartElement,org.apache.tools.ant.helper.AntXMLContext,);
Parameter(onStartChild,java.lang.String,);
Parameter(onStartChild,java.lang.String,);
Parameter(onStartChild,java.lang.String,);
Parameter(onStartChild,org.xml.sax.Attributes,);
Parameter(onStartChild,org.apache.tools.ant.helper.AntXMLContext,);
Parameter(onEndElement,java.lang.String,);
Parameter(onEndElement,java.lang.String,);
Parameter(onEndElement,org.apache.tools.ant.helper.AntXMLContext,);
SuperClass(org.apache.tools.ant.helper.ProjectHelper2$AntHandler);
Generalization(org.apache.tools.ant.helper.ProjectHelper2$AntHandler);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,<init> --> <init>,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onStartElement --> getProject,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onStartElement --> <init>,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onStartElement --> setProject,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onStartElement --> getLocator,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onStartElement --> <init>$3,org.apache.tools.ant.Location,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onStartElement --> setLocation,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onStartElement --> addTarget,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onStartElement --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onStartElement --> setIf,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onStartElement --> setUnless,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onStartElement --> addReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onStartElement --> setDescription,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onStartElement --> getCurrentTargets,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onStartElement --> getLocation,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onStartElement --> <init>$6,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onStartElement --> getTargets,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onStartElement --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onStartElement --> setName,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onStartElement --> addOrReplaceTarget$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onStartElement --> setDepends,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onStartElement --> isIgnoringProjectTag,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onStartElement --> getCurrentProjectName,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onStartElement --> <init>$2,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onStartChild --> access$400,org.apache.tools.ant.helper.ProjectHelper2,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onEndElement --> getImplicitTarget,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$TargetHandler,onEndElement --> setCurrentTarget,org.apache.tools.ant.helper.AntXMLContext,);
EndClass 112
StartClass 113
Class(org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,N,N,Public);
Method(<init>,void,Public,N,N);
Method(onStartElement,void,Public,N,N);
Method(onStartChild,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,Public,N,N);
Parameter(onStartElement,java.lang.String,);
Parameter(onStartElement,java.lang.String,);
Parameter(onStartElement,java.lang.String,);
Parameter(onStartElement,org.xml.sax.Attributes,);
Parameter(onStartElement,org.apache.tools.ant.helper.AntXMLContext,);
Parameter(onStartChild,java.lang.String,);
Parameter(onStartChild,java.lang.String,);
Parameter(onStartChild,java.lang.String,);
Parameter(onStartChild,org.xml.sax.Attributes,);
Parameter(onStartChild,org.apache.tools.ant.helper.AntXMLContext,);
SuperClass(org.apache.tools.ant.helper.ProjectHelper2$AntHandler);
Generalization(org.apache.tools.ant.helper.ProjectHelper2$AntHandler);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,<init> --> <init>,org.apache.tools.ant.helper.ProjectHelper2$AntHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,onStartElement --> getProject,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,onStartElement --> getImplicitTarget,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,onStartElement --> getLocator,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,onStartElement --> <init>$3,org.apache.tools.ant.Location,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,onStartElement --> setLocation,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,onStartElement --> isIgnoringProjectTag,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,onStartElement --> setDefault,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,onStartElement --> setCurrentProjectName,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,onStartElement --> setName,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,onStartElement --> addReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,onStartElement --> getCurrentProjectName,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,onStartElement --> getProperty,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,onStartElement --> getBuildFile,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,onStartElement --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,onStartElement --> setUserProperty,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,onStartElement --> setBasedir,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,onStartElement --> getBuildFileParent,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,onStartElement --> access$100,org.apache.tools.ant.helper.ProjectHelper2,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,onStartElement --> resolveFile,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,onStartElement --> setBaseDir,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,onStartElement --> addTarget$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,onStartElement --> setCurrentTarget,org.apache.tools.ant.helper.AntXMLContext,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,onStartChild --> access$300,org.apache.tools.ant.helper.ProjectHelper2,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler,onStartChild --> access$400,org.apache.tools.ant.helper.ProjectHelper2,);
EndClass 113
StartClass 114
Class(org.apache.tools.ant.types.resources.selectors.ResourceSelector,Y,Y,Public);
Method(isSelected,boolean,Public,N,Y);
Parameter(isSelected,org.apache.tools.ant.types.Resource,);
EndClass 114
StartClass 115
Class(org.apache.tools.ant.util.FileNameMapper,Y,Y,Public);
Method(setFrom,void,Public,N,Y);
Method(setTo,void,Public,N,Y);
Method(mapFileName,java.lang.String[],Public,N,Y);
Parameter(setFrom,java.lang.String,);
Parameter(setTo,java.lang.String,);
Parameter(mapFileName,java.lang.String,);
EndClass 115
StartClass 116
Class(org.apache.tools.ant.types.resources.selectors.Not,N,N,Public);
Attribute(sel,org.apache.tools.ant.types.resources.selectors.ResourceSelector,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(add,void,Public,N,N);
Method(isSelected,boolean,Public,N,N);
Parameter(<init>$2,org.apache.tools.ant.types.resources.selectors.ResourceSelector,);
Parameter(add,org.apache.tools.ant.types.resources.selectors.ResourceSelector,);
Parameter(isSelected,org.apache.tools.ant.types.Resource,);
Realization(org.apache.tools.ant.types.resources.selectors.ResourceSelector);
Composition(org.apache.tools.ant.types.resources.selectors.ResourceSelector);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.Not,<init>$2 --> add,org.apache.tools.ant.types.resources.selectors.Not,);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Not,add --> sel,org.apache.tools.ant.types.resources.selectors.Not,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Not,add --> sel,org.apache.tools.ant.types.resources.selectors.Not,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Not,isSelected --> sel,org.apache.tools.ant.types.resources.selectors.Not,READ);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.Not,isSelected --> isSelected,org.apache.tools.ant.types.resources.selectors.ResourceSelector,);
EndClass 116
StartClass 117
Class(org.apache.tools.ant.types.resources.selectors.Exists,N,N,Public);
Method(<init>,void,Public,N,N);
Method(isSelected,boolean,Public,N,N);
Parameter(isSelected,org.apache.tools.ant.types.Resource,);
Realization(org.apache.tools.ant.types.resources.selectors.ResourceSelector);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.Exists,isSelected --> isExists,org.apache.tools.ant.types.Resource,);
EndClass 117
StartClass 118
Class(org.apache.tools.ant.types.TimeComparison,N,N,Public);
Attribute(VALUES,java.lang.String[],Private,Y,Y,);
Attribute(FILE_UTILS,org.apache.tools.ant.util.FileUtils,Private,Y,Y,);
Attribute(BEFORE,org.apache.tools.ant.types.TimeComparison,Public,Y,Y,);
Attribute(AFTER,org.apache.tools.ant.types.TimeComparison,Public,Y,Y,);
Attribute(EQUAL,org.apache.tools.ant.types.TimeComparison,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getValues,java.lang.String[],Public,N,N);
Method(evaluate,boolean,Public,N,N);
Method(evaluate$2,boolean,Public,N,N);
Method(compare,int,Public,Y,N);
Method(compare$2,int,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>$2,java.lang.String,);
Parameter(evaluate,long,);
Parameter(evaluate,long,);
Parameter(evaluate$2,long,);
Parameter(evaluate$2,long,);
Parameter(evaluate$2,long,);
Parameter(compare,long,);
Parameter(compare,long,);
Parameter(compare$2,long,);
Parameter(compare$2,long,);
Parameter(compare$2,long,);
SuperClass(org.apache.tools.ant.types.EnumeratedAttribute);
SubClass(org.apache.tools.ant.types.selectors.DateSelector$TimeComparisons);
Generalization(org.apache.tools.ant.types.EnumeratedAttribute);
Composition(org.apache.tools.ant.util.FileUtils);
Composition(org.apache.tools.ant.types.TimeComparison);
Call(METHOD,org.apache.tools.ant.types.TimeComparison,evaluate --> evaluate$2,org.apache.tools.ant.types.TimeComparison,);
Call(METHOD,org.apache.tools.ant.types.TimeComparison,compare --> compare$2,org.apache.tools.ant.types.TimeComparison,);
Call(METHOD,org.apache.tools.ant.types.TimeComparison,<clinit> --> <init>$2,org.apache.tools.ant.types.TimeComparison,);
Call(ATTRIBUTE,org.apache.tools.ant.types.TimeComparison,getValues --> VALUES,org.apache.tools.ant.types.TimeComparison,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.TimeComparison,evaluate --> FILE_UTILS,org.apache.tools.ant.types.TimeComparison,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.TimeComparison,compare --> FILE_UTILS,org.apache.tools.ant.types.TimeComparison,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.TimeComparison,<clinit> --> VALUES,org.apache.tools.ant.types.TimeComparison,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.TimeComparison,<clinit> --> FILE_UTILS,org.apache.tools.ant.types.TimeComparison,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.TimeComparison,<clinit> --> BEFORE,org.apache.tools.ant.types.TimeComparison,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.TimeComparison,<clinit> --> AFTER,org.apache.tools.ant.types.TimeComparison,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.TimeComparison,<clinit> --> EQUAL,org.apache.tools.ant.types.TimeComparison,WRITE);
Call(METHOD,org.apache.tools.ant.types.TimeComparison,<init> --> <init>,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.TimeComparison,<init>$2 --> <init>,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.TimeComparison,<init>$2 --> setValue,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.TimeComparison,evaluate --> getFileTimestampGranularity,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.types.TimeComparison,evaluate$2 --> getIndex,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.TimeComparison,evaluate$2 --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.TimeComparison,compare --> getFileTimestampGranularity,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.types.TimeComparison,<clinit> --> getFileUtils,org.apache.tools.ant.util.FileUtils,);
EndClass 118
StartClass 119
Class(org.apache.tools.ant.types.resources.Resources,N,N,Public);
Attribute(NONE,org.apache.tools.ant.types.ResourceCollection,Public,Y,Y,);
Attribute(EMPTY_ITERATOR,java.util.Iterator,Public,Y,Y,);
Attribute(rc,java.util.Vector,Private,N,N,);
Attribute(coll,java.util.Collection,Private,N,N,);
Attribute(class$org$apache$tools$ant$types$ResourceCollection,java.lang.Class,Public,Y,N,);
Method(<init>,void,Public,N,N);
Method(add,void,Public,N,N);
Method(iterator,java.util.Iterator,Public,N,N);
Method(size,int,Public,N,N);
Method(isFilesystemOnly,boolean,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(dieOnCircularReference,void,Protected,N,N);
Method(getRef,org.apache.tools.ant.types.ResourceCollection,Private,N,N);
Method(validate,void,Private,N,N);
Method(getNested,java.util.List,Private,N,N);
Method(access$000,java.util.List,Public,Y,N);
Method(class$,java.lang.Class,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(add,org.apache.tools.ant.types.ResourceCollection,);
Parameter(dieOnCircularReference,java.util.Stack,);
Parameter(dieOnCircularReference,org.apache.tools.ant.Project,);
Parameter(access$000,org.apache.tools.ant.types.resources.Resources,);
Parameter(class$,java.lang.String,);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.DataType);
Realization(org.apache.tools.ant.types.ResourceCollection);
Composition(org.apache.tools.ant.types.ResourceCollection);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,iterator --> getRef,org.apache.tools.ant.types.resources.Resources,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,iterator --> validate,org.apache.tools.ant.types.resources.Resources,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,size --> getRef,org.apache.tools.ant.types.resources.Resources,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,size --> validate,org.apache.tools.ant.types.resources.Resources,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,isFilesystemOnly --> getRef,org.apache.tools.ant.types.resources.Resources,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,isFilesystemOnly --> validate,org.apache.tools.ant.types.resources.Resources,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,isFilesystemOnly --> getNested,org.apache.tools.ant.types.resources.Resources,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,dieOnCircularReference --> getNested,org.apache.tools.ant.types.resources.Resources,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,getRef --> class$,org.apache.tools.ant.types.resources.Resources,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,access$000 --> getNested,org.apache.tools.ant.types.resources.Resources,);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources,add --> rc,org.apache.tools.ant.types.resources.Resources,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources,add --> rc,org.apache.tools.ant.types.resources.Resources,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources,add --> coll,org.apache.tools.ant.types.resources.Resources,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources,iterator --> coll,org.apache.tools.ant.types.resources.Resources,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources,size --> coll,org.apache.tools.ant.types.resources.Resources,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources,toString --> coll,org.apache.tools.ant.types.resources.Resources,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources,getRef --> class$org$apache$tools$ant$types$ResourceCollection,org.apache.tools.ant.types.resources.Resources,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources,getRef --> class$org$apache$tools$ant$types$ResourceCollection,org.apache.tools.ant.types.resources.Resources,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources,validate --> coll,org.apache.tools.ant.types.resources.Resources,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources,validate --> coll,org.apache.tools.ant.types.resources.Resources,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources,getNested --> rc,org.apache.tools.ant.types.resources.Resources,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources,<clinit> --> NONE,org.apache.tools.ant.types.resources.Resources,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources,<clinit> --> EMPTY_ITERATOR,org.apache.tools.ant.types.resources.Resources,WRITE);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,<init> --> <init>,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,add --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,add --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,add --> invalidate,org.apache.tools.ant.types.resources.FailFast,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,add --> setChecked,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,iterator --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,iterator --> iterator,org.apache.tools.ant.types.ResourceCollection,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,iterator --> <init>,org.apache.tools.ant.types.resources.FailFast,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,size --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,size --> size,org.apache.tools.ant.types.ResourceCollection,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,isFilesystemOnly --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,isFilesystemOnly --> isFilesystemOnly,org.apache.tools.ant.types.ResourceCollection,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,toString --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,toString --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,dieOnCircularReference --> isChecked,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,dieOnCircularReference --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,dieOnCircularReference --> dieOnCircularReference$3,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,dieOnCircularReference --> invokeCircularReferenceCheck,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,dieOnCircularReference --> setChecked,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,getRef --> getCheckedRef$3,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,validate --> dieOnCircularReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,validate --> <init>,org.apache.tools.ant.types.resources.Resources$MyCollection,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,<clinit> --> <init>,org.apache.tools.ant.types.resources.Resources$1,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources,<clinit> --> <init>,org.apache.tools.ant.types.resources.Resources$2,);
EndClass 119
StartClass 120
Class(org.apache.tools.ant.types.resources.selectors.Type,N,N,Public);
Attribute(FILE_ATTR,java.lang.String,Private,Y,Y,);
Attribute(DIR_ATTR,java.lang.String,Private,Y,Y,);
Attribute(FILE,org.apache.tools.ant.types.resources.selectors.Type,Public,Y,Y,);
Attribute(DIR,org.apache.tools.ant.types.resources.selectors.Type,Public,Y,Y,);
Attribute(type,org.apache.tools.ant.types.resources.selectors.Type$FileDir,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(setType,void,Public,N,N);
Method(isSelected,boolean,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>$2,org.apache.tools.ant.types.resources.selectors.Type$FileDir,);
Parameter(setType,org.apache.tools.ant.types.resources.selectors.Type$FileDir,);
Parameter(isSelected,org.apache.tools.ant.types.Resource,);
Realization(org.apache.tools.ant.types.resources.selectors.ResourceSelector);
Composition(org.apache.tools.ant.types.resources.selectors.Type);
Composition(org.apache.tools.ant.types.resources.selectors.Type$FileDir);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.Type,<init>$2 --> setType,org.apache.tools.ant.types.resources.selectors.Type,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.Type,<clinit> --> <init>$2,org.apache.tools.ant.types.resources.selectors.Type,);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Type,<init> --> type,org.apache.tools.ant.types.resources.selectors.Type,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Type,<init>$2 --> type,org.apache.tools.ant.types.resources.selectors.Type,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Type,setType --> type,org.apache.tools.ant.types.resources.selectors.Type,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Type,isSelected --> type,org.apache.tools.ant.types.resources.selectors.Type,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Type,<clinit> --> FILE,org.apache.tools.ant.types.resources.selectors.Type,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Type,<clinit> --> DIR,org.apache.tools.ant.types.resources.selectors.Type,WRITE);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.Type,isSelected --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.Type,isSelected --> getIndex,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.Type,isSelected --> isDirectory,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.Type,<clinit> --> <init>$2,org.apache.tools.ant.types.resources.selectors.Type$FileDir,);
EndClass 120
StartClass 121
Class(org.apache.tools.ant.types.resources.selectors.And,N,N,Public);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(isSelected,boolean,Public,N,N);
Parameter(<init>$2,org.apache.tools.ant.types.resources.selectors.ResourceSelector[],);
Parameter(isSelected,org.apache.tools.ant.types.Resource,);
SuperClass(org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer);
Realization(org.apache.tools.ant.types.resources.selectors.ResourceSelector);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.And,<init> --> <init>,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.And,<init>$2 --> <init>$2,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.And,isSelected --> getSelectors,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.And,isSelected --> isSelected,org.apache.tools.ant.types.resources.selectors.ResourceSelector,);
EndClass 121
StartClass 122
Class(org.apache.tools.ant.util.LineTokenizer,N,N,Public);
Attribute(lineEnd,java.lang.String,Private,N,N,);
Attribute(pushed,int,Private,N,N,);
Attribute(includeDelims,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setIncludeDelims,void,Public,N,N);
Method(getToken,java.lang.String,Public,N,N);
Method(getPostToken,java.lang.String,Public,N,N);
Parameter(setIncludeDelims,boolean,);
Parameter(getToken,java.io.Reader,);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.ProjectComponent);
Realization(org.apache.tools.ant.util.Tokenizer);
Call(ATTRIBUTE,org.apache.tools.ant.util.LineTokenizer,<init> --> lineEnd,org.apache.tools.ant.util.LineTokenizer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.LineTokenizer,<init> --> pushed,org.apache.tools.ant.util.LineTokenizer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.LineTokenizer,<init> --> includeDelims,org.apache.tools.ant.util.LineTokenizer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.LineTokenizer,setIncludeDelims --> includeDelims,org.apache.tools.ant.util.LineTokenizer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.LineTokenizer,getToken --> pushed,org.apache.tools.ant.util.LineTokenizer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.LineTokenizer,getToken --> includeDelims,org.apache.tools.ant.util.LineTokenizer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.LineTokenizer,getToken --> lineEnd,org.apache.tools.ant.util.LineTokenizer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.LineTokenizer,getToken --> pushed,org.apache.tools.ant.util.LineTokenizer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.LineTokenizer,getToken --> lineEnd,org.apache.tools.ant.util.LineTokenizer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.LineTokenizer,getPostToken --> includeDelims,org.apache.tools.ant.util.LineTokenizer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.LineTokenizer,getPostToken --> lineEnd,org.apache.tools.ant.util.LineTokenizer,READ);
Call(METHOD,org.apache.tools.ant.util.LineTokenizer,<init> --> <init>,org.apache.tools.ant.ProjectComponent,);
EndClass 122
StartClass 123
Class(org.apache.tools.ant.types.resources.selectors.Date,N,N,Public);
Attribute(MILLIS_OR_DATETIME,java.lang.String,Private,Y,Y,);
Attribute(FILE_UTILS,org.apache.tools.ant.util.FileUtils,Private,Y,Y,);
Attribute(millis,java.lang.Long,Private,N,N,);
Attribute(dateTime,java.lang.String,Private,N,N,);
Attribute(pattern,java.lang.String,Private,N,N,);
Attribute(when,org.apache.tools.ant.types.TimeComparison,Private,N,N,);
Attribute(granularity,long,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setMillis,void,Public,N,N);
Method(getMillis,long,Public,N,N);
Method(setDateTime,void,Public,N,N);
Method(getDatetime,java.lang.String,Public,N,N);
Method(setGranularity,void,Public,N,N);
Method(getGranularity,long,Public,N,N);
Method(setPattern,void,Public,N,N);
Method(getPattern,java.lang.String,Public,N,N);
Method(setWhen,void,Public,N,N);
Method(getWhen,org.apache.tools.ant.types.TimeComparison,Public,N,N);
Method(isSelected,boolean,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(setMillis,long,);
Parameter(setDateTime,java.lang.String,);
Parameter(setGranularity,long,);
Parameter(setPattern,java.lang.String,);
Parameter(setWhen,org.apache.tools.ant.types.TimeComparison,);
Parameter(isSelected,org.apache.tools.ant.types.Resource,);
Realization(org.apache.tools.ant.types.resources.selectors.ResourceSelector);
Composition(org.apache.tools.ant.util.FileUtils);
Composition(org.apache.tools.ant.types.TimeComparison);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.Date,isSelected --> setMillis,org.apache.tools.ant.types.resources.selectors.Date,);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Date,<init> --> FILE_UTILS,org.apache.tools.ant.types.resources.selectors.Date,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Date,<init> --> millis,org.apache.tools.ant.types.resources.selectors.Date,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Date,<init> --> dateTime,org.apache.tools.ant.types.resources.selectors.Date,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Date,<init> --> pattern,org.apache.tools.ant.types.resources.selectors.Date,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Date,<init> --> when,org.apache.tools.ant.types.resources.selectors.Date,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Date,<init> --> granularity,org.apache.tools.ant.types.resources.selectors.Date,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Date,setMillis --> millis,org.apache.tools.ant.types.resources.selectors.Date,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Date,getMillis --> millis,org.apache.tools.ant.types.resources.selectors.Date,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Date,setDateTime --> dateTime,org.apache.tools.ant.types.resources.selectors.Date,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Date,setDateTime --> millis,org.apache.tools.ant.types.resources.selectors.Date,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Date,getDatetime --> dateTime,org.apache.tools.ant.types.resources.selectors.Date,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Date,setGranularity --> granularity,org.apache.tools.ant.types.resources.selectors.Date,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Date,getGranularity --> granularity,org.apache.tools.ant.types.resources.selectors.Date,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Date,setPattern --> pattern,org.apache.tools.ant.types.resources.selectors.Date,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Date,getPattern --> pattern,org.apache.tools.ant.types.resources.selectors.Date,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Date,setWhen --> when,org.apache.tools.ant.types.resources.selectors.Date,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Date,getWhen --> when,org.apache.tools.ant.types.resources.selectors.Date,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Date,isSelected --> dateTime,org.apache.tools.ant.types.resources.selectors.Date,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Date,isSelected --> millis,org.apache.tools.ant.types.resources.selectors.Date,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Date,isSelected --> pattern,org.apache.tools.ant.types.resources.selectors.Date,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Date,isSelected --> when,org.apache.tools.ant.types.resources.selectors.Date,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Date,isSelected --> granularity,org.apache.tools.ant.types.resources.selectors.Date,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Date,<clinit> --> FILE_UTILS,org.apache.tools.ant.types.resources.selectors.Date,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Date,<init> --> EQUAL,org.apache.tools.ant.types.TimeComparison,READ);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.Date,<init> --> getFileTimestampGranularity,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.Date,isSelected --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.Date,isSelected --> getLastModified,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.Date,isSelected --> evaluate$2,org.apache.tools.ant.types.TimeComparison,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.Date,<clinit> --> getFileUtils,org.apache.tools.ant.util.FileUtils,);
EndClass 123
StartClass 124
Class(org.apache.tools.ant.types.resources.Restrict,N,N,Public);
Attribute(w,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(add,void,Public,N,N);
Method(setCache,void,Public,N,N);
Method(isCache,boolean,Public,N,N);
Method(add$2,void,Public,N,N);
Method(iterator,java.util.Iterator,Public,N,N);
Method(size,int,Public,N,N);
Method(isFilesystemOnly,boolean,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(access$000,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,Public,Y,N);
Parameter(add,org.apache.tools.ant.types.ResourceCollection,);
Parameter(setCache,boolean,);
Parameter(add$2,org.apache.tools.ant.types.resources.selectors.ResourceSelector,);
Parameter(access$000,org.apache.tools.ant.types.resources.Restrict,);
SuperClass(org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer);
Realization(org.apache.tools.ant.types.ResourceCollection);
Composition(org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,iterator --> iterator,org.apache.tools.ant.types.resources.Restrict,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,size --> size,org.apache.tools.ant.types.resources.Restrict,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,isFilesystemOnly --> isFilesystemOnly,org.apache.tools.ant.types.resources.Restrict,);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Restrict,<init> --> w,org.apache.tools.ant.types.resources.Restrict,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Restrict,add --> w,org.apache.tools.ant.types.resources.Restrict,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Restrict,setCache --> w,org.apache.tools.ant.types.resources.Restrict,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Restrict,isCache --> w,org.apache.tools.ant.types.resources.Restrict,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Restrict,iterator --> w,org.apache.tools.ant.types.resources.Restrict,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Restrict,size --> w,org.apache.tools.ant.types.resources.Restrict,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Restrict,isFilesystemOnly --> w,org.apache.tools.ant.types.resources.Restrict,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Restrict,toString --> w,org.apache.tools.ant.types.resources.Restrict,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Restrict,access$000 --> w,org.apache.tools.ant.types.resources.Restrict,READ);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,<init> --> <init>,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,<init> --> <init>,org.apache.tools.ant.types.resources.Restrict$1,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,add --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,add --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,add --> add,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,setCache --> setCache,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,isCache --> isCache,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,add$2 --> add,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,add$2 --> invalidate,org.apache.tools.ant.types.resources.FailFast,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,iterator --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,iterator --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,iterator --> dieOnCircularReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,iterator --> iterator,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,size --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,size --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,size --> dieOnCircularReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,size --> size,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,isFilesystemOnly --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,isFilesystemOnly --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,isFilesystemOnly --> dieOnCircularReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,isFilesystemOnly --> isFilesystemOnly,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,toString --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,toString --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,toString --> dieOnCircularReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict,toString --> toString,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,);
EndClass 124
StartClass 125
Class(org.apache.tools.ant.util.ResourceUtils$1,N,N,NA);
EndClass 125
StartClass 126
Class(org.apache.tools.ant.filters.util.ChainReaderHelper,N,N,Public);
Attribute(DEFAULT_BUFFER_SIZE,int,Private,Y,Y,);
Attribute(primaryReader,java.io.Reader,Public,N,N,);
Attribute(bufferSize,int,Public,N,N,);
Attribute(filterChains,java.util.Vector,Public,N,N,);
Attribute(project,org.apache.tools.ant.Project,Private,N,N,);
Attribute(class$java$io$FilterReader,java.lang.Class,Public,Y,N,);
Attribute(class$java$io$Reader,java.lang.Class,Public,Y,N,);
Attribute(class$org$apache$tools$ant$types$Parameterizable,java.lang.Class,Public,Y,N,);
Method(<init>,void,Public,N,N);
Method(setPrimaryReader,void,Public,N,N);
Method(setProject,void,Public,N,N);
Method(getProject,org.apache.tools.ant.Project,Public,N,N);
Method(setBufferSize,void,Public,N,N);
Method(setFilterChains,void,Public,N,N);
Method(getAssembledReader,java.io.Reader,Public,N,N);
Method(setProjectOnObject,void,Private,N,N);
Method(readFully,java.lang.String,Public,N,N);
Method(class$,java.lang.Class,Public,Y,N);
Parameter(setPrimaryReader,java.io.Reader,);
Parameter(setProject,org.apache.tools.ant.Project,);
Parameter(setBufferSize,int,);
Parameter(setFilterChains,java.util.Vector,);
Parameter(setProjectOnObject,java.lang.Object,);
Parameter(readFully,java.io.Reader,);
Parameter(class$,java.lang.String,);
Composition(org.apache.tools.ant.Project);
Call(METHOD,org.apache.tools.ant.filters.util.ChainReaderHelper,getAssembledReader --> class$,org.apache.tools.ant.filters.util.ChainReaderHelper,);
Call(METHOD,org.apache.tools.ant.filters.util.ChainReaderHelper,getAssembledReader --> setProjectOnObject,org.apache.tools.ant.filters.util.ChainReaderHelper,);
Call(ATTRIBUTE,org.apache.tools.ant.filters.util.ChainReaderHelper,<init> --> bufferSize,org.apache.tools.ant.filters.util.ChainReaderHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.util.ChainReaderHelper,<init> --> filterChains,org.apache.tools.ant.filters.util.ChainReaderHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.util.ChainReaderHelper,<init> --> project,org.apache.tools.ant.filters.util.ChainReaderHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.util.ChainReaderHelper,setPrimaryReader --> primaryReader,org.apache.tools.ant.filters.util.ChainReaderHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.util.ChainReaderHelper,setProject --> project,org.apache.tools.ant.filters.util.ChainReaderHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.util.ChainReaderHelper,getProject --> project,org.apache.tools.ant.filters.util.ChainReaderHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.util.ChainReaderHelper,setBufferSize --> bufferSize,org.apache.tools.ant.filters.util.ChainReaderHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.util.ChainReaderHelper,setFilterChains --> filterChains,org.apache.tools.ant.filters.util.ChainReaderHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.util.ChainReaderHelper,getAssembledReader --> primaryReader,org.apache.tools.ant.filters.util.ChainReaderHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.util.ChainReaderHelper,getAssembledReader --> filterChains,org.apache.tools.ant.filters.util.ChainReaderHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.util.ChainReaderHelper,getAssembledReader --> class$java$io$FilterReader,org.apache.tools.ant.filters.util.ChainReaderHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.util.ChainReaderHelper,getAssembledReader --> class$java$io$Reader,org.apache.tools.ant.filters.util.ChainReaderHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.util.ChainReaderHelper,getAssembledReader --> class$org$apache$tools$ant$types$Parameterizable,org.apache.tools.ant.filters.util.ChainReaderHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.util.ChainReaderHelper,getAssembledReader --> class$java$io$FilterReader,org.apache.tools.ant.filters.util.ChainReaderHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.util.ChainReaderHelper,getAssembledReader --> class$java$io$Reader,org.apache.tools.ant.filters.util.ChainReaderHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.util.ChainReaderHelper,getAssembledReader --> class$org$apache$tools$ant$types$Parameterizable,org.apache.tools.ant.filters.util.ChainReaderHelper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.util.ChainReaderHelper,setProjectOnObject --> project,org.apache.tools.ant.filters.util.ChainReaderHelper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.util.ChainReaderHelper,readFully --> bufferSize,org.apache.tools.ant.filters.util.ChainReaderHelper,READ);
Call(METHOD,org.apache.tools.ant.filters.util.ChainReaderHelper,getAssembledReader --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.filters.util.ChainReaderHelper,getAssembledReader --> getFilterReaders,org.apache.tools.ant.types.FilterChain,);
Call(METHOD,org.apache.tools.ant.filters.util.ChainReaderHelper,getAssembledReader --> getClassName,org.apache.tools.ant.types.AntFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.util.ChainReaderHelper,getAssembledReader --> getClasspath,org.apache.tools.ant.types.AntFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.util.ChainReaderHelper,getAssembledReader --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.filters.util.ChainReaderHelper,getAssembledReader --> createClassLoader,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.filters.util.ChainReaderHelper,getAssembledReader --> getParams,org.apache.tools.ant.types.AntFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.util.ChainReaderHelper,getAssembledReader --> setParameters,org.apache.tools.ant.types.Parameterizable,);
Call(METHOD,org.apache.tools.ant.filters.util.ChainReaderHelper,getAssembledReader --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.filters.util.ChainReaderHelper,getAssembledReader --> chain,org.apache.tools.ant.filters.ChainableReader,);
Call(METHOD,org.apache.tools.ant.filters.util.ChainReaderHelper,setProjectOnObject --> setProject,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.util.ChainReaderHelper,setProjectOnObject --> setProjectReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.filters.util.ChainReaderHelper,readFully --> readFully$2,org.apache.tools.ant.util.FileUtils,);
EndClass 126
StartClass 127
Class(org.apache.tools.ant.util.ResourceUtils$Outdated,N,N,NA);
Attribute(control,org.apache.tools.ant.types.Resource,Private,N,N,);
Attribute(granularity,long,Private,N,N,);
Method(<init>,void,Private,N,N);
Method(isSelected,boolean,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>,org.apache.tools.ant.types.Resource,);
Parameter(<init>,long,);
Parameter(isSelected,org.apache.tools.ant.types.Resource,);
Parameter(<init>$2,org.apache.tools.ant.types.Resource,);
Parameter(<init>$2,long,);
Parameter(<init>$2,org.apache.tools.ant.util.ResourceUtils$1,);
Realization(org.apache.tools.ant.types.resources.selectors.ResourceSelector);
Composition(org.apache.tools.ant.types.Resource);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils$Outdated,<init>$2 --> <init>,org.apache.tools.ant.util.ResourceUtils$Outdated,);
Call(ATTRIBUTE,org.apache.tools.ant.util.ResourceUtils$Outdated,<init> --> control,org.apache.tools.ant.util.ResourceUtils$Outdated,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.ResourceUtils$Outdated,<init> --> granularity,org.apache.tools.ant.util.ResourceUtils$Outdated,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.ResourceUtils$Outdated,isSelected --> control,org.apache.tools.ant.util.ResourceUtils$Outdated,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.ResourceUtils$Outdated,isSelected --> granularity,org.apache.tools.ant.util.ResourceUtils$Outdated,READ);
Call(METHOD,org.apache.tools.ant.util.ResourceUtils$Outdated,isSelected --> isOutOfDate$3,org.apache.tools.ant.types.selectors.SelectorUtils,);
EndClass 127
StartClass 128
Class(org.apache.tools.ant.types.resources.selectors.Or,N,N,Public);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(isSelected,boolean,Public,N,N);
Parameter(<init>$2,org.apache.tools.ant.types.resources.selectors.ResourceSelector[],);
Parameter(isSelected,org.apache.tools.ant.types.Resource,);
SuperClass(org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer);
Realization(org.apache.tools.ant.types.resources.selectors.ResourceSelector);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.Or,<init> --> <init>,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.Or,<init>$2 --> <init>$2,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.Or,isSelected --> getSelectors,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.Or,isSelected --> isSelected,org.apache.tools.ant.types.resources.selectors.ResourceSelector,);
EndClass 128
StartClass 129
Class(org.apache.tools.ant.taskdefs.condition.Condition,Y,Y,Public);
Method(eval,boolean,Public,N,Y);
EndClass 129
StartClass 130
Class(org.apache.tools.ant.util.CollectionUtils$1,N,N,NA);
Attribute(val$iter,java.util.Iterator,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(hasMoreElements,boolean,Public,N,N);
Method(nextElement,java.lang.Object,Public,N,N);
Parameter(<init>,java.util.Iterator,);
Call(ATTRIBUTE,org.apache.tools.ant.util.CollectionUtils$1,<init> --> val$iter,org.apache.tools.ant.util.CollectionUtils$1,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.CollectionUtils$1,hasMoreElements --> val$iter,org.apache.tools.ant.util.CollectionUtils$1,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.CollectionUtils$1,nextElement --> val$iter,org.apache.tools.ant.util.CollectionUtils$1,READ);
EndClass 130
StartClass 131
Class(org.apache.tools.ant.util.CollectionUtils$2,N,N,NA);
Attribute(val$e,java.util.Enumeration,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(hasNext,boolean,Public,N,N);
Method(next,java.lang.Object,Public,N,N);
Method(remove,void,Public,N,N);
Parameter(<init>,java.util.Enumeration,);
Call(ATTRIBUTE,org.apache.tools.ant.util.CollectionUtils$2,<init> --> val$e,org.apache.tools.ant.util.CollectionUtils$2,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.CollectionUtils$2,hasNext --> val$e,org.apache.tools.ant.util.CollectionUtils$2,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.CollectionUtils$2,next --> val$e,org.apache.tools.ant.util.CollectionUtils$2,READ);
EndClass 131
StartClass 132
Class(org.apache.tools.ant.util.CollectionUtils$CompoundEnumeration,N,N,NA);
Attribute(e1,java.util.Enumeration,Private,N,Y,);
Attribute(e2,java.util.Enumeration,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(hasMoreElements,boolean,Public,N,N);
Method(nextElement,java.lang.Object,Public,N,N);
Parameter(<init>,java.util.Enumeration,);
Parameter(<init>,java.util.Enumeration,);
Call(ATTRIBUTE,org.apache.tools.ant.util.CollectionUtils$CompoundEnumeration,<init> --> e1,org.apache.tools.ant.util.CollectionUtils$CompoundEnumeration,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.CollectionUtils$CompoundEnumeration,<init> --> e2,org.apache.tools.ant.util.CollectionUtils$CompoundEnumeration,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.CollectionUtils$CompoundEnumeration,hasMoreElements --> e1,org.apache.tools.ant.util.CollectionUtils$CompoundEnumeration,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.CollectionUtils$CompoundEnumeration,hasMoreElements --> e2,org.apache.tools.ant.util.CollectionUtils$CompoundEnumeration,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.CollectionUtils$CompoundEnumeration,nextElement --> e1,org.apache.tools.ant.util.CollectionUtils$CompoundEnumeration,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.CollectionUtils$CompoundEnumeration,nextElement --> e2,org.apache.tools.ant.util.CollectionUtils$CompoundEnumeration,READ);
EndClass 132
StartClass 133
Class(org.apache.tools.ant.util.IdentityStack,N,N,Public);
Method(getInstance,org.apache.tools.ant.util.IdentityStack,Public,Y,N);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(contains,boolean,Public,N,N);
Method(indexOf,int,Public,N,N);
Method(lastIndexOf,int,Public,N,N);
Parameter(getInstance,java.util.Stack,);
Parameter(<init>$2,java.lang.Object,);
Parameter(contains,java.lang.Object,);
Parameter(indexOf,java.lang.Object,);
Parameter(indexOf,int,);
Parameter(lastIndexOf,java.lang.Object,);
Parameter(lastIndexOf,int,);
Call(METHOD,org.apache.tools.ant.util.IdentityStack,getInstance --> <init>,org.apache.tools.ant.util.IdentityStack,);
EndClass 133
StartClass 134
Class(org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,N,N,NA);
Attribute(target,org.apache.tools.ant.Target,Private,N,N,);
Attribute(element,java.lang.Object,Private,N,N,);
Attribute(wrapper,org.apache.tools.ant.RuntimeConfigurable,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(init,void,Public,N,N);
Method(characters,void,Public,N,N);
Method(startElement,void,Public,N,N);
Parameter(<init>,org.apache.tools.ant.helper.ProjectHelperImpl,);
Parameter(<init>,org.xml.sax.DocumentHandler,);
Parameter(<init>,org.apache.tools.ant.Target,);
Parameter(init,java.lang.String,);
Parameter(init,org.xml.sax.AttributeList,);
Parameter(characters,char[],);
Parameter(characters,int,);
Parameter(characters,int,);
Parameter(startElement,java.lang.String,);
Parameter(startElement,org.xml.sax.AttributeList,);
SuperClass(org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler);
Generalization(org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler);
Composition(org.apache.tools.ant.Target);
Composition(org.apache.tools.ant.RuntimeConfigurable);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,<init> --> wrapper,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,<init> --> target,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,init --> element,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,init --> wrapper,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,init --> target,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,init --> element,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,init --> wrapper,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,characters --> wrapper,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,startElement --> element,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,startElement --> wrapper,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,startElement --> target,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,init --> helperImpl,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,startElement --> helperImpl,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,READ);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,<init> --> <init>,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,init --> access$200,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,init --> createDataType,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,init --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,init --> <init>,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,init --> setAttributes,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,init --> addDataType,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,init --> access$100,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,characters --> addText$2,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,startElement --> <init>,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler,startElement --> init,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,);
EndClass 134
StartClass 135
Class(org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,N,N,NA);
Attribute(target,org.apache.tools.ant.Target,Private,N,N,);
Attribute(container,org.apache.tools.ant.TaskContainer,Private,N,N,);
Attribute(task,org.apache.tools.ant.Task,Private,N,N,);
Attribute(parentWrapper,org.apache.tools.ant.RuntimeConfigurable,Private,N,N,);
Attribute(wrapper,org.apache.tools.ant.RuntimeConfigurable,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(init,void,Public,N,N);
Method(characters,void,Public,N,N);
Method(startElement,void,Public,N,N);
Parameter(<init>,org.apache.tools.ant.helper.ProjectHelperImpl,);
Parameter(<init>,org.xml.sax.DocumentHandler,);
Parameter(<init>,org.apache.tools.ant.TaskContainer,);
Parameter(<init>,org.apache.tools.ant.RuntimeConfigurable,);
Parameter(<init>,org.apache.tools.ant.Target,);
Parameter(init,java.lang.String,);
Parameter(init,org.xml.sax.AttributeList,);
Parameter(characters,char[],);
Parameter(characters,int,);
Parameter(characters,int,);
Parameter(startElement,java.lang.String,);
Parameter(startElement,org.xml.sax.AttributeList,);
SuperClass(org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler);
Generalization(org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler);
Composition(org.apache.tools.ant.Target);
Composition(org.apache.tools.ant.TaskContainer);
Composition(org.apache.tools.ant.Task);
Composition(org.apache.tools.ant.RuntimeConfigurable);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,startElement --> <init>,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,startElement --> init,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,<init> --> wrapper,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,<init> --> container,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,<init> --> parentWrapper,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,<init> --> target,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,init --> task,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,init --> target,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,init --> container,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,init --> wrapper,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,init --> parentWrapper,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,init --> task,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,init --> wrapper,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,characters --> wrapper,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,startElement --> task,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,startElement --> wrapper,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,startElement --> target,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,init --> helperImpl,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,startElement --> helperImpl,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,READ);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,<init> --> <init>,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,init --> access$200,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,init --> createTask,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,init --> <init>,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,init --> setProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,init --> setTaskName,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,init --> access$100,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,init --> <init>$3,org.apache.tools.ant.Location,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,init --> setLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,init --> access$800,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,init --> setOwningTarget,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,init --> addTask,org.apache.tools.ant.TaskContainer,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,init --> init,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,init --> getRuntimeConfigurableWrapper,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,init --> setAttributes,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,init --> addChild,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,characters --> addText$2,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,startElement --> <init>,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,startElement --> init,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,);
EndClass 135
StartClass 136
Class(org.apache.tools.ant.helper.ProjectHelperImpl$DescriptionHandler,N,N,NA);
Method(<init>,void,Public,N,N);
Method(characters,void,Public,N,N);
Parameter(<init>,org.apache.tools.ant.helper.ProjectHelperImpl,);
Parameter(<init>,org.xml.sax.DocumentHandler,);
Parameter(characters,char[],);
Parameter(characters,int,);
Parameter(characters,int,);
SuperClass(org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler);
Generalization(org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$DescriptionHandler,characters --> helperImpl,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,READ);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$DescriptionHandler,<init> --> <init>,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$DescriptionHandler,characters --> access$200,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$DescriptionHandler,characters --> getDescription,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$DescriptionHandler,characters --> setDescription,org.apache.tools.ant.Project,);
EndClass 136
StartClass 137
Class(org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,N,N,NA);
Attribute(parent,java.lang.Object,Private,N,N,);
Attribute(child,java.lang.Object,Private,N,N,);
Attribute(parentWrapper,org.apache.tools.ant.RuntimeConfigurable,Private,N,N,);
Attribute(childWrapper,org.apache.tools.ant.RuntimeConfigurable,Private,N,N,);
Attribute(target,org.apache.tools.ant.Target,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(init,void,Public,N,N);
Method(characters,void,Public,N,N);
Method(startElement,void,Public,N,N);
Parameter(<init>,org.apache.tools.ant.helper.ProjectHelperImpl,);
Parameter(<init>,org.xml.sax.DocumentHandler,);
Parameter(<init>,java.lang.Object,);
Parameter(<init>,org.apache.tools.ant.RuntimeConfigurable,);
Parameter(<init>,org.apache.tools.ant.Target,);
Parameter(init,java.lang.String,);
Parameter(init,org.xml.sax.AttributeList,);
Parameter(characters,char[],);
Parameter(characters,int,);
Parameter(characters,int,);
Parameter(startElement,java.lang.String,);
Parameter(startElement,org.xml.sax.AttributeList,);
SuperClass(org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler);
Generalization(org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler);
Composition(org.apache.tools.ant.RuntimeConfigurable);
Composition(org.apache.tools.ant.Target);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,startElement --> <init>,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,startElement --> init,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,<init> --> childWrapper,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,<init> --> parent,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,<init> --> parentWrapper,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,<init> --> target,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,init --> parent,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,init --> child,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,init --> childWrapper,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,init --> parentWrapper,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,init --> child,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,init --> childWrapper,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,characters --> childWrapper,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,startElement --> child,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,startElement --> childWrapper,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,startElement --> target,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,init --> helperImpl,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,startElement --> helperImpl,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,READ);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,<init> --> <init>,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,<init> --> getProxy,org.apache.tools.ant.TypeAdapter,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,init --> access$200,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,init --> getHelper$2,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,init --> <init>,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,init --> setProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,init --> addChild,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,init --> createElement,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,init --> access$800,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,init --> <init>,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,init --> setAttributes,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,init --> addChild,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,init --> access$100,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,characters --> addText$2,org.apache.tools.ant.RuntimeConfigurable,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,startElement --> <init>,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler,startElement --> init,org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler,);
EndClass 137
StartClass 138
Class(org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler,N,N,NA);
Attribute(helperImpl,org.apache.tools.ant.helper.ProjectHelperImpl,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(resolveEntity,org.xml.sax.InputSource,Public,N,N);
Method(startElement,void,Public,N,N);
Method(setDocumentLocator,void,Public,N,N);
Parameter(<init>,org.apache.tools.ant.helper.ProjectHelperImpl,);
Parameter(resolveEntity,java.lang.String,);
Parameter(resolveEntity,java.lang.String,);
Parameter(startElement,java.lang.String,);
Parameter(startElement,org.xml.sax.AttributeList,);
Parameter(setDocumentLocator,org.xml.sax.Locator,);
Composition(org.apache.tools.ant.helper.ProjectHelperImpl);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler,<init> --> helperImpl,org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler,resolveEntity --> helperImpl,org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler,startElement --> helperImpl,org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler,setDocumentLocator --> helperImpl,org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler,READ);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler,resolveEntity --> access$200,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler,resolveEntity --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler,resolveEntity --> access$300,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler,resolveEntity --> fromURI,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler,resolveEntity --> access$400,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler,resolveEntity --> resolveFile,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler,resolveEntity --> access$500,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler,resolveEntity --> toURI,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler,startElement --> <init>,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler,startElement --> init,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler,startElement --> access$100,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler,setDocumentLocator --> access$102,org.apache.tools.ant.helper.ProjectHelperImpl,);
EndClass 138
StartClass 139
Class(org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,N,N,NA);
Attribute(parentHandler,org.xml.sax.DocumentHandler,Protected,N,N,);
Attribute(helperImpl,org.apache.tools.ant.helper.ProjectHelperImpl,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(startElement,void,Public,N,N);
Method(characters,void,Public,N,N);
Method(endElement,void,Public,N,N);
Parameter(<init>,org.apache.tools.ant.helper.ProjectHelperImpl,);
Parameter(<init>,org.xml.sax.DocumentHandler,);
Parameter(startElement,java.lang.String,);
Parameter(startElement,org.xml.sax.AttributeList,);
Parameter(characters,char[],);
Parameter(characters,int,);
Parameter(characters,int,);
Parameter(endElement,java.lang.String,);
SubClass(org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler);
SubClass(org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler);
SubClass(org.apache.tools.ant.helper.ProjectHelperImpl$DescriptionHandler);
SubClass(org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler);
SubClass(org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler);
SubClass(org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler);
Composition(org.apache.tools.ant.helper.ProjectHelperImpl);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,<init> --> parentHandler,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,<init> --> helperImpl,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,startElement --> helperImpl,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,characters --> helperImpl,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,endElement --> helperImpl,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,endElement --> parentHandler,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,READ);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,<init> --> access$000,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,startElement --> access$100,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,characters --> access$100,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,endElement --> access$000,org.apache.tools.ant.helper.ProjectHelperImpl,);
EndClass 139
StartClass 140
Class(org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,N,N,NA);
Method(<init>,void,Public,N,N);
Method(init,void,Public,N,N);
Method(startElement,void,Public,N,N);
Method(handleTarget,void,Private,N,N);
Parameter(<init>,org.apache.tools.ant.helper.ProjectHelperImpl,);
Parameter(<init>,org.xml.sax.DocumentHandler,);
Parameter(init,java.lang.String,);
Parameter(init,org.xml.sax.AttributeList,);
Parameter(startElement,java.lang.String,);
Parameter(startElement,org.xml.sax.AttributeList,);
Parameter(handleTarget,java.lang.String,);
Parameter(handleTarget,org.xml.sax.AttributeList,);
SuperClass(org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler);
Generalization(org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,startElement --> handleTarget,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,init --> helperImpl,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,startElement --> helperImpl,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,handleTarget --> helperImpl,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,READ);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,<init> --> <init>,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,init --> access$100,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,init --> access$200,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,init --> setDefaultTarget,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,init --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,init --> setName,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,init --> addReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,init --> getProperty,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,init --> setBasedir,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,init --> access$400,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,init --> access$300,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,init --> resolveFile,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,init --> setBaseDir,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,init --> access$600,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,init --> addTarget$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,startElement --> access$600,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,startElement --> access$700,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,handleTarget --> <init>,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler,handleTarget --> init,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,);
EndClass 140
StartClass 141
Class(org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,N,N,NA);
Attribute(target,org.apache.tools.ant.Target,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(init,void,Public,N,N);
Method(startElement,void,Public,N,N);
Parameter(<init>,org.apache.tools.ant.helper.ProjectHelperImpl,);
Parameter(<init>,org.xml.sax.DocumentHandler,);
Parameter(init,java.lang.String,);
Parameter(init,org.xml.sax.AttributeList,);
Parameter(startElement,java.lang.String,);
Parameter(startElement,org.xml.sax.AttributeList,);
SuperClass(org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler);
Generalization(org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler);
Composition(org.apache.tools.ant.Target);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,init --> target,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,init --> target,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,startElement --> target,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,init --> helperImpl,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,READ);
Call(ATTRIBUTE,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,startElement --> helperImpl,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,READ);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,<init> --> <init>,org.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,init --> access$100,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,init --> <init>$3,org.apache.tools.ant.Location,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,init --> <init>$6,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,init --> <init>,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,init --> addDependency,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,init --> setName,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,init --> setIf,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,init --> setUnless,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,init --> setDescription,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,init --> access$200,org.apache.tools.ant.helper.ProjectHelperImpl,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,init --> addTarget$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,init --> addReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,init --> setDepends,org.apache.tools.ant.Target,);
Call(METHOD,org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler,startElement --> access$700,org.apache.tools.ant.helper.ProjectHelperImpl,);
EndClass 141
StartClass 142
Class(org.apache.tools.ant.taskdefs.AntlibDefinition,N,N,Public);
Attribute(uri,java.lang.String,Private,N,N,);
Attribute(antlibClassLoader,java.lang.ClassLoader,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setURI,void,Public,N,N);
Method(getURI,java.lang.String,Public,N,N);
Method(setAntlibClassLoader,void,Public,N,N);
Method(getAntlibClassLoader,java.lang.ClassLoader,Public,N,N);
Parameter(setURI,java.lang.String,);
Parameter(setAntlibClassLoader,java.lang.ClassLoader,);
SuperClass(org.apache.tools.ant.Task);
SuperClass(org.apache.tools.ant.ProjectComponent);
SubClass(org.apache.tools.ant.taskdefs.PreSetDef);
SubClass(org.apache.tools.ant.taskdefs.Typedef);
SubClass(org.apache.tools.ant.taskdefs.Definer);
SubClass(org.apache.tools.ant.taskdefs.DefBase);
Generalization(org.apache.tools.ant.Task);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.AntlibDefinition,<init> --> uri,org.apache.tools.ant.taskdefs.AntlibDefinition,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.AntlibDefinition,setURI --> uri,org.apache.tools.ant.taskdefs.AntlibDefinition,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.AntlibDefinition,getURI --> uri,org.apache.tools.ant.taskdefs.AntlibDefinition,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.AntlibDefinition,setAntlibClassLoader --> antlibClassLoader,org.apache.tools.ant.taskdefs.AntlibDefinition,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.AntlibDefinition,getAntlibClassLoader --> antlibClassLoader,org.apache.tools.ant.taskdefs.AntlibDefinition,READ);
Call(METHOD,org.apache.tools.ant.taskdefs.AntlibDefinition,<init> --> <init>,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.taskdefs.AntlibDefinition,setURI --> <init>$2,org.apache.tools.ant.BuildException,);
EndClass 142
StartClass 143
Class(org.apache.tools.ant.dispatch.Dispatchable,Y,Y,Public);
Method(getActionParameterName,java.lang.String,Public,N,Y);
EndClass 143
StartClass 144
Class(org.apache.tools.ant.types.EnumeratedAttribute,N,Y,Public);
Attribute(value,java.lang.String,Protected,N,N,);
Attribute(index,int,Private,N,N,);
Attribute(class$org$apache$tools$ant$types$EnumeratedAttribute,java.lang.Class,Public,Y,N,);
Method(getValues,java.lang.String[],Public,N,Y);
Method(<init>,void,Protected,N,N);
Method(getInstance,org.apache.tools.ant.types.EnumeratedAttribute,Public,Y,N);
Method(setValue,void,Public,N,N);
Method(containsValue,boolean,Public,N,N);
Method(indexOfValue,int,Public,N,N);
Method(getValue,java.lang.String,Public,N,N);
Method(getIndex,int,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(class$,java.lang.Class,Public,Y,N);
Parameter(getInstance,java.lang.Class,);
Parameter(getInstance,java.lang.String,);
Parameter(setValue,java.lang.String,);
Parameter(containsValue,java.lang.String,);
Parameter(indexOfValue,java.lang.String,);
Parameter(class$,java.lang.String,);
SubClass(org.apache.tools.ant.taskdefs.Definer$OnError);
SubClass(org.apache.tools.ant.types.FilterSet$OnMissing);
SubClass(org.apache.tools.ant.types.selectors.DateSelector$TimeComparisons);
SubClass(org.apache.tools.ant.types.TimeComparison);
SubClass(org.apache.tools.ant.taskdefs.Definer$Format);
SubClass(org.apache.tools.ant.types.resources.selectors.Type$FileDir);
SubClass(org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector$CacheName);
SubClass(org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector$AlgorithmName);
SubClass(org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector$ComparatorName);
SubClass(org.apache.tools.ant.types.selectors.PresentSelector$FilePresence);
SubClass(org.apache.tools.ant.types.selectors.TypeSelector$FileType);
SubClass(org.apache.tools.ant.types.selectors.SizeSelector$SizeComparisons);
SubClass(org.apache.tools.ant.types.Comparison);
SubClass(org.apache.tools.ant.types.selectors.SizeSelector$ByteUnits);
SubClass(org.apache.tools.ant.types.Mapper$MapperType);
Call(METHOD,org.apache.tools.ant.types.EnumeratedAttribute,getInstance --> class$,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.EnumeratedAttribute,getInstance --> setValue,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.EnumeratedAttribute,setValue --> indexOfValue,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.EnumeratedAttribute,containsValue --> indexOfValue,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.EnumeratedAttribute,indexOfValue --> getValues,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.EnumeratedAttribute,toString --> getValue,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(ATTRIBUTE,org.apache.tools.ant.types.EnumeratedAttribute,<init> --> index,org.apache.tools.ant.types.EnumeratedAttribute,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.EnumeratedAttribute,getInstance --> class$org$apache$tools$ant$types$EnumeratedAttribute,org.apache.tools.ant.types.EnumeratedAttribute,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.EnumeratedAttribute,getInstance --> class$org$apache$tools$ant$types$EnumeratedAttribute,org.apache.tools.ant.types.EnumeratedAttribute,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.EnumeratedAttribute,setValue --> index,org.apache.tools.ant.types.EnumeratedAttribute,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.EnumeratedAttribute,setValue --> value,org.apache.tools.ant.types.EnumeratedAttribute,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.EnumeratedAttribute,getValue --> value,org.apache.tools.ant.types.EnumeratedAttribute,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.EnumeratedAttribute,getIndex --> index,org.apache.tools.ant.types.EnumeratedAttribute,READ);
Call(METHOD,org.apache.tools.ant.types.EnumeratedAttribute,getInstance --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.EnumeratedAttribute,getInstance --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.EnumeratedAttribute,setValue --> <init>$2,org.apache.tools.ant.BuildException,);
EndClass 144
StartClass 145
Class(org.apache.tools.ant.taskdefs.DefBase,N,Y,Public);
Attribute(createdLoader,java.lang.ClassLoader,Private,N,N,);
Attribute(cpDelegate,org.apache.tools.ant.util.ClasspathUtils$Delegate,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(hasCpDelegate,boolean,Protected,N,N);
Method(setReverseLoader,void,Public,N,N);
Method(getClasspath,org.apache.tools.ant.types.Path,Public,N,N);
Method(isReverseLoader,boolean,Public,N,N);
Method(getLoaderId,java.lang.String,Public,N,N);
Method(getClasspathId,java.lang.String,Public,N,N);
Method(setClasspath,void,Public,N,N);
Method(createClasspath,org.apache.tools.ant.types.Path,Public,N,N);
Method(setClasspathRef,void,Public,N,N);
Method(setLoaderRef,void,Public,N,N);
Method(createLoader,java.lang.ClassLoader,Protected,N,N);
Method(init,void,Public,N,N);
Method(getDelegate,org.apache.tools.ant.util.ClasspathUtils$Delegate,Private,N,N);
Parameter(setReverseLoader,boolean,);
Parameter(setClasspath,org.apache.tools.ant.types.Path,);
Parameter(setClasspathRef,org.apache.tools.ant.types.Reference,);
Parameter(setLoaderRef,org.apache.tools.ant.types.Reference,);
SuperClass(org.apache.tools.ant.taskdefs.AntlibDefinition);
SuperClass(org.apache.tools.ant.Task);
SuperClass(org.apache.tools.ant.ProjectComponent);
SubClass(org.apache.tools.ant.taskdefs.Typedef);
SubClass(org.apache.tools.ant.taskdefs.Definer);
Generalization(org.apache.tools.ant.taskdefs.AntlibDefinition);
Composition(org.apache.tools.ant.util.ClasspathUtils$Delegate);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,setReverseLoader --> getDelegate,org.apache.tools.ant.taskdefs.DefBase,);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,getClasspath --> getDelegate,org.apache.tools.ant.taskdefs.DefBase,);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,isReverseLoader --> getDelegate,org.apache.tools.ant.taskdefs.DefBase,);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,getLoaderId --> getDelegate,org.apache.tools.ant.taskdefs.DefBase,);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,getClasspathId --> getDelegate,org.apache.tools.ant.taskdefs.DefBase,);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,setClasspath --> getDelegate,org.apache.tools.ant.taskdefs.DefBase,);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,createClasspath --> getDelegate,org.apache.tools.ant.taskdefs.DefBase,);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,setClasspathRef --> getDelegate,org.apache.tools.ant.taskdefs.DefBase,);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,setLoaderRef --> getDelegate,org.apache.tools.ant.taskdefs.DefBase,);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,createLoader --> getDelegate,org.apache.tools.ant.taskdefs.DefBase,);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.DefBase,hasCpDelegate --> cpDelegate,org.apache.tools.ant.taskdefs.DefBase,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.DefBase,createLoader --> cpDelegate,org.apache.tools.ant.taskdefs.DefBase,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.DefBase,createLoader --> createdLoader,org.apache.tools.ant.taskdefs.DefBase,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.DefBase,createLoader --> createdLoader,org.apache.tools.ant.taskdefs.DefBase,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.DefBase,getDelegate --> cpDelegate,org.apache.tools.ant.taskdefs.DefBase,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.DefBase,getDelegate --> cpDelegate,org.apache.tools.ant.taskdefs.DefBase,WRITE);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,<init> --> <init>,org.apache.tools.ant.taskdefs.AntlibDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,setReverseLoader --> setReverseLoader,org.apache.tools.ant.util.ClasspathUtils$Delegate,);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,setReverseLoader --> log$2,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,getClasspath --> getClasspath,org.apache.tools.ant.util.ClasspathUtils$Delegate,);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,isReverseLoader --> isReverseLoader,org.apache.tools.ant.util.ClasspathUtils$Delegate,);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,getLoaderId --> getClassLoadId,org.apache.tools.ant.util.ClasspathUtils$Delegate,);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,getClasspathId --> getClassLoadId,org.apache.tools.ant.util.ClasspathUtils$Delegate,);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,setClasspath --> setClasspath,org.apache.tools.ant.util.ClasspathUtils$Delegate,);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,createClasspath --> createClasspath,org.apache.tools.ant.util.ClasspathUtils$Delegate,);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,setClasspathRef --> setClasspathref,org.apache.tools.ant.util.ClasspathUtils$Delegate,);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,setLoaderRef --> setLoaderRef,org.apache.tools.ant.util.ClasspathUtils$Delegate,);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,createLoader --> getAntlibClassLoader,org.apache.tools.ant.taskdefs.AntlibDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,createLoader --> getClassLoader,org.apache.tools.ant.util.ClasspathUtils$Delegate,);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,createLoader --> addSystemPackageRoot,org.apache.tools.ant.AntClassLoader,);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,init --> init,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.taskdefs.DefBase,getDelegate --> getDelegate,org.apache.tools.ant.util.ClasspathUtils,);
EndClass 145
StartClass 146
Class(org.apache.tools.ant.taskdefs.Definer$ResourceStack,N,N,NA);
Method(<init>,void,Private,N,N);
Method(initialValue,java.lang.Object,Public,N,N);
Method(getStack,java.util.Map,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>$2,org.apache.tools.ant.taskdefs.Definer$1,);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer$ResourceStack,<init>$2 --> <init>,org.apache.tools.ant.taskdefs.Definer$ResourceStack,);
EndClass 146
StartClass 147
Class(org.apache.tools.ant.taskdefs.Definer$Format,N,N,Public);
Attribute(PROPERTIES,int,Public,Y,Y,);
Attribute(XML,int,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(getValues,java.lang.String[],Public,N,N);
SuperClass(org.apache.tools.ant.types.EnumeratedAttribute);
Generalization(org.apache.tools.ant.types.EnumeratedAttribute);
Call(METHOD,org.apache.tools.ant.taskdefs.Definer$Format,<init> --> <init>,org.apache.tools.ant.types.EnumeratedAttribute,);
EndClass 147
StartClass 148
Class(org.apache.tools.ant.taskdefs.Antlib,N,N,Public);
Attribute(TAG,java.lang.String,Public,Y,Y,);
Attribute(classLoader,java.lang.ClassLoader,Private,N,N,);
Attribute(uri,java.lang.String,Private,N,N,);
Attribute(tasks,java.util.List,Private,N,N,);
Attribute(class$org$apache$tools$ant$taskdefs$Antlib,java.lang.Class,Public,Y,N,);
Method(<init>,void,Public,N,N);
Method(createAntlib,org.apache.tools.ant.taskdefs.Antlib,Public,Y,N);
Method(setClassLoader,void,Protected,N,N);
Method(setURI,void,Protected,N,N);
Method(getClassLoader,java.lang.ClassLoader,Private,N,N);
Method(addTask,void,Public,N,N);
Method(execute,void,Public,N,N);
Method(class$,java.lang.Class,Public,Y,N);
Parameter(createAntlib,org.apache.tools.ant.Project,);
Parameter(createAntlib,java.net.URL,);
Parameter(createAntlib,java.lang.String,);
Parameter(setClassLoader,java.lang.ClassLoader,);
Parameter(setURI,java.lang.String,);
Parameter(addTask,org.apache.tools.ant.Task,);
Parameter(class$,java.lang.String,);
SuperClass(org.apache.tools.ant.Task);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.Task);
Realization(org.apache.tools.ant.TaskContainer);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,createAntlib --> <init>,org.apache.tools.ant.taskdefs.Antlib,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,getClassLoader --> class$,org.apache.tools.ant.taskdefs.Antlib,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,execute --> getClassLoader,org.apache.tools.ant.taskdefs.Antlib,);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Antlib,<init> --> uri,org.apache.tools.ant.taskdefs.Antlib,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Antlib,<init> --> tasks,org.apache.tools.ant.taskdefs.Antlib,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Antlib,setClassLoader --> classLoader,org.apache.tools.ant.taskdefs.Antlib,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Antlib,setURI --> uri,org.apache.tools.ant.taskdefs.Antlib,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Antlib,getClassLoader --> classLoader,org.apache.tools.ant.taskdefs.Antlib,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Antlib,getClassLoader --> class$org$apache$tools$ant$taskdefs$Antlib,org.apache.tools.ant.taskdefs.Antlib,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Antlib,getClassLoader --> class$org$apache$tools$ant$taskdefs$Antlib,org.apache.tools.ant.taskdefs.Antlib,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Antlib,getClassLoader --> classLoader,org.apache.tools.ant.taskdefs.Antlib,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Antlib,addTask --> tasks,org.apache.tools.ant.taskdefs.Antlib,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Antlib,execute --> tasks,org.apache.tools.ant.taskdefs.Antlib,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Antlib,execute --> uri,org.apache.tools.ant.taskdefs.Antlib,READ);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,<init> --> <init>,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,createAntlib --> <init>$3,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,createAntlib --> getComponentHelper,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,createAntlib --> enterAntLib,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,createAntlib --> <init>,org.apache.tools.ant.helper.ProjectHelper2,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,createAntlib --> parseUnknownElement,org.apache.tools.ant.helper.ProjectHelper2,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,createAntlib --> getTag,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,createAntlib --> getLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,createAntlib --> <init>$6,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,createAntlib --> setProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,createAntlib --> setLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,createAntlib --> setTaskName,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,createAntlib --> init,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,createAntlib --> configure,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,createAntlib --> exitAntLib,org.apache.tools.ant.ComponentHelper,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,execute --> getLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,execute --> setLocation,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,execute --> maybeConfigure,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,execute --> getRealThing,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,execute --> getTag,org.apache.tools.ant.UnknownElement,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,execute --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,execute --> setURI,org.apache.tools.ant.taskdefs.AntlibDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,execute --> setAntlibClassLoader,org.apache.tools.ant.taskdefs.AntlibDefinition,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,execute --> init,org.apache.tools.ant.Task,);
Call(METHOD,org.apache.tools.ant.taskdefs.Antlib,execute --> execute,org.apache.tools.ant.Task,);
EndClass 148
StartClass 149
Class(org.apache.tools.ant.taskdefs.Definer$1,N,N,NA);
Attribute(more,boolean,Private,N,N,);
Attribute(val$url,java.net.URL,Private,N,Y,);
Attribute(this$0,org.apache.tools.ant.taskdefs.Definer,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(hasMoreElements,boolean,Public,N,N);
Method(nextElement,java.lang.Object,Public,N,N);
Parameter(<init>,org.apache.tools.ant.taskdefs.Definer,);
Parameter(<init>,java.net.URL,);
Composition(org.apache.tools.ant.taskdefs.Definer);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer$1,<init> --> this$0,org.apache.tools.ant.taskdefs.Definer$1,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer$1,<init> --> val$url,org.apache.tools.ant.taskdefs.Definer$1,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer$1,<init> --> more,org.apache.tools.ant.taskdefs.Definer$1,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer$1,hasMoreElements --> more,org.apache.tools.ant.taskdefs.Definer$1,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer$1,nextElement --> more,org.apache.tools.ant.taskdefs.Definer$1,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer$1,nextElement --> val$url,org.apache.tools.ant.taskdefs.Definer$1,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Definer$1,nextElement --> more,org.apache.tools.ant.taskdefs.Definer$1,WRITE);
EndClass 149
StartClass 150
Class(org.apache.tools.ant.taskdefs.Manifest$Attribute,N,N,Public);
Attribute(MAX_NAME_VALUE_LENGTH,int,Private,Y,Y,);
Attribute(MAX_NAME_LENGTH,int,Private,Y,Y,);
Attribute(name,java.lang.String,Private,N,N,);
Attribute(values,java.util.Vector,Private,N,N,);
Attribute(currentIndex,int,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(parse,void,Public,N,N);
Method(setName,void,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(getKey,java.lang.String,Public,N,N);
Method(setValue,void,Public,N,N);
Method(getValue,java.lang.String,Public,N,N);
Method(addValue,void,Public,N,N);
Method(getValues,java.util.Enumeration,Public,N,N);
Method(addContinuation,void,Public,N,N);
Method(write,void,Public,N,N);
Method(writeValue,void,Private,N,N);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$3,java.lang.String,);
Parameter(<init>$3,java.lang.String,);
Parameter(equals,java.lang.Object,);
Parameter(parse,java.lang.String,);
Parameter(setName,java.lang.String,);
Parameter(setValue,java.lang.String,);
Parameter(addValue,java.lang.String,);
Parameter(addContinuation,java.lang.String,);
Parameter(write,java.io.PrintWriter,);
Parameter(writeValue,java.io.PrintWriter,);
Parameter(writeValue,java.lang.String,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Attribute,<init>$2 --> parse,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Attribute,<init>$3 --> setValue,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Attribute,hashCode --> getKey,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Attribute,equals --> getKey,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Attribute,parse --> setValue,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Attribute,getValue --> getValues,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Attribute,addValue --> setValue,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Attribute,addContinuation --> setValue,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Attribute,write --> getValues,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Attribute,write --> writeValue,org.apache.tools.ant.taskdefs.Manifest$Attribute,);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,<init> --> name,org.apache.tools.ant.taskdefs.Manifest$Attribute,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,<init> --> values,org.apache.tools.ant.taskdefs.Manifest$Attribute,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,<init> --> currentIndex,org.apache.tools.ant.taskdefs.Manifest$Attribute,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,<init>$2 --> name,org.apache.tools.ant.taskdefs.Manifest$Attribute,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,<init>$2 --> values,org.apache.tools.ant.taskdefs.Manifest$Attribute,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,<init>$2 --> currentIndex,org.apache.tools.ant.taskdefs.Manifest$Attribute,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,<init>$3 --> name,org.apache.tools.ant.taskdefs.Manifest$Attribute,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,<init>$3 --> values,org.apache.tools.ant.taskdefs.Manifest$Attribute,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,<init>$3 --> currentIndex,org.apache.tools.ant.taskdefs.Manifest$Attribute,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,hashCode --> name,org.apache.tools.ant.taskdefs.Manifest$Attribute,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,hashCode --> values,org.apache.tools.ant.taskdefs.Manifest$Attribute,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,equals --> values,org.apache.tools.ant.taskdefs.Manifest$Attribute,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,parse --> name,org.apache.tools.ant.taskdefs.Manifest$Attribute,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,setName --> name,org.apache.tools.ant.taskdefs.Manifest$Attribute,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,getName --> name,org.apache.tools.ant.taskdefs.Manifest$Attribute,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,getKey --> name,org.apache.tools.ant.taskdefs.Manifest$Attribute,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,setValue --> currentIndex,org.apache.tools.ant.taskdefs.Manifest$Attribute,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,setValue --> values,org.apache.tools.ant.taskdefs.Manifest$Attribute,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,setValue --> currentIndex,org.apache.tools.ant.taskdefs.Manifest$Attribute,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,getValue --> values,org.apache.tools.ant.taskdefs.Manifest$Attribute,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,addValue --> currentIndex,org.apache.tools.ant.taskdefs.Manifest$Attribute,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,addValue --> currentIndex,org.apache.tools.ant.taskdefs.Manifest$Attribute,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,getValues --> values,org.apache.tools.ant.taskdefs.Manifest$Attribute,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,addContinuation --> values,org.apache.tools.ant.taskdefs.Manifest$Attribute,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,addContinuation --> currentIndex,org.apache.tools.ant.taskdefs.Manifest$Attribute,READ);
Call(ATTRIBUTE,org.apache.tools.ant.taskdefs.Manifest$Attribute,writeValue --> name,org.apache.tools.ant.taskdefs.Manifest$Attribute,READ);
Call(METHOD,org.apache.tools.ant.taskdefs.Manifest$Attribute,parse --> <init>,org.apache.tools.ant.taskdefs.ManifestException,);
EndClass 150
StartClass 151
Class(org.apache.tools.ant.types.AbstractFileSet,N,Y,Public);
Attribute(defaultPatterns,org.apache.tools.ant.types.PatternSet,Private,N,N,);
Attribute(additionalPatterns,java.util.Vector,Private,N,N,);
Attribute(selectors,java.util.Vector,Private,N,N,);
Attribute(dir,java.io.File,Private,N,N,);
Attribute(useDefaultExcludes,boolean,Private,N,N,);
Attribute(caseSensitive,boolean,Private,N,N,);
Attribute(followSymlinks,boolean,Private,N,N,);
Attribute(directoryScanner,org.apache.tools.ant.DirectoryScanner,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Protected,N,N);
Method(setRefid,void,Public,N,N);
Method(setDir,void,Public,N,N);
Method(getDir,java.io.File,Public,N,N);
Method(getDir$2,java.io.File,Public,N,N);
Method(createPatternSet,org.apache.tools.ant.types.PatternSet,Public,N,N);
Method(createInclude,org.apache.tools.ant.types.PatternSet$NameEntry,Public,N,N);
Method(createIncludesFile,org.apache.tools.ant.types.PatternSet$NameEntry,Public,N,N);
Method(createExclude,org.apache.tools.ant.types.PatternSet$NameEntry,Public,N,N);
Method(createExcludesFile,org.apache.tools.ant.types.PatternSet$NameEntry,Public,N,N);
Method(setFile,void,Public,N,N);
Method(setIncludes,void,Public,N,N);
Method(appendIncludes,void,Public,N,N);
Method(setExcludes,void,Public,N,N);
Method(appendExcludes,void,Public,N,N);
Method(setIncludesfile,void,Public,N,N);
Method(setExcludesfile,void,Public,N,N);
Method(setDefaultexcludes,void,Public,N,N);
Method(getDefaultexcludes,boolean,Public,N,N);
Method(setCaseSensitive,void,Public,N,N);
Method(isCaseSensitive,boolean,Public,N,N);
Method(setFollowSymlinks,void,Public,N,N);
Method(isFollowSymlinks,boolean,Public,N,N);
Method(getDirectoryScanner,org.apache.tools.ant.DirectoryScanner,Public,N,N);
Method(getDirectoryScanner$2,org.apache.tools.ant.DirectoryScanner,Public,N,N);
Method(setupDirectoryScanner,void,Public,N,N);
Method(setupDirectoryScanner$2,void,Public,N,N);
Method(getRef,org.apache.tools.ant.types.AbstractFileSet,Protected,N,N);
Method(hasSelectors,boolean,Public,N,N);
Method(hasPatterns,boolean,Public,N,N);
Method(selectorCount,int,Public,N,N);
Method(getSelectors,org.apache.tools.ant.types.selectors.FileSelector[],Public,N,N);
Method(selectorElements,java.util.Enumeration,Public,N,N);
Method(appendSelector,void,Public,N,N);
Method(addSelector,void,Public,N,N);
Method(addAnd,void,Public,N,N);
Method(addOr,void,Public,N,N);
Method(addNot,void,Public,N,N);
Method(addNone,void,Public,N,N);
Method(addMajority,void,Public,N,N);
Method(addDate,void,Public,N,N);
Method(addSize,void,Public,N,N);
Method(addDifferent,void,Public,N,N);
Method(addFilename,void,Public,N,N);
Method(addType,void,Public,N,N);
Method(addCustom,void,Public,N,N);
Method(addContains,void,Public,N,N);
Method(addPresent,void,Public,N,N);
Method(addDepth,void,Public,N,N);
Method(addDepend,void,Public,N,N);
Method(addContainsRegexp,void,Public,N,N);
Method(addModified,void,Public,N,N);
Method(add,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(clone,java.lang.Object,Public,N,N);
Method(mergeIncludes,java.lang.String[],Public,N,N);
Method(mergeExcludes,java.lang.String[],Public,N,N);
Method(mergePatterns,org.apache.tools.ant.types.PatternSet,Public,N,N);
Parameter(<init>$2,org.apache.tools.ant.types.AbstractFileSet,);
Parameter(setRefid,org.apache.tools.ant.types.Reference,);
Parameter(setDir,java.io.File,);
Parameter(getDir$2,org.apache.tools.ant.Project,);
Parameter(setFile,java.io.File,);
Parameter(setIncludes,java.lang.String,);
Parameter(appendIncludes,java.lang.String[],);
Parameter(setExcludes,java.lang.String,);
Parameter(appendExcludes,java.lang.String[],);
Parameter(setIncludesfile,java.io.File,);
Parameter(setExcludesfile,java.io.File,);
Parameter(setDefaultexcludes,boolean,);
Parameter(setCaseSensitive,boolean,);
Parameter(setFollowSymlinks,boolean,);
Parameter(getDirectoryScanner$2,org.apache.tools.ant.Project,);
Parameter(setupDirectoryScanner,org.apache.tools.ant.FileScanner,);
Parameter(setupDirectoryScanner$2,org.apache.tools.ant.FileScanner,);
Parameter(setupDirectoryScanner$2,org.apache.tools.ant.Project,);
Parameter(getRef,org.apache.tools.ant.Project,);
Parameter(getSelectors,org.apache.tools.ant.Project,);
Parameter(appendSelector,org.apache.tools.ant.types.selectors.FileSelector,);
Parameter(addSelector,org.apache.tools.ant.types.selectors.SelectSelector,);
Parameter(addAnd,org.apache.tools.ant.types.selectors.AndSelector,);
Parameter(addOr,org.apache.tools.ant.types.selectors.OrSelector,);
Parameter(addNot,org.apache.tools.ant.types.selectors.NotSelector,);
Parameter(addNone,org.apache.tools.ant.types.selectors.NoneSelector,);
Parameter(addMajority,org.apache.tools.ant.types.selectors.MajoritySelector,);
Parameter(addDate,org.apache.tools.ant.types.selectors.DateSelector,);
Parameter(addSize,org.apache.tools.ant.types.selectors.SizeSelector,);
Parameter(addDifferent,org.apache.tools.ant.types.selectors.DifferentSelector,);
Parameter(addFilename,org.apache.tools.ant.types.selectors.FilenameSelector,);
Parameter(addType,org.apache.tools.ant.types.selectors.TypeSelector,);
Parameter(addCustom,org.apache.tools.ant.types.selectors.ExtendSelector,);
Parameter(addContains,org.apache.tools.ant.types.selectors.ContainsSelector,);
Parameter(addPresent,org.apache.tools.ant.types.selectors.PresentSelector,);
Parameter(addDepth,org.apache.tools.ant.types.selectors.DepthSelector,);
Parameter(addDepend,org.apache.tools.ant.types.selectors.DependSelector,);
Parameter(addContainsRegexp,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,);
Parameter(addModified,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Parameter(add,org.apache.tools.ant.types.selectors.FileSelector,);
Parameter(mergeIncludes,org.apache.tools.ant.Project,);
Parameter(mergeExcludes,org.apache.tools.ant.Project,);
Parameter(mergePatterns,org.apache.tools.ant.Project,);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
SubClass(org.apache.tools.ant.types.FileSet);
SubClass(org.apache.tools.ant.types.DirSet);
Generalization(org.apache.tools.ant.types.DataType);
Realization(org.apache.tools.ant.types.selectors.SelectorContainer);
Composition(org.apache.tools.ant.types.PatternSet);
Composition(org.apache.tools.ant.DirectoryScanner);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getDir --> getDir$2,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getDir$2 --> getRef,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getDir$2 --> getDir$2,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setFile --> setDir,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setFile --> createInclude,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getDefaultexcludes --> getRef,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getDefaultexcludes --> getDefaultexcludes,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,isCaseSensitive --> getRef,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,isCaseSensitive --> isCaseSensitive,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,isFollowSymlinks --> getRef,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,isFollowSymlinks --> isFollowSymlinks,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getDirectoryScanner --> getDirectoryScanner$2,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getDirectoryScanner$2 --> getRef,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getDirectoryScanner$2 --> getDirectoryScanner$2,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getDirectoryScanner$2 --> setupDirectoryScanner$2,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setupDirectoryScanner --> setupDirectoryScanner$2,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setupDirectoryScanner$2 --> getRef,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setupDirectoryScanner$2 --> setupDirectoryScanner$2,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setupDirectoryScanner$2 --> mergePatterns,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setupDirectoryScanner$2 --> getSelectors,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,hasSelectors --> getRef,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,hasSelectors --> hasSelectors,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,hasPatterns --> getRef,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,hasPatterns --> hasPatterns,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,selectorCount --> getRef,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,selectorCount --> selectorCount,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getSelectors --> getRef,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getSelectors --> getSelectors,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,selectorElements --> getRef,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,selectorElements --> selectorElements,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,addSelector --> appendSelector,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,addAnd --> appendSelector,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,addOr --> appendSelector,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,addNot --> appendSelector,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,addNone --> appendSelector,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,addMajority --> appendSelector,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,addDate --> appendSelector,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,addSize --> appendSelector,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,addDifferent --> appendSelector,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,addFilename --> appendSelector,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,addType --> appendSelector,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,addCustom --> appendSelector,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,addContains --> appendSelector,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,addPresent --> appendSelector,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,addDepth --> appendSelector,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,addDepend --> appendSelector,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,addContainsRegexp --> appendSelector,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,addModified --> appendSelector,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,add --> appendSelector,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,toString --> getDirectoryScanner$2,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,clone --> getRef,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,clone --> clone,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,mergeIncludes --> mergePatterns,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,mergeExcludes --> mergePatterns,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,mergePatterns --> getRef,org.apache.tools.ant.types.AbstractFileSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,mergePatterns --> mergePatterns,org.apache.tools.ant.types.AbstractFileSet,);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,<init> --> defaultPatterns,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,<init> --> additionalPatterns,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,<init> --> selectors,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,<init> --> useDefaultExcludes,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,<init> --> caseSensitive,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,<init> --> followSymlinks,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,<init> --> directoryScanner,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,<init>$2 --> dir,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,<init>$2 --> defaultPatterns,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,<init>$2 --> additionalPatterns,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,<init>$2 --> selectors,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,<init>$2 --> useDefaultExcludes,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,<init>$2 --> caseSensitive,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,<init>$2 --> followSymlinks,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,<init>$2 --> defaultPatterns,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,<init>$2 --> additionalPatterns,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,<init>$2 --> selectors,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,<init>$2 --> useDefaultExcludes,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,<init>$2 --> caseSensitive,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,<init>$2 --> followSymlinks,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,<init>$2 --> directoryScanner,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,<init>$2 --> dir,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,setRefid --> dir,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,setRefid --> defaultPatterns,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,setRefid --> additionalPatterns,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,setRefid --> selectors,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,setDir --> dir,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,setDir --> directoryScanner,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,getDir$2 --> dir,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,createPatternSet --> additionalPatterns,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,createPatternSet --> directoryScanner,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,createInclude --> defaultPatterns,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,createInclude --> directoryScanner,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,createIncludesFile --> defaultPatterns,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,createIncludesFile --> directoryScanner,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,createExclude --> defaultPatterns,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,createExclude --> directoryScanner,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,createExcludesFile --> defaultPatterns,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,createExcludesFile --> directoryScanner,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,setIncludes --> defaultPatterns,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,setIncludes --> directoryScanner,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,appendIncludes --> defaultPatterns,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,appendIncludes --> directoryScanner,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,setExcludes --> defaultPatterns,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,setExcludes --> directoryScanner,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,appendExcludes --> defaultPatterns,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,appendExcludes --> directoryScanner,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,setIncludesfile --> defaultPatterns,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,setIncludesfile --> directoryScanner,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,setExcludesfile --> defaultPatterns,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,setExcludesfile --> directoryScanner,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,setDefaultexcludes --> useDefaultExcludes,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,setDefaultexcludes --> directoryScanner,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,getDefaultexcludes --> useDefaultExcludes,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,setCaseSensitive --> caseSensitive,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,setCaseSensitive --> directoryScanner,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,isCaseSensitive --> caseSensitive,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,setFollowSymlinks --> followSymlinks,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,setFollowSymlinks --> directoryScanner,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,isFollowSymlinks --> followSymlinks,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,getDirectoryScanner$2 --> directoryScanner,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,getDirectoryScanner$2 --> dir,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,getDirectoryScanner$2 --> followSymlinks,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,getDirectoryScanner$2 --> directoryScanner,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,setupDirectoryScanner$2 --> dir,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,setupDirectoryScanner$2 --> useDefaultExcludes,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,setupDirectoryScanner$2 --> caseSensitive,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,hasSelectors --> selectors,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,hasPatterns --> defaultPatterns,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,hasPatterns --> additionalPatterns,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,selectorCount --> selectors,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,getSelectors --> selectors,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,selectorElements --> selectors,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,appendSelector --> selectors,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,appendSelector --> directoryScanner,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,clone --> defaultPatterns,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,clone --> additionalPatterns,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,clone --> selectors,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,clone --> defaultPatterns,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,clone --> additionalPatterns,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,clone --> selectors,org.apache.tools.ant.types.AbstractFileSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,mergePatterns --> defaultPatterns,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AbstractFileSet,mergePatterns --> additionalPatterns,org.apache.tools.ant.types.AbstractFileSet,READ);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,<init> --> <init>,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,<init> --> <init>,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,<init>$2 --> <init>,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,<init>$2 --> <init>,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,<init>$2 --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,<init>$2 --> setProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setRefid --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setRefid --> hasPatterns,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setRefid --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setRefid --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setRefid --> setRefid,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setDir --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setDir --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getDir --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getDir$2 --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,createPatternSet --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,createPatternSet --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,createPatternSet --> <init>,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,createInclude --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,createInclude --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,createInclude --> createInclude,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,createIncludesFile --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,createIncludesFile --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,createIncludesFile --> createIncludesFile,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,createExclude --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,createExclude --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,createExclude --> createExclude,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,createExcludesFile --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,createExcludesFile --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,createExcludesFile --> createExcludesFile,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setFile --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setFile --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setFile --> setName,org.apache.tools.ant.types.PatternSet$NameEntry,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setIncludes --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setIncludes --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setIncludes --> setIncludes,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,appendIncludes --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,appendIncludes --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,appendIncludes --> createInclude,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,appendIncludes --> setName,org.apache.tools.ant.types.PatternSet$NameEntry,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setExcludes --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setExcludes --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setExcludes --> setExcludes,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,appendExcludes --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,appendExcludes --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,appendExcludes --> createExclude,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,appendExcludes --> setName,org.apache.tools.ant.types.PatternSet$NameEntry,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setIncludesfile --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setIncludesfile --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setIncludesfile --> setIncludesfile,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setExcludesfile --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setExcludesfile --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setExcludesfile --> setExcludesfile,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setDefaultexcludes --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setDefaultexcludes --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getDefaultexcludes --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getDefaultexcludes --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setCaseSensitive --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setCaseSensitive --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,isCaseSensitive --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,isCaseSensitive --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setFollowSymlinks --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setFollowSymlinks --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,isFollowSymlinks --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,isFollowSymlinks --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getDirectoryScanner --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getDirectoryScanner$2 --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getDirectoryScanner$2 --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getDirectoryScanner$2 --> getDataTypeName,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getDirectoryScanner$2 --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getDirectoryScanner$2 --> <init>,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getDirectoryScanner$2 --> setFollowSymlinks,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getDirectoryScanner$2 --> scan,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setupDirectoryScanner --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setupDirectoryScanner$2 --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setupDirectoryScanner$2 --> setBasedir$2,org.apache.tools.ant.FileScanner,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setupDirectoryScanner$2 --> getDataTypeName,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setupDirectoryScanner$2 --> log$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setupDirectoryScanner$2 --> getIncludePatterns,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setupDirectoryScanner$2 --> setIncludes,org.apache.tools.ant.FileScanner,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setupDirectoryScanner$2 --> getExcludePatterns,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setupDirectoryScanner$2 --> setExcludes,org.apache.tools.ant.FileScanner,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setupDirectoryScanner$2 --> setSelectors,org.apache.tools.ant.types.selectors.SelectorScanner,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setupDirectoryScanner$2 --> addDefaultExcludes,org.apache.tools.ant.FileScanner,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,setupDirectoryScanner$2 --> setCaseSensitive,org.apache.tools.ant.FileScanner,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getRef --> getCheckedRef$2,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,hasSelectors --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,hasSelectors --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,hasPatterns --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,hasPatterns --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,hasPatterns --> hasPatterns,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,selectorCount --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,selectorCount --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,getSelectors --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,selectorElements --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,selectorElements --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,appendSelector --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,appendSelector --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,toString --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,toString --> getIncludedFiles,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,clone --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,clone --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,clone --> clone,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,clone --> clone,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,clone --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,mergeIncludes --> getIncludePatterns,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,mergeExcludes --> getExcludePatterns,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,mergePatterns --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,mergePatterns --> clone,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.AbstractFileSet,mergePatterns --> append,org.apache.tools.ant.types.PatternSet,);
EndClass 151
StartClass 152
Class(org.apache.tools.ant.DirectoryScanner,N,N,Public);
Attribute(ON_VMS,boolean,Private,Y,Y,);
Attribute(DEFAULTEXCLUDES,java.lang.String[],Protected,Y,Y,);
Attribute(FILE_UTILS,org.apache.tools.ant.util.FileUtils,Private,Y,Y,);
Attribute(CS_SCAN_ONLY,boolean[],Private,Y,Y,);
Attribute(CS_THEN_NON_CS,boolean[],Private,Y,Y,);
Attribute(defaultExcludes,java.util.Vector,Private,Y,N,);
Attribute(basedir,java.io.File,Protected,N,N,);
Attribute(includes,java.lang.String[],Protected,N,N,);
Attribute(excludes,java.lang.String[],Protected,N,N,);
Attribute(selectors,org.apache.tools.ant.types.selectors.FileSelector[],Protected,N,N,);
Attribute(filesIncluded,java.util.Vector,Protected,N,N,);
Attribute(filesNotIncluded,java.util.Vector,Protected,N,N,);
Attribute(filesExcluded,java.util.Vector,Protected,N,N,);
Attribute(dirsIncluded,java.util.Vector,Protected,N,N,);
Attribute(dirsNotIncluded,java.util.Vector,Protected,N,N,);
Attribute(dirsExcluded,java.util.Vector,Protected,N,N,);
Attribute(filesDeselected,java.util.Vector,Protected,N,N,);
Attribute(dirsDeselected,java.util.Vector,Protected,N,N,);
Attribute(haveSlowResults,boolean,Protected,N,N,);
Attribute(isCaseSensitive,boolean,Protected,N,N,);
Attribute(followSymlinks,boolean,Private,N,N,);
Attribute(everythingIncluded,boolean,Protected,N,N,);
Attribute(fileListMap,java.util.Map,Private,N,N,);
Attribute(scannedDirs,java.util.Set,Private,N,N,);
Attribute(includeNonPatterns,java.util.Set,Private,N,N,);
Attribute(excludeNonPatterns,java.util.Set,Private,N,N,);
Attribute(includePatterns,java.lang.String[],Private,N,N,);
Attribute(excludePatterns,java.lang.String[],Private,N,N,);
Attribute(areNonPatternSetsReady,boolean,Private,N,N,);
Attribute(scanning,boolean,Private,N,N,);
Attribute(scanLock,java.lang.Object,Private,N,N,);
Attribute(slowScanning,boolean,Private,N,N,);
Attribute(slowScanLock,java.lang.Object,Private,N,N,);
Attribute(illegal,java.lang.IllegalStateException,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(matchPatternStart,boolean,Protected,Y,N);
Method(matchPatternStart$2,boolean,Protected,Y,N);
Method(matchPath,boolean,Protected,Y,N);
Method(matchPath$2,boolean,Protected,Y,N);
Method(match,boolean,Public,Y,N);
Method(match$2,boolean,Protected,Y,N);
Method(getDefaultExcludes,java.lang.String[],Public,Y,N);
Method(addDefaultExclude,boolean,Public,Y,N);
Method(removeDefaultExclude,boolean,Public,Y,N);
Method(resetDefaultExcludes,void,Public,Y,N);
Method(setBasedir,void,Public,N,N);
Method(setBasedir$2,void,Public,N,N);
Method(getBasedir,java.io.File,Public,N,N);
Method(isCaseSensitive,boolean,Public,N,N);
Method(setCaseSensitive,void,Public,N,N);
Method(isFollowSymlinks,boolean,Public,N,N);
Method(setFollowSymlinks,void,Public,N,N);
Method(setIncludes,void,Public,N,N);
Method(setExcludes,void,Public,N,N);
Method(addExcludes,void,Public,N,N);
Method(normalizePattern,java.lang.String,Private,Y,N);
Method(setSelectors,void,Public,N,N);
Method(isEverythingIncluded,boolean,Public,N,N);
Method(scan,void,Public,N,N);
Method(checkIncludePatterns,void,Private,N,N);
Method(clearResults,void,Protected,N,N);
Method(slowScan,void,Protected,N,N);
Method(processSlowScan,void,Private,N,N);
Method(scandir,void,Protected,N,N);
Method(accountForIncludedFile,void,Private,N,N);
Method(accountForIncludedDir,void,Private,N,N);
Method(processIncluded,void,Private,N,N);
Method(isIncluded,boolean,Protected,N,N);
Method(couldHoldIncluded,boolean,Protected,N,N);
Method(isDeeper,boolean,Private,N,N);
Method(isMorePowerfulThanExcludes,boolean,Private,N,N);
Method(contentsExcluded,boolean,Private,N,N);
Method(isExcluded,boolean,Protected,N,N);
Method(isSelected,boolean,Protected,N,N);
Method(getIncludedFiles,java.lang.String[],Public,N,N);
Method(getIncludedFilesCount,int,Public,N,N);
Method(getNotIncludedFiles,java.lang.String[],Public,N,N);
Method(getExcludedFiles,java.lang.String[],Public,N,N);
Method(getDeselectedFiles,java.lang.String[],Public,N,N);
Method(getIncludedDirectories,java.lang.String[],Public,N,N);
Method(getIncludedDirsCount,int,Public,N,N);
Method(getNotIncludedDirectories,java.lang.String[],Public,N,N);
Method(getExcludedDirectories,java.lang.String[],Public,N,N);
Method(getDeselectedDirectories,java.lang.String[],Public,N,N);
Method(addDefaultExcludes,void,Public,N,N);
Method(getResource,org.apache.tools.ant.types.Resource,Public,N,N);
Method(list,java.lang.String[],Private,N,N);
Method(findFile,java.io.File,Private,N,N);
Method(findFile$2,java.io.File,Private,N,N);
Method(isSymlink,boolean,Private,N,N);
Method(isSymlink$2,boolean,Private,N,N);
Method(hasBeenScanned,boolean,Private,N,N);
Method(getScannedDirs,java.util.Set,Public,N,N);
Method(clearCaches,void,Private,N,N);
Method(ensureNonPatternSetsReady,void,Private,N,N);
Method(fillNonPatternSet,java.lang.String[],Private,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(matchPatternStart,java.lang.String,);
Parameter(matchPatternStart,java.lang.String,);
Parameter(matchPatternStart$2,java.lang.String,);
Parameter(matchPatternStart$2,java.lang.String,);
Parameter(matchPatternStart$2,boolean,);
Parameter(matchPath,java.lang.String,);
Parameter(matchPath,java.lang.String,);
Parameter(matchPath$2,java.lang.String,);
Parameter(matchPath$2,java.lang.String,);
Parameter(matchPath$2,boolean,);
Parameter(match,java.lang.String,);
Parameter(match,java.lang.String,);
Parameter(match$2,java.lang.String,);
Parameter(match$2,java.lang.String,);
Parameter(match$2,boolean,);
Parameter(addDefaultExclude,java.lang.String,);
Parameter(removeDefaultExclude,java.lang.String,);
Parameter(setBasedir,java.lang.String,);
Parameter(setBasedir$2,java.io.File,);
Parameter(setCaseSensitive,boolean,);
Parameter(setFollowSymlinks,boolean,);
Parameter(setIncludes,java.lang.String[],);
Parameter(setExcludes,java.lang.String[],);
Parameter(addExcludes,java.lang.String[],);
Parameter(normalizePattern,java.lang.String,);
Parameter(setSelectors,org.apache.tools.ant.types.selectors.FileSelector[],);
Parameter(processSlowScan,java.lang.String[],);
Parameter(scandir,java.io.File,);
Parameter(scandir,java.lang.String,);
Parameter(scandir,boolean,);
Parameter(accountForIncludedFile,java.lang.String,);
Parameter(accountForIncludedFile,java.io.File,);
Parameter(accountForIncludedDir,java.lang.String,);
Parameter(accountForIncludedDir,java.io.File,);
Parameter(accountForIncludedDir,boolean,);
Parameter(processIncluded,java.lang.String,);
Parameter(processIncluded,java.io.File,);
Parameter(processIncluded,java.util.Vector,);
Parameter(processIncluded,java.util.Vector,);
Parameter(processIncluded,java.util.Vector,);
Parameter(isIncluded,java.lang.String,);
Parameter(couldHoldIncluded,java.lang.String,);
Parameter(isDeeper,java.lang.String,);
Parameter(isDeeper,java.lang.String,);
Parameter(isMorePowerfulThanExcludes,java.lang.String,);
Parameter(isMorePowerfulThanExcludes,java.lang.String,);
Parameter(contentsExcluded,java.lang.String,);
Parameter(isExcluded,java.lang.String,);
Parameter(isSelected,java.lang.String,);
Parameter(isSelected,java.io.File,);
Parameter(getResource,java.lang.String,);
Parameter(list,java.io.File,);
Parameter(findFile,java.io.File,);
Parameter(findFile,java.lang.String,);
Parameter(findFile,boolean,);
Parameter(findFile$2,java.io.File,);
Parameter(findFile$2,java.util.Vector,);
Parameter(findFile$2,boolean,);
Parameter(isSymlink,java.io.File,);
Parameter(isSymlink,java.lang.String,);
Parameter(isSymlink$2,java.io.File,);
Parameter(isSymlink$2,java.util.Vector,);
Parameter(hasBeenScanned,java.lang.String,);
Parameter(fillNonPatternSet,java.util.Set,);
Parameter(fillNonPatternSet,java.lang.String[],);
Realization(org.apache.tools.ant.FileScanner);
Realization(org.apache.tools.ant.types.selectors.SelectorScanner);
Realization(org.apache.tools.ant.types.ResourceFactory);
Composition(org.apache.tools.ant.util.FileUtils);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,setBasedir --> setBasedir$2,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,setIncludes --> normalizePattern,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,setExcludes --> normalizePattern,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,addExcludes --> normalizePattern,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,addExcludes --> setExcludes,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,scan --> clearResults,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,scan --> isIncluded,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,scan --> isExcluded,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,scan --> isSelected,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,scan --> checkIncludePatterns,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,scan --> clearCaches,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,checkIncludePatterns --> isCaseSensitive,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,checkIncludePatterns --> scandir,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,checkIncludePatterns --> findFile,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,checkIncludePatterns --> isSymlink,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,checkIncludePatterns --> isIncluded,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,checkIncludePatterns --> accountForIncludedDir,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,checkIncludePatterns --> accountForIncludedFile,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,slowScan --> processSlowScan,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,slowScan --> clearCaches,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,processSlowScan --> couldHoldIncluded,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,processSlowScan --> scandir,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,scandir --> hasBeenScanned,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,scandir --> isIncluded,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,scandir --> accountForIncludedDir,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,scandir --> couldHoldIncluded,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,scandir --> scandir,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,scandir --> accountForIncludedFile,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,accountForIncludedFile --> processIncluded,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,accountForIncludedDir --> processIncluded,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,accountForIncludedDir --> couldHoldIncluded,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,accountForIncludedDir --> contentsExcluded,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,accountForIncludedDir --> scandir,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,processIncluded --> isExcluded,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,processIncluded --> isSelected,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,isIncluded --> ensureNonPatternSetsReady,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,isIncluded --> isCaseSensitive,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,isIncluded --> matchPath$2,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,couldHoldIncluded --> isCaseSensitive,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,couldHoldIncluded --> matchPatternStart$2,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,couldHoldIncluded --> isMorePowerfulThanExcludes,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,couldHoldIncluded --> isDeeper,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,contentsExcluded --> isCaseSensitive,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,isExcluded --> ensureNonPatternSetsReady,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,isExcluded --> isCaseSensitive,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,isExcluded --> matchPath$2,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,getNotIncludedFiles --> slowScan,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,getExcludedFiles --> slowScan,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,getDeselectedFiles --> slowScan,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,getNotIncludedDirectories --> slowScan,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,getExcludedDirectories --> slowScan,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,getDeselectedDirectories --> slowScan,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,addDefaultExcludes --> getDefaultExcludes,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,findFile --> findFile$2,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,findFile$2 --> findFile$2,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,findFile$2 --> list,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,isSymlink --> isSymlink$2,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,isSymlink$2 --> isSymlink$2,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,ensureNonPatternSetsReady --> fillNonPatternSet,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,fillNonPatternSet --> isCaseSensitive,org.apache.tools.ant.DirectoryScanner,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,<clinit> --> resetDefaultExcludes,org.apache.tools.ant.DirectoryScanner,);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,<init> --> selectors,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,<init> --> haveSlowResults,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,<init> --> isCaseSensitive,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,<init> --> followSymlinks,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,<init> --> everythingIncluded,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,<init> --> fileListMap,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,<init> --> scannedDirs,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,<init> --> includeNonPatterns,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,<init> --> excludeNonPatterns,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,<init> --> areNonPatternSetsReady,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,<init> --> scanning,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,<init> --> scanLock,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,<init> --> slowScanning,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,<init> --> slowScanLock,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,<init> --> illegal,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,getDefaultExcludes --> defaultExcludes,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,addDefaultExclude --> defaultExcludes,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,removeDefaultExclude --> defaultExcludes,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,resetDefaultExcludes --> DEFAULTEXCLUDES,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,resetDefaultExcludes --> defaultExcludes,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,resetDefaultExcludes --> defaultExcludes,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,setBasedir$2 --> basedir,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,getBasedir --> basedir,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,isCaseSensitive --> isCaseSensitive,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,setCaseSensitive --> isCaseSensitive,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,isFollowSymlinks --> followSymlinks,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,setFollowSymlinks --> followSymlinks,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,setIncludes --> includes,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,setIncludes --> includes,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,setExcludes --> excludes,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,setExcludes --> excludes,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,addExcludes --> excludes,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,addExcludes --> excludes,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,setSelectors --> selectors,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,isEverythingIncluded --> everythingIncluded,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,scan --> scanLock,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,scan --> scanning,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,scan --> illegal,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,scan --> includes,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,scan --> excludes,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,scan --> basedir,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,scan --> dirsIncluded,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,scan --> dirsDeselected,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,scan --> dirsExcluded,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,scan --> dirsNotIncluded,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,scan --> scanning,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,scan --> illegal,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,scan --> includes,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,scan --> excludes,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,checkIncludePatterns --> includes,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,checkIncludePatterns --> basedir,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,checkIncludePatterns --> FILE_UTILS,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,checkIncludePatterns --> ON_VMS,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,checkIncludePatterns --> followSymlinks,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,clearResults --> basedir,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,clearResults --> scannedDirs,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,clearResults --> filesIncluded,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,clearResults --> filesNotIncluded,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,clearResults --> filesExcluded,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,clearResults --> filesDeselected,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,clearResults --> dirsIncluded,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,clearResults --> dirsNotIncluded,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,clearResults --> dirsExcluded,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,clearResults --> dirsDeselected,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,clearResults --> everythingIncluded,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,slowScan --> slowScanLock,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,slowScan --> haveSlowResults,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,slowScan --> slowScanning,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,slowScan --> includes,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,slowScan --> excludes,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,slowScan --> dirsExcluded,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,slowScan --> dirsNotIncluded,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,slowScan --> slowScanning,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,slowScan --> includes,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,slowScan --> excludes,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,slowScan --> haveSlowResults,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,processSlowScan --> basedir,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,scandir --> followSymlinks,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,scandir --> FILE_UTILS,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,scandir --> dirsExcluded,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,scandir --> filesExcluded,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,scandir --> dirsNotIncluded,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,scandir --> filesNotIncluded,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,scandir --> everythingIncluded,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,accountForIncludedFile --> filesIncluded,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,accountForIncludedFile --> filesExcluded,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,accountForIncludedFile --> filesDeselected,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,accountForIncludedDir --> dirsIncluded,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,accountForIncludedDir --> dirsExcluded,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,accountForIncludedDir --> dirsDeselected,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,processIncluded --> everythingIncluded,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,processIncluded --> everythingIncluded,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,isIncluded --> includeNonPatterns,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,isIncluded --> includePatterns,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,couldHoldIncluded --> includes,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,isMorePowerfulThanExcludes --> excludes,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,contentsExcluded --> excludes,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,isExcluded --> excludeNonPatterns,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,isExcluded --> excludePatterns,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,isSelected --> selectors,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,isSelected --> basedir,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,getIncludedFiles --> filesIncluded,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,getIncludedFilesCount --> filesIncluded,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,getNotIncludedFiles --> filesNotIncluded,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,getExcludedFiles --> filesExcluded,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,getDeselectedFiles --> filesDeselected,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,getIncludedDirectories --> dirsIncluded,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,getIncludedDirsCount --> dirsIncluded,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,getNotIncludedDirectories --> dirsNotIncluded,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,getExcludedDirectories --> dirsExcluded,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,getDeselectedDirectories --> dirsDeselected,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,addDefaultExcludes --> excludes,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,addDefaultExcludes --> defaultExcludes,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,addDefaultExcludes --> excludes,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,getResource --> basedir,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,list --> fileListMap,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,findFile --> FILE_UTILS,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,findFile$2 --> CS_SCAN_ONLY,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,findFile$2 --> CS_THEN_NON_CS,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,isSymlink$2 --> FILE_UTILS,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,hasBeenScanned --> scannedDirs,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,getScannedDirs --> scannedDirs,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,clearCaches --> fileListMap,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,clearCaches --> includeNonPatterns,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,clearCaches --> excludeNonPatterns,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,clearCaches --> includePatterns,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,clearCaches --> excludePatterns,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,clearCaches --> areNonPatternSetsReady,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,ensureNonPatternSetsReady --> areNonPatternSetsReady,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,ensureNonPatternSetsReady --> includeNonPatterns,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,ensureNonPatternSetsReady --> includes,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,ensureNonPatternSetsReady --> excludeNonPatterns,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,ensureNonPatternSetsReady --> excludes,org.apache.tools.ant.DirectoryScanner,READ);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,ensureNonPatternSetsReady --> includePatterns,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,ensureNonPatternSetsReady --> excludePatterns,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,ensureNonPatternSetsReady --> areNonPatternSetsReady,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,<clinit> --> ON_VMS,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,<clinit> --> DEFAULTEXCLUDES,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,<clinit> --> FILE_UTILS,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,<clinit> --> CS_SCAN_ONLY,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,<clinit> --> CS_THEN_NON_CS,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.DirectoryScanner,<clinit> --> defaultExcludes,org.apache.tools.ant.DirectoryScanner,WRITE);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,matchPatternStart --> matchPatternStart,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,matchPatternStart$2 --> matchPatternStart$2,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,matchPath --> matchPath,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,matchPath$2 --> matchPath$2,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,match --> match,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,match$2 --> match$2,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,checkIncludePatterns --> isAbsolutePath,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,checkIncludePatterns --> matchPatternStart$2,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,checkIncludePatterns --> rtrimWildcardTokens,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,checkIncludePatterns --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,checkIncludePatterns --> removeLeadingPath,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,scandir --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,scandir --> isSymbolicLink,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,isDeeper --> tokenizePath,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,contentsExcluded --> matchPath$2,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,isSelected --> isSelected,org.apache.tools.ant.types.selectors.FileSelector,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,getResource --> <init>$2,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,findFile --> isAbsolutePath,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,findFile --> dissect,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,findFile --> normalize,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,findFile --> removeLeadingPath,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,findFile --> tokenizePath,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,findFile$2 --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,isSymlink --> tokenizePath,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,isSymlink$2 --> isSymbolicLink,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,fillNonPatternSet --> hasWildcards,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,<clinit> --> isFamily,org.apache.tools.ant.taskdefs.condition.Os,);
Call(METHOD,org.apache.tools.ant.DirectoryScanner,<clinit> --> getFileUtils,org.apache.tools.ant.util.FileUtils,);
EndClass 152
StartClass 153
Class(org.apache.tools.ant.types.resources.FileResourceIterator,N,N,Public);
Attribute(basedir,java.io.File,Private,N,N,);
Attribute(files,java.lang.String[],Private,N,N,);
Attribute(pos,int,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(addFiles,void,Public,N,N);
Method(hasNext,boolean,Public,N,N);
Method(next,java.lang.Object,Public,N,N);
Method(remove,void,Public,N,N);
Method(nextResource,org.apache.tools.ant.types.resources.FileResource,Public,N,N);
Parameter(<init>$2,java.io.File,);
Parameter(<init>$3,java.io.File,);
Parameter(<init>$3,java.lang.String[],);
Parameter(addFiles,java.lang.String[],);
Call(METHOD,org.apache.tools.ant.types.resources.FileResourceIterator,<init>$3 --> <init>$2,org.apache.tools.ant.types.resources.FileResourceIterator,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResourceIterator,<init>$3 --> addFiles,org.apache.tools.ant.types.resources.FileResourceIterator,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResourceIterator,next --> nextResource,org.apache.tools.ant.types.resources.FileResourceIterator,);
Call(METHOD,org.apache.tools.ant.types.resources.FileResourceIterator,nextResource --> hasNext,org.apache.tools.ant.types.resources.FileResourceIterator,);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResourceIterator,<init> --> pos,org.apache.tools.ant.types.resources.FileResourceIterator,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResourceIterator,<init>$2 --> pos,org.apache.tools.ant.types.resources.FileResourceIterator,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResourceIterator,<init>$2 --> basedir,org.apache.tools.ant.types.resources.FileResourceIterator,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResourceIterator,addFiles --> files,org.apache.tools.ant.types.resources.FileResourceIterator,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResourceIterator,addFiles --> files,org.apache.tools.ant.types.resources.FileResourceIterator,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResourceIterator,hasNext --> pos,org.apache.tools.ant.types.resources.FileResourceIterator,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResourceIterator,hasNext --> files,org.apache.tools.ant.types.resources.FileResourceIterator,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResourceIterator,nextResource --> basedir,org.apache.tools.ant.types.resources.FileResourceIterator,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResourceIterator,nextResource --> files,org.apache.tools.ant.types.resources.FileResourceIterator,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResourceIterator,nextResource --> pos,org.apache.tools.ant.types.resources.FileResourceIterator,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FileResourceIterator,nextResource --> pos,org.apache.tools.ant.types.resources.FileResourceIterator,WRITE);
Call(METHOD,org.apache.tools.ant.types.resources.FileResourceIterator,nextResource --> <init>$2,org.apache.tools.ant.types.resources.FileResource,);
EndClass 153
StartClass 154
Class(org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,N,Y,Public);
Attribute(rc,java.util.List,Private,N,N,);
Attribute(coll,java.util.Collection,Private,N,N,);
Attribute(cache,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setCache,void,Public,N,N);
Method(isCache,boolean,Public,N,N);
Method(clear,void,Public,N,N);
Method(add,void,Public,N,N);
Method(addAll,void,Public,N,N);
Method(iterator,java.util.Iterator,Public,N,N);
Method(size,int,Public,N,N);
Method(isFilesystemOnly,boolean,Public,N,N);
Method(dieOnCircularReference,void,Protected,N,N);
Method(getResourceCollections,java.util.List,Protected,N,N);
Method(getCollection,java.util.Collection,Protected,N,Y);
Method(clone,java.lang.Object,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(cacheCollection,java.util.Collection,Private,N,N);
Parameter(setCache,boolean,);
Parameter(add,org.apache.tools.ant.types.ResourceCollection,);
Parameter(addAll,java.util.Collection,);
Parameter(dieOnCircularReference,java.util.Stack,);
Parameter(dieOnCircularReference,org.apache.tools.ant.Project,);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
SubClass(org.apache.tools.ant.types.resources.Union);
Generalization(org.apache.tools.ant.types.DataType);
Realization(org.apache.tools.ant.types.ResourceCollection);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,addAll --> add,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,iterator --> iterator,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,iterator --> cacheCollection,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,size --> size,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,size --> cacheCollection,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,isFilesystemOnly --> isFilesystemOnly,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,isFilesystemOnly --> cacheCollection,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,toString --> cacheCollection,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,cacheCollection --> isCache,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,cacheCollection --> getCollection,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,<init> --> rc,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,<init> --> coll,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,<init> --> cache,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,setCache --> cache,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,isCache --> cache,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,clear --> rc,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,clear --> coll,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,add --> rc,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,add --> coll,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,isFilesystemOnly --> rc,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,dieOnCircularReference --> rc,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,getResourceCollections --> rc,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,clone --> rc,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,clone --> rc,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,clone --> coll,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,toString --> coll,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,cacheCollection --> coll,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,cacheCollection --> coll,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,WRITE);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,<init> --> <init>,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,clear --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,clear --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,clear --> invalidate,org.apache.tools.ant.types.resources.FailFast,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,clear --> setChecked,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,add --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,add --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,add --> invalidate,org.apache.tools.ant.types.resources.FailFast,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,add --> setChecked,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,addAll --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,addAll --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,addAll --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,iterator --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,iterator --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,iterator --> dieOnCircularReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,iterator --> <init>,org.apache.tools.ant.types.resources.FailFast,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,size --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,size --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,size --> dieOnCircularReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,isFilesystemOnly --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,isFilesystemOnly --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,isFilesystemOnly --> dieOnCircularReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,isFilesystemOnly --> isFilesystemOnly,org.apache.tools.ant.types.ResourceCollection,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,dieOnCircularReference --> isChecked,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,dieOnCircularReference --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,dieOnCircularReference --> dieOnCircularReference$3,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,dieOnCircularReference --> invokeCircularReferenceCheck,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,dieOnCircularReference --> setChecked,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,getResourceCollections --> dieOnCircularReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,clone --> clone,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,clone --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,toString --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,toString --> getCheckedRef,org.apache.tools.ant.types.DataType,);
EndClass 154
StartClass 155
Class(org.apache.tools.ant.types.FileList$FileName,N,N,Public);
Attribute(name,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setName,void,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Parameter(setName,java.lang.String,);
Call(ATTRIBUTE,org.apache.tools.ant.types.FileList$FileName,setName --> name,org.apache.tools.ant.types.FileList$FileName,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FileList$FileName,getName --> name,org.apache.tools.ant.types.FileList$FileName,READ);
EndClass 155
StartClass 156
Class(org.apache.tools.ant.types.resources.FailFast,N,N,NA);
Attribute(MAP,java.util.WeakHashMap,Private,Y,Y,);
Attribute(parent,java.lang.Object,Private,N,N,);
Attribute(wrapped,java.util.Iterator,Private,N,N,);
Method(invalidate,void,Public,Y,N);
Method(add,void,Private,Y,N);
Method(remove,void,Private,Y,N);
Method(failFast,void,Private,Y,N);
Method(<init>,void,Public,N,N);
Method(hasNext,boolean,Public,N,N);
Method(next,java.lang.Object,Public,N,N);
Method(remove$2,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(invalidate,java.lang.Object,);
Parameter(add,org.apache.tools.ant.types.resources.FailFast,);
Parameter(remove,org.apache.tools.ant.types.resources.FailFast,);
Parameter(failFast,org.apache.tools.ant.types.resources.FailFast,);
Parameter(<init>,java.lang.Object,);
Parameter(<init>,java.util.Iterator,);
Call(METHOD,org.apache.tools.ant.types.resources.FailFast,<init> --> add,org.apache.tools.ant.types.resources.FailFast,);
Call(METHOD,org.apache.tools.ant.types.resources.FailFast,hasNext --> failFast,org.apache.tools.ant.types.resources.FailFast,);
Call(METHOD,org.apache.tools.ant.types.resources.FailFast,next --> failFast,org.apache.tools.ant.types.resources.FailFast,);
Call(METHOD,org.apache.tools.ant.types.resources.FailFast,next --> remove,org.apache.tools.ant.types.resources.FailFast,);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FailFast,invalidate --> MAP,org.apache.tools.ant.types.resources.FailFast,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FailFast,add --> MAP,org.apache.tools.ant.types.resources.FailFast,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FailFast,add --> parent,org.apache.tools.ant.types.resources.FailFast,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FailFast,remove --> MAP,org.apache.tools.ant.types.resources.FailFast,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FailFast,remove --> parent,org.apache.tools.ant.types.resources.FailFast,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FailFast,failFast --> MAP,org.apache.tools.ant.types.resources.FailFast,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FailFast,failFast --> parent,org.apache.tools.ant.types.resources.FailFast,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FailFast,<init> --> parent,org.apache.tools.ant.types.resources.FailFast,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FailFast,<init> --> wrapped,org.apache.tools.ant.types.resources.FailFast,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FailFast,hasNext --> wrapped,org.apache.tools.ant.types.resources.FailFast,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FailFast,next --> wrapped,org.apache.tools.ant.types.resources.FailFast,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FailFast,next --> wrapped,org.apache.tools.ant.types.resources.FailFast,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.FailFast,<clinit> --> MAP,org.apache.tools.ant.types.resources.FailFast,WRITE);
EndClass 156
StartClass 157
Class(org.apache.tools.ant.types.resources.Resources$1,N,N,NA);
Method(<init>,void,Public,N,N);
Method(isFilesystemOnly,boolean,Public,N,N);
Method(iterator,java.util.Iterator,Public,N,N);
Method(size,int,Public,N,N);
Realization(org.apache.tools.ant.types.ResourceCollection);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources$1,iterator --> EMPTY_ITERATOR,org.apache.tools.ant.types.resources.Resources,READ);
EndClass 157
StartClass 158
Class(org.apache.tools.ant.types.resources.Resources$2,N,N,NA);
Method(<init>,void,Public,N,N);
Method(next,java.lang.Object,Public,N,N);
Method(hasNext,boolean,Public,N,N);
Method(remove,void,Public,N,N);
EndClass 158
StartClass 159
Class(org.apache.tools.ant.types.resources.Resources$MyCollection,N,N,NA);
Attribute(size,int,Private,N,N,);
Attribute(this$0,org.apache.tools.ant.types.resources.Resources,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(size,int,Public,N,N);
Method(iterator,java.util.Iterator,Public,N,N);
Method(access$200,org.apache.tools.ant.types.resources.Resources,Public,Y,N);
Parameter(<init>,org.apache.tools.ant.types.resources.Resources,);
Parameter(access$200,org.apache.tools.ant.types.resources.Resources$MyCollection,);
Composition(org.apache.tools.ant.types.resources.Resources);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources$MyCollection,<init> --> size,org.apache.tools.ant.types.resources.Resources$MyCollection,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources$MyCollection,<init> --> this$0,org.apache.tools.ant.types.resources.Resources$MyCollection,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources$MyCollection,<init> --> size,org.apache.tools.ant.types.resources.Resources$MyCollection,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources$MyCollection,size --> size,org.apache.tools.ant.types.resources.Resources$MyCollection,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources$MyCollection,access$200 --> this$0,org.apache.tools.ant.types.resources.Resources$MyCollection,READ);
Call(METHOD,org.apache.tools.ant.types.resources.Resources$MyCollection,<init> --> access$000,org.apache.tools.ant.types.resources.Resources,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources$MyCollection,<init> --> size,org.apache.tools.ant.types.ResourceCollection,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources$MyCollection,iterator --> <init>$2,org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,);
EndClass 159
StartClass 160
Class(org.apache.tools.ant.types.resources.selectors.Type$FileDir,N,N,Public);
Attribute(VALUES,java.lang.String[],Private,Y,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getValues,java.lang.String[],Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>$2,java.lang.String,);
SuperClass(org.apache.tools.ant.types.EnumeratedAttribute);
Generalization(org.apache.tools.ant.types.EnumeratedAttribute);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Type$FileDir,getValues --> VALUES,org.apache.tools.ant.types.resources.selectors.Type$FileDir,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.Type$FileDir,<clinit> --> VALUES,org.apache.tools.ant.types.resources.selectors.Type$FileDir,WRITE);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.Type$FileDir,<init> --> <init>,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.Type$FileDir,<init>$2 --> <init>,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.Type$FileDir,<init>$2 --> setValue,org.apache.tools.ant.types.EnumeratedAttribute,);
EndClass 160
StartClass 161
Class(org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,N,N,Public);
Attribute(v,java.util.Vector,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(add,void,Public,N,N);
Method(hasSelectors,boolean,Public,N,N);
Method(selectorCount,int,Public,N,N);
Method(getSelectors,java.util.Iterator,Public,N,N);
Method(dieOnCircularReference,void,Protected,N,N);
Parameter(<init>$2,org.apache.tools.ant.types.resources.selectors.ResourceSelector[],);
Parameter(add,org.apache.tools.ant.types.resources.selectors.ResourceSelector,);
Parameter(dieOnCircularReference,java.util.Stack,);
Parameter(dieOnCircularReference,org.apache.tools.ant.Project,);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
SubClass(org.apache.tools.ant.types.resources.selectors.And);
SubClass(org.apache.tools.ant.types.resources.Restrict);
SubClass(org.apache.tools.ant.types.resources.selectors.Or);
Generalization(org.apache.tools.ant.types.DataType);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,<init>$2 --> add,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,hasSelectors --> hasSelectors,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,selectorCount --> selectorCount,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,getSelectors --> getSelectors,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,<init> --> v,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,<init>$2 --> v,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,add --> v,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,hasSelectors --> v,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,selectorCount --> v,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,getSelectors --> v,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,dieOnCircularReference --> v,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,READ);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,<init> --> <init>,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,<init>$2 --> <init>,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,add --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,add --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,add --> setChecked,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,hasSelectors --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,hasSelectors --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,hasSelectors --> dieOnCircularReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,selectorCount --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,selectorCount --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,selectorCount --> dieOnCircularReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,getSelectors --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,getSelectors --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,getSelectors --> dieOnCircularReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,dieOnCircularReference --> isChecked,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,dieOnCircularReference --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,dieOnCircularReference --> dieOnCircularReference$3,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,dieOnCircularReference --> invokeCircularReferenceCheck,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,dieOnCircularReference --> setChecked,org.apache.tools.ant.types.DataType,);
EndClass 161
StartClass 162
Class(org.apache.tools.ant.util.Tokenizer,Y,Y,Public);
Method(getToken,java.lang.String,Public,N,Y);
Method(getPostToken,java.lang.String,Public,N,Y);
Parameter(getToken,java.io.Reader,);
EndClass 162
StartClass 163
Class(org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,N,Y,Public);
Attribute(ONE_NESTED_MESSAGE,java.lang.String,Private,Y,Y,);
Attribute(rc,org.apache.tools.ant.types.ResourceCollection,Private,N,N,);
Attribute(coll,java.util.Collection,Private,N,N,);
Attribute(cache,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setCache,void,Public,N,N);
Method(isCache,boolean,Public,N,N);
Method(add,void,Public,N,N);
Method(iterator,java.util.Iterator,Public,N,N);
Method(size,int,Public,N,N);
Method(isFilesystemOnly,boolean,Public,N,N);
Method(dieOnCircularReference,void,Protected,N,N);
Method(getResourceCollection,org.apache.tools.ant.types.ResourceCollection,Protected,N,N);
Method(getCollection,java.util.Collection,Protected,N,Y);
Method(toString,java.lang.String,Public,N,N);
Method(cacheCollection,java.util.Collection,Private,N,N);
Method(oneNested,org.apache.tools.ant.BuildException,Private,N,N);
Parameter(setCache,boolean,);
Parameter(add,org.apache.tools.ant.types.ResourceCollection,);
Parameter(dieOnCircularReference,java.util.Stack,);
Parameter(dieOnCircularReference,org.apache.tools.ant.Project,);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
SubClass(org.apache.tools.ant.types.resources.Restrict$1);
Generalization(org.apache.tools.ant.types.DataType);
Realization(org.apache.tools.ant.types.ResourceCollection);
Composition(org.apache.tools.ant.types.ResourceCollection);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,add --> oneNested,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,iterator --> iterator,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,iterator --> cacheCollection,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,size --> size,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,size --> cacheCollection,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,isFilesystemOnly --> cacheCollection,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,getResourceCollection --> oneNested,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,toString --> cacheCollection,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,cacheCollection --> isCache,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,cacheCollection --> getCollection,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,<init> --> coll,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,<init> --> cache,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,setCache --> cache,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,isCache --> cache,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,add --> rc,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,add --> rc,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,isFilesystemOnly --> rc,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,dieOnCircularReference --> rc,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,getResourceCollection --> rc,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,toString --> coll,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,cacheCollection --> coll,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,cacheCollection --> coll,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,WRITE);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,<init> --> <init>,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,add --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,add --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,add --> setChecked,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,iterator --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,iterator --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,iterator --> dieOnCircularReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,iterator --> <init>,org.apache.tools.ant.types.resources.FailFast,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,size --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,size --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,size --> dieOnCircularReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,isFilesystemOnly --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,isFilesystemOnly --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,isFilesystemOnly --> isFilesystemOnly,org.apache.tools.ant.types.resources.BaseResourceCollectionContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,isFilesystemOnly --> dieOnCircularReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,isFilesystemOnly --> isFilesystemOnly,org.apache.tools.ant.types.ResourceCollection,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,dieOnCircularReference --> isChecked,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,dieOnCircularReference --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,dieOnCircularReference --> dieOnCircularReference$3,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,dieOnCircularReference --> invokeCircularReferenceCheck,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,dieOnCircularReference --> setChecked,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,getResourceCollection --> dieOnCircularReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,toString --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,toString --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,oneNested --> toString,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,oneNested --> <init>$2,org.apache.tools.ant.BuildException,);
EndClass 163
StartClass 164
Class(org.apache.tools.ant.types.resources.Restrict$1,N,N,NA);
Attribute(this$0,org.apache.tools.ant.types.resources.Restrict,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(getCollection,java.util.Collection,Protected,N,N);
Parameter(<init>,org.apache.tools.ant.types.resources.Restrict,);
SuperClass(org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper);
Composition(org.apache.tools.ant.types.resources.Restrict);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Restrict$1,<init> --> this$0,org.apache.tools.ant.types.resources.Restrict$1,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Restrict$1,getCollection --> this$0,org.apache.tools.ant.types.resources.Restrict$1,READ);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict$1,<init> --> <init>,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict$1,getCollection --> access$000,org.apache.tools.ant.types.resources.Restrict,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict$1,getCollection --> getResourceCollection,org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict$1,getCollection --> iterator,org.apache.tools.ant.types.ResourceCollection,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict$1,getCollection --> getSelectors,org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.resources.Restrict$1,getCollection --> isSelected,org.apache.tools.ant.types.resources.selectors.ResourceSelector,);
EndClass 164
StartClass 165
Class(org.apache.tools.ant.filters.BaseFilterReader,N,Y,Public);
Attribute(BUFFER_SIZE,int,Private,Y,Y,);
Attribute(initialized,boolean,Private,N,N,);
Attribute(project,org.apache.tools.ant.Project,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(read,int,Public,N,N);
Method(skip,long,Public,N,N);
Method(setInitialized,void,Protected,N,N);
Method(getInitialized,boolean,Protected,N,N);
Method(setProject,void,Public,N,N);
Method(getProject,org.apache.tools.ant.Project,Protected,N,N);
Method(readLine,java.lang.String,Protected,N,N);
Method(readFully,java.lang.String,Protected,N,N);
Parameter(<init>$2,java.io.Reader,);
Parameter(read,char[],);
Parameter(read,int,);
Parameter(read,int,);
Parameter(skip,long,);
Parameter(setInitialized,boolean,);
Parameter(setProject,org.apache.tools.ant.Project,);
SubClass(org.apache.tools.ant.filters.ClassConstants);
SubClass(org.apache.tools.ant.filters.ExpandProperties);
SubClass(org.apache.tools.ant.filters.StripJavaComments);
SubClass(org.apache.tools.ant.filters.TokenFilter);
SubClass(org.apache.tools.ant.filters.HeadFilter);
SubClass(org.apache.tools.ant.filters.LineContains);
SubClass(org.apache.tools.ant.filters.LineContainsRegExp);
SubClass(org.apache.tools.ant.filters.PrefixLines);
SubClass(org.apache.tools.ant.filters.ReplaceTokens);
SubClass(org.apache.tools.ant.filters.StripLineBreaks);
SubClass(org.apache.tools.ant.filters.StripLineComments);
SubClass(org.apache.tools.ant.filters.TabsToSpaces);
SubClass(org.apache.tools.ant.filters.TailFilter);
SubClass(org.apache.tools.ant.filters.EscapeUnicode);
SubClass(org.apache.tools.ant.filters.BaseParamFilterReader);
SubClass(org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1);
Composition(org.apache.tools.ant.Project);
Call(ATTRIBUTE,org.apache.tools.ant.filters.BaseFilterReader,<init> --> initialized,org.apache.tools.ant.filters.BaseFilterReader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.BaseFilterReader,<init> --> project,org.apache.tools.ant.filters.BaseFilterReader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.BaseFilterReader,<init>$2 --> initialized,org.apache.tools.ant.filters.BaseFilterReader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.BaseFilterReader,<init>$2 --> project,org.apache.tools.ant.filters.BaseFilterReader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.BaseFilterReader,setInitialized --> initialized,org.apache.tools.ant.filters.BaseFilterReader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.BaseFilterReader,getInitialized --> initialized,org.apache.tools.ant.filters.BaseFilterReader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.BaseFilterReader,setProject --> project,org.apache.tools.ant.filters.BaseFilterReader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.BaseFilterReader,getProject --> project,org.apache.tools.ant.filters.BaseFilterReader,READ);
Call(METHOD,org.apache.tools.ant.filters.BaseFilterReader,<init> --> close$2,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.filters.BaseFilterReader,readFully --> readFully$2,org.apache.tools.ant.util.FileUtils,);
EndClass 165
StartClass 166
Class(org.apache.tools.ant.types.Parameterizable,Y,Y,Public);
Method(setParameters,void,Public,N,Y);
Parameter(setParameters,org.apache.tools.ant.types.Parameter[],);
EndClass 166
StartClass 167
Class(org.apache.tools.ant.types.FilterChain,N,N,Public);
Attribute(filterReaders,java.util.Vector,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(addFilterReader,void,Public,N,N);
Method(getFilterReaders,java.util.Vector,Public,N,N);
Method(addClassConstants,void,Public,N,N);
Method(addExpandProperties,void,Public,N,N);
Method(addHeadFilter,void,Public,N,N);
Method(addLineContains,void,Public,N,N);
Method(addLineContainsRegExp,void,Public,N,N);
Method(addPrefixLines,void,Public,N,N);
Method(addReplaceTokens,void,Public,N,N);
Method(addStripJavaComments,void,Public,N,N);
Method(addStripLineBreaks,void,Public,N,N);
Method(addStripLineComments,void,Public,N,N);
Method(addTabsToSpaces,void,Public,N,N);
Method(addTailFilter,void,Public,N,N);
Method(addEscapeUnicode,void,Public,N,N);
Method(addTokenFilter,void,Public,N,N);
Method(addDeleteCharacters,void,Public,N,N);
Method(addContainsRegex,void,Public,N,N);
Method(addReplaceRegex,void,Public,N,N);
Method(addTrim,void,Public,N,N);
Method(addReplaceString,void,Public,N,N);
Method(addIgnoreBlank,void,Public,N,N);
Method(setRefid,void,Public,N,N);
Method(add,void,Public,N,N);
Parameter(addFilterReader,org.apache.tools.ant.types.AntFilterReader,);
Parameter(addClassConstants,org.apache.tools.ant.filters.ClassConstants,);
Parameter(addExpandProperties,org.apache.tools.ant.filters.ExpandProperties,);
Parameter(addHeadFilter,org.apache.tools.ant.filters.HeadFilter,);
Parameter(addLineContains,org.apache.tools.ant.filters.LineContains,);
Parameter(addLineContainsRegExp,org.apache.tools.ant.filters.LineContainsRegExp,);
Parameter(addPrefixLines,org.apache.tools.ant.filters.PrefixLines,);
Parameter(addReplaceTokens,org.apache.tools.ant.filters.ReplaceTokens,);
Parameter(addStripJavaComments,org.apache.tools.ant.filters.StripJavaComments,);
Parameter(addStripLineBreaks,org.apache.tools.ant.filters.StripLineBreaks,);
Parameter(addStripLineComments,org.apache.tools.ant.filters.StripLineComments,);
Parameter(addTabsToSpaces,org.apache.tools.ant.filters.TabsToSpaces,);
Parameter(addTailFilter,org.apache.tools.ant.filters.TailFilter,);
Parameter(addEscapeUnicode,org.apache.tools.ant.filters.EscapeUnicode,);
Parameter(addTokenFilter,org.apache.tools.ant.filters.TokenFilter,);
Parameter(addDeleteCharacters,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters,);
Parameter(addContainsRegex,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,);
Parameter(addReplaceRegex,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,);
Parameter(addTrim,org.apache.tools.ant.filters.TokenFilter$Trim,);
Parameter(addReplaceString,org.apache.tools.ant.filters.TokenFilter$ReplaceString,);
Parameter(addIgnoreBlank,org.apache.tools.ant.filters.TokenFilter$IgnoreBlank,);
Parameter(setRefid,org.apache.tools.ant.types.Reference,);
Parameter(add,org.apache.tools.ant.filters.ChainableReader,);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.DataType);
Call(METHOD,org.apache.tools.ant.types.FilterChain,setRefid --> getFilterReaders,org.apache.tools.ant.types.FilterChain,);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,<init> --> filterReaders,org.apache.tools.ant.types.FilterChain,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,addFilterReader --> filterReaders,org.apache.tools.ant.types.FilterChain,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,getFilterReaders --> filterReaders,org.apache.tools.ant.types.FilterChain,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,addClassConstants --> filterReaders,org.apache.tools.ant.types.FilterChain,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,addExpandProperties --> filterReaders,org.apache.tools.ant.types.FilterChain,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,addHeadFilter --> filterReaders,org.apache.tools.ant.types.FilterChain,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,addLineContains --> filterReaders,org.apache.tools.ant.types.FilterChain,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,addLineContainsRegExp --> filterReaders,org.apache.tools.ant.types.FilterChain,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,addPrefixLines --> filterReaders,org.apache.tools.ant.types.FilterChain,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,addReplaceTokens --> filterReaders,org.apache.tools.ant.types.FilterChain,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,addStripJavaComments --> filterReaders,org.apache.tools.ant.types.FilterChain,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,addStripLineBreaks --> filterReaders,org.apache.tools.ant.types.FilterChain,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,addStripLineComments --> filterReaders,org.apache.tools.ant.types.FilterChain,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,addTabsToSpaces --> filterReaders,org.apache.tools.ant.types.FilterChain,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,addTailFilter --> filterReaders,org.apache.tools.ant.types.FilterChain,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,addEscapeUnicode --> filterReaders,org.apache.tools.ant.types.FilterChain,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,addTokenFilter --> filterReaders,org.apache.tools.ant.types.FilterChain,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,addDeleteCharacters --> filterReaders,org.apache.tools.ant.types.FilterChain,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,addContainsRegex --> filterReaders,org.apache.tools.ant.types.FilterChain,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,addReplaceRegex --> filterReaders,org.apache.tools.ant.types.FilterChain,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,addTrim --> filterReaders,org.apache.tools.ant.types.FilterChain,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,addReplaceString --> filterReaders,org.apache.tools.ant.types.FilterChain,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,addIgnoreBlank --> filterReaders,org.apache.tools.ant.types.FilterChain,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,setRefid --> filterReaders,org.apache.tools.ant.types.FilterChain,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,setRefid --> filterReaders,org.apache.tools.ant.types.FilterChain,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.FilterChain,add --> filterReaders,org.apache.tools.ant.types.FilterChain,READ);
Call(METHOD,org.apache.tools.ant.types.FilterChain,<init> --> <init>,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterChain,setRefid --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.FilterChain,setRefid --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.FilterChain,setRefid --> getReferencedObject,org.apache.tools.ant.types.Reference,);
Call(METHOD,org.apache.tools.ant.types.FilterChain,setRefid --> getRefId,org.apache.tools.ant.types.Reference,);
Call(METHOD,org.apache.tools.ant.types.FilterChain,setRefid --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.FilterChain,setRefid --> setRefid,org.apache.tools.ant.types.DataType,);
EndClass 167
StartClass 168
Class(org.apache.tools.ant.types.AntFilterReader,N,N,Public);
Attribute(className,java.lang.String,Private,N,N,);
Attribute(parameters,java.util.Vector,Private,N,Y,);
Attribute(classpath,org.apache.tools.ant.types.Path,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setClassName,void,Public,N,N);
Method(getClassName,java.lang.String,Public,N,N);
Method(addParam,void,Public,N,N);
Method(setClasspath,void,Public,N,N);
Method(createClasspath,org.apache.tools.ant.types.Path,Public,N,N);
Method(getClasspath,org.apache.tools.ant.types.Path,Public,N,N);
Method(setClasspathRef,void,Public,N,N);
Method(getParams,org.apache.tools.ant.types.Parameter[],Public,N,N);
Method(setRefid,void,Public,N,N);
Parameter(setClassName,java.lang.String,);
Parameter(addParam,org.apache.tools.ant.types.Parameter,);
Parameter(setClasspath,org.apache.tools.ant.types.Path,);
Parameter(setClasspathRef,org.apache.tools.ant.types.Reference,);
Parameter(setRefid,org.apache.tools.ant.types.Reference,);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.DataType);
Composition(org.apache.tools.ant.types.Path);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,setClasspathRef --> createClasspath,org.apache.tools.ant.types.AntFilterReader,);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,setRefid --> getClassName,org.apache.tools.ant.types.AntFilterReader,);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,setRefid --> setClassName,org.apache.tools.ant.types.AntFilterReader,);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,setRefid --> getClasspath,org.apache.tools.ant.types.AntFilterReader,);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,setRefid --> setClasspath,org.apache.tools.ant.types.AntFilterReader,);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,setRefid --> getParams,org.apache.tools.ant.types.AntFilterReader,);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,setRefid --> addParam,org.apache.tools.ant.types.AntFilterReader,);
Call(ATTRIBUTE,org.apache.tools.ant.types.AntFilterReader,<init> --> parameters,org.apache.tools.ant.types.AntFilterReader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AntFilterReader,setClassName --> className,org.apache.tools.ant.types.AntFilterReader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AntFilterReader,getClassName --> className,org.apache.tools.ant.types.AntFilterReader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AntFilterReader,addParam --> parameters,org.apache.tools.ant.types.AntFilterReader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AntFilterReader,setClasspath --> classpath,org.apache.tools.ant.types.AntFilterReader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AntFilterReader,setClasspath --> classpath,org.apache.tools.ant.types.AntFilterReader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AntFilterReader,createClasspath --> classpath,org.apache.tools.ant.types.AntFilterReader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AntFilterReader,createClasspath --> classpath,org.apache.tools.ant.types.AntFilterReader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.AntFilterReader,getClasspath --> classpath,org.apache.tools.ant.types.AntFilterReader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AntFilterReader,getParams --> parameters,org.apache.tools.ant.types.AntFilterReader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AntFilterReader,setRefid --> parameters,org.apache.tools.ant.types.AntFilterReader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AntFilterReader,setRefid --> className,org.apache.tools.ant.types.AntFilterReader,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.AntFilterReader,setRefid --> classpath,org.apache.tools.ant.types.AntFilterReader,READ);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,<init> --> <init>,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,setClasspath --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,setClasspath --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,setClasspath --> append,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,createClasspath --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,createClasspath --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,createClasspath --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,createClasspath --> <init>$2,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,createClasspath --> createPath,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,setClasspathRef --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,setClasspathRef --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,setClasspathRef --> setRefid,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,setRefid --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,setRefid --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,setRefid --> getReferencedObject,org.apache.tools.ant.types.Reference,);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,setRefid --> getRefId,org.apache.tools.ant.types.Reference,);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,setRefid --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.AntFilterReader,setRefid --> setRefid,org.apache.tools.ant.types.DataType,);
EndClass 168
StartClass 169
Class(org.apache.tools.ant.filters.ChainableReader,Y,Y,Public);
Method(chain,java.io.Reader,Public,N,Y);
Parameter(chain,java.io.Reader,);
EndClass 169
StartClass 170
Class(org.apache.tools.ant.types.Parameter,N,N,Public);
Attribute(name,java.lang.String,Private,N,N,);
Attribute(type,java.lang.String,Private,N,N,);
Attribute(value,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setName,void,Public,N,N);
Method(setType,void,Public,N,N);
Method(setValue,void,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(getType,java.lang.String,Public,N,N);
Method(getValue,java.lang.String,Public,N,N);
Parameter(setName,java.lang.String,);
Parameter(setType,java.lang.String,);
Parameter(setValue,java.lang.String,);
Call(ATTRIBUTE,org.apache.tools.ant.types.Parameter,<init> --> name,org.apache.tools.ant.types.Parameter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Parameter,<init> --> type,org.apache.tools.ant.types.Parameter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Parameter,<init> --> value,org.apache.tools.ant.types.Parameter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Parameter,setName --> name,org.apache.tools.ant.types.Parameter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Parameter,setType --> type,org.apache.tools.ant.types.Parameter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Parameter,setValue --> value,org.apache.tools.ant.types.Parameter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Parameter,getName --> name,org.apache.tools.ant.types.Parameter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Parameter,getType --> type,org.apache.tools.ant.types.Parameter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Parameter,getValue --> value,org.apache.tools.ant.types.Parameter,READ);
EndClass 170
StartClass 171
Class(org.apache.tools.ant.types.selectors.SelectorUtils,N,N,Public);
Attribute(instance,org.apache.tools.ant.types.selectors.SelectorUtils,Private,Y,N,);
Attribute(FILE_UTILS,org.apache.tools.ant.util.FileUtils,Private,Y,Y,);
Method(<init>,void,Private,N,N);
Method(getInstance,org.apache.tools.ant.types.selectors.SelectorUtils,Public,Y,N);
Method(matchPatternStart,boolean,Public,Y,N);
Method(matchPatternStart$2,boolean,Public,Y,N);
Method(matchPath,boolean,Public,Y,N);
Method(matchPath$2,boolean,Public,Y,N);
Method(match,boolean,Public,Y,N);
Method(match$2,boolean,Public,Y,N);
Method(tokenizePath,java.util.Vector,Public,Y,N);
Method(tokenizePath$2,java.util.Vector,Public,Y,N);
Method(tokenizePathAsArray,java.lang.String[],Private,Y,N);
Method(isOutOfDate,boolean,Public,Y,N);
Method(isOutOfDate$2,boolean,Public,Y,N);
Method(isOutOfDate$3,boolean,Public,Y,N);
Method(removeWhitespace,java.lang.String,Public,Y,N);
Method(hasWildcards,boolean,Public,Y,N);
Method(rtrimWildcardTokens,java.lang.String,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(matchPatternStart,java.lang.String,);
Parameter(matchPatternStart,java.lang.String,);
Parameter(matchPatternStart$2,java.lang.String,);
Parameter(matchPatternStart$2,java.lang.String,);
Parameter(matchPatternStart$2,boolean,);
Parameter(matchPath,java.lang.String,);
Parameter(matchPath,java.lang.String,);
Parameter(matchPath$2,java.lang.String,);
Parameter(matchPath$2,java.lang.String,);
Parameter(matchPath$2,boolean,);
Parameter(match,java.lang.String,);
Parameter(match,java.lang.String,);
Parameter(match$2,java.lang.String,);
Parameter(match$2,java.lang.String,);
Parameter(match$2,boolean,);
Parameter(tokenizePath,java.lang.String,);
Parameter(tokenizePath$2,java.lang.String,);
Parameter(tokenizePath$2,java.lang.String,);
Parameter(tokenizePathAsArray,java.lang.String,);
Parameter(isOutOfDate,java.io.File,);
Parameter(isOutOfDate,java.io.File,);
Parameter(isOutOfDate,int,);
Parameter(isOutOfDate$2,org.apache.tools.ant.types.Resource,);
Parameter(isOutOfDate$2,org.apache.tools.ant.types.Resource,);
Parameter(isOutOfDate$2,int,);
Parameter(isOutOfDate$3,org.apache.tools.ant.types.Resource,);
Parameter(isOutOfDate$3,org.apache.tools.ant.types.Resource,);
Parameter(isOutOfDate$3,long,);
Parameter(removeWhitespace,java.lang.String,);
Parameter(hasWildcards,java.lang.String,);
Parameter(rtrimWildcardTokens,java.lang.String,);
Composition(org.apache.tools.ant.types.selectors.SelectorUtils);
Composition(org.apache.tools.ant.util.FileUtils);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectorUtils,matchPatternStart --> matchPatternStart$2,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectorUtils,matchPatternStart$2 --> tokenizePathAsArray,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectorUtils,matchPatternStart$2 --> match$2,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectorUtils,matchPath --> matchPath$2,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectorUtils,matchPath$2 --> tokenizePathAsArray,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectorUtils,matchPath$2 --> match$2,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectorUtils,match --> match$2,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectorUtils,tokenizePath --> tokenizePath$2,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectorUtils,isOutOfDate$2 --> isOutOfDate$3,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectorUtils,rtrimWildcardTokens --> tokenizePathAsArray,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectorUtils,rtrimWildcardTokens --> hasWildcards,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectorUtils,<clinit> --> <init>,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SelectorUtils,getInstance --> instance,org.apache.tools.ant.types.selectors.SelectorUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SelectorUtils,tokenizePath$2 --> FILE_UTILS,org.apache.tools.ant.types.selectors.SelectorUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SelectorUtils,tokenizePathAsArray --> FILE_UTILS,org.apache.tools.ant.types.selectors.SelectorUtils,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SelectorUtils,<clinit> --> instance,org.apache.tools.ant.types.selectors.SelectorUtils,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SelectorUtils,<clinit> --> FILE_UTILS,org.apache.tools.ant.types.selectors.SelectorUtils,WRITE);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectorUtils,tokenizePath$2 --> isAbsolutePath,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectorUtils,tokenizePath$2 --> dissect,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectorUtils,tokenizePathAsArray --> isAbsolutePath,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectorUtils,tokenizePathAsArray --> dissect,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectorUtils,isOutOfDate$3 --> isExists,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectorUtils,isOutOfDate$3 --> getLastModified,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectorUtils,<clinit> --> getFileUtils,org.apache.tools.ant.util.FileUtils,);
EndClass 171
StartClass 172
Class(org.apache.tools.ant.types.selectors.SelectorContainer,Y,Y,Public);
Method(hasSelectors,boolean,Public,N,Y);
Method(selectorCount,int,Public,N,Y);
Method(getSelectors,org.apache.tools.ant.types.selectors.FileSelector[],Public,N,Y);
Method(selectorElements,java.util.Enumeration,Public,N,Y);
Method(appendSelector,void,Public,N,Y);
Method(addSelector,void,Public,N,Y);
Method(addAnd,void,Public,N,Y);
Method(addOr,void,Public,N,Y);
Method(addNot,void,Public,N,Y);
Method(addNone,void,Public,N,Y);
Method(addMajority,void,Public,N,Y);
Method(addDate,void,Public,N,Y);
Method(addSize,void,Public,N,Y);
Method(addFilename,void,Public,N,Y);
Method(addCustom,void,Public,N,Y);
Method(addContains,void,Public,N,Y);
Method(addPresent,void,Public,N,Y);
Method(addDepth,void,Public,N,Y);
Method(addDepend,void,Public,N,Y);
Method(addContainsRegexp,void,Public,N,Y);
Method(addType,void,Public,N,Y);
Method(addDifferent,void,Public,N,Y);
Method(addModified,void,Public,N,Y);
Method(add,void,Public,N,Y);
Parameter(getSelectors,org.apache.tools.ant.Project,);
Parameter(appendSelector,org.apache.tools.ant.types.selectors.FileSelector,);
Parameter(addSelector,org.apache.tools.ant.types.selectors.SelectSelector,);
Parameter(addAnd,org.apache.tools.ant.types.selectors.AndSelector,);
Parameter(addOr,org.apache.tools.ant.types.selectors.OrSelector,);
Parameter(addNot,org.apache.tools.ant.types.selectors.NotSelector,);
Parameter(addNone,org.apache.tools.ant.types.selectors.NoneSelector,);
Parameter(addMajority,org.apache.tools.ant.types.selectors.MajoritySelector,);
Parameter(addDate,org.apache.tools.ant.types.selectors.DateSelector,);
Parameter(addSize,org.apache.tools.ant.types.selectors.SizeSelector,);
Parameter(addFilename,org.apache.tools.ant.types.selectors.FilenameSelector,);
Parameter(addCustom,org.apache.tools.ant.types.selectors.ExtendSelector,);
Parameter(addContains,org.apache.tools.ant.types.selectors.ContainsSelector,);
Parameter(addPresent,org.apache.tools.ant.types.selectors.PresentSelector,);
Parameter(addDepth,org.apache.tools.ant.types.selectors.DepthSelector,);
Parameter(addDepend,org.apache.tools.ant.types.selectors.DependSelector,);
Parameter(addContainsRegexp,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,);
Parameter(addType,org.apache.tools.ant.types.selectors.TypeSelector,);
Parameter(addDifferent,org.apache.tools.ant.types.selectors.DifferentSelector,);
Parameter(addModified,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Parameter(add,org.apache.tools.ant.types.selectors.FileSelector,);
EndClass 172
StartClass 173
Class(org.apache.tools.ant.types.PatternSet,N,N,Public);
Attribute(includeList,java.util.Vector,Private,N,N,);
Attribute(excludeList,java.util.Vector,Private,N,N,);
Attribute(includesFileList,java.util.Vector,Private,N,N,);
Attribute(excludesFileList,java.util.Vector,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setRefid,void,Public,N,N);
Method(addConfiguredPatternset,void,Public,N,N);
Method(createInclude,org.apache.tools.ant.types.PatternSet$NameEntry,Public,N,N);
Method(createIncludesFile,org.apache.tools.ant.types.PatternSet$NameEntry,Public,N,N);
Method(createExclude,org.apache.tools.ant.types.PatternSet$NameEntry,Public,N,N);
Method(createExcludesFile,org.apache.tools.ant.types.PatternSet$NameEntry,Public,N,N);
Method(setIncludes,void,Public,N,N);
Method(setExcludes,void,Public,N,N);
Method(addPatternToList,org.apache.tools.ant.types.PatternSet$NameEntry,Private,N,N);
Method(setIncludesfile,void,Public,N,N);
Method(setExcludesfile,void,Public,N,N);
Method(readPatterns,void,Private,N,N);
Method(append,void,Public,N,N);
Method(getIncludePatterns,java.lang.String[],Public,N,N);
Method(getExcludePatterns,java.lang.String[],Public,N,N);
Method(hasPatterns,boolean,Public,N,N);
Method(getRef,org.apache.tools.ant.types.PatternSet,Private,N,N);
Method(makeArray,java.lang.String[],Private,N,N);
Method(readFiles,void,Private,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(clone,java.lang.Object,Public,N,N);
Parameter(setRefid,org.apache.tools.ant.types.Reference,);
Parameter(addConfiguredPatternset,org.apache.tools.ant.types.PatternSet,);
Parameter(setIncludes,java.lang.String,);
Parameter(setExcludes,java.lang.String,);
Parameter(addPatternToList,java.util.Vector,);
Parameter(setIncludesfile,java.io.File,);
Parameter(setExcludesfile,java.io.File,);
Parameter(readPatterns,java.io.File,);
Parameter(readPatterns,java.util.Vector,);
Parameter(readPatterns,org.apache.tools.ant.Project,);
Parameter(append,org.apache.tools.ant.types.PatternSet,);
Parameter(append,org.apache.tools.ant.Project,);
Parameter(getIncludePatterns,org.apache.tools.ant.Project,);
Parameter(getExcludePatterns,org.apache.tools.ant.Project,);
Parameter(hasPatterns,org.apache.tools.ant.Project,);
Parameter(getRef,org.apache.tools.ant.Project,);
Parameter(makeArray,java.util.Vector,);
Parameter(makeArray,org.apache.tools.ant.Project,);
Parameter(readFiles,org.apache.tools.ant.Project,);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.DataType);
Call(METHOD,org.apache.tools.ant.types.PatternSet,addConfiguredPatternset --> getIncludePatterns,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,addConfiguredPatternset --> getExcludePatterns,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,addConfiguredPatternset --> createInclude,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,addConfiguredPatternset --> createExclude,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,createInclude --> addPatternToList,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,createIncludesFile --> addPatternToList,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,createExclude --> addPatternToList,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,createExcludesFile --> addPatternToList,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,setIncludes --> createInclude,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,setExcludes --> createExclude,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,setIncludesfile --> createIncludesFile,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,setExcludesfile --> createExcludesFile,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,readPatterns --> addPatternToList,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,append --> getIncludePatterns,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,append --> createInclude,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,append --> getExcludePatterns,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,append --> createExclude,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,getIncludePatterns --> getRef,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,getIncludePatterns --> getIncludePatterns,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,getIncludePatterns --> readFiles,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,getIncludePatterns --> makeArray,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,getExcludePatterns --> getRef,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,getExcludePatterns --> getExcludePatterns,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,getExcludePatterns --> readFiles,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,getExcludePatterns --> makeArray,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,hasPatterns --> getRef,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,hasPatterns --> hasPatterns,org.apache.tools.ant.types.PatternSet,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,readFiles --> readPatterns,org.apache.tools.ant.types.PatternSet,);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,<init> --> includeList,org.apache.tools.ant.types.PatternSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,<init> --> excludeList,org.apache.tools.ant.types.PatternSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,<init> --> includesFileList,org.apache.tools.ant.types.PatternSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,<init> --> excludesFileList,org.apache.tools.ant.types.PatternSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,setRefid --> includeList,org.apache.tools.ant.types.PatternSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,setRefid --> excludeList,org.apache.tools.ant.types.PatternSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,createInclude --> includeList,org.apache.tools.ant.types.PatternSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,createIncludesFile --> includesFileList,org.apache.tools.ant.types.PatternSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,createExclude --> excludeList,org.apache.tools.ant.types.PatternSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,createExcludesFile --> excludesFileList,org.apache.tools.ant.types.PatternSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,getIncludePatterns --> includeList,org.apache.tools.ant.types.PatternSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,getExcludePatterns --> excludeList,org.apache.tools.ant.types.PatternSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,hasPatterns --> includesFileList,org.apache.tools.ant.types.PatternSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,hasPatterns --> excludesFileList,org.apache.tools.ant.types.PatternSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,hasPatterns --> includeList,org.apache.tools.ant.types.PatternSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,hasPatterns --> excludeList,org.apache.tools.ant.types.PatternSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,readFiles --> includesFileList,org.apache.tools.ant.types.PatternSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,readFiles --> includeList,org.apache.tools.ant.types.PatternSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,readFiles --> excludesFileList,org.apache.tools.ant.types.PatternSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,readFiles --> excludeList,org.apache.tools.ant.types.PatternSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,toString --> includeList,org.apache.tools.ant.types.PatternSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,toString --> excludeList,org.apache.tools.ant.types.PatternSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,clone --> includeList,org.apache.tools.ant.types.PatternSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,clone --> excludeList,org.apache.tools.ant.types.PatternSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,clone --> includesFileList,org.apache.tools.ant.types.PatternSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,clone --> excludesFileList,org.apache.tools.ant.types.PatternSet,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,clone --> includeList,org.apache.tools.ant.types.PatternSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,clone --> excludeList,org.apache.tools.ant.types.PatternSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,clone --> includesFileList,org.apache.tools.ant.types.PatternSet,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet,clone --> excludesFileList,org.apache.tools.ant.types.PatternSet,WRITE);
Call(METHOD,org.apache.tools.ant.types.PatternSet,<init> --> <init>,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,setRefid --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,setRefid --> setRefid,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,addConfiguredPatternset --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,addConfiguredPatternset --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,addConfiguredPatternset --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,addConfiguredPatternset --> setName,org.apache.tools.ant.types.PatternSet$NameEntry,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,createInclude --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,createInclude --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,createIncludesFile --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,createIncludesFile --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,createExclude --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,createExclude --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,createExcludesFile --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,createExcludesFile --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,setIncludes --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,setIncludes --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,setIncludes --> setName,org.apache.tools.ant.types.PatternSet$NameEntry,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,setExcludes --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,setExcludes --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,setExcludes --> setName,org.apache.tools.ant.types.PatternSet$NameEntry,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,addPatternToList --> <init>,org.apache.tools.ant.types.PatternSet$NameEntry,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,setIncludesfile --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,setIncludesfile --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,setIncludesfile --> setName,org.apache.tools.ant.types.PatternSet$NameEntry,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,setExcludesfile --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,setExcludesfile --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,setExcludesfile --> setName,org.apache.tools.ant.types.PatternSet$NameEntry,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,readPatterns --> replaceProperties,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,readPatterns --> setName,org.apache.tools.ant.types.PatternSet$NameEntry,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,readPatterns --> <init>$3,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,append --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,append --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,append --> setName,org.apache.tools.ant.types.PatternSet$NameEntry,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,getIncludePatterns --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,getExcludePatterns --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,hasPatterns --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,getRef --> getCheckedRef$2,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,makeArray --> evalName,org.apache.tools.ant.types.PatternSet$NameEntry,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,readFiles --> evalName,org.apache.tools.ant.types.PatternSet$NameEntry,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,readFiles --> resolveFile$2,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,readFiles --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,clone --> clone,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.PatternSet,clone --> <init>$5,org.apache.tools.ant.BuildException,);
EndClass 173
StartClass 174
Class(org.apache.tools.ant.types.PatternSet$NameEntry,N,N,Public);
Attribute(name,java.lang.String,Private,N,N,);
Attribute(ifCond,java.lang.String,Private,N,N,);
Attribute(unlessCond,java.lang.String,Private,N,N,);
Attribute(this$0,org.apache.tools.ant.types.PatternSet,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(setName,void,Public,N,N);
Method(setIf,void,Public,N,N);
Method(setUnless,void,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(evalName,java.lang.String,Public,N,N);
Method(valid,boolean,Private,N,N);
Method(toString,java.lang.String,Public,N,N);
Parameter(<init>,org.apache.tools.ant.types.PatternSet,);
Parameter(setName,java.lang.String,);
Parameter(setIf,java.lang.String,);
Parameter(setUnless,java.lang.String,);
Parameter(evalName,org.apache.tools.ant.Project,);
Parameter(valid,org.apache.tools.ant.Project,);
Composition(org.apache.tools.ant.types.PatternSet);
Call(METHOD,org.apache.tools.ant.types.PatternSet$NameEntry,evalName --> valid,org.apache.tools.ant.types.PatternSet$NameEntry,);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet$NameEntry,<init> --> this$0,org.apache.tools.ant.types.PatternSet$NameEntry,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet$NameEntry,setName --> name,org.apache.tools.ant.types.PatternSet$NameEntry,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet$NameEntry,setIf --> ifCond,org.apache.tools.ant.types.PatternSet$NameEntry,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet$NameEntry,setUnless --> unlessCond,org.apache.tools.ant.types.PatternSet$NameEntry,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet$NameEntry,getName --> name,org.apache.tools.ant.types.PatternSet$NameEntry,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet$NameEntry,evalName --> name,org.apache.tools.ant.types.PatternSet$NameEntry,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet$NameEntry,valid --> ifCond,org.apache.tools.ant.types.PatternSet$NameEntry,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet$NameEntry,valid --> unlessCond,org.apache.tools.ant.types.PatternSet$NameEntry,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet$NameEntry,toString --> name,org.apache.tools.ant.types.PatternSet$NameEntry,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet$NameEntry,toString --> ifCond,org.apache.tools.ant.types.PatternSet$NameEntry,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.PatternSet$NameEntry,toString --> unlessCond,org.apache.tools.ant.types.PatternSet$NameEntry,READ);
Call(METHOD,org.apache.tools.ant.types.PatternSet$NameEntry,valid --> getProperty,org.apache.tools.ant.Project,);
EndClass 174
StartClass 175
Class(org.apache.tools.ant.FileScanner,Y,Y,Public);
Method(addDefaultExcludes,void,Public,N,Y);
Method(getBasedir,java.io.File,Public,N,Y);
Method(getExcludedDirectories,java.lang.String[],Public,N,Y);
Method(getExcludedFiles,java.lang.String[],Public,N,Y);
Method(getIncludedDirectories,java.lang.String[],Public,N,Y);
Method(getIncludedFiles,java.lang.String[],Public,N,Y);
Method(getNotIncludedDirectories,java.lang.String[],Public,N,Y);
Method(getNotIncludedFiles,java.lang.String[],Public,N,Y);
Method(scan,void,Public,N,Y);
Method(setBasedir,void,Public,N,Y);
Method(setBasedir$2,void,Public,N,Y);
Method(setExcludes,void,Public,N,Y);
Method(setIncludes,void,Public,N,Y);
Method(setCaseSensitive,void,Public,N,Y);
Parameter(setBasedir,java.lang.String,);
Parameter(setBasedir$2,java.io.File,);
Parameter(setExcludes,java.lang.String[],);
Parameter(setIncludes,java.lang.String[],);
Parameter(setCaseSensitive,boolean,);
EndClass 175
StartClass 176
Class(org.apache.tools.ant.types.selectors.FileSelector,Y,Y,Public);
Method(isSelected,boolean,Public,N,Y);
Parameter(isSelected,java.io.File,);
Parameter(isSelected,java.lang.String,);
Parameter(isSelected,java.io.File,);
EndClass 176
StartClass 177
Class(org.apache.tools.ant.types.selectors.SelectSelector,N,N,Public);
Attribute(ifProperty,java.lang.String,Private,N,N,);
Attribute(unlessProperty,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(getRef,org.apache.tools.ant.types.selectors.SelectSelector,Private,N,N);
Method(hasSelectors,boolean,Public,N,N);
Method(selectorCount,int,Public,N,N);
Method(getSelectors,org.apache.tools.ant.types.selectors.FileSelector[],Public,N,N);
Method(selectorElements,java.util.Enumeration,Public,N,N);
Method(appendSelector,void,Public,N,N);
Method(verifySettings,void,Public,N,N);
Method(passesConditions,boolean,Public,N,N);
Method(setIf,void,Public,N,N);
Method(setUnless,void,Public,N,N);
Method(isSelected,boolean,Public,N,N);
Parameter(getSelectors,org.apache.tools.ant.Project,);
Parameter(appendSelector,org.apache.tools.ant.types.selectors.FileSelector,);
Parameter(setIf,java.lang.String,);
Parameter(setUnless,java.lang.String,);
Parameter(isSelected,java.io.File,);
Parameter(isSelected,java.lang.String,);
Parameter(isSelected,java.io.File,);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelectorContainer);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelector);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.selectors.BaseSelectorContainer);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,toString --> hasSelectors,org.apache.tools.ant.types.selectors.SelectSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,hasSelectors --> getRef,org.apache.tools.ant.types.selectors.SelectSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,hasSelectors --> hasSelectors,org.apache.tools.ant.types.selectors.SelectSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,selectorCount --> getRef,org.apache.tools.ant.types.selectors.SelectSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,selectorCount --> selectorCount,org.apache.tools.ant.types.selectors.SelectSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,getSelectors --> getRef,org.apache.tools.ant.types.selectors.SelectSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,getSelectors --> getSelectors,org.apache.tools.ant.types.selectors.SelectSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,selectorElements --> getRef,org.apache.tools.ant.types.selectors.SelectSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,selectorElements --> selectorElements,org.apache.tools.ant.types.selectors.SelectSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,verifySettings --> selectorCount,org.apache.tools.ant.types.selectors.SelectSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,isSelected --> passesConditions,org.apache.tools.ant.types.selectors.SelectSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,isSelected --> selectorElements,org.apache.tools.ant.types.selectors.SelectSelector,);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SelectSelector,toString --> ifProperty,org.apache.tools.ant.types.selectors.SelectSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SelectSelector,toString --> unlessProperty,org.apache.tools.ant.types.selectors.SelectSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SelectSelector,passesConditions --> ifProperty,org.apache.tools.ant.types.selectors.SelectSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SelectSelector,passesConditions --> unlessProperty,org.apache.tools.ant.types.selectors.SelectSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SelectSelector,setIf --> ifProperty,org.apache.tools.ant.types.selectors.SelectSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SelectSelector,setUnless --> unlessProperty,org.apache.tools.ant.types.selectors.SelectSelector,WRITE);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,<init> --> <init>,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,toString --> toString,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,getRef --> getCheckedRef$3,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,hasSelectors --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,hasSelectors --> hasSelectors,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,selectorCount --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,selectorCount --> selectorCount,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,getSelectors --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,getSelectors --> getSelectors,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,selectorElements --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,selectorElements --> selectorElements,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,appendSelector --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,appendSelector --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,appendSelector --> appendSelector,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,verifySettings --> setError,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,passesConditions --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,passesConditions --> getProperty,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,isSelected --> validate,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.SelectSelector,isSelected --> isSelected,org.apache.tools.ant.types.selectors.FileSelector,);
EndClass 177
StartClass 178
Class(org.apache.tools.ant.types.selectors.AndSelector,N,N,Public);
Method(<init>,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(isSelected,boolean,Public,N,N);
Parameter(isSelected,java.io.File,);
Parameter(isSelected,java.lang.String,);
Parameter(isSelected,java.io.File,);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelectorContainer);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelector);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.selectors.BaseSelectorContainer);
Call(METHOD,org.apache.tools.ant.types.selectors.AndSelector,<init> --> <init>,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.AndSelector,toString --> hasSelectors,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.AndSelector,toString --> toString,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.AndSelector,isSelected --> validate,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.AndSelector,isSelected --> selectorElements,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.AndSelector,isSelected --> isSelected,org.apache.tools.ant.types.selectors.FileSelector,);
EndClass 178
StartClass 179
Class(org.apache.tools.ant.types.selectors.OrSelector,N,N,Public);
Method(<init>,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(isSelected,boolean,Public,N,N);
Parameter(isSelected,java.io.File,);
Parameter(isSelected,java.lang.String,);
Parameter(isSelected,java.io.File,);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelectorContainer);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelector);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.selectors.BaseSelectorContainer);
Call(METHOD,org.apache.tools.ant.types.selectors.OrSelector,<init> --> <init>,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.OrSelector,toString --> hasSelectors,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.OrSelector,toString --> toString,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.OrSelector,isSelected --> validate,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.OrSelector,isSelected --> selectorElements,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.OrSelector,isSelected --> isSelected,org.apache.tools.ant.types.selectors.FileSelector,);
EndClass 179
StartClass 180
Class(org.apache.tools.ant.types.selectors.NotSelector,N,N,Public);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(verifySettings,void,Public,N,N);
Parameter(<init>$2,org.apache.tools.ant.types.selectors.FileSelector,);
SuperClass(org.apache.tools.ant.types.selectors.NoneSelector);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelectorContainer);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelector);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.selectors.NoneSelector);
Call(METHOD,org.apache.tools.ant.types.selectors.NotSelector,<init>$2 --> <init>,org.apache.tools.ant.types.selectors.NotSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.NotSelector,<init> --> <init>,org.apache.tools.ant.types.selectors.NoneSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.NotSelector,<init>$2 --> appendSelector,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.NotSelector,toString --> hasSelectors,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.NotSelector,toString --> toString,org.apache.tools.ant.types.selectors.NoneSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.NotSelector,verifySettings --> selectorCount,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.NotSelector,verifySettings --> setError,org.apache.tools.ant.types.selectors.BaseSelector,);
EndClass 180
StartClass 181
Class(org.apache.tools.ant.types.selectors.NoneSelector,N,N,Public);
Method(<init>,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(isSelected,boolean,Public,N,N);
Parameter(isSelected,java.io.File,);
Parameter(isSelected,java.lang.String,);
Parameter(isSelected,java.io.File,);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelectorContainer);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelector);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
SubClass(org.apache.tools.ant.types.selectors.NotSelector);
Generalization(org.apache.tools.ant.types.selectors.BaseSelectorContainer);
Call(METHOD,org.apache.tools.ant.types.selectors.NoneSelector,<init> --> <init>,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.NoneSelector,toString --> hasSelectors,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.NoneSelector,toString --> toString,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.NoneSelector,isSelected --> validate,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.NoneSelector,isSelected --> selectorElements,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.NoneSelector,isSelected --> isSelected,org.apache.tools.ant.types.selectors.FileSelector,);
EndClass 181
StartClass 182
Class(org.apache.tools.ant.types.selectors.MajoritySelector,N,N,Public);
Attribute(allowtie,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(setAllowtie,void,Public,N,N);
Method(isSelected,boolean,Public,N,N);
Parameter(setAllowtie,boolean,);
Parameter(isSelected,java.io.File,);
Parameter(isSelected,java.lang.String,);
Parameter(isSelected,java.io.File,);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelectorContainer);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelector);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.selectors.BaseSelectorContainer);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.MajoritySelector,<init> --> allowtie,org.apache.tools.ant.types.selectors.MajoritySelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.MajoritySelector,setAllowtie --> allowtie,org.apache.tools.ant.types.selectors.MajoritySelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.MajoritySelector,isSelected --> allowtie,org.apache.tools.ant.types.selectors.MajoritySelector,READ);
Call(METHOD,org.apache.tools.ant.types.selectors.MajoritySelector,<init> --> <init>,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.MajoritySelector,toString --> hasSelectors,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.MajoritySelector,toString --> toString,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.MajoritySelector,isSelected --> validate,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.MajoritySelector,isSelected --> selectorElements,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.MajoritySelector,isSelected --> isSelected,org.apache.tools.ant.types.selectors.FileSelector,);
EndClass 182
StartClass 183
Class(org.apache.tools.ant.types.selectors.DateSelector,N,N,Public);
Attribute(FILE_UTILS,org.apache.tools.ant.util.FileUtils,Private,Y,Y,);
Attribute(millis,long,Private,N,N,);
Attribute(dateTime,java.lang.String,Private,N,N,);
Attribute(includeDirs,boolean,Private,N,N,);
Attribute(granularity,long,Private,N,N,);
Attribute(pattern,java.lang.String,Private,N,N,);
Attribute(when,org.apache.tools.ant.types.TimeComparison,Private,N,N,);
Attribute(MILLIS_KEY,java.lang.String,Public,Y,Y,);
Attribute(DATETIME_KEY,java.lang.String,Public,Y,Y,);
Attribute(CHECKDIRS_KEY,java.lang.String,Public,Y,Y,);
Attribute(GRANULARITY_KEY,java.lang.String,Public,Y,Y,);
Attribute(WHEN_KEY,java.lang.String,Public,Y,Y,);
Attribute(PATTERN_KEY,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(setMillis,void,Public,N,N);
Method(getMillis,long,Public,N,N);
Method(setDatetime,void,Public,N,N);
Method(setCheckdirs,void,Public,N,N);
Method(setGranularity,void,Public,N,N);
Method(setWhen,void,Public,N,N);
Method(setWhen$2,void,Public,N,N);
Method(setPattern,void,Public,N,N);
Method(setParameters,void,Public,N,N);
Method(verifySettings,void,Public,N,N);
Method(isSelected,boolean,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(setMillis,long,);
Parameter(setDatetime,java.lang.String,);
Parameter(setCheckdirs,boolean,);
Parameter(setGranularity,int,);
Parameter(setWhen,org.apache.tools.ant.types.selectors.DateSelector$TimeComparisons,);
Parameter(setWhen$2,org.apache.tools.ant.types.TimeComparison,);
Parameter(setPattern,java.lang.String,);
Parameter(setParameters,org.apache.tools.ant.types.Parameter[],);
Parameter(isSelected,java.io.File,);
Parameter(isSelected,java.lang.String,);
Parameter(isSelected,java.io.File,);
SuperClass(org.apache.tools.ant.types.selectors.BaseExtendSelector);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelector);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.selectors.BaseExtendSelector);
Composition(org.apache.tools.ant.util.FileUtils);
Composition(org.apache.tools.ant.types.TimeComparison);
Call(METHOD,org.apache.tools.ant.types.selectors.DateSelector,setWhen --> setWhen$2,org.apache.tools.ant.types.selectors.DateSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.DateSelector,setParameters --> setMillis,org.apache.tools.ant.types.selectors.DateSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.DateSelector,setParameters --> setDatetime,org.apache.tools.ant.types.selectors.DateSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.DateSelector,setParameters --> setCheckdirs,org.apache.tools.ant.types.selectors.DateSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.DateSelector,setParameters --> setGranularity,org.apache.tools.ant.types.selectors.DateSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.DateSelector,setParameters --> setWhen$2,org.apache.tools.ant.types.selectors.DateSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.DateSelector,setParameters --> setPattern,org.apache.tools.ant.types.selectors.DateSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.DateSelector,verifySettings --> setMillis,org.apache.tools.ant.types.selectors.DateSelector,);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,<init> --> FILE_UTILS,org.apache.tools.ant.types.selectors.DateSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,<init> --> millis,org.apache.tools.ant.types.selectors.DateSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,<init> --> dateTime,org.apache.tools.ant.types.selectors.DateSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,<init> --> includeDirs,org.apache.tools.ant.types.selectors.DateSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,<init> --> granularity,org.apache.tools.ant.types.selectors.DateSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,<init> --> when,org.apache.tools.ant.types.selectors.DateSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,toString --> dateTime,org.apache.tools.ant.types.selectors.DateSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,toString --> when,org.apache.tools.ant.types.selectors.DateSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,toString --> granularity,org.apache.tools.ant.types.selectors.DateSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,toString --> pattern,org.apache.tools.ant.types.selectors.DateSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,setMillis --> millis,org.apache.tools.ant.types.selectors.DateSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,getMillis --> dateTime,org.apache.tools.ant.types.selectors.DateSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,getMillis --> millis,org.apache.tools.ant.types.selectors.DateSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,setDatetime --> dateTime,org.apache.tools.ant.types.selectors.DateSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,setDatetime --> millis,org.apache.tools.ant.types.selectors.DateSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,setCheckdirs --> includeDirs,org.apache.tools.ant.types.selectors.DateSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,setGranularity --> granularity,org.apache.tools.ant.types.selectors.DateSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,setWhen$2 --> when,org.apache.tools.ant.types.selectors.DateSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,setPattern --> pattern,org.apache.tools.ant.types.selectors.DateSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,verifySettings --> dateTime,org.apache.tools.ant.types.selectors.DateSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,verifySettings --> millis,org.apache.tools.ant.types.selectors.DateSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,verifySettings --> pattern,org.apache.tools.ant.types.selectors.DateSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,isSelected --> includeDirs,org.apache.tools.ant.types.selectors.DateSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,isSelected --> when,org.apache.tools.ant.types.selectors.DateSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,isSelected --> millis,org.apache.tools.ant.types.selectors.DateSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,isSelected --> granularity,org.apache.tools.ant.types.selectors.DateSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,<clinit> --> FILE_UTILS,org.apache.tools.ant.types.selectors.DateSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DateSelector,<init> --> EQUAL,org.apache.tools.ant.types.TimeComparison,READ);
Call(METHOD,org.apache.tools.ant.types.selectors.DateSelector,<init> --> <init>,org.apache.tools.ant.types.selectors.BaseExtendSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.DateSelector,<init> --> getFileTimestampGranularity,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.types.selectors.DateSelector,toString --> getValue,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.selectors.DateSelector,getMillis --> validate,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.DateSelector,setParameters --> setParameters,org.apache.tools.ant.types.selectors.BaseExtendSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.DateSelector,setParameters --> getName,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.types.selectors.DateSelector,setParameters --> getValue,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.types.selectors.DateSelector,setParameters --> setError,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.DateSelector,setParameters --> toBoolean,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.types.selectors.DateSelector,setParameters --> <init>$2,org.apache.tools.ant.types.TimeComparison,);
Call(METHOD,org.apache.tools.ant.types.selectors.DateSelector,verifySettings --> setError,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.DateSelector,isSelected --> validate,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.DateSelector,isSelected --> evaluate$2,org.apache.tools.ant.types.TimeComparison,);
Call(METHOD,org.apache.tools.ant.types.selectors.DateSelector,<clinit> --> getFileUtils,org.apache.tools.ant.util.FileUtils,);
EndClass 183
StartClass 184
Class(org.apache.tools.ant.types.selectors.SizeSelector,N,N,Public);
Attribute(SIZE_KEY,java.lang.String,Public,Y,Y,);
Attribute(UNITS_KEY,java.lang.String,Public,Y,Y,);
Attribute(WHEN_KEY,java.lang.String,Public,Y,Y,);
Attribute(size,long,Private,N,N,);
Attribute(multiplier,long,Private,N,N,);
Attribute(sizelimit,long,Private,N,N,);
Attribute(when,org.apache.tools.ant.types.Comparison,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(setValue,void,Public,N,N);
Method(setUnits,void,Public,N,N);
Method(setWhen,void,Public,N,N);
Method(setParameters,void,Public,N,N);
Method(verifySettings,void,Public,N,N);
Method(isSelected,boolean,Public,N,N);
Parameter(setValue,long,);
Parameter(setUnits,org.apache.tools.ant.types.selectors.SizeSelector$ByteUnits,);
Parameter(setWhen,org.apache.tools.ant.types.selectors.SizeSelector$SizeComparisons,);
Parameter(setParameters,org.apache.tools.ant.types.Parameter[],);
Parameter(isSelected,java.io.File,);
Parameter(isSelected,java.lang.String,);
Parameter(isSelected,java.io.File,);
SuperClass(org.apache.tools.ant.types.selectors.BaseExtendSelector);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelector);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.selectors.BaseExtendSelector);
Composition(org.apache.tools.ant.types.Comparison);
Call(METHOD,org.apache.tools.ant.types.selectors.SizeSelector,setParameters --> setValue,org.apache.tools.ant.types.selectors.SizeSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.SizeSelector,setParameters --> setUnits,org.apache.tools.ant.types.selectors.SizeSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.SizeSelector,setParameters --> setWhen,org.apache.tools.ant.types.selectors.SizeSelector,);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SizeSelector,<init> --> size,org.apache.tools.ant.types.selectors.SizeSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SizeSelector,<init> --> multiplier,org.apache.tools.ant.types.selectors.SizeSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SizeSelector,<init> --> sizelimit,org.apache.tools.ant.types.selectors.SizeSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SizeSelector,<init> --> when,org.apache.tools.ant.types.selectors.SizeSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SizeSelector,toString --> sizelimit,org.apache.tools.ant.types.selectors.SizeSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SizeSelector,toString --> when,org.apache.tools.ant.types.selectors.SizeSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SizeSelector,setValue --> multiplier,org.apache.tools.ant.types.selectors.SizeSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SizeSelector,setValue --> size,org.apache.tools.ant.types.selectors.SizeSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SizeSelector,setValue --> sizelimit,org.apache.tools.ant.types.selectors.SizeSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SizeSelector,setUnits --> multiplier,org.apache.tools.ant.types.selectors.SizeSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SizeSelector,setUnits --> size,org.apache.tools.ant.types.selectors.SizeSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SizeSelector,setUnits --> multiplier,org.apache.tools.ant.types.selectors.SizeSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SizeSelector,setUnits --> sizelimit,org.apache.tools.ant.types.selectors.SizeSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SizeSelector,setWhen --> when,org.apache.tools.ant.types.selectors.SizeSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SizeSelector,verifySettings --> size,org.apache.tools.ant.types.selectors.SizeSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SizeSelector,verifySettings --> multiplier,org.apache.tools.ant.types.selectors.SizeSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SizeSelector,verifySettings --> sizelimit,org.apache.tools.ant.types.selectors.SizeSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SizeSelector,isSelected --> sizelimit,org.apache.tools.ant.types.selectors.SizeSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SizeSelector,isSelected --> when,org.apache.tools.ant.types.selectors.SizeSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.SizeSelector,<init> --> EQUAL,org.apache.tools.ant.types.Comparison,READ);
Call(METHOD,org.apache.tools.ant.types.selectors.SizeSelector,<init> --> <init>,org.apache.tools.ant.types.selectors.BaseExtendSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.SizeSelector,toString --> getValue,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.selectors.SizeSelector,setUnits --> getIndex,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.selectors.SizeSelector,setParameters --> setParameters,org.apache.tools.ant.types.selectors.BaseExtendSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.SizeSelector,setParameters --> getName,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.types.selectors.SizeSelector,setParameters --> getValue,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.types.selectors.SizeSelector,setParameters --> setError,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.SizeSelector,setParameters --> <init>,org.apache.tools.ant.types.selectors.SizeSelector$ByteUnits,);
Call(METHOD,org.apache.tools.ant.types.selectors.SizeSelector,setParameters --> setValue,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.selectors.SizeSelector,setParameters --> <init>,org.apache.tools.ant.types.selectors.SizeSelector$SizeComparisons,);
Call(METHOD,org.apache.tools.ant.types.selectors.SizeSelector,verifySettings --> setError,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.SizeSelector,isSelected --> validate,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.SizeSelector,isSelected --> evaluate,org.apache.tools.ant.types.Comparison,);
EndClass 184
StartClass 185
Class(org.apache.tools.ant.types.selectors.DifferentSelector,N,N,Public);
Attribute(FILE_UTILS,org.apache.tools.ant.util.FileUtils,Private,Y,Y,);
Attribute(ignoreFileTimes,boolean,Private,N,N,);
Attribute(ignoreContents,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setIgnoreFileTimes,void,Public,N,N);
Method(setIgnoreContents,void,Public,N,N);
Method(selectionTest,boolean,Protected,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(setIgnoreFileTimes,boolean,);
Parameter(setIgnoreContents,boolean,);
Parameter(selectionTest,java.io.File,);
Parameter(selectionTest,java.io.File,);
SuperClass(org.apache.tools.ant.types.selectors.MappingSelector);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelector);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.selectors.MappingSelector);
Composition(org.apache.tools.ant.util.FileUtils);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DifferentSelector,<init> --> ignoreFileTimes,org.apache.tools.ant.types.selectors.DifferentSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DifferentSelector,<init> --> ignoreContents,org.apache.tools.ant.types.selectors.DifferentSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DifferentSelector,setIgnoreFileTimes --> ignoreFileTimes,org.apache.tools.ant.types.selectors.DifferentSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DifferentSelector,setIgnoreContents --> ignoreContents,org.apache.tools.ant.types.selectors.DifferentSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DifferentSelector,selectionTest --> ignoreFileTimes,org.apache.tools.ant.types.selectors.DifferentSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DifferentSelector,selectionTest --> ignoreContents,org.apache.tools.ant.types.selectors.DifferentSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DifferentSelector,selectionTest --> FILE_UTILS,org.apache.tools.ant.types.selectors.DifferentSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DifferentSelector,<clinit> --> FILE_UTILS,org.apache.tools.ant.types.selectors.DifferentSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DifferentSelector,selectionTest --> granularity,org.apache.tools.ant.types.selectors.MappingSelector,READ);
Call(METHOD,org.apache.tools.ant.types.selectors.DifferentSelector,<init> --> <init>,org.apache.tools.ant.types.selectors.MappingSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.DifferentSelector,selectionTest --> contentEquals,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.types.selectors.DifferentSelector,selectionTest --> <init>$3,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.selectors.DifferentSelector,<clinit> --> getFileUtils,org.apache.tools.ant.util.FileUtils,);
EndClass 185
StartClass 186
Class(org.apache.tools.ant.types.selectors.FilenameSelector,N,N,Public);
Attribute(pattern,java.lang.String,Private,N,N,);
Attribute(casesensitive,boolean,Private,N,N,);
Attribute(negated,boolean,Private,N,N,);
Attribute(NAME_KEY,java.lang.String,Public,Y,Y,);
Attribute(CASE_KEY,java.lang.String,Public,Y,Y,);
Attribute(NEGATE_KEY,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(setName,void,Public,N,N);
Method(setCasesensitive,void,Public,N,N);
Method(setNegate,void,Public,N,N);
Method(setParameters,void,Public,N,N);
Method(verifySettings,void,Public,N,N);
Method(isSelected,boolean,Public,N,N);
Parameter(setName,java.lang.String,);
Parameter(setCasesensitive,boolean,);
Parameter(setNegate,boolean,);
Parameter(setParameters,org.apache.tools.ant.types.Parameter[],);
Parameter(isSelected,java.io.File,);
Parameter(isSelected,java.lang.String,);
Parameter(isSelected,java.io.File,);
SuperClass(org.apache.tools.ant.types.selectors.BaseExtendSelector);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelector);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.selectors.BaseExtendSelector);
Call(METHOD,org.apache.tools.ant.types.selectors.FilenameSelector,setParameters --> setName,org.apache.tools.ant.types.selectors.FilenameSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.FilenameSelector,setParameters --> setCasesensitive,org.apache.tools.ant.types.selectors.FilenameSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.FilenameSelector,setParameters --> setNegate,org.apache.tools.ant.types.selectors.FilenameSelector,);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.FilenameSelector,<init> --> pattern,org.apache.tools.ant.types.selectors.FilenameSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.FilenameSelector,<init> --> casesensitive,org.apache.tools.ant.types.selectors.FilenameSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.FilenameSelector,<init> --> negated,org.apache.tools.ant.types.selectors.FilenameSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.FilenameSelector,toString --> pattern,org.apache.tools.ant.types.selectors.FilenameSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.FilenameSelector,toString --> negated,org.apache.tools.ant.types.selectors.FilenameSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.FilenameSelector,toString --> casesensitive,org.apache.tools.ant.types.selectors.FilenameSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.FilenameSelector,setName --> pattern,org.apache.tools.ant.types.selectors.FilenameSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.FilenameSelector,setCasesensitive --> casesensitive,org.apache.tools.ant.types.selectors.FilenameSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.FilenameSelector,setNegate --> negated,org.apache.tools.ant.types.selectors.FilenameSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.FilenameSelector,verifySettings --> pattern,org.apache.tools.ant.types.selectors.FilenameSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.FilenameSelector,isSelected --> pattern,org.apache.tools.ant.types.selectors.FilenameSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.FilenameSelector,isSelected --> casesensitive,org.apache.tools.ant.types.selectors.FilenameSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.FilenameSelector,isSelected --> negated,org.apache.tools.ant.types.selectors.FilenameSelector,READ);
Call(METHOD,org.apache.tools.ant.types.selectors.FilenameSelector,<init> --> <init>,org.apache.tools.ant.types.selectors.BaseExtendSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.FilenameSelector,setParameters --> setParameters,org.apache.tools.ant.types.selectors.BaseExtendSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.FilenameSelector,setParameters --> getName,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.types.selectors.FilenameSelector,setParameters --> getValue,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.types.selectors.FilenameSelector,setParameters --> toBoolean,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.types.selectors.FilenameSelector,setParameters --> setError,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.FilenameSelector,verifySettings --> setError,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.FilenameSelector,isSelected --> validate,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.FilenameSelector,isSelected --> matchPath$2,org.apache.tools.ant.types.selectors.SelectorUtils,);
EndClass 186
StartClass 187
Class(org.apache.tools.ant.types.selectors.TypeSelector,N,N,Public);
Attribute(type,java.lang.String,Private,N,N,);
Attribute(TYPE_KEY,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(setType,void,Public,N,N);
Method(setParameters,void,Public,N,N);
Method(verifySettings,void,Public,N,N);
Method(isSelected,boolean,Public,N,N);
Parameter(setType,org.apache.tools.ant.types.selectors.TypeSelector$FileType,);
Parameter(setParameters,org.apache.tools.ant.types.Parameter[],);
Parameter(isSelected,java.io.File,);
Parameter(isSelected,java.lang.String,);
Parameter(isSelected,java.io.File,);
SuperClass(org.apache.tools.ant.types.selectors.BaseExtendSelector);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelector);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.selectors.BaseExtendSelector);
Call(METHOD,org.apache.tools.ant.types.selectors.TypeSelector,setParameters --> setType,org.apache.tools.ant.types.selectors.TypeSelector,);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.TypeSelector,<init> --> type,org.apache.tools.ant.types.selectors.TypeSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.TypeSelector,toString --> type,org.apache.tools.ant.types.selectors.TypeSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.TypeSelector,setType --> type,org.apache.tools.ant.types.selectors.TypeSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.TypeSelector,verifySettings --> type,org.apache.tools.ant.types.selectors.TypeSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.TypeSelector,isSelected --> type,org.apache.tools.ant.types.selectors.TypeSelector,READ);
Call(METHOD,org.apache.tools.ant.types.selectors.TypeSelector,<init> --> <init>,org.apache.tools.ant.types.selectors.BaseExtendSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.TypeSelector,setType --> getValue,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.selectors.TypeSelector,setParameters --> setParameters,org.apache.tools.ant.types.selectors.BaseExtendSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.TypeSelector,setParameters --> getName,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.types.selectors.TypeSelector,setParameters --> <init>,org.apache.tools.ant.types.selectors.TypeSelector$FileType,);
Call(METHOD,org.apache.tools.ant.types.selectors.TypeSelector,setParameters --> getValue,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.types.selectors.TypeSelector,setParameters --> setValue,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.selectors.TypeSelector,setParameters --> setError,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.TypeSelector,verifySettings --> setError,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.TypeSelector,isSelected --> validate,org.apache.tools.ant.types.selectors.BaseSelector,);
EndClass 187
StartClass 188
Class(org.apache.tools.ant.types.selectors.ExtendSelector,N,N,Public);
Attribute(classname,java.lang.String,Private,N,N,);
Attribute(dynselector,org.apache.tools.ant.types.selectors.FileSelector,Private,N,N,);
Attribute(paramVec,java.util.Vector,Private,N,N,);
Attribute(classpath,org.apache.tools.ant.types.Path,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setClassname,void,Public,N,N);
Method(selectorCreate,void,Public,N,N);
Method(addParam,void,Public,N,N);
Method(setClasspath,void,Public,N,N);
Method(createClasspath,org.apache.tools.ant.types.Path,Public,N,N);
Method(getClasspath,org.apache.tools.ant.types.Path,Public,N,N);
Method(setClasspathref,void,Public,N,N);
Method(verifySettings,void,Public,N,N);
Method(isSelected,boolean,Public,N,N);
Parameter(setClassname,java.lang.String,);
Parameter(addParam,org.apache.tools.ant.types.Parameter,);
Parameter(setClasspath,org.apache.tools.ant.types.Path,);
Parameter(setClasspathref,org.apache.tools.ant.types.Reference,);
Parameter(isSelected,java.io.File,);
Parameter(isSelected,java.lang.String,);
Parameter(isSelected,java.io.File,);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelector);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.selectors.BaseSelector);
Composition(org.apache.tools.ant.types.selectors.FileSelector);
Composition(org.apache.tools.ant.types.Path);
Call(METHOD,org.apache.tools.ant.types.selectors.ExtendSelector,setClasspathref --> createClasspath,org.apache.tools.ant.types.selectors.ExtendSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.ExtendSelector,verifySettings --> selectorCreate,org.apache.tools.ant.types.selectors.ExtendSelector,);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ExtendSelector,<init> --> classname,org.apache.tools.ant.types.selectors.ExtendSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ExtendSelector,<init> --> dynselector,org.apache.tools.ant.types.selectors.ExtendSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ExtendSelector,<init> --> paramVec,org.apache.tools.ant.types.selectors.ExtendSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ExtendSelector,<init> --> classpath,org.apache.tools.ant.types.selectors.ExtendSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ExtendSelector,setClassname --> classname,org.apache.tools.ant.types.selectors.ExtendSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ExtendSelector,selectorCreate --> classname,org.apache.tools.ant.types.selectors.ExtendSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ExtendSelector,selectorCreate --> classpath,org.apache.tools.ant.types.selectors.ExtendSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ExtendSelector,selectorCreate --> dynselector,org.apache.tools.ant.types.selectors.ExtendSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ExtendSelector,selectorCreate --> dynselector,org.apache.tools.ant.types.selectors.ExtendSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ExtendSelector,addParam --> paramVec,org.apache.tools.ant.types.selectors.ExtendSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ExtendSelector,setClasspath --> classpath,org.apache.tools.ant.types.selectors.ExtendSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ExtendSelector,setClasspath --> classpath,org.apache.tools.ant.types.selectors.ExtendSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ExtendSelector,createClasspath --> classpath,org.apache.tools.ant.types.selectors.ExtendSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ExtendSelector,createClasspath --> classpath,org.apache.tools.ant.types.selectors.ExtendSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ExtendSelector,getClasspath --> classpath,org.apache.tools.ant.types.selectors.ExtendSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ExtendSelector,verifySettings --> dynselector,org.apache.tools.ant.types.selectors.ExtendSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ExtendSelector,verifySettings --> classname,org.apache.tools.ant.types.selectors.ExtendSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ExtendSelector,verifySettings --> paramVec,org.apache.tools.ant.types.selectors.ExtendSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ExtendSelector,isSelected --> paramVec,org.apache.tools.ant.types.selectors.ExtendSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ExtendSelector,isSelected --> dynselector,org.apache.tools.ant.types.selectors.ExtendSelector,READ);
Call(METHOD,org.apache.tools.ant.types.selectors.ExtendSelector,<init> --> <init>,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.ExtendSelector,selectorCreate --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.selectors.ExtendSelector,selectorCreate --> createClassLoader,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.types.selectors.ExtendSelector,selectorCreate --> setProjectReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.types.selectors.ExtendSelector,selectorCreate --> setError,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.ExtendSelector,setClasspath --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.selectors.ExtendSelector,setClasspath --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.selectors.ExtendSelector,setClasspath --> append,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.selectors.ExtendSelector,createClasspath --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.selectors.ExtendSelector,createClasspath --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.selectors.ExtendSelector,createClasspath --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.selectors.ExtendSelector,createClasspath --> <init>$2,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.selectors.ExtendSelector,createClasspath --> createPath,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.selectors.ExtendSelector,setClasspathref --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.selectors.ExtendSelector,setClasspathref --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.selectors.ExtendSelector,setClasspathref --> setRefid,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.selectors.ExtendSelector,verifySettings --> setError,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.ExtendSelector,isSelected --> validate,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.ExtendSelector,isSelected --> setParameters,org.apache.tools.ant.types.Parameterizable,);
Call(METHOD,org.apache.tools.ant.types.selectors.ExtendSelector,isSelected --> isSelected,org.apache.tools.ant.types.selectors.FileSelector,);
EndClass 188
StartClass 189
Class(org.apache.tools.ant.types.selectors.ContainsSelector,N,N,Public);
Attribute(contains,java.lang.String,Private,N,N,);
Attribute(casesensitive,boolean,Private,N,N,);
Attribute(ignorewhitespace,boolean,Private,N,N,);
Attribute(EXPRESSION_KEY,java.lang.String,Public,Y,Y,);
Attribute(CONTAINS_KEY,java.lang.String,Public,Y,Y,);
Attribute(CASE_KEY,java.lang.String,Public,Y,Y,);
Attribute(WHITESPACE_KEY,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(setText,void,Public,N,N);
Method(setCasesensitive,void,Public,N,N);
Method(setIgnorewhitespace,void,Public,N,N);
Method(setParameters,void,Public,N,N);
Method(verifySettings,void,Public,N,N);
Method(isSelected,boolean,Public,N,N);
Method(isSelected$2,boolean,Public,N,N);
Parameter(setText,java.lang.String,);
Parameter(setCasesensitive,boolean,);
Parameter(setIgnorewhitespace,boolean,);
Parameter(setParameters,org.apache.tools.ant.types.Parameter[],);
Parameter(isSelected,java.io.File,);
Parameter(isSelected,java.lang.String,);
Parameter(isSelected,java.io.File,);
Parameter(isSelected$2,org.apache.tools.ant.types.Resource,);
SuperClass(org.apache.tools.ant.types.selectors.BaseExtendSelector);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelector);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.selectors.BaseExtendSelector);
Realization(org.apache.tools.ant.types.resources.selectors.ResourceSelector);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsSelector,setParameters --> setText,org.apache.tools.ant.types.selectors.ContainsSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsSelector,setParameters --> setCasesensitive,org.apache.tools.ant.types.selectors.ContainsSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsSelector,setParameters --> setIgnorewhitespace,org.apache.tools.ant.types.selectors.ContainsSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsSelector,isSelected --> isSelected$2,org.apache.tools.ant.types.selectors.ContainsSelector,);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ContainsSelector,<init> --> contains,org.apache.tools.ant.types.selectors.ContainsSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ContainsSelector,<init> --> casesensitive,org.apache.tools.ant.types.selectors.ContainsSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ContainsSelector,<init> --> ignorewhitespace,org.apache.tools.ant.types.selectors.ContainsSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ContainsSelector,toString --> contains,org.apache.tools.ant.types.selectors.ContainsSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ContainsSelector,toString --> casesensitive,org.apache.tools.ant.types.selectors.ContainsSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ContainsSelector,toString --> ignorewhitespace,org.apache.tools.ant.types.selectors.ContainsSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ContainsSelector,setText --> contains,org.apache.tools.ant.types.selectors.ContainsSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ContainsSelector,setCasesensitive --> casesensitive,org.apache.tools.ant.types.selectors.ContainsSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ContainsSelector,setIgnorewhitespace --> ignorewhitespace,org.apache.tools.ant.types.selectors.ContainsSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ContainsSelector,verifySettings --> contains,org.apache.tools.ant.types.selectors.ContainsSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ContainsSelector,isSelected$2 --> contains,org.apache.tools.ant.types.selectors.ContainsSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ContainsSelector,isSelected$2 --> casesensitive,org.apache.tools.ant.types.selectors.ContainsSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ContainsSelector,isSelected$2 --> ignorewhitespace,org.apache.tools.ant.types.selectors.ContainsSelector,READ);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsSelector,<init> --> <init>,org.apache.tools.ant.types.selectors.BaseExtendSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsSelector,setParameters --> setParameters,org.apache.tools.ant.types.selectors.BaseExtendSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsSelector,setParameters --> getName,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsSelector,setParameters --> getValue,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsSelector,setParameters --> toBoolean,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsSelector,setParameters --> setError,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsSelector,verifySettings --> setError,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsSelector,isSelected --> <init>$3,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsSelector,isSelected$2 --> validate,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsSelector,isSelected$2 --> isDirectory,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsSelector,isSelected$2 --> removeWhitespace,org.apache.tools.ant.types.selectors.SelectorUtils,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsSelector,isSelected$2 --> getInputStream,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsSelector,isSelected$2 --> toLongString,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsSelector,isSelected$2 --> <init>$3,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsSelector,isSelected$2 --> close$2,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsSelector,isSelected$2 --> <init>$2,org.apache.tools.ant.BuildException,);
EndClass 189
StartClass 190
Class(org.apache.tools.ant.types.selectors.PresentSelector,N,N,Public);
Attribute(targetdir,java.io.File,Private,N,N,);
Attribute(mapperElement,org.apache.tools.ant.types.Mapper,Private,N,N,);
Attribute(map,org.apache.tools.ant.util.FileNameMapper,Private,N,N,);
Attribute(destmustexist,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(setTargetdir,void,Public,N,N);
Method(createMapper,org.apache.tools.ant.types.Mapper,Public,N,N);
Method(setPresent,void,Public,N,N);
Method(verifySettings,void,Public,N,N);
Method(isSelected,boolean,Public,N,N);
Parameter(setTargetdir,java.io.File,);
Parameter(setPresent,org.apache.tools.ant.types.selectors.PresentSelector$FilePresence,);
Parameter(isSelected,java.io.File,);
Parameter(isSelected,java.lang.String,);
Parameter(isSelected,java.io.File,);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelector);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.selectors.BaseSelector);
Composition(org.apache.tools.ant.types.Mapper);
Composition(org.apache.tools.ant.util.FileNameMapper);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.PresentSelector,<init> --> targetdir,org.apache.tools.ant.types.selectors.PresentSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.PresentSelector,<init> --> mapperElement,org.apache.tools.ant.types.selectors.PresentSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.PresentSelector,<init> --> map,org.apache.tools.ant.types.selectors.PresentSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.PresentSelector,<init> --> destmustexist,org.apache.tools.ant.types.selectors.PresentSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.PresentSelector,toString --> targetdir,org.apache.tools.ant.types.selectors.PresentSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.PresentSelector,toString --> destmustexist,org.apache.tools.ant.types.selectors.PresentSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.PresentSelector,toString --> map,org.apache.tools.ant.types.selectors.PresentSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.PresentSelector,toString --> mapperElement,org.apache.tools.ant.types.selectors.PresentSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.PresentSelector,setTargetdir --> targetdir,org.apache.tools.ant.types.selectors.PresentSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.PresentSelector,createMapper --> mapperElement,org.apache.tools.ant.types.selectors.PresentSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.PresentSelector,createMapper --> mapperElement,org.apache.tools.ant.types.selectors.PresentSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.PresentSelector,setPresent --> destmustexist,org.apache.tools.ant.types.selectors.PresentSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.PresentSelector,verifySettings --> targetdir,org.apache.tools.ant.types.selectors.PresentSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.PresentSelector,verifySettings --> mapperElement,org.apache.tools.ant.types.selectors.PresentSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.PresentSelector,verifySettings --> map,org.apache.tools.ant.types.selectors.PresentSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.PresentSelector,verifySettings --> map,org.apache.tools.ant.types.selectors.PresentSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.PresentSelector,isSelected --> map,org.apache.tools.ant.types.selectors.PresentSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.PresentSelector,isSelected --> targetdir,org.apache.tools.ant.types.selectors.PresentSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.PresentSelector,isSelected --> destmustexist,org.apache.tools.ant.types.selectors.PresentSelector,READ);
Call(METHOD,org.apache.tools.ant.types.selectors.PresentSelector,<init> --> <init>,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.PresentSelector,toString --> toString,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.selectors.PresentSelector,createMapper --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.selectors.PresentSelector,createMapper --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.selectors.PresentSelector,createMapper --> <init>,org.apache.tools.ant.types.Mapper,);
Call(METHOD,org.apache.tools.ant.types.selectors.PresentSelector,setPresent --> getIndex,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.selectors.PresentSelector,verifySettings --> setError,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.PresentSelector,verifySettings --> <init>,org.apache.tools.ant.util.IdentityMapper,);
Call(METHOD,org.apache.tools.ant.types.selectors.PresentSelector,verifySettings --> getImplementation,org.apache.tools.ant.types.Mapper,);
Call(METHOD,org.apache.tools.ant.types.selectors.PresentSelector,isSelected --> validate,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.PresentSelector,isSelected --> mapFileName,org.apache.tools.ant.util.FileNameMapper,);
Call(METHOD,org.apache.tools.ant.types.selectors.PresentSelector,isSelected --> <init>$2,org.apache.tools.ant.BuildException,);
EndClass 190
StartClass 191
Class(org.apache.tools.ant.types.selectors.DepthSelector,N,N,Public);
Attribute(min,int,Public,N,N,);
Attribute(max,int,Public,N,N,);
Attribute(MIN_KEY,java.lang.String,Public,Y,Y,);
Attribute(MAX_KEY,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(setMin,void,Public,N,N);
Method(setMax,void,Public,N,N);
Method(setParameters,void,Public,N,N);
Method(verifySettings,void,Public,N,N);
Method(isSelected,boolean,Public,N,N);
Parameter(setMin,int,);
Parameter(setMax,int,);
Parameter(setParameters,org.apache.tools.ant.types.Parameter[],);
Parameter(isSelected,java.io.File,);
Parameter(isSelected,java.lang.String,);
Parameter(isSelected,java.io.File,);
SuperClass(org.apache.tools.ant.types.selectors.BaseExtendSelector);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelector);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.selectors.BaseExtendSelector);
Call(METHOD,org.apache.tools.ant.types.selectors.DepthSelector,setParameters --> setMin,org.apache.tools.ant.types.selectors.DepthSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.DepthSelector,setParameters --> setMax,org.apache.tools.ant.types.selectors.DepthSelector,);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DepthSelector,<init> --> min,org.apache.tools.ant.types.selectors.DepthSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DepthSelector,<init> --> max,org.apache.tools.ant.types.selectors.DepthSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DepthSelector,toString --> min,org.apache.tools.ant.types.selectors.DepthSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DepthSelector,toString --> max,org.apache.tools.ant.types.selectors.DepthSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DepthSelector,setMin --> min,org.apache.tools.ant.types.selectors.DepthSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DepthSelector,setMax --> max,org.apache.tools.ant.types.selectors.DepthSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DepthSelector,verifySettings --> min,org.apache.tools.ant.types.selectors.DepthSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DepthSelector,verifySettings --> max,org.apache.tools.ant.types.selectors.DepthSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DepthSelector,isSelected --> max,org.apache.tools.ant.types.selectors.DepthSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DepthSelector,isSelected --> min,org.apache.tools.ant.types.selectors.DepthSelector,READ);
Call(METHOD,org.apache.tools.ant.types.selectors.DepthSelector,<init> --> <init>,org.apache.tools.ant.types.selectors.BaseExtendSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.DepthSelector,setParameters --> setParameters,org.apache.tools.ant.types.selectors.BaseExtendSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.DepthSelector,setParameters --> getName,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.types.selectors.DepthSelector,setParameters --> getValue,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.types.selectors.DepthSelector,setParameters --> setError,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.DepthSelector,verifySettings --> setError,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.DepthSelector,isSelected --> validate,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.DepthSelector,isSelected --> <init>$2,org.apache.tools.ant.BuildException,);
EndClass 191
StartClass 192
Class(org.apache.tools.ant.types.selectors.DependSelector,N,N,Public);
Method(<init>,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(selectionTest,boolean,Public,N,N);
Parameter(selectionTest,java.io.File,);
Parameter(selectionTest,java.io.File,);
SuperClass(org.apache.tools.ant.types.selectors.MappingSelector);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelector);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.selectors.MappingSelector);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DependSelector,toString --> targetdir,org.apache.tools.ant.types.selectors.MappingSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DependSelector,toString --> granularity,org.apache.tools.ant.types.selectors.MappingSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DependSelector,toString --> map,org.apache.tools.ant.types.selectors.MappingSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DependSelector,toString --> mapperElement,org.apache.tools.ant.types.selectors.MappingSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.DependSelector,selectionTest --> granularity,org.apache.tools.ant.types.selectors.MappingSelector,READ);
Call(METHOD,org.apache.tools.ant.types.selectors.DependSelector,<init> --> <init>,org.apache.tools.ant.types.selectors.MappingSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.DependSelector,toString --> toString,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.selectors.DependSelector,selectionTest --> isOutOfDate,org.apache.tools.ant.types.selectors.SelectorUtils,);
EndClass 192
StartClass 193
Class(org.apache.tools.ant.types.selectors.ContainsRegexpSelector,N,N,Public);
Attribute(userProvidedExpression,java.lang.String,Private,N,N,);
Attribute(myRegExp,org.apache.tools.ant.types.RegularExpression,Private,N,N,);
Attribute(myExpression,org.apache.tools.ant.util.regexp.Regexp,Private,N,N,);
Attribute(EXPRESSION_KEY,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(setExpression,void,Public,N,N);
Method(setParameters,void,Public,N,N);
Method(verifySettings,void,Public,N,N);
Method(isSelected,boolean,Public,N,N);
Method(isSelected$2,boolean,Public,N,N);
Parameter(setExpression,java.lang.String,);
Parameter(setParameters,org.apache.tools.ant.types.Parameter[],);
Parameter(isSelected,java.io.File,);
Parameter(isSelected,java.lang.String,);
Parameter(isSelected,java.io.File,);
Parameter(isSelected$2,org.apache.tools.ant.types.Resource,);
SuperClass(org.apache.tools.ant.types.selectors.BaseExtendSelector);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelector);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.selectors.BaseExtendSelector);
Realization(org.apache.tools.ant.types.resources.selectors.ResourceSelector);
Composition(org.apache.tools.ant.types.RegularExpression);
Composition(org.apache.tools.ant.util.regexp.Regexp);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,setParameters --> setExpression,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,isSelected --> isSelected$2,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,<init> --> userProvidedExpression,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,<init> --> myRegExp,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,<init> --> myExpression,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,toString --> userProvidedExpression,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,setExpression --> userProvidedExpression,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,verifySettings --> userProvidedExpression,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,isSelected$2 --> myRegExp,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,isSelected$2 --> userProvidedExpression,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,isSelected$2 --> myExpression,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,isSelected$2 --> myRegExp,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,isSelected$2 --> myExpression,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,WRITE);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,<init> --> <init>,org.apache.tools.ant.types.selectors.BaseExtendSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,setParameters --> setParameters,org.apache.tools.ant.types.selectors.BaseExtendSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,setParameters --> getName,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,setParameters --> getValue,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,setParameters --> setError,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,verifySettings --> setError,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,isSelected --> <init>$3,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,isSelected$2 --> validate,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,isSelected$2 --> isDirectory,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,isSelected$2 --> <init>,org.apache.tools.ant.types.RegularExpression,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,isSelected$2 --> setPattern$2,org.apache.tools.ant.types.RegularExpression,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,isSelected$2 --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,isSelected$2 --> getRegexp,org.apache.tools.ant.types.RegularExpression,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,isSelected$2 --> getInputStream,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,isSelected$2 --> toLongString,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,isSelected$2 --> <init>$3,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,isSelected$2 --> matches,org.apache.tools.ant.util.regexp.RegexpMatcher,);
Call(METHOD,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,isSelected$2 --> <init>$2,org.apache.tools.ant.BuildException,);
EndClass 193
StartClass 194
Class(org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,N,N,Public);
Attribute(cacheName,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector$CacheName,Private,N,N,);
Attribute(cacheClass,java.lang.String,Private,N,N,);
Attribute(algoName,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector$AlgorithmName,Private,N,N,);
Attribute(algorithmClass,java.lang.String,Private,N,N,);
Attribute(compName,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector$ComparatorName,Private,N,N,);
Attribute(comparatorClass,java.lang.String,Private,N,N,);
Attribute(update,boolean,Private,N,N,);
Attribute(selectDirectories,boolean,Private,N,N,);
Attribute(selectResourcesWithoutInputStream,boolean,Private,N,N,);
Attribute(delayUpdate,boolean,Private,N,N,);
Attribute(comparator,java.util.Comparator,Private,N,N,);
Attribute(algorithm,org.apache.tools.ant.types.selectors.modifiedselector.Algorithm,Private,N,N,);
Attribute(cache,org.apache.tools.ant.types.selectors.modifiedselector.Cache,Private,N,N,);
Attribute(modified,int,Private,N,N,);
Attribute(isConfigured,boolean,Private,N,N,);
Attribute(configParameter,java.util.Vector,Private,N,N,);
Attribute(specialParameter,java.util.Vector,Private,N,N,);
Attribute(myClassLoader,java.lang.ClassLoader,Private,N,N,);
Attribute(classpath,org.apache.tools.ant.types.Path,Private,N,N,);
Attribute(class$org$apache$tools$ant$types$selectors$modifiedselector$Algorithm,java.lang.Class,Public,Y,N,);
Attribute(class$org$apache$tools$ant$types$selectors$modifiedselector$Cache,java.lang.Class,Public,Y,N,);
Attribute(class$java$util$Comparator,java.lang.Class,Public,Y,N,);
Method(<init>,void,Public,N,N);
Method(verifySettings,void,Public,N,N);
Method(configure,void,Public,N,N);
Method(loadClass,java.lang.Object,Protected,N,N);
Method(isSelected,boolean,Public,N,N);
Method(isSelected$2,boolean,Public,N,N);
Method(isSelected$3,boolean,Private,N,N);
Method(saveCache,void,Protected,N,N);
Method(setAlgorithmClass,void,Public,N,N);
Method(setComparatorClass,void,Public,N,N);
Method(setCacheClass,void,Public,N,N);
Method(setUpdate,void,Public,N,N);
Method(setSeldirs,void,Public,N,N);
Method(setSelres,void,Public,N,N);
Method(getModified,int,Public,N,N);
Method(setModified,void,Public,N,N);
Method(getDelayUpdate,boolean,Public,N,N);
Method(setDelayUpdate,void,Public,N,N);
Method(addClasspath,void,Public,N,N);
Method(getClassLoader,java.lang.ClassLoader,Public,N,N);
Method(setClassLoader,void,Public,N,N);
Method(addParam,void,Public,N,N);
Method(addParam$2,void,Public,N,N);
Method(setParameters,void,Public,N,N);
Method(useParameter,void,Public,N,N);
Method(tryToSetAParameter,void,Protected,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(buildFinished,void,Public,N,N);
Method(targetFinished,void,Public,N,N);
Method(taskFinished,void,Public,N,N);
Method(buildStarted,void,Public,N,N);
Method(targetStarted,void,Public,N,N);
Method(taskStarted,void,Public,N,N);
Method(messageLogged,void,Public,N,N);
Method(getCache,org.apache.tools.ant.types.selectors.modifiedselector.Cache,Public,N,N);
Method(setCache,void,Public,N,N);
Method(getAlgorithm,org.apache.tools.ant.types.selectors.modifiedselector.Algorithm,Public,N,N);
Method(setAlgorithm,void,Public,N,N);
Method(getComparator,java.util.Comparator,Public,N,N);
Method(setComparator,void,Public,N,N);
Method(class$,java.lang.Class,Public,Y,N);
Parameter(loadClass,java.lang.String,);
Parameter(loadClass,java.lang.String,);
Parameter(loadClass,java.lang.Class,);
Parameter(isSelected,org.apache.tools.ant.types.Resource,);
Parameter(isSelected$2,java.io.File,);
Parameter(isSelected$2,java.lang.String,);
Parameter(isSelected$2,java.io.File,);
Parameter(isSelected$3,java.io.File,);
Parameter(isSelected$3,java.lang.String,);
Parameter(isSelected$3,java.lang.String,);
Parameter(setAlgorithmClass,java.lang.String,);
Parameter(setComparatorClass,java.lang.String,);
Parameter(setCacheClass,java.lang.String,);
Parameter(setUpdate,boolean,);
Parameter(setSeldirs,boolean,);
Parameter(setSelres,boolean,);
Parameter(setModified,int,);
Parameter(setDelayUpdate,boolean,);
Parameter(addClasspath,org.apache.tools.ant.types.Path,);
Parameter(setClassLoader,java.lang.ClassLoader,);
Parameter(addParam,java.lang.String,);
Parameter(addParam,java.lang.Object,);
Parameter(addParam$2,org.apache.tools.ant.types.Parameter,);
Parameter(setParameters,org.apache.tools.ant.types.Parameter[],);
Parameter(useParameter,org.apache.tools.ant.types.Parameter,);
Parameter(tryToSetAParameter,java.lang.Object,);
Parameter(tryToSetAParameter,java.lang.String,);
Parameter(tryToSetAParameter,java.lang.String,);
Parameter(buildFinished,org.apache.tools.ant.BuildEvent,);
Parameter(targetFinished,org.apache.tools.ant.BuildEvent,);
Parameter(taskFinished,org.apache.tools.ant.BuildEvent,);
Parameter(buildStarted,org.apache.tools.ant.BuildEvent,);
Parameter(targetStarted,org.apache.tools.ant.BuildEvent,);
Parameter(taskStarted,org.apache.tools.ant.BuildEvent,);
Parameter(messageLogged,org.apache.tools.ant.BuildEvent,);
Parameter(setCache,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector$CacheName,);
Parameter(setAlgorithm,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector$AlgorithmName,);
Parameter(setComparator,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector$ComparatorName,);
Parameter(class$,java.lang.String,);
SuperClass(org.apache.tools.ant.types.selectors.BaseExtendSelector);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelector);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.selectors.BaseExtendSelector);
Realization(org.apache.tools.ant.BuildListener);
Realization(org.apache.tools.ant.types.resources.selectors.ResourceSelector);
Composition(org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector$CacheName);
Composition(org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector$AlgorithmName);
Composition(org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector$ComparatorName);
Composition(org.apache.tools.ant.types.selectors.modifiedselector.Algorithm);
Composition(org.apache.tools.ant.types.selectors.modifiedselector.Cache);
Composition(org.apache.tools.ant.types.Path);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,verifySettings --> configure,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> setDelayUpdate,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> useParameter,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> class$,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> loadClass,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,loadClass --> getClassLoader,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected --> isSelected$2,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected --> isSelected$3,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected$2 --> isSelected$3,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected$3 --> getModified,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected$3 --> setModified,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected$3 --> getDelayUpdate,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected$3 --> saveCache,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,saveCache --> getModified,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,saveCache --> setModified,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,useParameter --> setCache,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,useParameter --> setAlgorithm,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,useParameter --> setComparator,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,useParameter --> setUpdate,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,useParameter --> setDelayUpdate,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,useParameter --> setSeldirs,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,useParameter --> tryToSetAParameter,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,buildFinished --> getDelayUpdate,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,buildFinished --> saveCache,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,targetFinished --> getDelayUpdate,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,targetFinished --> saveCache,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,taskFinished --> getDelayUpdate,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,taskFinished --> saveCache,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,<init> --> cacheName,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,<init> --> algoName,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,<init> --> compName,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,<init> --> update,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,<init> --> selectDirectories,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,<init> --> selectResourcesWithoutInputStream,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,<init> --> delayUpdate,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,<init> --> comparator,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,<init> --> algorithm,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,<init> --> cache,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,<init> --> modified,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,<init> --> isConfigured,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,<init> --> configParameter,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,<init> --> specialParameter,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,<init> --> myClassLoader,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,<init> --> classpath,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,verifySettings --> cache,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,verifySettings --> algorithm,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> isConfigured,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> configParameter,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> specialParameter,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> algoName,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> algorithmClass,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> class$org$apache$tools$ant$types$selectors$modifiedselector$Algorithm,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> cacheName,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> cacheClass,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> class$org$apache$tools$ant$types$selectors$modifiedselector$Cache,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> compName,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> comparatorClass,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> class$java$util$Comparator,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> isConfigured,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> update,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> selectDirectories,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> configParameter,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> algorithm,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> class$org$apache$tools$ant$types$selectors$modifiedselector$Algorithm,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> cache,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> class$org$apache$tools$ant$types$selectors$modifiedselector$Cache,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> comparator,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> class$java$util$Comparator,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> specialParameter,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected --> selectResourcesWithoutInputStream,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected$3 --> selectDirectories,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected$3 --> cache,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected$3 --> algorithm,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected$3 --> comparator,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected$3 --> update,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,saveCache --> cache,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,setAlgorithmClass --> algorithmClass,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,setComparatorClass --> comparatorClass,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,setCacheClass --> cacheClass,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,setUpdate --> update,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,setSeldirs --> selectDirectories,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,setSelres --> selectResourcesWithoutInputStream,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,getModified --> modified,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,setModified --> modified,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,getDelayUpdate --> delayUpdate,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,setDelayUpdate --> delayUpdate,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,addClasspath --> classpath,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,addClasspath --> classpath,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,getClassLoader --> myClassLoader,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,getClassLoader --> classpath,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,getClassLoader --> myClassLoader,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,setClassLoader --> myClassLoader,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,addParam --> configParameter,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,addParam$2 --> configParameter,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,setParameters --> configParameter,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,useParameter --> cache,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,useParameter --> algorithm,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,useParameter --> comparator,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,toString --> update,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,toString --> selectDirectories,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,toString --> cache,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,toString --> algorithm,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,toString --> comparator,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,getCache --> cache,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,setCache --> cacheName,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,getAlgorithm --> algorithm,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,setAlgorithm --> algoName,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,getComparator --> comparator,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,setComparator --> compName,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,WRITE);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,<init> --> <init>,org.apache.tools.ant.types.selectors.BaseExtendSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,verifySettings --> setError,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,verifySettings --> isValid,org.apache.tools.ant.types.selectors.modifiedselector.Cache,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,verifySettings --> isValid,org.apache.tools.ant.types.selectors.modifiedselector.Algorithm,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> getBaseDir,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> addBuildListener,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> <init>$2,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> <init>,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> <init>,org.apache.tools.ant.types.selectors.modifiedselector.EqualComparator,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> getName,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> getValue,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> <init>,org.apache.tools.ant.types.selectors.modifiedselector.HashvalueAlgorithm,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> <init>,org.apache.tools.ant.types.selectors.modifiedselector.ChecksumAlgorithm,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> <init>,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,configure --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,loadClass --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,loadClass --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected --> isFilesystemOnly,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected --> getFile,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected --> getName,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected --> getBaseDir,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected --> getFileUtils,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected --> createTempFile,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected --> <init>$3,org.apache.tools.ant.types.resources.FileResource,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected --> copyResource,org.apache.tools.ant.util.ResourceUtils,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected --> toLongString,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected --> getName,org.apache.tools.ant.types.Resource,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected --> log$2,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected$3 --> validate,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected$3 --> get,org.apache.tools.ant.types.selectors.modifiedselector.Cache,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected$3 --> getValue,org.apache.tools.ant.types.selectors.modifiedselector.Algorithm,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,isSelected$3 --> put,org.apache.tools.ant.types.selectors.modifiedselector.Cache,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,saveCache --> save,org.apache.tools.ant.types.selectors.modifiedselector.Cache,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,addClasspath --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,getClassLoader --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,getClassLoader --> createClassLoader,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,addParam --> <init>,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,addParam --> setName,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,addParam --> setValue,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,useParameter --> getName,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,useParameter --> getValue,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,useParameter --> <init>,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector$CacheName,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,useParameter --> setValue,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,useParameter --> <init>,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector$AlgorithmName,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,useParameter --> <init>,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector$ComparatorName,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,useParameter --> setError,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,tryToSetAParameter --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,tryToSetAParameter --> <init>,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,tryToSetAParameter --> getHelper$2,org.apache.tools.ant.IntrospectionHelper,);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,tryToSetAParameter --> setAttribute,org.apache.tools.ant.IntrospectionHelper,);
EndClass 194
StartClass 195
Class(org.apache.tools.ant.types.selectors.SelectorScanner,Y,Y,Public);
Method(setSelectors,void,Public,N,Y);
Method(getDeselectedDirectories,java.lang.String[],Public,N,Y);
Method(getDeselectedFiles,java.lang.String[],Public,N,Y);
Parameter(setSelectors,org.apache.tools.ant.types.selectors.FileSelector[],);
EndClass 195
StartClass 196
Class(org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,N,N,NA);
Attribute(rci,java.util.Iterator,Private,N,N,);
Attribute(ri,java.util.Iterator,Private,N,N,);
Attribute(this$1,org.apache.tools.ant.types.resources.Resources$MyCollection,Private,N,Y,);
Method(<init>,void,Private,N,N);
Method(hasNext,boolean,Public,N,N);
Method(next,java.lang.Object,Public,N,N);
Method(remove,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>,org.apache.tools.ant.types.resources.Resources$MyCollection,);
Parameter(<init>$2,org.apache.tools.ant.types.resources.Resources$MyCollection,);
Parameter(<init>$2,org.apache.tools.ant.types.resources.Resources$1,);
Composition(org.apache.tools.ant.types.resources.Resources$MyCollection);
Call(METHOD,org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,next --> hasNext,org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,<init>$2 --> <init>,org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,<init> --> this$1,org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,<init> --> this$1,org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,<init> --> rci,org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,<init> --> ri,org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,hasNext --> ri,org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,hasNext --> rci,org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,hasNext --> ri,org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,next --> ri,org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,READ);
Call(METHOD,org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,<init> --> access$200,org.apache.tools.ant.types.resources.Resources$MyCollection,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,<init> --> access$000,org.apache.tools.ant.types.resources.Resources,);
Call(METHOD,org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator,hasNext --> iterator,org.apache.tools.ant.types.ResourceCollection,);
EndClass 196
StartClass 197
Class(org.apache.tools.ant.filters.ClassConstants,N,N,Public);
Attribute(queuedData,java.lang.String,Private,N,N,);
Attribute(JAVA_CLASS_HELPER,java.lang.String,Private,Y,Y,);
Attribute(array$B,java.lang.Class,Public,Y,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(read,int,Public,N,N);
Method(chain,java.io.Reader,Public,N,N);
Method(class$,java.lang.Class,Public,Y,N);
Parameter(<init>$2,java.io.Reader,);
Parameter(chain,java.io.Reader,);
Parameter(class$,java.lang.String,);
SuperClass(org.apache.tools.ant.filters.BaseFilterReader);
Generalization(org.apache.tools.ant.filters.BaseFilterReader);
Realization(org.apache.tools.ant.filters.ChainableReader);
Call(METHOD,org.apache.tools.ant.filters.ClassConstants,read --> class$,org.apache.tools.ant.filters.ClassConstants,);
Call(METHOD,org.apache.tools.ant.filters.ClassConstants,read --> read,org.apache.tools.ant.filters.ClassConstants,);
Call(METHOD,org.apache.tools.ant.filters.ClassConstants,chain --> <init>$2,org.apache.tools.ant.filters.ClassConstants,);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ClassConstants,<init> --> queuedData,org.apache.tools.ant.filters.ClassConstants,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ClassConstants,<init>$2 --> queuedData,org.apache.tools.ant.filters.ClassConstants,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ClassConstants,read --> queuedData,org.apache.tools.ant.filters.ClassConstants,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ClassConstants,read --> array$B,org.apache.tools.ant.filters.ClassConstants,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ClassConstants,read --> queuedData,org.apache.tools.ant.filters.ClassConstants,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ClassConstants,read --> array$B,org.apache.tools.ant.filters.ClassConstants,WRITE);
Call(METHOD,org.apache.tools.ant.filters.ClassConstants,<init> --> <init>,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.ClassConstants,<init>$2 --> <init>$2,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.ClassConstants,read --> readFully,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.ClassConstants,read --> <init>$5,org.apache.tools.ant.BuildException,);
EndClass 197
StartClass 198
Class(org.apache.tools.ant.filters.ExpandProperties,N,N,Public);
Attribute(queuedData,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(read,int,Public,N,N);
Method(chain,java.io.Reader,Public,N,N);
Parameter(<init>$2,java.io.Reader,);
Parameter(chain,java.io.Reader,);
SuperClass(org.apache.tools.ant.filters.BaseFilterReader);
Generalization(org.apache.tools.ant.filters.BaseFilterReader);
Realization(org.apache.tools.ant.filters.ChainableReader);
Call(METHOD,org.apache.tools.ant.filters.ExpandProperties,read --> read,org.apache.tools.ant.filters.ExpandProperties,);
Call(METHOD,org.apache.tools.ant.filters.ExpandProperties,chain --> <init>$2,org.apache.tools.ant.filters.ExpandProperties,);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ExpandProperties,<init> --> queuedData,org.apache.tools.ant.filters.ExpandProperties,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ExpandProperties,<init>$2 --> queuedData,org.apache.tools.ant.filters.ExpandProperties,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ExpandProperties,read --> queuedData,org.apache.tools.ant.filters.ExpandProperties,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ExpandProperties,read --> queuedData,org.apache.tools.ant.filters.ExpandProperties,WRITE);
Call(METHOD,org.apache.tools.ant.filters.ExpandProperties,<init> --> <init>,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.ExpandProperties,<init>$2 --> <init>$2,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.ExpandProperties,read --> readFully,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.ExpandProperties,read --> getProject,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.ExpandProperties,read --> replaceProperties,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.filters.ExpandProperties,chain --> getProject,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.ExpandProperties,chain --> setProject,org.apache.tools.ant.filters.BaseFilterReader,);
EndClass 198
StartClass 199
Class(org.apache.tools.ant.filters.HeadFilter,N,N,Public);
Attribute(LINES_KEY,java.lang.String,Private,Y,Y,);
Attribute(SKIP_KEY,java.lang.String,Private,Y,Y,);
Attribute(linesRead,long,Private,N,N,);
Attribute(DEFAULT_NUM_LINES,int,Private,Y,Y,);
Attribute(lines,long,Private,N,N,);
Attribute(skip,long,Private,N,N,);
Attribute(lineTokenizer,org.apache.tools.ant.util.LineTokenizer,Private,N,N,);
Attribute(line,java.lang.String,Private,N,N,);
Attribute(linePos,int,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(read,int,Public,N,N);
Method(setLines,void,Public,N,N);
Method(getLines,long,Private,N,N);
Method(setSkip,void,Public,N,N);
Method(getSkip,long,Private,N,N);
Method(chain,java.io.Reader,Public,N,N);
Method(initialize,void,Private,N,N);
Method(headFilter,java.lang.String,Private,N,N);
Parameter(<init>$2,java.io.Reader,);
Parameter(setLines,long,);
Parameter(setSkip,long,);
Parameter(chain,java.io.Reader,);
Parameter(headFilter,java.lang.String,);
SuperClass(org.apache.tools.ant.filters.BaseParamFilterReader);
SuperClass(org.apache.tools.ant.filters.BaseFilterReader);
Generalization(org.apache.tools.ant.filters.BaseParamFilterReader);
Realization(org.apache.tools.ant.filters.ChainableReader);
Composition(org.apache.tools.ant.util.LineTokenizer);
Call(METHOD,org.apache.tools.ant.filters.HeadFilter,read --> initialize,org.apache.tools.ant.filters.HeadFilter,);
Call(METHOD,org.apache.tools.ant.filters.HeadFilter,read --> headFilter,org.apache.tools.ant.filters.HeadFilter,);
Call(METHOD,org.apache.tools.ant.filters.HeadFilter,chain --> <init>$2,org.apache.tools.ant.filters.HeadFilter,);
Call(METHOD,org.apache.tools.ant.filters.HeadFilter,chain --> getLines,org.apache.tools.ant.filters.HeadFilter,);
Call(METHOD,org.apache.tools.ant.filters.HeadFilter,chain --> setLines,org.apache.tools.ant.filters.HeadFilter,);
Call(METHOD,org.apache.tools.ant.filters.HeadFilter,chain --> getSkip,org.apache.tools.ant.filters.HeadFilter,);
Call(METHOD,org.apache.tools.ant.filters.HeadFilter,chain --> setSkip,org.apache.tools.ant.filters.HeadFilter,);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,<init> --> linesRead,org.apache.tools.ant.filters.HeadFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,<init> --> lines,org.apache.tools.ant.filters.HeadFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,<init> --> skip,org.apache.tools.ant.filters.HeadFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,<init> --> lineTokenizer,org.apache.tools.ant.filters.HeadFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,<init> --> line,org.apache.tools.ant.filters.HeadFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,<init> --> linePos,org.apache.tools.ant.filters.HeadFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,<init>$2 --> lineTokenizer,org.apache.tools.ant.filters.HeadFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,<init>$2 --> linesRead,org.apache.tools.ant.filters.HeadFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,<init>$2 --> lines,org.apache.tools.ant.filters.HeadFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,<init>$2 --> skip,org.apache.tools.ant.filters.HeadFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,<init>$2 --> lineTokenizer,org.apache.tools.ant.filters.HeadFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,<init>$2 --> line,org.apache.tools.ant.filters.HeadFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,<init>$2 --> linePos,org.apache.tools.ant.filters.HeadFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,read --> line,org.apache.tools.ant.filters.HeadFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,read --> lineTokenizer,org.apache.tools.ant.filters.HeadFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,read --> linePos,org.apache.tools.ant.filters.HeadFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,read --> line,org.apache.tools.ant.filters.HeadFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,read --> linePos,org.apache.tools.ant.filters.HeadFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,setLines --> lines,org.apache.tools.ant.filters.HeadFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,getLines --> lines,org.apache.tools.ant.filters.HeadFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,setSkip --> skip,org.apache.tools.ant.filters.HeadFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,getSkip --> skip,org.apache.tools.ant.filters.HeadFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,initialize --> lines,org.apache.tools.ant.filters.HeadFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,initialize --> skip,org.apache.tools.ant.filters.HeadFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,headFilter --> linesRead,org.apache.tools.ant.filters.HeadFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,headFilter --> skip,org.apache.tools.ant.filters.HeadFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,headFilter --> lines,org.apache.tools.ant.filters.HeadFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.HeadFilter,headFilter --> linesRead,org.apache.tools.ant.filters.HeadFilter,WRITE);
Call(METHOD,org.apache.tools.ant.filters.HeadFilter,<init> --> <init>,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.HeadFilter,<init>$2 --> <init>$2,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.HeadFilter,<init>$2 --> <init>,org.apache.tools.ant.util.LineTokenizer,);
Call(METHOD,org.apache.tools.ant.filters.HeadFilter,<init>$2 --> setIncludeDelims,org.apache.tools.ant.util.LineTokenizer,);
Call(METHOD,org.apache.tools.ant.filters.HeadFilter,read --> getInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.HeadFilter,read --> setInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.HeadFilter,read --> getToken,org.apache.tools.ant.util.LineTokenizer,);
Call(METHOD,org.apache.tools.ant.filters.HeadFilter,chain --> setInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.HeadFilter,initialize --> getParameters,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.HeadFilter,initialize --> getName,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.filters.HeadFilter,initialize --> getValue,org.apache.tools.ant.types.Parameter,);
EndClass 199
StartClass 200
Class(org.apache.tools.ant.filters.LineContains,N,N,Public);
Attribute(CONTAINS_KEY,java.lang.String,Private,Y,Y,);
Attribute(NEGATE_KEY,java.lang.String,Private,Y,Y,);
Attribute(contains,java.util.Vector,Private,N,N,);
Attribute(line,java.lang.String,Private,N,N,);
Attribute(negate,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(read,int,Public,N,N);
Method(addConfiguredContains,void,Public,N,N);
Method(setNegate,void,Public,N,N);
Method(isNegated,boolean,Public,N,N);
Method(setContains,void,Private,N,N);
Method(getContains,java.util.Vector,Private,N,N);
Method(chain,java.io.Reader,Public,N,N);
Method(initialize,void,Private,N,N);
Parameter(<init>$2,java.io.Reader,);
Parameter(addConfiguredContains,org.apache.tools.ant.filters.LineContains$Contains,);
Parameter(setNegate,boolean,);
Parameter(setContains,java.util.Vector,);
Parameter(chain,java.io.Reader,);
SuperClass(org.apache.tools.ant.filters.BaseParamFilterReader);
SuperClass(org.apache.tools.ant.filters.BaseFilterReader);
Generalization(org.apache.tools.ant.filters.BaseParamFilterReader);
Realization(org.apache.tools.ant.filters.ChainableReader);
Call(METHOD,org.apache.tools.ant.filters.LineContains,read --> initialize,org.apache.tools.ant.filters.LineContains,);
Call(METHOD,org.apache.tools.ant.filters.LineContains,read --> isNegated,org.apache.tools.ant.filters.LineContains,);
Call(METHOD,org.apache.tools.ant.filters.LineContains,read --> read,org.apache.tools.ant.filters.LineContains,);
Call(METHOD,org.apache.tools.ant.filters.LineContains,chain --> <init>$2,org.apache.tools.ant.filters.LineContains,);
Call(METHOD,org.apache.tools.ant.filters.LineContains,chain --> getContains,org.apache.tools.ant.filters.LineContains,);
Call(METHOD,org.apache.tools.ant.filters.LineContains,chain --> setContains,org.apache.tools.ant.filters.LineContains,);
Call(METHOD,org.apache.tools.ant.filters.LineContains,chain --> isNegated,org.apache.tools.ant.filters.LineContains,);
Call(METHOD,org.apache.tools.ant.filters.LineContains,chain --> setNegate,org.apache.tools.ant.filters.LineContains,);
Call(METHOD,org.apache.tools.ant.filters.LineContains,initialize --> setNegate,org.apache.tools.ant.filters.LineContains,);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContains,<init> --> contains,org.apache.tools.ant.filters.LineContains,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContains,<init> --> line,org.apache.tools.ant.filters.LineContains,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContains,<init> --> negate,org.apache.tools.ant.filters.LineContains,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContains,<init>$2 --> contains,org.apache.tools.ant.filters.LineContains,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContains,<init>$2 --> line,org.apache.tools.ant.filters.LineContains,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContains,<init>$2 --> negate,org.apache.tools.ant.filters.LineContains,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContains,read --> line,org.apache.tools.ant.filters.LineContains,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContains,read --> contains,org.apache.tools.ant.filters.LineContains,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContains,read --> line,org.apache.tools.ant.filters.LineContains,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContains,addConfiguredContains --> contains,org.apache.tools.ant.filters.LineContains,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContains,setNegate --> negate,org.apache.tools.ant.filters.LineContains,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContains,isNegated --> negate,org.apache.tools.ant.filters.LineContains,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContains,setContains --> contains,org.apache.tools.ant.filters.LineContains,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContains,getContains --> contains,org.apache.tools.ant.filters.LineContains,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContains,initialize --> contains,org.apache.tools.ant.filters.LineContains,READ);
Call(METHOD,org.apache.tools.ant.filters.LineContains,<init> --> <init>,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.LineContains,<init>$2 --> <init>$2,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.LineContains,read --> getInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.LineContains,read --> setInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.LineContains,read --> readLine,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.LineContains,addConfiguredContains --> getValue,org.apache.tools.ant.filters.LineContains$Contains,);
Call(METHOD,org.apache.tools.ant.filters.LineContains,initialize --> getParameters,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.LineContains,initialize --> getType,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.filters.LineContains,initialize --> getValue,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.filters.LineContains,initialize --> toBoolean,org.apache.tools.ant.Project,);
EndClass 200
StartClass 201
Class(org.apache.tools.ant.filters.LineContainsRegExp,N,N,Public);
Attribute(REGEXP_KEY,java.lang.String,Private,Y,Y,);
Attribute(NEGATE_KEY,java.lang.String,Private,Y,Y,);
Attribute(regexps,java.util.Vector,Private,N,N,);
Attribute(line,java.lang.String,Private,N,N,);
Attribute(negate,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(read,int,Public,N,N);
Method(addConfiguredRegexp,void,Public,N,N);
Method(setRegexps,void,Private,N,N);
Method(getRegexps,java.util.Vector,Private,N,N);
Method(chain,java.io.Reader,Public,N,N);
Method(setNegate,void,Public,N,N);
Method(isNegated,boolean,Public,N,N);
Method(initialize,void,Private,N,N);
Parameter(<init>$2,java.io.Reader,);
Parameter(addConfiguredRegexp,org.apache.tools.ant.types.RegularExpression,);
Parameter(setRegexps,java.util.Vector,);
Parameter(chain,java.io.Reader,);
Parameter(setNegate,boolean,);
SuperClass(org.apache.tools.ant.filters.BaseParamFilterReader);
SuperClass(org.apache.tools.ant.filters.BaseFilterReader);
Generalization(org.apache.tools.ant.filters.BaseParamFilterReader);
Realization(org.apache.tools.ant.filters.ChainableReader);
Call(METHOD,org.apache.tools.ant.filters.LineContainsRegExp,read --> initialize,org.apache.tools.ant.filters.LineContainsRegExp,);
Call(METHOD,org.apache.tools.ant.filters.LineContainsRegExp,read --> isNegated,org.apache.tools.ant.filters.LineContainsRegExp,);
Call(METHOD,org.apache.tools.ant.filters.LineContainsRegExp,read --> read,org.apache.tools.ant.filters.LineContainsRegExp,);
Call(METHOD,org.apache.tools.ant.filters.LineContainsRegExp,chain --> <init>$2,org.apache.tools.ant.filters.LineContainsRegExp,);
Call(METHOD,org.apache.tools.ant.filters.LineContainsRegExp,chain --> getRegexps,org.apache.tools.ant.filters.LineContainsRegExp,);
Call(METHOD,org.apache.tools.ant.filters.LineContainsRegExp,chain --> setRegexps,org.apache.tools.ant.filters.LineContainsRegExp,);
Call(METHOD,org.apache.tools.ant.filters.LineContainsRegExp,chain --> isNegated,org.apache.tools.ant.filters.LineContainsRegExp,);
Call(METHOD,org.apache.tools.ant.filters.LineContainsRegExp,chain --> setNegate,org.apache.tools.ant.filters.LineContainsRegExp,);
Call(METHOD,org.apache.tools.ant.filters.LineContainsRegExp,initialize --> setNegate,org.apache.tools.ant.filters.LineContainsRegExp,);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContainsRegExp,<init> --> regexps,org.apache.tools.ant.filters.LineContainsRegExp,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContainsRegExp,<init> --> line,org.apache.tools.ant.filters.LineContainsRegExp,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContainsRegExp,<init> --> negate,org.apache.tools.ant.filters.LineContainsRegExp,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContainsRegExp,<init>$2 --> regexps,org.apache.tools.ant.filters.LineContainsRegExp,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContainsRegExp,<init>$2 --> line,org.apache.tools.ant.filters.LineContainsRegExp,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContainsRegExp,<init>$2 --> negate,org.apache.tools.ant.filters.LineContainsRegExp,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContainsRegExp,read --> line,org.apache.tools.ant.filters.LineContainsRegExp,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContainsRegExp,read --> regexps,org.apache.tools.ant.filters.LineContainsRegExp,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContainsRegExp,read --> line,org.apache.tools.ant.filters.LineContainsRegExp,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContainsRegExp,addConfiguredRegexp --> regexps,org.apache.tools.ant.filters.LineContainsRegExp,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContainsRegExp,setRegexps --> regexps,org.apache.tools.ant.filters.LineContainsRegExp,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContainsRegExp,getRegexps --> regexps,org.apache.tools.ant.filters.LineContainsRegExp,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContainsRegExp,setNegate --> negate,org.apache.tools.ant.filters.LineContainsRegExp,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContainsRegExp,isNegated --> negate,org.apache.tools.ant.filters.LineContainsRegExp,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContainsRegExp,initialize --> regexps,org.apache.tools.ant.filters.LineContainsRegExp,READ);
Call(METHOD,org.apache.tools.ant.filters.LineContainsRegExp,<init> --> <init>,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.LineContainsRegExp,<init>$2 --> <init>$2,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.LineContainsRegExp,read --> getInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.LineContainsRegExp,read --> setInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.LineContainsRegExp,read --> readLine,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.LineContainsRegExp,read --> getProject,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.LineContainsRegExp,read --> getRegexp,org.apache.tools.ant.types.RegularExpression,);
Call(METHOD,org.apache.tools.ant.filters.LineContainsRegExp,read --> matches,org.apache.tools.ant.util.regexp.RegexpMatcher,);
Call(METHOD,org.apache.tools.ant.filters.LineContainsRegExp,initialize --> getParameters,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.LineContainsRegExp,initialize --> getType,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.filters.LineContainsRegExp,initialize --> getValue,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.filters.LineContainsRegExp,initialize --> <init>,org.apache.tools.ant.types.RegularExpression,);
Call(METHOD,org.apache.tools.ant.filters.LineContainsRegExp,initialize --> setPattern$2,org.apache.tools.ant.types.RegularExpression,);
Call(METHOD,org.apache.tools.ant.filters.LineContainsRegExp,initialize --> toBoolean,org.apache.tools.ant.Project,);
EndClass 201
StartClass 202
Class(org.apache.tools.ant.filters.PrefixLines,N,N,Public);
Attribute(PREFIX_KEY,java.lang.String,Private,Y,Y,);
Attribute(prefix,java.lang.String,Private,N,N,);
Attribute(queuedData,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(read,int,Public,N,N);
Method(setPrefix,void,Public,N,N);
Method(getPrefix,java.lang.String,Private,N,N);
Method(chain,java.io.Reader,Public,N,N);
Method(initialize,void,Private,N,N);
Parameter(<init>$2,java.io.Reader,);
Parameter(setPrefix,java.lang.String,);
Parameter(chain,java.io.Reader,);
SuperClass(org.apache.tools.ant.filters.BaseParamFilterReader);
SuperClass(org.apache.tools.ant.filters.BaseFilterReader);
Generalization(org.apache.tools.ant.filters.BaseParamFilterReader);
Realization(org.apache.tools.ant.filters.ChainableReader);
Call(METHOD,org.apache.tools.ant.filters.PrefixLines,read --> initialize,org.apache.tools.ant.filters.PrefixLines,);
Call(METHOD,org.apache.tools.ant.filters.PrefixLines,read --> read,org.apache.tools.ant.filters.PrefixLines,);
Call(METHOD,org.apache.tools.ant.filters.PrefixLines,chain --> <init>$2,org.apache.tools.ant.filters.PrefixLines,);
Call(METHOD,org.apache.tools.ant.filters.PrefixLines,chain --> getPrefix,org.apache.tools.ant.filters.PrefixLines,);
Call(METHOD,org.apache.tools.ant.filters.PrefixLines,chain --> setPrefix,org.apache.tools.ant.filters.PrefixLines,);
Call(ATTRIBUTE,org.apache.tools.ant.filters.PrefixLines,<init> --> prefix,org.apache.tools.ant.filters.PrefixLines,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.PrefixLines,<init> --> queuedData,org.apache.tools.ant.filters.PrefixLines,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.PrefixLines,<init>$2 --> prefix,org.apache.tools.ant.filters.PrefixLines,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.PrefixLines,<init>$2 --> queuedData,org.apache.tools.ant.filters.PrefixLines,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.PrefixLines,read --> queuedData,org.apache.tools.ant.filters.PrefixLines,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.PrefixLines,read --> prefix,org.apache.tools.ant.filters.PrefixLines,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.PrefixLines,read --> queuedData,org.apache.tools.ant.filters.PrefixLines,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.PrefixLines,setPrefix --> prefix,org.apache.tools.ant.filters.PrefixLines,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.PrefixLines,getPrefix --> prefix,org.apache.tools.ant.filters.PrefixLines,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.PrefixLines,initialize --> prefix,org.apache.tools.ant.filters.PrefixLines,WRITE);
Call(METHOD,org.apache.tools.ant.filters.PrefixLines,<init> --> <init>,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.PrefixLines,<init>$2 --> <init>$2,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.PrefixLines,read --> getInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.PrefixLines,read --> setInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.PrefixLines,read --> readLine,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.PrefixLines,chain --> setInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.PrefixLines,initialize --> getParameters,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.PrefixLines,initialize --> getName,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.filters.PrefixLines,initialize --> getValue,org.apache.tools.ant.types.Parameter,);
EndClass 202
StartClass 203
Class(org.apache.tools.ant.filters.ReplaceTokens,N,N,Public);
Attribute(DEFAULT_BEGIN_TOKEN,char,Private,Y,Y,);
Attribute(DEFAULT_END_TOKEN,char,Private,Y,Y,);
Attribute(queuedData,java.lang.String,Private,N,N,);
Attribute(replaceData,java.lang.String,Private,N,N,);
Attribute(replaceIndex,int,Private,N,N,);
Attribute(queueIndex,int,Private,N,N,);
Attribute(hash,java.util.Hashtable,Private,N,N,);
Attribute(beginToken,char,Private,N,N,);
Attribute(endToken,char,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getNextChar,int,Private,N,N);
Method(read,int,Public,N,N);
Method(setBeginToken,void,Public,N,N);
Method(getBeginToken,char,Private,N,N);
Method(setEndToken,void,Public,N,N);
Method(getEndToken,char,Private,N,N);
Method(addConfiguredToken,void,Public,N,N);
Method(getPropertiesFromFile,java.util.Properties,Private,N,N);
Method(setTokens,void,Private,N,N);
Method(getTokens,java.util.Hashtable,Private,N,N);
Method(chain,java.io.Reader,Public,N,N);
Method(initialize,void,Private,N,N);
Parameter(<init>$2,java.io.Reader,);
Parameter(setBeginToken,char,);
Parameter(setEndToken,char,);
Parameter(addConfiguredToken,org.apache.tools.ant.filters.ReplaceTokens$Token,);
Parameter(getPropertiesFromFile,java.lang.String,);
Parameter(setTokens,java.util.Hashtable,);
Parameter(chain,java.io.Reader,);
SuperClass(org.apache.tools.ant.filters.BaseParamFilterReader);
SuperClass(org.apache.tools.ant.filters.BaseFilterReader);
Generalization(org.apache.tools.ant.filters.BaseParamFilterReader);
Realization(org.apache.tools.ant.filters.ChainableReader);
Call(METHOD,org.apache.tools.ant.filters.ReplaceTokens,read --> initialize,org.apache.tools.ant.filters.ReplaceTokens,);
Call(METHOD,org.apache.tools.ant.filters.ReplaceTokens,read --> getNextChar,org.apache.tools.ant.filters.ReplaceTokens,);
Call(METHOD,org.apache.tools.ant.filters.ReplaceTokens,read --> read,org.apache.tools.ant.filters.ReplaceTokens,);
Call(METHOD,org.apache.tools.ant.filters.ReplaceTokens,chain --> <init>$2,org.apache.tools.ant.filters.ReplaceTokens,);
Call(METHOD,org.apache.tools.ant.filters.ReplaceTokens,chain --> getBeginToken,org.apache.tools.ant.filters.ReplaceTokens,);
Call(METHOD,org.apache.tools.ant.filters.ReplaceTokens,chain --> setBeginToken,org.apache.tools.ant.filters.ReplaceTokens,);
Call(METHOD,org.apache.tools.ant.filters.ReplaceTokens,chain --> getEndToken,org.apache.tools.ant.filters.ReplaceTokens,);
Call(METHOD,org.apache.tools.ant.filters.ReplaceTokens,chain --> setEndToken,org.apache.tools.ant.filters.ReplaceTokens,);
Call(METHOD,org.apache.tools.ant.filters.ReplaceTokens,chain --> getTokens,org.apache.tools.ant.filters.ReplaceTokens,);
Call(METHOD,org.apache.tools.ant.filters.ReplaceTokens,chain --> setTokens,org.apache.tools.ant.filters.ReplaceTokens,);
Call(METHOD,org.apache.tools.ant.filters.ReplaceTokens,initialize --> getPropertiesFromFile,org.apache.tools.ant.filters.ReplaceTokens,);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,<init> --> queuedData,org.apache.tools.ant.filters.ReplaceTokens,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,<init> --> replaceData,org.apache.tools.ant.filters.ReplaceTokens,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,<init> --> replaceIndex,org.apache.tools.ant.filters.ReplaceTokens,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,<init> --> queueIndex,org.apache.tools.ant.filters.ReplaceTokens,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,<init> --> hash,org.apache.tools.ant.filters.ReplaceTokens,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,<init> --> beginToken,org.apache.tools.ant.filters.ReplaceTokens,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,<init> --> endToken,org.apache.tools.ant.filters.ReplaceTokens,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,<init>$2 --> queuedData,org.apache.tools.ant.filters.ReplaceTokens,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,<init>$2 --> replaceData,org.apache.tools.ant.filters.ReplaceTokens,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,<init>$2 --> replaceIndex,org.apache.tools.ant.filters.ReplaceTokens,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,<init>$2 --> queueIndex,org.apache.tools.ant.filters.ReplaceTokens,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,<init>$2 --> hash,org.apache.tools.ant.filters.ReplaceTokens,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,<init>$2 --> beginToken,org.apache.tools.ant.filters.ReplaceTokens,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,<init>$2 --> endToken,org.apache.tools.ant.filters.ReplaceTokens,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,getNextChar --> queueIndex,org.apache.tools.ant.filters.ReplaceTokens,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,getNextChar --> queuedData,org.apache.tools.ant.filters.ReplaceTokens,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,getNextChar --> queueIndex,org.apache.tools.ant.filters.ReplaceTokens,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,read --> replaceIndex,org.apache.tools.ant.filters.ReplaceTokens,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,read --> replaceData,org.apache.tools.ant.filters.ReplaceTokens,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,read --> beginToken,org.apache.tools.ant.filters.ReplaceTokens,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,read --> endToken,org.apache.tools.ant.filters.ReplaceTokens,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,read --> queuedData,org.apache.tools.ant.filters.ReplaceTokens,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,read --> queueIndex,org.apache.tools.ant.filters.ReplaceTokens,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,read --> hash,org.apache.tools.ant.filters.ReplaceTokens,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,read --> replaceIndex,org.apache.tools.ant.filters.ReplaceTokens,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,read --> queuedData,org.apache.tools.ant.filters.ReplaceTokens,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,read --> queueIndex,org.apache.tools.ant.filters.ReplaceTokens,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,read --> replaceData,org.apache.tools.ant.filters.ReplaceTokens,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,setBeginToken --> beginToken,org.apache.tools.ant.filters.ReplaceTokens,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,getBeginToken --> beginToken,org.apache.tools.ant.filters.ReplaceTokens,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,setEndToken --> endToken,org.apache.tools.ant.filters.ReplaceTokens,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,getEndToken --> endToken,org.apache.tools.ant.filters.ReplaceTokens,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,addConfiguredToken --> hash,org.apache.tools.ant.filters.ReplaceTokens,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,setTokens --> hash,org.apache.tools.ant.filters.ReplaceTokens,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,getTokens --> hash,org.apache.tools.ant.filters.ReplaceTokens,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,initialize --> hash,org.apache.tools.ant.filters.ReplaceTokens,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,initialize --> beginToken,org.apache.tools.ant.filters.ReplaceTokens,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens,initialize --> endToken,org.apache.tools.ant.filters.ReplaceTokens,WRITE);
Call(METHOD,org.apache.tools.ant.filters.ReplaceTokens,<init> --> <init>,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.ReplaceTokens,<init>$2 --> <init>$2,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.ReplaceTokens,read --> getInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.ReplaceTokens,read --> setInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.ReplaceTokens,addConfiguredToken --> getKey,org.apache.tools.ant.filters.ReplaceTokens$Token,);
Call(METHOD,org.apache.tools.ant.filters.ReplaceTokens,addConfiguredToken --> getValue,org.apache.tools.ant.filters.ReplaceTokens$Token,);
Call(METHOD,org.apache.tools.ant.filters.ReplaceTokens,getPropertiesFromFile --> close$4,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.filters.ReplaceTokens,chain --> setInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.ReplaceTokens,initialize --> getParameters,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.ReplaceTokens,initialize --> getType,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.filters.ReplaceTokens,initialize --> getName,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.filters.ReplaceTokens,initialize --> getValue,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.filters.ReplaceTokens,initialize --> <init>$2,org.apache.tools.ant.BuildException,);
EndClass 203
StartClass 204
Class(org.apache.tools.ant.filters.StripJavaComments,N,N,Public);
Attribute(readAheadCh,int,Private,N,N,);
Attribute(inString,boolean,Private,N,N,);
Attribute(quoted,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(read,int,Public,N,N);
Method(chain,java.io.Reader,Public,N,N);
Parameter(<init>$2,java.io.Reader,);
Parameter(chain,java.io.Reader,);
SuperClass(org.apache.tools.ant.filters.BaseFilterReader);
Generalization(org.apache.tools.ant.filters.BaseFilterReader);
Realization(org.apache.tools.ant.filters.ChainableReader);
Call(METHOD,org.apache.tools.ant.filters.StripJavaComments,read --> read,org.apache.tools.ant.filters.StripJavaComments,);
Call(METHOD,org.apache.tools.ant.filters.StripJavaComments,chain --> <init>$2,org.apache.tools.ant.filters.StripJavaComments,);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripJavaComments,<init> --> readAheadCh,org.apache.tools.ant.filters.StripJavaComments,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripJavaComments,<init> --> inString,org.apache.tools.ant.filters.StripJavaComments,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripJavaComments,<init> --> quoted,org.apache.tools.ant.filters.StripJavaComments,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripJavaComments,<init>$2 --> readAheadCh,org.apache.tools.ant.filters.StripJavaComments,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripJavaComments,<init>$2 --> inString,org.apache.tools.ant.filters.StripJavaComments,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripJavaComments,<init>$2 --> quoted,org.apache.tools.ant.filters.StripJavaComments,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripJavaComments,read --> readAheadCh,org.apache.tools.ant.filters.StripJavaComments,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripJavaComments,read --> quoted,org.apache.tools.ant.filters.StripJavaComments,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripJavaComments,read --> inString,org.apache.tools.ant.filters.StripJavaComments,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripJavaComments,read --> readAheadCh,org.apache.tools.ant.filters.StripJavaComments,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripJavaComments,read --> inString,org.apache.tools.ant.filters.StripJavaComments,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripJavaComments,read --> quoted,org.apache.tools.ant.filters.StripJavaComments,WRITE);
Call(METHOD,org.apache.tools.ant.filters.StripJavaComments,<init> --> <init>,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.StripJavaComments,<init>$2 --> <init>$2,org.apache.tools.ant.filters.BaseFilterReader,);
EndClass 204
StartClass 205
Class(org.apache.tools.ant.filters.StripLineBreaks,N,N,Public);
Attribute(DEFAULT_LINE_BREAKS,java.lang.String,Private,Y,Y,);
Attribute(LINE_BREAKS_KEY,java.lang.String,Private,Y,Y,);
Attribute(lineBreaks,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(read,int,Public,N,N);
Method(setLineBreaks,void,Public,N,N);
Method(getLineBreaks,java.lang.String,Private,N,N);
Method(chain,java.io.Reader,Public,N,N);
Method(initialize,void,Private,N,N);
Parameter(<init>$2,java.io.Reader,);
Parameter(setLineBreaks,java.lang.String,);
Parameter(chain,java.io.Reader,);
SuperClass(org.apache.tools.ant.filters.BaseParamFilterReader);
SuperClass(org.apache.tools.ant.filters.BaseFilterReader);
Generalization(org.apache.tools.ant.filters.BaseParamFilterReader);
Realization(org.apache.tools.ant.filters.ChainableReader);
Call(METHOD,org.apache.tools.ant.filters.StripLineBreaks,read --> initialize,org.apache.tools.ant.filters.StripLineBreaks,);
Call(METHOD,org.apache.tools.ant.filters.StripLineBreaks,chain --> <init>$2,org.apache.tools.ant.filters.StripLineBreaks,);
Call(METHOD,org.apache.tools.ant.filters.StripLineBreaks,chain --> getLineBreaks,org.apache.tools.ant.filters.StripLineBreaks,);
Call(METHOD,org.apache.tools.ant.filters.StripLineBreaks,chain --> setLineBreaks,org.apache.tools.ant.filters.StripLineBreaks,);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripLineBreaks,<init> --> lineBreaks,org.apache.tools.ant.filters.StripLineBreaks,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripLineBreaks,<init>$2 --> lineBreaks,org.apache.tools.ant.filters.StripLineBreaks,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripLineBreaks,read --> lineBreaks,org.apache.tools.ant.filters.StripLineBreaks,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripLineBreaks,setLineBreaks --> lineBreaks,org.apache.tools.ant.filters.StripLineBreaks,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripLineBreaks,getLineBreaks --> lineBreaks,org.apache.tools.ant.filters.StripLineBreaks,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripLineBreaks,initialize --> lineBreaks,org.apache.tools.ant.filters.StripLineBreaks,WRITE);
Call(METHOD,org.apache.tools.ant.filters.StripLineBreaks,<init> --> <init>,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.StripLineBreaks,<init>$2 --> <init>$2,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.StripLineBreaks,read --> getInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.StripLineBreaks,read --> setInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.StripLineBreaks,chain --> setInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.StripLineBreaks,initialize --> getParameters,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.StripLineBreaks,initialize --> getName,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.filters.StripLineBreaks,initialize --> getValue,org.apache.tools.ant.types.Parameter,);
EndClass 205
StartClass 206
Class(org.apache.tools.ant.filters.StripLineComments,N,N,Public);
Attribute(COMMENTS_KEY,java.lang.String,Private,Y,Y,);
Attribute(comments,java.util.Vector,Private,N,N,);
Attribute(line,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(read,int,Public,N,N);
Method(addConfiguredComment,void,Public,N,N);
Method(setComments,void,Private,N,N);
Method(getComments,java.util.Vector,Private,N,N);
Method(chain,java.io.Reader,Public,N,N);
Method(initialize,void,Private,N,N);
Parameter(<init>$2,java.io.Reader,);
Parameter(addConfiguredComment,org.apache.tools.ant.filters.StripLineComments$Comment,);
Parameter(setComments,java.util.Vector,);
Parameter(chain,java.io.Reader,);
SuperClass(org.apache.tools.ant.filters.BaseParamFilterReader);
SuperClass(org.apache.tools.ant.filters.BaseFilterReader);
Generalization(org.apache.tools.ant.filters.BaseParamFilterReader);
Realization(org.apache.tools.ant.filters.ChainableReader);
Call(METHOD,org.apache.tools.ant.filters.StripLineComments,read --> initialize,org.apache.tools.ant.filters.StripLineComments,);
Call(METHOD,org.apache.tools.ant.filters.StripLineComments,read --> read,org.apache.tools.ant.filters.StripLineComments,);
Call(METHOD,org.apache.tools.ant.filters.StripLineComments,chain --> <init>$2,org.apache.tools.ant.filters.StripLineComments,);
Call(METHOD,org.apache.tools.ant.filters.StripLineComments,chain --> getComments,org.apache.tools.ant.filters.StripLineComments,);
Call(METHOD,org.apache.tools.ant.filters.StripLineComments,chain --> setComments,org.apache.tools.ant.filters.StripLineComments,);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripLineComments,<init> --> comments,org.apache.tools.ant.filters.StripLineComments,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripLineComments,<init> --> line,org.apache.tools.ant.filters.StripLineComments,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripLineComments,<init>$2 --> comments,org.apache.tools.ant.filters.StripLineComments,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripLineComments,<init>$2 --> line,org.apache.tools.ant.filters.StripLineComments,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripLineComments,read --> line,org.apache.tools.ant.filters.StripLineComments,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripLineComments,read --> comments,org.apache.tools.ant.filters.StripLineComments,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripLineComments,read --> line,org.apache.tools.ant.filters.StripLineComments,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripLineComments,addConfiguredComment --> comments,org.apache.tools.ant.filters.StripLineComments,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripLineComments,setComments --> comments,org.apache.tools.ant.filters.StripLineComments,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripLineComments,getComments --> comments,org.apache.tools.ant.filters.StripLineComments,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripLineComments,initialize --> comments,org.apache.tools.ant.filters.StripLineComments,READ);
Call(METHOD,org.apache.tools.ant.filters.StripLineComments,<init> --> <init>,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.StripLineComments,<init>$2 --> <init>$2,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.StripLineComments,read --> getInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.StripLineComments,read --> setInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.StripLineComments,read --> readLine,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.StripLineComments,addConfiguredComment --> getValue,org.apache.tools.ant.filters.StripLineComments$Comment,);
Call(METHOD,org.apache.tools.ant.filters.StripLineComments,chain --> setInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.StripLineComments,initialize --> getParameters,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.StripLineComments,initialize --> getType,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.filters.StripLineComments,initialize --> getValue,org.apache.tools.ant.types.Parameter,);
EndClass 206
StartClass 207
Class(org.apache.tools.ant.filters.TabsToSpaces,N,N,Public);
Attribute(DEFAULT_TAB_LENGTH,int,Private,Y,Y,);
Attribute(TAB_LENGTH_KEY,java.lang.String,Private,Y,Y,);
Attribute(tabLength,int,Private,N,N,);
Attribute(spacesRemaining,int,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(read,int,Public,N,N);
Method(setTablength,void,Public,N,N);
Method(getTablength,int,Private,N,N);
Method(chain,java.io.Reader,Public,N,N);
Method(initialize,void,Private,N,N);
Parameter(<init>$2,java.io.Reader,);
Parameter(setTablength,int,);
Parameter(chain,java.io.Reader,);
SuperClass(org.apache.tools.ant.filters.BaseParamFilterReader);
SuperClass(org.apache.tools.ant.filters.BaseFilterReader);
Generalization(org.apache.tools.ant.filters.BaseParamFilterReader);
Realization(org.apache.tools.ant.filters.ChainableReader);
Call(METHOD,org.apache.tools.ant.filters.TabsToSpaces,read --> initialize,org.apache.tools.ant.filters.TabsToSpaces,);
Call(METHOD,org.apache.tools.ant.filters.TabsToSpaces,chain --> <init>$2,org.apache.tools.ant.filters.TabsToSpaces,);
Call(METHOD,org.apache.tools.ant.filters.TabsToSpaces,chain --> getTablength,org.apache.tools.ant.filters.TabsToSpaces,);
Call(METHOD,org.apache.tools.ant.filters.TabsToSpaces,chain --> setTablength,org.apache.tools.ant.filters.TabsToSpaces,);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TabsToSpaces,<init> --> tabLength,org.apache.tools.ant.filters.TabsToSpaces,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TabsToSpaces,<init> --> spacesRemaining,org.apache.tools.ant.filters.TabsToSpaces,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TabsToSpaces,<init>$2 --> tabLength,org.apache.tools.ant.filters.TabsToSpaces,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TabsToSpaces,<init>$2 --> spacesRemaining,org.apache.tools.ant.filters.TabsToSpaces,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TabsToSpaces,read --> spacesRemaining,org.apache.tools.ant.filters.TabsToSpaces,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TabsToSpaces,read --> tabLength,org.apache.tools.ant.filters.TabsToSpaces,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TabsToSpaces,read --> spacesRemaining,org.apache.tools.ant.filters.TabsToSpaces,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TabsToSpaces,setTablength --> tabLength,org.apache.tools.ant.filters.TabsToSpaces,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TabsToSpaces,getTablength --> tabLength,org.apache.tools.ant.filters.TabsToSpaces,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TabsToSpaces,initialize --> tabLength,org.apache.tools.ant.filters.TabsToSpaces,WRITE);
Call(METHOD,org.apache.tools.ant.filters.TabsToSpaces,<init> --> <init>,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.TabsToSpaces,<init>$2 --> <init>$2,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.TabsToSpaces,read --> getInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.TabsToSpaces,read --> setInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.TabsToSpaces,chain --> setInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.TabsToSpaces,initialize --> getParameters,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.TabsToSpaces,initialize --> getName,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.filters.TabsToSpaces,initialize --> getValue,org.apache.tools.ant.types.Parameter,);
EndClass 207
StartClass 208
Class(org.apache.tools.ant.filters.TailFilter,N,N,Public);
Attribute(LINES_KEY,java.lang.String,Private,Y,Y,);
Attribute(SKIP_KEY,java.lang.String,Private,Y,Y,);
Attribute(DEFAULT_NUM_LINES,int,Private,Y,Y,);
Attribute(lines,long,Private,N,N,);
Attribute(skip,long,Private,N,N,);
Attribute(completedReadAhead,boolean,Private,N,N,);
Attribute(lineTokenizer,org.apache.tools.ant.util.LineTokenizer,Private,N,N,);
Attribute(line,java.lang.String,Private,N,N,);
Attribute(linePos,int,Private,N,N,);
Attribute(lineList,java.util.LinkedList,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(read,int,Public,N,N);
Method(setLines,void,Public,N,N);
Method(getLines,long,Private,N,N);
Method(setSkip,void,Public,N,N);
Method(getSkip,long,Private,N,N);
Method(chain,java.io.Reader,Public,N,N);
Method(initialize,void,Private,N,N);
Method(tailFilter,java.lang.String,Private,N,N);
Parameter(<init>$2,java.io.Reader,);
Parameter(setLines,long,);
Parameter(setSkip,long,);
Parameter(chain,java.io.Reader,);
Parameter(tailFilter,java.lang.String,);
SuperClass(org.apache.tools.ant.filters.BaseParamFilterReader);
SuperClass(org.apache.tools.ant.filters.BaseFilterReader);
Generalization(org.apache.tools.ant.filters.BaseParamFilterReader);
Realization(org.apache.tools.ant.filters.ChainableReader);
Composition(org.apache.tools.ant.util.LineTokenizer);
Call(METHOD,org.apache.tools.ant.filters.TailFilter,read --> initialize,org.apache.tools.ant.filters.TailFilter,);
Call(METHOD,org.apache.tools.ant.filters.TailFilter,read --> tailFilter,org.apache.tools.ant.filters.TailFilter,);
Call(METHOD,org.apache.tools.ant.filters.TailFilter,chain --> <init>$2,org.apache.tools.ant.filters.TailFilter,);
Call(METHOD,org.apache.tools.ant.filters.TailFilter,chain --> getLines,org.apache.tools.ant.filters.TailFilter,);
Call(METHOD,org.apache.tools.ant.filters.TailFilter,chain --> setLines,org.apache.tools.ant.filters.TailFilter,);
Call(METHOD,org.apache.tools.ant.filters.TailFilter,chain --> getSkip,org.apache.tools.ant.filters.TailFilter,);
Call(METHOD,org.apache.tools.ant.filters.TailFilter,chain --> setSkip,org.apache.tools.ant.filters.TailFilter,);
Call(METHOD,org.apache.tools.ant.filters.TailFilter,initialize --> setLines,org.apache.tools.ant.filters.TailFilter,);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,<init> --> lines,org.apache.tools.ant.filters.TailFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,<init> --> skip,org.apache.tools.ant.filters.TailFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,<init> --> completedReadAhead,org.apache.tools.ant.filters.TailFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,<init> --> lineTokenizer,org.apache.tools.ant.filters.TailFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,<init> --> line,org.apache.tools.ant.filters.TailFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,<init> --> linePos,org.apache.tools.ant.filters.TailFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,<init> --> lineList,org.apache.tools.ant.filters.TailFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,<init>$2 --> lineTokenizer,org.apache.tools.ant.filters.TailFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,<init>$2 --> lines,org.apache.tools.ant.filters.TailFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,<init>$2 --> skip,org.apache.tools.ant.filters.TailFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,<init>$2 --> completedReadAhead,org.apache.tools.ant.filters.TailFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,<init>$2 --> lineTokenizer,org.apache.tools.ant.filters.TailFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,<init>$2 --> line,org.apache.tools.ant.filters.TailFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,<init>$2 --> linePos,org.apache.tools.ant.filters.TailFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,<init>$2 --> lineList,org.apache.tools.ant.filters.TailFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,read --> line,org.apache.tools.ant.filters.TailFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,read --> lineTokenizer,org.apache.tools.ant.filters.TailFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,read --> linePos,org.apache.tools.ant.filters.TailFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,read --> line,org.apache.tools.ant.filters.TailFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,read --> linePos,org.apache.tools.ant.filters.TailFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,setLines --> lines,org.apache.tools.ant.filters.TailFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,getLines --> lines,org.apache.tools.ant.filters.TailFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,setSkip --> skip,org.apache.tools.ant.filters.TailFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,getSkip --> skip,org.apache.tools.ant.filters.TailFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,initialize --> skip,org.apache.tools.ant.filters.TailFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,tailFilter --> completedReadAhead,org.apache.tools.ant.filters.TailFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,tailFilter --> lineList,org.apache.tools.ant.filters.TailFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,tailFilter --> lines,org.apache.tools.ant.filters.TailFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,tailFilter --> skip,org.apache.tools.ant.filters.TailFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TailFilter,tailFilter --> completedReadAhead,org.apache.tools.ant.filters.TailFilter,WRITE);
Call(METHOD,org.apache.tools.ant.filters.TailFilter,<init> --> <init>,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.TailFilter,<init>$2 --> <init>$2,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.TailFilter,<init>$2 --> <init>,org.apache.tools.ant.util.LineTokenizer,);
Call(METHOD,org.apache.tools.ant.filters.TailFilter,<init>$2 --> setIncludeDelims,org.apache.tools.ant.util.LineTokenizer,);
Call(METHOD,org.apache.tools.ant.filters.TailFilter,read --> getInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.TailFilter,read --> setInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.TailFilter,read --> getToken,org.apache.tools.ant.util.LineTokenizer,);
Call(METHOD,org.apache.tools.ant.filters.TailFilter,chain --> setInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.TailFilter,initialize --> getParameters,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.TailFilter,initialize --> getName,org.apache.tools.ant.types.Parameter,);
Call(METHOD,org.apache.tools.ant.filters.TailFilter,initialize --> getValue,org.apache.tools.ant.types.Parameter,);
EndClass 208
StartClass 209
Class(org.apache.tools.ant.filters.EscapeUnicode,N,N,Public);
Attribute(unicodeBuf,java.lang.StringBuffer,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(read,int,Public,N,N);
Method(chain,java.io.Reader,Public,N,N);
Method(initialize,void,Private,N,N);
Parameter(<init>$2,java.io.Reader,);
Parameter(chain,java.io.Reader,);
SuperClass(org.apache.tools.ant.filters.BaseParamFilterReader);
SuperClass(org.apache.tools.ant.filters.BaseFilterReader);
Generalization(org.apache.tools.ant.filters.BaseParamFilterReader);
Realization(org.apache.tools.ant.filters.ChainableReader);
Call(METHOD,org.apache.tools.ant.filters.EscapeUnicode,read --> initialize,org.apache.tools.ant.filters.EscapeUnicode,);
Call(METHOD,org.apache.tools.ant.filters.EscapeUnicode,chain --> <init>$2,org.apache.tools.ant.filters.EscapeUnicode,);
Call(ATTRIBUTE,org.apache.tools.ant.filters.EscapeUnicode,<init> --> unicodeBuf,org.apache.tools.ant.filters.EscapeUnicode,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.EscapeUnicode,<init>$2 --> unicodeBuf,org.apache.tools.ant.filters.EscapeUnicode,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.EscapeUnicode,read --> unicodeBuf,org.apache.tools.ant.filters.EscapeUnicode,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.EscapeUnicode,read --> unicodeBuf,org.apache.tools.ant.filters.EscapeUnicode,WRITE);
Call(METHOD,org.apache.tools.ant.filters.EscapeUnicode,<init> --> <init>,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.EscapeUnicode,<init>$2 --> <init>$2,org.apache.tools.ant.filters.BaseParamFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.EscapeUnicode,read --> getInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.EscapeUnicode,read --> setInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.EscapeUnicode,chain --> setInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
EndClass 209
StartClass 210
Class(org.apache.tools.ant.filters.TokenFilter,N,N,Public);
Attribute(filters,java.util.Vector,Private,N,N,);
Attribute(tokenizer,org.apache.tools.ant.util.Tokenizer,Private,N,N,);
Attribute(delimOutput,java.lang.String,Private,N,N,);
Attribute(line,java.lang.String,Private,N,N,);
Attribute(linePos,int,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(read,int,Public,N,N);
Method(chain,java.io.Reader,Public,N,N);
Method(setDelimOutput,void,Public,N,N);
Method(addLineTokenizer,void,Public,N,N);
Method(addStringTokenizer,void,Public,N,N);
Method(addFileTokenizer,void,Public,N,N);
Method(add,void,Public,N,N);
Method(addReplaceString,void,Public,N,N);
Method(addContainsString,void,Public,N,N);
Method(addReplaceRegex,void,Public,N,N);
Method(addContainsRegex,void,Public,N,N);
Method(addTrim,void,Public,N,N);
Method(addIgnoreBlank,void,Public,N,N);
Method(addDeleteCharacters,void,Public,N,N);
Method(add$2,void,Public,N,N);
Method(resolveBackSlash,java.lang.String,Public,Y,N);
Method(convertRegexOptions,int,Public,Y,N);
Parameter(<init>$2,java.io.Reader,);
Parameter(chain,java.io.Reader,);
Parameter(setDelimOutput,java.lang.String,);
Parameter(addLineTokenizer,org.apache.tools.ant.util.LineTokenizer,);
Parameter(addStringTokenizer,org.apache.tools.ant.filters.TokenFilter$StringTokenizer,);
Parameter(addFileTokenizer,org.apache.tools.ant.filters.TokenFilter$FileTokenizer,);
Parameter(add,org.apache.tools.ant.util.Tokenizer,);
Parameter(addReplaceString,org.apache.tools.ant.filters.TokenFilter$ReplaceString,);
Parameter(addContainsString,org.apache.tools.ant.filters.TokenFilter$ContainsString,);
Parameter(addReplaceRegex,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,);
Parameter(addContainsRegex,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,);
Parameter(addTrim,org.apache.tools.ant.filters.TokenFilter$Trim,);
Parameter(addIgnoreBlank,org.apache.tools.ant.filters.TokenFilter$IgnoreBlank,);
Parameter(addDeleteCharacters,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters,);
Parameter(add$2,org.apache.tools.ant.filters.TokenFilter$Filter,);
Parameter(resolveBackSlash,java.lang.String,);
Parameter(convertRegexOptions,java.lang.String,);
SuperClass(org.apache.tools.ant.filters.BaseFilterReader);
Generalization(org.apache.tools.ant.filters.BaseFilterReader);
Realization(org.apache.tools.ant.filters.ChainableReader);
Composition(org.apache.tools.ant.util.Tokenizer);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter,chain --> <init>$2,org.apache.tools.ant.filters.TokenFilter,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter,setDelimOutput --> resolveBackSlash,org.apache.tools.ant.filters.TokenFilter,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter,addLineTokenizer --> add,org.apache.tools.ant.filters.TokenFilter,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter,addStringTokenizer --> add,org.apache.tools.ant.filters.TokenFilter,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter,addFileTokenizer --> add,org.apache.tools.ant.filters.TokenFilter,);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,<init> --> filters,org.apache.tools.ant.filters.TokenFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,<init> --> tokenizer,org.apache.tools.ant.filters.TokenFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,<init> --> delimOutput,org.apache.tools.ant.filters.TokenFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,<init> --> line,org.apache.tools.ant.filters.TokenFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,<init> --> linePos,org.apache.tools.ant.filters.TokenFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,<init>$2 --> filters,org.apache.tools.ant.filters.TokenFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,<init>$2 --> tokenizer,org.apache.tools.ant.filters.TokenFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,<init>$2 --> delimOutput,org.apache.tools.ant.filters.TokenFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,<init>$2 --> line,org.apache.tools.ant.filters.TokenFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,<init>$2 --> linePos,org.apache.tools.ant.filters.TokenFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,read --> tokenizer,org.apache.tools.ant.filters.TokenFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,read --> line,org.apache.tools.ant.filters.TokenFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,read --> filters,org.apache.tools.ant.filters.TokenFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,read --> delimOutput,org.apache.tools.ant.filters.TokenFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,read --> linePos,org.apache.tools.ant.filters.TokenFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,read --> tokenizer,org.apache.tools.ant.filters.TokenFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,read --> line,org.apache.tools.ant.filters.TokenFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,read --> linePos,org.apache.tools.ant.filters.TokenFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,chain --> filters,org.apache.tools.ant.filters.TokenFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,chain --> tokenizer,org.apache.tools.ant.filters.TokenFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,chain --> delimOutput,org.apache.tools.ant.filters.TokenFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,chain --> filters,org.apache.tools.ant.filters.TokenFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,chain --> tokenizer,org.apache.tools.ant.filters.TokenFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,chain --> delimOutput,org.apache.tools.ant.filters.TokenFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,setDelimOutput --> delimOutput,org.apache.tools.ant.filters.TokenFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,add --> tokenizer,org.apache.tools.ant.filters.TokenFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,add --> tokenizer,org.apache.tools.ant.filters.TokenFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,addReplaceString --> filters,org.apache.tools.ant.filters.TokenFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,addContainsString --> filters,org.apache.tools.ant.filters.TokenFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,addReplaceRegex --> filters,org.apache.tools.ant.filters.TokenFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,addContainsRegex --> filters,org.apache.tools.ant.filters.TokenFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,addTrim --> filters,org.apache.tools.ant.filters.TokenFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,addIgnoreBlank --> filters,org.apache.tools.ant.filters.TokenFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,addDeleteCharacters --> filters,org.apache.tools.ant.filters.TokenFilter,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter,add$2 --> filters,org.apache.tools.ant.filters.TokenFilter,READ);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter,<init> --> <init>,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter,<init>$2 --> <init>$2,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter,read --> <init>,org.apache.tools.ant.util.LineTokenizer,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter,read --> getToken,org.apache.tools.ant.util.Tokenizer,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter,read --> filter,org.apache.tools.ant.filters.TokenFilter$Filter,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter,read --> getPostToken,org.apache.tools.ant.util.Tokenizer,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter,chain --> getProject,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter,chain --> setProject,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter,add --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter,resolveBackSlash --> resolveBackSlash,org.apache.tools.ant.util.StringUtils,);
EndClass 210
StartClass 211
Class(org.apache.tools.ant.filters.TokenFilter$DeleteCharacters,N,N,Public);
Attribute(deleteChars,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setChars,void,Public,N,N);
Method(filter,java.lang.String,Public,N,N);
Method(chain,java.io.Reader,Public,N,N);
Method(isDeleteCharacter,boolean,Private,N,N);
Method(access$000,boolean,Public,Y,N);
Parameter(setChars,java.lang.String,);
Parameter(filter,java.lang.String,);
Parameter(chain,java.io.Reader,);
Parameter(isDeleteCharacter,char,);
Parameter(access$000,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters,);
Parameter(access$000,char,);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.ProjectComponent);
Realization(org.apache.tools.ant.filters.TokenFilter$Filter);
Realization(org.apache.tools.ant.filters.ChainableReader);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters,filter --> isDeleteCharacter,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters,access$000 --> isDeleteCharacter,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters,);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters,<init> --> deleteChars,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters,setChars --> deleteChars,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters,isDeleteCharacter --> deleteChars,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters,READ);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters,<init> --> <init>,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters,setChars --> resolveBackSlash,org.apache.tools.ant.filters.TokenFilter,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters,chain --> <init>,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1,);
EndClass 211
StartClass 212
Class(org.apache.tools.ant.filters.TokenFilter$ContainsRegex,N,N,Public);
Attribute(from,java.lang.String,Private,N,N,);
Attribute(to,java.lang.String,Private,N,N,);
Attribute(regularExpression,org.apache.tools.ant.types.RegularExpression,Private,N,N,);
Attribute(substitution,org.apache.tools.ant.types.Substitution,Private,N,N,);
Attribute(initialized,boolean,Private,N,N,);
Attribute(flags,java.lang.String,Private,N,N,);
Attribute(options,int,Private,N,N,);
Attribute(regexp,org.apache.tools.ant.util.regexp.Regexp,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setPattern,void,Public,N,N);
Method(setReplace,void,Public,N,N);
Method(setFlags,void,Public,N,N);
Method(initialize,void,Private,N,N);
Method(filter,java.lang.String,Public,N,N);
Parameter(setPattern,java.lang.String,);
Parameter(setReplace,java.lang.String,);
Parameter(setFlags,java.lang.String,);
Parameter(filter,java.lang.String,);
SuperClass(org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter);
Composition(org.apache.tools.ant.types.RegularExpression);
Composition(org.apache.tools.ant.types.Substitution);
Composition(org.apache.tools.ant.util.regexp.Regexp);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,filter --> initialize,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,<init> --> initialized,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,<init> --> flags,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,setPattern --> from,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,setReplace --> to,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,setFlags --> flags,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,initialize --> initialized,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,initialize --> flags,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,initialize --> from,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,initialize --> regularExpression,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,initialize --> to,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,initialize --> substitution,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,initialize --> options,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,initialize --> regularExpression,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,initialize --> regexp,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,initialize --> substitution,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,filter --> regexp,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,filter --> options,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,filter --> substitution,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,READ);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,<init> --> <init>,org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,initialize --> convertRegexOptions,org.apache.tools.ant.filters.TokenFilter,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,initialize --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,initialize --> <init>,org.apache.tools.ant.types.RegularExpression,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,initialize --> setPattern$2,org.apache.tools.ant.types.RegularExpression,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,initialize --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,initialize --> getRegexp,org.apache.tools.ant.types.RegularExpression,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,initialize --> <init>,org.apache.tools.ant.types.Substitution,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,initialize --> setExpression,org.apache.tools.ant.types.Substitution,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,filter --> matches$2,org.apache.tools.ant.util.regexp.RegexpMatcher,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,filter --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,filter --> getExpression,org.apache.tools.ant.types.Substitution,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ContainsRegex,filter --> substitute,org.apache.tools.ant.util.regexp.Regexp,);
EndClass 212
StartClass 213
Class(org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,N,N,Public);
Attribute(from,java.lang.String,Private,N,N,);
Attribute(to,java.lang.String,Private,N,N,);
Attribute(regularExpression,org.apache.tools.ant.types.RegularExpression,Private,N,N,);
Attribute(substitution,org.apache.tools.ant.types.Substitution,Private,N,N,);
Attribute(initialized,boolean,Private,N,N,);
Attribute(flags,java.lang.String,Private,N,N,);
Attribute(options,int,Private,N,N,);
Attribute(regexp,org.apache.tools.ant.util.regexp.Regexp,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setPattern,void,Public,N,N);
Method(setReplace,void,Public,N,N);
Method(setFlags,void,Public,N,N);
Method(initialize,void,Private,N,N);
Method(filter,java.lang.String,Public,N,N);
Parameter(setPattern,java.lang.String,);
Parameter(setReplace,java.lang.String,);
Parameter(setFlags,java.lang.String,);
Parameter(filter,java.lang.String,);
SuperClass(org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter);
Composition(org.apache.tools.ant.types.RegularExpression);
Composition(org.apache.tools.ant.types.Substitution);
Composition(org.apache.tools.ant.util.regexp.Regexp);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,filter --> initialize,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,<init> --> initialized,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,<init> --> flags,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,setPattern --> from,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,setReplace --> to,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,setFlags --> flags,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,initialize --> initialized,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,initialize --> flags,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,initialize --> from,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,initialize --> regularExpression,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,initialize --> to,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,initialize --> substitution,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,initialize --> options,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,initialize --> regularExpression,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,initialize --> regexp,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,initialize --> to,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,initialize --> substitution,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,filter --> regexp,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,filter --> options,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,filter --> substitution,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,READ);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,<init> --> <init>,org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,initialize --> convertRegexOptions,org.apache.tools.ant.filters.TokenFilter,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,initialize --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,initialize --> <init>,org.apache.tools.ant.types.RegularExpression,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,initialize --> setPattern$2,org.apache.tools.ant.types.RegularExpression,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,initialize --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,initialize --> getRegexp,org.apache.tools.ant.types.RegularExpression,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,initialize --> <init>,org.apache.tools.ant.types.Substitution,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,initialize --> setExpression,org.apache.tools.ant.types.Substitution,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,filter --> matches$2,org.apache.tools.ant.util.regexp.RegexpMatcher,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,filter --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,filter --> getExpression,org.apache.tools.ant.types.Substitution,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ReplaceRegex,filter --> substitute,org.apache.tools.ant.util.regexp.Regexp,);
EndClass 213
StartClass 214
Class(org.apache.tools.ant.filters.TokenFilter$Trim,N,N,Public);
Method(<init>,void,Public,N,N);
Method(filter,java.lang.String,Public,N,N);
Parameter(filter,java.lang.String,);
SuperClass(org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$Trim,<init> --> <init>,org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter,);
EndClass 214
StartClass 215
Class(org.apache.tools.ant.filters.TokenFilter$ReplaceString,N,N,Public);
Attribute(from,java.lang.String,Private,N,N,);
Attribute(to,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setFrom,void,Public,N,N);
Method(setTo,void,Public,N,N);
Method(filter,java.lang.String,Public,N,N);
Parameter(setFrom,java.lang.String,);
Parameter(setTo,java.lang.String,);
Parameter(filter,java.lang.String,);
SuperClass(org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ReplaceString,setFrom --> from,org.apache.tools.ant.filters.TokenFilter$ReplaceString,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ReplaceString,setTo --> to,org.apache.tools.ant.filters.TokenFilter$ReplaceString,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ReplaceString,filter --> from,org.apache.tools.ant.filters.TokenFilter$ReplaceString,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ReplaceString,filter --> to,org.apache.tools.ant.filters.TokenFilter$ReplaceString,READ);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ReplaceString,<init> --> <init>,org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ReplaceString,filter --> <init>$2,org.apache.tools.ant.BuildException,);
EndClass 215
StartClass 216
Class(org.apache.tools.ant.filters.TokenFilter$IgnoreBlank,N,N,Public);
Method(<init>,void,Public,N,N);
Method(filter,java.lang.String,Public,N,N);
Parameter(filter,java.lang.String,);
SuperClass(org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$IgnoreBlank,<init> --> <init>,org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter,);
EndClass 216
StartClass 217
Class(org.apache.tools.ant.types.selectors.BaseExtendSelector,N,Y,Public);
Attribute(parameters,org.apache.tools.ant.types.Parameter[],Protected,N,N,);
Method(<init>,void,Public,N,N);
Method(setParameters,void,Public,N,N);
Method(getParameters,org.apache.tools.ant.types.Parameter[],Protected,N,N);
Method(isSelected,boolean,Public,N,Y);
Parameter(setParameters,org.apache.tools.ant.types.Parameter[],);
Parameter(isSelected,java.io.File,);
Parameter(isSelected,java.lang.String,);
Parameter(isSelected,java.io.File,);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelector);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
SubClass(org.apache.tools.ant.types.selectors.DateSelector);
SubClass(org.apache.tools.ant.types.selectors.SizeSelector);
SubClass(org.apache.tools.ant.types.selectors.FilenameSelector);
SubClass(org.apache.tools.ant.types.selectors.TypeSelector);
SubClass(org.apache.tools.ant.types.selectors.ContainsSelector);
SubClass(org.apache.tools.ant.types.selectors.DepthSelector);
SubClass(org.apache.tools.ant.types.selectors.ContainsRegexpSelector);
SubClass(org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector);
Generalization(org.apache.tools.ant.types.selectors.BaseSelector);
Realization(org.apache.tools.ant.types.selectors.ExtendFileSelector);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.BaseExtendSelector,<init> --> parameters,org.apache.tools.ant.types.selectors.BaseExtendSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.BaseExtendSelector,setParameters --> parameters,org.apache.tools.ant.types.selectors.BaseExtendSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.BaseExtendSelector,getParameters --> parameters,org.apache.tools.ant.types.selectors.BaseExtendSelector,READ);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseExtendSelector,<init> --> <init>,org.apache.tools.ant.types.selectors.BaseSelector,);
EndClass 217
StartClass 218
Class(org.apache.tools.ant.types.selectors.BaseSelectorContainer,N,Y,Public);
Attribute(selectorsList,java.util.Vector,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(hasSelectors,boolean,Public,N,N);
Method(selectorCount,int,Public,N,N);
Method(getSelectors,org.apache.tools.ant.types.selectors.FileSelector[],Public,N,N);
Method(selectorElements,java.util.Enumeration,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(appendSelector,void,Public,N,N);
Method(validate,void,Public,N,N);
Method(isSelected,boolean,Public,N,Y);
Method(addSelector,void,Public,N,N);
Method(addAnd,void,Public,N,N);
Method(addOr,void,Public,N,N);
Method(addNot,void,Public,N,N);
Method(addNone,void,Public,N,N);
Method(addMajority,void,Public,N,N);
Method(addDate,void,Public,N,N);
Method(addSize,void,Public,N,N);
Method(addFilename,void,Public,N,N);
Method(addCustom,void,Public,N,N);
Method(addContains,void,Public,N,N);
Method(addPresent,void,Public,N,N);
Method(addDepth,void,Public,N,N);
Method(addDepend,void,Public,N,N);
Method(addDifferent,void,Public,N,N);
Method(addType,void,Public,N,N);
Method(addContainsRegexp,void,Public,N,N);
Method(addModified,void,Public,N,N);
Method(add,void,Public,N,N);
Parameter(getSelectors,org.apache.tools.ant.Project,);
Parameter(appendSelector,org.apache.tools.ant.types.selectors.FileSelector,);
Parameter(isSelected,java.io.File,);
Parameter(isSelected,java.lang.String,);
Parameter(isSelected,java.io.File,);
Parameter(addSelector,org.apache.tools.ant.types.selectors.SelectSelector,);
Parameter(addAnd,org.apache.tools.ant.types.selectors.AndSelector,);
Parameter(addOr,org.apache.tools.ant.types.selectors.OrSelector,);
Parameter(addNot,org.apache.tools.ant.types.selectors.NotSelector,);
Parameter(addNone,org.apache.tools.ant.types.selectors.NoneSelector,);
Parameter(addMajority,org.apache.tools.ant.types.selectors.MajoritySelector,);
Parameter(addDate,org.apache.tools.ant.types.selectors.DateSelector,);
Parameter(addSize,org.apache.tools.ant.types.selectors.SizeSelector,);
Parameter(addFilename,org.apache.tools.ant.types.selectors.FilenameSelector,);
Parameter(addCustom,org.apache.tools.ant.types.selectors.ExtendSelector,);
Parameter(addContains,org.apache.tools.ant.types.selectors.ContainsSelector,);
Parameter(addPresent,org.apache.tools.ant.types.selectors.PresentSelector,);
Parameter(addDepth,org.apache.tools.ant.types.selectors.DepthSelector,);
Parameter(addDepend,org.apache.tools.ant.types.selectors.DependSelector,);
Parameter(addDifferent,org.apache.tools.ant.types.selectors.DifferentSelector,);
Parameter(addType,org.apache.tools.ant.types.selectors.TypeSelector,);
Parameter(addContainsRegexp,org.apache.tools.ant.types.selectors.ContainsRegexpSelector,);
Parameter(addModified,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,);
Parameter(add,org.apache.tools.ant.types.selectors.FileSelector,);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelector);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
SubClass(org.apache.tools.ant.types.selectors.SelectSelector);
SubClass(org.apache.tools.ant.types.selectors.AndSelector);
SubClass(org.apache.tools.ant.types.selectors.OrSelector);
SubClass(org.apache.tools.ant.types.selectors.NotSelector);
SubClass(org.apache.tools.ant.types.selectors.NoneSelector);
SubClass(org.apache.tools.ant.types.selectors.MajoritySelector);
Generalization(org.apache.tools.ant.types.selectors.BaseSelector);
Realization(org.apache.tools.ant.types.selectors.SelectorContainer);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,toString --> selectorElements,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,validate --> selectorElements,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,addSelector --> appendSelector,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,addAnd --> appendSelector,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,addOr --> appendSelector,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,addNot --> appendSelector,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,addNone --> appendSelector,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,addMajority --> appendSelector,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,addDate --> appendSelector,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,addSize --> appendSelector,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,addFilename --> appendSelector,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,addCustom --> appendSelector,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,addContains --> appendSelector,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,addPresent --> appendSelector,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,addDepth --> appendSelector,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,addDepend --> appendSelector,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,addDifferent --> appendSelector,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,addType --> appendSelector,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,addContainsRegexp --> appendSelector,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,addModified --> appendSelector,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,add --> appendSelector,org.apache.tools.ant.types.selectors.BaseSelectorContainer,);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.BaseSelectorContainer,<init> --> selectorsList,org.apache.tools.ant.types.selectors.BaseSelectorContainer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.BaseSelectorContainer,hasSelectors --> selectorsList,org.apache.tools.ant.types.selectors.BaseSelectorContainer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.BaseSelectorContainer,selectorCount --> selectorsList,org.apache.tools.ant.types.selectors.BaseSelectorContainer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.BaseSelectorContainer,getSelectors --> selectorsList,org.apache.tools.ant.types.selectors.BaseSelectorContainer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.BaseSelectorContainer,selectorElements --> selectorsList,org.apache.tools.ant.types.selectors.BaseSelectorContainer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.BaseSelectorContainer,appendSelector --> selectorsList,org.apache.tools.ant.types.selectors.BaseSelectorContainer,READ);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,<init> --> <init>,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,validate --> verifySettings,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,validate --> getError,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,validate --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelectorContainer,validate --> validate,org.apache.tools.ant.types.selectors.BaseSelector,);
EndClass 218
StartClass 219
Class(org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector$CacheName,N,N,Public);
Method(<init>,void,Public,N,N);
Method(getValues,java.lang.String[],Public,N,N);
SuperClass(org.apache.tools.ant.types.EnumeratedAttribute);
Generalization(org.apache.tools.ant.types.EnumeratedAttribute);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector$CacheName,<init> --> <init>,org.apache.tools.ant.types.EnumeratedAttribute,);
EndClass 219
StartClass 220
Class(org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector$AlgorithmName,N,N,Public);
Method(<init>,void,Public,N,N);
Method(getValues,java.lang.String[],Public,N,N);
SuperClass(org.apache.tools.ant.types.EnumeratedAttribute);
Generalization(org.apache.tools.ant.types.EnumeratedAttribute);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector$AlgorithmName,<init> --> <init>,org.apache.tools.ant.types.EnumeratedAttribute,);
EndClass 220
StartClass 221
Class(org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector$ComparatorName,N,N,Public);
Method(<init>,void,Public,N,N);
Method(getValues,java.lang.String[],Public,N,N);
SuperClass(org.apache.tools.ant.types.EnumeratedAttribute);
Generalization(org.apache.tools.ant.types.EnumeratedAttribute);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector$ComparatorName,<init> --> <init>,org.apache.tools.ant.types.EnumeratedAttribute,);
EndClass 221
StartClass 222
Class(org.apache.tools.ant.types.selectors.modifiedselector.Algorithm,Y,Y,Public);
Method(isValid,boolean,Public,N,Y);
Method(getValue,java.lang.String,Public,N,Y);
Parameter(getValue,java.io.File,);
EndClass 222
StartClass 223
Class(org.apache.tools.ant.types.selectors.modifiedselector.Cache,Y,Y,Public);
Method(isValid,boolean,Public,N,Y);
Method(delete,void,Public,N,Y);
Method(load,void,Public,N,Y);
Method(save,void,Public,N,Y);
Method(get,java.lang.Object,Public,N,Y);
Method(put,void,Public,N,Y);
Method(iterator,java.util.Iterator,Public,N,Y);
Parameter(get,java.lang.Object,);
Parameter(put,java.lang.Object,);
Parameter(put,java.lang.Object,);
EndClass 223
StartClass 224
Class(org.apache.tools.ant.types.selectors.modifiedselector.EqualComparator,N,N,Public);
Method(<init>,void,Public,N,N);
Method(compare,int,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Parameter(compare,java.lang.Object,);
Parameter(compare,java.lang.Object,);
EndClass 224
StartClass 225
Class(org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,N,N,Public);
Attribute(cachefile,java.io.File,Private,N,N,);
Attribute(cache,java.util.Properties,Private,N,N,);
Attribute(cacheLoaded,boolean,Private,N,N,);
Attribute(cacheDirty,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(setCachefile,void,Public,N,N);
Method(getCachefile,java.io.File,Public,N,N);
Method(isValid,boolean,Public,N,N);
Method(load,void,Public,N,N);
Method(save,void,Public,N,N);
Method(delete,void,Public,N,N);
Method(get,java.lang.Object,Public,N,N);
Method(put,void,Public,N,N);
Method(iterator,java.util.Iterator,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Parameter(<init>$2,java.io.File,);
Parameter(setCachefile,java.io.File,);
Parameter(get,java.lang.Object,);
Parameter(put,java.lang.Object,);
Parameter(put,java.lang.Object,);
Realization(org.apache.tools.ant.types.selectors.modifiedselector.Cache);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,get --> load,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,<init> --> cachefile,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,<init> --> cache,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,<init> --> cacheLoaded,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,<init> --> cacheDirty,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,<init>$2 --> cachefile,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,<init>$2 --> cache,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,<init>$2 --> cacheLoaded,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,<init>$2 --> cacheDirty,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,setCachefile --> cachefile,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,getCachefile --> cachefile,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,isValid --> cachefile,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,load --> cachefile,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,load --> cache,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,load --> cacheLoaded,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,load --> cacheDirty,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,save --> cacheDirty,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,save --> cachefile,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,save --> cache,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,save --> cacheDirty,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,delete --> cachefile,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,delete --> cache,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,delete --> cacheLoaded,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,delete --> cacheDirty,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,get --> cacheLoaded,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,get --> cache,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,put --> cache,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,put --> cacheDirty,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,iterator --> cache,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,toString --> cachefile,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,toString --> cache,org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,READ);
EndClass 225
StartClass 226
Class(org.apache.tools.ant.types.selectors.modifiedselector.ChecksumAlgorithm,N,N,Public);
Attribute(algorithm,java.lang.String,Private,N,N,);
Attribute(checksum,java.util.zip.Checksum,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setAlgorithm,void,Public,N,N);
Method(initChecksum,void,Public,N,N);
Method(isValid,boolean,Public,N,N);
Method(getValue,java.lang.String,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Parameter(setAlgorithm,java.lang.String,);
Parameter(getValue,java.io.File,);
Realization(org.apache.tools.ant.types.selectors.modifiedselector.Algorithm);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ChecksumAlgorithm,getValue --> initChecksum,org.apache.tools.ant.types.selectors.modifiedselector.ChecksumAlgorithm,);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ChecksumAlgorithm,<init> --> algorithm,org.apache.tools.ant.types.selectors.modifiedselector.ChecksumAlgorithm,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ChecksumAlgorithm,<init> --> checksum,org.apache.tools.ant.types.selectors.modifiedselector.ChecksumAlgorithm,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ChecksumAlgorithm,setAlgorithm --> algorithm,org.apache.tools.ant.types.selectors.modifiedselector.ChecksumAlgorithm,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ChecksumAlgorithm,initChecksum --> checksum,org.apache.tools.ant.types.selectors.modifiedselector.ChecksumAlgorithm,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ChecksumAlgorithm,initChecksum --> algorithm,org.apache.tools.ant.types.selectors.modifiedselector.ChecksumAlgorithm,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ChecksumAlgorithm,initChecksum --> checksum,org.apache.tools.ant.types.selectors.modifiedselector.ChecksumAlgorithm,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ChecksumAlgorithm,isValid --> algorithm,org.apache.tools.ant.types.selectors.modifiedselector.ChecksumAlgorithm,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ChecksumAlgorithm,getValue --> checksum,org.apache.tools.ant.types.selectors.modifiedselector.ChecksumAlgorithm,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.ChecksumAlgorithm,toString --> algorithm,org.apache.tools.ant.types.selectors.modifiedselector.ChecksumAlgorithm,READ);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.ChecksumAlgorithm,initChecksum --> <init>$5,org.apache.tools.ant.BuildException,);
EndClass 226
StartClass 227
Class(org.apache.tools.ant.types.selectors.modifiedselector.HashvalueAlgorithm,N,N,Public);
Method(<init>,void,Public,N,N);
Method(isValid,boolean,Public,N,N);
Method(getValue,java.lang.String,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Parameter(getValue,java.io.File,);
Realization(org.apache.tools.ant.types.selectors.modifiedselector.Algorithm);
EndClass 227
StartClass 228
Class(org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,N,N,Public);
Attribute(algorithm,java.lang.String,Private,N,N,);
Attribute(provider,java.lang.String,Private,N,N,);
Attribute(messageDigest,java.security.MessageDigest,Private,N,N,);
Attribute(readBufferSize,int,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setAlgorithm,void,Public,N,N);
Method(setProvider,void,Public,N,N);
Method(initMessageDigest,void,Public,N,N);
Method(isValid,boolean,Public,N,N);
Method(getValue,java.lang.String,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Parameter(setAlgorithm,java.lang.String,);
Parameter(setProvider,java.lang.String,);
Parameter(getValue,java.io.File,);
Realization(org.apache.tools.ant.types.selectors.modifiedselector.Algorithm);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,getValue --> initMessageDigest,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,<init> --> algorithm,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,<init> --> provider,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,<init> --> messageDigest,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,<init> --> readBufferSize,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,setAlgorithm --> algorithm,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,setProvider --> provider,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,initMessageDigest --> messageDigest,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,initMessageDigest --> provider,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,initMessageDigest --> algorithm,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,initMessageDigest --> messageDigest,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,isValid --> algorithm,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,getValue --> readBufferSize,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,getValue --> messageDigest,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,toString --> algorithm,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,toString --> provider,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,READ);
Call(METHOD,org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,initMessageDigest --> <init>$5,org.apache.tools.ant.BuildException,);
EndClass 228
StartClass 229
Class(org.apache.tools.ant.types.selectors.BaseSelector,N,Y,Public);
Attribute(errmsg,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setError,void,Public,N,N);
Method(getError,java.lang.String,Public,N,N);
Method(verifySettings,void,Public,N,N);
Method(validate,void,Public,N,N);
Method(isSelected,boolean,Public,N,Y);
Parameter(setError,java.lang.String,);
Parameter(isSelected,java.io.File,);
Parameter(isSelected,java.lang.String,);
Parameter(isSelected,java.io.File,);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
SubClass(org.apache.tools.ant.types.selectors.ExtendSelector);
SubClass(org.apache.tools.ant.types.selectors.PresentSelector);
SubClass(org.apache.tools.ant.types.selectors.DateSelector);
SubClass(org.apache.tools.ant.types.selectors.SizeSelector);
SubClass(org.apache.tools.ant.types.selectors.FilenameSelector);
SubClass(org.apache.tools.ant.types.selectors.TypeSelector);
SubClass(org.apache.tools.ant.types.selectors.ContainsSelector);
SubClass(org.apache.tools.ant.types.selectors.DepthSelector);
SubClass(org.apache.tools.ant.types.selectors.ContainsRegexpSelector);
SubClass(org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector);
SubClass(org.apache.tools.ant.types.selectors.BaseExtendSelector);
SubClass(org.apache.tools.ant.types.selectors.SelectSelector);
SubClass(org.apache.tools.ant.types.selectors.AndSelector);
SubClass(org.apache.tools.ant.types.selectors.OrSelector);
SubClass(org.apache.tools.ant.types.selectors.NotSelector);
SubClass(org.apache.tools.ant.types.selectors.NoneSelector);
SubClass(org.apache.tools.ant.types.selectors.MajoritySelector);
SubClass(org.apache.tools.ant.types.selectors.BaseSelectorContainer);
SubClass(org.apache.tools.ant.types.selectors.DifferentSelector);
SubClass(org.apache.tools.ant.types.selectors.DependSelector);
SubClass(org.apache.tools.ant.types.selectors.MappingSelector);
Generalization(org.apache.tools.ant.types.DataType);
Realization(org.apache.tools.ant.types.selectors.FileSelector);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelector,verifySettings --> verifySettings,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelector,validate --> getError,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelector,validate --> verifySettings,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.BaseSelector,<init> --> errmsg,org.apache.tools.ant.types.selectors.BaseSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.BaseSelector,setError --> errmsg,org.apache.tools.ant.types.selectors.BaseSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.BaseSelector,setError --> errmsg,org.apache.tools.ant.types.selectors.BaseSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.BaseSelector,getError --> errmsg,org.apache.tools.ant.types.selectors.BaseSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.BaseSelector,validate --> errmsg,org.apache.tools.ant.types.selectors.BaseSelector,READ);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelector,<init> --> <init>,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelector,verifySettings --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelector,verifySettings --> getCheckedRef,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.selectors.BaseSelector,validate --> <init>$2,org.apache.tools.ant.BuildException,);
EndClass 229
StartClass 230
Class(org.apache.tools.ant.types.Mapper,N,N,Public);
Attribute(type,org.apache.tools.ant.types.Mapper$MapperType,Protected,N,N,);
Attribute(classname,java.lang.String,Protected,N,N,);
Attribute(classpath,org.apache.tools.ant.types.Path,Protected,N,N,);
Attribute(from,java.lang.String,Protected,N,N,);
Attribute(to,java.lang.String,Protected,N,N,);
Attribute(container,org.apache.tools.ant.util.ContainerMapper,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setType,void,Public,N,N);
Method(addConfigured,void,Public,N,N);
Method(add,void,Public,N,N);
Method(addConfiguredMapper,void,Public,N,N);
Method(setClassname,void,Public,N,N);
Method(setClasspath,void,Public,N,N);
Method(createClasspath,org.apache.tools.ant.types.Path,Public,N,N);
Method(setClasspathRef,void,Public,N,N);
Method(setFrom,void,Public,N,N);
Method(setTo,void,Public,N,N);
Method(setRefid,void,Public,N,N);
Method(getImplementation,org.apache.tools.ant.util.FileNameMapper,Public,N,N);
Method(getImplementationClass,java.lang.Class,Protected,N,N);
Method(getRef,org.apache.tools.ant.types.Mapper,Protected,N,N);
Parameter(<init>,org.apache.tools.ant.Project,);
Parameter(setType,org.apache.tools.ant.types.Mapper$MapperType,);
Parameter(addConfigured,org.apache.tools.ant.util.FileNameMapper,);
Parameter(add,org.apache.tools.ant.util.FileNameMapper,);
Parameter(addConfiguredMapper,org.apache.tools.ant.types.Mapper,);
Parameter(setClassname,java.lang.String,);
Parameter(setClasspath,org.apache.tools.ant.types.Path,);
Parameter(setClasspathRef,org.apache.tools.ant.types.Reference,);
Parameter(setFrom,java.lang.String,);
Parameter(setTo,java.lang.String,);
Parameter(setRefid,org.apache.tools.ant.types.Reference,);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.DataType);
Composition(org.apache.tools.ant.types.Mapper$MapperType);
Composition(org.apache.tools.ant.types.Path);
Composition(org.apache.tools.ant.util.ContainerMapper);
Call(METHOD,org.apache.tools.ant.types.Mapper,addConfigured --> add,org.apache.tools.ant.types.Mapper,);
Call(METHOD,org.apache.tools.ant.types.Mapper,add --> getImplementation,org.apache.tools.ant.types.Mapper,);
Call(METHOD,org.apache.tools.ant.types.Mapper,addConfiguredMapper --> getImplementation,org.apache.tools.ant.types.Mapper,);
Call(METHOD,org.apache.tools.ant.types.Mapper,addConfiguredMapper --> add,org.apache.tools.ant.types.Mapper,);
Call(METHOD,org.apache.tools.ant.types.Mapper,setClasspathRef --> createClasspath,org.apache.tools.ant.types.Mapper,);
Call(METHOD,org.apache.tools.ant.types.Mapper,getImplementation --> getRef,org.apache.tools.ant.types.Mapper,);
Call(METHOD,org.apache.tools.ant.types.Mapper,getImplementation --> getImplementation,org.apache.tools.ant.types.Mapper,);
Call(METHOD,org.apache.tools.ant.types.Mapper,getImplementation --> getImplementationClass,org.apache.tools.ant.types.Mapper,);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,<init> --> type,org.apache.tools.ant.types.Mapper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,<init> --> classname,org.apache.tools.ant.types.Mapper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,<init> --> classpath,org.apache.tools.ant.types.Mapper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,<init> --> from,org.apache.tools.ant.types.Mapper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,<init> --> to,org.apache.tools.ant.types.Mapper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,<init> --> container,org.apache.tools.ant.types.Mapper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,setType --> type,org.apache.tools.ant.types.Mapper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,add --> container,org.apache.tools.ant.types.Mapper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,add --> type,org.apache.tools.ant.types.Mapper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,add --> classname,org.apache.tools.ant.types.Mapper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,add --> container,org.apache.tools.ant.types.Mapper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,setClassname --> classname,org.apache.tools.ant.types.Mapper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,setClasspath --> classpath,org.apache.tools.ant.types.Mapper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,setClasspath --> classpath,org.apache.tools.ant.types.Mapper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,createClasspath --> classpath,org.apache.tools.ant.types.Mapper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,createClasspath --> classpath,org.apache.tools.ant.types.Mapper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,setFrom --> from,org.apache.tools.ant.types.Mapper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,setTo --> to,org.apache.tools.ant.types.Mapper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,setRefid --> type,org.apache.tools.ant.types.Mapper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,setRefid --> from,org.apache.tools.ant.types.Mapper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,setRefid --> to,org.apache.tools.ant.types.Mapper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,getImplementation --> type,org.apache.tools.ant.types.Mapper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,getImplementation --> classname,org.apache.tools.ant.types.Mapper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,getImplementation --> container,org.apache.tools.ant.types.Mapper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,getImplementation --> from,org.apache.tools.ant.types.Mapper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,getImplementation --> to,org.apache.tools.ant.types.Mapper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,getImplementationClass --> classname,org.apache.tools.ant.types.Mapper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,getImplementationClass --> type,org.apache.tools.ant.types.Mapper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper,getImplementationClass --> classpath,org.apache.tools.ant.types.Mapper,READ);
Call(METHOD,org.apache.tools.ant.types.Mapper,<init> --> <init>,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Mapper,<init> --> setProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.Mapper,setType --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Mapper,setType --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Mapper,add --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Mapper,add --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Mapper,add --> <init>,org.apache.tools.ant.util.CompositeMapper,);
Call(METHOD,org.apache.tools.ant.types.Mapper,add --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.Mapper,add --> add,org.apache.tools.ant.util.ContainerMapper,);
Call(METHOD,org.apache.tools.ant.types.Mapper,setClassname --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Mapper,setClassname --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Mapper,setClasspath --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Mapper,setClasspath --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Mapper,setClasspath --> append,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Mapper,createClasspath --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Mapper,createClasspath --> noChildrenAllowed,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Mapper,createClasspath --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.Mapper,createClasspath --> <init>$2,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Mapper,createClasspath --> createPath,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Mapper,setClasspathRef --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Mapper,setClasspathRef --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Mapper,setClasspathRef --> setRefid,org.apache.tools.ant.types.Path,);
Call(METHOD,org.apache.tools.ant.types.Mapper,setFrom --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Mapper,setFrom --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Mapper,setTo --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Mapper,setTo --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Mapper,setRefid --> tooManyAttributes,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Mapper,setRefid --> setRefid,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Mapper,getImplementation --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Mapper,getImplementation --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.Mapper,getImplementation --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.Mapper,getImplementation --> setProjectReference,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.types.Mapper,getImplementation --> setFrom,org.apache.tools.ant.util.FileNameMapper,);
Call(METHOD,org.apache.tools.ant.types.Mapper,getImplementation --> setTo,org.apache.tools.ant.util.FileNameMapper,);
Call(METHOD,org.apache.tools.ant.types.Mapper,getImplementation --> <init>$5,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.Mapper,getImplementationClass --> getImplementation,org.apache.tools.ant.types.Mapper$MapperType,);
Call(METHOD,org.apache.tools.ant.types.Mapper,getImplementationClass --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.Mapper,getImplementationClass --> createClassLoader,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.types.Mapper,getRef --> getCheckedRef,org.apache.tools.ant.types.DataType,);
EndClass 230
StartClass 231
Class(org.apache.tools.ant.types.selectors.PresentSelector$FilePresence,N,N,Public);
Method(<init>,void,Public,N,N);
Method(getValues,java.lang.String[],Public,N,N);
SuperClass(org.apache.tools.ant.types.EnumeratedAttribute);
Generalization(org.apache.tools.ant.types.EnumeratedAttribute);
Call(METHOD,org.apache.tools.ant.types.selectors.PresentSelector$FilePresence,<init> --> <init>,org.apache.tools.ant.types.EnumeratedAttribute,);
EndClass 231
StartClass 232
Class(org.apache.tools.ant.util.IdentityMapper,N,N,Public);
Method(<init>,void,Public,N,N);
Method(setFrom,void,Public,N,N);
Method(setTo,void,Public,N,N);
Method(mapFileName,java.lang.String[],Public,N,N);
Parameter(setFrom,java.lang.String,);
Parameter(setTo,java.lang.String,);
Parameter(mapFileName,java.lang.String,);
Realization(org.apache.tools.ant.util.FileNameMapper);
EndClass 232
StartClass 233
Class(org.apache.tools.ant.types.selectors.TypeSelector$FileType,N,N,Public);
Attribute(FILE,java.lang.String,Public,Y,Y,);
Attribute(DIR,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(getValues,java.lang.String[],Public,N,N);
SuperClass(org.apache.tools.ant.types.EnumeratedAttribute);
Generalization(org.apache.tools.ant.types.EnumeratedAttribute);
Call(METHOD,org.apache.tools.ant.types.selectors.TypeSelector$FileType,<init> --> <init>,org.apache.tools.ant.types.EnumeratedAttribute,);
EndClass 233
StartClass 234
Class(org.apache.tools.ant.types.selectors.MappingSelector,N,Y,Public);
Attribute(FILE_UTILS,org.apache.tools.ant.util.FileUtils,Private,Y,Y,);
Attribute(targetdir,java.io.File,Protected,N,N,);
Attribute(mapperElement,org.apache.tools.ant.types.Mapper,Protected,N,N,);
Attribute(map,org.apache.tools.ant.util.FileNameMapper,Protected,N,N,);
Attribute(granularity,int,Protected,N,N,);
Method(<init>,void,Public,N,N);
Method(setTargetdir,void,Public,N,N);
Method(createMapper,org.apache.tools.ant.types.Mapper,Public,N,N);
Method(verifySettings,void,Public,N,N);
Method(isSelected,boolean,Public,N,N);
Method(selectionTest,boolean,Protected,N,Y);
Method(setGranularity,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(setTargetdir,java.io.File,);
Parameter(isSelected,java.io.File,);
Parameter(isSelected,java.lang.String,);
Parameter(isSelected,java.io.File,);
Parameter(selectionTest,java.io.File,);
Parameter(selectionTest,java.io.File,);
Parameter(setGranularity,int,);
SuperClass(org.apache.tools.ant.types.selectors.BaseSelector);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
SubClass(org.apache.tools.ant.types.selectors.DifferentSelector);
SubClass(org.apache.tools.ant.types.selectors.DependSelector);
Generalization(org.apache.tools.ant.types.selectors.BaseSelector);
Composition(org.apache.tools.ant.util.FileUtils);
Composition(org.apache.tools.ant.types.Mapper);
Composition(org.apache.tools.ant.util.FileNameMapper);
Call(METHOD,org.apache.tools.ant.types.selectors.MappingSelector,isSelected --> selectionTest,org.apache.tools.ant.types.selectors.MappingSelector,);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.MappingSelector,<init> --> FILE_UTILS,org.apache.tools.ant.types.selectors.MappingSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.MappingSelector,<init> --> targetdir,org.apache.tools.ant.types.selectors.MappingSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.MappingSelector,<init> --> mapperElement,org.apache.tools.ant.types.selectors.MappingSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.MappingSelector,<init> --> map,org.apache.tools.ant.types.selectors.MappingSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.MappingSelector,<init> --> granularity,org.apache.tools.ant.types.selectors.MappingSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.MappingSelector,setTargetdir --> targetdir,org.apache.tools.ant.types.selectors.MappingSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.MappingSelector,createMapper --> mapperElement,org.apache.tools.ant.types.selectors.MappingSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.MappingSelector,createMapper --> mapperElement,org.apache.tools.ant.types.selectors.MappingSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.MappingSelector,verifySettings --> targetdir,org.apache.tools.ant.types.selectors.MappingSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.MappingSelector,verifySettings --> mapperElement,org.apache.tools.ant.types.selectors.MappingSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.MappingSelector,verifySettings --> map,org.apache.tools.ant.types.selectors.MappingSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.MappingSelector,verifySettings --> map,org.apache.tools.ant.types.selectors.MappingSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.MappingSelector,isSelected --> map,org.apache.tools.ant.types.selectors.MappingSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.MappingSelector,isSelected --> targetdir,org.apache.tools.ant.types.selectors.MappingSelector,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.MappingSelector,setGranularity --> granularity,org.apache.tools.ant.types.selectors.MappingSelector,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.selectors.MappingSelector,<clinit> --> FILE_UTILS,org.apache.tools.ant.types.selectors.MappingSelector,WRITE);
Call(METHOD,org.apache.tools.ant.types.selectors.MappingSelector,<init> --> <init>,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.MappingSelector,<init> --> getFileTimestampGranularity,org.apache.tools.ant.util.FileUtils,);
Call(METHOD,org.apache.tools.ant.types.selectors.MappingSelector,createMapper --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.selectors.MappingSelector,createMapper --> getProject,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.types.selectors.MappingSelector,createMapper --> <init>,org.apache.tools.ant.types.Mapper,);
Call(METHOD,org.apache.tools.ant.types.selectors.MappingSelector,verifySettings --> setError,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.MappingSelector,verifySettings --> <init>,org.apache.tools.ant.util.IdentityMapper,);
Call(METHOD,org.apache.tools.ant.types.selectors.MappingSelector,verifySettings --> getImplementation,org.apache.tools.ant.types.Mapper,);
Call(METHOD,org.apache.tools.ant.types.selectors.MappingSelector,isSelected --> validate,org.apache.tools.ant.types.selectors.BaseSelector,);
Call(METHOD,org.apache.tools.ant.types.selectors.MappingSelector,isSelected --> mapFileName,org.apache.tools.ant.util.FileNameMapper,);
Call(METHOD,org.apache.tools.ant.types.selectors.MappingSelector,isSelected --> <init>$2,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.types.selectors.MappingSelector,<clinit> --> getFileUtils,org.apache.tools.ant.util.FileUtils,);
EndClass 234
StartClass 235
Class(org.apache.tools.ant.types.Comparison,N,N,Public);
Attribute(VALUES,java.lang.String[],Private,Y,Y,);
Attribute(EQUAL,org.apache.tools.ant.types.Comparison,Public,Y,Y,);
Attribute(NOT_EQUAL,org.apache.tools.ant.types.Comparison,Public,Y,Y,);
Attribute(GREATER,org.apache.tools.ant.types.Comparison,Public,Y,Y,);
Attribute(LESS,org.apache.tools.ant.types.Comparison,Public,Y,Y,);
Attribute(GREATER_EQUAL,org.apache.tools.ant.types.Comparison,Public,Y,Y,);
Attribute(LESS_EQUAL,org.apache.tools.ant.types.Comparison,Public,Y,Y,);
Attribute(EQUAL_INDEX,int[],Private,Y,Y,);
Attribute(LESS_INDEX,int[],Private,Y,Y,);
Attribute(GREATER_INDEX,int[],Private,Y,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getValues,java.lang.String[],Public,N,N);
Method(evaluate,boolean,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>$2,java.lang.String,);
Parameter(evaluate,int,);
SuperClass(org.apache.tools.ant.types.EnumeratedAttribute);
SubClass(org.apache.tools.ant.types.selectors.SizeSelector$SizeComparisons);
Generalization(org.apache.tools.ant.types.EnumeratedAttribute);
Composition(org.apache.tools.ant.types.Comparison);
Call(METHOD,org.apache.tools.ant.types.Comparison,<clinit> --> <init>$2,org.apache.tools.ant.types.Comparison,);
Call(ATTRIBUTE,org.apache.tools.ant.types.Comparison,getValues --> VALUES,org.apache.tools.ant.types.Comparison,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Comparison,evaluate --> LESS_INDEX,org.apache.tools.ant.types.Comparison,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Comparison,evaluate --> GREATER_INDEX,org.apache.tools.ant.types.Comparison,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Comparison,evaluate --> EQUAL_INDEX,org.apache.tools.ant.types.Comparison,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Comparison,<clinit> --> VALUES,org.apache.tools.ant.types.Comparison,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Comparison,<clinit> --> EQUAL,org.apache.tools.ant.types.Comparison,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Comparison,<clinit> --> NOT_EQUAL,org.apache.tools.ant.types.Comparison,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Comparison,<clinit> --> GREATER,org.apache.tools.ant.types.Comparison,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Comparison,<clinit> --> LESS,org.apache.tools.ant.types.Comparison,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Comparison,<clinit> --> GREATER_EQUAL,org.apache.tools.ant.types.Comparison,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Comparison,<clinit> --> LESS_EQUAL,org.apache.tools.ant.types.Comparison,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Comparison,<clinit> --> EQUAL_INDEX,org.apache.tools.ant.types.Comparison,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Comparison,<clinit> --> LESS_INDEX,org.apache.tools.ant.types.Comparison,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Comparison,<clinit> --> GREATER_INDEX,org.apache.tools.ant.types.Comparison,WRITE);
Call(METHOD,org.apache.tools.ant.types.Comparison,<init> --> <init>,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.Comparison,<init>$2 --> <init>,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.Comparison,<init>$2 --> setValue,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.Comparison,evaluate --> getIndex,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.Comparison,evaluate --> <init>$2,org.apache.tools.ant.BuildException,);
EndClass 235
StartClass 236
Class(org.apache.tools.ant.types.selectors.SizeSelector$ByteUnits,N,N,Public);
Method(<init>,void,Public,N,N);
Method(getValues,java.lang.String[],Public,N,N);
SuperClass(org.apache.tools.ant.types.EnumeratedAttribute);
Generalization(org.apache.tools.ant.types.EnumeratedAttribute);
Call(METHOD,org.apache.tools.ant.types.selectors.SizeSelector$ByteUnits,<init> --> <init>,org.apache.tools.ant.types.EnumeratedAttribute,);
EndClass 236
StartClass 237
Class(org.apache.tools.ant.types.selectors.SizeSelector$SizeComparisons,N,N,Public);
Method(<init>,void,Public,N,N);
SuperClass(org.apache.tools.ant.types.Comparison);
SuperClass(org.apache.tools.ant.types.EnumeratedAttribute);
Generalization(org.apache.tools.ant.types.Comparison);
Call(METHOD,org.apache.tools.ant.types.selectors.SizeSelector$SizeComparisons,<init> --> <init>,org.apache.tools.ant.types.Comparison,);
EndClass 237
StartClass 238
Class(org.apache.tools.ant.types.selectors.DateSelector$TimeComparisons,N,N,Public);
Method(<init>,void,Public,N,N);
SuperClass(org.apache.tools.ant.types.TimeComparison);
SuperClass(org.apache.tools.ant.types.EnumeratedAttribute);
Generalization(org.apache.tools.ant.types.TimeComparison);
Call(METHOD,org.apache.tools.ant.types.selectors.DateSelector$TimeComparisons,<init> --> <init>,org.apache.tools.ant.types.TimeComparison,);
EndClass 238
StartClass 239
Class(org.apache.tools.ant.types.selectors.ExtendFileSelector,Y,Y,Public);
Realization(org.apache.tools.ant.types.selectors.FileSelector);
Realization(org.apache.tools.ant.types.Parameterizable);
EndClass 239
StartClass 240
Class(org.apache.tools.ant.types.RegularExpression,N,N,Public);
Attribute(DATA_TYPE_NAME,java.lang.String,Public,Y,Y,);
Attribute(alreadyInit,boolean,Private,N,N,);
Attribute(FACTORY,org.apache.tools.ant.util.regexp.RegexpFactory,Private,Y,Y,);
Attribute(regexp,org.apache.tools.ant.util.regexp.Regexp,Private,N,N,);
Attribute(myPattern,java.lang.String,Private,N,N,);
Attribute(setPatternPending,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(init,void,Private,N,N);
Method(setPattern,void,Private,N,N);
Method(setPattern$2,void,Public,N,N);
Method(getPattern,java.lang.String,Public,N,N);
Method(getRegexp,org.apache.tools.ant.util.regexp.Regexp,Public,N,N);
Method(getRef,org.apache.tools.ant.types.RegularExpression,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(init,org.apache.tools.ant.Project,);
Parameter(setPattern$2,java.lang.String,);
Parameter(getPattern,org.apache.tools.ant.Project,);
Parameter(getRegexp,org.apache.tools.ant.Project,);
Parameter(getRef,org.apache.tools.ant.Project,);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.DataType);
Composition(org.apache.tools.ant.util.regexp.RegexpFactory);
Composition(org.apache.tools.ant.util.regexp.Regexp);
Call(METHOD,org.apache.tools.ant.types.RegularExpression,getPattern --> init,org.apache.tools.ant.types.RegularExpression,);
Call(METHOD,org.apache.tools.ant.types.RegularExpression,getPattern --> getRef,org.apache.tools.ant.types.RegularExpression,);
Call(METHOD,org.apache.tools.ant.types.RegularExpression,getPattern --> getPattern,org.apache.tools.ant.types.RegularExpression,);
Call(METHOD,org.apache.tools.ant.types.RegularExpression,getPattern --> setPattern,org.apache.tools.ant.types.RegularExpression,);
Call(METHOD,org.apache.tools.ant.types.RegularExpression,getRegexp --> init,org.apache.tools.ant.types.RegularExpression,);
Call(METHOD,org.apache.tools.ant.types.RegularExpression,getRegexp --> getRef,org.apache.tools.ant.types.RegularExpression,);
Call(METHOD,org.apache.tools.ant.types.RegularExpression,getRegexp --> getRegexp,org.apache.tools.ant.types.RegularExpression,);
Call(METHOD,org.apache.tools.ant.types.RegularExpression,getRegexp --> setPattern,org.apache.tools.ant.types.RegularExpression,);
Call(ATTRIBUTE,org.apache.tools.ant.types.RegularExpression,<init> --> alreadyInit,org.apache.tools.ant.types.RegularExpression,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.RegularExpression,<init> --> regexp,org.apache.tools.ant.types.RegularExpression,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.RegularExpression,<init> --> setPatternPending,org.apache.tools.ant.types.RegularExpression,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.RegularExpression,init --> alreadyInit,org.apache.tools.ant.types.RegularExpression,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.RegularExpression,init --> FACTORY,org.apache.tools.ant.types.RegularExpression,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.RegularExpression,init --> regexp,org.apache.tools.ant.types.RegularExpression,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.RegularExpression,init --> alreadyInit,org.apache.tools.ant.types.RegularExpression,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.RegularExpression,setPattern --> setPatternPending,org.apache.tools.ant.types.RegularExpression,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.RegularExpression,setPattern --> regexp,org.apache.tools.ant.types.RegularExpression,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.RegularExpression,setPattern --> myPattern,org.apache.tools.ant.types.RegularExpression,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.RegularExpression,setPattern --> setPatternPending,org.apache.tools.ant.types.RegularExpression,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.RegularExpression,setPattern$2 --> regexp,org.apache.tools.ant.types.RegularExpression,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.RegularExpression,setPattern$2 --> myPattern,org.apache.tools.ant.types.RegularExpression,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.RegularExpression,setPattern$2 --> setPatternPending,org.apache.tools.ant.types.RegularExpression,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.RegularExpression,getPattern --> regexp,org.apache.tools.ant.types.RegularExpression,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.RegularExpression,getRegexp --> regexp,org.apache.tools.ant.types.RegularExpression,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.RegularExpression,<clinit> --> FACTORY,org.apache.tools.ant.types.RegularExpression,WRITE);
Call(METHOD,org.apache.tools.ant.types.RegularExpression,<init> --> <init>,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.RegularExpression,init --> newRegexp$2,org.apache.tools.ant.util.regexp.RegexpFactory,);
Call(METHOD,org.apache.tools.ant.types.RegularExpression,setPattern --> setPattern,org.apache.tools.ant.util.regexp.RegexpMatcher,);
Call(METHOD,org.apache.tools.ant.types.RegularExpression,setPattern$2 --> setPattern,org.apache.tools.ant.util.regexp.RegexpMatcher,);
Call(METHOD,org.apache.tools.ant.types.RegularExpression,getPattern --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.RegularExpression,getPattern --> getPattern,org.apache.tools.ant.util.regexp.RegexpMatcher,);
Call(METHOD,org.apache.tools.ant.types.RegularExpression,getRegexp --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.RegularExpression,getRef --> getCheckedRef$2,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.RegularExpression,<clinit> --> <init>,org.apache.tools.ant.util.regexp.RegexpFactory,);
EndClass 240
StartClass 241
Class(org.apache.tools.ant.util.regexp.Regexp,Y,Y,Public);
Attribute(REPLACE_FIRST,int,Public,Y,Y,);
Attribute(REPLACE_ALL,int,Public,Y,Y,);
Method(substitute,java.lang.String,Public,N,Y);
Parameter(substitute,java.lang.String,);
Parameter(substitute,java.lang.String,);
Parameter(substitute,int,);
Realization(org.apache.tools.ant.util.regexp.RegexpMatcher);
EndClass 241
StartClass 242
Class(org.apache.tools.ant.filters.BaseParamFilterReader,N,Y,Public);
Attribute(parameters,org.apache.tools.ant.types.Parameter[],Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(setParameters,void,Public,N,N);
Method(getParameters,org.apache.tools.ant.types.Parameter[],Protected,N,N);
Parameter(<init>$2,java.io.Reader,);
Parameter(setParameters,org.apache.tools.ant.types.Parameter[],);
SuperClass(org.apache.tools.ant.filters.BaseFilterReader);
SubClass(org.apache.tools.ant.filters.HeadFilter);
SubClass(org.apache.tools.ant.filters.LineContains);
SubClass(org.apache.tools.ant.filters.LineContainsRegExp);
SubClass(org.apache.tools.ant.filters.PrefixLines);
SubClass(org.apache.tools.ant.filters.ReplaceTokens);
SubClass(org.apache.tools.ant.filters.StripLineBreaks);
SubClass(org.apache.tools.ant.filters.StripLineComments);
SubClass(org.apache.tools.ant.filters.TabsToSpaces);
SubClass(org.apache.tools.ant.filters.TailFilter);
SubClass(org.apache.tools.ant.filters.EscapeUnicode);
Generalization(org.apache.tools.ant.filters.BaseFilterReader);
Realization(org.apache.tools.ant.types.Parameterizable);
Call(ATTRIBUTE,org.apache.tools.ant.filters.BaseParamFilterReader,setParameters --> parameters,org.apache.tools.ant.filters.BaseParamFilterReader,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.BaseParamFilterReader,getParameters --> parameters,org.apache.tools.ant.filters.BaseParamFilterReader,READ);
Call(METHOD,org.apache.tools.ant.filters.BaseParamFilterReader,<init> --> <init>,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.BaseParamFilterReader,<init>$2 --> <init>$2,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.BaseParamFilterReader,setParameters --> setInitialized,org.apache.tools.ant.filters.BaseFilterReader,);
EndClass 242
StartClass 243
Class(org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter,N,Y,Public);
Attribute(byLine,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setByLine,void,Public,N,N);
Method(chain,java.io.Reader,Public,N,N);
Parameter(setByLine,boolean,);
Parameter(chain,java.io.Reader,);
SuperClass(org.apache.tools.ant.ProjectComponent);
SubClass(org.apache.tools.ant.filters.TokenFilter$ContainsRegex);
SubClass(org.apache.tools.ant.filters.TokenFilter$ReplaceRegex);
SubClass(org.apache.tools.ant.filters.TokenFilter$Trim);
SubClass(org.apache.tools.ant.filters.TokenFilter$ReplaceString);
SubClass(org.apache.tools.ant.filters.TokenFilter$IgnoreBlank);
Generalization(org.apache.tools.ant.ProjectComponent);
Realization(org.apache.tools.ant.filters.ChainableReader);
Realization(org.apache.tools.ant.filters.TokenFilter$Filter);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter,<init> --> byLine,org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter,setByLine --> byLine,org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter,chain --> byLine,org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter,READ);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter,<init> --> <init>,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter,chain --> <init>$2,org.apache.tools.ant.filters.TokenFilter,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter,chain --> <init>,org.apache.tools.ant.filters.TokenFilter$FileTokenizer,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter,chain --> add,org.apache.tools.ant.filters.TokenFilter,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ChainableReaderFilter,chain --> add$2,org.apache.tools.ant.filters.TokenFilter,);
EndClass 243
StartClass 244
Class(org.apache.tools.ant.types.Substitution,N,N,Public);
Attribute(DATA_TYPE_NAME,java.lang.String,Public,Y,Y,);
Attribute(expression,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setExpression,void,Public,N,N);
Method(getExpression,java.lang.String,Public,N,N);
Method(getRef,org.apache.tools.ant.types.Substitution,Public,N,N);
Parameter(setExpression,java.lang.String,);
Parameter(getExpression,org.apache.tools.ant.Project,);
Parameter(getRef,org.apache.tools.ant.Project,);
SuperClass(org.apache.tools.ant.types.DataType);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.types.DataType);
Call(METHOD,org.apache.tools.ant.types.Substitution,getExpression --> getRef,org.apache.tools.ant.types.Substitution,);
Call(METHOD,org.apache.tools.ant.types.Substitution,getExpression --> getExpression,org.apache.tools.ant.types.Substitution,);
Call(ATTRIBUTE,org.apache.tools.ant.types.Substitution,<init> --> expression,org.apache.tools.ant.types.Substitution,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Substitution,setExpression --> expression,org.apache.tools.ant.types.Substitution,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Substitution,getExpression --> expression,org.apache.tools.ant.types.Substitution,READ);
Call(METHOD,org.apache.tools.ant.types.Substitution,<init> --> <init>,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Substitution,getExpression --> isReference,org.apache.tools.ant.types.DataType,);
Call(METHOD,org.apache.tools.ant.types.Substitution,getRef --> getCheckedRef$2,org.apache.tools.ant.types.DataType,);
EndClass 244
StartClass 245
Class(org.apache.tools.ant.filters.TokenFilter$Filter,Y,Y,Public);
Method(filter,java.lang.String,Public,N,Y);
Parameter(filter,java.lang.String,);
EndClass 245
StartClass 246
Class(org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1,N,N,NA);
Attribute(this$0,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(read,int,Public,N,N);
Parameter(<init>,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters,);
Parameter(<init>,java.io.Reader,);
SuperClass(org.apache.tools.ant.filters.BaseFilterReader);
Generalization(org.apache.tools.ant.filters.BaseFilterReader);
Composition(org.apache.tools.ant.filters.TokenFilter$DeleteCharacters);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1,<init> --> this$0,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1,read --> this$0,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1,READ);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1,<init> --> <init>$2,org.apache.tools.ant.filters.BaseFilterReader,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1,read --> access$000,org.apache.tools.ant.filters.TokenFilter$DeleteCharacters,);
EndClass 246
StartClass 247
Class(org.apache.tools.ant.filters.LineContains$Contains,N,N,Public);
Attribute(value,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setValue,void,Public,N,N);
Method(getValue,java.lang.String,Public,N,N);
Parameter(setValue,java.lang.String,);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContains$Contains,setValue --> value,org.apache.tools.ant.filters.LineContains$Contains,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.LineContains$Contains,getValue --> value,org.apache.tools.ant.filters.LineContains$Contains,READ);
EndClass 247
StartClass 248
Class(org.apache.tools.ant.filters.ReplaceTokens$Token,N,N,Public);
Attribute(key,java.lang.String,Private,N,N,);
Attribute(value,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setKey,void,Public,N,N);
Method(setValue,void,Public,N,N);
Method(getKey,java.lang.String,Public,N,N);
Method(getValue,java.lang.String,Public,N,N);
Parameter(setKey,java.lang.String,);
Parameter(setValue,java.lang.String,);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens$Token,setKey --> key,org.apache.tools.ant.filters.ReplaceTokens$Token,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens$Token,setValue --> value,org.apache.tools.ant.filters.ReplaceTokens$Token,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens$Token,getKey --> key,org.apache.tools.ant.filters.ReplaceTokens$Token,READ);
Call(ATTRIBUTE,org.apache.tools.ant.filters.ReplaceTokens$Token,getValue --> value,org.apache.tools.ant.filters.ReplaceTokens$Token,READ);
EndClass 248
StartClass 249
Class(org.apache.tools.ant.filters.TokenFilter$StringTokenizer,N,N,Public);
Method(<init>,void,Public,N,N);
SuperClass(org.apache.tools.ant.util.StringTokenizer);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.util.StringTokenizer);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$StringTokenizer,<init> --> <init>,org.apache.tools.ant.util.StringTokenizer,);
EndClass 249
StartClass 250
Class(org.apache.tools.ant.filters.TokenFilter$FileTokenizer,N,N,Public);
Method(<init>,void,Public,N,N);
SuperClass(org.apache.tools.ant.util.FileTokenizer);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.util.FileTokenizer);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$FileTokenizer,<init> --> <init>,org.apache.tools.ant.util.FileTokenizer,);
EndClass 250
StartClass 251
Class(org.apache.tools.ant.filters.TokenFilter$ContainsString,N,N,Public);
Attribute(contains,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setContains,void,Public,N,N);
Method(filter,java.lang.String,Public,N,N);
Parameter(setContains,java.lang.String,);
Parameter(filter,java.lang.String,);
SuperClass(org.apache.tools.ant.ProjectComponent);
Generalization(org.apache.tools.ant.ProjectComponent);
Realization(org.apache.tools.ant.filters.TokenFilter$Filter);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ContainsString,setContains --> contains,org.apache.tools.ant.filters.TokenFilter$ContainsString,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.TokenFilter$ContainsString,filter --> contains,org.apache.tools.ant.filters.TokenFilter$ContainsString,READ);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ContainsString,<init> --> <init>,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.filters.TokenFilter$ContainsString,filter --> <init>$2,org.apache.tools.ant.BuildException,);
EndClass 251
StartClass 252
Class(org.apache.tools.ant.filters.StripLineComments$Comment,N,N,Public);
Attribute(value,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setValue,void,Public,N,N);
Method(getValue,java.lang.String,Public,N,N);
Parameter(setValue,java.lang.String,);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripLineComments$Comment,setValue --> value,org.apache.tools.ant.filters.StripLineComments$Comment,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.filters.StripLineComments$Comment,getValue --> value,org.apache.tools.ant.filters.StripLineComments$Comment,READ);
EndClass 252
StartClass 253
Class(org.apache.tools.ant.types.Mapper$MapperType,N,N,Public);
Attribute(implementations,java.util.Properties,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getValues,java.lang.String[],Public,N,N);
Method(getImplementation,java.lang.String,Public,N,N);
SuperClass(org.apache.tools.ant.types.EnumeratedAttribute);
Generalization(org.apache.tools.ant.types.EnumeratedAttribute);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper$MapperType,<init> --> implementations,org.apache.tools.ant.types.Mapper$MapperType,READ);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper$MapperType,<init> --> implementations,org.apache.tools.ant.types.Mapper$MapperType,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.types.Mapper$MapperType,getImplementation --> implementations,org.apache.tools.ant.types.Mapper$MapperType,READ);
Call(METHOD,org.apache.tools.ant.types.Mapper$MapperType,<init> --> <init>,org.apache.tools.ant.types.EnumeratedAttribute,);
Call(METHOD,org.apache.tools.ant.types.Mapper$MapperType,getImplementation --> getValue,org.apache.tools.ant.types.EnumeratedAttribute,);
EndClass 253
StartClass 254
Class(org.apache.tools.ant.util.ContainerMapper,N,Y,Public);
Attribute(mappers,java.util.List,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(addConfiguredMapper,void,Public,N,N);
Method(addConfigured,void,Public,N,N);
Method(add,void,Public,N,N);
Method(contains,boolean,Protected,N,N);
Method(getMappers,java.util.List,Public,N,N);
Method(setFrom,void,Public,N,N);
Method(setTo,void,Public,N,N);
Parameter(addConfiguredMapper,org.apache.tools.ant.types.Mapper,);
Parameter(addConfigured,org.apache.tools.ant.util.FileNameMapper,);
Parameter(add,org.apache.tools.ant.util.FileNameMapper,);
Parameter(contains,org.apache.tools.ant.util.FileNameMapper,);
Parameter(setFrom,java.lang.String,);
Parameter(setTo,java.lang.String,);
SubClass(org.apache.tools.ant.util.CompositeMapper);
Realization(org.apache.tools.ant.util.FileNameMapper);
Call(METHOD,org.apache.tools.ant.util.ContainerMapper,addConfiguredMapper --> add,org.apache.tools.ant.util.ContainerMapper,);
Call(METHOD,org.apache.tools.ant.util.ContainerMapper,addConfigured --> add,org.apache.tools.ant.util.ContainerMapper,);
Call(METHOD,org.apache.tools.ant.util.ContainerMapper,add --> contains,org.apache.tools.ant.util.ContainerMapper,);
Call(METHOD,org.apache.tools.ant.util.ContainerMapper,contains --> contains,org.apache.tools.ant.util.ContainerMapper,);
Call(ATTRIBUTE,org.apache.tools.ant.util.ContainerMapper,<init> --> mappers,org.apache.tools.ant.util.ContainerMapper,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.ContainerMapper,add --> mappers,org.apache.tools.ant.util.ContainerMapper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.ContainerMapper,contains --> mappers,org.apache.tools.ant.util.ContainerMapper,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.ContainerMapper,getMappers --> mappers,org.apache.tools.ant.util.ContainerMapper,READ);
Call(METHOD,org.apache.tools.ant.util.ContainerMapper,addConfiguredMapper --> getImplementation,org.apache.tools.ant.types.Mapper,);
EndClass 254
StartClass 255
Class(org.apache.tools.ant.util.CompositeMapper,N,N,Public);
Method(<init>,void,Public,N,N);
Method(mapFileName,java.lang.String[],Public,N,N);
Parameter(mapFileName,java.lang.String,);
SuperClass(org.apache.tools.ant.util.ContainerMapper);
Generalization(org.apache.tools.ant.util.ContainerMapper);
Call(METHOD,org.apache.tools.ant.util.CompositeMapper,<init> --> <init>,org.apache.tools.ant.util.ContainerMapper,);
Call(METHOD,org.apache.tools.ant.util.CompositeMapper,mapFileName --> getMappers,org.apache.tools.ant.util.ContainerMapper,);
Call(METHOD,org.apache.tools.ant.util.CompositeMapper,mapFileName --> mapFileName,org.apache.tools.ant.util.FileNameMapper,);
EndClass 255
StartClass 256
Class(org.apache.tools.ant.util.regexp.RegexpMatcher,Y,Y,Public);
Attribute(MATCH_DEFAULT,int,Public,Y,Y,);
Attribute(MATCH_CASE_INSENSITIVE,int,Public,Y,Y,);
Attribute(MATCH_MULTILINE,int,Public,Y,Y,);
Attribute(MATCH_SINGLELINE,int,Public,Y,Y,);
Method(setPattern,void,Public,N,Y);
Method(getPattern,java.lang.String,Public,N,Y);
Method(matches,boolean,Public,N,Y);
Method(getGroups,java.util.Vector,Public,N,Y);
Method(matches$2,boolean,Public,N,Y);
Method(getGroups$2,java.util.Vector,Public,N,Y);
Parameter(setPattern,java.lang.String,);
Parameter(matches,java.lang.String,);
Parameter(getGroups,java.lang.String,);
Parameter(matches$2,java.lang.String,);
Parameter(matches$2,int,);
Parameter(getGroups$2,java.lang.String,);
Parameter(getGroups$2,int,);
EndClass 256
StartClass 257
Class(org.apache.tools.ant.util.regexp.RegexpFactory,N,N,Public);
Method(<init>,void,Public,N,N);
Method(newRegexp,org.apache.tools.ant.util.regexp.Regexp,Public,N,N);
Method(newRegexp$2,org.apache.tools.ant.util.regexp.Regexp,Public,N,N);
Method(createRegexpInstance,org.apache.tools.ant.util.regexp.Regexp,Protected,N,N);
Parameter(newRegexp$2,org.apache.tools.ant.Project,);
Parameter(createRegexpInstance,java.lang.String,);
SuperClass(org.apache.tools.ant.util.regexp.RegexpMatcherFactory);
Generalization(org.apache.tools.ant.util.regexp.RegexpMatcherFactory);
Call(METHOD,org.apache.tools.ant.util.regexp.RegexpFactory,newRegexp --> newRegexp$2,org.apache.tools.ant.util.regexp.RegexpFactory,);
Call(METHOD,org.apache.tools.ant.util.regexp.RegexpFactory,newRegexp$2 --> createRegexpInstance,org.apache.tools.ant.util.regexp.RegexpFactory,);
Call(METHOD,org.apache.tools.ant.util.regexp.RegexpFactory,<init> --> <init>,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,);
Call(METHOD,org.apache.tools.ant.util.regexp.RegexpFactory,newRegexp$2 --> getProperty,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.util.regexp.RegexpFactory,newRegexp$2 --> testAvailability,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,);
Call(METHOD,org.apache.tools.ant.util.regexp.RegexpFactory,newRegexp$2 --> getJavaVersionNumber,org.apache.tools.ant.util.JavaEnvUtils,);
Call(METHOD,org.apache.tools.ant.util.regexp.RegexpFactory,newRegexp$2 --> orCause,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,);
Call(METHOD,org.apache.tools.ant.util.regexp.RegexpFactory,newRegexp$2 --> <init>$3,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.util.regexp.RegexpFactory,createRegexpInstance --> createInstance,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,);
Call(METHOD,org.apache.tools.ant.util.regexp.RegexpFactory,createRegexpInstance --> <init>$2,org.apache.tools.ant.BuildException,);
EndClass 257
StartClass 258
Class(org.apache.tools.ant.util.StringTokenizer,N,N,Public);
Attribute(intraString,java.lang.String,Private,N,N,);
Attribute(pushed,int,Private,N,N,);
Attribute(delims,char[],Private,N,N,);
Attribute(delimsAreTokens,boolean,Private,N,N,);
Attribute(suppressDelims,boolean,Private,N,N,);
Attribute(includeDelims,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setDelims,void,Public,N,N);
Method(setDelimsAreTokens,void,Public,N,N);
Method(setSuppressDelims,void,Public,N,N);
Method(setIncludeDelims,void,Public,N,N);
Method(getToken,java.lang.String,Public,N,N);
Method(getPostToken,java.lang.String,Public,N,N);
Method(isDelim,boolean,Private,N,N);
Parameter(setDelims,java.lang.String,);
Parameter(setDelimsAreTokens,boolean,);
Parameter(setSuppressDelims,boolean,);
Parameter(setIncludeDelims,boolean,);
Parameter(getToken,java.io.Reader,);
Parameter(isDelim,char,);
SuperClass(org.apache.tools.ant.ProjectComponent);
SubClass(org.apache.tools.ant.filters.TokenFilter$StringTokenizer);
Generalization(org.apache.tools.ant.ProjectComponent);
Realization(org.apache.tools.ant.util.Tokenizer);
Call(METHOD,org.apache.tools.ant.util.StringTokenizer,getToken --> isDelim,org.apache.tools.ant.util.StringTokenizer,);
Call(ATTRIBUTE,org.apache.tools.ant.util.StringTokenizer,<init> --> intraString,org.apache.tools.ant.util.StringTokenizer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.StringTokenizer,<init> --> pushed,org.apache.tools.ant.util.StringTokenizer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.StringTokenizer,<init> --> delims,org.apache.tools.ant.util.StringTokenizer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.StringTokenizer,<init> --> delimsAreTokens,org.apache.tools.ant.util.StringTokenizer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.StringTokenizer,<init> --> suppressDelims,org.apache.tools.ant.util.StringTokenizer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.StringTokenizer,<init> --> includeDelims,org.apache.tools.ant.util.StringTokenizer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.StringTokenizer,setDelims --> delims,org.apache.tools.ant.util.StringTokenizer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.StringTokenizer,setDelimsAreTokens --> delimsAreTokens,org.apache.tools.ant.util.StringTokenizer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.StringTokenizer,setSuppressDelims --> suppressDelims,org.apache.tools.ant.util.StringTokenizer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.StringTokenizer,setIncludeDelims --> includeDelims,org.apache.tools.ant.util.StringTokenizer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.StringTokenizer,getToken --> pushed,org.apache.tools.ant.util.StringTokenizer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.StringTokenizer,getToken --> delimsAreTokens,org.apache.tools.ant.util.StringTokenizer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.StringTokenizer,getToken --> includeDelims,org.apache.tools.ant.util.StringTokenizer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.StringTokenizer,getToken --> intraString,org.apache.tools.ant.util.StringTokenizer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.StringTokenizer,getToken --> pushed,org.apache.tools.ant.util.StringTokenizer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.StringTokenizer,getToken --> intraString,org.apache.tools.ant.util.StringTokenizer,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.StringTokenizer,getPostToken --> suppressDelims,org.apache.tools.ant.util.StringTokenizer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.StringTokenizer,getPostToken --> includeDelims,org.apache.tools.ant.util.StringTokenizer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.StringTokenizer,getPostToken --> intraString,org.apache.tools.ant.util.StringTokenizer,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.StringTokenizer,isDelim --> delims,org.apache.tools.ant.util.StringTokenizer,READ);
Call(METHOD,org.apache.tools.ant.util.StringTokenizer,<init> --> <init>,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.util.StringTokenizer,setDelims --> resolveBackSlash,org.apache.tools.ant.util.StringUtils,);
EndClass 258
StartClass 259
Class(org.apache.tools.ant.util.FileTokenizer,N,N,Public);
Method(<init>,void,Public,N,N);
Method(getToken,java.lang.String,Public,N,N);
Method(getPostToken,java.lang.String,Public,N,N);
Parameter(getToken,java.io.Reader,);
SuperClass(org.apache.tools.ant.ProjectComponent);
SubClass(org.apache.tools.ant.filters.TokenFilter$FileTokenizer);
Generalization(org.apache.tools.ant.ProjectComponent);
Realization(org.apache.tools.ant.util.Tokenizer);
Call(METHOD,org.apache.tools.ant.util.FileTokenizer,<init> --> <init>,org.apache.tools.ant.ProjectComponent,);
Call(METHOD,org.apache.tools.ant.util.FileTokenizer,getToken --> readFully,org.apache.tools.ant.util.FileUtils,);
EndClass 259
StartClass 260
Class(org.apache.tools.ant.util.regexp.RegexpMatcherFactory,N,N,Public);
Attribute(class$org$apache$tools$ant$util$regexp$RegexpMatcherFactory,java.lang.Class,Public,Y,N,);
Attribute(class$org$apache$tools$ant$util$regexp$RegexpMatcher,java.lang.Class,Public,Y,N,);
Method(<init>,void,Public,N,N);
Method(newRegexpMatcher,org.apache.tools.ant.util.regexp.RegexpMatcher,Public,N,N);
Method(newRegexpMatcher$2,org.apache.tools.ant.util.regexp.RegexpMatcher,Public,N,N);
Method(orCause,java.lang.Throwable,Public,Y,N);
Method(createInstance,org.apache.tools.ant.util.regexp.RegexpMatcher,Protected,N,N);
Method(testAvailability,void,Protected,N,N);
Method(class$,java.lang.Class,Public,Y,N);
Parameter(newRegexpMatcher$2,org.apache.tools.ant.Project,);
Parameter(orCause,java.lang.Throwable,);
Parameter(orCause,org.apache.tools.ant.BuildException,);
Parameter(orCause,boolean,);
Parameter(createInstance,java.lang.String,);
Parameter(testAvailability,java.lang.String,);
Parameter(class$,java.lang.String,);
SubClass(org.apache.tools.ant.util.regexp.RegexpFactory);
Call(METHOD,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,newRegexpMatcher --> newRegexpMatcher$2,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,);
Call(METHOD,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,newRegexpMatcher$2 --> createInstance,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,);
Call(METHOD,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,newRegexpMatcher$2 --> testAvailability,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,);
Call(METHOD,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,newRegexpMatcher$2 --> orCause,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,);
Call(METHOD,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,createInstance --> class$,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,);
Call(ATTRIBUTE,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,createInstance --> class$org$apache$tools$ant$util$regexp$RegexpMatcherFactory,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,createInstance --> class$org$apache$tools$ant$util$regexp$RegexpMatcher,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,READ);
Call(ATTRIBUTE,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,createInstance --> class$org$apache$tools$ant$util$regexp$RegexpMatcherFactory,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,WRITE);
Call(ATTRIBUTE,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,createInstance --> class$org$apache$tools$ant$util$regexp$RegexpMatcher,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,WRITE);
Call(METHOD,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,newRegexpMatcher$2 --> getProperty,org.apache.tools.ant.Project,);
Call(METHOD,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,newRegexpMatcher$2 --> getJavaVersionNumber,org.apache.tools.ant.util.JavaEnvUtils,);
Call(METHOD,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,newRegexpMatcher$2 --> <init>$3,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,orCause --> getException,org.apache.tools.ant.BuildException,);
Call(METHOD,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,createInstance --> newInstance$2,org.apache.tools.ant.util.ClasspathUtils,);
Call(METHOD,org.apache.tools.ant.util.regexp.RegexpMatcherFactory,testAvailability --> <init>$5,org.apache.tools.ant.BuildException,);
EndClass 260