StartClass 1
Class(com.google.gson.codegen.CodeGen,N,N,Public);
Method(<init>,void,Private,N,N);
Method(getPackage,javax.lang.model.element.PackageElement,Public,Y,N);
Method(adapterName,java.lang.String,Public,Y,N);
Method(rawTypeToString,void,Public,Y,N);
Parameter(getPackage,javax.lang.model.element.Element,);
Parameter(adapterName,javax.lang.model.element.TypeElement,);
Parameter(adapterName,java.lang.String,);
Parameter(rawTypeToString,com.google.gson.codegen.StringBuilder,);
Parameter(rawTypeToString,javax.lang.model.element.TypeElement,);
Parameter(rawTypeToString,com.google.gson.codegen.char,);
Call(METHOD,com.google.gson.codegen.CodeGen,getPackage --> getKind,javax.lang.model.element.Element,);
Call(METHOD,com.google.gson.codegen.CodeGen,getPackage --> getEnclosingElement,javax.lang.model.element.Element,);
Call(METHOD,com.google.gson.codegen.CodeGen,adapterName --> rawTypeToString,com.google.gson.codegen.CodeGen,);
Call(METHOD,com.google.gson.codegen.CodeGen,adapterName --> append,com.google.gson.codegen.StringBuilder,);
Call(METHOD,com.google.gson.codegen.CodeGen,adapterName --> toString,com.google.gson.codegen.StringBuilder,);
Call(METHOD,com.google.gson.codegen.CodeGen,rawTypeToString --> getPackage,com.google.gson.codegen.CodeGen,);
Call(METHOD,com.google.gson.codegen.CodeGen,rawTypeToString --> getQualifiedName,com.google.gson.codegen.CodeGen,);
Call(METHOD,com.google.gson.codegen.CodeGen,rawTypeToString --> toString,com.google.gson.codegen.CodeGen,);
Call(METHOD,com.google.gson.codegen.CodeGen,rawTypeToString --> getQualifiedName,javax.lang.model.element.TypeElement,);
Call(METHOD,com.google.gson.codegen.CodeGen,rawTypeToString --> toString,javax.lang.model.element.TypeElement,);
Call(METHOD,com.google.gson.codegen.CodeGen,rawTypeToString --> append,com.google.gson.codegen.StringBuilder,);
Call(METHOD,com.google.gson.codegen.CodeGen,rawTypeToString --> append,com.google.gson.codegen.StringBuilder,);
Call(METHOD,com.google.gson.codegen.CodeGen,rawTypeToString --> append,com.google.gson.codegen.StringBuilder,);
Call(METHOD,com.google.gson.codegen.CodeGen,rawTypeToString --> substring,java.lang.String,);
Call(METHOD,com.google.gson.codegen.CodeGen,rawTypeToString --> length,java.lang.String,);
Call(METHOD,com.google.gson.codegen.CodeGen,rawTypeToString --> replace,java.lang.String,);
EndClass 1
StartClass 2
Class(com.google.gson.codegen.GeneratedTypeAdapterProcessor,N,N,Public);
Method(process,boolean,Public,N,N);
Method(writeAdapter,void,Private,N,N);
Method(<init>,void,Public,N,N);
Parameter(process,java.util.Set,);
Parameter(process,javax.annotation.processing.RoundEnvironment,);
Parameter(writeAdapter,javax.lang.model.element.TypeElement,);
SuperClass(javax.annotation.processing.AbstractProcessor);
Generalization(javax.annotation.processing.AbstractProcessor);
Call(METHOD,com.google.gson.codegen.GeneratedTypeAdapterProcessor,process --> println,null,);
Call(METHOD,com.google.gson.codegen.GeneratedTypeAdapterProcessor,process --> getElementsAnnotatedWith,javax.annotation.processing.RoundEnvironment,);
Call(METHOD,com.google.gson.codegen.GeneratedTypeAdapterProcessor,process --> writeAdapter,com.google.gson.codegen.GeneratedTypeAdapterProcessor,);
Call(METHOD,com.google.gson.codegen.GeneratedTypeAdapterProcessor,process --> getMessager,null,);
Call(METHOD,com.google.gson.codegen.GeneratedTypeAdapterProcessor,process --> printMessage,null,);
Call(METHOD,com.google.gson.codegen.GeneratedTypeAdapterProcessor,process --> getMessage,null,);
Call(METHOD,com.google.gson.codegen.GeneratedTypeAdapterProcessor,writeAdapter --> adapterName,null,);
Call(METHOD,com.google.gson.codegen.GeneratedTypeAdapterProcessor,writeAdapter --> getFiler,null,);
Call(METHOD,com.google.gson.codegen.GeneratedTypeAdapterProcessor,writeAdapter --> createSourceFile,null,);
Call(METHOD,com.google.gson.codegen.GeneratedTypeAdapterProcessor,writeAdapter --> println,null,);
Call(METHOD,com.google.gson.codegen.GeneratedTypeAdapterProcessor,writeAdapter --> getName,javax.tools.JavaFileObject,);
Call(METHOD,com.google.gson.codegen.GeneratedTypeAdapterProcessor,writeAdapter --> openWriter,javax.tools.JavaFileObject,);
Call(METHOD,com.google.gson.codegen.GeneratedTypeAdapterProcessor,writeAdapter --> addPackage,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.GeneratedTypeAdapterProcessor,writeAdapter --> getPackage,null,);
Call(METHOD,com.google.gson.codegen.GeneratedTypeAdapterProcessor,writeAdapter --> getQualifiedName,null,);
Call(METHOD,com.google.gson.codegen.GeneratedTypeAdapterProcessor,writeAdapter --> toString,null,);
Call(METHOD,com.google.gson.codegen.GeneratedTypeAdapterProcessor,writeAdapter --> beginType,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.GeneratedTypeAdapterProcessor,writeAdapter --> endType,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.GeneratedTypeAdapterProcessor,writeAdapter --> close,com.google.gson.codegen.JavaWriter,);
EndClass 2
StartClass 3
Class(javax.annotation.processing.AbstractProcessor,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.codegen.GeneratedTypeAdapterProcessor);
EndClass 3
StartClass 4
Class(com.google.gson.codegen.JavaWriter,N,N,Public);
Attribute(TYPE_PATTERN,java.util.regex.Pattern,Private,Y,Y,);
Attribute(INDENT,java.lang.String,Private,Y,Y,);
Attribute(importedTypes,java.util.Map,Private,N,Y,);
Attribute(packagePrefix,java.lang.String,Private,N,N,);
Attribute(scopes,java.util.List,Private,N,Y,);
Attribute(out,java.io.Writer,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(addPackage,void,Public,N,N);
Method(addImport,void,Public,N,N);
Method(addImport$2,void,Public,N,N);
Method(type,void,Private,N,N);
Method(beginType,void,Public,N,N);
Method(beginType$2,void,Public,N,N);
Method(endType,void,Public,N,N);
Method(field,void,Public,N,N);
Method(field$2,void,Public,N,N);
Method(beginMethod,void,Public,N,N);
Method(annotation,void,Public,N,N);
Method(annotation$2,void,Public,N,N);
Method(statement,void,Public,N,N);
Method(beginControlFlow,void,Public,N,N);
Method(nextControlFlow,void,Public,N,N);
Method(endControlFlow,void,Public,N,N);
Method(endControlFlow$2,void,Public,N,N);
Method(endMethod,void,Public,N,N);
Method(stringLiteral,java.lang.String,Public,Y,N);
Method(close,void,Public,N,N);
Method(modifiers,void,Private,N,N);
Method(indent,void,Private,N,N);
Method(checkInMethod,void,Private,N,N);
Method(pushScope,void,Private,N,N);
Method(peekScope,com.google.gson.codegen.Scope,Private,N,N);
Method(popScope,com.google.gson.codegen.Scope,Private,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,java.io.Writer,);
Parameter(addPackage,java.lang.String,);
Parameter(addImport,java.lang.Class,);
Parameter(addImport$2,java.lang.String,);
Parameter(type,java.lang.String,);
Parameter(beginType,java.lang.String,);
Parameter(beginType,java.lang.String,);
Parameter(beginType,int,);
Parameter(beginType$2,java.lang.String,);
Parameter(beginType$2,java.lang.String,);
Parameter(beginType$2,int,);
Parameter(beginType$2,java.lang.String,);
Parameter(field,java.lang.String,);
Parameter(field,java.lang.String,);
Parameter(field,int,);
Parameter(field$2,java.lang.String,);
Parameter(field$2,java.lang.String,);
Parameter(field$2,int,);
Parameter(field$2,java.lang.String,);
Parameter(beginMethod,java.lang.String,);
Parameter(beginMethod,java.lang.String,);
Parameter(beginMethod,int,);
Parameter(annotation,java.lang.String,);
Parameter(annotation$2,java.lang.Class,);
Parameter(statement,java.lang.String,);
Parameter(beginControlFlow,java.lang.String,);
Parameter(nextControlFlow,java.lang.String,);
Parameter(endControlFlow$2,java.lang.String,);
Parameter(stringLiteral,java.lang.String,);
Parameter(modifiers,int,);
Parameter(pushScope,com.google.gson.codegen.Scope,);
Composition(java.io.Writer);
Call(ATTRIBUTE,com.google.gson.codegen.JavaWriter,<init> --> out,java.io.Writer,READ);
Call(METHOD,com.google.gson.codegen.JavaWriter,addPackage --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,addPackage --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,addPackage --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,addImport --> addImport,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,addImport --> getName,java.lang.Class,);
Call(METHOD,com.google.gson.codegen.JavaWriter,addImport$2 --> matcher,java.util.regex.Pattern,);
Call(METHOD,com.google.gson.codegen.JavaWriter,addImport$2 --> matches,java.util.regex.Matcher,);
Call(METHOD,com.google.gson.codegen.JavaWriter,addImport$2 --> put,java.util.Map,);
Call(METHOD,com.google.gson.codegen.JavaWriter,addImport$2 --> group,java.util.regex.Matcher,);
Call(METHOD,com.google.gson.codegen.JavaWriter,addImport$2 --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,addImport$2 --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,addImport$2 --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,type --> matcher,java.util.regex.Pattern,);
Call(METHOD,com.google.gson.codegen.JavaWriter,type --> find,java.util.regex.Matcher,);
Call(METHOD,com.google.gson.codegen.JavaWriter,type --> start,java.util.regex.Matcher,);
Call(METHOD,com.google.gson.codegen.JavaWriter,type --> length,java.lang.String,);
Call(METHOD,com.google.gson.codegen.JavaWriter,type --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,type --> group,java.util.regex.Matcher,);
Call(METHOD,com.google.gson.codegen.JavaWriter,type --> get,java.util.Map,);
Call(METHOD,com.google.gson.codegen.JavaWriter,type --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,type --> startsWith,java.lang.String,);
Call(METHOD,com.google.gson.codegen.JavaWriter,type --> indexOf,java.lang.String,);
Call(METHOD,com.google.gson.codegen.JavaWriter,type --> length,java.lang.String,);
Call(METHOD,com.google.gson.codegen.JavaWriter,type --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,type --> substring,java.lang.String,);
Call(METHOD,com.google.gson.codegen.JavaWriter,type --> length,java.lang.String,);
Call(METHOD,com.google.gson.codegen.JavaWriter,type --> startsWith,java.lang.String,);
Call(METHOD,com.google.gson.codegen.JavaWriter,type --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,type --> substring,java.lang.String,);
Call(METHOD,com.google.gson.codegen.JavaWriter,type --> length,java.lang.String,);
Call(METHOD,com.google.gson.codegen.JavaWriter,type --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,type --> end,java.util.regex.Matcher,);
Call(ATTRIBUTE,com.google.gson.codegen.JavaWriter,type --> importedTypes,java.util.Map,READ);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginType --> beginType,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginType$2 --> indent,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginType$2 --> modifiers,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginType$2 --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginType$2 --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginType$2 --> type,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginType$2 --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginType$2 --> indent,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginType$2 --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginType$2 --> type,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginType$2 --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginType$2 --> indent,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginType$2 --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginType$2 --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginType$2 --> type,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginType$2 --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginType$2 --> pushScope,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,endType --> popScope,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,endType --> indent,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,endType --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,field --> field,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,field$2 --> indent,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,field$2 --> modifiers,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,field$2 --> type,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,field$2 --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,field$2 --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,field$2 --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,field$2 --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,field$2 --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginMethod --> indent,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginMethod --> modifiers,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginMethod --> type,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginMethod --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginMethod --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginMethod --> type,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginMethod --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginMethod --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginMethod --> type,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginMethod --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginMethod --> type,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginMethod --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginMethod --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginMethod --> pushScope,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginMethod --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginMethod --> pushScope,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,annotation --> indent,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,annotation --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,annotation --> type,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,annotation --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,annotation$2 --> annotation,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,annotation$2 --> getName,java.lang.Class,);
Call(METHOD,com.google.gson.codegen.JavaWriter,statement --> checkInMethod,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,statement --> indent,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,statement --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,statement --> format,null,);
Call(METHOD,com.google.gson.codegen.JavaWriter,statement --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginControlFlow --> checkInMethod,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginControlFlow --> indent,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginControlFlow --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginControlFlow --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,beginControlFlow --> pushScope,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,nextControlFlow --> popScope,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,nextControlFlow --> indent,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,nextControlFlow --> pushScope,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,nextControlFlow --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,nextControlFlow --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,nextControlFlow --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,endControlFlow --> endControlFlow,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,endControlFlow$2 --> popScope,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,endControlFlow$2 --> indent,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,endControlFlow$2 --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,endControlFlow$2 --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,endControlFlow$2 --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,endControlFlow$2 --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,endMethod --> popScope,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,endMethod --> indent,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,endMethod --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,stringLiteral --> append,com.google.gson.codegen.StringBuilder,);
Call(METHOD,com.google.gson.codegen.JavaWriter,stringLiteral --> length,java.lang.String,);
Call(METHOD,com.google.gson.codegen.JavaWriter,stringLiteral --> charAt,java.lang.String,);
Call(METHOD,com.google.gson.codegen.JavaWriter,stringLiteral --> append,com.google.gson.codegen.StringBuilder,);
Call(METHOD,com.google.gson.codegen.JavaWriter,stringLiteral --> append,com.google.gson.codegen.StringBuilder,);
Call(METHOD,com.google.gson.codegen.JavaWriter,stringLiteral --> append,com.google.gson.codegen.StringBuilder,);
Call(METHOD,com.google.gson.codegen.JavaWriter,stringLiteral --> append,com.google.gson.codegen.StringBuilder,);
Call(METHOD,com.google.gson.codegen.JavaWriter,stringLiteral --> append,com.google.gson.codegen.StringBuilder,);
Call(METHOD,com.google.gson.codegen.JavaWriter,stringLiteral --> append,com.google.gson.codegen.StringBuilder,);
Call(METHOD,com.google.gson.codegen.JavaWriter,stringLiteral --> append,com.google.gson.codegen.StringBuilder,);
Call(METHOD,com.google.gson.codegen.JavaWriter,stringLiteral --> append,com.google.gson.codegen.StringBuilder,);
Call(METHOD,com.google.gson.codegen.JavaWriter,stringLiteral --> append,com.google.gson.codegen.StringBuilder,);
Call(METHOD,com.google.gson.codegen.JavaWriter,stringLiteral --> toString,com.google.gson.codegen.StringBuilder,);
Call(METHOD,com.google.gson.codegen.JavaWriter,close --> close,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,modifiers --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,modifiers --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,modifiers --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,modifiers --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,modifiers --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,modifiers --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,modifiers --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,modifiers --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,modifiers --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,indent --> size,java.util.List,);
Call(METHOD,com.google.gson.codegen.JavaWriter,indent --> write,java.io.Writer,);
Call(METHOD,com.google.gson.codegen.JavaWriter,checkInMethod --> peekScope,com.google.gson.codegen.JavaWriter,);
Call(METHOD,com.google.gson.codegen.JavaWriter,pushScope --> add,java.util.List,);
Call(METHOD,com.google.gson.codegen.JavaWriter,peekScope --> get,java.util.List,);
Call(METHOD,com.google.gson.codegen.JavaWriter,peekScope --> size,java.util.List,);
Call(METHOD,com.google.gson.codegen.JavaWriter,popScope --> remove,java.util.List,);
Call(METHOD,com.google.gson.codegen.JavaWriter,popScope --> size,java.util.List,);
EndClass 4
StartClass 5
Class(java.io.Writer,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.internal.Streams.AppendableWriter);
EndClass 5
StartClass 6
Class(com.google.gson.internal.Streams.AppendableWriter,N,N,Private);
Attribute(appendable,java.lang.Appendable,Private,N,Y,);
Attribute(currentWrite,com.google.gson.internal.CurrentWrite,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(write,void,Public,N,N);
Method(write$2,void,Public,N,N);
Method(flush,void,Public,N,N);
Method(close,void,Public,N,N);
Parameter(<init>,java.lang.Appendable,);
Parameter(write,com.google.gson.internal.char[],);
Parameter(write,int,);
Parameter(write,int,);
Parameter(write$2,int,);
SuperClass(java.io.Writer);
Generalization(java.io.Writer);
Composition(com.google.gson.internal.CurrentWrite);
Call(ATTRIBUTE,com.google.gson.internal.Streams.AppendableWriter,<init> --> appendable,java.lang.Appendable,READ);
Call(METHOD,com.google.gson.internal.Streams.AppendableWriter,write --> append,java.lang.Appendable,);
Call(METHOD,com.google.gson.internal.Streams.AppendableWriter,write$2 --> append,java.lang.Appendable,);
EndClass 6
StartClass 7
Class(com.google.gson.internal.CurrentWrite,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 7
StartClass 8
Class(com.google.gson.codegen.JavaWriter.Scope,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 8
StartClass 9
Class(com.google.gson.codegen.functional.CodeGenFunctionalTest,N,N,Public);
Method(testGeneratedJson,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
EndClass 9
StartClass 10
Class(junit.framework.TestCase,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.codegen.functional.CodeGenFunctionalTest);
SubClass(com.google.gson.graph.GraphAdapterBuilderTest);
SubClass(com.google.gson.interceptors.InterceptorTest);
SubClass(com.google.gson.typeadapters.PostConstructAdapterFactoryTest);
SubClass(com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest);
SubClass(com.google.gson.typeadapters.UtcDateTypeAdapterTest);
SubClass(com.google.gson.CommentsTest);
SubClass(com.google.gson.DefaultDateTypeAdapterTest);
SubClass(com.google.gson.DefaultInetAddressTypeAdapterTest);
SubClass(com.google.gson.DefaultMapJsonSerializerTest);
SubClass(com.google.gson.ExposeAnnotationExclusionStrategyTest);
SubClass(com.google.gson.FieldAttributesTest);
SubClass(com.google.gson.functional.ArrayTest);
SubClass(com.google.gson.functional.CircularReferenceTest);
SubClass(com.google.gson.functional.CollectionTest);
SubClass(com.google.gson.functional.ConcurrencyTest);
SubClass(com.google.gson.functional.CustomDeserializerTest);
SubClass(com.google.gson.functional.CustomSerializerTest);
SubClass(com.google.gson.functional.CustomTypeAdaptersTest);
SubClass(com.google.gson.functional.DefaultTypeAdaptersTest);
SubClass(com.google.gson.functional.DelegateTypeAdapterTest);
SubClass(com.google.gson.functional.EnumTest);
SubClass(com.google.gson.functional.EscapingTest);
SubClass(com.google.gson.functional.ExclusionStrategyFunctionalTest);
SubClass(com.google.gson.functional.ExposeFieldsTest);
SubClass(com.google.gson.functional.FieldExclusionTest);
SubClass(com.google.gson.functional.FieldNamingTest);
SubClass(com.google.gson.functional.GsonVersionDiagnosticsTest);
SubClass(com.google.gson.functional.InheritanceTest);
SubClass(com.google.gson.functional.InstanceCreatorTest);
SubClass(com.google.gson.functional.InterfaceTest);
SubClass(com.google.gson.functional.InternationalizationTest);
SubClass(com.google.gson.functional.JavaUtilConcurrentAtomicTest);
SubClass(com.google.gson.functional.JavaUtilTest);
SubClass(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest);
SubClass(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest);
SubClass(com.google.gson.functional.JsonAdapterSerializerDeserializerTest);
SubClass(com.google.gson.functional.JsonArrayTest);
SubClass(com.google.gson.functional.JsonParserTest);
SubClass(com.google.gson.functional.JsonTreeTest);
SubClass(com.google.gson.functional.LeniencyTest);
SubClass(com.google.gson.functional.MapAsArrayTypeAdapterTest);
SubClass(com.google.gson.functional.MapTest);
SubClass(com.google.gson.functional.MoreSpecificTypeSerializationTest);
SubClass(com.google.gson.functional.NamingPolicyTest);
SubClass(com.google.gson.functional.NullObjectAndFieldTest);
SubClass(com.google.gson.functional.ObjectTest);
SubClass(com.google.gson.functional.ParameterizedTypesTest);
SubClass(com.google.gson.functional.PrettyPrintingTest);
SubClass(com.google.gson.functional.PrimitiveCharacterTest);
SubClass(com.google.gson.functional.PrimitiveTest);
SubClass(com.google.gson.functional.PrintFormattingTest);
SubClass(com.google.gson.functional.RawSerializationTest);
SubClass(com.google.gson.functional.ReadersWritersTest);
SubClass(com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest);
SubClass(com.google.gson.functional.SecurityTest);
SubClass(com.google.gson.functional.SerializedNameTest);
SubClass(com.google.gson.functional.StreamingTypeAdaptersTest);
SubClass(com.google.gson.functional.StringTest);
SubClass(com.google.gson.functional.ThrowableFunctionalTest);
SubClass(com.google.gson.functional.TreeTypeAdaptersTest);
SubClass(com.google.gson.functional.TypeAdapterPrecedenceTest);
SubClass(com.google.gson.functional.TypeHierarchyAdapterTest);
SubClass(com.google.gson.functional.TypeVariableTest);
SubClass(com.google.gson.functional.UncategorizedTest);
SubClass(com.google.gson.functional.VersioningTest);
SubClass(com.google.gson.GenericArrayTypeTest);
SubClass(com.google.gson.GsonBuilderTest);
SubClass(com.google.gson.GsonTest);
SubClass(com.google.gson.GsonTypeAdapterTest);
SubClass(com.google.gson.InnerClassExclusionStrategyTest);
SubClass(com.google.gson.internal.bind.JsonElementReaderTest);
SubClass(com.google.gson.internal.bind.JsonTreeReaderTest);
SubClass(com.google.gson.internal.bind.JsonTreeWriterTest);
SubClass(com.google.gson.internal.bind.RecursiveTypesResolveTest);
SubClass(com.google.gson.internal.GsonTypesTest);
SubClass(com.google.gson.internal.LazilyParsedNumberTest);
SubClass(com.google.gson.internal.LinkedHashTreeMapTest);
SubClass(com.google.gson.internal.LinkedTreeMapTest);
SubClass(com.google.gson.internal.UnsafeAllocatorInstantiationTest);
SubClass(com.google.gson.JavaSerializationTest);
SubClass(com.google.gson.JsonArrayTest);
SubClass(com.google.gson.JsonNullTest);
SubClass(com.google.gson.JsonObjectTest);
SubClass(com.google.gson.JsonParserTest);
SubClass(com.google.gson.JsonPrimitiveTest);
SubClass(com.google.gson.JsonStreamParserTest);
SubClass(com.google.gson.LongSerializationPolicyTest);
SubClass(com.google.gson.metrics.PerformanceTest);
SubClass(com.google.gson.MixedStreamTest);
SubClass(com.google.gson.ObjectTypeAdapterTest);
SubClass(com.google.gson.OverrideCoreTypeAdaptersTest);
SubClass(com.google.gson.ParameterizedTypeTest);
SubClass(com.google.gson.reflect.TypeTokenTest);
SubClass(com.google.gson.regression.JsonAdapterNullSafeTest);
SubClass(com.google.gson.stream.JsonReaderTest);
SubClass(com.google.gson.stream.JsonWriterTest);
SubClass(com.google.gson.VersionExclusionStrategyTest);
SubClass(com.google.gson.protobuf.functional.ProtosWithAnnotationsTest);
SubClass(com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest);
SubClass(com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest);
EndClass 10
StartClass 11
Class(com.google.gson.graph.GraphAdapterBuilderTest,N,N,Public);
Method(testSerialization,void,Public,N,N);
Method(testDeserialization,void,Public,N,N);
Method(testSerializationDirectSelfReference,void,Public,N,N);
Method(testDeserializationDirectSelfReference,void,Public,N,N);
Method(testSerializeListOfLists,void,Public,N,N);
Method(testDeserializeListOfLists,void,Public,N,N);
Method(testSerializationWithMultipleTypes,void,Public,N,N);
Method(testDeserializationWithMultipleTypes,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerialization --> addType,com.google.gson.graph.GraphAdapterBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerialization --> registerOn,com.google.gson.graph.GraphAdapterBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerialization --> assertEquals,com.google.gson.graph.GraphAdapterBuilderTest,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerialization --> replace,com.google.gson.Gson,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserialization --> addType,com.google.gson.graph.GraphAdapterBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserialization --> registerOn,com.google.gson.graph.GraphAdapterBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserialization --> assertEquals,com.google.gson.graph.GraphAdapterBuilderTest,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserialization --> assertEquals,com.google.gson.graph.GraphAdapterBuilderTest,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserialization --> assertEquals,com.google.gson.graph.GraphAdapterBuilderTest,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserialization --> assertSame,com.google.gson.graph.GraphAdapterBuilderTest,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerializationDirectSelfReference --> addType,com.google.gson.graph.GraphAdapterBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerializationDirectSelfReference --> registerOn,com.google.gson.graph.GraphAdapterBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerializationDirectSelfReference --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerializationDirectSelfReference --> assertEquals,com.google.gson.graph.GraphAdapterBuilderTest,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerializationDirectSelfReference --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerializationDirectSelfReference --> replace,com.google.gson.Gson,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializationDirectSelfReference --> addType,com.google.gson.graph.GraphAdapterBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializationDirectSelfReference --> registerOn,com.google.gson.graph.GraphAdapterBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializationDirectSelfReference --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializationDirectSelfReference --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializationDirectSelfReference --> assertEquals,com.google.gson.graph.GraphAdapterBuilderTest,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializationDirectSelfReference --> assertSame,com.google.gson.graph.GraphAdapterBuilderTest,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerializeListOfLists --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerializeListOfLists --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerializeListOfLists --> add,java.util.List,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerializeListOfLists --> add,java.util.List,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerializeListOfLists --> addType,com.google.gson.graph.GraphAdapterBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerializeListOfLists --> addType,com.google.gson.graph.GraphAdapterBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerializeListOfLists --> registerOn,com.google.gson.graph.GraphAdapterBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerializeListOfLists --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerializeListOfLists --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerializeListOfLists --> assertEquals,com.google.gson.graph.GraphAdapterBuilderTest,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerializeListOfLists --> replace,java.lang.String,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializeListOfLists --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializeListOfLists --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializeListOfLists --> addType,com.google.gson.graph.GraphAdapterBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializeListOfLists --> addType,com.google.gson.graph.GraphAdapterBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializeListOfLists --> registerOn,com.google.gson.graph.GraphAdapterBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializeListOfLists --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializeListOfLists --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializeListOfLists --> assertEquals,com.google.gson.graph.GraphAdapterBuilderTest,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializeListOfLists --> size,java.util.List,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializeListOfLists --> assertSame,com.google.gson.graph.GraphAdapterBuilderTest,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializeListOfLists --> get,java.util.List,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializeListOfLists --> assertEquals,com.google.gson.graph.GraphAdapterBuilderTest,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializeListOfLists --> emptyList,null,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializeListOfLists --> get,java.util.List,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerializationWithMultipleTypes --> addType,com.google.gson.graph.GraphAdapterBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerializationWithMultipleTypes --> addType,com.google.gson.graph.GraphAdapterBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerializationWithMultipleTypes --> registerOn,com.google.gson.graph.GraphAdapterBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerializationWithMultipleTypes --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerializationWithMultipleTypes --> assertEquals,com.google.gson.graph.GraphAdapterBuilderTest,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerializationWithMultipleTypes --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testSerializationWithMultipleTypes --> replace,com.google.gson.Gson,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializationWithMultipleTypes --> addType,com.google.gson.graph.GraphAdapterBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializationWithMultipleTypes --> addType,com.google.gson.graph.GraphAdapterBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializationWithMultipleTypes --> registerOn,com.google.gson.graph.GraphAdapterBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializationWithMultipleTypes --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializationWithMultipleTypes --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializationWithMultipleTypes --> assertEquals,com.google.gson.graph.GraphAdapterBuilderTest,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializationWithMultipleTypes --> get,com.google.gson.graph.Company,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializationWithMultipleTypes --> assertEquals,com.google.gson.graph.GraphAdapterBuilderTest,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializationWithMultipleTypes --> assertEquals,com.google.gson.graph.GraphAdapterBuilderTest,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializationWithMultipleTypes --> get,com.google.gson.graph.Company,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializationWithMultipleTypes --> assertEquals,com.google.gson.graph.GraphAdapterBuilderTest,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest,testDeserializationWithMultipleTypes --> assertEquals,com.google.gson.graph.GraphAdapterBuilderTest,);
EndClass 11
StartClass 12
Class(com.google.gson.graph.GraphAdapterBuilder,N,N,Public);
Attribute(instanceCreators,java.util.Map,Private,N,Y,);
Attribute(constructorConstructor,com.google.gson.internal.ConstructorConstructor,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(addType,com.google.gson.graph.GraphAdapterBuilder,Public,N,N);
Method(createInstance,java.lang.Object,Public,N,N);
Method(addType$2,com.google.gson.graph.GraphAdapterBuilder,Public,N,N);
Method(registerOn,void,Public,N,N);
Parameter(addType,java.lang.reflect.Type,);
Parameter(createInstance,java.lang.reflect.Type,);
Parameter(addType$2,java.lang.reflect.Type,);
Parameter(addType$2,com.google.gson.InstanceCreator,);
Parameter(registerOn,com.google.gson.GsonBuilder,);
Composition(com.google.gson.internal.ConstructorConstructor);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder,addType --> get,com.google.gson.internal.ConstructorConstructor,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder,addType --> get,null,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder,createInstance --> construct,null,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder,createInstance --> addType,com.google.gson.graph.GraphAdapterBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder,addType$2 --> put,java.util.Map,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder,registerOn --> registerTypeAdapterFactory,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder,registerOn --> entrySet,java.util.Map,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder,registerOn --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder,registerOn --> getKey,null,);
EndClass 12
StartClass 13
Class(com.google.gson.internal.ConstructorConstructor,N,N,Public);
Attribute(instanceCreators,java.util.Map,Private,N,Y,);
Attribute(accessor,com.google.gson.internal.reflect.ReflectionAccessor,Private,N,Y,);
Attribute(unsafeAllocator,com.google.gson.internal.UnsafeAllocator,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(get,com.google.gson.internal.ObjectConstructor,Public,N,N);
Method(construct,com.google.gson.internal.T,Public,N,N);
Method(construct$2,com.google.gson.internal.T,Public,N,N);
Method(newDefaultConstructor,com.google.gson.internal.ObjectConstructor,Public,N,N);
Method(construct$3,com.google.gson.internal.T,Public,N,N);
Method(newDefaultImplementationConstructor,com.google.gson.internal.ObjectConstructor,Public,N,N);
Method(construct$4,com.google.gson.internal.T,Public,N,N);
Method(construct$5,com.google.gson.internal.T,Public,N,N);
Method(construct$6,com.google.gson.internal.T,Public,N,N);
Method(construct$7,com.google.gson.internal.T,Public,N,N);
Method(construct$8,com.google.gson.internal.T,Public,N,N);
Method(construct$9,com.google.gson.internal.T,Public,N,N);
Method(construct$10,com.google.gson.internal.T,Public,N,N);
Method(construct$11,com.google.gson.internal.T,Public,N,N);
Method(construct$12,com.google.gson.internal.T,Public,N,N);
Method(construct$13,com.google.gson.internal.T,Public,N,N);
Method(newUnsafeAllocator,com.google.gson.internal.ObjectConstructor,Public,N,N);
Method(construct$14,com.google.gson.internal.T,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Parameter(<init>,java.util.Map,);
Parameter(get,com.google.gson.reflect.TypeToken,);
Parameter(newDefaultConstructor,java.lang.Class,);
Parameter(newDefaultImplementationConstructor,java.lang.reflect.Type,);
Parameter(newDefaultImplementationConstructor,java.lang.Class,);
Parameter(newUnsafeAllocator,java.lang.reflect.Type,);
Parameter(newUnsafeAllocator,java.lang.Class,);
Composition(com.google.gson.internal.reflect.ReflectionAccessor);
Composition(com.google.gson.internal.UnsafeAllocator);
Call(ATTRIBUTE,com.google.gson.internal.ConstructorConstructor,<init> --> instanceCreators,java.util.Map,READ);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,get --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,get --> getRawType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,get --> get,java.util.Map,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,construct --> createInstance,null,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,construct --> get,java.util.Map,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,construct$2 --> createInstance,null,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,construct$2 --> newDefaultConstructor,com.google.gson.internal.ConstructorConstructor,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,construct$2 --> newDefaultImplementationConstructor,com.google.gson.internal.ConstructorConstructor,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,construct$2 --> newUnsafeAllocator,com.google.gson.internal.ConstructorConstructor,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,newDefaultConstructor --> getDeclaredConstructor,java.lang.Class,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,newDefaultConstructor --> isAccessible,java.lang.reflect.Constructor,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,newDefaultConstructor --> makeAccessible,com.google.gson.internal.reflect.ReflectionAccessor,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,construct$3 --> newInstance,null,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,construct$3 --> getTargetException,null,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,newDefaultImplementationConstructor --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,newDefaultImplementationConstructor --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,construct$4 --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,construct$5 --> getActualTypeArguments,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,construct$5 --> noneOf,null,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,construct$5 --> toString,null,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,construct$5 --> toString,null,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,construct$5 --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,construct$6 --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,construct$8 --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,construct$8 --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,construct$9 --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,construct$10 --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,construct$11 --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,construct$11 --> get,null,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,construct$11 --> getActualTypeArguments,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,construct$11 --> getRawType,null,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,newUnsafeAllocator --> create,null,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,construct$14 --> newInstance,com.google.gson.internal.UnsafeAllocator,);
Call(METHOD,com.google.gson.internal.ConstructorConstructor,toString --> toString,java.util.Map,);
EndClass 13
StartClass 14
Class(com.google.gson.internal.reflect.ReflectionAccessor,N,N,Public);
Attribute(instance,com.google.gson.internal.reflect.ReflectionAccessor,Private,Y,Y,);
Method(makeAccessible,void,Public,N,Y);
Method(getInstance,com.google.gson.internal.reflect.ReflectionAccessor,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(makeAccessible,java.lang.reflect.AccessibleObject,);
SubClass(com.google.gson.internal.reflect.PreJava9ReflectionAccessor);
SubClass(com.google.gson.internal.reflect.UnsafeReflectionAccessor);
Composition(com.google.gson.internal.reflect.ReflectionAccessor);
EndClass 14
StartClass 15
Class(com.google.gson.internal.reflect.PreJava9ReflectionAccessor,N,N,Public);
Method(makeAccessible,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(makeAccessible,java.lang.reflect.AccessibleObject,);
SuperClass(com.google.gson.internal.reflect.ReflectionAccessor);
Generalization(com.google.gson.internal.reflect.ReflectionAccessor);
Call(METHOD,com.google.gson.internal.reflect.PreJava9ReflectionAccessor,makeAccessible --> setAccessible,java.lang.reflect.AccessibleObject,);
EndClass 15
StartClass 16
Class(com.google.gson.internal.reflect.UnsafeReflectionAccessor,N,N,Public);
Attribute(unsafeClass,java.lang.Class,Private,Y,N,);
Attribute(theUnsafe,java.lang.Object,Private,N,Y,);
Attribute(overrideField,java.lang.reflect.Field,Private,N,Y,);
Method(makeAccessible,void,Public,N,N);
Method(makeAccessibleWithUnsafe,boolean,Public,N,N);
Method(getUnsafeInstance,java.lang.Object,Private,Y,N);
Method(getOverrideField,java.lang.reflect.Field,Private,Y,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(makeAccessible,java.lang.reflect.AccessibleObject,);
Parameter(makeAccessibleWithUnsafe,java.lang.reflect.AccessibleObject,);
SuperClass(com.google.gson.internal.reflect.ReflectionAccessor);
Generalization(com.google.gson.internal.reflect.ReflectionAccessor);
Call(METHOD,com.google.gson.internal.reflect.UnsafeReflectionAccessor,makeAccessible --> makeAccessibleWithUnsafe,com.google.gson.internal.reflect.UnsafeReflectionAccessor,);
Call(METHOD,com.google.gson.internal.reflect.UnsafeReflectionAccessor,makeAccessible --> setAccessible,java.lang.reflect.AccessibleObject,);
Call(METHOD,com.google.gson.internal.reflect.UnsafeReflectionAccessor,makeAccessibleWithUnsafe --> getMethod,java.lang.Class,);
Call(METHOD,com.google.gson.internal.reflect.UnsafeReflectionAccessor,makeAccessibleWithUnsafe --> invoke,java.lang.reflect.Method,);
Call(METHOD,com.google.gson.internal.reflect.UnsafeReflectionAccessor,makeAccessibleWithUnsafe --> getMethod,java.lang.Class,);
Call(METHOD,com.google.gson.internal.reflect.UnsafeReflectionAccessor,makeAccessibleWithUnsafe --> invoke,java.lang.reflect.Method,);
Call(METHOD,com.google.gson.internal.reflect.UnsafeReflectionAccessor,getUnsafeInstance --> forName,null,);
Call(METHOD,com.google.gson.internal.reflect.UnsafeReflectionAccessor,getUnsafeInstance --> getDeclaredField,java.lang.Class,);
Call(METHOD,com.google.gson.internal.reflect.UnsafeReflectionAccessor,getUnsafeInstance --> setAccessible,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.internal.reflect.UnsafeReflectionAccessor,getUnsafeInstance --> get,java.lang.reflect.Field,);
Call(ATTRIBUTE,com.google.gson.internal.reflect.UnsafeReflectionAccessor,getUnsafeInstance --> unsafeClass,java.lang.Class,WRITE);
Call(METHOD,com.google.gson.internal.reflect.UnsafeReflectionAccessor,getOverrideField --> getDeclaredField,null,);
EndClass 16
StartClass 17
Class(com.google.gson.internal.UnsafeAllocator,N,Y,Public);
Method(newInstance,com.google.gson.internal.T,Public,N,N);
Method(create,com.google.gson.internal.UnsafeAllocator,Public,Y,N);
Method(newInstance$2,com.google.gson.internal.T,Public,N,N);
Method(newInstance$3,com.google.gson.internal.T,Public,N,N);
Method(newInstance$4,com.google.gson.internal.T,Public,N,N);
Method(newInstance$5,com.google.gson.internal.T,Public,N,N);
Method(assertInstantiable,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(newInstance,java.lang.Class,);
Parameter(newInstance$2,java.lang.Class,);
Parameter(newInstance$3,java.lang.Class,);
Parameter(newInstance$4,java.lang.Class,);
Parameter(newInstance$5,java.lang.Class,);
Parameter(assertInstantiable,java.lang.Class,);
Call(METHOD,com.google.gson.internal.UnsafeAllocator,create --> forName,null,);
Call(METHOD,com.google.gson.internal.UnsafeAllocator,create --> getDeclaredField,java.lang.Class,);
Call(METHOD,com.google.gson.internal.UnsafeAllocator,create --> setAccessible,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.internal.UnsafeAllocator,create --> get,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.internal.UnsafeAllocator,create --> getMethod,java.lang.Class,);
Call(METHOD,com.google.gson.internal.UnsafeAllocator,newInstance$2 --> assertInstantiable,com.google.gson.internal.UnsafeAllocator,);
Call(METHOD,com.google.gson.internal.UnsafeAllocator,newInstance$2 --> invoke,null,);
Call(METHOD,com.google.gson.internal.UnsafeAllocator,newInstance$2 --> getDeclaredMethod,null,);
Call(METHOD,com.google.gson.internal.UnsafeAllocator,newInstance$2 --> setAccessible,java.lang.reflect.Method,);
Call(METHOD,com.google.gson.internal.UnsafeAllocator,newInstance$2 --> invoke,java.lang.reflect.Method,);
Call(METHOD,com.google.gson.internal.UnsafeAllocator,newInstance$2 --> getDeclaredMethod,null,);
Call(METHOD,com.google.gson.internal.UnsafeAllocator,newInstance$2 --> setAccessible,java.lang.reflect.Method,);
Call(METHOD,com.google.gson.internal.UnsafeAllocator,newInstance$3 --> assertInstantiable,com.google.gson.internal.UnsafeAllocator,);
Call(METHOD,com.google.gson.internal.UnsafeAllocator,newInstance$3 --> invoke,null,);
Call(METHOD,com.google.gson.internal.UnsafeAllocator,newInstance$3 --> getDeclaredMethod,null,);
Call(METHOD,com.google.gson.internal.UnsafeAllocator,newInstance$3 --> setAccessible,java.lang.reflect.Method,);
Call(METHOD,com.google.gson.internal.UnsafeAllocator,newInstance$4 --> assertInstantiable,com.google.gson.internal.UnsafeAllocator,);
Call(METHOD,com.google.gson.internal.UnsafeAllocator,newInstance$4 --> invoke,null,);
Call(METHOD,com.google.gson.internal.UnsafeAllocator,assertInstantiable --> getModifiers,java.lang.Class,);
Call(METHOD,com.google.gson.internal.UnsafeAllocator,assertInstantiable --> isInterface,null,);
Call(METHOD,com.google.gson.internal.UnsafeAllocator,assertInstantiable --> getName,java.lang.Class,);
Call(METHOD,com.google.gson.internal.UnsafeAllocator,assertInstantiable --> isAbstract,null,);
Call(METHOD,com.google.gson.internal.UnsafeAllocator,assertInstantiable --> getName,java.lang.Class,);
EndClass 17
StartClass 18
Class(com.google.gson.GsonBuilder,N,N,Public);
Attribute(excluder,com.google.gson.internal.Excluder,Private,N,N,);
Attribute(longSerializationPolicy,com.google.gson.LongSerializationPolicy,Private,N,N,);
Attribute(fieldNamingPolicy,com.google.gson.FieldNamingStrategy,Private,N,N,);
Attribute(instanceCreators,java.util.Map,Private,N,Y,);
Attribute(factories,java.util.List,Private,N,Y,);
Attribute(hierarchyFactories,java.util.List,Private,N,Y,);
Attribute(serializeNulls,boolean,Private,N,N,);
Attribute(datePattern,java.lang.String,Private,N,N,);
Attribute(dateStyle,int,Private,N,N,);
Attribute(timeStyle,int,Private,N,N,);
Attribute(complexMapKeySerialization,boolean,Private,N,N,);
Attribute(serializeSpecialFloatingPointValues,boolean,Private,N,N,);
Attribute(escapeHtmlChars,boolean,Private,N,N,);
Attribute(prettyPrinting,boolean,Private,N,N,);
Attribute(generateNonExecutableJson,boolean,Private,N,N,);
Attribute(lenient,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(setVersion,com.google.gson.GsonBuilder,Public,N,N);
Method(excludeFieldsWithModifiers,com.google.gson.GsonBuilder,Public,N,N);
Method(generateNonExecutableJson,com.google.gson.GsonBuilder,Public,N,N);
Method(excludeFieldsWithoutExposeAnnotation,com.google.gson.GsonBuilder,Public,N,N);
Method(serializeNulls,com.google.gson.GsonBuilder,Public,N,N);
Method(enableComplexMapKeySerialization,com.google.gson.GsonBuilder,Public,N,N);
Method(disableInnerClassSerialization,com.google.gson.GsonBuilder,Public,N,N);
Method(setLongSerializationPolicy,com.google.gson.GsonBuilder,Public,N,N);
Method(setFieldNamingPolicy,com.google.gson.GsonBuilder,Public,N,N);
Method(setFieldNamingStrategy,com.google.gson.GsonBuilder,Public,N,N);
Method(setExclusionStrategies,com.google.gson.GsonBuilder,Public,N,N);
Method(addSerializationExclusionStrategy,com.google.gson.GsonBuilder,Public,N,N);
Method(addDeserializationExclusionStrategy,com.google.gson.GsonBuilder,Public,N,N);
Method(setPrettyPrinting,com.google.gson.GsonBuilder,Public,N,N);
Method(setLenient,com.google.gson.GsonBuilder,Public,N,N);
Method(disableHtmlEscaping,com.google.gson.GsonBuilder,Public,N,N);
Method(setDateFormat,com.google.gson.GsonBuilder,Public,N,N);
Method(setDateFormat$2,com.google.gson.GsonBuilder,Public,N,N);
Method(setDateFormat$3,com.google.gson.GsonBuilder,Public,N,N);
Method(registerTypeAdapter,com.google.gson.GsonBuilder,Public,N,N);
Method(registerTypeAdapterFactory,com.google.gson.GsonBuilder,Public,N,N);
Method(registerTypeHierarchyAdapter,com.google.gson.GsonBuilder,Public,N,N);
Method(serializeSpecialFloatingPointValues,com.google.gson.GsonBuilder,Public,N,N);
Method(create,com.google.gson.Gson,Public,N,N);
Method(addTypeAdaptersForDate,void,Private,N,N);
Parameter(<init>$2,com.google.gson.Gson,);
Parameter(setVersion,double,);
Parameter(setLongSerializationPolicy,com.google.gson.LongSerializationPolicy,);
Parameter(setFieldNamingPolicy,com.google.gson.FieldNamingPolicy,);
Parameter(setFieldNamingStrategy,com.google.gson.FieldNamingStrategy,);
Parameter(addSerializationExclusionStrategy,com.google.gson.ExclusionStrategy,);
Parameter(addDeserializationExclusionStrategy,com.google.gson.ExclusionStrategy,);
Parameter(setDateFormat,java.lang.String,);
Parameter(setDateFormat$2,int,);
Parameter(setDateFormat$3,int,);
Parameter(setDateFormat$3,int,);
Parameter(registerTypeAdapter,java.lang.reflect.Type,);
Parameter(registerTypeAdapter,java.lang.Object,);
Parameter(registerTypeAdapterFactory,com.google.gson.TypeAdapterFactory,);
Parameter(registerTypeHierarchyAdapter,java.lang.Class,);
Parameter(registerTypeHierarchyAdapter,java.lang.Object,);
Parameter(addTypeAdaptersForDate,java.lang.String,);
Parameter(addTypeAdaptersForDate,int,);
Parameter(addTypeAdaptersForDate,int,);
Parameter(addTypeAdaptersForDate,java.util.List,);
Composition(com.google.gson.internal.Excluder);
Composition(com.google.gson.LongSerializationPolicy);
Composition(com.google.gson.FieldNamingStrategy);
Call(METHOD,com.google.gson.GsonBuilder,<init>$2 --> putAll,null,);
Call(METHOD,com.google.gson.GsonBuilder,<init>$2 --> addAll,null,);
Call(METHOD,com.google.gson.GsonBuilder,<init>$2 --> addAll,null,);
Call(METHOD,com.google.gson.GsonBuilder,setVersion --> withVersion,com.google.gson.internal.Excluder,);
Call(ATTRIBUTE,com.google.gson.GsonBuilder,setVersion --> excluder,com.google.gson.internal.Excluder,WRITE);
Call(ATTRIBUTE,com.google.gson.GsonBuilder,setVersion --> excluder,com.google.gson.internal.Excluder,READ);
Call(METHOD,com.google.gson.GsonBuilder,excludeFieldsWithModifiers --> withModifiers,com.google.gson.internal.Excluder,);
Call(ATTRIBUTE,com.google.gson.GsonBuilder,excludeFieldsWithModifiers --> excluder,com.google.gson.internal.Excluder,WRITE);
Call(ATTRIBUTE,com.google.gson.GsonBuilder,excludeFieldsWithModifiers --> excluder,com.google.gson.internal.Excluder,READ);
Call(METHOD,com.google.gson.GsonBuilder,excludeFieldsWithoutExposeAnnotation --> excludeFieldsWithoutExposeAnnotation,com.google.gson.internal.Excluder,);
Call(ATTRIBUTE,com.google.gson.GsonBuilder,excludeFieldsWithoutExposeAnnotation --> excluder,com.google.gson.internal.Excluder,WRITE);
Call(ATTRIBUTE,com.google.gson.GsonBuilder,excludeFieldsWithoutExposeAnnotation --> excluder,com.google.gson.internal.Excluder,READ);
Call(ATTRIBUTE,com.google.gson.GsonBuilder,enableComplexMapKeySerialization --> complexMapKeySerialization,boolean,WRITE);
Call(METHOD,com.google.gson.GsonBuilder,disableInnerClassSerialization --> disableInnerClassSerialization,com.google.gson.internal.Excluder,);
Call(ATTRIBUTE,com.google.gson.GsonBuilder,disableInnerClassSerialization --> excluder,com.google.gson.internal.Excluder,WRITE);
Call(ATTRIBUTE,com.google.gson.GsonBuilder,disableInnerClassSerialization --> excluder,com.google.gson.internal.Excluder,READ);
Call(METHOD,com.google.gson.GsonBuilder,setExclusionStrategies --> withExclusionStrategy,com.google.gson.internal.Excluder,);
Call(ATTRIBUTE,com.google.gson.GsonBuilder,setExclusionStrategies --> excluder,com.google.gson.internal.Excluder,WRITE);
Call(ATTRIBUTE,com.google.gson.GsonBuilder,setExclusionStrategies --> excluder,com.google.gson.internal.Excluder,READ);
Call(METHOD,com.google.gson.GsonBuilder,addSerializationExclusionStrategy --> withExclusionStrategy,com.google.gson.internal.Excluder,);
Call(ATTRIBUTE,com.google.gson.GsonBuilder,addSerializationExclusionStrategy --> excluder,com.google.gson.internal.Excluder,WRITE);
Call(ATTRIBUTE,com.google.gson.GsonBuilder,addSerializationExclusionStrategy --> excluder,com.google.gson.internal.Excluder,READ);
Call(METHOD,com.google.gson.GsonBuilder,addDeserializationExclusionStrategy --> withExclusionStrategy,com.google.gson.internal.Excluder,);
Call(ATTRIBUTE,com.google.gson.GsonBuilder,addDeserializationExclusionStrategy --> excluder,com.google.gson.internal.Excluder,WRITE);
Call(ATTRIBUTE,com.google.gson.GsonBuilder,addDeserializationExclusionStrategy --> excluder,com.google.gson.internal.Excluder,READ);
Call(ATTRIBUTE,com.google.gson.GsonBuilder,setPrettyPrinting --> prettyPrinting,boolean,WRITE);
Call(ATTRIBUTE,com.google.gson.GsonBuilder,setLenient --> lenient,boolean,WRITE);
Call(ATTRIBUTE,com.google.gson.GsonBuilder,setDateFormat$3 --> dateStyle,int,READ);
Call(ATTRIBUTE,com.google.gson.GsonBuilder,setDateFormat$3 --> timeStyle,int,READ);
Call(METHOD,com.google.gson.GsonBuilder,registerTypeAdapter --> checkArgument,null,);
Call(METHOD,com.google.gson.GsonBuilder,registerTypeAdapter --> put,java.util.Map,);
Call(METHOD,com.google.gson.GsonBuilder,registerTypeAdapter --> get,null,);
Call(METHOD,com.google.gson.GsonBuilder,registerTypeAdapter --> add,java.util.List,);
Call(METHOD,com.google.gson.GsonBuilder,registerTypeAdapter --> newFactoryWithMatchRawType,null,);
Call(METHOD,com.google.gson.GsonBuilder,registerTypeAdapter --> add,java.util.List,);
Call(METHOD,com.google.gson.GsonBuilder,registerTypeAdapter --> newFactory,null,);
Call(METHOD,com.google.gson.GsonBuilder,registerTypeAdapter --> get,null,);
Call(METHOD,com.google.gson.GsonBuilder,registerTypeAdapterFactory --> add,java.util.List,);
Call(METHOD,com.google.gson.GsonBuilder,registerTypeHierarchyAdapter --> checkArgument,null,);
Call(METHOD,com.google.gson.GsonBuilder,registerTypeHierarchyAdapter --> add,java.util.List,);
Call(METHOD,com.google.gson.GsonBuilder,registerTypeHierarchyAdapter --> newTypeHierarchyFactory,null,);
Call(METHOD,com.google.gson.GsonBuilder,registerTypeHierarchyAdapter --> add,java.util.List,);
Call(METHOD,com.google.gson.GsonBuilder,registerTypeHierarchyAdapter --> newTypeHierarchyFactory,null,);
Call(METHOD,com.google.gson.GsonBuilder,create --> size,null,);
Call(METHOD,com.google.gson.GsonBuilder,create --> size,null,);
Call(METHOD,com.google.gson.GsonBuilder,create --> addAll,java.util.List,);
Call(METHOD,com.google.gson.GsonBuilder,create --> reverse,null,);
Call(METHOD,com.google.gson.GsonBuilder,create --> reverse,null,);
Call(METHOD,com.google.gson.GsonBuilder,create --> addAll,java.util.List,);
Call(METHOD,com.google.gson.GsonBuilder,create --> addTypeAdaptersForDate,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.GsonBuilder,addTypeAdaptersForDate --> equals,java.lang.String,);
Call(METHOD,com.google.gson.GsonBuilder,addTypeAdaptersForDate --> trim,java.lang.String,);
Call(METHOD,com.google.gson.GsonBuilder,addTypeAdaptersForDate --> add,java.util.List,);
Call(METHOD,com.google.gson.GsonBuilder,addTypeAdaptersForDate --> newFactory,null,);
Call(METHOD,com.google.gson.GsonBuilder,addTypeAdaptersForDate --> add,java.util.List,);
Call(METHOD,com.google.gson.GsonBuilder,addTypeAdaptersForDate --> newFactory,null,);
Call(METHOD,com.google.gson.GsonBuilder,addTypeAdaptersForDate --> add,java.util.List,);
Call(METHOD,com.google.gson.GsonBuilder,addTypeAdaptersForDate --> newFactory,null,);
EndClass 18
StartClass 19
Class(com.google.gson.internal.Excluder,N,N,Public);
Attribute(IGNORE_VERSIONS,double,Private,Y,Y,);
Attribute(DEFAULT,com.google.gson.internal.Excluder,Public,Y,Y,);
Attribute(version,double,Private,N,N,);
Attribute(modifiers,int,Private,N,N,);
Attribute(serializeInnerClasses,boolean,Private,N,N,);
Attribute(requireExpose,boolean,Private,N,N,);
Attribute(serializationStrategies,java.util.List,Private,N,N,);
Attribute(deserializationStrategies,java.util.List,Private,N,N,);
Attribute(delegate,com.google.gson.TypeAdapter,Private,N,N,);
Method(clone,com.google.gson.internal.Excluder,Protected,N,N);
Method(withVersion,com.google.gson.internal.Excluder,Public,N,N);
Method(withModifiers,com.google.gson.internal.Excluder,Public,N,N);
Method(disableInnerClassSerialization,com.google.gson.internal.Excluder,Public,N,N);
Method(excludeFieldsWithoutExposeAnnotation,com.google.gson.internal.Excluder,Public,N,N);
Method(withExclusionStrategy,com.google.gson.internal.Excluder,Public,N,N);
Method(create,com.google.gson.TypeAdapter,Public,N,N);
Method(read,com.google.gson.internal.T,Public,N,N);
Method(write,void,Public,N,N);
Method(delegate,com.google.gson.TypeAdapter,Private,N,N);
Method(excludeField,boolean,Public,N,N);
Method(excludeClassChecks,boolean,Private,N,N);
Method(excludeClass,boolean,Public,N,N);
Method(excludeClassInStrategy,boolean,Private,N,N);
Method(isAnonymousOrLocal,boolean,Private,N,N);
Method(isInnerClass,boolean,Private,N,N);
Method(isStatic,boolean,Private,N,N);
Method(isValidVersion,boolean,Private,N,N);
Method(isValidSince,boolean,Private,N,N);
Method(isValidUntil,boolean,Private,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(withVersion,double,);
Parameter(withExclusionStrategy,com.google.gson.ExclusionStrategy,);
Parameter(withExclusionStrategy,boolean,);
Parameter(withExclusionStrategy,boolean,);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.internal.T,);
Parameter(excludeField,java.lang.reflect.Field,);
Parameter(excludeField,boolean,);
Parameter(excludeClassChecks,java.lang.Class,);
Parameter(excludeClass,java.lang.Class,);
Parameter(excludeClass,boolean,);
Parameter(excludeClassInStrategy,java.lang.Class,);
Parameter(excludeClassInStrategy,boolean,);
Parameter(isAnonymousOrLocal,java.lang.Class,);
Parameter(isInnerClass,java.lang.Class,);
Parameter(isStatic,java.lang.Class,);
Parameter(isValidVersion,com.google.gson.annotations.Since,);
Parameter(isValidVersion,com.google.gson.annotations.Until,);
Parameter(isValidSince,com.google.gson.annotations.Since,);
Parameter(isValidUntil,com.google.gson.annotations.Until,);
Realization(com.google.gson.TypeAdapterFactory);
Realization(java.lang.Cloneable);
Composition(com.google.gson.internal.Excluder);
Composition(com.google.gson.TypeAdapter<T>);
Call(METHOD,com.google.gson.internal.Excluder,clone --> clone,null,);
Call(METHOD,com.google.gson.internal.Excluder,withVersion --> clone,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,withModifiers --> clone,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,disableInnerClassSerialization --> clone,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,excludeFieldsWithoutExposeAnnotation --> clone,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,withExclusionStrategy --> clone,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,withExclusionStrategy --> add,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,withExclusionStrategy --> add,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,create --> getRawType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.Excluder,create --> excludeClassChecks,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,create --> excludeClassInStrategy,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,create --> excludeClassInStrategy,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,read --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.Excluder,read --> delegate,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,read --> read,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,write --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.Excluder,write --> delegate,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,write --> write,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,delegate --> getDelegateAdapter,null,);
Call(ATTRIBUTE,com.google.gson.internal.Excluder,delegate --> delegate,com.google.gson.TypeAdapter,WRITE);
Call(METHOD,com.google.gson.internal.Excluder,excludeField --> getModifiers,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.internal.Excluder,excludeField --> isValidVersion,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,excludeField --> getAnnotation,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.internal.Excluder,excludeField --> getAnnotation,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.internal.Excluder,excludeField --> isSynthetic,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.internal.Excluder,excludeField --> getAnnotation,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.internal.Excluder,excludeField --> serialize,com.google.gson.annotations.Expose,);
Call(METHOD,com.google.gson.internal.Excluder,excludeField --> deserialize,com.google.gson.annotations.Expose,);
Call(METHOD,com.google.gson.internal.Excluder,excludeField --> isInnerClass,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,excludeField --> getType,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.internal.Excluder,excludeField --> isAnonymousOrLocal,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,excludeField --> getType,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.internal.Excluder,excludeField --> isEmpty,java.util.List,);
Call(METHOD,com.google.gson.internal.Excluder,excludeField --> shouldSkipField,null,);
Call(METHOD,com.google.gson.internal.Excluder,excludeClassChecks --> isValidVersion,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,excludeClassChecks --> getAnnotation,java.lang.Class,);
Call(METHOD,com.google.gson.internal.Excluder,excludeClassChecks --> getAnnotation,java.lang.Class,);
Call(METHOD,com.google.gson.internal.Excluder,excludeClassChecks --> isInnerClass,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,excludeClassChecks --> isAnonymousOrLocal,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,excludeClass --> excludeClassChecks,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,excludeClass --> excludeClassInStrategy,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,excludeClassInStrategy --> shouldSkipClass,null,);
Call(METHOD,com.google.gson.internal.Excluder,isAnonymousOrLocal --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.internal.Excluder,isAnonymousOrLocal --> isAnonymousClass,java.lang.Class,);
Call(METHOD,com.google.gson.internal.Excluder,isAnonymousOrLocal --> isLocalClass,java.lang.Class,);
Call(METHOD,com.google.gson.internal.Excluder,isInnerClass --> isMemberClass,java.lang.Class,);
Call(METHOD,com.google.gson.internal.Excluder,isInnerClass --> isStatic,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,isStatic --> getModifiers,java.lang.Class,);
Call(METHOD,com.google.gson.internal.Excluder,isValidVersion --> isValidSince,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,isValidVersion --> isValidUntil,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.Excluder,isValidSince --> value,com.google.gson.annotations.Since,);
Call(METHOD,com.google.gson.internal.Excluder,isValidUntil --> value,com.google.gson.annotations.Until,);
EndClass 19
StartClass 20
Class(com.google.gson.TypeAdapter,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.Gson.FutureTypeAdapter);
EndClass 20
StartClass 21
Class(com.google.gson.Gson.FutureTypeAdapter,N,N,Protected);
Attribute(delegate,com.google.gson.TypeAdapter,Private,N,N,);
Method(setDelegate,void,Public,N,N);
Method(read,com.google.gson.T,Public,N,N);
Method(write,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(setDelegate,com.google.gson.TypeAdapter,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.T,);
SuperClass(com.google.gson.TypeAdapter);
Generalization(com.google.gson.TypeAdapter);
Composition(com.google.gson.TypeAdapter<T>);
Call(ATTRIBUTE,com.google.gson.Gson.FutureTypeAdapter,setDelegate --> delegate,com.google.gson.TypeAdapter,WRITE);
Call(METHOD,com.google.gson.Gson.FutureTypeAdapter,read --> read,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.Gson.FutureTypeAdapter,write --> write,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.Gson.FutureTypeAdapter,toString --> append,com.google.gson.StringBuilder,);
Call(METHOD,com.google.gson.Gson.FutureTypeAdapter,toString --> append,com.google.gson.StringBuilder,);
Call(METHOD,com.google.gson.Gson.FutureTypeAdapter,toString --> append,com.google.gson.StringBuilder,);
Call(METHOD,com.google.gson.Gson.FutureTypeAdapter,toString --> append,com.google.gson.StringBuilder,);
Call(METHOD,com.google.gson.Gson.FutureTypeAdapter,toString --> append,com.google.gson.StringBuilder,);
Call(METHOD,com.google.gson.Gson.FutureTypeAdapter,toString --> append,com.google.gson.StringBuilder,);
Call(METHOD,com.google.gson.Gson.FutureTypeAdapter,toString --> toString,com.google.gson.StringBuilder,);
EndClass 21
StartClass 22
Class(com.google.gson.stream.JsonReader,N,N,Public);
Attribute(NON_EXECUTE_PREFIX,com.google.gson.stream.char[],Private,Y,Y,);
Attribute(MIN_INCOMPLETE_INTEGER,long,Private,Y,Y,);
Attribute(PEEKED_NONE,int,Private,Y,Y,);
Attribute(PEEKED_BEGIN_OBJECT,int,Private,Y,Y,);
Attribute(PEEKED_END_OBJECT,int,Private,Y,Y,);
Attribute(PEEKED_BEGIN_ARRAY,int,Private,Y,Y,);
Attribute(PEEKED_END_ARRAY,int,Private,Y,Y,);
Attribute(PEEKED_TRUE,int,Private,Y,Y,);
Attribute(PEEKED_FALSE,int,Private,Y,Y,);
Attribute(PEEKED_NULL,int,Private,Y,Y,);
Attribute(PEEKED_SINGLE_QUOTED,int,Private,Y,Y,);
Attribute(PEEKED_DOUBLE_QUOTED,int,Private,Y,Y,);
Attribute(PEEKED_UNQUOTED,int,Private,Y,Y,);
Attribute(PEEKED_BUFFERED,int,Private,Y,Y,);
Attribute(PEEKED_SINGLE_QUOTED_NAME,int,Private,Y,Y,);
Attribute(PEEKED_DOUBLE_QUOTED_NAME,int,Private,Y,Y,);
Attribute(PEEKED_UNQUOTED_NAME,int,Private,Y,Y,);
Attribute(PEEKED_LONG,int,Private,Y,Y,);
Attribute(PEEKED_NUMBER,int,Private,Y,Y,);
Attribute(PEEKED_EOF,int,Private,Y,Y,);
Attribute(NUMBER_CHAR_NONE,int,Private,Y,Y,);
Attribute(NUMBER_CHAR_SIGN,int,Private,Y,Y,);
Attribute(NUMBER_CHAR_DIGIT,int,Private,Y,Y,);
Attribute(NUMBER_CHAR_DECIMAL,int,Private,Y,Y,);
Attribute(NUMBER_CHAR_FRACTION_DIGIT,int,Private,Y,Y,);
Attribute(NUMBER_CHAR_EXP_E,int,Private,Y,Y,);
Attribute(NUMBER_CHAR_EXP_SIGN,int,Private,Y,Y,);
Attribute(NUMBER_CHAR_EXP_DIGIT,int,Private,Y,Y,);
Attribute(in,java.io.Reader,Private,N,Y,);
Attribute(lenient,boolean,Private,N,N,);
Attribute(buffer,com.google.gson.stream.char[],Private,N,Y,);
Attribute(pos,int,Private,N,N,);
Attribute(limit,int,Private,N,N,);
Attribute(lineNumber,int,Private,N,N,);
Attribute(lineStart,int,Private,N,N,);
Attribute(peeked,int,Public,N,N,);
Attribute(peekedLong,long,Private,N,N,);
Attribute(peekedNumberLength,int,Private,N,N,);
Attribute(peekedString,java.lang.String,Private,N,N,);
Attribute(stack,int[],Private,N,N,);
Attribute(stackSize,int,Private,N,N,);
Attribute(pathNames,java.lang.String[],Private,N,N,);
Attribute(pathIndices,int[],Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setLenient,void,Public,N,N);
Method(isLenient,boolean,Public,N,N);
Method(beginArray,void,Public,N,N);
Method(endArray,void,Public,N,N);
Method(beginObject,void,Public,N,N);
Method(endObject,void,Public,N,N);
Method(hasNext,boolean,Public,N,N);
Method(peek,com.google.gson.stream.JsonToken,Public,N,N);
Method(doPeek,int,Public,N,N);
Method(peekKeyword,int,Private,N,N);
Method(peekNumber,int,Private,N,N);
Method(isLiteral,boolean,Private,N,N);
Method(nextName,java.lang.String,Public,N,N);
Method(nextString,java.lang.String,Public,N,N);
Method(nextBoolean,boolean,Public,N,N);
Method(nextNull,void,Public,N,N);
Method(nextDouble,double,Public,N,N);
Method(nextLong,long,Public,N,N);
Method(nextQuotedValue,java.lang.String,Private,N,N);
Method(nextUnquotedValue,java.lang.String,Private,N,N);
Method(skipQuotedValue,void,Private,N,N);
Method(skipUnquotedValue,void,Private,N,N);
Method(nextInt,int,Public,N,N);
Method(close,void,Public,N,N);
Method(skipValue,void,Public,N,N);
Method(push,void,Private,N,N);
Method(fillBuffer,boolean,Private,N,N);
Method(nextNonWhitespace,int,Private,N,N);
Method(checkLenient,void,Private,N,N);
Method(skipToEndOfLine,void,Private,N,N);
Method(skipTo,boolean,Private,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(locationString,java.lang.String,Public,N,N);
Method(getPath,java.lang.String,Public,N,N);
Method(readEscapeCharacter,com.google.gson.stream.char,Private,N,N);
Method(syntaxError,java.io.IOException,Private,N,N);
Method(consumeNonExecutePrefix,void,Private,N,N);
Method(promoteNameToValue,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,java.io.Reader,);
Parameter(setLenient,boolean,);
Parameter(isLiteral,com.google.gson.stream.char,);
Parameter(nextQuotedValue,com.google.gson.stream.char,);
Parameter(skipQuotedValue,com.google.gson.stream.char,);
Parameter(push,int,);
Parameter(fillBuffer,int,);
Parameter(nextNonWhitespace,boolean,);
Parameter(skipTo,java.lang.String,);
Parameter(syntaxError,java.lang.String,);
Parameter(promoteNameToValue,com.google.gson.stream.JsonReader,);
SubClass(com.google.gson.internal.bind.JsonTreeReader);
Realization(java.io.Closeable);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,<init> --> in,java.io.Reader,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,setLenient --> lenient,boolean,READ);
Call(METHOD,com.google.gson.stream.JsonReader,beginArray --> doPeek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,beginArray --> push,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,beginArray --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,beginArray --> locationString,com.google.gson.stream.JsonReader,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,beginArray --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,beginArray --> PEEKED_NONE,int,READ);
Call(METHOD,com.google.gson.stream.JsonReader,endArray --> doPeek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,endArray --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,endArray --> locationString,com.google.gson.stream.JsonReader,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,endArray --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,endArray --> PEEKED_NONE,int,READ);
Call(METHOD,com.google.gson.stream.JsonReader,beginObject --> doPeek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,beginObject --> push,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,beginObject --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,beginObject --> locationString,com.google.gson.stream.JsonReader,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,beginObject --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,beginObject --> PEEKED_NONE,int,READ);
Call(METHOD,com.google.gson.stream.JsonReader,endObject --> doPeek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,endObject --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,endObject --> locationString,com.google.gson.stream.JsonReader,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,endObject --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,endObject --> PEEKED_NONE,int,READ);
Call(METHOD,com.google.gson.stream.JsonReader,hasNext --> doPeek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,peek --> doPeek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> nextNonWhitespace,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> checkLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> syntaxError,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> nextNonWhitespace,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> checkLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> syntaxError,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> nextNonWhitespace,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> checkLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> syntaxError,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> checkLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> isLiteral,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> syntaxError,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> nextNonWhitespace,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> checkLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> fillBuffer,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> syntaxError,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> consumeNonExecutePrefix,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> nextNonWhitespace,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> checkLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> nextNonWhitespace,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> checkLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> syntaxError,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> checkLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> peekKeyword,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> peekNumber,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> isLiteral,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> syntaxError,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,doPeek --> checkLenient,com.google.gson.stream.JsonReader,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> PEEKED_END_ARRAY,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> PEEKED_END_OBJECT,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> PEEKED_DOUBLE_QUOTED_NAME,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> PEEKED_SINGLE_QUOTED_NAME,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> PEEKED_END_OBJECT,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> PEEKED_UNQUOTED_NAME,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> PEEKED_EOF,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> PEEKED_END_ARRAY,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> PEEKED_NULL,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> PEEKED_SINGLE_QUOTED,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> PEEKED_DOUBLE_QUOTED,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> PEEKED_BEGIN_ARRAY,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> PEEKED_BEGIN_OBJECT,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,doPeek --> PEEKED_UNQUOTED,int,READ);
Call(METHOD,com.google.gson.stream.JsonReader,peekKeyword --> length,java.lang.String,);
Call(METHOD,com.google.gson.stream.JsonReader,peekKeyword --> fillBuffer,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,peekKeyword --> charAt,java.lang.String,);
Call(METHOD,com.google.gson.stream.JsonReader,peekKeyword --> charAt,java.lang.String,);
Call(METHOD,com.google.gson.stream.JsonReader,peekKeyword --> fillBuffer,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,peekKeyword --> isLiteral,com.google.gson.stream.JsonReader,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,peekKeyword --> PEEKED_TRUE,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,peekKeyword --> PEEKED_FALSE,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,peekKeyword --> PEEKED_NULL,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,peekKeyword --> buffer,com.google.gson.stream.char[],READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,peekKeyword --> pos,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,peekKeyword --> peeked,int,WRITE);
Call(METHOD,com.google.gson.stream.JsonReader,peekNumber --> fillBuffer,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,peekNumber --> isLiteral,com.google.gson.stream.JsonReader,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,peekNumber --> pos,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,peekNumber --> limit,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,peekNumber --> NUMBER_CHAR_SIGN,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,peekNumber --> NUMBER_CHAR_EXP_SIGN,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,peekNumber --> NUMBER_CHAR_EXP_SIGN,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,peekNumber --> NUMBER_CHAR_EXP_E,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,peekNumber --> NUMBER_CHAR_DECIMAL,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,peekNumber --> NUMBER_CHAR_DIGIT,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,peekNumber --> NUMBER_CHAR_FRACTION_DIGIT,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,peekNumber --> NUMBER_CHAR_EXP_DIGIT,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,peekNumber --> peekedLong,long,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,peekNumber --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,peekNumber --> PEEKED_LONG,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,peekNumber --> peekedNumberLength,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,peekNumber --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,peekNumber --> PEEKED_NUMBER,int,READ);
Call(METHOD,com.google.gson.stream.JsonReader,isLiteral --> checkLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextName --> doPeek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextName --> nextUnquotedValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextName --> nextQuotedValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextName --> nextQuotedValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextName --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextName --> locationString,com.google.gson.stream.JsonReader,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextName --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextName --> PEEKED_NONE,int,READ);
Call(METHOD,com.google.gson.stream.JsonReader,nextString --> doPeek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextString --> nextUnquotedValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextString --> nextQuotedValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextString --> nextQuotedValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextString --> toString,null,);
Call(METHOD,com.google.gson.stream.JsonReader,nextString --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextString --> locationString,com.google.gson.stream.JsonReader,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextString --> peekedString,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextString --> peekedString,java.lang.String,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextString --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextString --> PEEKED_NONE,int,READ);
Call(METHOD,com.google.gson.stream.JsonReader,nextBoolean --> doPeek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextBoolean --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextBoolean --> locationString,com.google.gson.stream.JsonReader,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextBoolean --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextBoolean --> PEEKED_NONE,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextBoolean --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextBoolean --> PEEKED_NONE,int,READ);
Call(METHOD,com.google.gson.stream.JsonReader,nextNull --> doPeek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextNull --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextNull --> locationString,com.google.gson.stream.JsonReader,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextNull --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextNull --> PEEKED_NONE,int,READ);
Call(METHOD,com.google.gson.stream.JsonReader,nextDouble --> doPeek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextDouble --> nextQuotedValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextDouble --> nextUnquotedValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextDouble --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextDouble --> locationString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextDouble --> parseDouble,null,);
Call(METHOD,com.google.gson.stream.JsonReader,nextDouble --> isNaN,null,);
Call(METHOD,com.google.gson.stream.JsonReader,nextDouble --> isInfinite,null,);
Call(METHOD,com.google.gson.stream.JsonReader,nextDouble --> locationString,com.google.gson.stream.JsonReader,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextDouble --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextDouble --> PEEKED_NONE,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextDouble --> peekedString,java.lang.String,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextDouble --> peekedString,java.lang.String,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextDouble --> peekedString,java.lang.String,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextDouble --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextDouble --> PEEKED_BUFFERED,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextDouble --> peekedString,java.lang.String,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextDouble --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextDouble --> PEEKED_NONE,int,READ);
Call(METHOD,com.google.gson.stream.JsonReader,nextLong --> doPeek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextLong --> nextUnquotedValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextLong --> nextQuotedValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextLong --> parseLong,null,);
Call(METHOD,com.google.gson.stream.JsonReader,nextLong --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextLong --> locationString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextLong --> parseDouble,null,);
Call(METHOD,com.google.gson.stream.JsonReader,nextLong --> locationString,com.google.gson.stream.JsonReader,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextLong --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextLong --> PEEKED_NONE,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextLong --> peekedString,java.lang.String,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextLong --> peekedString,java.lang.String,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextLong --> peekedString,java.lang.String,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextLong --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextLong --> PEEKED_NONE,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextLong --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextLong --> PEEKED_BUFFERED,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextLong --> peekedString,java.lang.String,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextLong --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextLong --> PEEKED_NONE,int,READ);
Call(METHOD,com.google.gson.stream.JsonReader,nextQuotedValue --> append,com.google.gson.stream.StringBuilder,);
Call(METHOD,com.google.gson.stream.JsonReader,nextQuotedValue --> toString,com.google.gson.stream.StringBuilder,);
Call(METHOD,com.google.gson.stream.JsonReader,nextQuotedValue --> max,null,);
Call(METHOD,com.google.gson.stream.JsonReader,nextQuotedValue --> append,com.google.gson.stream.StringBuilder,);
Call(METHOD,com.google.gson.stream.JsonReader,nextQuotedValue --> append,com.google.gson.stream.StringBuilder,);
Call(METHOD,com.google.gson.stream.JsonReader,nextQuotedValue --> readEscapeCharacter,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextQuotedValue --> max,null,);
Call(METHOD,com.google.gson.stream.JsonReader,nextQuotedValue --> append,com.google.gson.stream.StringBuilder,);
Call(METHOD,com.google.gson.stream.JsonReader,nextQuotedValue --> fillBuffer,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextQuotedValue --> syntaxError,com.google.gson.stream.JsonReader,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextQuotedValue --> pos,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextQuotedValue --> pos,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextQuotedValue --> pos,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextQuotedValue --> limit,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextQuotedValue --> lineStart,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextQuotedValue --> pos,int,WRITE);
Call(METHOD,com.google.gson.stream.JsonReader,nextUnquotedValue --> checkLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextUnquotedValue --> fillBuffer,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextUnquotedValue --> max,null,);
Call(METHOD,com.google.gson.stream.JsonReader,nextUnquotedValue --> append,com.google.gson.stream.StringBuilder,);
Call(METHOD,com.google.gson.stream.JsonReader,nextUnquotedValue --> fillBuffer,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextUnquotedValue --> append,com.google.gson.stream.StringBuilder,);
Call(METHOD,com.google.gson.stream.JsonReader,nextUnquotedValue --> toString,com.google.gson.stream.StringBuilder,);
Call(METHOD,com.google.gson.stream.JsonReader,skipQuotedValue --> readEscapeCharacter,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,skipQuotedValue --> fillBuffer,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,skipQuotedValue --> syntaxError,com.google.gson.stream.JsonReader,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,skipQuotedValue --> pos,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,skipQuotedValue --> pos,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,skipQuotedValue --> pos,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,skipQuotedValue --> limit,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,skipQuotedValue --> lineStart,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,skipQuotedValue --> pos,int,WRITE);
Call(METHOD,com.google.gson.stream.JsonReader,skipUnquotedValue --> checkLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,skipUnquotedValue --> fillBuffer,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextInt --> doPeek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextInt --> locationString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextInt --> nextUnquotedValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextInt --> nextQuotedValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextInt --> parseInt,null,);
Call(METHOD,com.google.gson.stream.JsonReader,nextInt --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextInt --> locationString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextInt --> parseDouble,null,);
Call(METHOD,com.google.gson.stream.JsonReader,nextInt --> locationString,com.google.gson.stream.JsonReader,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextInt --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextInt --> PEEKED_NONE,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextInt --> peekedString,java.lang.String,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextInt --> peekedString,java.lang.String,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextInt --> peekedString,java.lang.String,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextInt --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextInt --> PEEKED_NONE,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextInt --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextInt --> PEEKED_BUFFERED,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextInt --> peekedString,java.lang.String,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextInt --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextInt --> PEEKED_NONE,int,READ);
Call(METHOD,com.google.gson.stream.JsonReader,close --> close,java.io.Reader,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,close --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,close --> PEEKED_NONE,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,close --> stackSize,int,WRITE);
Call(METHOD,com.google.gson.stream.JsonReader,skipValue --> doPeek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,skipValue --> push,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,skipValue --> push,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,skipValue --> skipUnquotedValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,skipValue --> skipQuotedValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,skipValue --> skipQuotedValue,com.google.gson.stream.JsonReader,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,skipValue --> peeked,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,skipValue --> PEEKED_NONE,int,READ);
Call(METHOD,com.google.gson.stream.JsonReader,push --> arraycopy,null,);
Call(METHOD,com.google.gson.stream.JsonReader,push --> arraycopy,null,);
Call(METHOD,com.google.gson.stream.JsonReader,push --> arraycopy,null,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,push --> stack,int[],WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,push --> pathIndices,int[],WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,push --> pathNames,java.lang.String[],WRITE);
Call(METHOD,com.google.gson.stream.JsonReader,fillBuffer --> arraycopy,null,);
Call(METHOD,com.google.gson.stream.JsonReader,fillBuffer --> read,java.io.Reader,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,fillBuffer --> limit,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,fillBuffer --> pos,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,fillBuffer --> in,java.io.Reader,READ);
Call(METHOD,com.google.gson.stream.JsonReader,nextNonWhitespace --> fillBuffer,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextNonWhitespace --> fillBuffer,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextNonWhitespace --> checkLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextNonWhitespace --> skipTo,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextNonWhitespace --> syntaxError,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextNonWhitespace --> skipToEndOfLine,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextNonWhitespace --> checkLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextNonWhitespace --> skipToEndOfLine,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,nextNonWhitespace --> locationString,com.google.gson.stream.JsonReader,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextNonWhitespace --> pos,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextNonWhitespace --> pos,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextNonWhitespace --> limit,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextNonWhitespace --> lineStart,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextNonWhitespace --> pos,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextNonWhitespace --> pos,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextNonWhitespace --> limit,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextNonWhitespace --> pos,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextNonWhitespace --> limit,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextNonWhitespace --> pos,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextNonWhitespace --> pos,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextNonWhitespace --> limit,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,nextNonWhitespace --> pos,int,WRITE);
Call(METHOD,com.google.gson.stream.JsonReader,checkLenient --> syntaxError,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,skipToEndOfLine --> fillBuffer,com.google.gson.stream.JsonReader,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,skipToEndOfLine --> lineStart,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,skipToEndOfLine --> pos,int,READ);
Call(METHOD,com.google.gson.stream.JsonReader,skipTo --> length,java.lang.String,);
Call(METHOD,com.google.gson.stream.JsonReader,skipTo --> fillBuffer,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,skipTo --> charAt,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,skipTo --> lineStart,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,skipTo --> pos,int,READ);
Call(METHOD,com.google.gson.stream.JsonReader,toString --> getClass,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,toString --> getSimpleName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,toString --> locationString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,locationString --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,getPath --> append,com.google.gson.stream.StringBuilder,);
Call(METHOD,com.google.gson.stream.JsonReader,getPath --> append,com.google.gson.stream.StringBuilder,);
Call(METHOD,com.google.gson.stream.JsonReader,getPath --> append,com.google.gson.stream.StringBuilder,);
Call(METHOD,com.google.gson.stream.JsonReader,getPath --> append,com.google.gson.stream.StringBuilder,);
Call(METHOD,com.google.gson.stream.JsonReader,getPath --> append,com.google.gson.stream.StringBuilder,);
Call(METHOD,com.google.gson.stream.JsonReader,getPath --> append,com.google.gson.stream.StringBuilder,);
Call(METHOD,com.google.gson.stream.JsonReader,getPath --> toString,com.google.gson.stream.StringBuilder,);
Call(METHOD,com.google.gson.stream.JsonReader,readEscapeCharacter --> fillBuffer,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,readEscapeCharacter --> syntaxError,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,readEscapeCharacter --> fillBuffer,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,readEscapeCharacter --> syntaxError,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,readEscapeCharacter --> syntaxError,com.google.gson.stream.JsonReader,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,readEscapeCharacter --> lineStart,int,WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,readEscapeCharacter --> pos,int,READ);
Call(METHOD,com.google.gson.stream.JsonReader,syntaxError --> locationString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,consumeNonExecutePrefix --> nextNonWhitespace,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,consumeNonExecutePrefix --> fillBuffer,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,promoteNameToValue --> promoteNameToValue,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.stream.JsonReader,promoteNameToValue --> doPeek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,promoteNameToValue --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReader,promoteNameToValue --> locationString,com.google.gson.stream.JsonReader,);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,promoteNameToValue --> PEEKED_DOUBLE_QUOTED,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,promoteNameToValue --> PEEKED_SINGLE_QUOTED,int,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonReader,promoteNameToValue --> PEEKED_UNQUOTED,int,READ);
EndClass 22
StartClass 23
Class(com.google.gson.stream.JsonToken,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 23
StartClass 24
Class(java.io.IOException,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.stream.MalformedJsonException);
EndClass 24
StartClass 25
Class(com.google.gson.stream.MalformedJsonException,N,N,Public);
Attribute(serialVersionUID,long,Private,Y,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,java.lang.Throwable,);
Parameter(<init>$3,java.lang.Throwable,);
SuperClass(java.io.IOException);
Generalization(java.io.IOException);
Call(METHOD,com.google.gson.stream.MalformedJsonException,<init> --> super,com.google.gson.stream.MalformedJsonException,);
Call(METHOD,com.google.gson.stream.MalformedJsonException,<init>$2 --> super,com.google.gson.stream.MalformedJsonException,);
Call(METHOD,com.google.gson.stream.MalformedJsonException,<init>$2 --> initCause,com.google.gson.stream.MalformedJsonException,);
Call(METHOD,com.google.gson.stream.MalformedJsonException,<init>$3 --> initCause,com.google.gson.stream.MalformedJsonException,);
EndClass 25
StartClass 26
Class(java.lang.Throwable,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.ThrowableFunctionalTest.MyException);
EndClass 26
StartClass 27
Class(com.google.gson.functional.ThrowableFunctionalTest.MyException,N,N,Private);
Attribute(myCustomMessage,java.lang.String,Public,N,N,);
Method(<init>,void,Public,N,N);
SuperClass(java.lang.Throwable);
Generalization(java.lang.Throwable);
EndClass 27
StartClass 28
Class(com.google.gson.internal.bind.JsonTreeReader,N,N,Public);
Attribute(UNREADABLE_READER,java.io.Reader,Private,Y,Y,);
Attribute(SENTINEL_CLOSED,java.lang.Object,Private,Y,Y,);
Attribute(stack,java.lang.Object[],Private,N,N,);
Attribute(stackSize,int,Private,N,N,);
Attribute(pathNames,java.lang.String[],Private,N,N,);
Attribute(pathIndices,int[],Private,N,N,);
Method(read,int,Public,N,N);
Method(close,void,Public,N,N);
Method(<init>,void,Public,N,N);
Method(beginArray,void,Public,N,N);
Method(endArray,void,Public,N,N);
Method(beginObject,void,Public,N,N);
Method(endObject,void,Public,N,N);
Method(hasNext,boolean,Public,N,N);
Method(peek,com.google.gson.stream.JsonToken,Public,N,N);
Method(peekStack,java.lang.Object,Private,N,N);
Method(popStack,java.lang.Object,Private,N,N);
Method(expect,void,Private,N,N);
Method(nextName,java.lang.String,Public,N,N);
Method(nextString,java.lang.String,Public,N,N);
Method(nextBoolean,boolean,Public,N,N);
Method(nextNull,void,Public,N,N);
Method(nextDouble,double,Public,N,N);
Method(nextLong,long,Public,N,N);
Method(nextInt,int,Public,N,N);
Method(close$2,void,Public,N,N);
Method(skipValue,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(promoteNameToValue,void,Public,N,N);
Method(push,void,Private,N,N);
Method(getPath,java.lang.String,Public,N,N);
Method(locationString,java.lang.String,Private,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(read,com.google.gson.internal.bind.char[],);
Parameter(read,int,);
Parameter(read,int,);
Parameter(<init>,com.google.gson.JsonElement,);
Parameter(expect,com.google.gson.stream.JsonToken,);
Parameter(push,java.lang.Object,);
SuperClass(com.google.gson.stream.JsonReader);
Generalization(com.google.gson.stream.JsonReader);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,<init> --> <init>,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,<init> --> push,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,beginArray --> expect,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,beginArray --> peekStack,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,beginArray --> push,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,beginArray --> iterator,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,endArray --> expect,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,endArray --> popStack,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,endArray --> popStack,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,beginObject --> expect,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,beginObject --> peekStack,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,beginObject --> push,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,beginObject --> entrySet,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,beginObject --> iterator,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,endObject --> expect,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,endObject --> popStack,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,endObject --> popStack,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,hasNext --> peek,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,peek --> peekStack,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,peek --> hasNext,java.util.Iterator,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,peek --> push,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,peek --> next,java.util.Iterator,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,peek --> peek,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,peek --> isString,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,peek --> isBoolean,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,peek --> isNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,expect --> peek,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,expect --> peek,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,expect --> locationString,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextName --> expect,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextName --> peekStack,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextName --> next,java.util.Iterator,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextName --> getKey,com.google.gson.internal.bind.Map.Entry,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextName --> push,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextName --> getValue,com.google.gson.internal.bind.Map.Entry,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextString --> peek,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextString --> locationString,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextString --> popStack,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextString --> getAsString,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextBoolean --> expect,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextBoolean --> popStack,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextBoolean --> getAsBoolean,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextNull --> expect,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextNull --> popStack,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextDouble --> peek,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextDouble --> locationString,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextDouble --> peekStack,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextDouble --> getAsDouble,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextDouble --> isLenient,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextDouble --> isNaN,null,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextDouble --> isInfinite,null,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextDouble --> popStack,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextLong --> peek,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextLong --> locationString,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextLong --> peekStack,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextLong --> getAsLong,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextLong --> popStack,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextInt --> peek,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextInt --> locationString,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextInt --> peekStack,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextInt --> getAsInt,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,nextInt --> popStack,com.google.gson.internal.bind.JsonTreeReader,);
Call(ATTRIBUTE,com.google.gson.internal.bind.JsonTreeReader,close$2 --> stack,java.lang.Object[],WRITE);
Call(ATTRIBUTE,com.google.gson.internal.bind.JsonTreeReader,close$2 --> stackSize,int,WRITE);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,skipValue --> peek,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,skipValue --> nextName,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,skipValue --> popStack,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,toString --> getClass,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,toString --> getSimpleName,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,promoteNameToValue --> expect,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,promoteNameToValue --> peekStack,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,promoteNameToValue --> next,java.util.Iterator,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,promoteNameToValue --> push,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,promoteNameToValue --> getValue,com.google.gson.internal.bind.Map.Entry,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,promoteNameToValue --> push,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,promoteNameToValue --> getKey,com.google.gson.internal.bind.Map.Entry,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,push --> arraycopy,null,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,push --> arraycopy,null,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,push --> arraycopy,null,);
Call(ATTRIBUTE,com.google.gson.internal.bind.JsonTreeReader,push --> stack,java.lang.Object[],WRITE);
Call(ATTRIBUTE,com.google.gson.internal.bind.JsonTreeReader,push --> pathIndices,int[],WRITE);
Call(ATTRIBUTE,com.google.gson.internal.bind.JsonTreeReader,push --> pathNames,java.lang.String[],WRITE);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,getPath --> append,com.google.gson.internal.bind.StringBuilder,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,getPath --> append,com.google.gson.internal.bind.StringBuilder,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,getPath --> append,com.google.gson.internal.bind.StringBuilder,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,getPath --> append,com.google.gson.internal.bind.StringBuilder,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,getPath --> append,com.google.gson.internal.bind.StringBuilder,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,getPath --> append,com.google.gson.internal.bind.StringBuilder,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,getPath --> toString,com.google.gson.internal.bind.StringBuilder,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReader,locationString --> getPath,com.google.gson.internal.bind.JsonTreeReader,);
EndClass 28
StartClass 29
Class(com.google.gson.JsonElement,N,N,Public);
Method(deepCopy,com.google.gson.JsonElement,Public,N,Y);
Method(isJsonArray,boolean,Public,N,N);
Method(isJsonObject,boolean,Public,N,N);
Method(isJsonPrimitive,boolean,Public,N,N);
Method(isJsonNull,boolean,Public,N,N);
Method(getAsJsonObject,com.google.gson.JsonObject,Public,N,N);
Method(getAsJsonArray,com.google.gson.JsonArray,Public,N,N);
Method(getAsJsonPrimitive,com.google.gson.JsonPrimitive,Public,N,N);
Method(getAsJsonNull,com.google.gson.JsonNull,Public,N,N);
Method(getAsBoolean,boolean,Public,N,N);
Method(getAsBooleanWrapper,java.lang.Boolean,Public,N,N);
Method(getAsNumber,java.lang.Number,Public,N,N);
Method(getAsString,java.lang.String,Public,N,N);
Method(getAsDouble,double,Public,N,N);
Method(getAsFloat,float,Public,N,N);
Method(getAsLong,long,Public,N,N);
Method(getAsInt,int,Public,N,N);
Method(getAsByte,byte,Public,N,N);
Method(getAsCharacter,com.google.gson.char,Public,N,N);
Method(getAsBigDecimal,java.math.BigDecimal,Public,N,N);
Method(getAsBigInteger,java.math.BigInteger,Public,N,N);
Method(getAsShort,com.google.gson.short,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.JsonArray);
SubClass(com.google.gson.JsonNull);
SubClass(com.google.gson.JsonObject);
SubClass(com.google.gson.JsonPrimitive);
Call(METHOD,com.google.gson.JsonElement,getAsJsonObject --> isJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsJsonArray --> isJsonArray,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsJsonPrimitive --> isJsonPrimitive,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsJsonNull --> isJsonNull,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsBoolean --> getClass,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsBoolean --> getSimpleName,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsBooleanWrapper --> getClass,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsBooleanWrapper --> getSimpleName,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsNumber --> getClass,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsNumber --> getSimpleName,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsString --> getClass,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsString --> getSimpleName,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsDouble --> getClass,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsDouble --> getSimpleName,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsFloat --> getClass,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsFloat --> getSimpleName,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsLong --> getClass,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsLong --> getSimpleName,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsInt --> getClass,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsInt --> getSimpleName,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsByte --> getClass,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsByte --> getSimpleName,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsCharacter --> getClass,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsCharacter --> getSimpleName,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsBigDecimal --> getClass,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsBigDecimal --> getSimpleName,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsBigInteger --> getClass,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsBigInteger --> getSimpleName,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsShort --> getClass,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,getAsShort --> getSimpleName,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonElement,toString --> setLenient,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.JsonElement,toString --> write,null,);
Call(METHOD,com.google.gson.JsonElement,toString --> toString,java.io.StringWriter,);
EndClass 29
StartClass 30
Class(com.google.gson.JsonObject,N,N,Public);
Attribute(members,com.google.gson.internal.LinkedTreeMap,Private,N,Y,);
Method(deepCopy,com.google.gson.JsonObject,Public,N,N);
Method(add,void,Public,N,N);
Method(remove,com.google.gson.JsonElement,Public,N,N);
Method(addProperty,void,Public,N,N);
Method(addProperty$2,void,Public,N,N);
Method(addProperty$3,void,Public,N,N);
Method(addProperty$4,void,Public,N,N);
Method(createJsonElement,com.google.gson.JsonElement,Private,N,N);
Method(entrySet,java.util.Set,Public,N,N);
Method(keySet,java.util.Set,Public,N,N);
Method(size,int,Public,N,N);
Method(has,boolean,Public,N,N);
Method(get,com.google.gson.JsonElement,Public,N,N);
Method(getAsJsonPrimitive,com.google.gson.JsonPrimitive,Public,N,N);
Method(getAsJsonArray,com.google.gson.JsonArray,Public,N,N);
Method(getAsJsonObject,com.google.gson.JsonObject,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(add,java.lang.String,);
Parameter(add,com.google.gson.JsonElement,);
Parameter(remove,java.lang.String,);
Parameter(addProperty,java.lang.String,);
Parameter(addProperty,java.lang.String,);
Parameter(addProperty$2,java.lang.String,);
Parameter(addProperty$2,java.lang.Number,);
Parameter(addProperty$3,java.lang.String,);
Parameter(addProperty$3,java.lang.Boolean,);
Parameter(addProperty$4,java.lang.String,);
Parameter(addProperty$4,java.lang.Character,);
Parameter(createJsonElement,java.lang.Object,);
Parameter(has,java.lang.String,);
Parameter(get,java.lang.String,);
Parameter(getAsJsonPrimitive,java.lang.String,);
Parameter(getAsJsonArray,java.lang.String,);
Parameter(getAsJsonObject,java.lang.String,);
Parameter(equals,java.lang.Object,);
SuperClass(com.google.gson.JsonElement);
Generalization(com.google.gson.JsonElement);
Call(METHOD,com.google.gson.JsonObject,deepCopy --> entrySet,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.JsonObject,deepCopy --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObject,deepCopy --> getKey,null,);
Call(METHOD,com.google.gson.JsonObject,deepCopy --> getValue,null,);
Call(METHOD,com.google.gson.JsonObject,deepCopy --> deepCopy,null,);
Call(METHOD,com.google.gson.JsonObject,add --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.JsonObject,remove --> remove,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.JsonObject,addProperty --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObject,addProperty --> createJsonElement,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObject,addProperty$2 --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObject,addProperty$2 --> createJsonElement,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObject,addProperty$3 --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObject,addProperty$3 --> createJsonElement,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObject,addProperty$4 --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObject,addProperty$4 --> createJsonElement,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObject,entrySet --> entrySet,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.JsonObject,keySet --> keySet,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.JsonObject,size --> size,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.JsonObject,has --> containsKey,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.JsonObject,get --> get,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.JsonObject,getAsJsonPrimitive --> get,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.JsonObject,getAsJsonArray --> get,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.JsonObject,getAsJsonObject --> get,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.JsonObject,equals --> equals,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObject,hashCode --> hashCode,com.google.gson.internal.LinkedTreeMap,);
EndClass 30
StartClass 31
Class(com.google.gson.JsonPrimitive,N,N,Public);
Attribute(PRIMITIVE_TYPES,com.google.gson.Class,Private,Y,Y,);
Attribute(value,java.lang.Object,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(<init>$5,void,Public,N,N);
Method(deepCopy,com.google.gson.JsonPrimitive,Public,N,N);
Method(setValue,void,Public,N,N);
Method(isBoolean,boolean,Public,N,N);
Method(getAsBooleanWrapper,java.lang.Boolean,Public,N,N);
Method(getAsBoolean,boolean,Public,N,N);
Method(isNumber,boolean,Public,N,N);
Method(getAsNumber,java.lang.Number,Public,N,N);
Method(isString,boolean,Public,N,N);
Method(getAsString,java.lang.String,Public,N,N);
Method(getAsDouble,double,Public,N,N);
Method(getAsBigDecimal,java.math.BigDecimal,Public,N,N);
Method(getAsBigInteger,java.math.BigInteger,Public,N,N);
Method(getAsFloat,float,Public,N,N);
Method(getAsLong,long,Public,N,N);
Method(getAsShort,com.google.gson.short,Public,N,N);
Method(getAsInt,int,Public,N,N);
Method(getAsByte,byte,Public,N,N);
Method(getAsCharacter,com.google.gson.char,Public,N,N);
Method(isPrimitiveOrString,boolean,Private,Y,N);
Method(hashCode,int,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(isIntegral,boolean,Private,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,java.lang.Boolean,);
Parameter(<init>$2,java.lang.Number,);
Parameter(<init>$3,java.lang.String,);
Parameter(<init>$4,java.lang.Character,);
Parameter(<init>$5,java.lang.Object,);
Parameter(setValue,java.lang.Object,);
Parameter(isPrimitiveOrString,java.lang.Object,);
Parameter(equals,java.lang.Object,);
Parameter(isIntegral,com.google.gson.JsonPrimitive,);
SuperClass(com.google.gson.JsonElement);
Generalization(com.google.gson.JsonElement);
Call(METHOD,com.google.gson.JsonPrimitive,<init> --> setValue,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,<init>$2 --> setValue,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,<init>$3 --> setValue,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,<init>$4 --> setValue,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,<init>$5 --> setValue,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,setValue --> charValue,java.lang.Character,);
Call(METHOD,com.google.gson.JsonPrimitive,setValue --> valueOf,null,);
Call(METHOD,com.google.gson.JsonPrimitive,setValue --> checkArgument,null,);
Call(METHOD,com.google.gson.JsonPrimitive,setValue --> isPrimitiveOrString,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsBoolean --> isBoolean,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsBoolean --> getAsBooleanWrapper,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsBoolean --> booleanValue,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsBoolean --> parseBoolean,null,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsBoolean --> getAsString,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsString --> isNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsString --> getAsNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsString --> toString,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsString --> isBoolean,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsString --> getAsBooleanWrapper,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsString --> toString,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsDouble --> isNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsDouble --> getAsNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsDouble --> doubleValue,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsDouble --> parseDouble,null,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsDouble --> getAsString,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsBigDecimal --> toString,java.lang.Object,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsBigInteger --> toString,java.lang.Object,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsFloat --> isNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsFloat --> getAsNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsFloat --> floatValue,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsFloat --> parseFloat,null,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsFloat --> getAsString,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsLong --> isNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsLong --> getAsNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsLong --> longValue,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsLong --> parseLong,null,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsLong --> getAsString,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsShort --> isNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsShort --> getAsNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsShort --> shortValue,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsShort --> parseShort,null,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsShort --> getAsString,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsInt --> isNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsInt --> getAsNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsInt --> intValue,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsInt --> parseInt,null,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsInt --> getAsString,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsByte --> isNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsByte --> getAsNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsByte --> byteValue,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsByte --> parseByte,null,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsByte --> getAsString,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsCharacter --> getAsString,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,getAsCharacter --> charAt,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,isPrimitiveOrString --> getClass,java.lang.Object,);
Call(METHOD,com.google.gson.JsonPrimitive,isPrimitiveOrString --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.JsonPrimitive,hashCode --> isIntegral,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,hashCode --> getAsNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,hashCode --> longValue,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,hashCode --> doubleToLongBits,null,);
Call(METHOD,com.google.gson.JsonPrimitive,hashCode --> getAsNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,hashCode --> doubleValue,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,hashCode --> hashCode,long,);
Call(METHOD,com.google.gson.JsonPrimitive,equals --> getClass,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,equals --> getClass,java.lang.Object,);
Call(METHOD,com.google.gson.JsonPrimitive,equals --> isIntegral,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,equals --> isIntegral,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,equals --> getAsNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,equals --> longValue,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,equals --> getAsNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,equals --> longValue,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,equals --> getAsNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,equals --> doubleValue,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,equals --> getAsNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,equals --> doubleValue,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitive,equals --> isNaN,null,);
Call(METHOD,com.google.gson.JsonPrimitive,equals --> isNaN,null,);
Call(METHOD,com.google.gson.JsonPrimitive,equals --> equals,java.lang.Object,);
EndClass 31
StartClass 32
Class(java.lang.Number,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.internal.LazilyParsedNumber);
EndClass 32
StartClass 33
Class(com.google.gson.internal.LazilyParsedNumber,N,N,Public);
Attribute(value,java.lang.String,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(intValue,int,Public,N,N);
Method(longValue,long,Public,N,N);
Method(floatValue,float,Public,N,N);
Method(doubleValue,double,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(writeReplace,java.lang.Object,Private,N,N);
Method(hashCode,int,Public,N,N);
Method(equals,boolean,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(equals,java.lang.Object,);
SuperClass(java.lang.Number);
Generalization(java.lang.Number);
Call(ATTRIBUTE,com.google.gson.internal.LazilyParsedNumber,<init> --> value,java.lang.String,READ);
Call(METHOD,com.google.gson.internal.LazilyParsedNumber,intValue --> parseInt,null,);
Call(METHOD,com.google.gson.internal.LazilyParsedNumber,intValue --> parseLong,null,);
Call(METHOD,com.google.gson.internal.LazilyParsedNumber,intValue --> intValue,java.math.BigDecimal,);
Call(METHOD,com.google.gson.internal.LazilyParsedNumber,longValue --> parseLong,null,);
Call(METHOD,com.google.gson.internal.LazilyParsedNumber,longValue --> longValue,java.math.BigDecimal,);
Call(METHOD,com.google.gson.internal.LazilyParsedNumber,floatValue --> parseFloat,null,);
Call(METHOD,com.google.gson.internal.LazilyParsedNumber,doubleValue --> parseDouble,null,);
Call(METHOD,com.google.gson.internal.LazilyParsedNumber,hashCode --> hashCode,java.lang.String,);
Call(METHOD,com.google.gson.internal.LazilyParsedNumber,equals --> equals,java.lang.String,);
EndClass 33
StartClass 34
Class(com.google.gson.JsonArray,N,N,Public);
Attribute(elements,java.util.List,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(deepCopy,com.google.gson.JsonArray,Public,N,N);
Method(add,void,Public,N,N);
Method(add$2,void,Public,N,N);
Method(add$3,void,Public,N,N);
Method(add$4,void,Public,N,N);
Method(add$5,void,Public,N,N);
Method(addAll,void,Public,N,N);
Method(set,com.google.gson.JsonElement,Public,N,N);
Method(remove,boolean,Public,N,N);
Method(remove$2,com.google.gson.JsonElement,Public,N,N);
Method(contains,boolean,Public,N,N);
Method(size,int,Public,N,N);
Method(iterator,java.util.Iterator,Public,N,N);
Method(get,com.google.gson.JsonElement,Public,N,N);
Method(getAsNumber,java.lang.Number,Public,N,N);
Method(getAsString,java.lang.String,Public,N,N);
Method(getAsDouble,double,Public,N,N);
Method(getAsBigDecimal,java.math.BigDecimal,Public,N,N);
Method(getAsBigInteger,java.math.BigInteger,Public,N,N);
Method(getAsFloat,float,Public,N,N);
Method(getAsLong,long,Public,N,N);
Method(getAsInt,int,Public,N,N);
Method(getAsByte,byte,Public,N,N);
Method(getAsCharacter,com.google.gson.char,Public,N,N);
Method(getAsShort,com.google.gson.short,Public,N,N);
Method(getAsBoolean,boolean,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(hashCode,int,Public,N,N);
Parameter(<init>$2,int,);
Parameter(add,java.lang.Boolean,);
Parameter(add$2,java.lang.Character,);
Parameter(add$3,java.lang.Number,);
Parameter(add$4,java.lang.String,);
Parameter(add$5,com.google.gson.JsonElement,);
Parameter(addAll,com.google.gson.JsonArray,);
Parameter(set,int,);
Parameter(set,com.google.gson.JsonElement,);
Parameter(remove,com.google.gson.JsonElement,);
Parameter(remove$2,int,);
Parameter(contains,com.google.gson.JsonElement,);
Parameter(get,int,);
Parameter(equals,java.lang.Object,);
SuperClass(com.google.gson.JsonElement);
Generalization(com.google.gson.JsonElement);
Realization(com.google.gson.Iterable);
Call(ATTRIBUTE,com.google.gson.JsonArray,<init> --> elements,java.util.List,WRITE);
Call(ATTRIBUTE,com.google.gson.JsonArray,<init>$2 --> elements,java.util.List,WRITE);
Call(METHOD,com.google.gson.JsonArray,deepCopy --> isEmpty,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,deepCopy --> size,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,deepCopy --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArray,deepCopy --> deepCopy,null,);
Call(METHOD,com.google.gson.JsonArray,add --> add,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,add$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,add$3 --> add,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,add$4 --> add,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,add$5 --> add,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,addAll --> addAll,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,set --> set,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,remove --> remove,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,remove$2 --> remove,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,contains --> contains,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,size --> size,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,iterator --> iterator,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,get --> get,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsNumber --> size,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsNumber --> get,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsNumber --> getAsNumber,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsString --> size,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsString --> get,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsString --> getAsString,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsDouble --> size,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsDouble --> get,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsDouble --> getAsDouble,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsBigDecimal --> size,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsBigDecimal --> get,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsBigDecimal --> getAsBigDecimal,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsBigInteger --> size,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsBigInteger --> get,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsBigInteger --> getAsBigInteger,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsFloat --> size,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsFloat --> get,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsFloat --> getAsFloat,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsLong --> size,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsLong --> get,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsLong --> getAsLong,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsInt --> size,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsInt --> get,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsInt --> getAsInt,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsByte --> size,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsByte --> get,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsByte --> getAsByte,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsCharacter --> size,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsCharacter --> get,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsCharacter --> getAsCharacter,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsShort --> size,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsShort --> get,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsShort --> getAsShort,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsBoolean --> size,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsBoolean --> get,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,getAsBoolean --> getAsBoolean,java.util.List,);
Call(METHOD,com.google.gson.JsonArray,equals --> equals,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArray,hashCode --> hashCode,java.util.List,);
EndClass 34
StartClass 35
Class(com.google.gson.Iterable,Y,Y,Public);
EndClass 35
StartClass 36
Class(com.google.gson.JsonNull,N,N,Public);
Attribute(INSTANCE,com.google.gson.JsonNull,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(deepCopy,com.google.gson.JsonNull,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(equals,java.lang.Object,);
SuperClass(com.google.gson.JsonElement);
Generalization(com.google.gson.JsonElement);
Composition(com.google.gson.JsonNull);
Call(METHOD,com.google.gson.JsonNull,hashCode --> hashCode,null,);
EndClass 36
StartClass 37
Class(com.google.gson.stream.JsonWriter,N,N,Public);
Attribute(REPLACEMENT_CHARS,java.lang.String[],Private,Y,Y,);
Attribute(HTML_SAFE_REPLACEMENT_CHARS,java.lang.String[],Private,Y,Y,);
Attribute(out,java.io.Writer,Private,N,Y,);
Attribute(stack,int[],Private,N,N,);
Attribute(stackSize,int,Private,N,N,);
Attribute(indent,java.lang.String,Private,N,N,);
Attribute(separator,java.lang.String,Private,N,N,);
Attribute(lenient,boolean,Private,N,N,);
Attribute(htmlSafe,boolean,Private,N,N,);
Attribute(deferredName,java.lang.String,Private,N,N,);
Attribute(serializeNulls,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setIndent,void,Public,N,N);
Method(setLenient,void,Public,N,N);
Method(isLenient,boolean,Public,N,N);
Method(setHtmlSafe,void,Public,N,N);
Method(isHtmlSafe,boolean,Public,N,N);
Method(setSerializeNulls,void,Public,N,N);
Method(getSerializeNulls,boolean,Public,N,N);
Method(beginArray,com.google.gson.stream.JsonWriter,Public,N,N);
Method(endArray,com.google.gson.stream.JsonWriter,Public,N,N);
Method(beginObject,com.google.gson.stream.JsonWriter,Public,N,N);
Method(endObject,com.google.gson.stream.JsonWriter,Public,N,N);
Method(open,com.google.gson.stream.JsonWriter,Private,N,N);
Method(close,com.google.gson.stream.JsonWriter,Private,N,N);
Method(push,void,Private,N,N);
Method(peek,int,Private,N,N);
Method(replaceTop,void,Private,N,N);
Method(name,com.google.gson.stream.JsonWriter,Public,N,N);
Method(writeDeferredName,void,Private,N,N);
Method(value,com.google.gson.stream.JsonWriter,Public,N,N);
Method(jsonValue,com.google.gson.stream.JsonWriter,Public,N,N);
Method(nullValue,com.google.gson.stream.JsonWriter,Public,N,N);
Method(value$2,com.google.gson.stream.JsonWriter,Public,N,N);
Method(value$3,com.google.gson.stream.JsonWriter,Public,N,N);
Method(value$4,com.google.gson.stream.JsonWriter,Public,N,N);
Method(value$5,com.google.gson.stream.JsonWriter,Public,N,N);
Method(value$6,com.google.gson.stream.JsonWriter,Public,N,N);
Method(flush,void,Public,N,N);
Method(close$2,void,Public,N,N);
Method(string,void,Private,N,N);
Method(newline,void,Private,N,N);
Method(beforeName,void,Private,N,N);
Method(beforeValue,void,Private,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,java.io.Writer,);
Parameter(setIndent,java.lang.String,);
Parameter(setLenient,boolean,);
Parameter(setHtmlSafe,boolean,);
Parameter(setSerializeNulls,boolean,);
Parameter(open,int,);
Parameter(open,java.lang.String,);
Parameter(close,int,);
Parameter(close,int,);
Parameter(close,java.lang.String,);
Parameter(push,int,);
Parameter(replaceTop,int,);
Parameter(name,java.lang.String,);
Parameter(value,java.lang.String,);
Parameter(jsonValue,java.lang.String,);
Parameter(value$2,boolean,);
Parameter(value$3,java.lang.Boolean,);
Parameter(value$4,double,);
Parameter(value$5,long,);
Parameter(value$6,java.lang.Number,);
Parameter(string,java.lang.String,);
SubClass(com.google.gson.internal.bind.JsonTreeWriter);
Realization(java.io.Closeable);
Realization(java.io.Flushable);
Composition(java.io.Writer);
Call(ATTRIBUTE,com.google.gson.stream.JsonWriter,<init> --> out,java.io.Writer,READ);
Call(METHOD,com.google.gson.stream.JsonWriter,setIndent --> length,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.stream.JsonWriter,setIndent --> indent,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonWriter,setLenient --> lenient,boolean,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonWriter,setHtmlSafe --> htmlSafe,boolean,READ);
Call(ATTRIBUTE,com.google.gson.stream.JsonWriter,setSerializeNulls --> serializeNulls,boolean,READ);
Call(METHOD,com.google.gson.stream.JsonWriter,beginArray --> writeDeferredName,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,beginArray --> open,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,endArray --> close,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,beginObject --> writeDeferredName,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,beginObject --> open,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,endObject --> close,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,open --> beforeValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,open --> push,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,open --> write,java.io.Writer,);
Call(METHOD,com.google.gson.stream.JsonWriter,close --> peek,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,close --> newline,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,close --> write,java.io.Writer,);
Call(METHOD,com.google.gson.stream.JsonWriter,push --> arraycopy,null,);
Call(ATTRIBUTE,com.google.gson.stream.JsonWriter,push --> stack,int[],WRITE);
Call(ATTRIBUTE,com.google.gson.stream.JsonWriter,name --> deferredName,java.lang.String,WRITE);
Call(METHOD,com.google.gson.stream.JsonWriter,writeDeferredName --> beforeName,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,writeDeferredName --> string,com.google.gson.stream.JsonWriter,);
Call(ATTRIBUTE,com.google.gson.stream.JsonWriter,writeDeferredName --> deferredName,java.lang.String,WRITE);
Call(METHOD,com.google.gson.stream.JsonWriter,value --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,value --> writeDeferredName,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,value --> beforeValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,value --> string,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,jsonValue --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,jsonValue --> writeDeferredName,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,jsonValue --> beforeValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,jsonValue --> append,java.io.Writer,);
Call(METHOD,com.google.gson.stream.JsonWriter,nullValue --> writeDeferredName,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,nullValue --> beforeValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,nullValue --> write,java.io.Writer,);
Call(ATTRIBUTE,com.google.gson.stream.JsonWriter,nullValue --> deferredName,java.lang.String,WRITE);
Call(METHOD,com.google.gson.stream.JsonWriter,value$2 --> writeDeferredName,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,value$2 --> beforeValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,value$2 --> write,java.io.Writer,);
Call(METHOD,com.google.gson.stream.JsonWriter,value$3 --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,value$3 --> writeDeferredName,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,value$3 --> beforeValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,value$3 --> write,java.io.Writer,);
Call(METHOD,com.google.gson.stream.JsonWriter,value$4 --> writeDeferredName,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,value$4 --> isNaN,null,);
Call(METHOD,com.google.gson.stream.JsonWriter,value$4 --> isInfinite,null,);
Call(METHOD,com.google.gson.stream.JsonWriter,value$4 --> beforeValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,value$4 --> append,java.io.Writer,);
Call(METHOD,com.google.gson.stream.JsonWriter,value$4 --> toString,null,);
Call(METHOD,com.google.gson.stream.JsonWriter,value$5 --> writeDeferredName,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,value$5 --> beforeValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,value$5 --> write,java.io.Writer,);
Call(METHOD,com.google.gson.stream.JsonWriter,value$5 --> toString,null,);
Call(METHOD,com.google.gson.stream.JsonWriter,value$6 --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,value$6 --> writeDeferredName,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,value$6 --> toString,java.lang.Number,);
Call(METHOD,com.google.gson.stream.JsonWriter,value$6 --> equals,java.lang.String,);
Call(METHOD,com.google.gson.stream.JsonWriter,value$6 --> equals,java.lang.String,);
Call(METHOD,com.google.gson.stream.JsonWriter,value$6 --> equals,java.lang.String,);
Call(METHOD,com.google.gson.stream.JsonWriter,value$6 --> beforeValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,value$6 --> append,java.io.Writer,);
Call(METHOD,com.google.gson.stream.JsonWriter,flush --> flush,java.io.Writer,);
Call(METHOD,com.google.gson.stream.JsonWriter,close$2 --> close,java.io.Writer,);
Call(ATTRIBUTE,com.google.gson.stream.JsonWriter,close$2 --> stackSize,int,WRITE);
Call(METHOD,com.google.gson.stream.JsonWriter,string --> write,java.io.Writer,);
Call(METHOD,com.google.gson.stream.JsonWriter,string --> length,java.lang.String,);
Call(METHOD,com.google.gson.stream.JsonWriter,string --> charAt,java.lang.String,);
Call(METHOD,com.google.gson.stream.JsonWriter,string --> write,java.io.Writer,);
Call(METHOD,com.google.gson.stream.JsonWriter,string --> write,java.io.Writer,);
Call(METHOD,com.google.gson.stream.JsonWriter,string --> write,java.io.Writer,);
Call(METHOD,com.google.gson.stream.JsonWriter,string --> write,java.io.Writer,);
Call(METHOD,com.google.gson.stream.JsonWriter,newline --> write,java.io.Writer,);
Call(METHOD,com.google.gson.stream.JsonWriter,newline --> write,java.io.Writer,);
Call(METHOD,com.google.gson.stream.JsonWriter,beforeName --> peek,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,beforeName --> write,java.io.Writer,);
Call(METHOD,com.google.gson.stream.JsonWriter,beforeName --> newline,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,beforeName --> replaceTop,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,beforeValue --> peek,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,beforeValue --> replaceTop,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,beforeValue --> replaceTop,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,beforeValue --> newline,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,beforeValue --> append,java.io.Writer,);
Call(METHOD,com.google.gson.stream.JsonWriter,beforeValue --> newline,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriter,beforeValue --> append,java.io.Writer,);
Call(METHOD,com.google.gson.stream.JsonWriter,beforeValue --> replaceTop,com.google.gson.stream.JsonWriter,);
EndClass 37
StartClass 38
Class(com.google.gson.internal.bind.JsonTreeWriter,N,N,Public);
Attribute(UNWRITABLE_WRITER,java.io.Writer,Private,Y,Y,);
Attribute(SENTINEL_CLOSED,com.google.gson.JsonPrimitive,Private,Y,Y,);
Attribute(stack,java.util.List,Private,N,Y,);
Attribute(pendingName,java.lang.String,Private,N,N,);
Attribute(product,com.google.gson.JsonElement,Private,N,N,);
Method(write,void,Public,N,N);
Method(flush,void,Public,N,N);
Method(close,void,Public,N,N);
Method(<init>,void,Public,N,N);
Method(get,com.google.gson.JsonElement,Public,N,N);
Method(peek,com.google.gson.JsonElement,Private,N,N);
Method(put,void,Private,N,N);
Method(beginArray,com.google.gson.stream.JsonWriter,Public,N,N);
Method(endArray,com.google.gson.stream.JsonWriter,Public,N,N);
Method(beginObject,com.google.gson.stream.JsonWriter,Public,N,N);
Method(endObject,com.google.gson.stream.JsonWriter,Public,N,N);
Method(name,com.google.gson.stream.JsonWriter,Public,N,N);
Method(value,com.google.gson.stream.JsonWriter,Public,N,N);
Method(nullValue,com.google.gson.stream.JsonWriter,Public,N,N);
Method(value$2,com.google.gson.stream.JsonWriter,Public,N,N);
Method(value$3,com.google.gson.stream.JsonWriter,Public,N,N);
Method(value$4,com.google.gson.stream.JsonWriter,Public,N,N);
Method(value$5,com.google.gson.stream.JsonWriter,Public,N,N);
Method(value$6,com.google.gson.stream.JsonWriter,Public,N,N);
Method(flush$2,void,Public,N,N);
Method(close$2,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(write,com.google.gson.internal.bind.char[],);
Parameter(write,int,);
Parameter(write,int,);
Parameter(put,com.google.gson.JsonElement,);
Parameter(name,java.lang.String,);
Parameter(value,java.lang.String,);
Parameter(value$2,boolean,);
Parameter(value$3,java.lang.Boolean,);
Parameter(value$4,double,);
Parameter(value$5,long,);
Parameter(value$6,java.lang.Number,);
SuperClass(com.google.gson.stream.JsonWriter);
Generalization(com.google.gson.stream.JsonWriter);
Composition(java.io.Writer);
Composition(com.google.gson.JsonPrimitive);
Composition(com.google.gson.JsonElement);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,<init> --> <init>,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,get --> isEmpty,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,peek --> get,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,peek --> size,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,put --> isJsonNull,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,put --> getSerializeNulls,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,put --> peek,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,put --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,put --> isEmpty,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,put --> peek,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,put --> add,com.google.gson.JsonArray,);
Call(ATTRIBUTE,com.google.gson.internal.bind.JsonTreeWriter,put --> pendingName,java.lang.String,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.bind.JsonTreeWriter,put --> product,com.google.gson.JsonElement,WRITE);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,beginArray --> put,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,beginArray --> add,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,endArray --> isEmpty,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,endArray --> peek,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,endArray --> remove,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,endArray --> size,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,beginObject --> put,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,beginObject --> add,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,endObject --> isEmpty,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,endObject --> peek,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,endObject --> remove,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,endObject --> size,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,name --> isEmpty,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,name --> peek,com.google.gson.internal.bind.JsonTreeWriter,);
Call(ATTRIBUTE,com.google.gson.internal.bind.JsonTreeWriter,name --> pendingName,java.lang.String,WRITE);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,value --> nullValue,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,value --> put,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,nullValue --> put,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,value$2 --> put,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,value$3 --> nullValue,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,value$3 --> put,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,value$4 --> isLenient,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,value$4 --> isNaN,null,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,value$4 --> isInfinite,null,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,value$4 --> put,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,value$5 --> put,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,value$6 --> nullValue,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,value$6 --> isLenient,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,value$6 --> doubleValue,java.lang.Number,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,value$6 --> isNaN,null,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,value$6 --> isInfinite,null,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,value$6 --> put,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,close$2 --> isEmpty,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriter,close$2 --> add,java.util.List,);
EndClass 38
StartClass 39
Class(java.io.Closeable,Y,Y,Public);
EndClass 39
StartClass 40
Class(java.io.Flushable,Y,Y,Public);
EndClass 40
StartClass 41
Class(com.google.gson.ExclusionStrategy,Y,Y,Public);
Method(shouldSkipField,boolean,Public,N,Y);
Method(shouldSkipClass,boolean,Public,N,Y);
Parameter(shouldSkipField,com.google.gson.FieldAttributes,);
Parameter(shouldSkipClass,java.lang.Class,);
EndClass 41
StartClass 42
Class(com.google.gson.FieldAttributes,N,N,Public);
Attribute(field,java.lang.reflect.Field,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(getDeclaringClass,java.lang.Class,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(getDeclaredType,java.lang.reflect.Type,Public,N,N);
Method(getDeclaredClass,java.lang.Class,Public,N,N);
Method(getAnnotation,com.google.gson.T,Public,N,N);
Method(getAnnotations,java.util.Collection,Public,N,N);
Method(hasModifier,boolean,Public,N,N);
Method(get,java.lang.Object,Public,N,N);
Method(isSynthetic,boolean,Public,N,N);
Parameter(<init>,java.lang.reflect.Field,);
Parameter(getAnnotation,java.lang.Class,);
Parameter(hasModifier,int,);
Parameter(get,java.lang.Object,);
Call(METHOD,com.google.gson.FieldAttributes,<init> --> checkNotNull,null,);
Call(METHOD,com.google.gson.FieldAttributes,getDeclaringClass --> getDeclaringClass,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.FieldAttributes,getName --> getName,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.FieldAttributes,getDeclaredType --> getGenericType,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.FieldAttributes,getDeclaredClass --> getType,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.FieldAttributes,getAnnotation --> getAnnotation,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.FieldAttributes,getAnnotations --> asList,null,);
Call(METHOD,com.google.gson.FieldAttributes,getAnnotations --> getAnnotations,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.FieldAttributes,hasModifier --> getModifiers,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.FieldAttributes,get --> get,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.FieldAttributes,isSynthetic --> isSynthetic,java.lang.reflect.Field,);
EndClass 42
StartClass 43
Class(com.google.gson.Gson,N,N,Public);
Attribute(DEFAULT_JSON_NON_EXECUTABLE,boolean,Public,Y,Y,);
Attribute(DEFAULT_LENIENT,boolean,Public,Y,Y,);
Attribute(DEFAULT_PRETTY_PRINT,boolean,Public,Y,Y,);
Attribute(DEFAULT_ESCAPE_HTML,boolean,Public,Y,Y,);
Attribute(DEFAULT_SERIALIZE_NULLS,boolean,Public,Y,Y,);
Attribute(DEFAULT_COMPLEX_MAP_KEYS,boolean,Public,Y,Y,);
Attribute(DEFAULT_SPECIALIZE_FLOAT_VALUES,boolean,Public,Y,Y,);
Attribute(NULL_KEY_SURROGATE,com.google.gson.reflect.TypeToken,Private,Y,Y,);
Attribute(JSON_NON_EXECUTABLE_PREFIX,java.lang.String,Private,Y,Y,);
Attribute(calls,java.lang.ThreadLocal,Private,N,Y,);
Attribute(typeTokenCache,java.util.Map,Private,N,Y,);
Attribute(constructorConstructor,com.google.gson.internal.ConstructorConstructor,Private,N,Y,);
Attribute(jsonAdapterFactory,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory,Private,N,Y,);
Attribute(factories,java.util.List,Public,N,Y,);
Attribute(excluder,com.google.gson.internal.Excluder,Public,N,Y,);
Attribute(fieldNamingStrategy,com.google.gson.FieldNamingStrategy,Public,N,Y,);
Attribute(instanceCreators,java.util.Map,Public,N,Y,);
Attribute(serializeNulls,boolean,Public,N,Y,);
Attribute(complexMapKeySerialization,boolean,Public,N,Y,);
Attribute(generateNonExecutableJson,boolean,Public,N,Y,);
Attribute(htmlSafe,boolean,Public,N,Y,);
Attribute(prettyPrinting,boolean,Public,N,Y,);
Attribute(lenient,boolean,Public,N,Y,);
Attribute(serializeSpecialFloatingPointValues,boolean,Public,N,Y,);
Attribute(datePattern,java.lang.String,Public,N,Y,);
Attribute(dateStyle,int,Public,N,Y,);
Attribute(timeStyle,int,Public,N,Y,);
Attribute(longSerializationPolicy,com.google.gson.LongSerializationPolicy,Public,N,Y,);
Attribute(builderFactories,java.util.List,Public,N,Y,);
Attribute(builderHierarchyFactories,java.util.List,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(newBuilder,com.google.gson.GsonBuilder,Public,N,N);
Method(excluder,com.google.gson.internal.Excluder,Public,N,N);
Method(fieldNamingStrategy,com.google.gson.FieldNamingStrategy,Public,N,N);
Method(serializeNulls,boolean,Public,N,N);
Method(htmlSafe,boolean,Public,N,N);
Method(doubleAdapter,com.google.gson.TypeAdapter,Private,N,N);
Method(read,java.lang.Double,Public,N,N);
Method(write,void,Public,N,N);
Method(floatAdapter,com.google.gson.TypeAdapter,Private,N,N);
Method(read$2,java.lang.Float,Public,N,N);
Method(write$2,void,Public,N,N);
Method(checkValidFloatingPoint,void,Public,Y,N);
Method(longAdapter,com.google.gson.TypeAdapter,Private,Y,N);
Method(read$3,java.lang.Number,Public,N,N);
Method(write$3,void,Public,N,N);
Method(atomicLongAdapter,com.google.gson.TypeAdapter,Private,Y,N);
Method(write$4,void,Public,N,N);
Method(read$4,java.util.concurrent.atomic.AtomicLong,Public,N,N);
Method(atomicLongArrayAdapter,com.google.gson.TypeAdapter,Private,Y,N);
Method(write$5,void,Public,N,N);
Method(read$5,java.util.concurrent.atomic.AtomicLongArray,Public,N,N);
Method(getAdapter,com.google.gson.TypeAdapter,Public,N,N);
Method(getDelegateAdapter,com.google.gson.TypeAdapter,Public,N,N);
Method(getAdapter$2,com.google.gson.TypeAdapter,Public,N,N);
Method(toJsonTree,com.google.gson.JsonElement,Public,N,N);
Method(toJsonTree$2,com.google.gson.JsonElement,Public,N,N);
Method(toJson,java.lang.String,Public,N,N);
Method(toJson$2,java.lang.String,Public,N,N);
Method(toJson$3,void,Public,N,N);
Method(toJson$4,void,Public,N,N);
Method(toJson$5,void,Public,N,N);
Method(toJson$6,java.lang.String,Public,N,N);
Method(toJson$7,void,Public,N,N);
Method(newJsonWriter,com.google.gson.stream.JsonWriter,Public,N,N);
Method(newJsonReader,com.google.gson.stream.JsonReader,Public,N,N);
Method(toJson$8,void,Public,N,N);
Method(fromJson,com.google.gson.T,Public,N,N);
Method(fromJson$2,com.google.gson.T,Public,N,N);
Method(fromJson$3,com.google.gson.T,Public,N,N);
Method(fromJson$4,com.google.gson.T,Public,N,N);
Method(assertFullConsumption,void,Private,Y,N);
Method(fromJson$5,com.google.gson.T,Public,N,N);
Method(fromJson$6,com.google.gson.T,Public,N,N);
Method(fromJson$7,com.google.gson.T,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>$2,com.google.gson.internal.Excluder,);
Parameter(<init>$2,com.google.gson.FieldNamingStrategy,);
Parameter(<init>$2,java.util.Map,);
Parameter(<init>$2,boolean,);
Parameter(<init>$2,boolean,);
Parameter(<init>$2,boolean,);
Parameter(<init>$2,boolean,);
Parameter(<init>$2,boolean,);
Parameter(<init>$2,boolean,);
Parameter(<init>$2,boolean,);
Parameter(<init>$2,com.google.gson.LongSerializationPolicy,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,int,);
Parameter(<init>$2,int,);
Parameter(<init>$2,java.util.List,);
Parameter(<init>$2,java.util.List,);
Parameter(<init>$2,java.util.List,);
Parameter(doubleAdapter,boolean,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,java.lang.Number,);
Parameter(floatAdapter,boolean,);
Parameter(read$2,com.google.gson.stream.JsonReader,);
Parameter(write$2,com.google.gson.stream.JsonWriter,);
Parameter(write$2,java.lang.Number,);
Parameter(checkValidFloatingPoint,double,);
Parameter(longAdapter,com.google.gson.LongSerializationPolicy,);
Parameter(read$3,com.google.gson.stream.JsonReader,);
Parameter(write$3,com.google.gson.stream.JsonWriter,);
Parameter(write$3,java.lang.Number,);
Parameter(atomicLongAdapter,com.google.gson.TypeAdapter,);
Parameter(write$4,com.google.gson.stream.JsonWriter,);
Parameter(write$4,java.util.concurrent.atomic.AtomicLong,);
Parameter(read$4,com.google.gson.stream.JsonReader,);
Parameter(atomicLongArrayAdapter,com.google.gson.TypeAdapter,);
Parameter(write$5,com.google.gson.stream.JsonWriter,);
Parameter(write$5,java.util.concurrent.atomic.AtomicLongArray,);
Parameter(read$5,com.google.gson.stream.JsonReader,);
Parameter(getAdapter,com.google.gson.reflect.TypeToken,);
Parameter(getDelegateAdapter,com.google.gson.TypeAdapterFactory,);
Parameter(getDelegateAdapter,com.google.gson.reflect.TypeToken,);
Parameter(getAdapter$2,java.lang.Class,);
Parameter(toJsonTree,java.lang.Object,);
Parameter(toJsonTree$2,java.lang.Object,);
Parameter(toJsonTree$2,java.lang.reflect.Type,);
Parameter(toJson,java.lang.Object,);
Parameter(toJson$2,java.lang.Object,);
Parameter(toJson$2,java.lang.reflect.Type,);
Parameter(toJson$3,java.lang.Object,);
Parameter(toJson$3,java.lang.Appendable,);
Parameter(toJson$4,java.lang.Object,);
Parameter(toJson$4,java.lang.reflect.Type,);
Parameter(toJson$4,java.lang.Appendable,);
Parameter(toJson$5,java.lang.Object,);
Parameter(toJson$5,java.lang.reflect.Type,);
Parameter(toJson$5,com.google.gson.stream.JsonWriter,);
Parameter(toJson$6,com.google.gson.JsonElement,);
Parameter(toJson$7,com.google.gson.JsonElement,);
Parameter(toJson$7,java.lang.Appendable,);
Parameter(newJsonWriter,java.io.Writer,);
Parameter(newJsonReader,java.io.Reader,);
Parameter(toJson$8,com.google.gson.JsonElement,);
Parameter(toJson$8,com.google.gson.stream.JsonWriter,);
Parameter(fromJson,java.lang.String,);
Parameter(fromJson,java.lang.Class,);
Parameter(fromJson$2,java.lang.String,);
Parameter(fromJson$2,java.lang.reflect.Type,);
Parameter(fromJson$3,java.io.Reader,);
Parameter(fromJson$3,java.lang.Class,);
Parameter(fromJson$4,java.io.Reader,);
Parameter(fromJson$4,java.lang.reflect.Type,);
Parameter(assertFullConsumption,java.lang.Object,);
Parameter(assertFullConsumption,com.google.gson.stream.JsonReader,);
Parameter(fromJson$5,com.google.gson.stream.JsonReader,);
Parameter(fromJson$5,java.lang.reflect.Type,);
Parameter(fromJson$6,com.google.gson.JsonElement,);
Parameter(fromJson$6,java.lang.Class,);
Parameter(fromJson$7,com.google.gson.JsonElement,);
Parameter(fromJson$7,java.lang.reflect.Type,);
Composition(com.google.gson.internal.ConstructorConstructor);
Composition(com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory);
Composition(com.google.gson.internal.Excluder);
Composition(com.google.gson.FieldNamingStrategy);
Composition(com.google.gson.LongSerializationPolicy);
Call(METHOD,com.google.gson.Gson,<init> --> this,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> addAll,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> longAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> newFactory,null,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> newFactory,null,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> doubleAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> newFactory,null,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> floatAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> newFactory,null,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> atomicLongAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> newFactory,null,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> atomicLongArrayAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> newFactory,null,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> newFactory,null,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,<init>$2 --> unmodifiableList,null,);
Call(ATTRIBUTE,com.google.gson.Gson,<init>$2 --> excluder,com.google.gson.internal.Excluder,READ);
Call(ATTRIBUTE,com.google.gson.Gson,<init>$2 --> fieldNamingStrategy,com.google.gson.FieldNamingStrategy,READ);
Call(ATTRIBUTE,com.google.gson.Gson,<init>$2 --> instanceCreators,java.util.Map,READ);
Call(ATTRIBUTE,com.google.gson.Gson,<init>$2 --> serializeNulls,boolean,READ);
Call(ATTRIBUTE,com.google.gson.Gson,<init>$2 --> complexMapKeySerialization,boolean,READ);
Call(ATTRIBUTE,com.google.gson.Gson,<init>$2 --> htmlSafe,boolean,READ);
Call(ATTRIBUTE,com.google.gson.Gson,<init>$2 --> prettyPrinting,boolean,READ);
Call(ATTRIBUTE,com.google.gson.Gson,<init>$2 --> lenient,boolean,READ);
Call(ATTRIBUTE,com.google.gson.Gson,<init>$2 --> serializeSpecialFloatingPointValues,boolean,READ);
Call(ATTRIBUTE,com.google.gson.Gson,<init>$2 --> longSerializationPolicy,com.google.gson.LongSerializationPolicy,READ);
Call(ATTRIBUTE,com.google.gson.Gson,<init>$2 --> datePattern,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.Gson,<init>$2 --> dateStyle,int,READ);
Call(ATTRIBUTE,com.google.gson.Gson,<init>$2 --> timeStyle,int,READ);
Call(ATTRIBUTE,com.google.gson.Gson,<init>$2 --> builderFactories,java.util.List,READ);
Call(ATTRIBUTE,com.google.gson.Gson,<init>$2 --> builderHierarchyFactories,java.util.List,READ);
Call(METHOD,com.google.gson.Gson,read --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.Gson,read --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.Gson,read --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.Gson,write --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,write --> doubleValue,java.lang.Number,);
Call(METHOD,com.google.gson.Gson,write --> checkValidFloatingPoint,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,write --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,read$2 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.Gson,read$2 --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.Gson,read$2 --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.Gson,write$2 --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,write$2 --> floatValue,java.lang.Number,);
Call(METHOD,com.google.gson.Gson,write$2 --> checkValidFloatingPoint,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,write$2 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,checkValidFloatingPoint --> isNaN,null,);
Call(METHOD,com.google.gson.Gson,checkValidFloatingPoint --> isInfinite,null,);
Call(METHOD,com.google.gson.Gson,read$3 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.Gson,read$3 --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.Gson,read$3 --> nextLong,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.Gson,write$3 --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,write$3 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,write$3 --> toString,java.lang.Number,);
Call(METHOD,com.google.gson.Gson,write$4 --> write,null,);
Call(METHOD,com.google.gson.Gson,write$4 --> get,java.util.concurrent.atomic.AtomicLong,);
Call(METHOD,com.google.gson.Gson,read$4 --> read,null,);
Call(METHOD,com.google.gson.Gson,read$4 --> longValue,java.lang.Number,);
Call(METHOD,com.google.gson.Gson,read$4 --> nullSafe,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.Gson,write$5 --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,write$5 --> length,java.util.concurrent.atomic.AtomicLongArray,);
Call(METHOD,com.google.gson.Gson,write$5 --> write,null,);
Call(METHOD,com.google.gson.Gson,write$5 --> get,java.util.concurrent.atomic.AtomicLongArray,);
Call(METHOD,com.google.gson.Gson,write$5 --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,read$5 --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.Gson,read$5 --> hasNext,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.Gson,read$5 --> read,null,);
Call(METHOD,com.google.gson.Gson,read$5 --> longValue,null,);
Call(METHOD,com.google.gson.Gson,read$5 --> add,java.util.List,);
Call(METHOD,com.google.gson.Gson,read$5 --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.Gson,read$5 --> size,java.util.List,);
Call(METHOD,com.google.gson.Gson,read$5 --> set,java.util.concurrent.atomic.AtomicLongArray,);
Call(METHOD,com.google.gson.Gson,read$5 --> get,java.util.List,);
Call(METHOD,com.google.gson.Gson,read$5 --> nullSafe,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.Gson,getAdapter --> get,java.util.Map,);
Call(METHOD,com.google.gson.Gson,getAdapter --> get,java.lang.ThreadLocal,);
Call(METHOD,com.google.gson.Gson,getAdapter --> set,java.lang.ThreadLocal,);
Call(METHOD,com.google.gson.Gson,getAdapter --> get,java.util.Map,);
Call(METHOD,com.google.gson.Gson,getAdapter --> put,java.util.Map,);
Call(METHOD,com.google.gson.Gson,getAdapter --> create,null,);
Call(METHOD,com.google.gson.Gson,getAdapter --> setDelegate,com.google.gson.FutureTypeAdapter,);
Call(METHOD,com.google.gson.Gson,getAdapter --> put,java.util.Map,);
Call(METHOD,com.google.gson.Gson,getAdapter --> remove,java.util.Map,);
Call(METHOD,com.google.gson.Gson,getAdapter --> remove,java.lang.ThreadLocal,);
Call(METHOD,com.google.gson.Gson,getDelegateAdapter --> contains,java.util.List,);
Call(METHOD,com.google.gson.Gson,getDelegateAdapter --> create,null,);
Call(ATTRIBUTE,com.google.gson.Gson,getDelegateAdapter --> jsonAdapterFactory,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory,READ);
Call(METHOD,com.google.gson.Gson,getAdapter$2 --> getAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,getAdapter$2 --> get,null,);
Call(METHOD,com.google.gson.Gson,toJsonTree --> toJsonTree,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,toJsonTree --> getClass,java.lang.Object,);
Call(METHOD,com.google.gson.Gson,toJsonTree$2 --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,toJsonTree$2 --> get,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.Gson,toJson --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,toJson --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,toJson --> getClass,java.lang.Object,);
Call(METHOD,com.google.gson.Gson,toJson$2 --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,toJson$2 --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.Gson,toJson$3 --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,toJson$3 --> getClass,java.lang.Object,);
Call(METHOD,com.google.gson.Gson,toJson$3 --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,toJson$4 --> newJsonWriter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,toJson$4 --> writerForAppendable,null,);
Call(METHOD,com.google.gson.Gson,toJson$4 --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,toJson$5 --> getAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,toJson$5 --> get,null,);
Call(METHOD,com.google.gson.Gson,toJson$5 --> isLenient,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,toJson$5 --> setLenient,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,toJson$5 --> isHtmlSafe,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,toJson$5 --> setHtmlSafe,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,toJson$5 --> getSerializeNulls,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,toJson$5 --> setSerializeNulls,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,toJson$5 --> write,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.Gson,toJson$5 --> getMessage,null,);
Call(METHOD,com.google.gson.Gson,toJson$5 --> initCause,java.lang.AssertionError,);
Call(METHOD,com.google.gson.Gson,toJson$5 --> setLenient,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,toJson$5 --> setHtmlSafe,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,toJson$5 --> setSerializeNulls,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,toJson$6 --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,toJson$6 --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.Gson,toJson$7 --> newJsonWriter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,toJson$7 --> writerForAppendable,null,);
Call(METHOD,com.google.gson.Gson,toJson$7 --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,newJsonWriter --> write,java.io.Writer,);
Call(METHOD,com.google.gson.Gson,newJsonWriter --> setIndent,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,newJsonWriter --> setSerializeNulls,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,newJsonReader --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.Gson,toJson$8 --> isLenient,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,toJson$8 --> setLenient,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,toJson$8 --> isHtmlSafe,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,toJson$8 --> setHtmlSafe,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,toJson$8 --> getSerializeNulls,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,toJson$8 --> setSerializeNulls,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,toJson$8 --> write,null,);
Call(METHOD,com.google.gson.Gson,toJson$8 --> getMessage,null,);
Call(METHOD,com.google.gson.Gson,toJson$8 --> initCause,java.lang.AssertionError,);
Call(METHOD,com.google.gson.Gson,toJson$8 --> setLenient,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,toJson$8 --> setHtmlSafe,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,toJson$8 --> setSerializeNulls,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.Gson,fromJson --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,fromJson --> wrap,null,);
Call(METHOD,com.google.gson.Gson,fromJson --> cast,null,);
Call(METHOD,com.google.gson.Gson,fromJson$2 --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,fromJson$3 --> newJsonReader,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,fromJson$3 --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,fromJson$3 --> assertFullConsumption,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,fromJson$3 --> wrap,null,);
Call(METHOD,com.google.gson.Gson,fromJson$3 --> cast,null,);
Call(METHOD,com.google.gson.Gson,fromJson$4 --> newJsonReader,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,fromJson$4 --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,fromJson$4 --> assertFullConsumption,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,assertFullConsumption --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.Gson,fromJson$5 --> isLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.Gson,fromJson$5 --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.Gson,fromJson$5 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.Gson,fromJson$5 --> get,null,);
Call(METHOD,com.google.gson.Gson,fromJson$5 --> getAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,fromJson$5 --> read,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.Gson,fromJson$5 --> getMessage,null,);
Call(METHOD,com.google.gson.Gson,fromJson$5 --> initCause,java.lang.AssertionError,);
Call(METHOD,com.google.gson.Gson,fromJson$5 --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.Gson,fromJson$6 --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.Gson,fromJson$6 --> wrap,null,);
Call(METHOD,com.google.gson.Gson,fromJson$6 --> cast,null,);
Call(METHOD,com.google.gson.Gson,fromJson$7 --> fromJson,com.google.gson.Gson,);
EndClass 43
StartClass 44
Class(com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory,N,N,Public);
Attribute(constructorConstructor,com.google.gson.internal.ConstructorConstructor,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(create,com.google.gson.TypeAdapter,Public,N,N);
Method(getTypeAdapter,com.google.gson.TypeAdapter,Public,N,N);
Parameter(<init>,com.google.gson.internal.ConstructorConstructor,);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
Parameter(getTypeAdapter,com.google.gson.internal.ConstructorConstructor,);
Parameter(getTypeAdapter,com.google.gson.Gson,);
Parameter(getTypeAdapter,com.google.gson.reflect.TypeToken,);
Parameter(getTypeAdapter,com.google.gson.annotations.JsonAdapter,);
Realization(com.google.gson.TypeAdapterFactory);
Composition(com.google.gson.internal.ConstructorConstructor);
Call(ATTRIBUTE,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory,<init> --> constructorConstructor,com.google.gson.internal.ConstructorConstructor,READ);
Call(METHOD,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory,create --> getRawType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory,create --> getAnnotation,java.lang.Class,);
Call(METHOD,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory,create --> getTypeAdapter,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory,);
Call(METHOD,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory,getTypeAdapter --> get,com.google.gson.internal.ConstructorConstructor,);
Call(METHOD,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory,getTypeAdapter --> get,null,);
Call(METHOD,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory,getTypeAdapter --> value,com.google.gson.annotations.JsonAdapter,);
Call(METHOD,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory,getTypeAdapter --> construct,com.google.gson.internal.ConstructorConstructor,);
Call(METHOD,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory,getTypeAdapter --> create,com.google.gson.TypeAdapterFactory,);
Call(METHOD,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory,getTypeAdapter --> getClass,java.lang.Object,);
Call(METHOD,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory,getTypeAdapter --> getName,java.lang.Object,);
Call(METHOD,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory,getTypeAdapter --> toString,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory,getTypeAdapter --> nullSafe,com.google.gson.annotations.JsonAdapter,);
Call(METHOD,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory,getTypeAdapter --> nullSafe,com.google.gson.TypeAdapter,);
EndClass 44
StartClass 45
Class(com.google.gson.TypeAdapterFactory,Y,Y,Public);
Method(create,com.google.gson.TypeAdapter,Public,N,Y);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
EndClass 45
StartClass 46
Class(com.google.gson.FieldNamingStrategy,Y,Y,Public);
Method(translateName,java.lang.String,Public,N,Y);
Parameter(translateName,java.lang.reflect.Field,);
EndClass 46
StartClass 47
Class(com.google.gson.LongSerializationPolicy,N,N,Public);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(serialize$2,com.google.gson.JsonElement,Public,N,N);
Method(serialize$3,com.google.gson.JsonElement,Public,N,Y);
Method(<init>,void,Public,N,N);
Parameter(serialize,java.lang.Long,);
Parameter(serialize$2,java.lang.Long,);
Parameter(serialize$3,java.lang.Long,);
Call(METHOD,com.google.gson.LongSerializationPolicy,serialize$2 --> valueOf,null,);
EndClass 47
StartClass 48
Class(com.google.gson.TypeAdapter,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.GsonTest.TestTypeAdapter);
EndClass 48
StartClass 49
Class(com.google.gson.GsonTest.TestTypeAdapter,N,N,Private);
Method(write,void,Public,N,N);
Method(read,java.lang.Object,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,java.lang.Object,);
Parameter(read,com.google.gson.stream.JsonReader,);
SuperClass(com.google.gson.TypeAdapter);
Generalization(com.google.gson.TypeAdapter);
EndClass 49
StartClass 50
Class(java.lang.Cloneable,Y,Y,Public);
EndClass 50
StartClass 51
Class(com.google.gson.FieldNamingPolicy,N,N,Public);
Method(translateName,java.lang.String,Public,N,N);
Method(translateName$2,java.lang.String,Public,N,N);
Method(translateName$3,java.lang.String,Public,N,N);
Method(translateName$4,java.lang.String,Public,N,N);
Method(translateName$5,java.lang.String,Public,N,N);
Method(translateName$6,java.lang.String,Public,N,N);
Method(separateCamelCase,java.lang.String,Public,Y,N);
Method(upperCaseFirstLetter,java.lang.String,Public,Y,N);
Method(modifyString,java.lang.String,Private,Y,N);
Method(<init>,void,Public,N,N);
Parameter(translateName,java.lang.reflect.Field,);
Parameter(translateName$2,java.lang.reflect.Field,);
Parameter(translateName$3,java.lang.reflect.Field,);
Parameter(translateName$4,java.lang.reflect.Field,);
Parameter(translateName$5,java.lang.reflect.Field,);
Parameter(translateName$6,java.lang.reflect.Field,);
Parameter(separateCamelCase,java.lang.String,);
Parameter(separateCamelCase,java.lang.String,);
Parameter(upperCaseFirstLetter,java.lang.String,);
Parameter(modifyString,com.google.gson.char,);
Parameter(modifyString,java.lang.String,);
Parameter(modifyString,int,);
Realization(com.google.gson.FieldNamingStrategy);
Call(METHOD,com.google.gson.FieldNamingPolicy,translateName --> getName,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.FieldNamingPolicy,translateName$2 --> upperCaseFirstLetter,com.google.gson.FieldNamingPolicy,);
Call(METHOD,com.google.gson.FieldNamingPolicy,translateName$2 --> getName,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.FieldNamingPolicy,translateName$3 --> upperCaseFirstLetter,com.google.gson.FieldNamingPolicy,);
Call(METHOD,com.google.gson.FieldNamingPolicy,translateName$3 --> separateCamelCase,com.google.gson.FieldNamingPolicy,);
Call(METHOD,com.google.gson.FieldNamingPolicy,translateName$3 --> getName,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.FieldNamingPolicy,translateName$4 --> separateCamelCase,com.google.gson.FieldNamingPolicy,);
Call(METHOD,com.google.gson.FieldNamingPolicy,translateName$4 --> getName,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.FieldNamingPolicy,translateName$4 --> toLowerCase,com.google.gson.FieldNamingPolicy,);
Call(METHOD,com.google.gson.FieldNamingPolicy,translateName$5 --> separateCamelCase,com.google.gson.FieldNamingPolicy,);
Call(METHOD,com.google.gson.FieldNamingPolicy,translateName$5 --> getName,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.FieldNamingPolicy,translateName$5 --> toLowerCase,com.google.gson.FieldNamingPolicy,);
Call(METHOD,com.google.gson.FieldNamingPolicy,translateName$6 --> separateCamelCase,com.google.gson.FieldNamingPolicy,);
Call(METHOD,com.google.gson.FieldNamingPolicy,translateName$6 --> getName,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.FieldNamingPolicy,translateName$6 --> toLowerCase,com.google.gson.FieldNamingPolicy,);
Call(METHOD,com.google.gson.FieldNamingPolicy,separateCamelCase --> length,java.lang.String,);
Call(METHOD,com.google.gson.FieldNamingPolicy,separateCamelCase --> charAt,java.lang.String,);
Call(METHOD,com.google.gson.FieldNamingPolicy,separateCamelCase --> isUpperCase,null,);
Call(METHOD,com.google.gson.FieldNamingPolicy,separateCamelCase --> length,com.google.gson.StringBuilder,);
Call(METHOD,com.google.gson.FieldNamingPolicy,separateCamelCase --> append,com.google.gson.StringBuilder,);
Call(METHOD,com.google.gson.FieldNamingPolicy,separateCamelCase --> append,com.google.gson.StringBuilder,);
Call(METHOD,com.google.gson.FieldNamingPolicy,separateCamelCase --> toString,com.google.gson.StringBuilder,);
Call(METHOD,com.google.gson.FieldNamingPolicy,upperCaseFirstLetter --> charAt,java.lang.String,);
Call(METHOD,com.google.gson.FieldNamingPolicy,upperCaseFirstLetter --> length,java.lang.String,);
Call(METHOD,com.google.gson.FieldNamingPolicy,upperCaseFirstLetter --> isLetter,null,);
Call(METHOD,com.google.gson.FieldNamingPolicy,upperCaseFirstLetter --> append,com.google.gson.StringBuilder,);
Call(METHOD,com.google.gson.FieldNamingPolicy,upperCaseFirstLetter --> charAt,java.lang.String,);
Call(METHOD,com.google.gson.FieldNamingPolicy,upperCaseFirstLetter --> isUpperCase,null,);
Call(METHOD,com.google.gson.FieldNamingPolicy,upperCaseFirstLetter --> modifyString,com.google.gson.FieldNamingPolicy,);
Call(METHOD,com.google.gson.FieldNamingPolicy,upperCaseFirstLetter --> toUpperCase,null,);
Call(METHOD,com.google.gson.FieldNamingPolicy,upperCaseFirstLetter --> append,com.google.gson.StringBuilder,);
Call(METHOD,com.google.gson.FieldNamingPolicy,upperCaseFirstLetter --> toString,com.google.gson.StringBuilder,);
Call(METHOD,com.google.gson.FieldNamingPolicy,modifyString --> length,java.lang.String,);
Call(METHOD,com.google.gson.FieldNamingPolicy,modifyString --> substring,java.lang.String,);
Call(METHOD,com.google.gson.FieldNamingPolicy,modifyString --> valueOf,null,);
EndClass 51
StartClass 52
Class(com.google.gson.graph.Company,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 52
StartClass 53
Class(com.google.gson.interceptors.InterceptorTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Public,N,N);
Method(testExceptionsPropagated,void,Public,N,N);
Method(testTopLevelClass,void,Public,N,N);
Method(testList,void,Public,N,N);
Method(testCollection,void,Public,N,N);
Method(testMapKeyAndValues,void,Public,N,N);
Method(testField,void,Public,N,N);
Method(testCustomTypeAdapter,void,Public,N,N);
Method(write,void,Public,N,N);
Method(read,com.google.gson.interceptors.User,Public,N,N);
Method(testDirectInvocationOfTypeAdapter,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.interceptors.User,);
Parameter(read,com.google.gson.stream.JsonReader,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,setUp --> setUp,null,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,setUp --> registerTypeAdapterFactory,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,setUp --> enableComplexMapKeySerialization,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,setUp --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testExceptionsPropagated --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testExceptionsPropagated --> fail,com.google.gson.interceptors.InterceptorTest,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testTopLevelClass --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testTopLevelClass --> assertEquals,com.google.gson.interceptors.InterceptorTest,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testList --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testList --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testList --> get,java.util.List,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testList --> assertEquals,com.google.gson.interceptors.InterceptorTest,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testCollection --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testCollection --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testCollection --> iterator,java.util.Collection,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testCollection --> next,java.util.Collection,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testCollection --> assertEquals,com.google.gson.interceptors.InterceptorTest,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testMapKeyAndValues --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testMapKeyAndValues --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testMapKeyAndValues --> fail,com.google.gson.interceptors.InterceptorTest,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testMapKeyAndValues --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testMapKeyAndValues --> entrySet,java.util.Map,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testMapKeyAndValues --> iterator,java.util.Map,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testMapKeyAndValues --> next,java.util.Map,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testMapKeyAndValues --> assertEquals,com.google.gson.interceptors.InterceptorTest,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testMapKeyAndValues --> getKey,java.util.Map.Entry,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testMapKeyAndValues --> assertEquals,com.google.gson.interceptors.InterceptorTest,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testMapKeyAndValues --> getValue,java.util.Map.Entry,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testField --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testField --> assertEquals,com.google.gson.interceptors.InterceptorTest,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testCustomTypeAdapter --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,read --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,read --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,read --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,read --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,read --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,read --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,read --> registerTypeAdapterFactory,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,read --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,read --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,read --> assertEquals,com.google.gson.interceptors.InterceptorTest,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testDirectInvocationOfTypeAdapter --> getAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testDirectInvocationOfTypeAdapter --> fromJson,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.interceptors.InterceptorTest,testDirectInvocationOfTypeAdapter --> assertEquals,com.google.gson.interceptors.InterceptorTest,);
EndClass 53
StartClass 54
Class(com.google.gson.interceptors.User,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 54
StartClass 55
Class(com.google.gson.typeadapters.PostConstructAdapterFactoryTest,N,N,Public);
Method(test,void,Public,N,N);
Method(testList,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactoryTest,test --> registerTypeAdapterFactory,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactoryTest,test --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactoryTest,test --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactoryTest,test --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactoryTest,test --> fail,com.google.gson.typeadapters.PostConstructAdapterFactoryTest,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactoryTest,test --> assertEquals,com.google.gson.typeadapters.PostConstructAdapterFactoryTest,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactoryTest,test --> getMessage,null,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactoryTest,testList --> asList,null,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactoryTest,testList --> registerTypeAdapterFactory,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactoryTest,testList --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactoryTest,testList --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactoryTest,testList --> assertEquals,com.google.gson.typeadapters.PostConstructAdapterFactoryTest,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactoryTest,testList --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactoryTest,testList --> assertEquals,com.google.gson.typeadapters.PostConstructAdapterFactoryTest,);
EndClass 55
StartClass 56
Class(com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,N,N,Public);
Method(testRuntimeTypeAdapter,void,Public,N,N);
Method(testRuntimeTypeIsBaseType,void,Public,N,N);
Method(testNullBaseType,void,Public,N,N);
Method(testNullTypeFieldName,void,Public,N,N);
Method(testNullSubtype,void,Public,N,N);
Method(testNullLabel,void,Public,N,N);
Method(testDuplicateSubtype,void,Public,N,N);
Method(testDuplicateLabel,void,Public,N,N);
Method(testDeserializeMissingTypeField,void,Public,N,N);
Method(testDeserializeMissingSubtype,void,Public,N,N);
Method(testSerializeMissingSubtype,void,Public,N,N);
Method(testSerializeCollidingTypeFieldName,void,Public,N,N);
Method(testSerializeWrappedNullValue,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testRuntimeTypeAdapter --> of,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testRuntimeTypeAdapter --> registerSubtype,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testRuntimeTypeAdapter --> registerTypeAdapterFactory,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testRuntimeTypeAdapter --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testRuntimeTypeAdapter --> assertEquals,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testRuntimeTypeAdapter --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testRuntimeTypeAdapter --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testRuntimeTypeAdapter --> assertEquals,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testRuntimeTypeAdapter --> assertTrue,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testRuntimeTypeIsBaseType --> of,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testRuntimeTypeIsBaseType --> registerSubtype,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testRuntimeTypeIsBaseType --> registerTypeAdapterFactory,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testRuntimeTypeIsBaseType --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testRuntimeTypeIsBaseType --> assertEquals,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testRuntimeTypeIsBaseType --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testRuntimeTypeIsBaseType --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testRuntimeTypeIsBaseType --> assertEquals,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testNullBaseType --> of,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testNullBaseType --> fail,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testNullTypeFieldName --> of,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testNullTypeFieldName --> fail,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testNullSubtype --> of,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testNullSubtype --> registerSubtype,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testNullSubtype --> fail,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testNullLabel --> of,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testNullLabel --> registerSubtype,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testNullLabel --> fail,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testDuplicateSubtype --> of,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testDuplicateSubtype --> registerSubtype,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testDuplicateSubtype --> registerSubtype,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testDuplicateSubtype --> fail,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testDuplicateLabel --> of,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testDuplicateLabel --> registerSubtype,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testDuplicateLabel --> registerSubtype,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testDuplicateLabel --> fail,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testDeserializeMissingTypeField --> of,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testDeserializeMissingTypeField --> registerSubtype,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testDeserializeMissingTypeField --> registerTypeAdapterFactory,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testDeserializeMissingTypeField --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testDeserializeMissingTypeField --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testDeserializeMissingTypeField --> fail,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testDeserializeMissingSubtype --> of,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testDeserializeMissingSubtype --> registerSubtype,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testDeserializeMissingSubtype --> registerTypeAdapterFactory,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testDeserializeMissingSubtype --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testDeserializeMissingSubtype --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testDeserializeMissingSubtype --> fail,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testSerializeMissingSubtype --> of,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testSerializeMissingSubtype --> registerSubtype,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testSerializeMissingSubtype --> registerTypeAdapterFactory,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testSerializeMissingSubtype --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testSerializeMissingSubtype --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testSerializeMissingSubtype --> fail,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testSerializeCollidingTypeFieldName --> of,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testSerializeCollidingTypeFieldName --> registerSubtype,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testSerializeCollidingTypeFieldName --> registerTypeAdapterFactory,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testSerializeCollidingTypeFieldName --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testSerializeCollidingTypeFieldName --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testSerializeCollidingTypeFieldName --> fail,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testSerializeWrappedNullValue --> of,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testSerializeWrappedNullValue --> registerSubtype,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testSerializeWrappedNullValue --> registerSubtype,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testSerializeWrappedNullValue --> registerTypeAdapterFactory,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testSerializeWrappedNullValue --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testSerializeWrappedNullValue --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testSerializeWrappedNullValue --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,testSerializeWrappedNullValue --> assertNull,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest,);
EndClass 56
StartClass 57
Class(com.google.gson.typeadapters.UtcDateTypeAdapterTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,Y,);
Method(testLocalTimeZone,void,Public,N,N);
Method(testDifferentTimeZones,void,Public,N,N);
Method(testUtcDatesOnJdkBefore1_7,void,Public,N,N);
Method(testUtcWithJdk7Default,void,Public,N,N);
Method(testNullDateSerialization,void,Public,N,N);
Method(testWellFormedParseException,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testLocalTimeZone --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testLocalTimeZone --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testLocalTimeZone --> assertEquals,com.google.gson.typeadapters.UtcDateTypeAdapterTest,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testLocalTimeZone --> getTime,java.util.Date,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testLocalTimeZone --> getTime,java.util.Date,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testDifferentTimeZones --> getAvailableIDs,null,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testDifferentTimeZones --> getInstance,null,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testDifferentTimeZones --> getTimeZone,null,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testDifferentTimeZones --> getTime,java.util.Calendar,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testDifferentTimeZones --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testDifferentTimeZones --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testDifferentTimeZones --> assertEquals,com.google.gson.typeadapters.UtcDateTypeAdapterTest,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testDifferentTimeZones --> getTime,java.util.Date,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testDifferentTimeZones --> getTime,java.util.Date,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testUtcDatesOnJdkBefore1_7 --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testUtcDatesOnJdkBefore1_7 --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testUtcDatesOnJdkBefore1_7 --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testUtcWithJdk7Default --> setTimeZone,java.text.SimpleDateFormat,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testUtcWithJdk7Default --> getTimeZone,null,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testUtcWithJdk7Default --> format,java.text.SimpleDateFormat,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testUtcWithJdk7Default --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testUtcWithJdk7Default --> assertEquals,com.google.gson.typeadapters.UtcDateTypeAdapterTest,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testUtcWithJdk7Default --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testUtcWithJdk7Default --> assertEquals,com.google.gson.typeadapters.UtcDateTypeAdapterTest,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testUtcWithJdk7Default --> getTime,java.util.Date,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testUtcWithJdk7Default --> getTime,java.util.Date,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testNullDateSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testNullDateSerialization --> assertEquals,com.google.gson.typeadapters.UtcDateTypeAdapterTest,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testWellFormedParseException --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testWellFormedParseException --> fail,com.google.gson.typeadapters.UtcDateTypeAdapterTest,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testWellFormedParseException --> assertEquals,com.google.gson.typeadapters.UtcDateTypeAdapterTest,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapterTest,testWellFormedParseException --> getMessage,null,);
EndClass 57
StartClass 58
Class(com.google.gson.CommentsTest,N,N,Public);
Method(testParseComments,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.CommentsTest,testParseComments --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.CommentsTest,testParseComments --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.CommentsTest,testParseComments --> assertEquals,com.google.gson.CommentsTest,);
Call(METHOD,com.google.gson.CommentsTest,testParseComments --> asList,null,);
EndClass 58
StartClass 59
Class(com.google.gson.DefaultDateTypeAdapterTest,N,N,Public);
Method(testFormattingInEnUs,void,Public,N,N);
Method(testFormattingInFr,void,Public,N,N);
Method(assertFormattingAlwaysEmitsUsLocale,void,Private,N,N);
Method(testParsingDatesFormattedWithSystemLocale,void,Public,N,N);
Method(testParsingDatesFormattedWithUsLocale,void,Public,N,N);
Method(testFormatUsesDefaultTimezone,void,Public,N,N);
Method(testDateDeserializationISO8601,void,Public,N,N);
Method(testDateSerialization,void,Public,N,N);
Method(testDatePattern,void,Public,N,N);
Method(testInvalidDatePattern,void,Public,N,N);
Method(testNullValue,void,Public,N,N);
Method(testUnexpectedToken,void,Public,N,N);
Method(assertFormatted,void,Private,N,N);
Method(assertParsed,void,Private,N,N);
Method(toLiteral,java.lang.String,Private,Y,N);
Method(<init>,void,Public,N,N);
Parameter(assertFormattingAlwaysEmitsUsLocale,java.util.Locale,);
Parameter(assertFormatted,java.lang.String,);
Parameter(assertFormatted,com.google.gson.DefaultDateTypeAdapter,);
Parameter(assertParsed,java.lang.String,);
Parameter(assertParsed,com.google.gson.DefaultDateTypeAdapter,);
Parameter(toLiteral,java.lang.String,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testFormattingInEnUs --> assertFormattingAlwaysEmitsUsLocale,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testFormattingInFr --> assertFormattingAlwaysEmitsUsLocale,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormattingAlwaysEmitsUsLocale --> getDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormattingAlwaysEmitsUsLocale --> setDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormattingAlwaysEmitsUsLocale --> getTimeZone,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormattingAlwaysEmitsUsLocale --> getDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormattingAlwaysEmitsUsLocale --> setDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormattingAlwaysEmitsUsLocale --> isJava9OrLater,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormattingAlwaysEmitsUsLocale --> isJava9OrLater,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormattingAlwaysEmitsUsLocale --> isJava9OrLater,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormattingAlwaysEmitsUsLocale --> assertFormatted,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormattingAlwaysEmitsUsLocale --> format,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormattingAlwaysEmitsUsLocale --> assertFormatted,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormattingAlwaysEmitsUsLocale --> assertFormatted,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormattingAlwaysEmitsUsLocale --> assertFormatted,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormattingAlwaysEmitsUsLocale --> assertFormatted,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormattingAlwaysEmitsUsLocale --> format,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormattingAlwaysEmitsUsLocale --> assertFormatted,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormattingAlwaysEmitsUsLocale --> format,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormattingAlwaysEmitsUsLocale --> assertFormatted,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormattingAlwaysEmitsUsLocale --> format,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormattingAlwaysEmitsUsLocale --> assertFormatted,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormattingAlwaysEmitsUsLocale --> format,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormattingAlwaysEmitsUsLocale --> setDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormattingAlwaysEmitsUsLocale --> setDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithSystemLocale --> getDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithSystemLocale --> setDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithSystemLocale --> getTimeZone,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithSystemLocale --> getDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithSystemLocale --> setDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithSystemLocale --> isJava9OrLater,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithSystemLocale --> assertParsed,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithSystemLocale --> format,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithSystemLocale --> assertParsed,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithSystemLocale --> assertParsed,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithSystemLocale --> assertParsed,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithSystemLocale --> assertParsed,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithSystemLocale --> assertParsed,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithSystemLocale --> format,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithSystemLocale --> assertParsed,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithSystemLocale --> format,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithSystemLocale --> assertParsed,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithSystemLocale --> isJava9OrLater,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithSystemLocale --> setDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithSystemLocale --> setDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithUsLocale --> getDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithUsLocale --> setDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithUsLocale --> getTimeZone,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithUsLocale --> getDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithUsLocale --> setDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithUsLocale --> assertParsed,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithUsLocale --> assertParsed,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithUsLocale --> assertParsed,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithUsLocale --> assertParsed,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithUsLocale --> assertParsed,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithUsLocale --> assertParsed,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithUsLocale --> assertParsed,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithUsLocale --> assertParsed,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithUsLocale --> setDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testParsingDatesFormattedWithUsLocale --> setDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testFormatUsesDefaultTimezone --> getDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testFormatUsesDefaultTimezone --> setDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testFormatUsesDefaultTimezone --> getTimeZone,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testFormatUsesDefaultTimezone --> getDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testFormatUsesDefaultTimezone --> setDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testFormatUsesDefaultTimezone --> isJava9OrLater,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testFormatUsesDefaultTimezone --> assertFormatted,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testFormatUsesDefaultTimezone --> format,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testFormatUsesDefaultTimezone --> assertParsed,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testFormatUsesDefaultTimezone --> setDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testFormatUsesDefaultTimezone --> setDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testDateDeserializationISO8601 --> assertParsed,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testDateDeserializationISO8601 --> assertParsed,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testDateDeserializationISO8601 --> assertParsed,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testDateDeserializationISO8601 --> assertParsed,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testDateDeserializationISO8601 --> assertParsed,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testDateSerialization --> getDateInstance,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testDateSerialization --> toJson,com.google.gson.DefaultDateTypeAdapter,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testDateSerialization --> assertEquals,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testDateSerialization --> toLiteral,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testDateSerialization --> format,java.text.DateFormat,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testDatePattern --> toJson,com.google.gson.DefaultDateTypeAdapter,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testDatePattern --> assertEquals,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testDatePattern --> toLiteral,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testDatePattern --> format,java.text.DateFormat,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testInvalidDatePattern --> fail,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testNullValue --> assertNull,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testNullValue --> fromJson,com.google.gson.DefaultDateTypeAdapter,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testNullValue --> assertEquals,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testNullValue --> toJson,com.google.gson.DefaultDateTypeAdapter,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testUnexpectedToken --> fromJson,com.google.gson.DefaultDateTypeAdapter,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,testUnexpectedToken --> fail,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormatted --> assertEquals,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormatted --> toLiteral,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertFormatted --> toJson,com.google.gson.DefaultDateTypeAdapter,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertParsed --> assertEquals,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertParsed --> fromJson,com.google.gson.DefaultDateTypeAdapter,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertParsed --> toLiteral,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertParsed --> assertEquals,com.google.gson.DefaultDateTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertParsed --> fromJson,com.google.gson.DefaultDateTypeAdapter,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapterTest,assertParsed --> toLiteral,com.google.gson.DefaultDateTypeAdapterTest,);
EndClass 59
StartClass 60
Class(com.google.gson.DefaultDateTypeAdapter,N,N,Public);
Attribute(SIMPLE_NAME,java.lang.String,Private,Y,Y,);
Attribute(dateType,java.lang.Class,Private,N,Y,);
Attribute(dateFormats,java.util.List,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(<init>$5,void,Public,N,N);
Method(verifyDateType,java.lang.Class,Private,Y,N);
Method(write,void,Public,N,N);
Method(read,java.util.Date,Public,N,N);
Method(deserializeToDate,java.util.Date,Private,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,java.lang.Class,);
Parameter(<init>$2,java.lang.Class,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$3,java.lang.Class,);
Parameter(<init>$3,int,);
Parameter(<init>$4,int,);
Parameter(<init>$4,int,);
Parameter(<init>$5,java.lang.Class,);
Parameter(<init>$5,int,);
Parameter(<init>$5,int,);
Parameter(verifyDateType,java.lang.Class,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,java.util.Date,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(deserializeToDate,java.lang.String,);
SuperClass(com.google.gson.TypeAdapter);
Generalization(com.google.gson.TypeAdapter);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init> --> verifyDateType,com.google.gson.DefaultDateTypeAdapter,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init> --> add,java.util.List,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init> --> getDateTimeInstance,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init> --> getDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init> --> equals,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init> --> add,java.util.List,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init> --> getDateTimeInstance,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init> --> isJava9OrLater,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init> --> add,java.util.List,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init> --> getUSDateTimeFormat,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$2 --> verifyDateType,com.google.gson.DefaultDateTypeAdapter,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$2 --> getDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$2 --> equals,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$2 --> add,java.util.List,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$3 --> verifyDateType,com.google.gson.DefaultDateTypeAdapter,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$3 --> add,java.util.List,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$3 --> getDateInstance,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$3 --> getDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$3 --> equals,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$3 --> add,java.util.List,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$3 --> getDateInstance,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$3 --> isJava9OrLater,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$3 --> add,java.util.List,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$3 --> getUSDateFormat,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$4 --> this,com.google.gson.DefaultDateTypeAdapter,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$5 --> verifyDateType,com.google.gson.DefaultDateTypeAdapter,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$5 --> add,java.util.List,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$5 --> getDateTimeInstance,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$5 --> getDefault,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$5 --> equals,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$5 --> add,java.util.List,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$5 --> getDateTimeInstance,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$5 --> isJava9OrLater,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$5 --> add,java.util.List,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,<init>$5 --> getUSDateTimeFormat,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,write --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,write --> get,java.util.List,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,write --> format,java.util.List,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,write --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,read --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,read --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,read --> deserializeToDate,com.google.gson.DefaultDateTypeAdapter,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,read --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,read --> getTime,java.util.Date,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,read --> getTime,java.util.Date,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,deserializeToDate --> parse,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,deserializeToDate --> parse,null,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,toString --> get,java.util.List,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,toString --> toPattern,java.text.SimpleDateFormat,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,toString --> getClass,java.text.DateFormat,);
Call(METHOD,com.google.gson.DefaultDateTypeAdapter,toString --> getSimpleName,java.text.DateFormat,);
EndClass 60
StartClass 61
Class(com.google.gson.TypeAdapter,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.DefaultDateTypeAdapter);
EndClass 61
StartClass 62
Class(com.google.gson.DefaultInetAddressTypeAdapterTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testInetAddressSerializationAndDeserialization,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.DefaultInetAddressTypeAdapterTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.DefaultInetAddressTypeAdapterTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.DefaultInetAddressTypeAdapterTest,testInetAddressSerializationAndDeserialization --> getByName,null,);
Call(METHOD,com.google.gson.DefaultInetAddressTypeAdapterTest,testInetAddressSerializationAndDeserialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.DefaultInetAddressTypeAdapterTest,testInetAddressSerializationAndDeserialization --> assertEquals,com.google.gson.DefaultInetAddressTypeAdapterTest,);
Call(METHOD,com.google.gson.DefaultInetAddressTypeAdapterTest,testInetAddressSerializationAndDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.DefaultInetAddressTypeAdapterTest,testInetAddressSerializationAndDeserialization --> assertEquals,com.google.gson.DefaultInetAddressTypeAdapterTest,);
EndClass 62
StartClass 63
Class(com.google.gson.DefaultMapJsonSerializerTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(testEmptyMapNoTypeSerialization,void,Public,N,N);
Method(testEmptyMapSerialization,void,Public,N,N);
Method(testNonEmptyMapSerialization,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.DefaultMapJsonSerializerTest,testEmptyMapNoTypeSerialization --> toJsonTree,com.google.gson.Gson,);
Call(METHOD,com.google.gson.DefaultMapJsonSerializerTest,testEmptyMapNoTypeSerialization --> getClass,java.util.Map,);
Call(METHOD,com.google.gson.DefaultMapJsonSerializerTest,testEmptyMapNoTypeSerialization --> assertTrue,com.google.gson.DefaultMapJsonSerializerTest,);
Call(METHOD,com.google.gson.DefaultMapJsonSerializerTest,testEmptyMapNoTypeSerialization --> assertTrue,com.google.gson.DefaultMapJsonSerializerTest,);
Call(METHOD,com.google.gson.DefaultMapJsonSerializerTest,testEmptyMapNoTypeSerialization --> entrySet,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.DefaultMapJsonSerializerTest,testEmptyMapNoTypeSerialization --> isEmpty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.DefaultMapJsonSerializerTest,testEmptyMapSerialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.DefaultMapJsonSerializerTest,testEmptyMapSerialization --> toJsonTree,com.google.gson.Gson,);
Call(METHOD,com.google.gson.DefaultMapJsonSerializerTest,testEmptyMapSerialization --> assertTrue,com.google.gson.DefaultMapJsonSerializerTest,);
Call(METHOD,com.google.gson.DefaultMapJsonSerializerTest,testEmptyMapSerialization --> assertTrue,com.google.gson.DefaultMapJsonSerializerTest,);
Call(METHOD,com.google.gson.DefaultMapJsonSerializerTest,testEmptyMapSerialization --> entrySet,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.DefaultMapJsonSerializerTest,testEmptyMapSerialization --> isEmpty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.DefaultMapJsonSerializerTest,testNonEmptyMapSerialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.DefaultMapJsonSerializerTest,testNonEmptyMapSerialization --> put,java.util.Map,);
Call(METHOD,com.google.gson.DefaultMapJsonSerializerTest,testNonEmptyMapSerialization --> toJsonTree,com.google.gson.Gson,);
Call(METHOD,com.google.gson.DefaultMapJsonSerializerTest,testNonEmptyMapSerialization --> assertTrue,com.google.gson.DefaultMapJsonSerializerTest,);
Call(METHOD,com.google.gson.DefaultMapJsonSerializerTest,testNonEmptyMapSerialization --> isJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.DefaultMapJsonSerializerTest,testNonEmptyMapSerialization --> getAsJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.DefaultMapJsonSerializerTest,testNonEmptyMapSerialization --> assertTrue,com.google.gson.DefaultMapJsonSerializerTest,);
Call(METHOD,com.google.gson.DefaultMapJsonSerializerTest,testNonEmptyMapSerialization --> has,com.google.gson.JsonObject,);
EndClass 63
StartClass 64
Class(com.google.gson.ExposeAnnotationExclusionStrategyTest,N,N,Public);
Attribute(excluder,com.google.gson.internal.Excluder,Private,N,N,);
Method(testNeverSkipClasses,void,Public,N,N);
Method(testSkipNonAnnotatedFields,void,Public,N,N);
Method(testSkipExplicitlySkippedFields,void,Public,N,N);
Method(testNeverSkipExposedAnnotatedFields,void,Public,N,N);
Method(testNeverSkipExplicitlyExposedAnnotatedFields,void,Public,N,N);
Method(testDifferentSerializeAndDeserializeField,void,Public,N,N);
Method(createFieldAttributes,java.lang.reflect.Field,Private,Y,N);
Method(<init>,void,Public,N,N);
Parameter(createFieldAttributes,java.lang.String,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.internal.Excluder);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testNeverSkipClasses --> assertFalse,com.google.gson.ExposeAnnotationExclusionStrategyTest,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testNeverSkipClasses --> excludeClass,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testNeverSkipClasses --> assertFalse,com.google.gson.ExposeAnnotationExclusionStrategyTest,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testNeverSkipClasses --> excludeClass,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testSkipNonAnnotatedFields --> createFieldAttributes,com.google.gson.ExposeAnnotationExclusionStrategyTest,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testSkipNonAnnotatedFields --> assertTrue,com.google.gson.ExposeAnnotationExclusionStrategyTest,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testSkipNonAnnotatedFields --> excludeField,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testSkipNonAnnotatedFields --> assertTrue,com.google.gson.ExposeAnnotationExclusionStrategyTest,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testSkipNonAnnotatedFields --> excludeField,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testSkipExplicitlySkippedFields --> createFieldAttributes,com.google.gson.ExposeAnnotationExclusionStrategyTest,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testSkipExplicitlySkippedFields --> assertTrue,com.google.gson.ExposeAnnotationExclusionStrategyTest,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testSkipExplicitlySkippedFields --> excludeField,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testSkipExplicitlySkippedFields --> assertTrue,com.google.gson.ExposeAnnotationExclusionStrategyTest,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testSkipExplicitlySkippedFields --> excludeField,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testNeverSkipExposedAnnotatedFields --> createFieldAttributes,com.google.gson.ExposeAnnotationExclusionStrategyTest,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testNeverSkipExposedAnnotatedFields --> assertFalse,com.google.gson.ExposeAnnotationExclusionStrategyTest,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testNeverSkipExposedAnnotatedFields --> excludeField,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testNeverSkipExposedAnnotatedFields --> assertFalse,com.google.gson.ExposeAnnotationExclusionStrategyTest,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testNeverSkipExposedAnnotatedFields --> excludeField,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testNeverSkipExplicitlyExposedAnnotatedFields --> createFieldAttributes,com.google.gson.ExposeAnnotationExclusionStrategyTest,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testNeverSkipExplicitlyExposedAnnotatedFields --> assertFalse,com.google.gson.ExposeAnnotationExclusionStrategyTest,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testNeverSkipExplicitlyExposedAnnotatedFields --> excludeField,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testNeverSkipExplicitlyExposedAnnotatedFields --> assertFalse,com.google.gson.ExposeAnnotationExclusionStrategyTest,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testNeverSkipExplicitlyExposedAnnotatedFields --> excludeField,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testDifferentSerializeAndDeserializeField --> createFieldAttributes,com.google.gson.ExposeAnnotationExclusionStrategyTest,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testDifferentSerializeAndDeserializeField --> assertFalse,com.google.gson.ExposeAnnotationExclusionStrategyTest,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testDifferentSerializeAndDeserializeField --> excludeField,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testDifferentSerializeAndDeserializeField --> assertTrue,com.google.gson.ExposeAnnotationExclusionStrategyTest,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,testDifferentSerializeAndDeserializeField --> excludeField,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.ExposeAnnotationExclusionStrategyTest,createFieldAttributes --> getField,null,);
EndClass 64
StartClass 65
Class(com.google.gson.FieldAttributesTest,N,N,Public);
Attribute(fieldAttributes,com.google.gson.FieldAttributes,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testNullField,void,Public,N,N);
Method(testDeclaringClass,void,Public,N,N);
Method(testModifiers,void,Public,N,N);
Method(testIsSynthetic,void,Public,N,N);
Method(testName,void,Public,N,N);
Method(testDeclaredTypeAndClass,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.FieldAttributes);
Call(METHOD,com.google.gson.FieldAttributesTest,setUp --> setUp,null,);
Call(METHOD,com.google.gson.FieldAttributesTest,setUp --> getField,null,);
Call(ATTRIBUTE,com.google.gson.FieldAttributesTest,setUp --> fieldAttributes,com.google.gson.FieldAttributes,WRITE);
Call(METHOD,com.google.gson.FieldAttributesTest,testNullField --> fail,com.google.gson.FieldAttributesTest,);
Call(METHOD,com.google.gson.FieldAttributesTest,testDeclaringClass --> assertEquals,com.google.gson.FieldAttributesTest,);
Call(METHOD,com.google.gson.FieldAttributesTest,testDeclaringClass --> getDeclaringClass,com.google.gson.FieldAttributes,);
Call(METHOD,com.google.gson.FieldAttributesTest,testModifiers --> assertFalse,com.google.gson.FieldAttributesTest,);
Call(METHOD,com.google.gson.FieldAttributesTest,testModifiers --> hasModifier,com.google.gson.FieldAttributes,);
Call(METHOD,com.google.gson.FieldAttributesTest,testModifiers --> assertFalse,com.google.gson.FieldAttributesTest,);
Call(METHOD,com.google.gson.FieldAttributesTest,testModifiers --> hasModifier,com.google.gson.FieldAttributes,);
Call(METHOD,com.google.gson.FieldAttributesTest,testModifiers --> assertFalse,com.google.gson.FieldAttributesTest,);
Call(METHOD,com.google.gson.FieldAttributesTest,testModifiers --> hasModifier,com.google.gson.FieldAttributes,);
Call(METHOD,com.google.gson.FieldAttributesTest,testModifiers --> assertFalse,com.google.gson.FieldAttributesTest,);
Call(METHOD,com.google.gson.FieldAttributesTest,testModifiers --> hasModifier,com.google.gson.FieldAttributes,);
Call(METHOD,com.google.gson.FieldAttributesTest,testModifiers --> assertFalse,com.google.gson.FieldAttributesTest,);
Call(METHOD,com.google.gson.FieldAttributesTest,testModifiers --> hasModifier,com.google.gson.FieldAttributes,);
Call(METHOD,com.google.gson.FieldAttributesTest,testModifiers --> assertTrue,com.google.gson.FieldAttributesTest,);
Call(METHOD,com.google.gson.FieldAttributesTest,testModifiers --> hasModifier,com.google.gson.FieldAttributes,);
Call(METHOD,com.google.gson.FieldAttributesTest,testModifiers --> assertTrue,com.google.gson.FieldAttributesTest,);
Call(METHOD,com.google.gson.FieldAttributesTest,testModifiers --> hasModifier,com.google.gson.FieldAttributes,);
Call(METHOD,com.google.gson.FieldAttributesTest,testIsSynthetic --> assertFalse,com.google.gson.FieldAttributesTest,);
Call(METHOD,com.google.gson.FieldAttributesTest,testIsSynthetic --> isSynthetic,com.google.gson.FieldAttributes,);
Call(METHOD,com.google.gson.FieldAttributesTest,testName --> assertEquals,com.google.gson.FieldAttributesTest,);
Call(METHOD,com.google.gson.FieldAttributesTest,testName --> getName,com.google.gson.FieldAttributes,);
Call(METHOD,com.google.gson.FieldAttributesTest,testDeclaredTypeAndClass --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.FieldAttributesTest,testDeclaredTypeAndClass --> assertEquals,com.google.gson.FieldAttributesTest,);
Call(METHOD,com.google.gson.FieldAttributesTest,testDeclaredTypeAndClass --> getDeclaredType,com.google.gson.FieldAttributes,);
Call(METHOD,com.google.gson.FieldAttributesTest,testDeclaredTypeAndClass --> assertEquals,com.google.gson.FieldAttributesTest,);
Call(METHOD,com.google.gson.FieldAttributesTest,testDeclaredTypeAndClass --> getDeclaredClass,com.google.gson.FieldAttributes,);
EndClass 65
StartClass 66
Class(com.google.gson.functional.ArrayTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testTopLevelArrayOfIntsSerialization,void,Public,N,N);
Method(testTopLevelArrayOfIntsDeserialization,void,Public,N,N);
Method(testInvalidArrayDeserialization,void,Public,N,N);
Method(testEmptyArraySerialization,void,Public,N,N);
Method(testEmptyArrayDeserialization,void,Public,N,N);
Method(testNullsInArraySerialization,void,Public,N,N);
Method(testNullsInArrayDeserialization,void,Public,N,N);
Method(testSingleNullInArraySerialization,void,Public,N,N);
Method(testSingleNullInArrayDeserialization,void,Public,N,N);
Method(testNullsInArrayWithSerializeNullPropertySetSerialization,void,Public,N,N);
Method(testArrayOfStringsSerialization,void,Public,N,N);
Method(testArrayOfStringsDeserialization,void,Public,N,N);
Method(testSingleStringArraySerialization,void,Public,N,N);
Method(testSingleStringArrayDeserialization,void,Public,N,N);
Method(testArrayOfCollectionSerialization,void,Public,N,N);
Method(testArrayOfCollectionDeserialization,void,Public,N,N);
Method(testArrayOfPrimitivesAsObjectsSerialization,void,Public,N,N);
Method(testArrayOfPrimitivesAsObjectsDeserialization,void,Public,N,N);
Method(testObjectArrayWithNonPrimitivesSerialization,void,Public,N,N);
Method(testArrayOfNullSerialization,void,Public,N,N);
Method(testArrayOfNullDeserialization,void,Public,N,N);
Method(testMultidimenstionalArraysSerialization,void,Public,N,N);
Method(testMultiDimenstionalObjectArraysSerialization,void,Public,N,N);
Method(testMixingTypesInObjectArraySerialization,void,Public,N,N);
Method(testMultidimenstionalArraysDeserialization,void,Public,N,N);
Method(testArrayElementsAreArrays,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.ArrayTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.ArrayTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.ArrayTest,testTopLevelArrayOfIntsSerialization --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testTopLevelArrayOfIntsSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testTopLevelArrayOfIntsDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testTopLevelArrayOfIntsDeserialization --> assertEquals,null,);
Call(METHOD,com.google.gson.functional.ArrayTest,testInvalidArrayDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testInvalidArrayDeserialization --> fail,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testEmptyArraySerialization --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testEmptyArraySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testEmptyArrayDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testEmptyArrayDeserialization --> assertTrue,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testEmptyArrayDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testEmptyArrayDeserialization --> assertTrue,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testEmptyArrayDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testEmptyArrayDeserialization --> assertTrue,com.google.gson.functional.ArrayTest,);
Call(ATTRIBUTE,com.google.gson.functional.ArrayTest,testEmptyArrayDeserialization --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.ArrayTest,testNullsInArraySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testNullsInArraySerialization --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testNullsInArrayDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testNullsInArrayDeserialization --> getClass,java.lang.String[],);
Call(METHOD,com.google.gson.functional.ArrayTest,testNullsInArrayDeserialization --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testSingleNullInArraySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testSingleNullInArraySerialization --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testSingleNullInArrayDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testSingleNullInArrayDeserialization --> assertNull,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testNullsInArrayWithSerializeNullPropertySetSerialization --> serializeNulls,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ArrayTest,testNullsInArrayWithSerializeNullPropertySetSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ArrayTest,testNullsInArrayWithSerializeNullPropertySetSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testNullsInArrayWithSerializeNullPropertySetSerialization --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(ATTRIBUTE,com.google.gson.functional.ArrayTest,testNullsInArrayWithSerializeNullPropertySetSerialization --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfStringsSerialization --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfStringsSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfStringsDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfStringsDeserialization --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfStringsDeserialization --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testSingleStringArraySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testSingleStringArraySerialization --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testSingleStringArrayDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testSingleStringArrayDeserialization --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testSingleStringArrayDeserialization --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfCollectionSerialization --> getType,com.google.gson.functional.TypeToken,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfCollectionSerialization --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfCollectionSerialization --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfCollectionSerialization --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfCollectionSerialization --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfCollectionSerialization --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfCollectionSerialization --> add,java.util.ArrayList,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfCollectionSerialization --> add,java.util.ArrayList,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfCollectionSerialization --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfCollectionSerialization --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfCollectionSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfCollectionSerialization --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfCollectionSerialization --> toString,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfCollectionDeserialization --> getType,com.google.gson.functional.TypeToken,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfCollectionDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfCollectionDeserialization --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfCollectionDeserialization --> assertEquals,null,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfCollectionDeserialization --> toArray,com.google.gson.functional.Collection,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfCollectionDeserialization --> assertEquals,null,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfCollectionDeserialization --> toArray,com.google.gson.functional.Collection,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfPrimitivesAsObjectsSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfPrimitivesAsObjectsSerialization --> assertTrue,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfPrimitivesAsObjectsSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfPrimitivesAsObjectsSerialization --> assertTrue,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfPrimitivesAsObjectsSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfPrimitivesAsObjectsSerialization --> assertTrue,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfPrimitivesAsObjectsSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfPrimitivesAsObjectsDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfPrimitivesAsObjectsDeserialization --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfPrimitivesAsObjectsDeserialization --> intValue,java.lang.Number,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfPrimitivesAsObjectsDeserialization --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfPrimitivesAsObjectsDeserialization --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfPrimitivesAsObjectsDeserialization --> doubleValue,java.lang.Number,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfPrimitivesAsObjectsDeserialization --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfPrimitivesAsObjectsDeserialization --> toString,java.lang.Object[],);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfPrimitivesAsObjectsDeserialization --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfPrimitivesAsObjectsDeserialization --> shortValue,java.lang.Number,);
Call(METHOD,com.google.gson.functional.ArrayTest,testObjectArrayWithNonPrimitivesSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testObjectArrayWithNonPrimitivesSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testObjectArrayWithNonPrimitivesSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testObjectArrayWithNonPrimitivesSerialization --> assertTrue,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testObjectArrayWithNonPrimitivesSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ArrayTest,testObjectArrayWithNonPrimitivesSerialization --> assertTrue,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testObjectArrayWithNonPrimitivesSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfNullSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfNullSerialization --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfNullDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayOfNullDeserialization --> assertNull,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testMultidimenstionalArraysSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testMultidimenstionalArraysSerialization --> assertTrue,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testMultidimenstionalArraysSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ArrayTest,testMultidimenstionalArraysSerialization --> assertTrue,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testMultidimenstionalArraysSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ArrayTest,testMultiDimenstionalObjectArraysSerialization --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testMultiDimenstionalObjectArraysSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testMixingTypesInObjectArraySerialization --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testMixingTypesInObjectArraySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testMultidimenstionalArraysDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ArrayTest,testMultidimenstionalArraysDeserialization --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testMultidimenstionalArraysDeserialization --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayElementsAreArrays --> assertEquals,com.google.gson.functional.ArrayTest,);
Call(METHOD,com.google.gson.functional.ArrayTest,testArrayElementsAreArrays --> toJson,com.google.gson.Gson,);
EndClass 66
StartClass 67
Class(com.google.gson.functional.CircularReferenceTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testCircularSerialization,void,Public,N,N);
Method(testSelfReferenceIgnoredInSerialization,void,Public,N,N);
Method(testSelfReferenceArrayFieldSerialization,void,Public,N,N);
Method(testSelfReferenceCustomHandlerSerialization,void,Public,N,N);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(testDirectedAcyclicGraphSerialization,void,Public,N,N);
Method(testDirectedAcyclicGraphDeserialization,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(serialize,com.google.gson.functional.ClassWithSelfReference,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.CircularReferenceTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,testCircularSerialization --> add,com.google.gson.functional.ContainsReferenceToSelfType,);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,testCircularSerialization --> add,com.google.gson.functional.ContainsReferenceToSelfType,);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,testCircularSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,testCircularSerialization --> fail,com.google.gson.functional.CircularReferenceTest,);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,testSelfReferenceIgnoredInSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,testSelfReferenceIgnoredInSerialization --> assertFalse,com.google.gson.functional.CircularReferenceTest,);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,testSelfReferenceIgnoredInSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,testSelfReferenceArrayFieldSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,testSelfReferenceArrayFieldSerialization --> fail,com.google.gson.functional.CircularReferenceTest,);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,testSelfReferenceCustomHandlerSerialization --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,serialize --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,serialize --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,serialize --> serialize,com.google.gson.JsonSerializationContext,);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,serialize --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,serialize --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,serialize --> fail,com.google.gson.functional.CircularReferenceTest,);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,testDirectedAcyclicGraphSerialization --> add,com.google.gson.functional.ContainsReferenceToSelfType,);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,testDirectedAcyclicGraphSerialization --> add,com.google.gson.functional.ContainsReferenceToSelfType,);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,testDirectedAcyclicGraphSerialization --> add,com.google.gson.functional.ContainsReferenceToSelfType,);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,testDirectedAcyclicGraphSerialization --> assertNotNull,com.google.gson.functional.CircularReferenceTest,);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,testDirectedAcyclicGraphSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,testDirectedAcyclicGraphDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,testDirectedAcyclicGraphDeserialization --> assertNotNull,com.google.gson.functional.CircularReferenceTest,);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,testDirectedAcyclicGraphDeserialization --> assertEquals,com.google.gson.functional.CircularReferenceTest,);
Call(METHOD,com.google.gson.functional.CircularReferenceTest,testDirectedAcyclicGraphDeserialization --> size,com.google.gson.functional.ContainsReferenceToSelfType,);
EndClass 67
StartClass 68
Class(com.google.gson.functional.ClassWithSelfReference,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 68
StartClass 69
Class(com.google.gson.JsonSerializationContext,Y,Y,Public);
Method(serialize,com.google.gson.JsonElement,Public,N,Y);
Method(serialize$2,com.google.gson.JsonElement,Public,N,Y);
Parameter(serialize,java.lang.Object,);
Parameter(serialize$2,java.lang.Object,);
Parameter(serialize$2,java.lang.reflect.Type,);
EndClass 69
StartClass 70
Class(com.google.gson.functional.ContainsReferenceToSelfType,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 70
StartClass 71
Class(com.google.gson.functional.CollectionTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testTopLevelCollectionOfIntegersSerialization,void,Public,N,N);
Method(testTopLevelCollectionOfIntegersDeserialization,void,Public,N,N);
Method(testTopLevelListOfIntegerCollectionsDeserialization,void,Public,N,N);
Method(testLinkedListSerialization,void,Public,N,N);
Method(testLinkedListDeserialization,void,Public,N,N);
Method(testQueueSerialization,void,Public,N,N);
Method(testQueueDeserialization,void,Public,N,N);
Method(testPriorityQueue,void,Public,N,N);
Method(testVector,void,Public,N,N);
Method(testStack,void,Public,N,N);
Method(testNullsInListSerialization,void,Public,N,N);
Method(testNullsInListDeserialization,void,Public,N,N);
Method(testCollectionOfObjectSerialization,void,Public,N,N);
Method(testCollectionOfObjectWithNullSerialization,void,Public,N,N);
Method(testCollectionOfStringsSerialization,void,Public,N,N);
Method(testCollectionOfBagOfPrimitivesSerialization,void,Public,N,N);
Method(testCollectionOfStringsDeserialization,void,Public,N,N);
Method(testRawCollectionOfIntegersSerialization,void,Public,N,N);
Method(testRawCollectionSerialization,void,Public,N,N);
Method(testRawCollectionDeserializationNotAlllowed,void,Public,N,N);
Method(testRawCollectionOfBagOfPrimitivesNotAllowed,void,Public,N,N);
Method(testWildcardPrimitiveCollectionSerilaization,void,Public,N,N);
Method(testWildcardPrimitiveCollectionDeserilaization,void,Public,N,N);
Method(testWildcardCollectionField,void,Public,N,N);
Method(testFieldIsArrayList,void,Public,N,N);
Method(testUserCollectionTypeAdapter,void,Public,N,N);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(serialize,java.util.List,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.CollectionTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.CollectionTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.CollectionTest,testTopLevelCollectionOfIntegersSerialization --> asList,null,);
Call(METHOD,com.google.gson.functional.CollectionTest,testTopLevelCollectionOfIntegersSerialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.CollectionTest,testTopLevelCollectionOfIntegersSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testTopLevelCollectionOfIntegersSerialization --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testTopLevelCollectionOfIntegersDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.CollectionTest,testTopLevelCollectionOfIntegersDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testTopLevelCollectionOfIntegersDeserialization --> assertEquals,null,);
Call(METHOD,com.google.gson.functional.CollectionTest,testTopLevelCollectionOfIntegersDeserialization --> toIntArray,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testTopLevelListOfIntegerCollectionsDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.CollectionTest,testTopLevelListOfIntegerCollectionsDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testTopLevelListOfIntegerCollectionsDeserialization --> assertEquals,null,);
Call(METHOD,com.google.gson.functional.CollectionTest,testTopLevelListOfIntegerCollectionsDeserialization --> toIntArray,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testTopLevelListOfIntegerCollectionsDeserialization --> get,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,testLinkedListSerialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,testLinkedListSerialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,testLinkedListSerialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.CollectionTest,testLinkedListSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testLinkedListSerialization --> assertTrue,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testLinkedListSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.CollectionTest,testLinkedListSerialization --> assertTrue,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testLinkedListSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.CollectionTest,testLinkedListDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.CollectionTest,testLinkedListDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testLinkedListDeserialization --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testLinkedListDeserialization --> get,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,testLinkedListDeserialization --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testLinkedListDeserialization --> get,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,testQueueSerialization --> add,java.util.Queue,);
Call(METHOD,com.google.gson.functional.CollectionTest,testQueueSerialization --> add,java.util.Queue,);
Call(METHOD,com.google.gson.functional.CollectionTest,testQueueSerialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.CollectionTest,testQueueSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testQueueSerialization --> assertTrue,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testQueueSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.CollectionTest,testQueueSerialization --> assertTrue,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testQueueSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.CollectionTest,testQueueDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.CollectionTest,testQueueDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testQueueDeserialization --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testQueueDeserialization --> element,java.util.Queue,);
Call(METHOD,com.google.gson.functional.CollectionTest,testQueueDeserialization --> remove,java.util.Queue,);
Call(METHOD,com.google.gson.functional.CollectionTest,testQueueDeserialization --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testQueueDeserialization --> element,java.util.Queue,);
Call(METHOD,com.google.gson.functional.CollectionTest,testPriorityQueue --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.CollectionTest,testPriorityQueue --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testPriorityQueue --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testPriorityQueue --> size,java.util.PriorityQueue,);
Call(METHOD,com.google.gson.functional.CollectionTest,testPriorityQueue --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testPriorityQueue --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testPriorityQueue --> remove,java.util.PriorityQueue,);
Call(METHOD,com.google.gson.functional.CollectionTest,testPriorityQueue --> intValue,java.util.PriorityQueue,);
Call(METHOD,com.google.gson.functional.CollectionTest,testPriorityQueue --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testPriorityQueue --> remove,java.util.PriorityQueue,);
Call(METHOD,com.google.gson.functional.CollectionTest,testPriorityQueue --> intValue,java.util.PriorityQueue,);
Call(METHOD,com.google.gson.functional.CollectionTest,testPriorityQueue --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testPriorityQueue --> remove,java.util.PriorityQueue,);
Call(METHOD,com.google.gson.functional.CollectionTest,testPriorityQueue --> intValue,java.util.PriorityQueue,);
Call(METHOD,com.google.gson.functional.CollectionTest,testPriorityQueue --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testVector --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.CollectionTest,testVector --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testVector --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testVector --> size,java.util.Vector,);
Call(METHOD,com.google.gson.functional.CollectionTest,testVector --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testVector --> get,java.util.Vector,);
Call(METHOD,com.google.gson.functional.CollectionTest,testVector --> intValue,java.util.Vector,);
Call(METHOD,com.google.gson.functional.CollectionTest,testVector --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testVector --> get,java.util.Vector,);
Call(METHOD,com.google.gson.functional.CollectionTest,testVector --> intValue,java.util.Vector,);
Call(METHOD,com.google.gson.functional.CollectionTest,testVector --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testVector --> get,java.util.Vector,);
Call(METHOD,com.google.gson.functional.CollectionTest,testVector --> intValue,java.util.Vector,);
Call(METHOD,com.google.gson.functional.CollectionTest,testVector --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testVector --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testStack --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.CollectionTest,testStack --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testStack --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testStack --> size,java.util.Stack,);
Call(METHOD,com.google.gson.functional.CollectionTest,testStack --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testStack --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testStack --> pop,java.util.Stack,);
Call(METHOD,com.google.gson.functional.CollectionTest,testStack --> intValue,java.util.Stack,);
Call(METHOD,com.google.gson.functional.CollectionTest,testStack --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testStack --> pop,java.util.Stack,);
Call(METHOD,com.google.gson.functional.CollectionTest,testStack --> intValue,java.util.Stack,);
Call(METHOD,com.google.gson.functional.CollectionTest,testStack --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testStack --> pop,java.util.Stack,);
Call(METHOD,com.google.gson.functional.CollectionTest,testStack --> intValue,java.util.Stack,);
Call(METHOD,com.google.gson.functional.CollectionTest,testStack --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testNullsInListSerialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,testNullsInListSerialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,testNullsInListSerialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,testNullsInListSerialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.CollectionTest,testNullsInListSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testNullsInListSerialization --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testNullsInListDeserialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,testNullsInListDeserialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,testNullsInListDeserialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,testNullsInListDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.CollectionTest,testNullsInListDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testNullsInListDeserialization --> size,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,testNullsInListDeserialization --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testNullsInListDeserialization --> get,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,testNullsInListDeserialization --> get,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfObjectSerialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfObjectSerialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfObjectSerialization --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfObjectSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfObjectSerialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfObjectSerialization --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfObjectSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfObjectWithNullSerialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfObjectWithNullSerialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfObjectWithNullSerialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfObjectWithNullSerialization --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfObjectWithNullSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfObjectWithNullSerialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfObjectWithNullSerialization --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfObjectWithNullSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfStringsSerialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfStringsSerialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfStringsSerialization --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfStringsSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfBagOfPrimitivesSerialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfBagOfPrimitivesSerialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfBagOfPrimitivesSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfBagOfPrimitivesSerialization --> assertTrue,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfBagOfPrimitivesSerialization --> startsWith,java.lang.String,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfBagOfPrimitivesSerialization --> assertTrue,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfBagOfPrimitivesSerialization --> endsWith,java.lang.String,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfBagOfPrimitivesSerialization --> assertTrue,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfBagOfPrimitivesSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfBagOfPrimitivesSerialization --> getExpectedJson,null,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfStringsDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfStringsDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfStringsDeserialization --> assertTrue,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfStringsDeserialization --> contains,java.util.Collection,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfStringsDeserialization --> assertTrue,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testCollectionOfStringsDeserialization --> contains,java.util.Collection,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionOfIntegersSerialization --> asList,null,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionOfIntegersSerialization --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionOfIntegersSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionSerialization --> asList,null,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionSerialization --> assertTrue,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionSerialization --> getExpectedJson,com.google.gson.common.TestTypes.BagOfPrimitives,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionDeserializationNotAlllowed --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionDeserializationNotAlllowed --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionDeserializationNotAlllowed --> asList,null,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionDeserializationNotAlllowed --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionDeserializationNotAlllowed --> assertTrue,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionDeserializationNotAlllowed --> contains,java.util.Collection,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionDeserializationNotAlllowed --> assertTrue,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionDeserializationNotAlllowed --> contains,java.util.Collection,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionOfBagOfPrimitivesNotAllowed --> getExpectedJson,com.google.gson.common.TestTypes.BagOfPrimitives,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionOfBagOfPrimitivesNotAllowed --> getExpectedJson,com.google.gson.common.TestTypes.BagOfPrimitives,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionOfBagOfPrimitivesNotAllowed --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionOfBagOfPrimitivesNotAllowed --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionOfBagOfPrimitivesNotAllowed --> size,java.util.Collection,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionOfBagOfPrimitivesNotAllowed --> assertTrue,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionOfBagOfPrimitivesNotAllowed --> containsValue,java.util.Map,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionOfBagOfPrimitivesNotAllowed --> assertTrue,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionOfBagOfPrimitivesNotAllowed --> containsValue,java.util.Map,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionOfBagOfPrimitivesNotAllowed --> assertTrue,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testRawCollectionOfBagOfPrimitivesNotAllowed --> containsValue,java.util.Map,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardPrimitiveCollectionSerilaization --> asList,null,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardPrimitiveCollectionSerilaization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardPrimitiveCollectionSerilaization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardPrimitiveCollectionSerilaization --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardPrimitiveCollectionSerilaization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardPrimitiveCollectionSerilaization --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(ATTRIBUTE,com.google.gson.functional.CollectionTest,testWildcardPrimitiveCollectionSerilaization --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardPrimitiveCollectionDeserilaization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardPrimitiveCollectionDeserilaization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardPrimitiveCollectionDeserilaization --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardPrimitiveCollectionDeserilaization --> size,java.util.Collection,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardPrimitiveCollectionDeserilaization --> assertTrue,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardPrimitiveCollectionDeserilaization --> contains,java.util.Collection,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardPrimitiveCollectionDeserilaization --> assertTrue,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardPrimitiveCollectionDeserilaization --> contains,java.util.Collection,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardCollectionField --> add,java.util.Collection,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardCollectionField --> add,java.util.Collection,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardCollectionField --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardCollectionField --> assertTrue,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardCollectionField --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardCollectionField --> getExpectedJson,com.google.gson.common.TestTypes.BagOfPrimitives,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardCollectionField --> assertTrue,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardCollectionField --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardCollectionField --> getExpectedJson,com.google.gson.common.TestTypes.BagOfPrimitives,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardCollectionField --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardCollectionField --> getCollection,com.google.gson.functional.ObjectWithWildcardCollection,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardCollectionField --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardCollectionField --> size,java.util.Collection,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardCollectionField --> assertTrue,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardCollectionField --> contains,java.util.Collection,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardCollectionField --> assertTrue,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testWildcardCollectionField --> contains,java.util.Collection,);
Call(ATTRIBUTE,com.google.gson.functional.CollectionTest,testWildcardCollectionField --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.CollectionTest,testFieldIsArrayList --> add,com.google.gson.functional.HasArrayListField,);
Call(METHOD,com.google.gson.functional.CollectionTest,testFieldIsArrayList --> add,com.google.gson.functional.HasArrayListField,);
Call(METHOD,com.google.gson.functional.CollectionTest,testFieldIsArrayList --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testFieldIsArrayList --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testFieldIsArrayList --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,testFieldIsArrayList --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,testFieldIsArrayList --> asList,null,);
Call(METHOD,com.google.gson.functional.CollectionTest,testUserCollectionTypeAdapter --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.CollectionTest,serialize --> get,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,serialize --> get,java.util.List,);
Call(METHOD,com.google.gson.functional.CollectionTest,serialize --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CollectionTest,serialize --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CollectionTest,serialize --> assertEquals,com.google.gson.functional.CollectionTest,);
Call(METHOD,com.google.gson.functional.CollectionTest,serialize --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest,serialize --> asList,null,);
EndClass 71
StartClass 72
Class(com.google.gson.common.TestTypes.BagOfPrimitives,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.JsonTreeTest.SubTypeOfBagOfPrimitives);
EndClass 72
StartClass 73
Class(com.google.gson.functional.JsonTreeTest.SubTypeOfBagOfPrimitives,N,N,Private);
Attribute(f,float,Public,N,N,);
Method(<init>,void,Public,N,N);
Parameter(<init>,long,);
Parameter(<init>,int,);
Parameter(<init>,boolean,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,float,);
SuperClass(com.google.gson.common.TestTypes.BagOfPrimitives);
Generalization(com.google.gson.common.TestTypes.BagOfPrimitives);
Call(METHOD,com.google.gson.functional.JsonTreeTest.SubTypeOfBagOfPrimitives,<init> --> super,com.google.gson.functional.JsonTreeTest.SubTypeOfBagOfPrimitives,);
Call(ATTRIBUTE,com.google.gson.functional.JsonTreeTest.SubTypeOfBagOfPrimitives,<init> --> f,float,READ);
EndClass 73
StartClass 74
Class(com.google.gson.functional.ObjectWithWildcardCollection,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 74
StartClass 75
Class(com.google.gson.functional.HasArrayListField,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 75
StartClass 76
Class(com.google.gson.functional.ConcurrencyTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testSingleThreadSerialization,void,Public,N,N);
Method(testSingleThreadDeserialization,void,Public,N,N);
Method(testMultiThreadSerialization,void,Public,N,N);
Method(run,void,Public,N,N);
Method(testMultiThreadDeserialization,void,Public,N,N);
Method(run$2,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.ConcurrencyTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.ConcurrencyTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.ConcurrencyTest,testSingleThreadSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ConcurrencyTest,testSingleThreadDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ConcurrencyTest,testMultiThreadSerialization --> newFixedThreadPool,null,);
Call(METHOD,com.google.gson.functional.ConcurrencyTest,testMultiThreadSerialization --> execute,java.util.concurrent.ExecutorService,);
Call(METHOD,com.google.gson.functional.ConcurrencyTest,run --> await,null,);
Call(METHOD,com.google.gson.functional.ConcurrencyTest,run --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ConcurrencyTest,run --> set,null,);
Call(METHOD,com.google.gson.functional.ConcurrencyTest,run --> countDown,null,);
Call(METHOD,com.google.gson.functional.ConcurrencyTest,run --> countDown,null,);
Call(METHOD,com.google.gson.functional.ConcurrencyTest,run --> await,null,);
Call(METHOD,com.google.gson.functional.ConcurrencyTest,run --> assertFalse,com.google.gson.functional.ConcurrencyTest,);
Call(METHOD,com.google.gson.functional.ConcurrencyTest,run --> get,null,);
Call(METHOD,com.google.gson.functional.ConcurrencyTest,testMultiThreadDeserialization --> newFixedThreadPool,null,);
Call(METHOD,com.google.gson.functional.ConcurrencyTest,testMultiThreadDeserialization --> execute,java.util.concurrent.ExecutorService,);
Call(METHOD,com.google.gson.functional.ConcurrencyTest,run$2 --> await,null,);
Call(METHOD,com.google.gson.functional.ConcurrencyTest,run$2 --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ConcurrencyTest,run$2 --> set,null,);
Call(METHOD,com.google.gson.functional.ConcurrencyTest,run$2 --> countDown,null,);
Call(METHOD,com.google.gson.functional.ConcurrencyTest,run$2 --> countDown,null,);
Call(METHOD,com.google.gson.functional.ConcurrencyTest,run$2 --> await,null,);
Call(METHOD,com.google.gson.functional.ConcurrencyTest,run$2 --> assertFalse,com.google.gson.functional.ConcurrencyTest,);
Call(METHOD,com.google.gson.functional.ConcurrencyTest,run$2 --> get,null,);
EndClass 76
StartClass 77
Class(com.google.gson.functional.CustomDeserializerTest,N,N,Public);
Attribute(DEFAULT_VALUE,java.lang.String,Private,Y,Y,);
Attribute(SUFFIX,java.lang.String,Private,Y,Y,);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testDefaultConstructorNotCalledOnObject,void,Public,N,N);
Method(testDefaultConstructorNotCalledOnField,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest,setUp --> setUp,null,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest,setUp --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest,setUp --> create,com.google.gson.GsonBuilder,);
Call(ATTRIBUTE,com.google.gson.functional.CustomDeserializerTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest,testDefaultConstructorNotCalledOnObject --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest,testDefaultConstructorNotCalledOnObject --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest,testDefaultConstructorNotCalledOnObject --> assertEquals,com.google.gson.functional.CustomDeserializerTest,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest,testDefaultConstructorNotCalledOnObject --> getData,com.google.gson.functional.DataHolder,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest,testDefaultConstructorNotCalledOnField --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest,testDefaultConstructorNotCalledOnField --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest,testDefaultConstructorNotCalledOnField --> assertEquals,com.google.gson.functional.CustomDeserializerTest,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest,testDefaultConstructorNotCalledOnField --> getWrappedData,com.google.gson.functional.DataHolderWrapper,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest,testDefaultConstructorNotCalledOnField --> getData,com.google.gson.functional.DataHolderWrapper,);
EndClass 77
StartClass 78
Class(com.google.gson.functional.DataHolder,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 78
StartClass 79
Class(com.google.gson.functional.DataHolderWrapper,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 79
StartClass 80
Class(com.google.gson.functional.CustomSerializerTest,N,N,Public);
Method(testBaseClassSerializerInvokedForBaseClassFields,void,Public,N,N);
Method(testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances,void,Public,N,N);
Method(testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances,void,Public,N,N);
Method(testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances,void,Public,N,N);
Method(testSerializerReturnsNull,void,Public,N,N);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(serialize,com.google.gson.common.TestTypes.Base,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testBaseClassSerializerInvokedForBaseClassFields --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testBaseClassSerializerInvokedForBaseClassFields --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testBaseClassSerializerInvokedForBaseClassFields --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testBaseClassSerializerInvokedForBaseClassFields --> toJsonTree,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testBaseClassSerializerInvokedForBaseClassFields --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testBaseClassSerializerInvokedForBaseClassFields --> getAsJsonObject,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testBaseClassSerializerInvokedForBaseClassFields --> assertEquals,com.google.gson.functional.CustomSerializerTest,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testBaseClassSerializerInvokedForBaseClassFields --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testBaseClassSerializerInvokedForBaseClassFields --> getAsString,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances --> toJsonTree,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances --> getAsJsonObject,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances --> assertEquals,com.google.gson.functional.CustomSerializerTest,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances --> getAsString,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances --> toJsonTree,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances --> getAsJsonArray,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances --> getAsJsonObject,null,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances --> get,null,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances --> assertEquals,com.google.gson.functional.CustomSerializerTest,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances --> getAsString,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances --> toJsonTree,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances --> getAsJsonObject,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances --> assertEquals,com.google.gson.functional.CustomSerializerTest,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances --> getAsString,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,testSerializerReturnsNull --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,serialize --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,serialize --> toJsonTree,null,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,serialize --> assertTrue,com.google.gson.functional.CustomSerializerTest,);
Call(METHOD,com.google.gson.functional.CustomSerializerTest,serialize --> isJsonNull,com.google.gson.JsonElement,);
EndClass 80
StartClass 81
Class(com.google.gson.common.TestTypes.Base,N,N,Public);
Attribute(BASE_NAME,java.lang.String,Public,Y,Y,);
Attribute(BASE_FIELD_KEY,java.lang.String,Public,Y,Y,);
Attribute(SERIALIZER_KEY,java.lang.String,Public,Y,Y,);
Attribute(baseName,java.lang.String,Public,N,N,);
Attribute(serializerName,java.lang.String,Public,N,N,);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
EndClass 81
StartClass 82
Class(com.google.gson.functional.CustomTypeAdaptersTest,N,N,Public);
Attribute(builder,com.google.gson.GsonBuilder,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testCustomSerializers,void,Public,N,N);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(testCustomDeserializers,void,Public,N,N);
Method(deserialize,com.google.gson.common.TestTypes.ClassWithCustomTypeConverter,Public,N,N);
Method(disable_testCustomSerializersOfSelf,void,Public,N,N);
Method(disable_testCustomDeserializersOfSelf,void,Public,N,N);
Method(testCustomNestedSerializers,void,Public,N,N);
Method(serialize$2,com.google.gson.JsonElement,Public,N,N);
Method(testCustomNestedDeserializers,void,Public,N,N);
Method(deserialize$2,com.google.gson.common.TestTypes.BagOfPrimitives,Public,N,N);
Method(testCustomTypeAdapterDoesNotAppliesToSubClasses,void,Public,N,N);
Method(serialize$3,com.google.gson.JsonElement,Public,N,N);
Method(testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass,void,Public,N,N);
Method(serialize$4,com.google.gson.JsonElement,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(serialize,com.google.gson.common.TestTypes.ClassWithCustomTypeConverter,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
Parameter(serialize$2,com.google.gson.common.TestTypes.BagOfPrimitives,);
Parameter(serialize$2,java.lang.reflect.Type,);
Parameter(serialize$2,com.google.gson.JsonSerializationContext,);
Parameter(deserialize$2,com.google.gson.JsonElement,);
Parameter(deserialize$2,java.lang.reflect.Type,);
Parameter(deserialize$2,com.google.gson.JsonDeserializationContext,);
Parameter(serialize$3,com.google.gson.functional.Base,);
Parameter(serialize$3,java.lang.reflect.Type,);
Parameter(serialize$3,com.google.gson.JsonSerializationContext,);
Parameter(serialize$4,com.google.gson.functional.Base,);
Parameter(serialize$4,java.lang.reflect.Type,);
Parameter(serialize$4,com.google.gson.JsonSerializationContext,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.GsonBuilder);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.CustomTypeAdaptersTest,setUp --> builder,com.google.gson.GsonBuilder,WRITE);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,testCustomSerializers --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize --> assertEquals,com.google.gson.functional.CustomTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize --> toJson,null,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,testCustomDeserializers --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,deserialize --> getAsJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,deserialize --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,deserialize --> getAsInt,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,deserialize --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,deserialize --> fromJson,null,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,deserialize --> assertEquals,com.google.gson.functional.CustomTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,deserialize --> getBag,com.google.gson.common.TestTypes.ClassWithCustomTypeConverter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,deserialize --> getIntValue,com.google.gson.common.TestTypes.ClassWithCustomTypeConverter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,disable_testCustomSerializersOfSelf --> createGsonObjectWithFooTypeAdapter,com.google.gson.functional.CustomTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,disable_testCustomSerializersOfSelf --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,disable_testCustomSerializersOfSelf --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,disable_testCustomSerializersOfSelf --> assertEquals,com.google.gson.functional.CustomTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,disable_testCustomDeserializersOfSelf --> createGsonObjectWithFooTypeAdapter,com.google.gson.functional.CustomTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,disable_testCustomDeserializersOfSelf --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,disable_testCustomDeserializersOfSelf --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,disable_testCustomDeserializersOfSelf --> assertEquals,com.google.gson.functional.CustomTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,disable_testCustomDeserializersOfSelf --> assertEquals,com.google.gson.functional.CustomTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,testCustomNestedSerializers --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize$2 --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize$2 --> assertEquals,com.google.gson.functional.CustomTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize$2 --> toJson,null,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,testCustomNestedDeserializers --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,deserialize$2 --> getAsInt,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,deserialize$2 --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,deserialize$2 --> fromJson,null,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,deserialize$2 --> assertEquals,com.google.gson.functional.CustomTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,deserialize$2 --> getBag,com.google.gson.common.TestTypes.ClassWithCustomTypeConverter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,deserialize$2 --> getIntValue,com.google.gson.common.TestTypes.ClassWithCustomTypeConverter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,testCustomTypeAdapterDoesNotAppliesToSubClasses --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize$3 --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize$3 --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize$3 --> toJson,null,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize$3 --> assertTrue,com.google.gson.functional.CustomTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize$3 --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize$3 --> toJson,null,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize$3 --> assertTrue,com.google.gson.functional.CustomTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize$3 --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize$4 --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize$4 --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize$4 --> toJson,null,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize$4 --> assertTrue,com.google.gson.functional.CustomTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize$4 --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize$4 --> toJson,null,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize$4 --> assertTrue,com.google.gson.functional.CustomTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize$4 --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize$4 --> assertFalse,com.google.gson.functional.CustomTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest,serialize$4 --> contains,java.lang.String,);
EndClass 82
StartClass 83
Class(com.google.gson.JsonDeserializationContext,Y,Y,Public);
Method(deserialize,com.google.gson.T,Public,N,Y);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
EndClass 83
StartClass 84
Class(com.google.gson.functional.Base,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived);
SubClass(com.google.gson.functional.MoreSpecificTypeSerializationTest.Base.Sub);
SubClass(com.google.gson.functional.UncategorizedTest.OperationType.Base.Derived1);
SubClass(com.google.gson.functional.UncategorizedTest.OperationType.Base.Derived1.Derived2);
EndClass 84
StartClass 85
Class(com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived,N,N,Private);
Attribute(derivedValue,int,Public,N,N,);
Method(createGsonObjectWithFooTypeAdapter,com.google.gson.Gson,Private,N,N);
Method(<init>,void,Public,N,N);
SuperClass(com.google.gson.functional.Base);
Generalization(com.google.gson.functional.Base);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived,createGsonObjectWithFooTypeAdapter --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived,createGsonObjectWithFooTypeAdapter --> create,com.google.gson.GsonBuilder,);
EndClass 85
StartClass 86
Class(com.google.gson.functional.MoreSpecificTypeSerializationTest.Base.Sub,N,N,Private);
Attribute(s,int,Public,N,N,);
Method(<init>,void,Public,N,N);
Parameter(<init>,int,);
Parameter(<init>,int,);
SuperClass(com.google.gson.functional.Base);
Generalization(com.google.gson.functional.Base);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest.Base.Sub,<init> --> super,com.google.gson.functional.MoreSpecificTypeSerializationTest.Base.Sub,);
Call(ATTRIBUTE,com.google.gson.functional.MoreSpecificTypeSerializationTest.Base.Sub,<init> --> s,int,READ);
EndClass 86
StartClass 87
Class(com.google.gson.functional.UncategorizedTest.OperationType.Base.Derived1,N,N,Private);
Method(<init>,void,Public,N,N);
SuperClass(com.google.gson.functional.Base);
Generalization(com.google.gson.functional.Base);
EndClass 87
StartClass 88
Class(com.google.gson.functional.UncategorizedTest.OperationType.Base.Derived1.Derived2,N,N,Private);
Method(<init>,void,Public,N,N);
SuperClass(com.google.gson.functional.Base);
Generalization(com.google.gson.functional.Base);
EndClass 88
StartClass 89
Class(com.google.gson.functional.DefaultTypeAdaptersTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Attribute(oldTimeZone,java.util.TimeZone,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(tearDown,void,Protected,N,N);
Method(testClassSerialization,void,Public,N,N);
Method(testClassDeserialization,void,Public,N,N);
Method(testUrlSerialization,void,Public,N,N);
Method(testUrlDeserialization,void,Public,N,N);
Method(testUrlNullSerialization,void,Public,N,N);
Method(testUrlNullDeserialization,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,setUp --> setUp,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,setUp --> getDefault,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,setUp --> setDefault,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,setUp --> getTimeZone,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,setUp --> setDefault,null,);
Call(ATTRIBUTE,com.google.gson.functional.DefaultTypeAdaptersTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,tearDown --> setDefault,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,tearDown --> tearDown,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,testClassSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,testClassSerialization --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,testClassSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,testClassSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,testClassSerialization --> toJson,com.google.gson.Gson,);
Call(ATTRIBUTE,com.google.gson.functional.DefaultTypeAdaptersTest,testClassSerialization --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,testClassDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,testClassDeserialization --> getClass,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,testClassDeserialization --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,testClassDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,testClassDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,testClassDeserialization --> fromJson,com.google.gson.Gson,);
Call(ATTRIBUTE,com.google.gson.functional.DefaultTypeAdaptersTest,testClassDeserialization --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,testUrlSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,testUrlSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,testUrlDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,testUrlDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,testUrlDeserialization --> toExternalForm,java.net.URL,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,testUrlDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,testUrlDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,testUrlDeserialization --> toExternalForm,java.net.URL,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,testUrlNullSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,testUrlNullSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,testUrlNullDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest,testUrlNullDeserialization --> assertNull,com.google.gson.functional.DefaultTypeAdaptersTest,);
EndClass 89
StartClass 90
Class(com.google.gson.functional.DelegateTypeAdapterTest,N,N,Public);
Attribute(stats,com.google.gson.functional.StatsTypeAdapterFactory,Private,N,N,);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testDelegateInvoked,void,Public,N,N);
Method(testDelegateInvokedOnStrings,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.functional.StatsTypeAdapterFactory);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.DelegateTypeAdapterTest,setUp --> setUp,null,);
Call(METHOD,com.google.gson.functional.DelegateTypeAdapterTest,setUp --> registerTypeAdapterFactory,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DelegateTypeAdapterTest,setUp --> create,com.google.gson.GsonBuilder,);
Call(ATTRIBUTE,com.google.gson.functional.DelegateTypeAdapterTest,setUp --> stats,com.google.gson.functional.StatsTypeAdapterFactory,WRITE);
Call(ATTRIBUTE,com.google.gson.functional.DelegateTypeAdapterTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.DelegateTypeAdapterTest,testDelegateInvoked --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.DelegateTypeAdapterTest,testDelegateInvoked --> valueOf,null,);
Call(METHOD,com.google.gson.functional.DelegateTypeAdapterTest,testDelegateInvoked --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DelegateTypeAdapterTest,testDelegateInvoked --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DelegateTypeAdapterTest,testDelegateInvoked --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.DelegateTypeAdapterTest,testDelegateInvoked --> assertEquals,com.google.gson.functional.DelegateTypeAdapterTest,);
Call(METHOD,com.google.gson.functional.DelegateTypeAdapterTest,testDelegateInvoked --> assertEquals,com.google.gson.functional.DelegateTypeAdapterTest,);
Call(ATTRIBUTE,com.google.gson.functional.DelegateTypeAdapterTest,testDelegateInvoked --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.DelegateTypeAdapterTest,testDelegateInvokedOnStrings --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DelegateTypeAdapterTest,testDelegateInvokedOnStrings --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DelegateTypeAdapterTest,testDelegateInvokedOnStrings --> assertEquals,com.google.gson.functional.DelegateTypeAdapterTest,);
Call(METHOD,com.google.gson.functional.DelegateTypeAdapterTest,testDelegateInvokedOnStrings --> assertEquals,com.google.gson.functional.DelegateTypeAdapterTest,);
Call(ATTRIBUTE,com.google.gson.functional.DelegateTypeAdapterTest,testDelegateInvokedOnStrings --> gson,com.google.gson.Gson,READ);
EndClass 90
StartClass 91
Class(com.google.gson.functional.StatsTypeAdapterFactory,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 91
StartClass 92
Class(com.google.gson.functional.EnumTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testTopLevelEnumSerialization,void,Public,N,N);
Method(testTopLevelEnumDeserialization,void,Public,N,N);
Method(testCollectionOfEnumsSerialization,void,Public,N,N);
Method(testCollectionOfEnumsDeserialization,void,Public,N,N);
Method(testClassWithEnumFieldSerialization,void,Public,N,N);
Method(testClassWithEnumFieldDeserialization,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.EnumTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.EnumTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.EnumTest,testTopLevelEnumSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.EnumTest,testTopLevelEnumSerialization --> assertEquals,com.google.gson.functional.EnumTest,);
Call(METHOD,com.google.gson.functional.EnumTest,testTopLevelEnumSerialization --> toString,null,);
Call(METHOD,com.google.gson.functional.EnumTest,testTopLevelEnumDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.EnumTest,testTopLevelEnumDeserialization --> toString,null,);
Call(METHOD,com.google.gson.functional.EnumTest,testTopLevelEnumDeserialization --> assertEquals,com.google.gson.functional.EnumTest,);
Call(METHOD,com.google.gson.functional.EnumTest,testCollectionOfEnumsSerialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.EnumTest,testCollectionOfEnumsSerialization --> add,java.util.Collection,);
Call(METHOD,com.google.gson.functional.EnumTest,testCollectionOfEnumsSerialization --> add,java.util.Collection,);
Call(METHOD,com.google.gson.functional.EnumTest,testCollectionOfEnumsSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.EnumTest,testCollectionOfEnumsSerialization --> assertEquals,com.google.gson.functional.EnumTest,);
Call(METHOD,com.google.gson.functional.EnumTest,testCollectionOfEnumsSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.EnumTest,testCollectionOfEnumsSerialization --> assertEquals,com.google.gson.functional.EnumTest,);
Call(ATTRIBUTE,com.google.gson.functional.EnumTest,testCollectionOfEnumsSerialization --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.EnumTest,testCollectionOfEnumsDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.EnumTest,testCollectionOfEnumsDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.EnumTest,testCollectionOfEnumsDeserialization --> assertContains,null,);
Call(METHOD,com.google.gson.functional.EnumTest,testCollectionOfEnumsDeserialization --> assertContains,null,);
Call(METHOD,com.google.gson.functional.EnumTest,testClassWithEnumFieldSerialization --> assertEquals,com.google.gson.functional.EnumTest,);
Call(METHOD,com.google.gson.functional.EnumTest,testClassWithEnumFieldSerialization --> getExpectedJson,com.google.gson.functional.ClassWithEnumFields,);
Call(METHOD,com.google.gson.functional.EnumTest,testClassWithEnumFieldSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.EnumTest,testClassWithEnumFieldDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.EnumTest,testClassWithEnumFieldDeserialization --> assertEquals,com.google.gson.functional.EnumTest,);
Call(METHOD,com.google.gson.functional.EnumTest,testClassWithEnumFieldDeserialization --> assertEquals,com.google.gson.functional.EnumTest,);
EndClass 92
StartClass 93
Class(com.google.gson.functional.ClassWithEnumFields,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 93
StartClass 94
Class(com.google.gson.functional.EscapingTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testEscapingQuotesInStringArray,void,Public,N,N);
Method(testEscapeAllHtmlCharacters,void,Public,N,N);
Method(testEscapingObjectFields,void,Public,N,N);
Method(testGsonAcceptsEscapedAndNonEscapedJsonDeserialization,void,Public,N,N);
Method(testGsonDoubleDeserialization,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.EscapingTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.EscapingTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.EscapingTest,testEscapingQuotesInStringArray --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.EscapingTest,testEscapingQuotesInStringArray --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.EscapingTest,testEscapingQuotesInStringArray --> assertEquals,com.google.gson.functional.EscapingTest,);
Call(METHOD,com.google.gson.functional.EscapingTest,testEscapingQuotesInStringArray --> assertEquals,com.google.gson.functional.EscapingTest,);
Call(METHOD,com.google.gson.functional.EscapingTest,testEscapeAllHtmlCharacters --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.EscapingTest,testEscapeAllHtmlCharacters --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.EscapingTest,testEscapeAllHtmlCharacters --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.EscapingTest,testEscapeAllHtmlCharacters --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.EscapingTest,testEscapeAllHtmlCharacters --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.EscapingTest,testEscapeAllHtmlCharacters --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.EscapingTest,testEscapeAllHtmlCharacters --> assertEquals,com.google.gson.functional.EscapingTest,);
Call(METHOD,com.google.gson.functional.EscapingTest,testEscapeAllHtmlCharacters --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.EscapingTest,testEscapingObjectFields --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.EscapingTest,testEscapingObjectFields --> assertFalse,com.google.gson.functional.EscapingTest,);
Call(METHOD,com.google.gson.functional.EscapingTest,testEscapingObjectFields --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.EscapingTest,testEscapingObjectFields --> assertFalse,com.google.gson.functional.EscapingTest,);
Call(METHOD,com.google.gson.functional.EscapingTest,testEscapingObjectFields --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.EscapingTest,testEscapingObjectFields --> assertTrue,com.google.gson.functional.EscapingTest,);
Call(METHOD,com.google.gson.functional.EscapingTest,testEscapingObjectFields --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.EscapingTest,testEscapingObjectFields --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.EscapingTest,testEscapingObjectFields --> assertEquals,com.google.gson.functional.EscapingTest,);
Call(METHOD,com.google.gson.functional.EscapingTest,testEscapingObjectFields --> getExpectedJson,com.google.gson.common.TestTypes.BagOfPrimitives,);
Call(METHOD,com.google.gson.functional.EscapingTest,testEscapingObjectFields --> getExpectedJson,com.google.gson.common.TestTypes.BagOfPrimitives,);
Call(METHOD,com.google.gson.functional.EscapingTest,testGsonAcceptsEscapedAndNonEscapedJsonDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.EscapingTest,testGsonAcceptsEscapedAndNonEscapedJsonDeserialization --> disableHtmlEscaping,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.EscapingTest,testGsonAcceptsEscapedAndNonEscapedJsonDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.EscapingTest,testGsonAcceptsEscapedAndNonEscapedJsonDeserialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.EscapingTest,testGsonAcceptsEscapedAndNonEscapedJsonDeserialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.EscapingTest,testGsonAcceptsEscapedAndNonEscapedJsonDeserialization --> assertFalse,com.google.gson.functional.EscapingTest,);
Call(METHOD,com.google.gson.functional.EscapingTest,testGsonAcceptsEscapedAndNonEscapedJsonDeserialization --> equals,java.lang.String,);
Call(METHOD,com.google.gson.functional.EscapingTest,testGsonAcceptsEscapedAndNonEscapedJsonDeserialization --> assertEquals,com.google.gson.functional.EscapingTest,);
Call(METHOD,com.google.gson.functional.EscapingTest,testGsonAcceptsEscapedAndNonEscapedJsonDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.EscapingTest,testGsonAcceptsEscapedAndNonEscapedJsonDeserialization --> assertEquals,com.google.gson.functional.EscapingTest,);
Call(METHOD,com.google.gson.functional.EscapingTest,testGsonAcceptsEscapedAndNonEscapedJsonDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.EscapingTest,testGsonDoubleDeserialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.EscapingTest,testGsonDoubleDeserialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.EscapingTest,testGsonDoubleDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.EscapingTest,testGsonDoubleDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.EscapingTest,testGsonDoubleDeserialization --> assertEquals,com.google.gson.functional.EscapingTest,);
EndClass 94
StartClass 95
Class(com.google.gson.functional.ExclusionStrategyFunctionalTest,N,N,Public);
Attribute(EXCLUDE_SAMPLE_OBJECT_FOR_TEST,com.google.gson.ExclusionStrategy,Private,Y,Y,);
Attribute(src,com.google.gson.functional.SampleObjectForTest,Private,N,N,);
Method(shouldSkipField,boolean,Public,N,N);
Method(shouldSkipClass,boolean,Public,N,N);
Method(setUp,void,Protected,N,N);
Method(testExclusionStrategySerialization,void,Public,N,N);
Method(testExclusionStrategySerializationDoesNotImpactDeserialization,void,Public,N,N);
Method(testExclusionStrategyDeserialization,void,Public,N,N);
Method(testExclusionStrategySerializationDoesNotImpactSerialization,void,Public,N,N);
Method(testExclusionStrategyWithMode,void,Public,N,N);
Method(testExcludeTopLevelClassSerialization,void,Public,N,N);
Method(testExcludeTopLevelClassSerializationDoesNotImpactDeserialization,void,Public,N,N);
Method(testExcludeTopLevelClassDeserialization,void,Public,N,N);
Method(testExcludeTopLevelClassDeserializationDoesNotImpactSerialization,void,Public,N,N);
Method(createGson,com.google.gson.Gson,Private,Y,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(shouldSkipField,com.google.gson.FieldAttributes,);
Parameter(shouldSkipClass,java.lang.Class,);
Parameter(createGson,com.google.gson.ExclusionStrategy,);
Parameter(createGson,boolean,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.ExclusionStrategy);
Composition(com.google.gson.functional.SampleObjectForTest);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.ExclusionStrategyFunctionalTest,setUp --> src,com.google.gson.functional.SampleObjectForTest,WRITE);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategySerialization --> createGson,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategySerialization --> assertFalse,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategySerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategySerialization --> assertFalse,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategySerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategySerialization --> assertTrue,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategySerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategySerializationDoesNotImpactDeserialization --> createGson,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategySerializationDoesNotImpactDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategySerializationDoesNotImpactDeserialization --> assertEquals,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategySerializationDoesNotImpactDeserialization --> assertEquals,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategySerializationDoesNotImpactDeserialization --> assertEquals,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategyDeserialization --> createGson,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategyDeserialization --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategyDeserialization --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategyDeserialization --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategyDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategyDeserialization --> assertEquals,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategyDeserialization --> assertEquals,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategyDeserialization --> assertEquals,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategySerializationDoesNotImpactSerialization --> createGson,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategySerializationDoesNotImpactSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategySerializationDoesNotImpactSerialization --> assertTrue,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategySerializationDoesNotImpactSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategySerializationDoesNotImpactSerialization --> assertTrue,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategySerializationDoesNotImpactSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategySerializationDoesNotImpactSerialization --> assertTrue,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategySerializationDoesNotImpactSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategyWithMode --> createGson,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategyWithMode --> toJsonTree,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategyWithMode --> getAsJsonObject,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategyWithMode --> assertEquals,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategyWithMode --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategyWithMode --> getAsInt,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategyWithMode --> assertEquals,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategyWithMode --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategyWithMode --> getAsString,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategyWithMode --> assertEquals,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategyWithMode --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategyWithMode --> getAsLong,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategyWithMode --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategyWithMode --> assertEquals,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategyWithMode --> assertEquals,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExclusionStrategyWithMode --> assertEquals,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExcludeTopLevelClassSerialization --> addSerializationExclusionStrategy,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExcludeTopLevelClassSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExcludeTopLevelClassSerialization --> assertEquals,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExcludeTopLevelClassSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExcludeTopLevelClassSerializationDoesNotImpactDeserialization --> addSerializationExclusionStrategy,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExcludeTopLevelClassSerializationDoesNotImpactDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExcludeTopLevelClassSerializationDoesNotImpactDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExcludeTopLevelClassSerializationDoesNotImpactDeserialization --> assertEquals,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExcludeTopLevelClassSerializationDoesNotImpactDeserialization --> assertEquals,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExcludeTopLevelClassSerializationDoesNotImpactDeserialization --> assertEquals,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExcludeTopLevelClassDeserialization --> addDeserializationExclusionStrategy,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExcludeTopLevelClassDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExcludeTopLevelClassDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExcludeTopLevelClassDeserialization --> assertNull,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExcludeTopLevelClassDeserializationDoesNotImpactSerialization --> addDeserializationExclusionStrategy,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExcludeTopLevelClassDeserializationDoesNotImpactSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExcludeTopLevelClassDeserializationDoesNotImpactSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExcludeTopLevelClassDeserializationDoesNotImpactSerialization --> assertTrue,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExcludeTopLevelClassDeserializationDoesNotImpactSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExcludeTopLevelClassDeserializationDoesNotImpactSerialization --> assertTrue,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExcludeTopLevelClassDeserializationDoesNotImpactSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExcludeTopLevelClassDeserializationDoesNotImpactSerialization --> assertTrue,com.google.gson.functional.ExclusionStrategyFunctionalTest,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,testExcludeTopLevelClassDeserializationDoesNotImpactSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,createGson --> addSerializationExclusionStrategy,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,createGson --> addDeserializationExclusionStrategy,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,createGson --> serializeNulls,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest,createGson --> create,com.google.gson.GsonBuilder,);
EndClass 95
StartClass 96
Class(com.google.gson.functional.SampleObjectForTest,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 96
StartClass 97
Class(com.google.gson.functional.ExposeFieldsTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testNullExposeFieldSerialization,void,Public,N,N);
Method(testArrayWithOneNullExposeFieldObjectSerialization,void,Public,N,N);
Method(testExposeAnnotationSerialization,void,Public,N,N);
Method(testExposeAnnotationDeserialization,void,Public,N,N);
Method(testNoExposedFieldSerialization,void,Public,N,N);
Method(testNoExposedFieldDeserialization,void,Public,N,N);
Method(testExposedInterfaceFieldSerialization,void,Public,N,N);
Method(testExposedInterfaceFieldDeserialization,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,setUp --> setUp,null,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,setUp --> excludeFieldsWithoutExposeAnnotation,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,setUp --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,setUp --> create,com.google.gson.GsonBuilder,);
Call(ATTRIBUTE,com.google.gson.functional.ExposeFieldsTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testNullExposeFieldSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testNullExposeFieldSerialization --> assertEquals,com.google.gson.functional.ExposeFieldsTest,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testNullExposeFieldSerialization --> getExpectedJson,com.google.gson.functional.ClassWithExposedFields,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testArrayWithOneNullExposeFieldObjectSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testArrayWithOneNullExposeFieldObjectSerialization --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testArrayWithOneNullExposeFieldObjectSerialization --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testArrayWithOneNullExposeFieldObjectSerialization --> getExpectedJson,com.google.gson.functional.ClassWithExposedFields,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testArrayWithOneNullExposeFieldObjectSerialization --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testArrayWithOneNullExposeFieldObjectSerialization --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testArrayWithOneNullExposeFieldObjectSerialization --> getExpectedJson,com.google.gson.functional.ClassWithExposedFields,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testArrayWithOneNullExposeFieldObjectSerialization --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testArrayWithOneNullExposeFieldObjectSerialization --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testArrayWithOneNullExposeFieldObjectSerialization --> getExpectedJson,com.google.gson.functional.ClassWithExposedFields,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testArrayWithOneNullExposeFieldObjectSerialization --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testArrayWithOneNullExposeFieldObjectSerialization --> toString,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testArrayWithOneNullExposeFieldObjectSerialization --> assertEquals,com.google.gson.functional.ExposeFieldsTest,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testExposeAnnotationSerialization --> assertEquals,com.google.gson.functional.ExposeFieldsTest,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testExposeAnnotationSerialization --> getExpectedJson,com.google.gson.functional.ClassWithExposedFields,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testExposeAnnotationSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testExposeAnnotationDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testExposeAnnotationDeserialization --> assertEquals,com.google.gson.functional.ExposeFieldsTest,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testExposeAnnotationDeserialization --> assertNull,com.google.gson.functional.ExposeFieldsTest,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testExposeAnnotationDeserialization --> assertFalse,com.google.gson.functional.ExposeFieldsTest,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testNoExposedFieldSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testNoExposedFieldSerialization --> assertEquals,com.google.gson.functional.ExposeFieldsTest,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testNoExposedFieldDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testNoExposedFieldDeserialization --> assertEquals,com.google.gson.functional.ExposeFieldsTest,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testNoExposedFieldDeserialization --> assertEquals,com.google.gson.functional.ExposeFieldsTest,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testExposedInterfaceFieldSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testExposedInterfaceFieldSerialization --> assertEquals,com.google.gson.functional.ExposeFieldsTest,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testExposedInterfaceFieldDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest,testExposedInterfaceFieldDeserialization --> assertNotNull,com.google.gson.functional.ExposeFieldsTest,);
EndClass 97
StartClass 98
Class(com.google.gson.functional.ClassWithExposedFields,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 98
StartClass 99
Class(com.google.gson.functional.FieldExclusionTest,N,N,Public);
Attribute(VALUE,java.lang.String,Private,Y,Y,);
Attribute(outer,com.google.gson.functional.Outer,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testDefaultInnerClassExclusion,void,Public,N,N);
Method(testInnerClassExclusion,void,Public,N,N);
Method(testDefaultNestedStaticClassIncluded,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.functional.Outer);
Call(METHOD,com.google.gson.functional.FieldExclusionTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.FieldExclusionTest,setUp --> outer,com.google.gson.functional.Outer,WRITE);
Call(METHOD,com.google.gson.functional.FieldExclusionTest,testDefaultInnerClassExclusion --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.FieldExclusionTest,testDefaultInnerClassExclusion --> assertEquals,com.google.gson.functional.FieldExclusionTest,);
Call(METHOD,com.google.gson.functional.FieldExclusionTest,testDefaultInnerClassExclusion --> toJson,com.google.gson.functional.Outer.Inner,);
Call(METHOD,com.google.gson.functional.FieldExclusionTest,testDefaultInnerClassExclusion --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.FieldExclusionTest,testDefaultInnerClassExclusion --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.FieldExclusionTest,testDefaultInnerClassExclusion --> assertEquals,com.google.gson.functional.FieldExclusionTest,);
Call(METHOD,com.google.gson.functional.FieldExclusionTest,testDefaultInnerClassExclusion --> toJson,com.google.gson.functional.Outer.Inner,);
Call(ATTRIBUTE,com.google.gson.functional.FieldExclusionTest,testDefaultInnerClassExclusion --> outer,com.google.gson.functional.Outer,READ);
Call(METHOD,com.google.gson.functional.FieldExclusionTest,testInnerClassExclusion --> disableInnerClassSerialization,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.FieldExclusionTest,testInnerClassExclusion --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.FieldExclusionTest,testInnerClassExclusion --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.FieldExclusionTest,testInnerClassExclusion --> assertEquals,com.google.gson.functional.FieldExclusionTest,);
Call(METHOD,com.google.gson.functional.FieldExclusionTest,testDefaultNestedStaticClassIncluded --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.FieldExclusionTest,testDefaultNestedStaticClassIncluded --> assertEquals,com.google.gson.functional.FieldExclusionTest,);
Call(METHOD,com.google.gson.functional.FieldExclusionTest,testDefaultNestedStaticClassIncluded --> toJson,com.google.gson.functional.Outer.Inner,);
Call(METHOD,com.google.gson.functional.FieldExclusionTest,testDefaultNestedStaticClassIncluded --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.FieldExclusionTest,testDefaultNestedStaticClassIncluded --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.FieldExclusionTest,testDefaultNestedStaticClassIncluded --> assertEquals,com.google.gson.functional.FieldExclusionTest,);
Call(METHOD,com.google.gson.functional.FieldExclusionTest,testDefaultNestedStaticClassIncluded --> toJson,com.google.gson.functional.Outer.Inner,);
Call(ATTRIBUTE,com.google.gson.functional.FieldExclusionTest,testDefaultNestedStaticClassIncluded --> outer,com.google.gson.functional.Outer,READ);
EndClass 99
StartClass 100
Class(com.google.gson.functional.Outer,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 100
StartClass 101
Class(com.google.gson.functional.FieldNamingTest,N,N,Public);
Method(testIdentity,void,Public,N,N);
Method(testUpperCamelCase,void,Public,N,N);
Method(testUpperCamelCaseWithSpaces,void,Public,N,N);
Method(testLowerCaseWithUnderscores,void,Public,N,N);
Method(testLowerCaseWithDashes,void,Public,N,N);
Method(getGsonWithNamingPolicy,com.google.gson.Gson,Private,N,N);
Method(<init>,void,Public,N,N);
Parameter(getGsonWithNamingPolicy,com.google.gson.FieldNamingPolicy,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.functional.FieldNamingTest,testIdentity --> getGsonWithNamingPolicy,com.google.gson.functional.FieldNamingTest,);
Call(METHOD,com.google.gson.functional.FieldNamingTest,testIdentity --> assertEquals,com.google.gson.functional.FieldNamingTest,);
Call(METHOD,com.google.gson.functional.FieldNamingTest,testIdentity --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.FieldNamingTest,testIdentity --> replace,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.FieldNamingTest,testUpperCamelCase --> getGsonWithNamingPolicy,com.google.gson.functional.FieldNamingTest,);
Call(METHOD,com.google.gson.functional.FieldNamingTest,testUpperCamelCase --> assertEquals,com.google.gson.functional.FieldNamingTest,);
Call(METHOD,com.google.gson.functional.FieldNamingTest,testUpperCamelCase --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.FieldNamingTest,testUpperCamelCase --> replace,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.FieldNamingTest,testUpperCamelCaseWithSpaces --> getGsonWithNamingPolicy,com.google.gson.functional.FieldNamingTest,);
Call(METHOD,com.google.gson.functional.FieldNamingTest,testUpperCamelCaseWithSpaces --> assertEquals,com.google.gson.functional.FieldNamingTest,);
Call(METHOD,com.google.gson.functional.FieldNamingTest,testUpperCamelCaseWithSpaces --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.FieldNamingTest,testUpperCamelCaseWithSpaces --> replace,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.FieldNamingTest,testLowerCaseWithUnderscores --> getGsonWithNamingPolicy,com.google.gson.functional.FieldNamingTest,);
Call(METHOD,com.google.gson.functional.FieldNamingTest,testLowerCaseWithUnderscores --> assertEquals,com.google.gson.functional.FieldNamingTest,);
Call(METHOD,com.google.gson.functional.FieldNamingTest,testLowerCaseWithUnderscores --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.FieldNamingTest,testLowerCaseWithUnderscores --> replace,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.FieldNamingTest,testLowerCaseWithDashes --> getGsonWithNamingPolicy,com.google.gson.functional.FieldNamingTest,);
Call(METHOD,com.google.gson.functional.FieldNamingTest,testLowerCaseWithDashes --> assertEquals,com.google.gson.functional.FieldNamingTest,);
Call(METHOD,com.google.gson.functional.FieldNamingTest,testLowerCaseWithDashes --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.FieldNamingTest,testLowerCaseWithDashes --> replace,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.FieldNamingTest,getGsonWithNamingPolicy --> setFieldNamingPolicy,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.FieldNamingTest,getGsonWithNamingPolicy --> create,com.google.gson.GsonBuilder,);
EndClass 101
StartClass 102
Class(com.google.gson.functional.GsonVersionDiagnosticsTest,N,N,Public);
Attribute(GSON_VERSION_PATTERN,java.util.regex.Pattern,Private,Y,Y,);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Public,N,N);
Method(write,void,Public,N,N);
Method(read,com.google.gson.functional.TestType,Public,N,N);
Method(testVersionPattern,void,Public,N,N);
Method(testAssertionErrorInSerializationPrintsVersion,void,Public,N,N);
Method(testAssertionErrorInDeserializationPrintsVersion,void,Public,N,N);
Method(ensureAssertionErrorPrintsGsonVersion,void,Private,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.functional.TestType,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(ensureAssertionErrorPrintsGsonVersion,java.lang.AssertionError,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.GsonVersionDiagnosticsTest,setUp --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(ATTRIBUTE,com.google.gson.functional.GsonVersionDiagnosticsTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.GsonVersionDiagnosticsTest,read --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.GsonVersionDiagnosticsTest,testVersionPattern --> assertTrue,com.google.gson.functional.GsonVersionDiagnosticsTest,);
Call(METHOD,com.google.gson.functional.GsonVersionDiagnosticsTest,testVersionPattern --> matcher,java.util.regex.Pattern,);
Call(METHOD,com.google.gson.functional.GsonVersionDiagnosticsTest,testVersionPattern --> matches,java.util.regex.Pattern,);
Call(METHOD,com.google.gson.functional.GsonVersionDiagnosticsTest,testVersionPattern --> assertTrue,com.google.gson.functional.GsonVersionDiagnosticsTest,);
Call(METHOD,com.google.gson.functional.GsonVersionDiagnosticsTest,testVersionPattern --> matcher,java.util.regex.Pattern,);
Call(METHOD,com.google.gson.functional.GsonVersionDiagnosticsTest,testVersionPattern --> matches,java.util.regex.Pattern,);
Call(METHOD,com.google.gson.functional.GsonVersionDiagnosticsTest,testAssertionErrorInSerializationPrintsVersion --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.GsonVersionDiagnosticsTest,testAssertionErrorInSerializationPrintsVersion --> fail,com.google.gson.functional.GsonVersionDiagnosticsTest,);
Call(METHOD,com.google.gson.functional.GsonVersionDiagnosticsTest,testAssertionErrorInSerializationPrintsVersion --> ensureAssertionErrorPrintsGsonVersion,com.google.gson.functional.GsonVersionDiagnosticsTest,);
Call(METHOD,com.google.gson.functional.GsonVersionDiagnosticsTest,testAssertionErrorInDeserializationPrintsVersion --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.GsonVersionDiagnosticsTest,testAssertionErrorInDeserializationPrintsVersion --> fail,com.google.gson.functional.GsonVersionDiagnosticsTest,);
Call(METHOD,com.google.gson.functional.GsonVersionDiagnosticsTest,testAssertionErrorInDeserializationPrintsVersion --> ensureAssertionErrorPrintsGsonVersion,com.google.gson.functional.GsonVersionDiagnosticsTest,);
Call(METHOD,com.google.gson.functional.GsonVersionDiagnosticsTest,ensureAssertionErrorPrintsGsonVersion --> getMessage,java.lang.AssertionError,);
Call(METHOD,com.google.gson.functional.GsonVersionDiagnosticsTest,ensureAssertionErrorPrintsGsonVersion --> indexOf,java.lang.String,);
Call(METHOD,com.google.gson.functional.GsonVersionDiagnosticsTest,ensureAssertionErrorPrintsGsonVersion --> assertTrue,com.google.gson.functional.GsonVersionDiagnosticsTest,);
Call(METHOD,com.google.gson.functional.GsonVersionDiagnosticsTest,ensureAssertionErrorPrintsGsonVersion --> indexOf,java.lang.String,);
Call(METHOD,com.google.gson.functional.GsonVersionDiagnosticsTest,ensureAssertionErrorPrintsGsonVersion --> assertTrue,com.google.gson.functional.GsonVersionDiagnosticsTest,);
Call(METHOD,com.google.gson.functional.GsonVersionDiagnosticsTest,ensureAssertionErrorPrintsGsonVersion --> substring,java.lang.String,);
Call(METHOD,com.google.gson.functional.GsonVersionDiagnosticsTest,ensureAssertionErrorPrintsGsonVersion --> assertTrue,com.google.gson.functional.GsonVersionDiagnosticsTest,);
Call(METHOD,com.google.gson.functional.GsonVersionDiagnosticsTest,ensureAssertionErrorPrintsGsonVersion --> matcher,java.util.regex.Pattern,);
Call(METHOD,com.google.gson.functional.GsonVersionDiagnosticsTest,ensureAssertionErrorPrintsGsonVersion --> matches,java.util.regex.Pattern,);
EndClass 102
StartClass 103
Class(com.google.gson.functional.TestType,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 103
StartClass 104
Class(com.google.gson.functional.InheritanceTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testSubClassSerialization,void,Public,N,N);
Method(testSubClassDeserialization,void,Public,N,N);
Method(testClassWithBaseFieldSerialization,void,Public,N,N);
Method(testClassWithBaseArrayFieldSerialization,void,Public,N,N);
Method(testClassWithBaseCollectionFieldSerialization,void,Public,N,N);
Method(testBaseSerializedAsSub,void,Public,N,N);
Method(testBaseSerializedAsSubForToJsonMethod,void,Public,N,N);
Method(testBaseSerializedAsBaseWhenSpecifiedWithExplicitType,void,Public,N,N);
Method(testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod,void,Public,N,N);
Method(testBaseSerializedAsSubWhenSpecifiedWithExplicitType,void,Public,N,N);
Method(testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.InheritanceTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.InheritanceTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.InheritanceTest,testSubClassSerialization --> assertEquals,com.google.gson.functional.InheritanceTest,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testSubClassSerialization --> getExpectedJson,com.google.gson.functional.SubTypeOfNested,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testSubClassSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testSubClassDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testSubClassDeserialization --> assertEquals,com.google.gson.functional.InheritanceTest,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testSubClassDeserialization --> getExpectedJson,com.google.gson.functional.SubTypeOfNested,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseFieldSerialization --> toJsonTree,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseFieldSerialization --> getAsJsonObject,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseFieldSerialization --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseFieldSerialization --> assertEquals,com.google.gson.functional.InheritanceTest,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseFieldSerialization --> getAsJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseFieldSerialization --> get,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseFieldSerialization --> getAsString,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseArrayFieldSerialization --> toJsonTree,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseArrayFieldSerialization --> getAsJsonObject,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseArrayFieldSerialization --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseArrayFieldSerialization --> getAsJsonArray,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseArrayFieldSerialization --> assertEquals,com.google.gson.functional.InheritanceTest,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseArrayFieldSerialization --> getAsJsonObject,null,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseArrayFieldSerialization --> get,null,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseArrayFieldSerialization --> getAsString,null,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseCollectionFieldSerialization --> add,java.util.Collection,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseCollectionFieldSerialization --> add,java.util.Collection,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseCollectionFieldSerialization --> toJsonTree,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseCollectionFieldSerialization --> getAsJsonObject,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseCollectionFieldSerialization --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseCollectionFieldSerialization --> getAsJsonArray,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseCollectionFieldSerialization --> assertEquals,com.google.gson.functional.InheritanceTest,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseCollectionFieldSerialization --> getAsJsonObject,null,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseCollectionFieldSerialization --> get,null,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testClassWithBaseCollectionFieldSerialization --> getAsString,null,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsSub --> toJsonTree,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsSub --> getAsJsonObject,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsSub --> assertEquals,com.google.gson.functional.InheritanceTest,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsSub --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsSub --> getAsString,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsSubForToJsonMethod --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsSubForToJsonMethod --> assertTrue,com.google.gson.functional.InheritanceTest,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsSubForToJsonMethod --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsBaseWhenSpecifiedWithExplicitType --> toJsonTree,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsBaseWhenSpecifiedWithExplicitType --> getAsJsonObject,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsBaseWhenSpecifiedWithExplicitType --> assertEquals,com.google.gson.functional.InheritanceTest,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsBaseWhenSpecifiedWithExplicitType --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsBaseWhenSpecifiedWithExplicitType --> getAsString,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsBaseWhenSpecifiedWithExplicitType --> assertNull,com.google.gson.functional.InheritanceTest,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsBaseWhenSpecifiedWithExplicitType --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod --> assertTrue,com.google.gson.functional.InheritanceTest,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod --> assertFalse,com.google.gson.functional.InheritanceTest,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsSubWhenSpecifiedWithExplicitType --> toJsonTree,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsSubWhenSpecifiedWithExplicitType --> getAsJsonObject,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsSubWhenSpecifiedWithExplicitType --> assertEquals,com.google.gson.functional.InheritanceTest,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsSubWhenSpecifiedWithExplicitType --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsSubWhenSpecifiedWithExplicitType --> getAsString,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod --> assertTrue,com.google.gson.functional.InheritanceTest,);
Call(METHOD,com.google.gson.functional.InheritanceTest,testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod --> contains,java.lang.String,);
EndClass 104
StartClass 105
Class(com.google.gson.functional.SubTypeOfNested,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 105
StartClass 106
Class(com.google.gson.functional.InstanceCreatorTest,N,N,Public);
Method(testInstanceCreatorReturnsBaseType,void,Public,N,N);
Method(createInstance,com.google.gson.common.TestTypes.Base,Public,N,N);
Method(testInstanceCreatorReturnsSubTypeForTopLevelObject,void,Public,N,N);
Method(createInstance$2,com.google.gson.common.TestTypes.Base,Public,N,N);
Method(testInstanceCreatorReturnsSubTypeForField,void,Public,N,N);
Method(createInstance$3,com.google.gson.common.TestTypes.Base,Public,N,N);
Method(testInstanceCreatorForCollectionType,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(createInstance,java.lang.reflect.Type,);
Parameter(createInstance$2,java.lang.reflect.Type,);
Parameter(createInstance$3,java.lang.reflect.Type,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest,testInstanceCreatorReturnsBaseType --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest,createInstance --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest,createInstance --> fromJson,null,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest,createInstance --> assertEquals,com.google.gson.functional.InstanceCreatorTest,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest,testInstanceCreatorReturnsSubTypeForTopLevelObject --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest,createInstance$2 --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest,createInstance$2 --> fromJson,null,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest,createInstance$2 --> assertTrue,com.google.gson.functional.InstanceCreatorTest,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest,createInstance$2 --> assertFalse,com.google.gson.functional.InstanceCreatorTest,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest,createInstance$2 --> equals,java.lang.String,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest,createInstance$2 --> assertEquals,com.google.gson.functional.InstanceCreatorTest,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest,testInstanceCreatorReturnsSubTypeForField --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest,createInstance$3 --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest,createInstance$3 --> fromJson,null,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest,createInstance$3 --> assertTrue,com.google.gson.functional.InstanceCreatorTest,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest,createInstance$3 --> assertEquals,com.google.gson.functional.InstanceCreatorTest,);
EndClass 106
StartClass 107
Class(com.google.gson.functional.InterfaceTest,N,N,Public);
Attribute(OBJ_JSON,java.lang.String,Private,Y,Y,);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Attribute(obj,com.google.gson.functional.TestObject,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testSerializingObjectImplementingInterface,void,Public,N,N);
Method(testSerializingInterfaceObjectField,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Composition(com.google.gson.functional.TestObject);
Call(METHOD,com.google.gson.functional.InterfaceTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.InterfaceTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(ATTRIBUTE,com.google.gson.functional.InterfaceTest,setUp --> obj,com.google.gson.functional.TestObject,WRITE);
Call(METHOD,com.google.gson.functional.InterfaceTest,testSerializingObjectImplementingInterface --> assertEquals,com.google.gson.functional.InterfaceTest,);
Call(METHOD,com.google.gson.functional.InterfaceTest,testSerializingObjectImplementingInterface --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.InterfaceTest,testSerializingInterfaceObjectField --> assertEquals,com.google.gson.functional.InterfaceTest,);
Call(METHOD,com.google.gson.functional.InterfaceTest,testSerializingInterfaceObjectField --> toJson,com.google.gson.Gson,);
EndClass 107
StartClass 108
Class(com.google.gson.functional.TestObject,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 108
StartClass 109
Class(com.google.gson.functional.InternationalizationTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testStringsWithRawChineseCharactersDeserialization,void,Public,N,N);
Method(testStringsWithUnicodeChineseCharactersSerialization,void,Public,N,N);
Method(testStringsWithUnicodeChineseCharactersDeserialization,void,Public,N,N);
Method(testStringsWithUnicodeChineseCharactersEscapedDeserialization,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.InternationalizationTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.InternationalizationTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.InternationalizationTest,testStringsWithRawChineseCharactersDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.InternationalizationTest,testStringsWithRawChineseCharactersDeserialization --> assertEquals,com.google.gson.functional.InternationalizationTest,);
Call(METHOD,com.google.gson.functional.InternationalizationTest,testStringsWithUnicodeChineseCharactersSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.InternationalizationTest,testStringsWithUnicodeChineseCharactersSerialization --> assertEquals,com.google.gson.functional.InternationalizationTest,);
Call(METHOD,com.google.gson.functional.InternationalizationTest,testStringsWithUnicodeChineseCharactersDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.InternationalizationTest,testStringsWithUnicodeChineseCharactersDeserialization --> assertEquals,com.google.gson.functional.InternationalizationTest,);
Call(METHOD,com.google.gson.functional.InternationalizationTest,testStringsWithUnicodeChineseCharactersEscapedDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.InternationalizationTest,testStringsWithUnicodeChineseCharactersEscapedDeserialization --> assertEquals,com.google.gson.functional.InternationalizationTest,);
EndClass 109
StartClass 110
Class(com.google.gson.functional.JavaUtilConcurrentAtomicTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testAtomicBoolean,void,Public,N,N);
Method(testAtomicInteger,void,Public,N,N);
Method(testAtomicLong,void,Public,N,N);
Method(testAtomicLongWithStringSerializationPolicy,void,Public,N,N);
Method(testAtomicIntegerArray,void,Public,N,N);
Method(testAtomicLongArray,void,Public,N,N);
Method(testAtomicLongArrayWithStringSerializationPolicy,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.JavaUtilConcurrentAtomicTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicBoolean --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicBoolean --> assertTrue,com.google.gson.functional.JavaUtilConcurrentAtomicTest,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicBoolean --> get,java.util.concurrent.atomic.AtomicBoolean,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicBoolean --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicBoolean --> assertEquals,com.google.gson.functional.JavaUtilConcurrentAtomicTest,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicInteger --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicInteger --> assertEquals,com.google.gson.functional.JavaUtilConcurrentAtomicTest,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicInteger --> get,java.util.concurrent.atomic.AtomicInteger,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicInteger --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicInteger --> assertEquals,com.google.gson.functional.JavaUtilConcurrentAtomicTest,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLong --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLong --> assertEquals,com.google.gson.functional.JavaUtilConcurrentAtomicTest,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLong --> get,java.util.concurrent.atomic.AtomicLong,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLong --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLong --> assertEquals,com.google.gson.functional.JavaUtilConcurrentAtomicTest,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongWithStringSerializationPolicy --> setLongSerializationPolicy,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongWithStringSerializationPolicy --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongWithStringSerializationPolicy --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongWithStringSerializationPolicy --> assertEquals,com.google.gson.functional.JavaUtilConcurrentAtomicTest,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongWithStringSerializationPolicy --> get,com.google.gson.functional.AtomicLongHolder,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongWithStringSerializationPolicy --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongWithStringSerializationPolicy --> assertEquals,com.google.gson.functional.JavaUtilConcurrentAtomicTest,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicIntegerArray --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicIntegerArray --> assertEquals,com.google.gson.functional.JavaUtilConcurrentAtomicTest,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicIntegerArray --> length,java.util.concurrent.atomic.AtomicIntegerArray,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicIntegerArray --> assertEquals,com.google.gson.functional.JavaUtilConcurrentAtomicTest,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicIntegerArray --> get,java.util.concurrent.atomic.AtomicIntegerArray,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicIntegerArray --> assertEquals,com.google.gson.functional.JavaUtilConcurrentAtomicTest,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicIntegerArray --> get,java.util.concurrent.atomic.AtomicIntegerArray,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicIntegerArray --> assertEquals,com.google.gson.functional.JavaUtilConcurrentAtomicTest,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicIntegerArray --> get,java.util.concurrent.atomic.AtomicIntegerArray,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicIntegerArray --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicIntegerArray --> assertEquals,com.google.gson.functional.JavaUtilConcurrentAtomicTest,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongArray --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongArray --> assertEquals,com.google.gson.functional.JavaUtilConcurrentAtomicTest,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongArray --> length,java.util.concurrent.atomic.AtomicLongArray,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongArray --> assertEquals,com.google.gson.functional.JavaUtilConcurrentAtomicTest,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongArray --> get,java.util.concurrent.atomic.AtomicLongArray,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongArray --> assertEquals,com.google.gson.functional.JavaUtilConcurrentAtomicTest,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongArray --> get,java.util.concurrent.atomic.AtomicLongArray,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongArray --> assertEquals,com.google.gson.functional.JavaUtilConcurrentAtomicTest,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongArray --> get,java.util.concurrent.atomic.AtomicLongArray,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongArray --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongArray --> assertEquals,com.google.gson.functional.JavaUtilConcurrentAtomicTest,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongArrayWithStringSerializationPolicy --> setLongSerializationPolicy,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongArrayWithStringSerializationPolicy --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongArrayWithStringSerializationPolicy --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongArrayWithStringSerializationPolicy --> assertEquals,com.google.gson.functional.JavaUtilConcurrentAtomicTest,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongArrayWithStringSerializationPolicy --> length,java.util.concurrent.atomic.AtomicLongArray,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongArrayWithStringSerializationPolicy --> assertEquals,com.google.gson.functional.JavaUtilConcurrentAtomicTest,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongArrayWithStringSerializationPolicy --> get,java.util.concurrent.atomic.AtomicLongArray,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongArrayWithStringSerializationPolicy --> assertEquals,com.google.gson.functional.JavaUtilConcurrentAtomicTest,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongArrayWithStringSerializationPolicy --> get,java.util.concurrent.atomic.AtomicLongArray,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongArrayWithStringSerializationPolicy --> assertEquals,com.google.gson.functional.JavaUtilConcurrentAtomicTest,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongArrayWithStringSerializationPolicy --> get,java.util.concurrent.atomic.AtomicLongArray,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongArrayWithStringSerializationPolicy --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JavaUtilConcurrentAtomicTest,testAtomicLongArrayWithStringSerializationPolicy --> assertEquals,com.google.gson.functional.JavaUtilConcurrentAtomicTest,);
EndClass 110
StartClass 111
Class(com.google.gson.functional.AtomicLongHolder,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 111
StartClass 112
Class(com.google.gson.functional.JavaUtilTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testCurrency,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.JavaUtilTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.JavaUtilTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.JavaUtilTest,testCurrency --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JavaUtilTest,testCurrency --> assertEquals,com.google.gson.functional.JavaUtilTest,);
Call(METHOD,com.google.gson.functional.JavaUtilTest,testCurrency --> getCurrencyCode,com.google.gson.functional.CurrencyHolder,);
Call(METHOD,com.google.gson.functional.JavaUtilTest,testCurrency --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JavaUtilTest,testCurrency --> assertEquals,com.google.gson.functional.JavaUtilTest,);
Call(METHOD,com.google.gson.functional.JavaUtilTest,testCurrency --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JavaUtilTest,testCurrency --> assertNull,com.google.gson.functional.JavaUtilTest,);
Call(METHOD,com.google.gson.functional.JavaUtilTest,testCurrency --> assertEquals,com.google.gson.functional.JavaUtilTest,);
Call(METHOD,com.google.gson.functional.JavaUtilTest,testCurrency --> toJson,com.google.gson.Gson,);
Call(ATTRIBUTE,com.google.gson.functional.JavaUtilTest,testCurrency --> gson,com.google.gson.Gson,READ);
EndClass 112
StartClass 113
Class(com.google.gson.functional.CurrencyHolder,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 113
StartClass 114
Class(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,N,N,Public);
Method(testJsonAdapterInvoked,void,Public,N,N);
Method(testJsonAdapterFactoryInvoked,void,Public,N,N);
Method(testRegisteredAdapterOverridesJsonAdapter,void,Public,N,N);
Method(write,void,Public,N,N);
Method(read,com.google.gson.functional.A,Public,N,N);
Method(testRegisteredSerializerOverridesJsonAdapter,void,Public,N,N);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(testRegisteredDeserializerOverridesJsonAdapter,void,Public,N,N);
Method(deserialize,com.google.gson.functional.A,Public,N,N);
Method(testIncorrectTypeAdapterFails,void,Public,N,N);
Method(testSuperclassTypeAdapterNotInvoked,void,Public,N,N);
Method(testNullSafeObjectFromJson,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.functional.A,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(serialize,com.google.gson.functional.A,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,testJsonAdapterInvoked --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,testJsonAdapterInvoked --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,testJsonAdapterInvoked --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,testJsonAdapterInvoked --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,testJsonAdapterInvoked --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,testJsonAdapterInvoked --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,testJsonAdapterInvoked --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,testJsonAdapterInvoked --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,testJsonAdapterInvoked --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,testJsonAdapterInvoked --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,testJsonAdapterInvoked --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,testJsonAdapterFactoryInvoked --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,testJsonAdapterFactoryInvoked --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,testJsonAdapterFactoryInvoked --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,testJsonAdapterFactoryInvoked --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,write --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,read --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,read --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,read --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,read --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,read --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,serialize --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,serialize --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,serialize --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,serialize --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,serialize --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,serialize --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,deserialize --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,deserialize --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,deserialize --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,deserialize --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,deserialize --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,deserialize --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,testIncorrectTypeAdapterFails --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,testIncorrectTypeAdapterFails --> fail,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,testSuperclassTypeAdapterNotInvoked --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,testSuperclassTypeAdapterNotInvoked --> assertFalse,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,testSuperclassTypeAdapterNotInvoked --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,testNullSafeObjectFromJson --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,testNullSafeObjectFromJson --> assertNull,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest,);
EndClass 114
StartClass 115
Class(com.google.gson.functional.A,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B);
EndClass 115
StartClass 116
Class(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B,N,N,Private);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.lang.String,);
SuperClass(com.google.gson.functional.A);
Generalization(com.google.gson.functional.A);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B,<init> --> super,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B,);
EndClass 116
StartClass 117
Class(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,N,N,Public);
Method(testClassAnnotationAdapterTakesPrecedenceOverDefault,void,Public,N,N);
Method(testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault,void,Public,N,N);
Method(testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter,void,Public,N,N);
Method(testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter,void,Public,N,N);
Method(write,void,Public,N,N);
Method(read,com.google.gson.functional.Part,Public,N,N);
Method(testFieldAnnotationTakesPrecedenceOverClassAnnotation,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.functional.Part,);
Parameter(read,com.google.gson.stream.JsonReader,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,testClassAnnotationAdapterTakesPrecedenceOverDefault --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,testClassAnnotationAdapterTakesPrecedenceOverDefault --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,testClassAnnotationAdapterTakesPrecedenceOverDefault --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,testClassAnnotationAdapterTakesPrecedenceOverDefault --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,read --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,read --> toJson,null,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,read --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,read --> fromJson,null,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,read --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,testFieldAnnotationTakesPrecedenceOverClassAnnotation --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,testFieldAnnotationTakesPrecedenceOverClassAnnotation --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,testFieldAnnotationTakesPrecedenceOverClassAnnotation --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,testFieldAnnotationTakesPrecedenceOverClassAnnotation --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest,);
EndClass 117
StartClass 118
Class(com.google.gson.functional.Part,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 118
StartClass 119
Class(com.google.gson.functional.JsonAdapterSerializerDeserializerTest,N,N,Public);
Method(testJsonSerializerDeserializerBasedJsonAdapterOnFields,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.functional.JsonAdapterSerializerDeserializerTest,testJsonSerializerDeserializerBasedJsonAdapterOnFields --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterSerializerDeserializerTest,testJsonSerializerDeserializerBasedJsonAdapterOnFields --> assertEquals,com.google.gson.functional.JsonAdapterSerializerDeserializerTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterSerializerDeserializerTest,testJsonSerializerDeserializerBasedJsonAdapterOnFields --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterSerializerDeserializerTest,testJsonSerializerDeserializerBasedJsonAdapterOnFields --> assertEquals,com.google.gson.functional.JsonAdapterSerializerDeserializerTest,);
Call(METHOD,com.google.gson.functional.JsonAdapterSerializerDeserializerTest,testJsonSerializerDeserializerBasedJsonAdapterOnFields --> assertEquals,com.google.gson.functional.JsonAdapterSerializerDeserializerTest,);
EndClass 119
StartClass 120
Class(com.google.gson.functional.JsonArrayTest,N,N,Public);
Method(testStringPrimitiveAddition,void,Public,N,N);
Method(testIntegerPrimitiveAddition,void,Public,N,N);
Method(testDoublePrimitiveAddition,void,Public,N,N);
Method(testBooleanPrimitiveAddition,void,Public,N,N);
Method(testCharPrimitiveAddition,void,Public,N,N);
Method(testMixedPrimitiveAddition,void,Public,N,N);
Method(testNullPrimitiveAddition,void,Public,N,N);
Method(testSameAddition,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testStringPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testStringPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testStringPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testStringPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testStringPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testStringPrimitiveAddition --> assertEquals,com.google.gson.functional.JsonArrayTest,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testStringPrimitiveAddition --> toString,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testIntegerPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testIntegerPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testIntegerPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testIntegerPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testIntegerPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testIntegerPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testIntegerPrimitiveAddition --> assertEquals,com.google.gson.functional.JsonArrayTest,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testIntegerPrimitiveAddition --> toString,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testDoublePrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testDoublePrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testDoublePrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testDoublePrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testDoublePrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testDoublePrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testDoublePrimitiveAddition --> assertEquals,com.google.gson.functional.JsonArrayTest,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testDoublePrimitiveAddition --> toString,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testBooleanPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testBooleanPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testBooleanPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testBooleanPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testBooleanPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testBooleanPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testBooleanPrimitiveAddition --> assertEquals,com.google.gson.functional.JsonArrayTest,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testBooleanPrimitiveAddition --> toString,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testCharPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testCharPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testCharPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testCharPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testCharPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testCharPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testCharPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testCharPrimitiveAddition --> assertEquals,com.google.gson.functional.JsonArrayTest,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testCharPrimitiveAddition --> toString,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testMixedPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testMixedPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testMixedPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testMixedPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testMixedPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testMixedPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testMixedPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testMixedPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testMixedPrimitiveAddition --> valueOf,null,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testMixedPrimitiveAddition --> assertEquals,com.google.gson.functional.JsonArrayTest,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testMixedPrimitiveAddition --> toString,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testNullPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testNullPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testNullPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testNullPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testNullPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testNullPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testNullPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testNullPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testNullPrimitiveAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testNullPrimitiveAddition --> assertEquals,com.google.gson.functional.JsonArrayTest,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testNullPrimitiveAddition --> toString,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testSameAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testSameAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testSameAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testSameAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testSameAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testSameAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testSameAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testSameAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testSameAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testSameAddition --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testSameAddition --> assertEquals,com.google.gson.functional.JsonArrayTest,);
Call(METHOD,com.google.gson.functional.JsonArrayTest,testSameAddition --> toString,com.google.gson.JsonArray,);
EndClass 120
StartClass 121
Class(com.google.gson.functional.JsonParserTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testParseInvalidJson,void,Public,N,N);
Method(testDeserializingCustomTree,void,Public,N,N);
Method(testBadTypeForDeserializingCustomTree,void,Public,N,N);
Method(testBadFieldTypeForCustomDeserializerCustomTree,void,Public,N,N);
Method(testBadFieldTypeForDeserializingCustomTree,void,Public,N,N);
Method(testChangingCustomTreeAndDeserializing,void,Public,N,N);
Method(testExtraCommasInArrays,void,Public,N,N);
Method(testExtraCommasInMaps,void,Public,N,N);
Method(list,java.util.List,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.JsonParserTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.JsonParserTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.JsonParserTest,testParseInvalidJson --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testParseInvalidJson --> fail,com.google.gson.functional.JsonParserTest,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testDeserializingCustomTree --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testDeserializingCustomTree --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testDeserializingCustomTree --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testDeserializingCustomTree --> assertEquals,com.google.gson.functional.JsonParserTest,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testDeserializingCustomTree --> assertEquals,com.google.gson.functional.JsonParserTest,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testBadTypeForDeserializingCustomTree --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testBadTypeForDeserializingCustomTree --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testBadTypeForDeserializingCustomTree --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testBadTypeForDeserializingCustomTree --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testBadTypeForDeserializingCustomTree --> fail,com.google.gson.functional.JsonParserTest,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testBadFieldTypeForCustomDeserializerCustomTree --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testBadFieldTypeForCustomDeserializerCustomTree --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testBadFieldTypeForCustomDeserializerCustomTree --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testBadFieldTypeForCustomDeserializerCustomTree --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testBadFieldTypeForCustomDeserializerCustomTree --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testBadFieldTypeForCustomDeserializerCustomTree --> fail,com.google.gson.functional.JsonParserTest,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testBadFieldTypeForDeserializingCustomTree --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testBadFieldTypeForDeserializingCustomTree --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testBadFieldTypeForDeserializingCustomTree --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testBadFieldTypeForDeserializingCustomTree --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testBadFieldTypeForDeserializingCustomTree --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testBadFieldTypeForDeserializingCustomTree --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testBadFieldTypeForDeserializingCustomTree --> fail,com.google.gson.functional.JsonParserTest,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testChangingCustomTreeAndDeserializing --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testChangingCustomTreeAndDeserializing --> remove,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testChangingCustomTreeAndDeserializing --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testChangingCustomTreeAndDeserializing --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testChangingCustomTreeAndDeserializing --> assertEquals,com.google.gson.functional.JsonParserTest,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testChangingCustomTreeAndDeserializing --> assertEquals,com.google.gson.functional.JsonParserTest,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testChangingCustomTreeAndDeserializing --> assertEquals,com.google.gson.functional.JsonParserTest,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testExtraCommasInArrays --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testExtraCommasInArrays --> assertEquals,com.google.gson.functional.JsonParserTest,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testExtraCommasInArrays --> list,com.google.gson.functional.JsonParserTest,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testExtraCommasInArrays --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testExtraCommasInArrays --> assertEquals,com.google.gson.functional.JsonParserTest,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testExtraCommasInArrays --> list,com.google.gson.functional.JsonParserTest,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testExtraCommasInArrays --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testExtraCommasInArrays --> assertEquals,com.google.gson.functional.JsonParserTest,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testExtraCommasInArrays --> list,com.google.gson.functional.JsonParserTest,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testExtraCommasInArrays --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testExtraCommasInMaps --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testExtraCommasInMaps --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonParserTest,testExtraCommasInMaps --> fail,com.google.gson.functional.JsonParserTest,);
Call(METHOD,com.google.gson.functional.JsonParserTest,list --> asList,null,);
EndClass 121
StartClass 122
Class(com.google.gson.JsonParser,N,N,Public);
Method(parse,com.google.gson.JsonElement,Public,N,N);
Method(parse$2,com.google.gson.JsonElement,Public,N,N);
Method(parse$3,com.google.gson.JsonElement,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(parse,java.lang.String,);
Parameter(parse$2,java.io.Reader,);
Parameter(parse$3,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.JsonParser,parse --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.JsonParser,parse$2 --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.JsonParser,parse$2 --> isJsonNull,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParser,parse$2 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.JsonParser,parse$3 --> isLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.JsonParser,parse$3 --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.JsonParser,parse$3 --> parse,null,);
Call(METHOD,com.google.gson.JsonParser,parse$3 --> setLenient,com.google.gson.stream.JsonReader,);
EndClass 122
StartClass 123
Class(com.google.gson.functional.JsonTreeTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testToJsonTree,void,Public,N,N);
Method(testToJsonTreeObjectType,void,Public,N,N);
Method(testJsonTreeToString,void,Public,N,N);
Method(testJsonTreeNull,void,Public,N,N);
Method(assertContains,void,Private,N,N);
Method(<init>,void,Public,N,N);
Parameter(assertContains,com.google.gson.JsonObject,);
Parameter(assertContains,com.google.gson.JsonPrimitive,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.JsonTreeTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.JsonTreeTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testToJsonTree --> toJsonTree,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testToJsonTree --> assertTrue,com.google.gson.functional.JsonTreeTest,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testToJsonTree --> isJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testToJsonTree --> getAsJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testToJsonTree --> entrySet,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testToJsonTree --> assertEquals,com.google.gson.functional.JsonTreeTest,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testToJsonTree --> size,java.util.Set,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testToJsonTree --> assertContains,com.google.gson.functional.JsonTreeTest,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testToJsonTree --> assertContains,com.google.gson.functional.JsonTreeTest,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testToJsonTree --> assertContains,com.google.gson.functional.JsonTreeTest,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testToJsonTree --> assertContains,com.google.gson.functional.JsonTreeTest,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testToJsonTreeObjectType --> toJsonTree,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testToJsonTreeObjectType --> assertTrue,com.google.gson.functional.JsonTreeTest,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testToJsonTreeObjectType --> isJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testToJsonTreeObjectType --> getAsJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testToJsonTreeObjectType --> entrySet,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testToJsonTreeObjectType --> assertEquals,com.google.gson.functional.JsonTreeTest,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testToJsonTreeObjectType --> size,java.util.Set,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testToJsonTreeObjectType --> assertContains,com.google.gson.functional.JsonTreeTest,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testToJsonTreeObjectType --> assertContains,com.google.gson.functional.JsonTreeTest,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testToJsonTreeObjectType --> assertContains,com.google.gson.functional.JsonTreeTest,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testToJsonTreeObjectType --> assertContains,com.google.gson.functional.JsonTreeTest,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testJsonTreeToString --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testJsonTreeToString --> toJsonTree,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testJsonTreeToString --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testJsonTreeToString --> assertEquals,com.google.gson.functional.JsonTreeTest,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testJsonTreeNull --> toJsonTree,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testJsonTreeNull --> assertFalse,com.google.gson.functional.JsonTreeTest,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,testJsonTreeNull --> has,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,assertContains --> entrySet,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,assertContains --> getValue,null,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,assertContains --> isJsonPrimitive,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,assertContains --> getAsJsonPrimitive,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,assertContains --> equals,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.JsonTreeTest,assertContains --> fail,com.google.gson.functional.JsonTreeTest,);
EndClass 123
StartClass 124
Class(com.google.gson.functional.LeniencyTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testLenientFromJson,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.LeniencyTest,setUp --> setUp,null,);
Call(METHOD,com.google.gson.functional.LeniencyTest,setUp --> setLenient,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.LeniencyTest,setUp --> create,com.google.gson.GsonBuilder,);
Call(ATTRIBUTE,com.google.gson.functional.LeniencyTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.LeniencyTest,testLenientFromJson --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.LeniencyTest,testLenientFromJson --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.LeniencyTest,testLenientFromJson --> assertEquals,com.google.gson.functional.LeniencyTest,);
Call(METHOD,com.google.gson.functional.LeniencyTest,testLenientFromJson --> singletonList,com.google.gson.functional.LeniencyTest,);
EndClass 124
StartClass 125
Class(com.google.gson.functional.MapAsArrayTypeAdapterTest,N,N,Public);
Method(testSerializeComplexMapWithTypeAdapter,void,Public,N,N);
Method(disabled_testTwoTypesCollapseToOneSerialize,void,Public,N,N);
Method(testTwoTypesCollapseToOneDeserialize,void,Public,N,N);
Method(testMultipleEnableComplexKeyRegistrationHasNoEffect,void,Public,N,N);
Method(testMapWithTypeVariableSerialization,void,Public,N,N);
Method(testMapWithTypeVariableDeserialization,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testSerializeComplexMapWithTypeAdapter --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testSerializeComplexMapWithTypeAdapter --> enableComplexMapKeySerialization,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testSerializeComplexMapWithTypeAdapter --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testSerializeComplexMapWithTypeAdapter --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testSerializeComplexMapWithTypeAdapter --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testSerializeComplexMapWithTypeAdapter --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testSerializeComplexMapWithTypeAdapter --> assertEquals,com.google.gson.functional.MapAsArrayTypeAdapterTest,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testSerializeComplexMapWithTypeAdapter --> assertEquals,com.google.gson.functional.MapAsArrayTypeAdapterTest,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testSerializeComplexMapWithTypeAdapter --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testSerializeComplexMapWithTypeAdapter --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testSerializeComplexMapWithTypeAdapter --> assertEquals,com.google.gson.functional.MapAsArrayTypeAdapterTest,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testSerializeComplexMapWithTypeAdapter --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testSerializeComplexMapWithTypeAdapter --> assertEquals,com.google.gson.functional.MapAsArrayTypeAdapterTest,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testSerializeComplexMapWithTypeAdapter --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testSerializeComplexMapWithTypeAdapter --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testSerializeComplexMapWithTypeAdapter --> assertEquals,com.google.gson.functional.MapAsArrayTypeAdapterTest,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testSerializeComplexMapWithTypeAdapter --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,disabled_testTwoTypesCollapseToOneSerialize --> enableComplexMapKeySerialization,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,disabled_testTwoTypesCollapseToOneSerialize --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,disabled_testTwoTypesCollapseToOneSerialize --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,disabled_testTwoTypesCollapseToOneSerialize --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,disabled_testTwoTypesCollapseToOneSerialize --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,disabled_testTwoTypesCollapseToOneSerialize --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,disabled_testTwoTypesCollapseToOneSerialize --> fail,com.google.gson.functional.MapAsArrayTypeAdapterTest,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testTwoTypesCollapseToOneDeserialize --> enableComplexMapKeySerialization,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testTwoTypesCollapseToOneDeserialize --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testTwoTypesCollapseToOneDeserialize --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testTwoTypesCollapseToOneDeserialize --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testTwoTypesCollapseToOneDeserialize --> fail,com.google.gson.functional.MapAsArrayTypeAdapterTest,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMultipleEnableComplexKeyRegistrationHasNoEffect --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMultipleEnableComplexKeyRegistrationHasNoEffect --> enableComplexMapKeySerialization,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMultipleEnableComplexKeyRegistrationHasNoEffect --> enableComplexMapKeySerialization,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMultipleEnableComplexKeyRegistrationHasNoEffect --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMultipleEnableComplexKeyRegistrationHasNoEffect --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMultipleEnableComplexKeyRegistrationHasNoEffect --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMultipleEnableComplexKeyRegistrationHasNoEffect --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMultipleEnableComplexKeyRegistrationHasNoEffect --> assertEquals,com.google.gson.functional.MapAsArrayTypeAdapterTest,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMultipleEnableComplexKeyRegistrationHasNoEffect --> assertEquals,com.google.gson.functional.MapAsArrayTypeAdapterTest,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMapWithTypeVariableSerialization --> enableComplexMapKeySerialization,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMapWithTypeVariableSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMapWithTypeVariableSerialization --> put,com.google.gson.functional.PointWithProperty,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMapWithTypeVariableSerialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMapWithTypeVariableSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMapWithTypeVariableSerialization --> assertEquals,com.google.gson.functional.MapAsArrayTypeAdapterTest,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMapWithTypeVariableDeserialization --> enableComplexMapKeySerialization,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMapWithTypeVariableDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMapWithTypeVariableDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMapWithTypeVariableDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMapWithTypeVariableDeserialization --> keySet,com.google.gson.functional.PointWithProperty,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMapWithTypeVariableDeserialization --> iterator,com.google.gson.functional.PointWithProperty,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMapWithTypeVariableDeserialization --> next,com.google.gson.functional.PointWithProperty,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMapWithTypeVariableDeserialization --> values,com.google.gson.functional.PointWithProperty,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMapWithTypeVariableDeserialization --> iterator,com.google.gson.functional.PointWithProperty,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMapWithTypeVariableDeserialization --> next,com.google.gson.functional.PointWithProperty,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMapWithTypeVariableDeserialization --> assertEquals,com.google.gson.functional.MapAsArrayTypeAdapterTest,);
Call(METHOD,com.google.gson.functional.MapAsArrayTypeAdapterTest,testMapWithTypeVariableDeserialization --> assertEquals,com.google.gson.functional.MapAsArrayTypeAdapterTest,);
EndClass 125
StartClass 126
Class(com.google.gson.functional.MapTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testMapSerialization,void,Public,N,N);
Method(testMapDeserialization,void,Public,N,N);
Method(testRawMapSerialization,void,Public,N,N);
Method(testMapSerializationEmpty,void,Public,N,N);
Method(testMapDeserializationEmpty,void,Public,N,N);
Method(testMapSerializationWithNullValue,void,Public,N,N);
Method(testMapDeserializationWithNullValue,void,Public,N,N);
Method(testMapSerializationWithNullValueButSerializeNulls,void,Public,N,N);
Method(testMapSerializationWithNullKey,void,Public,N,N);
Method(testMapDeserializationWithNullKey,void,Public,N,N);
Method(testMapSerializationWithIntegerKeys,void,Public,N,N);
Method(testMapDeserializationWithIntegerKeys,void,Public,N,N);
Method(testMapDeserializationWithUnquotedIntegerKeys,void,Public,N,N);
Method(testMapDeserializationWithLongKeys,void,Public,N,N);
Method(testMapDeserializationWithUnquotedLongKeys,void,Public,N,N);
Method(testHashMapDeserialization,void,Public,N,N);
Method(testSortedMap,void,Public,N,N);
Method(testConcurrentMap,void,Public,N,N);
Method(testConcurrentHashMap,void,Public,N,N);
Method(testConcurrentNavigableMap,void,Public,N,N);
Method(testConcurrentSkipListMap,void,Public,N,N);
Method(testParameterizedMapSubclassSerialization,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.MapTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.MapTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerialization --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerialization --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerialization --> assertTrue,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerialization --> assertTrue,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserialization --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserialization --> get,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserialization --> intValue,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserialization --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserialization --> get,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserialization --> intValue,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testRawMapSerialization --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testRawMapSerialization --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testRawMapSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testRawMapSerialization --> assertTrue,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testRawMapSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.MapTest,testRawMapSerialization --> assertTrue,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testRawMapSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerializationEmpty --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerializationEmpty --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerializationEmpty --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationEmpty --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationEmpty --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationEmpty --> assertTrue,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationEmpty --> isEmpty,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerializationWithNullValue --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerializationWithNullValue --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerializationWithNullValue --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerializationWithNullValue --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithNullValue --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithNullValue --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithNullValue --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithNullValue --> size,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithNullValue --> assertNull,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithNullValue --> get,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerializationWithNullValueButSerializeNulls --> serializeNulls,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerializationWithNullValueButSerializeNulls --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerializationWithNullValueButSerializeNulls --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerializationWithNullValueButSerializeNulls --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerializationWithNullValueButSerializeNulls --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerializationWithNullValueButSerializeNulls --> assertEquals,com.google.gson.functional.MapTest,);
Call(ATTRIBUTE,com.google.gson.functional.MapTest,testMapSerializationWithNullValueButSerializeNulls --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerializationWithNullKey --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerializationWithNullKey --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerializationWithNullKey --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerializationWithNullKey --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithNullKey --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithNullKey --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithNullKey --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithNullKey --> size,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithNullKey --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithNullKey --> get,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithNullKey --> intValue,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithNullKey --> assertNull,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithNullKey --> get,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithNullKey --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithNullKey --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithNullKey --> size,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithNullKey --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithNullKey --> get,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithNullKey --> intValue,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithNullKey --> assertNull,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithNullKey --> get,java.util.Map,);
Call(ATTRIBUTE,com.google.gson.functional.MapTest,testMapDeserializationWithNullKey --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerializationWithIntegerKeys --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerializationWithIntegerKeys --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerializationWithIntegerKeys --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testMapSerializationWithIntegerKeys --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithIntegerKeys --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithIntegerKeys --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithIntegerKeys --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithIntegerKeys --> size,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithIntegerKeys --> assertTrue,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithIntegerKeys --> containsKey,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithIntegerKeys --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithIntegerKeys --> get,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithUnquotedIntegerKeys --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithUnquotedIntegerKeys --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithUnquotedIntegerKeys --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithUnquotedIntegerKeys --> size,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithUnquotedIntegerKeys --> assertTrue,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithUnquotedIntegerKeys --> containsKey,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithUnquotedIntegerKeys --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithUnquotedIntegerKeys --> get,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithLongKeys --> format,null,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithLongKeys --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithLongKeys --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithLongKeys --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithLongKeys --> size,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithLongKeys --> assertTrue,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithLongKeys --> containsKey,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithLongKeys --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithLongKeys --> get,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithUnquotedLongKeys --> format,null,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithUnquotedLongKeys --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithUnquotedLongKeys --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithUnquotedLongKeys --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithUnquotedLongKeys --> size,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithUnquotedLongKeys --> assertTrue,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithUnquotedLongKeys --> containsKey,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithUnquotedLongKeys --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testMapDeserializationWithUnquotedLongKeys --> get,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest,testHashMapDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest,testHashMapDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testHashMapDeserialization --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testHashMapDeserialization --> size,java.util.HashMap,);
Call(METHOD,com.google.gson.functional.MapTest,testHashMapDeserialization --> assertTrue,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testHashMapDeserialization --> containsKey,java.util.HashMap,);
Call(METHOD,com.google.gson.functional.MapTest,testHashMapDeserialization --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testHashMapDeserialization --> get,java.util.HashMap,);
Call(METHOD,com.google.gson.functional.MapTest,testSortedMap --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest,testSortedMap --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testSortedMap --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testSortedMap --> size,java.util.SortedMap,);
Call(METHOD,com.google.gson.functional.MapTest,testSortedMap --> assertTrue,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testSortedMap --> containsKey,java.util.SortedMap,);
Call(METHOD,com.google.gson.functional.MapTest,testSortedMap --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testSortedMap --> get,java.util.SortedMap,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentMap --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentMap --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentMap --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentMap --> size,java.util.concurrent.ConcurrentMap,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentMap --> assertTrue,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentMap --> containsKey,java.util.concurrent.ConcurrentMap,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentMap --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentMap --> get,java.util.concurrent.ConcurrentMap,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentMap --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentMap --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentHashMap --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentHashMap --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentHashMap --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentHashMap --> size,java.util.concurrent.ConcurrentHashMap,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentHashMap --> assertTrue,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentHashMap --> containsKey,java.util.concurrent.ConcurrentHashMap,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentHashMap --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentHashMap --> get,java.util.concurrent.ConcurrentHashMap,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentHashMap --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentHashMap --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentNavigableMap --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentNavigableMap --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentNavigableMap --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentNavigableMap --> size,java.util.concurrent.ConcurrentNavigableMap,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentNavigableMap --> assertTrue,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentNavigableMap --> containsKey,java.util.concurrent.ConcurrentNavigableMap,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentNavigableMap --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentNavigableMap --> get,java.util.concurrent.ConcurrentNavigableMap,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentNavigableMap --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentNavigableMap --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentSkipListMap --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentSkipListMap --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentSkipListMap --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentSkipListMap --> size,java.util.concurrent.ConcurrentSkipListMap,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentSkipListMap --> assertTrue,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentSkipListMap --> containsKey,java.util.concurrent.ConcurrentSkipListMap,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentSkipListMap --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentSkipListMap --> get,java.util.concurrent.ConcurrentSkipListMap,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentSkipListMap --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testConcurrentSkipListMap --> assertEquals,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testParameterizedMapSubclassSerialization --> put,com.google.gson.functional.MyParameterizedMap,);
Call(METHOD,com.google.gson.functional.MapTest,testParameterizedMapSubclassSerialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest,testParameterizedMapSubclassSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest,testParameterizedMapSubclassSerialization --> assertTrue,com.google.gson.functional.MapTest,);
Call(METHOD,com.google.gson.functional.MapTest,testParameterizedMapSubclassSerialization --> contains,java.lang.String,);
EndClass 126
StartClass 127
Class(com.google.gson.functional.MoreSpecificTypeSerializationTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testSubclassFields,void,Public,N,N);
Method(testListOfSubclassFields,void,Public,N,N);
Method(testMapOfSubclassFields,void,Public,N,N);
Method(testParameterizedSubclassFields,void,Public,N,N);
Method(testListOfParameterizedSubclassFields,void,Public,N,N);
Method(testMapOfParameterizedSubclassFields,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.MoreSpecificTypeSerializationTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testSubclassFields --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testSubclassFields --> assertTrue,com.google.gson.functional.MoreSpecificTypeSerializationTest,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testSubclassFields --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testSubclassFields --> assertTrue,com.google.gson.functional.MoreSpecificTypeSerializationTest,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testSubclassFields --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testListOfSubclassFields --> add,java.util.Collection,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testListOfSubclassFields --> add,java.util.Collection,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testListOfSubclassFields --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testListOfSubclassFields --> assertTrue,com.google.gson.functional.MoreSpecificTypeSerializationTest,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testListOfSubclassFields --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testListOfSubclassFields --> assertTrue,com.google.gson.functional.MoreSpecificTypeSerializationTest,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testListOfSubclassFields --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfSubclassFields --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfSubclassFields --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfSubclassFields --> toJsonTree,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfSubclassFields --> getAsJsonObject,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfSubclassFields --> get,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfSubclassFields --> getAsJsonObject,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfSubclassFields --> assertEquals,com.google.gson.functional.MoreSpecificTypeSerializationTest,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfSubclassFields --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfSubclassFields --> getAsJsonObject,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfSubclassFields --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfSubclassFields --> getAsInt,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfSubclassFields --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfSubclassFields --> getAsJsonObject,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfSubclassFields --> assertEquals,com.google.gson.functional.MoreSpecificTypeSerializationTest,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfSubclassFields --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfSubclassFields --> getAsInt,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfSubclassFields --> assertEquals,com.google.gson.functional.MoreSpecificTypeSerializationTest,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfSubclassFields --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfSubclassFields --> getAsInt,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testParameterizedSubclassFields --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testParameterizedSubclassFields --> assertTrue,com.google.gson.functional.MoreSpecificTypeSerializationTest,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testParameterizedSubclassFields --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testParameterizedSubclassFields --> assertFalse,com.google.gson.functional.MoreSpecificTypeSerializationTest,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testParameterizedSubclassFields --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testListOfParameterizedSubclassFields --> add,java.util.Collection,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testListOfParameterizedSubclassFields --> add,java.util.Collection,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testListOfParameterizedSubclassFields --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testListOfParameterizedSubclassFields --> assertTrue,com.google.gson.functional.MoreSpecificTypeSerializationTest,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testListOfParameterizedSubclassFields --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testListOfParameterizedSubclassFields --> assertFalse,com.google.gson.functional.MoreSpecificTypeSerializationTest,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testListOfParameterizedSubclassFields --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfParameterizedSubclassFields --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfParameterizedSubclassFields --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfParameterizedSubclassFields --> toJsonTree,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfParameterizedSubclassFields --> getAsJsonObject,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfParameterizedSubclassFields --> get,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfParameterizedSubclassFields --> getAsJsonObject,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfParameterizedSubclassFields --> assertEquals,com.google.gson.functional.MoreSpecificTypeSerializationTest,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfParameterizedSubclassFields --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfParameterizedSubclassFields --> getAsJsonObject,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfParameterizedSubclassFields --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfParameterizedSubclassFields --> getAsString,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfParameterizedSubclassFields --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfParameterizedSubclassFields --> getAsJsonObject,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfParameterizedSubclassFields --> assertEquals,com.google.gson.functional.MoreSpecificTypeSerializationTest,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfParameterizedSubclassFields --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfParameterizedSubclassFields --> getAsString,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfParameterizedSubclassFields --> assertNull,com.google.gson.functional.MoreSpecificTypeSerializationTest,);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest,testMapOfParameterizedSubclassFields --> get,com.google.gson.JsonObject,);
EndClass 127
StartClass 128
Class(com.google.gson.functional.NamingPolicyTest,N,N,Public);
Attribute(builder,com.google.gson.GsonBuilder,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testGsonWithNonDefaultFieldNamingPolicySerialization,void,Public,N,N);
Method(testGsonWithNonDefaultFieldNamingPolicyDeserialiation,void,Public,N,N);
Method(testGsonWithLowerCaseDashPolicySerialization,void,Public,N,N);
Method(testGsonWithLowerCaseDotPolicySerialization,void,Public,N,N);
Method(testGsonWithLowerCaseDotPolicyDeserialiation,void,Public,N,N);
Method(testGsonWithLowerCaseDashPolicyDeserialiation,void,Public,N,N);
Method(testGsonWithLowerCaseUnderscorePolicySerialization,void,Public,N,N);
Method(testGsonWithLowerCaseUnderscorePolicyDeserialiation,void,Public,N,N);
Method(testGsonWithSerializedNameFieldNamingPolicySerialization,void,Public,N,N);
Method(testGsonWithSerializedNameFieldNamingPolicyDeserialization,void,Public,N,N);
Method(testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization,void,Public,N,N);
Method(testGsonWithUpperCamelCaseSpacesPolicySerialiation,void,Public,N,N);
Method(testGsonWithUpperCamelCaseSpacesPolicyDeserialiation,void,Public,N,N);
Method(testDeprecatedNamingStrategy,void,Public,N,N);
Method(testComplexFieldNameStrategy,void,Public,N,N);
Method(testAtSignInSerializedName,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.GsonBuilder);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.NamingPolicyTest,setUp --> builder,com.google.gson.GsonBuilder,WRITE);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithNonDefaultFieldNamingPolicySerialization --> setFieldNamingPolicy,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithNonDefaultFieldNamingPolicySerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithNonDefaultFieldNamingPolicySerialization --> assertEquals,com.google.gson.functional.NamingPolicyTest,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithNonDefaultFieldNamingPolicySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithNonDefaultFieldNamingPolicyDeserialiation --> setFieldNamingPolicy,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithNonDefaultFieldNamingPolicyDeserialiation --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithNonDefaultFieldNamingPolicyDeserialiation --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithNonDefaultFieldNamingPolicyDeserialiation --> assertEquals,com.google.gson.functional.NamingPolicyTest,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithLowerCaseDashPolicySerialization --> setFieldNamingPolicy,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithLowerCaseDashPolicySerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithLowerCaseDashPolicySerialization --> assertEquals,com.google.gson.functional.NamingPolicyTest,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithLowerCaseDashPolicySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithLowerCaseDotPolicySerialization --> setFieldNamingPolicy,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithLowerCaseDotPolicySerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithLowerCaseDotPolicySerialization --> assertEquals,com.google.gson.functional.NamingPolicyTest,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithLowerCaseDotPolicySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithLowerCaseDotPolicyDeserialiation --> setFieldNamingPolicy,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithLowerCaseDotPolicyDeserialiation --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithLowerCaseDotPolicyDeserialiation --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithLowerCaseDotPolicyDeserialiation --> assertEquals,com.google.gson.functional.NamingPolicyTest,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithLowerCaseDashPolicyDeserialiation --> setFieldNamingPolicy,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithLowerCaseDashPolicyDeserialiation --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithLowerCaseDashPolicyDeserialiation --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithLowerCaseDashPolicyDeserialiation --> assertEquals,com.google.gson.functional.NamingPolicyTest,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithLowerCaseUnderscorePolicySerialization --> setFieldNamingPolicy,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithLowerCaseUnderscorePolicySerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithLowerCaseUnderscorePolicySerialization --> assertEquals,com.google.gson.functional.NamingPolicyTest,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithLowerCaseUnderscorePolicySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithLowerCaseUnderscorePolicyDeserialiation --> setFieldNamingPolicy,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithLowerCaseUnderscorePolicyDeserialiation --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithLowerCaseUnderscorePolicyDeserialiation --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithLowerCaseUnderscorePolicyDeserialiation --> assertEquals,com.google.gson.functional.NamingPolicyTest,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithSerializedNameFieldNamingPolicySerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithSerializedNameFieldNamingPolicySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithSerializedNameFieldNamingPolicySerialization --> assertEquals,com.google.gson.functional.NamingPolicyTest,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithSerializedNameFieldNamingPolicySerialization --> getExpectedJson,com.google.gson.common.TestTypes.ClassWithSerializedNameFields,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithSerializedNameFieldNamingPolicyDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithSerializedNameFieldNamingPolicyDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithSerializedNameFieldNamingPolicyDeserialization --> getExpectedJson,com.google.gson.common.TestTypes.ClassWithSerializedNameFields,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithSerializedNameFieldNamingPolicyDeserialization --> assertEquals,com.google.gson.functional.NamingPolicyTest,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization --> fail,com.google.gson.functional.NamingPolicyTest,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithUpperCamelCaseSpacesPolicySerialiation --> setFieldNamingPolicy,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithUpperCamelCaseSpacesPolicySerialiation --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithUpperCamelCaseSpacesPolicySerialiation --> assertEquals,com.google.gson.functional.NamingPolicyTest,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithUpperCamelCaseSpacesPolicySerialiation --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithUpperCamelCaseSpacesPolicyDeserialiation --> setFieldNamingPolicy,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithUpperCamelCaseSpacesPolicyDeserialiation --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithUpperCamelCaseSpacesPolicyDeserialiation --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testGsonWithUpperCamelCaseSpacesPolicyDeserialiation --> assertEquals,com.google.gson.functional.NamingPolicyTest,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testDeprecatedNamingStrategy --> setFieldNamingStrategy,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testDeprecatedNamingStrategy --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testDeprecatedNamingStrategy --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testDeprecatedNamingStrategy --> assertEquals,com.google.gson.functional.NamingPolicyTest,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testComplexFieldNameStrategy --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testComplexFieldNameStrategy --> assertEquals,com.google.gson.functional.NamingPolicyTest,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testComplexFieldNameStrategy --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testComplexFieldNameStrategy --> assertEquals,com.google.gson.functional.NamingPolicyTest,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testAtSignInSerializedName --> assertEquals,com.google.gson.functional.NamingPolicyTest,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest,testAtSignInSerializedName --> toJson,com.google.gson.Gson,);
EndClass 128
StartClass 129
Class(com.google.gson.functional.NullObjectAndFieldTest,N,N,Public);
Attribute(gsonBuilder,com.google.gson.GsonBuilder,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testTopLevelNullObjectSerialization,void,Public,N,N);
Method(testTopLevelNullObjectDeserialization,void,Public,N,N);
Method(testExplicitSerializationOfNulls,void,Public,N,N);
Method(testExplicitDeserializationOfNulls,void,Public,N,N);
Method(testExplicitSerializationOfNullArrayMembers,void,Public,N,N);
Method(testNullWrappedPrimitiveMemberSerialization,void,Public,N,N);
Method(testNullWrappedPrimitiveMemberDeserialization,void,Public,N,N);
Method(testExplicitSerializationOfNullCollectionMembers,void,Public,N,N);
Method(testExplicitSerializationOfNullStringMembers,void,Public,N,N);
Method(testCustomSerializationOfNulls,void,Public,N,N);
Method(testPrintPrintingObjectWithNulls,void,Public,N,N);
Method(testPrintPrintingArraysWithNulls,void,Public,N,N);
Method(testAbsentJsonElementsAreSetToNull,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.GsonBuilder);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,setUp --> setUp,null,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,setUp --> serializeNulls,com.google.gson.GsonBuilder,);
Call(ATTRIBUTE,com.google.gson.functional.NullObjectAndFieldTest,setUp --> gsonBuilder,com.google.gson.GsonBuilder,WRITE);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testTopLevelNullObjectSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testTopLevelNullObjectSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testTopLevelNullObjectSerialization --> assertEquals,com.google.gson.functional.NullObjectAndFieldTest,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testTopLevelNullObjectSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testTopLevelNullObjectSerialization --> assertEquals,com.google.gson.functional.NullObjectAndFieldTest,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testTopLevelNullObjectDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testTopLevelNullObjectDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testTopLevelNullObjectDeserialization --> assertNull,com.google.gson.functional.NullObjectAndFieldTest,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testExplicitSerializationOfNulls --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testExplicitSerializationOfNulls --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testExplicitSerializationOfNulls --> assertEquals,com.google.gson.functional.NullObjectAndFieldTest,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testExplicitDeserializationOfNulls --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testExplicitDeserializationOfNulls --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testExplicitDeserializationOfNulls --> assertNull,com.google.gson.functional.NullObjectAndFieldTest,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testExplicitSerializationOfNullArrayMembers --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testExplicitSerializationOfNullArrayMembers --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testExplicitSerializationOfNullArrayMembers --> assertTrue,com.google.gson.functional.NullObjectAndFieldTest,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testExplicitSerializationOfNullArrayMembers --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testNullWrappedPrimitiveMemberSerialization --> serializeNulls,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testNullWrappedPrimitiveMemberSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testNullWrappedPrimitiveMemberSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testNullWrappedPrimitiveMemberSerialization --> assertTrue,com.google.gson.functional.NullObjectAndFieldTest,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testNullWrappedPrimitiveMemberSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testNullWrappedPrimitiveMemberDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testNullWrappedPrimitiveMemberDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testNullWrappedPrimitiveMemberDeserialization --> assertNull,com.google.gson.functional.NullObjectAndFieldTest,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testExplicitSerializationOfNullCollectionMembers --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testExplicitSerializationOfNullCollectionMembers --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testExplicitSerializationOfNullCollectionMembers --> assertTrue,com.google.gson.functional.NullObjectAndFieldTest,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testExplicitSerializationOfNullCollectionMembers --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testExplicitSerializationOfNullStringMembers --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testExplicitSerializationOfNullStringMembers --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testExplicitSerializationOfNullStringMembers --> assertTrue,com.google.gson.functional.NullObjectAndFieldTest,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testExplicitSerializationOfNullStringMembers --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testCustomSerializationOfNulls --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testCustomSerializationOfNulls --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testCustomSerializationOfNulls --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testCustomSerializationOfNulls --> assertEquals,com.google.gson.functional.NullObjectAndFieldTest,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testPrintPrintingObjectWithNulls --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testPrintPrintingObjectWithNulls --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testPrintPrintingObjectWithNulls --> assertEquals,com.google.gson.functional.NullObjectAndFieldTest,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testPrintPrintingObjectWithNulls --> serializeNulls,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testPrintPrintingObjectWithNulls --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testPrintPrintingObjectWithNulls --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testPrintPrintingObjectWithNulls --> assertTrue,com.google.gson.functional.NullObjectAndFieldTest,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testPrintPrintingObjectWithNulls --> contains,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.functional.NullObjectAndFieldTest,testPrintPrintingObjectWithNulls --> gsonBuilder,com.google.gson.GsonBuilder,WRITE);
Call(ATTRIBUTE,com.google.gson.functional.NullObjectAndFieldTest,testPrintPrintingObjectWithNulls --> gsonBuilder,com.google.gson.GsonBuilder,READ);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testPrintPrintingArraysWithNulls --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testPrintPrintingArraysWithNulls --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testPrintPrintingArraysWithNulls --> assertEquals,com.google.gson.functional.NullObjectAndFieldTest,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testPrintPrintingArraysWithNulls --> serializeNulls,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testPrintPrintingArraysWithNulls --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testPrintPrintingArraysWithNulls --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testPrintPrintingArraysWithNulls --> assertEquals,com.google.gson.functional.NullObjectAndFieldTest,);
Call(ATTRIBUTE,com.google.gson.functional.NullObjectAndFieldTest,testPrintPrintingArraysWithNulls --> gsonBuilder,com.google.gson.GsonBuilder,WRITE);
Call(ATTRIBUTE,com.google.gson.functional.NullObjectAndFieldTest,testPrintPrintingArraysWithNulls --> gsonBuilder,com.google.gson.GsonBuilder,READ);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testAbsentJsonElementsAreSetToNull --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testAbsentJsonElementsAreSetToNull --> assertTrue,com.google.gson.functional.NullObjectAndFieldTest,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testAbsentJsonElementsAreSetToNull --> assertEquals,com.google.gson.functional.NullObjectAndFieldTest,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testAbsentJsonElementsAreSetToNull --> assertNull,com.google.gson.functional.NullObjectAndFieldTest,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testAbsentJsonElementsAreSetToNull --> assertEquals,com.google.gson.functional.NullObjectAndFieldTest,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testAbsentJsonElementsAreSetToNull --> assertEquals,com.google.gson.functional.NullObjectAndFieldTest,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testAbsentJsonElementsAreSetToNull --> assertEquals,com.google.gson.functional.NullObjectAndFieldTest,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest,testAbsentJsonElementsAreSetToNull --> assertFalse,com.google.gson.functional.NullObjectAndFieldTest,);
EndClass 129
StartClass 130
Class(com.google.gson.functional.ObjectTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Attribute(oldTimeZone,java.util.TimeZone,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(tearDown,void,Protected,N,N);
Method(testJsonInSingleQuotesDeserialization,void,Public,N,N);
Method(testJsonInMixedQuotesDeserialization,void,Public,N,N);
Method(testBagOfPrimitivesSerialization,void,Public,N,N);
Method(testBagOfPrimitivesDeserialization,void,Public,N,N);
Method(testBagOfPrimitiveWrappersSerialization,void,Public,N,N);
Method(testBagOfPrimitiveWrappersDeserialization,void,Public,N,N);
Method(testClassWithTransientFieldsSerialization,void,Public,N,N);
Method(testClassWithTransientFieldsDeserialization,void,Public,N,N);
Method(testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored,void,Public,N,N);
Method(testClassWithNoFieldsSerialization,void,Public,N,N);
Method(testClassWithNoFieldsDeserialization,void,Public,N,N);
Method(testNestedSerialization,void,Public,N,N);
Method(testNestedDeserialization,void,Public,N,N);
Method(testNullSerialization,void,Public,N,N);
Method(testEmptyStringDeserialization,void,Public,N,N);
Method(testTruncatedDeserialization,void,Public,N,N);
Method(testNullDeserialization,void,Public,N,N);
Method(testNullFieldsSerialization,void,Public,N,N);
Method(testNullFieldsDeserialization,void,Public,N,N);
Method(testArrayOfObjectsSerialization,void,Public,N,N);
Method(testArrayOfObjectsDeserialization,void,Public,N,N);
Method(testArrayOfArraysSerialization,void,Public,N,N);
Method(testArrayOfArraysDeserialization,void,Public,N,N);
Method(testArrayOfObjectsAsFields,void,Public,N,N);
Method(testNullArraysDeserialization,void,Public,N,N);
Method(testNullObjectFieldsDeserialization,void,Public,N,N);
Method(testEmptyCollectionInAnObjectDeserialization,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.ObjectTest,setUp --> setUp,null,);
Call(METHOD,com.google.gson.functional.ObjectTest,setUp --> setDefault,null,);
Call(METHOD,com.google.gson.functional.ObjectTest,setUp --> getTimeZone,null,);
Call(METHOD,com.google.gson.functional.ObjectTest,setUp --> setDefault,null,);
Call(ATTRIBUTE,com.google.gson.functional.ObjectTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.ObjectTest,tearDown --> setDefault,null,);
Call(METHOD,com.google.gson.functional.ObjectTest,tearDown --> tearDown,null,);
Call(METHOD,com.google.gson.functional.ObjectTest,testJsonInSingleQuotesDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testJsonInSingleQuotesDeserialization --> assertEquals,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testJsonInSingleQuotesDeserialization --> assertEquals,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testJsonInSingleQuotesDeserialization --> assertEquals,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testJsonInMixedQuotesDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testJsonInMixedQuotesDeserialization --> assertEquals,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testJsonInMixedQuotesDeserialization --> assertEquals,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testJsonInMixedQuotesDeserialization --> assertEquals,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testBagOfPrimitivesSerialization --> assertEquals,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testBagOfPrimitivesSerialization --> getExpectedJson,com.google.gson.common.TestTypes.BagOfPrimitives,);
Call(METHOD,com.google.gson.functional.ObjectTest,testBagOfPrimitivesSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testBagOfPrimitivesDeserialization --> getExpectedJson,com.google.gson.common.TestTypes.BagOfPrimitives,);
Call(METHOD,com.google.gson.functional.ObjectTest,testBagOfPrimitivesDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testBagOfPrimitivesDeserialization --> assertEquals,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testBagOfPrimitivesDeserialization --> getExpectedJson,com.google.gson.common.TestTypes.BagOfPrimitives,);
Call(METHOD,com.google.gson.functional.ObjectTest,testBagOfPrimitiveWrappersSerialization --> assertEquals,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testBagOfPrimitiveWrappersSerialization --> getExpectedJson,com.google.gson.common.TestTypes.BagOfPrimitiveWrappers,);
Call(METHOD,com.google.gson.functional.ObjectTest,testBagOfPrimitiveWrappersSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testBagOfPrimitiveWrappersDeserialization --> getExpectedJson,com.google.gson.common.TestTypes.BagOfPrimitiveWrappers,);
Call(METHOD,com.google.gson.functional.ObjectTest,testBagOfPrimitiveWrappersDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testBagOfPrimitiveWrappersDeserialization --> assertEquals,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testBagOfPrimitiveWrappersDeserialization --> getExpectedJson,com.google.gson.common.TestTypes.BagOfPrimitiveWrappers,);
Call(ATTRIBUTE,com.google.gson.functional.ObjectTest,testBagOfPrimitiveWrappersDeserialization --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.ObjectTest,testClassWithTransientFieldsSerialization --> assertEquals,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testClassWithTransientFieldsSerialization --> getExpectedJson,com.google.gson.common.TestTypes.ClassWithTransientFields,);
Call(METHOD,com.google.gson.functional.ObjectTest,testClassWithTransientFieldsSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testClassWithTransientFieldsDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testClassWithTransientFieldsDeserialization --> assertEquals,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testClassWithTransientFieldsDeserialization --> getExpectedJson,com.google.gson.common.TestTypes.ClassWithTransientFields,);
Call(METHOD,com.google.gson.functional.ObjectTest,testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored --> assertFalse,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testClassWithNoFieldsSerialization --> assertEquals,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testClassWithNoFieldsSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testClassWithNoFieldsDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testClassWithNoFieldsDeserialization --> assertEquals,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testNestedSerialization --> assertEquals,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testNestedSerialization --> getExpectedJson,com.google.gson.common.TestTypes.Nested,);
Call(METHOD,com.google.gson.functional.ObjectTest,testNestedSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testNestedDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testNestedDeserialization --> assertEquals,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testNestedDeserialization --> getExpectedJson,com.google.gson.common.TestTypes.Nested,);
Call(METHOD,com.google.gson.functional.ObjectTest,testNullSerialization --> assertEquals,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testNullSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testEmptyStringDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testEmptyStringDeserialization --> assertNull,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testTruncatedDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testTruncatedDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.ObjectTest,testTruncatedDeserialization --> fail,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testNullDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testNullDeserialization --> assertNull,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testNullFieldsSerialization --> assertEquals,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testNullFieldsSerialization --> getExpectedJson,com.google.gson.common.TestTypes.Nested,);
Call(METHOD,com.google.gson.functional.ObjectTest,testNullFieldsSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testNullFieldsDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testNullFieldsDeserialization --> assertEquals,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testNullFieldsDeserialization --> getExpectedJson,com.google.gson.common.TestTypes.Nested,);
Call(METHOD,com.google.gson.functional.ObjectTest,testArrayOfObjectsSerialization --> assertEquals,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testArrayOfObjectsSerialization --> getExpectedJson,com.google.gson.common.TestTypes.ArrayOfObjects,);
Call(METHOD,com.google.gson.functional.ObjectTest,testArrayOfObjectsSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testArrayOfObjectsDeserialization --> getExpectedJson,com.google.gson.common.TestTypes.ArrayOfObjects,);
Call(METHOD,com.google.gson.functional.ObjectTest,testArrayOfObjectsDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testArrayOfObjectsDeserialization --> assertEquals,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testArrayOfObjectsDeserialization --> getExpectedJson,com.google.gson.common.TestTypes.ArrayOfObjects,);
Call(METHOD,com.google.gson.functional.ObjectTest,testArrayOfArraysSerialization --> assertEquals,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testArrayOfArraysSerialization --> getExpectedJson,com.google.gson.functional.ArrayOfArrays,);
Call(METHOD,com.google.gson.functional.ObjectTest,testArrayOfArraysSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testArrayOfArraysDeserialization --> getExpectedJson,com.google.gson.functional.ArrayOfArrays,);
Call(METHOD,com.google.gson.functional.ObjectTest,testArrayOfArraysDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testArrayOfArraysDeserialization --> assertEquals,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testArrayOfArraysDeserialization --> getExpectedJson,com.google.gson.functional.ArrayOfArrays,);
Call(METHOD,com.google.gson.functional.ObjectTest,testArrayOfObjectsAsFields --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testArrayOfObjectsAsFields --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testArrayOfObjectsAsFields --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testArrayOfObjectsAsFields --> assertTrue,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testArrayOfObjectsAsFields --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ObjectTest,testArrayOfObjectsAsFields --> assertTrue,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testArrayOfObjectsAsFields --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ObjectTest,testArrayOfObjectsAsFields --> assertTrue,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testArrayOfObjectsAsFields --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ObjectTest,testNullArraysDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testNullArraysDeserialization --> assertNull,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testNullObjectFieldsDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testNullObjectFieldsDeserialization --> assertNull,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testEmptyCollectionInAnObjectDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest,testEmptyCollectionInAnObjectDeserialization --> assertNotNull,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testEmptyCollectionInAnObjectDeserialization --> assertTrue,com.google.gson.functional.ObjectTest,);
Call(METHOD,com.google.gson.functional.ObjectTest,testEmptyCollectionInAnObjectDeserialization --> isEmpty,com.google.gson.functional.ClassWithCollectionField,);
EndClass 130
StartClass 131
Class(com.google.gson.common.TestTypes.Nested,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.InheritanceTest.SubTypeOfNested);
EndClass 131
StartClass 132
Class(com.google.gson.functional.InheritanceTest.SubTypeOfNested,N,N,Private);
Attribute(value,long,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(appendFields,void,Public,N,N);
Method(testSubInterfacesOfCollectionSerialization,void,Public,N,N);
Method(testSubInterfacesOfCollectionDeserialization,void,Public,N,N);
Parameter(<init>,com.google.gson.common.TestTypes.BagOfPrimitives,);
Parameter(<init>,com.google.gson.common.TestTypes.BagOfPrimitives,);
Parameter(appendFields,com.google.gson.functional.StringBuilder,);
SuperClass(com.google.gson.common.TestTypes.Nested);
Generalization(com.google.gson.common.TestTypes.Nested);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,<init> --> super,com.google.gson.functional.InheritanceTest.SubTypeOfNested,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,appendFields --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,appendFields --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,appendFields --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,appendFields --> appendFields,null,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionSerialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionSerialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionSerialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionSerialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionSerialization --> add,java.util.Queue,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionSerialization --> add,java.util.Queue,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionSerialization --> add,java.util.Queue,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionSerialization --> add,java.util.Queue,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionSerialization --> add,java.util.Set,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionSerialization --> add,java.util.Set,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionSerialization --> add,java.util.Set,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionSerialization --> add,java.util.Set,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionSerialization --> add,java.util.SortedSet,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionSerialization --> add,java.util.SortedSet,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionSerialization --> add,java.util.SortedSet,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionSerialization --> add,java.util.SortedSet,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionSerialization --> assertEquals,com.google.gson.functional.InheritanceTest.SubTypeOfNested,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionSerialization --> getExpectedJson,com.google.gson.functional.ClassWithSubInterfacesOfCollection,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionDeserialization --> assertTrue,com.google.gson.functional.InheritanceTest.SubTypeOfNested,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionDeserialization --> listContains,com.google.gson.functional.ClassWithSubInterfacesOfCollection,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionDeserialization --> assertTrue,com.google.gson.functional.InheritanceTest.SubTypeOfNested,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionDeserialization --> queueContains,com.google.gson.functional.ClassWithSubInterfacesOfCollection,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionDeserialization --> assertTrue,com.google.gson.functional.InheritanceTest.SubTypeOfNested,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionDeserialization --> setContains,com.google.gson.functional.ClassWithSubInterfacesOfCollection,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionDeserialization --> assertTrue,com.google.gson.functional.InheritanceTest.SubTypeOfNested,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested,testSubInterfacesOfCollectionDeserialization --> sortedSetContains,com.google.gson.functional.ClassWithSubInterfacesOfCollection,);
EndClass 132
StartClass 133
Class(com.google.gson.functional.ClassWithSubInterfacesOfCollection,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 133
StartClass 134
Class(com.google.gson.functional.ArrayOfArrays,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 134
StartClass 135
Class(com.google.gson.functional.ClassWithCollectionField,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 135
StartClass 136
Class(com.google.gson.functional.ParameterizedTypesTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testParameterizedTypesSerialization,void,Public,N,N);
Method(testParameterizedTypeDeserialization,void,Public,N,N);
Method(testTypesWithMultipleParametersSerialization,void,Public,N,N);
Method(testTypesWithMultipleParametersDeserialization,void,Public,N,N);
Method(testParameterizedTypeWithCustomSerializer,void,Public,N,N);
Method(testParameterizedTypesWithCustomDeserializer,void,Public,N,N);
Method(testParameterizedTypesWithWriterSerialization,void,Public,N,N);
Method(testParameterizedTypeWithReaderDeserialization,void,Public,N,N);
Method(testVariableTypeFieldsAndGenericArraysSerialization,void,Public,N,N);
Method(testVariableTypeFieldsAndGenericArraysDeserialization,void,Public,N,N);
Method(testVariableTypeDeserialization,void,Public,N,N);
Method(testVariableTypeArrayDeserialization,void,Public,N,N);
Method(testParameterizedTypeWithVariableTypeDeserialization,void,Public,N,N);
Method(testParameterizedTypeGenericArraysSerialization,void,Public,N,N);
Method(testParameterizedTypeGenericArraysDeserialization,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.ParameterizedTypesTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypesSerialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypesSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypesSerialization --> assertEquals,com.google.gson.functional.ParameterizedTypesTest,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypesSerialization --> getExpectedJson,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeDeserialization --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeDeserialization --> getExpectedJson,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeDeserialization --> assertEquals,com.google.gson.functional.ParameterizedTypesTest,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testTypesWithMultipleParametersSerialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testTypesWithMultipleParametersSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testTypesWithMultipleParametersSerialization --> assertEquals,com.google.gson.functional.ParameterizedTypesTest,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testTypesWithMultipleParametersDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testTypesWithMultipleParametersDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testTypesWithMultipleParametersDeserialization --> assertEquals,com.google.gson.functional.ParameterizedTypesTest,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeWithCustomSerializer --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeWithCustomSerializer --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeWithCustomSerializer --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeWithCustomSerializer --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeWithCustomSerializer --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeWithCustomSerializer --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeWithCustomSerializer --> assertEquals,com.google.gson.functional.ParameterizedTypesTest,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeWithCustomSerializer --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeWithCustomSerializer --> assertEquals,com.google.gson.functional.ParameterizedTypesTest,);
Call(ATTRIBUTE,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeWithCustomSerializer --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypesWithCustomDeserializer --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypesWithCustomDeserializer --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypesWithCustomDeserializer --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypesWithCustomDeserializer --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypesWithCustomDeserializer --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypesWithCustomDeserializer --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypesWithCustomDeserializer --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypesWithCustomDeserializer --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypesWithCustomDeserializer --> assertEquals,com.google.gson.functional.ParameterizedTypesTest,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypesWithCustomDeserializer --> intValue,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypesWithCustomDeserializer --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypesWithCustomDeserializer --> assertEquals,com.google.gson.functional.ParameterizedTypesTest,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypesWithWriterSerialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypesWithWriterSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypesWithWriterSerialization --> assertEquals,com.google.gson.functional.ParameterizedTypesTest,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypesWithWriterSerialization --> getExpectedJson,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypesWithWriterSerialization --> toString,java.io.Writer,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeWithReaderDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeWithReaderDeserialization --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeWithReaderDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeWithReaderDeserialization --> getExpectedJson,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeWithReaderDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeWithReaderDeserialization --> assertEquals,com.google.gson.functional.ParameterizedTypesTest,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testVariableTypeFieldsAndGenericArraysSerialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testVariableTypeFieldsAndGenericArraysSerialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testVariableTypeFieldsAndGenericArraysSerialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testVariableTypeFieldsAndGenericArraysSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testVariableTypeFieldsAndGenericArraysSerialization --> assertEquals,com.google.gson.functional.ParameterizedTypesTest,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testVariableTypeFieldsAndGenericArraysSerialization --> getExpectedJson,com.google.gson.functional.ObjectWithTypeVariables,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testVariableTypeFieldsAndGenericArraysDeserialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testVariableTypeFieldsAndGenericArraysDeserialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testVariableTypeFieldsAndGenericArraysDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testVariableTypeFieldsAndGenericArraysDeserialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testVariableTypeFieldsAndGenericArraysDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testVariableTypeFieldsAndGenericArraysDeserialization --> assertEquals,com.google.gson.functional.ParameterizedTypesTest,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testVariableTypeFieldsAndGenericArraysDeserialization --> getExpectedJson,com.google.gson.functional.ObjectWithTypeVariables,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testVariableTypeDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testVariableTypeDeserialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testVariableTypeDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testVariableTypeDeserialization --> assertEquals,com.google.gson.functional.ParameterizedTypesTest,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testVariableTypeDeserialization --> getExpectedJson,com.google.gson.functional.ObjectWithTypeVariables,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testVariableTypeArrayDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testVariableTypeArrayDeserialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testVariableTypeArrayDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testVariableTypeArrayDeserialization --> assertEquals,com.google.gson.functional.ParameterizedTypesTest,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testVariableTypeArrayDeserialization --> getExpectedJson,com.google.gson.functional.ObjectWithTypeVariables,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeWithVariableTypeDeserialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeWithVariableTypeDeserialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeWithVariableTypeDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeWithVariableTypeDeserialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeWithVariableTypeDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeWithVariableTypeDeserialization --> assertEquals,com.google.gson.functional.ParameterizedTypesTest,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeWithVariableTypeDeserialization --> getExpectedJson,com.google.gson.functional.ObjectWithTypeVariables,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeGenericArraysSerialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeGenericArraysSerialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeGenericArraysSerialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeGenericArraysSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeGenericArraysSerialization --> assertEquals,com.google.gson.functional.ParameterizedTypesTest,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeGenericArraysDeserialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeGenericArraysDeserialization --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeGenericArraysDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeGenericArraysDeserialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeGenericArraysDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeGenericArraysDeserialization --> assertEquals,com.google.gson.functional.ParameterizedTypesTest,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest,testParameterizedTypeGenericArraysDeserialization --> getExpectedJson,com.google.gson.functional.ObjectWithTypeVariables,);
EndClass 136
StartClass 137
Class(com.google.gson.functional.PrettyPrintingTest,N,N,Public);
Attribute(DEBUG,boolean,Private,Y,Y,);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testPrettyPrintList,void,Public,N,N);
Method(testPrettyPrintArrayOfObjects,void,Public,N,N);
Method(testPrettyPrintArrayOfPrimitives,void,Public,N,N);
Method(testPrettyPrintArrayOfPrimitiveArrays,void,Public,N,N);
Method(testPrettyPrintListOfPrimitiveArrays,void,Public,N,N);
Method(testMap,void,Public,N,N);
Method(testEmptyMapField,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest,setUp --> setUp,null,);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest,setUp --> setPrettyPrinting,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest,setUp --> create,com.google.gson.GsonBuilder,);
Call(ATTRIBUTE,com.google.gson.functional.PrettyPrintingTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest,testPrettyPrintList --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest,testPrettyPrintList --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest,testPrettyPrintList --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest,testPrettyPrintList --> print,com.google.gson.functional.PrettyPrintingTest,);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest,testPrettyPrintArrayOfObjects --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest,testPrettyPrintArrayOfObjects --> print,com.google.gson.functional.PrettyPrintingTest,);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest,testPrettyPrintArrayOfPrimitives --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest,testPrettyPrintArrayOfPrimitives --> assertEquals,com.google.gson.functional.PrettyPrintingTest,);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest,testPrettyPrintArrayOfPrimitiveArrays --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest,testPrettyPrintArrayOfPrimitiveArrays --> assertEquals,com.google.gson.functional.PrettyPrintingTest,);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest,testPrettyPrintListOfPrimitiveArrays --> asList,null,);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest,testPrettyPrintListOfPrimitiveArrays --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest,testPrettyPrintListOfPrimitiveArrays --> assertEquals,com.google.gson.functional.PrettyPrintingTest,);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest,testMap --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest,testMap --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest,testMap --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest,testMap --> assertEquals,com.google.gson.functional.PrettyPrintingTest,);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest,testEmptyMapField --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest,testEmptyMapField --> assertTrue,com.google.gson.functional.PrettyPrintingTest,);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest,testEmptyMapField --> contains,java.lang.String,);
EndClass 137
StartClass 138
Class(com.google.gson.functional.PrimitiveCharacterTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testPrimitiveCharacterAutoboxedSerialization,void,Public,N,N);
Method(testPrimitiveCharacterAutoboxedDeserialization,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.PrimitiveCharacterTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.PrimitiveCharacterTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.PrimitiveCharacterTest,testPrimitiveCharacterAutoboxedSerialization --> assertEquals,com.google.gson.functional.PrimitiveCharacterTest,);
Call(METHOD,com.google.gson.functional.PrimitiveCharacterTest,testPrimitiveCharacterAutoboxedSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveCharacterTest,testPrimitiveCharacterAutoboxedSerialization --> assertEquals,com.google.gson.functional.PrimitiveCharacterTest,);
Call(METHOD,com.google.gson.functional.PrimitiveCharacterTest,testPrimitiveCharacterAutoboxedSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveCharacterTest,testPrimitiveCharacterAutoboxedSerialization --> assertEquals,com.google.gson.functional.PrimitiveCharacterTest,);
Call(METHOD,com.google.gson.functional.PrimitiveCharacterTest,testPrimitiveCharacterAutoboxedSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveCharacterTest,testPrimitiveCharacterAutoboxedDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveCharacterTest,testPrimitiveCharacterAutoboxedDeserialization --> assertEquals,com.google.gson.functional.PrimitiveCharacterTest,);
Call(METHOD,com.google.gson.functional.PrimitiveCharacterTest,testPrimitiveCharacterAutoboxedDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveCharacterTest,testPrimitiveCharacterAutoboxedDeserialization --> assertEquals,com.google.gson.functional.PrimitiveCharacterTest,);
Call(METHOD,com.google.gson.functional.PrimitiveCharacterTest,testPrimitiveCharacterAutoboxedDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveCharacterTest,testPrimitiveCharacterAutoboxedDeserialization --> assertEquals,com.google.gson.functional.PrimitiveCharacterTest,);
Call(ATTRIBUTE,com.google.gson.functional.PrimitiveCharacterTest,testPrimitiveCharacterAutoboxedDeserialization --> gson,com.google.gson.Gson,READ);
Call(ATTRIBUTE,com.google.gson.functional.PrimitiveCharacterTest,testPrimitiveCharacterAutoboxedDeserialization --> gson,com.google.gson.Gson,READ);
EndClass 138
StartClass 139
Class(com.google.gson.functional.PrimitiveTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testPrimitiveIntegerAutoboxedSerialization,void,Public,N,N);
Method(testPrimitiveIntegerAutoboxedDeserialization,void,Public,N,N);
Method(testByteSerialization,void,Public,N,N);
Method(testShortSerialization,void,Public,N,N);
Method(testByteDeserialization,void,Public,N,N);
Method(testPrimitiveIntegerAutoboxedInASingleElementArraySerialization,void,Public,N,N);
Method(testReallyLongValuesSerialization,void,Public,N,N);
Method(testReallyLongValuesDeserialization,void,Public,N,N);
Method(testPrimitiveLongAutoboxedSerialization,void,Public,N,N);
Method(testPrimitiveLongAutoboxedDeserialization,void,Public,N,N);
Method(testPrimitiveLongAutoboxedInASingleElementArraySerialization,void,Public,N,N);
Method(testPrimitiveBooleanAutoboxedSerialization,void,Public,N,N);
Method(testBooleanDeserialization,void,Public,N,N);
Method(testPrimitiveBooleanAutoboxedInASingleElementArraySerialization,void,Public,N,N);
Method(testNumberSerialization,void,Public,N,N);
Method(testNumberDeserialization,void,Public,N,N);
Method(testNumberAsStringDeserialization,void,Public,N,N);
Method(testPrimitiveDoubleAutoboxedSerialization,void,Public,N,N);
Method(testPrimitiveDoubleAutoboxedDeserialization,void,Public,N,N);
Method(testPrimitiveDoubleAutoboxedInASingleElementArraySerialization,void,Public,N,N);
Method(testDoubleAsStringRepresentationDeserialization,void,Public,N,N);
Method(testDoubleNoFractAsStringRepresentationDeserialization,void,Public,N,N);
Method(testDoubleArrayDeserialization,void,Public,N,N);
Method(testLargeDoubleDeserialization,void,Public,N,N);
Method(testBigDecimalSerialization,void,Public,N,N);
Method(testBigDecimalDeserialization,void,Public,N,N);
Method(testBigDecimalInASingleElementArraySerialization,void,Public,N,N);
Method(testSmallValueForBigDecimalSerialization,void,Public,N,N);
Method(testSmallValueForBigDecimalDeserialization,void,Public,N,N);
Method(testBigDecimalPreservePrecisionSerialization,void,Public,N,N);
Method(testBigDecimalPreservePrecisionDeserialization,void,Public,N,N);
Method(testBigDecimalAsStringRepresentationDeserialization,void,Public,N,N);
Method(testBigDecimalNoFractAsStringRepresentationDeserialization,void,Public,N,N);
Method(testBigIntegerSerialization,void,Public,N,N);
Method(testBigIntegerDeserialization,void,Public,N,N);
Method(testBigIntegerInASingleElementArraySerialization,void,Public,N,N);
Method(testSmallValueForBigIntegerSerialization,void,Public,N,N);
Method(testSmallValueForBigIntegerDeserialization,void,Public,N,N);
Method(testBadValueForBigIntegerDeserialization,void,Public,N,N);
Method(testMoreSpecificSerialization,void,Public,N,N);
Method(extractElementFromArray,java.lang.String,Private,N,N);
Method(testDoubleNaNSerializationNotSupportedByDefault,void,Public,N,N);
Method(testDoubleNaNSerialization,void,Public,N,N);
Method(testDoubleNaNDeserialization,void,Public,N,N);
Method(testFloatNaNSerializationNotSupportedByDefault,void,Public,N,N);
Method(testFloatNaNSerialization,void,Public,N,N);
Method(testFloatNaNDeserialization,void,Public,N,N);
Method(testBigDecimalNaNDeserializationNotSupported,void,Public,N,N);
Method(testDoubleInfinitySerializationNotSupportedByDefault,void,Public,N,N);
Method(testDoubleInfinitySerialization,void,Public,N,N);
Method(testDoubleInfinityDeserialization,void,Public,N,N);
Method(testFloatInfinitySerializationNotSupportedByDefault,void,Public,N,N);
Method(testFloatInfinitySerialization,void,Public,N,N);
Method(testFloatInfinityDeserialization,void,Public,N,N);
Method(testBigDecimalInfinityDeserializationNotSupported,void,Public,N,N);
Method(testNegativeInfinitySerializationNotSupportedByDefault,void,Public,N,N);
Method(testNegativeInfinitySerialization,void,Public,N,N);
Method(testNegativeInfinityDeserialization,void,Public,N,N);
Method(testNegativeInfinityFloatSerializationNotSupportedByDefault,void,Public,N,N);
Method(testNegativeInfinityFloatSerialization,void,Public,N,N);
Method(testNegativeInfinityFloatDeserialization,void,Public,N,N);
Method(testBigDecimalNegativeInfinityDeserializationNotSupported,void,Public,N,N);
Method(testLongAsStringSerialization,void,Public,N,N);
Method(testLongAsStringDeserialization,void,Public,N,N);
Method(testQuotedStringSerializationAndDeserialization,void,Public,N,N);
Method(testUnquotedStringDeserializationFails,void,Public,N,N);
Method(testHtmlCharacterSerialization,void,Public,N,N);
Method(testDeserializePrimitiveWrapperAsObjectField,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(extractElementFromArray,java.lang.String,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.PrimitiveTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.PrimitiveTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveIntegerAutoboxedSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveIntegerAutoboxedSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveIntegerAutoboxedDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveIntegerAutoboxedDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveIntegerAutoboxedDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveIntegerAutoboxedDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(ATTRIBUTE,com.google.gson.functional.PrimitiveTest,testPrimitiveIntegerAutoboxedDeserialization --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testByteSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testByteSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testByteSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testByteSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testShortSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testShortSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testShortSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testShortSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testByteDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testByteDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testByteDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testByteDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveIntegerAutoboxedInASingleElementArraySerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveIntegerAutoboxedInASingleElementArraySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveIntegerAutoboxedInASingleElementArraySerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveIntegerAutoboxedInASingleElementArraySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveIntegerAutoboxedInASingleElementArraySerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveIntegerAutoboxedInASingleElementArraySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testReallyLongValuesSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testReallyLongValuesSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testReallyLongValuesDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testReallyLongValuesDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveLongAutoboxedSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveLongAutoboxedSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveLongAutoboxedSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveLongAutoboxedSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveLongAutoboxedDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveLongAutoboxedDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveLongAutoboxedDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveLongAutoboxedDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(ATTRIBUTE,com.google.gson.functional.PrimitiveTest,testPrimitiveLongAutoboxedDeserialization --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveLongAutoboxedInASingleElementArraySerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveLongAutoboxedInASingleElementArraySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveLongAutoboxedInASingleElementArraySerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveLongAutoboxedInASingleElementArraySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveLongAutoboxedInASingleElementArraySerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveLongAutoboxedInASingleElementArraySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveBooleanAutoboxedSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveBooleanAutoboxedSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveBooleanAutoboxedSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveBooleanAutoboxedSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBooleanDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBooleanDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBooleanDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBooleanDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(ATTRIBUTE,com.google.gson.functional.PrimitiveTest,testBooleanDeserialization --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveBooleanAutoboxedInASingleElementArraySerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveBooleanAutoboxedInASingleElementArraySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveBooleanAutoboxedInASingleElementArraySerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveBooleanAutoboxedInASingleElementArraySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveBooleanAutoboxedInASingleElementArraySerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveBooleanAutoboxedInASingleElementArraySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNumberSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNumberSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNumberSerialization --> toString,java.lang.Number,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNumberSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNumberSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNumberSerialization --> toString,java.lang.Number,);
Call(ATTRIBUTE,com.google.gson.functional.PrimitiveTest,testNumberSerialization --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNumberDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNumberDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNumberDeserialization --> intValue,java.lang.Number,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNumberDeserialization --> intValue,java.lang.Number,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNumberDeserialization --> valueOf,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNumberDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNumberDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNumberDeserialization --> longValue,java.lang.Number,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNumberDeserialization --> longValue,java.lang.Number,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNumberDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNumberDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNumberDeserialization --> longValue,java.lang.Number,);
Call(ATTRIBUTE,com.google.gson.functional.PrimitiveTest,testNumberDeserialization --> gson,com.google.gson.Gson,READ);
Call(ATTRIBUTE,com.google.gson.functional.PrimitiveTest,testNumberDeserialization --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNumberAsStringDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNumberAsStringDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNumberAsStringDeserialization --> intValue,java.lang.Number,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveDoubleAutoboxedSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveDoubleAutoboxedSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveDoubleAutoboxedSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveDoubleAutoboxedSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveDoubleAutoboxedDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveDoubleAutoboxedDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveDoubleAutoboxedDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveDoubleAutoboxedDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(ATTRIBUTE,com.google.gson.functional.PrimitiveTest,testPrimitiveDoubleAutoboxedDeserialization --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveDoubleAutoboxedInASingleElementArraySerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveDoubleAutoboxedInASingleElementArraySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveDoubleAutoboxedInASingleElementArraySerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveDoubleAutoboxedInASingleElementArraySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveDoubleAutoboxedInASingleElementArraySerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testPrimitiveDoubleAutoboxedInASingleElementArraySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleAsStringRepresentationDeserialization --> valueOf,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleAsStringRepresentationDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleAsStringRepresentationDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleAsStringRepresentationDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleAsStringRepresentationDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleAsStringRepresentationDeserialization --> doubleValue,java.lang.Double,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleNoFractAsStringRepresentationDeserialization --> valueOf,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleNoFractAsStringRepresentationDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleNoFractAsStringRepresentationDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleNoFractAsStringRepresentationDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleNoFractAsStringRepresentationDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleNoFractAsStringRepresentationDeserialization --> doubleValue,java.lang.Double,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleArrayDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleArrayDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleArrayDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleArrayDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleArrayDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleArrayDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleArrayDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleArrayDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testLargeDoubleDeserialization --> valueOf,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testLargeDoubleDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testLargeDoubleDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testLargeDoubleDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testLargeDoubleDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testLargeDoubleDeserialization --> doubleValue,java.lang.Double,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigDecimalSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigDecimalSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigDecimalDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigDecimalDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigDecimalInASingleElementArraySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigDecimalInASingleElementArraySerialization --> extractElementFromArray,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigDecimalInASingleElementArraySerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigDecimalInASingleElementArraySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigDecimalInASingleElementArraySerialization --> extractElementFromArray,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigDecimalInASingleElementArraySerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(ATTRIBUTE,com.google.gson.functional.PrimitiveTest,testBigDecimalInASingleElementArraySerialization --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testSmallValueForBigDecimalSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testSmallValueForBigDecimalSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testSmallValueForBigDecimalSerialization --> toString,java.math.BigDecimal,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testSmallValueForBigDecimalDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testSmallValueForBigDecimalDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigDecimalPreservePrecisionSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigDecimalPreservePrecisionSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigDecimalPreservePrecisionDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigDecimalPreservePrecisionDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigDecimalAsStringRepresentationDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigDecimalAsStringRepresentationDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigDecimalNoFractAsStringRepresentationDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigDecimalNoFractAsStringRepresentationDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigIntegerSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigIntegerSerialization --> toString,java.math.BigInteger,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigIntegerSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigIntegerDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigIntegerDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigIntegerInASingleElementArraySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigIntegerInASingleElementArraySerialization --> extractElementFromArray,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigIntegerInASingleElementArraySerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigIntegerInASingleElementArraySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigIntegerInASingleElementArraySerialization --> extractElementFromArray,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigIntegerInASingleElementArraySerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(ATTRIBUTE,com.google.gson.functional.PrimitiveTest,testBigIntegerInASingleElementArraySerialization --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testSmallValueForBigIntegerSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testSmallValueForBigIntegerSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testSmallValueForBigIntegerSerialization --> toString,java.math.BigInteger,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testSmallValueForBigIntegerDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testSmallValueForBigIntegerDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBadValueForBigIntegerDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBadValueForBigIntegerDeserialization --> fail,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testMoreSpecificSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testMoreSpecificSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testMoreSpecificSerialization --> assertFalse,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testMoreSpecificSerialization --> equals,java.lang.String,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,extractElementFromArray --> substring,java.lang.String,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,extractElementFromArray --> indexOf,java.lang.String,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,extractElementFromArray --> indexOf,java.lang.String,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleNaNSerializationNotSupportedByDefault --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleNaNSerializationNotSupportedByDefault --> fail,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleNaNSerializationNotSupportedByDefault --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleNaNSerializationNotSupportedByDefault --> fail,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleNaNSerialization --> serializeSpecialFloatingPointValues,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleNaNSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleNaNSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleNaNSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleNaNSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleNaNSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleNaNDeserialization --> assertTrue,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleNaNDeserialization --> isNaN,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleNaNDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleNaNDeserialization --> assertTrue,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleNaNDeserialization --> isNaN,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleNaNDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatNaNSerializationNotSupportedByDefault --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatNaNSerializationNotSupportedByDefault --> fail,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatNaNSerializationNotSupportedByDefault --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatNaNSerializationNotSupportedByDefault --> fail,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatNaNSerialization --> serializeSpecialFloatingPointValues,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatNaNSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatNaNSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatNaNSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatNaNSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatNaNSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatNaNDeserialization --> assertTrue,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatNaNDeserialization --> isNaN,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatNaNDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatNaNDeserialization --> assertTrue,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatNaNDeserialization --> isNaN,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatNaNDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigDecimalNaNDeserializationNotSupported --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigDecimalNaNDeserializationNotSupported --> fail,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleInfinitySerializationNotSupportedByDefault --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleInfinitySerializationNotSupportedByDefault --> fail,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleInfinitySerializationNotSupportedByDefault --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleInfinitySerializationNotSupportedByDefault --> fail,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleInfinitySerialization --> serializeSpecialFloatingPointValues,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleInfinitySerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleInfinitySerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleInfinitySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleInfinitySerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleInfinitySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleInfinityDeserialization --> assertTrue,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleInfinityDeserialization --> isInfinite,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleInfinityDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleInfinityDeserialization --> assertTrue,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleInfinityDeserialization --> isInfinite,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDoubleInfinityDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatInfinitySerializationNotSupportedByDefault --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatInfinitySerializationNotSupportedByDefault --> fail,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatInfinitySerializationNotSupportedByDefault --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatInfinitySerializationNotSupportedByDefault --> fail,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatInfinitySerialization --> serializeSpecialFloatingPointValues,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatInfinitySerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatInfinitySerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatInfinitySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatInfinitySerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatInfinitySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatInfinityDeserialization --> assertTrue,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatInfinityDeserialization --> isInfinite,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatInfinityDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatInfinityDeserialization --> assertTrue,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatInfinityDeserialization --> isInfinite,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testFloatInfinityDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigDecimalInfinityDeserializationNotSupported --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigDecimalInfinityDeserializationNotSupported --> fail,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinitySerializationNotSupportedByDefault --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinitySerializationNotSupportedByDefault --> fail,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinitySerializationNotSupportedByDefault --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinitySerializationNotSupportedByDefault --> fail,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinitySerialization --> serializeSpecialFloatingPointValues,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinitySerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinitySerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinitySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinitySerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinitySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinityDeserialization --> assertTrue,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinityDeserialization --> isInfinite,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinityDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinityDeserialization --> assertTrue,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinityDeserialization --> isInfinite,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinityDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinityFloatSerializationNotSupportedByDefault --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinityFloatSerializationNotSupportedByDefault --> fail,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinityFloatSerializationNotSupportedByDefault --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinityFloatSerializationNotSupportedByDefault --> fail,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinityFloatSerialization --> serializeSpecialFloatingPointValues,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinityFloatSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinityFloatSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinityFloatSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinityFloatSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinityFloatSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinityFloatDeserialization --> assertTrue,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinityFloatDeserialization --> isInfinite,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinityFloatDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinityFloatDeserialization --> assertTrue,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinityFloatDeserialization --> isInfinite,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testNegativeInfinityFloatDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigDecimalNegativeInfinityDeserializationNotSupported --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testBigDecimalNegativeInfinityDeserializationNotSupported --> fail,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testLongAsStringSerialization --> setLongSerializationPolicy,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testLongAsStringSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testLongAsStringSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testLongAsStringSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testLongAsStringSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testLongAsStringSerialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(ATTRIBUTE,com.google.gson.functional.PrimitiveTest,testLongAsStringSerialization --> gson,com.google.gson.Gson,WRITE);
Call(ATTRIBUTE,com.google.gson.functional.PrimitiveTest,testLongAsStringSerialization --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testLongAsStringDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testLongAsStringDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testLongAsStringDeserialization --> setLongSerializationPolicy,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testLongAsStringDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testLongAsStringDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testLongAsStringDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(ATTRIBUTE,com.google.gson.functional.PrimitiveTest,testLongAsStringDeserialization --> gson,com.google.gson.Gson,WRITE);
Call(ATTRIBUTE,com.google.gson.functional.PrimitiveTest,testLongAsStringDeserialization --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testQuotedStringSerializationAndDeserialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testQuotedStringSerializationAndDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testQuotedStringSerializationAndDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testQuotedStringSerializationAndDeserialization --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testUnquotedStringDeserializationFails --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testUnquotedStringDeserializationFails --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testUnquotedStringDeserializationFails --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testUnquotedStringDeserializationFails --> fail,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testHtmlCharacterSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testHtmlCharacterSerialization --> assertFalse,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testHtmlCharacterSerialization --> equals,java.lang.String,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testHtmlCharacterSerialization --> disableHtmlEscaping,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testHtmlCharacterSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testHtmlCharacterSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testHtmlCharacterSerialization --> assertTrue,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testHtmlCharacterSerialization --> equals,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.functional.PrimitiveTest,testHtmlCharacterSerialization --> gson,com.google.gson.Gson,WRITE);
Call(ATTRIBUTE,com.google.gson.functional.PrimitiveTest,testHtmlCharacterSerialization --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDeserializePrimitiveWrapperAsObjectField --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDeserializePrimitiveWrapperAsObjectField --> assertEquals,com.google.gson.functional.PrimitiveTest,);
Call(METHOD,com.google.gson.functional.PrimitiveTest,testDeserializePrimitiveWrapperAsObjectField --> intValue,com.google.gson.functional.ClassWithIntegerField,);
EndClass 139
StartClass 140
Class(com.google.gson.functional.ClassWithIntegerField,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 140
StartClass 141
Class(com.google.gson.functional.PrintFormattingTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testCompactFormattingLeavesNoWhiteSpace,void,Public,N,N);
Method(testJsonObjectWithNullValues,void,Public,N,N);
Method(testJsonObjectWithNullValuesSerialized,void,Public,N,N);
Method(assertContainsNoWhiteSpace,void,Private,Y,N);
Method(<init>,void,Public,N,N);
Parameter(assertContainsNoWhiteSpace,java.lang.String,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.PrintFormattingTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,testCompactFormattingLeavesNoWhiteSpace --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,testCompactFormattingLeavesNoWhiteSpace --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,testCompactFormattingLeavesNoWhiteSpace --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,testCompactFormattingLeavesNoWhiteSpace --> add,java.util.List,);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,testCompactFormattingLeavesNoWhiteSpace --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,testCompactFormattingLeavesNoWhiteSpace --> assertContainsNoWhiteSpace,com.google.gson.functional.PrintFormattingTest,);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,testJsonObjectWithNullValues --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,testJsonObjectWithNullValues --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,testJsonObjectWithNullValues --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,testJsonObjectWithNullValues --> assertTrue,com.google.gson.functional.PrintFormattingTest,);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,testJsonObjectWithNullValues --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,testJsonObjectWithNullValues --> assertFalse,com.google.gson.functional.PrintFormattingTest,);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,testJsonObjectWithNullValues --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,testJsonObjectWithNullValuesSerialized --> serializeNulls,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,testJsonObjectWithNullValuesSerialized --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,testJsonObjectWithNullValuesSerialized --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,testJsonObjectWithNullValuesSerialized --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,testJsonObjectWithNullValuesSerialized --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,testJsonObjectWithNullValuesSerialized --> assertTrue,com.google.gson.functional.PrintFormattingTest,);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,testJsonObjectWithNullValuesSerialized --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,testJsonObjectWithNullValuesSerialized --> assertTrue,com.google.gson.functional.PrintFormattingTest,);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,testJsonObjectWithNullValuesSerialized --> contains,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.functional.PrintFormattingTest,testJsonObjectWithNullValuesSerialized --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,assertContainsNoWhiteSpace --> toCharArray,java.lang.String,);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,assertContainsNoWhiteSpace --> assertFalse,com.google.gson.functional.PrintFormattingTest,);
Call(METHOD,com.google.gson.functional.PrintFormattingTest,assertContainsNoWhiteSpace --> isWhitespace,null,);
EndClass 141
StartClass 142
Class(com.google.gson.functional.RawSerializationTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testCollectionOfPrimitives,void,Public,N,N);
Method(testCollectionOfObjects,void,Public,N,N);
Method(testParameterizedObject,void,Public,N,N);
Method(testTwoLevelParameterizedObject,void,Public,N,N);
Method(testThreeLevelParameterizedObject,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.RawSerializationTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.RawSerializationTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.RawSerializationTest,testCollectionOfPrimitives --> asList,null,);
Call(METHOD,com.google.gson.functional.RawSerializationTest,testCollectionOfPrimitives --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.RawSerializationTest,testCollectionOfPrimitives --> assertEquals,com.google.gson.functional.RawSerializationTest,);
Call(METHOD,com.google.gson.functional.RawSerializationTest,testCollectionOfObjects --> asList,null,);
Call(METHOD,com.google.gson.functional.RawSerializationTest,testCollectionOfObjects --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.RawSerializationTest,testCollectionOfObjects --> assertEquals,com.google.gson.functional.RawSerializationTest,);
Call(METHOD,com.google.gson.functional.RawSerializationTest,testParameterizedObject --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.RawSerializationTest,testParameterizedObject --> assertEquals,com.google.gson.functional.RawSerializationTest,);
Call(METHOD,com.google.gson.functional.RawSerializationTest,testParameterizedObject --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.RawSerializationTest,testParameterizedObject --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.RawSerializationTest,testParameterizedObject --> assertEquals,com.google.gson.functional.RawSerializationTest,);
Call(ATTRIBUTE,com.google.gson.functional.RawSerializationTest,testParameterizedObject --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.RawSerializationTest,testTwoLevelParameterizedObject --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.RawSerializationTest,testTwoLevelParameterizedObject --> assertEquals,com.google.gson.functional.RawSerializationTest,);
Call(METHOD,com.google.gson.functional.RawSerializationTest,testTwoLevelParameterizedObject --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.RawSerializationTest,testTwoLevelParameterizedObject --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.RawSerializationTest,testTwoLevelParameterizedObject --> assertEquals,com.google.gson.functional.RawSerializationTest,);
Call(ATTRIBUTE,com.google.gson.functional.RawSerializationTest,testTwoLevelParameterizedObject --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.RawSerializationTest,testThreeLevelParameterizedObject --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.RawSerializationTest,testThreeLevelParameterizedObject --> assertEquals,com.google.gson.functional.RawSerializationTest,);
Call(METHOD,com.google.gson.functional.RawSerializationTest,testThreeLevelParameterizedObject --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.RawSerializationTest,testThreeLevelParameterizedObject --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.RawSerializationTest,testThreeLevelParameterizedObject --> assertEquals,com.google.gson.functional.RawSerializationTest,);
Call(ATTRIBUTE,com.google.gson.functional.RawSerializationTest,testThreeLevelParameterizedObject --> gson,com.google.gson.Gson,READ);
EndClass 142
StartClass 143
Class(com.google.gson.functional.ReadersWritersTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testWriterForSerialization,void,Public,N,N);
Method(testReaderForDeserialization,void,Public,N,N);
Method(testTopLevelNullObjectSerializationWithWriter,void,Public,N,N);
Method(testTopLevelNullObjectDeserializationWithReader,void,Public,N,N);
Method(testTopLevelNullObjectSerializationWithWriterAndSerializeNulls,void,Public,N,N);
Method(testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls,void,Public,N,N);
Method(testReadWriteTwoStrings,void,Public,N,N);
Method(testReadWriteTwoObjects,void,Public,N,N);
Method(testTypeMismatchThrowsJsonSyntaxExceptionForStrings,void,Public,N,N);
Method(testTypeMismatchThrowsJsonSyntaxExceptionForReaders,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.ReadersWritersTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testWriterForSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testWriterForSerialization --> assertEquals,com.google.gson.functional.ReadersWritersTest,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testWriterForSerialization --> getExpectedJson,com.google.gson.common.TestTypes.BagOfPrimitives,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testWriterForSerialization --> toString,java.io.Writer,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReaderForDeserialization --> getExpectedJson,com.google.gson.common.TestTypes.BagOfPrimitives,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReaderForDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReaderForDeserialization --> assertEquals,com.google.gson.functional.ReadersWritersTest,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testTopLevelNullObjectSerializationWithWriter --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testTopLevelNullObjectSerializationWithWriter --> assertEquals,com.google.gson.functional.ReadersWritersTest,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testTopLevelNullObjectSerializationWithWriter --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testTopLevelNullObjectDeserializationWithReader --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testTopLevelNullObjectDeserializationWithReader --> assertNull,com.google.gson.functional.ReadersWritersTest,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testTopLevelNullObjectSerializationWithWriterAndSerializeNulls --> serializeNulls,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testTopLevelNullObjectSerializationWithWriterAndSerializeNulls --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testTopLevelNullObjectSerializationWithWriterAndSerializeNulls --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testTopLevelNullObjectSerializationWithWriterAndSerializeNulls --> assertEquals,com.google.gson.functional.ReadersWritersTest,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testTopLevelNullObjectSerializationWithWriterAndSerializeNulls --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls --> serializeNulls,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls --> assertNull,com.google.gson.functional.ReadersWritersTest,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoStrings --> write,java.io.CharArrayWriter,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoStrings --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoStrings --> toCharArray,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoStrings --> write,java.io.CharArrayWriter,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoStrings --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoStrings --> toCharArray,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoStrings --> toCharArray,java.io.CharArrayWriter,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoStrings --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoStrings --> next,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoStrings --> assertEquals,com.google.gson.functional.ReadersWritersTest,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoStrings --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoStrings --> next,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoStrings --> assertEquals,com.google.gson.functional.ReadersWritersTest,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoObjects --> write,java.io.CharArrayWriter,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoObjects --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoObjects --> toCharArray,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoObjects --> write,java.io.CharArrayWriter,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoObjects --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoObjects --> toCharArray,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoObjects --> toCharArray,java.io.CharArrayWriter,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoObjects --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoObjects --> next,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoObjects --> assertEquals,com.google.gson.functional.ReadersWritersTest,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoObjects --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoObjects --> next,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoObjects --> assertEquals,com.google.gson.functional.ReadersWritersTest,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoObjects --> assertFalse,com.google.gson.functional.ReadersWritersTest,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testReadWriteTwoObjects --> hasNext,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testTypeMismatchThrowsJsonSyntaxExceptionForStrings --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testTypeMismatchThrowsJsonSyntaxExceptionForStrings --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testTypeMismatchThrowsJsonSyntaxExceptionForStrings --> fail,com.google.gson.functional.ReadersWritersTest,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testTypeMismatchThrowsJsonSyntaxExceptionForReaders --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testTypeMismatchThrowsJsonSyntaxExceptionForReaders --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.ReadersWritersTest,testTypeMismatchThrowsJsonSyntaxExceptionForReaders --> fail,com.google.gson.functional.ReadersWritersTest,);
EndClass 143
StartClass 144
Class(com.google.gson.JsonStreamParser,N,N,Public);
Attribute(parser,com.google.gson.stream.JsonReader,Private,N,Y,);
Attribute(lock,java.lang.Object,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(next,com.google.gson.JsonElement,Public,N,N);
Method(hasNext,boolean,Public,N,N);
Method(remove,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>$2,java.io.Reader,);
Realization(com.google.gson.Iterator);
Composition(com.google.gson.stream.JsonReader);
Call(METHOD,com.google.gson.JsonStreamParser,<init> --> this,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParser,<init>$2 --> setLenient,com.google.gson.stream.JsonReader,);
Call(ATTRIBUTE,com.google.gson.JsonStreamParser,<init>$2 --> parser,com.google.gson.stream.JsonReader,WRITE);
Call(ATTRIBUTE,com.google.gson.JsonStreamParser,<init>$2 --> lock,java.lang.Object,WRITE);
Call(METHOD,com.google.gson.JsonStreamParser,next --> hasNext,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParser,next --> parse,null,);
Call(METHOD,com.google.gson.JsonStreamParser,next --> getCause,null,);
Call(METHOD,com.google.gson.JsonStreamParser,hasNext --> peek,com.google.gson.stream.JsonReader,);
EndClass 144
StartClass 145
Class(com.google.gson.Iterator,Y,Y,Public);
EndClass 145
StartClass 146
Class(com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,Y,);
Method(testSubclassesAutomaticallySerialized,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest,testSubclassesAutomaticallySerialized --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest,testSubclassesAutomaticallySerialized --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest,testSubclassesAutomaticallySerialized --> assertEquals,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest,testSubclassesAutomaticallySerialized --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest,testSubclassesAutomaticallySerialized --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest,testSubclassesAutomaticallySerialized --> assertEquals,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest,testSubclassesAutomaticallySerialized --> assertEquals,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest,);
Call(ATTRIBUTE,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest,testSubclassesAutomaticallySerialized --> gson,com.google.gson.Gson,READ);
Call(ATTRIBUTE,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest,testSubclassesAutomaticallySerialized --> gson,com.google.gson.Gson,READ);
Call(ATTRIBUTE,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest,testSubclassesAutomaticallySerialized --> gson,com.google.gson.Gson,READ);
EndClass 146
StartClass 147
Class(com.google.gson.functional.SecurityTest,N,N,Public);
Attribute(JSON_NON_EXECUTABLE_PREFIX,java.lang.String,Private,Y,Y,);
Attribute(gsonBuilder,com.google.gson.GsonBuilder,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testNonExecutableJsonSerialization,void,Public,N,N);
Method(testNonExecutableJsonDeserialization,void,Public,N,N);
Method(testJsonWithNonExectuableTokenSerialization,void,Public,N,N);
Method(testJsonWithNonExectuableTokenWithRegularGsonDeserialization,void,Public,N,N);
Method(testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.GsonBuilder);
Call(METHOD,com.google.gson.functional.SecurityTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.SecurityTest,setUp --> gsonBuilder,com.google.gson.GsonBuilder,WRITE);
Call(METHOD,com.google.gson.functional.SecurityTest,testNonExecutableJsonSerialization --> generateNonExecutableJson,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.SecurityTest,testNonExecutableJsonSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.SecurityTest,testNonExecutableJsonSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.SecurityTest,testNonExecutableJsonSerialization --> assertTrue,com.google.gson.functional.SecurityTest,);
Call(METHOD,com.google.gson.functional.SecurityTest,testNonExecutableJsonSerialization --> startsWith,java.lang.String,);
Call(METHOD,com.google.gson.functional.SecurityTest,testNonExecutableJsonDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.SecurityTest,testNonExecutableJsonDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.SecurityTest,testNonExecutableJsonDeserialization --> assertEquals,com.google.gson.functional.SecurityTest,);
Call(METHOD,com.google.gson.functional.SecurityTest,testJsonWithNonExectuableTokenSerialization --> generateNonExecutableJson,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.SecurityTest,testJsonWithNonExectuableTokenSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.SecurityTest,testJsonWithNonExectuableTokenSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.SecurityTest,testJsonWithNonExectuableTokenSerialization --> assertTrue,com.google.gson.functional.SecurityTest,);
Call(METHOD,com.google.gson.functional.SecurityTest,testJsonWithNonExectuableTokenSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.SecurityTest,testJsonWithNonExectuableTokenWithRegularGsonDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.SecurityTest,testJsonWithNonExectuableTokenWithRegularGsonDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.SecurityTest,testJsonWithNonExectuableTokenWithRegularGsonDeserialization --> assertEquals,com.google.gson.functional.SecurityTest,);
Call(METHOD,com.google.gson.functional.SecurityTest,testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization --> generateNonExecutableJson,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.SecurityTest,testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.SecurityTest,testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.SecurityTest,testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization --> assertEquals,com.google.gson.functional.SecurityTest,);
Call(METHOD,com.google.gson.functional.SecurityTest,testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization --> assertEquals,com.google.gson.functional.SecurityTest,);
EndClass 147
StartClass 148
Class(com.google.gson.functional.SerializedNameTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,Y,);
Method(testFirstNameIsChosenForSerialization,void,Public,N,N);
Method(testMultipleNamesDeserializedCorrectly,void,Public,N,N);
Method(testMultipleNamesInTheSameString,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.SerializedNameTest,testFirstNameIsChosenForSerialization --> assertEquals,com.google.gson.functional.SerializedNameTest,);
Call(METHOD,com.google.gson.functional.SerializedNameTest,testFirstNameIsChosenForSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.SerializedNameTest,testMultipleNamesDeserializedCorrectly --> assertEquals,com.google.gson.functional.SerializedNameTest,);
Call(METHOD,com.google.gson.functional.SerializedNameTest,testMultipleNamesDeserializedCorrectly --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.SerializedNameTest,testMultipleNamesDeserializedCorrectly --> assertEquals,com.google.gson.functional.SerializedNameTest,);
Call(METHOD,com.google.gson.functional.SerializedNameTest,testMultipleNamesDeserializedCorrectly --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.SerializedNameTest,testMultipleNamesDeserializedCorrectly --> assertEquals,com.google.gson.functional.SerializedNameTest,);
Call(METHOD,com.google.gson.functional.SerializedNameTest,testMultipleNamesDeserializedCorrectly --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.SerializedNameTest,testMultipleNamesDeserializedCorrectly --> assertEquals,com.google.gson.functional.SerializedNameTest,);
Call(METHOD,com.google.gson.functional.SerializedNameTest,testMultipleNamesDeserializedCorrectly --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.SerializedNameTest,testMultipleNamesInTheSameString --> assertEquals,com.google.gson.functional.SerializedNameTest,);
Call(METHOD,com.google.gson.functional.SerializedNameTest,testMultipleNamesInTheSameString --> fromJson,com.google.gson.Gson,);
EndClass 148
StartClass 149
Class(com.google.gson.functional.StreamingTypeAdaptersTest,N,N,Public);
Attribute(miniGson,com.google.gson.Gson,Private,N,N,);
Attribute(truckAdapter,com.google.gson.TypeAdapter,Private,N,N,);
Attribute(mapAdapter,com.google.gson.TypeAdapter,Private,N,N,);
Method(testSerialize,void,Public,N,N);
Method(testDeserialize,void,Public,N,N);
Method(testSerializeNullField,void,Public,N,N);
Method(testDeserializeNullField,void,Public,N,N);
Method(testSerializeNullObject,void,Public,N,N);
Method(testDeserializeNullObject,void,Public,N,N);
Method(testSerializeWithCustomTypeAdapter,void,Public,N,N);
Method(testDeserializeWithCustomTypeAdapter,void,Public,N,N);
Method(usePersonNameAdapter,void,Private,N,N);
Method(read,com.google.gson.functional.Person,Public,N,N);
Method(write,void,Public,N,N);
Method(testSerializeMap,void,Public,N,N);
Method(testDeserializeMap,void,Public,N,N);
Method(testSerialize1dArray,void,Public,N,N);
Method(testDeserialize1dArray,void,Public,N,N);
Method(testSerialize2dArray,void,Public,N,N);
Method(testDeserialize2dArray,void,Public,N,N);
Method(testNullSafe,void,Public,N,N);
Method(read$2,com.google.gson.functional.Person,Public,N,N);
Method(write$2,void,Public,N,N);
Method(testSerializeRecursive,void,Public,N,N);
Method(testFromJsonTree,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.functional.Person,);
Parameter(read$2,com.google.gson.stream.JsonReader,);
Parameter(write$2,com.google.gson.stream.JsonWriter,);
Parameter(write$2,com.google.gson.functional.Person,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerialize --> asList,null,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerialize --> assertEquals,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerialize --> toJson,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerialize --> replace,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserialize --> fromJson,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserialize --> replace,java.lang.String,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserialize --> assertEquals,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserialize --> assertEquals,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserialize --> asList,null,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerializeNullField --> assertEquals,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerializeNullField --> toJson,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerializeNullField --> replace,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserializeNullField --> fromJson,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserializeNullField --> replace,java.lang.String,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserializeNullField --> assertNull,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerializeNullObject --> asList,null,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerializeNullObject --> assertEquals,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerializeNullObject --> toJson,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerializeNullObject --> replace,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserializeNullObject --> fromJson,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserializeNullObject --> replace,java.lang.String,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserializeNullObject --> assertEquals,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserializeNullObject --> asList,null,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerializeWithCustomTypeAdapter --> usePersonNameAdapter,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerializeWithCustomTypeAdapter --> asList,null,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerializeWithCustomTypeAdapter --> assertEquals,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerializeWithCustomTypeAdapter --> toJson,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerializeWithCustomTypeAdapter --> replace,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserializeWithCustomTypeAdapter --> usePersonNameAdapter,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserializeWithCustomTypeAdapter --> fromJson,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserializeWithCustomTypeAdapter --> replace,java.lang.String,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserializeWithCustomTypeAdapter --> assertEquals,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserializeWithCustomTypeAdapter --> asList,null,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,read --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,write --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,write --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,write --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,write --> getAdapter,com.google.gson.Gson,);
Call(ATTRIBUTE,com.google.gson.functional.StreamingTypeAdaptersTest,write --> miniGson,com.google.gson.Gson,WRITE);
Call(ATTRIBUTE,com.google.gson.functional.StreamingTypeAdaptersTest,write --> truckAdapter,com.google.gson.TypeAdapter,WRITE);
Call(ATTRIBUTE,com.google.gson.functional.StreamingTypeAdaptersTest,write --> miniGson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerializeMap --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerializeMap --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerializeMap --> assertEquals,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerializeMap --> toJson,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerializeMap --> replace,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserializeMap --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserializeMap --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserializeMap --> assertEquals,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserializeMap --> fromJson,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserializeMap --> replace,java.lang.String,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerialize1dArray --> getAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerialize1dArray --> assertEquals,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerialize1dArray --> toJson,com.google.gson.functional.TypeAdapter,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserialize1dArray --> getAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserialize1dArray --> fromJson,com.google.gson.functional.TypeAdapter,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserialize1dArray --> assertTrue,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserialize1dArray --> toString,null,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserialize1dArray --> equals,null,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerialize2dArray --> getAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerialize2dArray --> assertEquals,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerialize2dArray --> toJson,com.google.gson.functional.TypeAdapter,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserialize2dArray --> getAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserialize2dArray --> fromJson,com.google.gson.functional.TypeAdapter,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserialize2dArray --> assertTrue,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserialize2dArray --> toString,null,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testDeserialize2dArray --> deepEquals,null,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,read$2 --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,read$2 --> split,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,read$2 --> parseInt,null,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,write$2 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,write$2 --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,write$2 --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,write$2 --> add,com.google.gson.functional.Truck,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,write$2 --> add,com.google.gson.functional.Truck,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,write$2 --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,write$2 --> fail,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,write$2 --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,write$2 --> fail,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,write$2 --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,write$2 --> nullSafe,null,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,write$2 --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,write$2 --> assertEquals,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,write$2 --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,write$2 --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,write$2 --> assertEquals,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,write$2 --> assertNull,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,write$2 --> get,com.google.gson.functional.Truck,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,write$2 --> assertEquals,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,write$2 --> get,com.google.gson.functional.Truck,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerializeRecursive --> getAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerializeRecursive --> assertEquals,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerializeRecursive --> toJson,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testSerializeRecursive --> replace,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testFromJsonTree --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testFromJsonTree --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testFromJsonTree --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testFromJsonTree --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testFromJsonTree --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testFromJsonTree --> fromJsonTree,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testFromJsonTree --> assertEquals,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testFromJsonTree --> assertEquals,com.google.gson.functional.StreamingTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testFromJsonTree --> asList,null,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest,testFromJsonTree --> emptyList,null,);
EndClass 149
StartClass 150
Class(com.google.gson.functional.Person,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 150
StartClass 151
Class(com.google.gson.functional.Truck,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 151
StartClass 152
Class(com.google.gson.functional.StringTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testStringValueSerialization,void,Public,N,N);
Method(testStringValueDeserialization,void,Public,N,N);
Method(testSingleQuoteInStringSerialization,void,Public,N,N);
Method(testEscapedCtrlNInStringSerialization,void,Public,N,N);
Method(testEscapedCtrlNInStringDeserialization,void,Public,N,N);
Method(testEscapedCtrlRInStringSerialization,void,Public,N,N);
Method(testEscapedCtrlRInStringDeserialization,void,Public,N,N);
Method(testEscapedBackslashInStringSerialization,void,Public,N,N);
Method(testEscapedBackslashInStringDeserialization,void,Public,N,N);
Method(testSingleQuoteInStringDeserialization,void,Public,N,N);
Method(testEscapingQuotesInStringSerialization,void,Public,N,N);
Method(testEscapingQuotesInStringDeserialization,void,Public,N,N);
Method(testStringValueAsSingleElementArraySerialization,void,Public,N,N);
Method(testStringWithEscapedSlashDeserialization,void,Public,N,N);
Method(testAssignmentCharSerialization,void,Public,N,N);
Method(testAssignmentCharDeserialization,void,Public,N,N);
Method(testJavascriptKeywordsInStringSerialization,void,Public,N,N);
Method(testJavascriptKeywordsInStringDeserialization,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.StringTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.StringTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.StringTest,testStringValueSerialization --> assertEquals,com.google.gson.functional.StringTest,);
Call(METHOD,com.google.gson.functional.StringTest,testStringValueSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StringTest,testStringValueDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StringTest,testStringValueDeserialization --> assertEquals,com.google.gson.functional.StringTest,);
Call(METHOD,com.google.gson.functional.StringTest,testSingleQuoteInStringSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StringTest,testSingleQuoteInStringSerialization --> assertEquals,com.google.gson.functional.StringTest,);
Call(METHOD,com.google.gson.functional.StringTest,testSingleQuoteInStringSerialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StringTest,testEscapedCtrlNInStringSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StringTest,testEscapedCtrlNInStringSerialization --> assertEquals,com.google.gson.functional.StringTest,);
Call(METHOD,com.google.gson.functional.StringTest,testEscapedCtrlNInStringDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StringTest,testEscapedCtrlNInStringDeserialization --> assertEquals,com.google.gson.functional.StringTest,);
Call(METHOD,com.google.gson.functional.StringTest,testEscapedCtrlRInStringSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StringTest,testEscapedCtrlRInStringSerialization --> assertEquals,com.google.gson.functional.StringTest,);
Call(METHOD,com.google.gson.functional.StringTest,testEscapedCtrlRInStringDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StringTest,testEscapedCtrlRInStringDeserialization --> assertEquals,com.google.gson.functional.StringTest,);
Call(METHOD,com.google.gson.functional.StringTest,testEscapedBackslashInStringSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StringTest,testEscapedBackslashInStringSerialization --> assertEquals,com.google.gson.functional.StringTest,);
Call(METHOD,com.google.gson.functional.StringTest,testEscapedBackslashInStringDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StringTest,testEscapedBackslashInStringDeserialization --> assertEquals,com.google.gson.functional.StringTest,);
Call(METHOD,com.google.gson.functional.StringTest,testSingleQuoteInStringDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StringTest,testSingleQuoteInStringDeserialization --> assertEquals,com.google.gson.functional.StringTest,);
Call(METHOD,com.google.gson.functional.StringTest,testEscapingQuotesInStringSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StringTest,testEscapingQuotesInStringSerialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StringTest,testEscapingQuotesInStringSerialization --> assertEquals,com.google.gson.functional.StringTest,);
Call(METHOD,com.google.gson.functional.StringTest,testEscapingQuotesInStringDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StringTest,testEscapingQuotesInStringDeserialization --> assertEquals,com.google.gson.functional.StringTest,);
Call(METHOD,com.google.gson.functional.StringTest,testStringValueAsSingleElementArraySerialization --> assertEquals,com.google.gson.functional.StringTest,);
Call(METHOD,com.google.gson.functional.StringTest,testStringValueAsSingleElementArraySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StringTest,testStringValueAsSingleElementArraySerialization --> assertEquals,com.google.gson.functional.StringTest,);
Call(METHOD,com.google.gson.functional.StringTest,testStringValueAsSingleElementArraySerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StringTest,testStringWithEscapedSlashDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StringTest,testStringWithEscapedSlashDeserialization --> assertEquals,com.google.gson.functional.StringTest,);
Call(METHOD,com.google.gson.functional.StringTest,testAssignmentCharSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StringTest,testAssignmentCharSerialization --> assertEquals,com.google.gson.functional.StringTest,);
Call(METHOD,com.google.gson.functional.StringTest,testAssignmentCharDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StringTest,testAssignmentCharDeserialization --> assertEquals,com.google.gson.functional.StringTest,);
Call(METHOD,com.google.gson.functional.StringTest,testAssignmentCharDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StringTest,testAssignmentCharDeserialization --> assertEquals,com.google.gson.functional.StringTest,);
Call(ATTRIBUTE,com.google.gson.functional.StringTest,testAssignmentCharDeserialization --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.StringTest,testJavascriptKeywordsInStringSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StringTest,testJavascriptKeywordsInStringSerialization --> assertEquals,com.google.gson.functional.StringTest,);
Call(METHOD,com.google.gson.functional.StringTest,testJavascriptKeywordsInStringDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.StringTest,testJavascriptKeywordsInStringDeserialization --> assertEquals,com.google.gson.functional.StringTest,);
Call(METHOD,com.google.gson.functional.StringTest,testJavascriptKeywordsInStringDeserialization --> substring,java.lang.String,);
Call(METHOD,com.google.gson.functional.StringTest,testJavascriptKeywordsInStringDeserialization --> length,java.lang.String,);
EndClass 152
StartClass 153
Class(com.google.gson.functional.ThrowableFunctionalTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,Y,);
Method(testExceptionWithoutCause,void,Public,N,N);
Method(testExceptionWithCause,void,Public,N,N);
Method(testSerializedNameOnExceptionFields,void,Public,N,N);
Method(testErrorWithoutCause,void,Public,N,N);
Method(testErrornWithCause,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testExceptionWithoutCause --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testExceptionWithoutCause --> assertTrue,com.google.gson.functional.ThrowableFunctionalTest,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testExceptionWithoutCause --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testExceptionWithoutCause --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testExceptionWithoutCause --> assertEquals,com.google.gson.functional.ThrowableFunctionalTest,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testExceptionWithoutCause --> getMessage,java.lang.RuntimeException,);
Call(ATTRIBUTE,com.google.gson.functional.ThrowableFunctionalTest,testExceptionWithoutCause --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testExceptionWithCause --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testExceptionWithCause --> assertTrue,com.google.gson.functional.ThrowableFunctionalTest,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testExceptionWithCause --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testExceptionWithCause --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testExceptionWithCause --> assertEquals,com.google.gson.functional.ThrowableFunctionalTest,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testExceptionWithCause --> getMessage,java.lang.Exception,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testExceptionWithCause --> assertTrue,com.google.gson.functional.ThrowableFunctionalTest,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testExceptionWithCause --> getCause,java.lang.Exception,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testExceptionWithCause --> assertEquals,com.google.gson.functional.ThrowableFunctionalTest,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testExceptionWithCause --> getCause,java.lang.Exception,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testExceptionWithCause --> getMessage,java.lang.Exception,);
Call(ATTRIBUTE,com.google.gson.functional.ThrowableFunctionalTest,testExceptionWithCause --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testSerializedNameOnExceptionFields --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testSerializedNameOnExceptionFields --> assertTrue,com.google.gson.functional.ThrowableFunctionalTest,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testSerializedNameOnExceptionFields --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testErrorWithoutCause --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testErrorWithoutCause --> assertTrue,com.google.gson.functional.ThrowableFunctionalTest,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testErrorWithoutCause --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testErrorWithoutCause --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testErrorWithoutCause --> assertEquals,com.google.gson.functional.ThrowableFunctionalTest,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testErrorWithoutCause --> getMessage,java.lang.OutOfMemoryError,);
Call(ATTRIBUTE,com.google.gson.functional.ThrowableFunctionalTest,testErrorWithoutCause --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testErrornWithCause --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testErrornWithCause --> assertTrue,com.google.gson.functional.ThrowableFunctionalTest,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testErrornWithCause --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testErrornWithCause --> assertTrue,com.google.gson.functional.ThrowableFunctionalTest,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testErrornWithCause --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testErrornWithCause --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testErrornWithCause --> assertEquals,com.google.gson.functional.ThrowableFunctionalTest,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testErrornWithCause --> getMessage,java.lang.Error,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testErrornWithCause --> assertTrue,com.google.gson.functional.ThrowableFunctionalTest,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testErrornWithCause --> getCause,java.lang.Error,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testErrornWithCause --> assertEquals,com.google.gson.functional.ThrowableFunctionalTest,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testErrornWithCause --> getCause,java.lang.Error,);
Call(METHOD,com.google.gson.functional.ThrowableFunctionalTest,testErrornWithCause --> getMessage,java.lang.Error,);
Call(ATTRIBUTE,com.google.gson.functional.ThrowableFunctionalTest,testErrornWithCause --> gson,com.google.gson.Gson,READ);
EndClass 153
StartClass 154
Class(java.lang.RuntimeException,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.JsonIOException);
SubClass(com.google.gson.JsonParseException);
EndClass 154
StartClass 155
Class(com.google.gson.JsonIOException,N,N,Public);
Attribute(serialVersionUID,long,Private,Y,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,java.lang.Throwable,);
Parameter(<init>$3,java.lang.Throwable,);
SuperClass(com.google.gson.JsonParseException);
SuperClass(java.lang.RuntimeException);
Generalization(com.google.gson.JsonParseException);
Call(METHOD,com.google.gson.JsonIOException,<init> --> <init>,com.google.gson.JsonParseException,);
Call(METHOD,com.google.gson.JsonIOException,<init>$2 --> <init>$2,com.google.gson.JsonParseException,);
Call(METHOD,com.google.gson.JsonIOException,<init>$3 --> <init>$3,com.google.gson.JsonParseException,);
EndClass 155
StartClass 156
Class(com.google.gson.JsonParseException,N,N,Public);
Attribute(serialVersionUID,long,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,java.lang.Throwable,);
Parameter(<init>$3,java.lang.Throwable,);
SubClass(com.google.gson.JsonIOException);
SubClass(com.google.gson.JsonSyntaxException);
SuperClass(java.lang.RuntimeException);
Generalization(java.lang.RuntimeException);
Call(METHOD,com.google.gson.JsonParseException,<init> --> super,com.google.gson.JsonParseException,);
Call(METHOD,com.google.gson.JsonParseException,<init>$2 --> super,com.google.gson.JsonParseException,);
Call(METHOD,com.google.gson.JsonParseException,<init>$3 --> super,com.google.gson.JsonParseException,);
EndClass 156
StartClass 157
Class(com.google.gson.JsonSyntaxException,N,N,Public);
Attribute(serialVersionUID,long,Private,Y,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,java.lang.Throwable,);
Parameter(<init>$3,java.lang.Throwable,);
SuperClass(com.google.gson.JsonParseException);
Generalization(com.google.gson.JsonParseException);
Call(METHOD,com.google.gson.JsonSyntaxException,<init> --> <init>,com.google.gson.JsonParseException,);
Call(METHOD,com.google.gson.JsonSyntaxException,<init>$2 --> <init>$2,com.google.gson.JsonParseException,);
Call(METHOD,com.google.gson.JsonSyntaxException,<init>$3 --> <init>$3,com.google.gson.JsonParseException,);
EndClass 157
StartClass 158
Class(com.google.gson.functional.TreeTypeAdaptersTest,N,N,Public);
Attribute(STUDENT1_ID,com.google.gson.functional.Id,Private,Y,Y,);
Attribute(STUDENT2_ID,com.google.gson.functional.Id,Private,Y,Y,);
Attribute(STUDENT1,com.google.gson.functional.Student,Private,Y,Y,);
Attribute(STUDENT2,com.google.gson.functional.Student,Private,Y,Y,);
Attribute(TYPE_COURSE_HISTORY,java.lang.reflect.Type,Private,Y,Y,);
Attribute(COURSE_ID,com.google.gson.functional.Id,Private,Y,Y,);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Attribute(course,com.google.gson.functional.Course,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testSerializeId,void,Public,N,N);
Method(testDeserializeId,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.functional.Student);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,setUp --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,setUp --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,setUp --> createList,com.google.gson.functional.TreeTypeAdaptersTest,);
Call(ATTRIBUTE,com.google.gson.functional.TreeTypeAdaptersTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(ATTRIBUTE,com.google.gson.functional.TreeTypeAdaptersTest,setUp --> course,com.google.gson.functional.Course,WRITE);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testSerializeId --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testSerializeId --> assertTrue,com.google.gson.functional.TreeTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testSerializeId --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testSerializeId --> valueOf,null,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testSerializeId --> getValue,com.google.gson.functional.Id,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testSerializeId --> assertTrue,com.google.gson.functional.TreeTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testSerializeId --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testSerializeId --> valueOf,null,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testSerializeId --> getValue,com.google.gson.functional.Id,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testSerializeId --> assertTrue,com.google.gson.functional.TreeTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testSerializeId --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testSerializeId --> valueOf,null,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testSerializeId --> getValue,com.google.gson.functional.Id,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testDeserializeId --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testDeserializeId --> assertEquals,com.google.gson.functional.TreeTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testDeserializeId --> getStudents,com.google.gson.functional.Course,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testDeserializeId --> get,com.google.gson.functional.Course,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testDeserializeId --> getValue,com.google.gson.functional.Course,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testDeserializeId --> assertEquals,com.google.gson.functional.TreeTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testDeserializeId --> getStudents,com.google.gson.functional.Course,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testDeserializeId --> get,com.google.gson.functional.Course,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testDeserializeId --> getValue,com.google.gson.functional.Course,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testDeserializeId --> assertEquals,com.google.gson.functional.TreeTypeAdaptersTest,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testDeserializeId --> getId,com.google.gson.functional.Course,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest,testDeserializeId --> getValue,com.google.gson.functional.Course,);
EndClass 158
StartClass 159
Class(com.google.gson.functional.Student,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 159
StartClass 160
Class(com.google.gson.functional.TypeAdapterPrecedenceTest,N,N,Public);
Method(testNonstreamingFollowedByNonstreaming,void,Public,N,N);
Method(testStreamingFollowedByStreaming,void,Public,N,N);
Method(testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter,void,Public,N,N);
Method(testStreamingFollowedByNonstreaming,void,Public,N,N);
Method(testStreamingHierarchicalFollowedByNonstreaming,void,Public,N,N);
Method(testStreamingFollowedByNonstreamingHierarchical,void,Public,N,N);
Method(testStreamingHierarchicalFollowedByNonstreamingHierarchical,void,Public,N,N);
Method(testNonstreamingHierarchicalFollowedByNonstreaming,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingFollowedByNonstreaming --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingFollowedByNonstreaming --> newSerializer,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingFollowedByNonstreaming --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingFollowedByNonstreaming --> newSerializer,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingFollowedByNonstreaming --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingFollowedByNonstreaming --> newDeserializer,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingFollowedByNonstreaming --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingFollowedByNonstreaming --> newDeserializer,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingFollowedByNonstreaming --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingFollowedByNonstreaming --> assertEquals,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingFollowedByNonstreaming --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingFollowedByNonstreaming --> assertEquals,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingFollowedByNonstreaming --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByStreaming --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByStreaming --> newTypeAdapter,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByStreaming --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByStreaming --> newTypeAdapter,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByStreaming --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByStreaming --> assertEquals,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByStreaming --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByStreaming --> assertEquals,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByStreaming --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter --> newSerializer,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter --> newDeserializer,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter --> newTypeAdapter,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter --> assertEquals,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter --> assertEquals,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByNonstreaming --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByNonstreaming --> newTypeAdapter,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByNonstreaming --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByNonstreaming --> newSerializer,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByNonstreaming --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByNonstreaming --> newDeserializer,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByNonstreaming --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByNonstreaming --> assertEquals,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByNonstreaming --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByNonstreaming --> assertEquals,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByNonstreaming --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingHierarchicalFollowedByNonstreaming --> registerTypeHierarchyAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingHierarchicalFollowedByNonstreaming --> newTypeAdapter,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingHierarchicalFollowedByNonstreaming --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingHierarchicalFollowedByNonstreaming --> newSerializer,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingHierarchicalFollowedByNonstreaming --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingHierarchicalFollowedByNonstreaming --> newDeserializer,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingHierarchicalFollowedByNonstreaming --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingHierarchicalFollowedByNonstreaming --> assertEquals,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingHierarchicalFollowedByNonstreaming --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingHierarchicalFollowedByNonstreaming --> assertEquals,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingHierarchicalFollowedByNonstreaming --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByNonstreamingHierarchical --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByNonstreamingHierarchical --> newTypeAdapter,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByNonstreamingHierarchical --> registerTypeHierarchyAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByNonstreamingHierarchical --> newSerializer,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByNonstreamingHierarchical --> registerTypeHierarchyAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByNonstreamingHierarchical --> newDeserializer,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByNonstreamingHierarchical --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByNonstreamingHierarchical --> assertEquals,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByNonstreamingHierarchical --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByNonstreamingHierarchical --> assertEquals,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingFollowedByNonstreamingHierarchical --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingHierarchicalFollowedByNonstreamingHierarchical --> registerTypeHierarchyAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingHierarchicalFollowedByNonstreamingHierarchical --> newSerializer,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingHierarchicalFollowedByNonstreamingHierarchical --> registerTypeHierarchyAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingHierarchicalFollowedByNonstreamingHierarchical --> newDeserializer,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingHierarchicalFollowedByNonstreamingHierarchical --> registerTypeHierarchyAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingHierarchicalFollowedByNonstreamingHierarchical --> newTypeAdapter,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingHierarchicalFollowedByNonstreamingHierarchical --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingHierarchicalFollowedByNonstreamingHierarchical --> assertEquals,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingHierarchicalFollowedByNonstreamingHierarchical --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingHierarchicalFollowedByNonstreamingHierarchical --> assertEquals,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testStreamingHierarchicalFollowedByNonstreamingHierarchical --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingHierarchicalFollowedByNonstreaming --> registerTypeHierarchyAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingHierarchicalFollowedByNonstreaming --> newSerializer,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingHierarchicalFollowedByNonstreaming --> registerTypeHierarchyAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingHierarchicalFollowedByNonstreaming --> newDeserializer,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingHierarchicalFollowedByNonstreaming --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingHierarchicalFollowedByNonstreaming --> newSerializer,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingHierarchicalFollowedByNonstreaming --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingHierarchicalFollowedByNonstreaming --> newDeserializer,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingHierarchicalFollowedByNonstreaming --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingHierarchicalFollowedByNonstreaming --> assertEquals,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingHierarchicalFollowedByNonstreaming --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingHierarchicalFollowedByNonstreaming --> assertEquals,com.google.gson.functional.TypeAdapterPrecedenceTest,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest,testNonstreamingHierarchicalFollowedByNonstreaming --> fromJson,com.google.gson.Gson,);
EndClass 160
StartClass 161
Class(com.google.gson.functional.TypeHierarchyAdapterTest,N,N,Public);
Method(testTypeHierarchy,void,Public,N,N);
Method(testRegisterSuperTypeFirst,void,Public,N,N);
Method(testRegisterSubTypeFirstAllowed,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testTypeHierarchy --> registerTypeHierarchyAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testTypeHierarchy --> setPrettyPrinting,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testTypeHierarchy --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testTypeHierarchy --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testTypeHierarchy --> assertEquals,com.google.gson.functional.TypeHierarchyAdapterTest,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testTypeHierarchy --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testTypeHierarchy --> assertEquals,com.google.gson.functional.TypeHierarchyAdapterTest,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testTypeHierarchy --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testTypeHierarchy --> assertEquals,com.google.gson.functional.TypeHierarchyAdapterTest,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testTypeHierarchy --> assertEquals,com.google.gson.functional.TypeHierarchyAdapterTest,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testTypeHierarchy --> assertEquals,com.google.gson.functional.TypeHierarchyAdapterTest,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testTypeHierarchy --> assertEquals,com.google.gson.functional.TypeHierarchyAdapterTest,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testTypeHierarchy --> assertEquals,com.google.gson.functional.TypeHierarchyAdapterTest,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testTypeHierarchy --> assertEquals,com.google.gson.functional.TypeHierarchyAdapterTest,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testTypeHierarchy --> assertEquals,com.google.gson.functional.TypeHierarchyAdapterTest,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testRegisterSuperTypeFirst --> registerTypeHierarchyAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testRegisterSuperTypeFirst --> registerTypeHierarchyAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testRegisterSuperTypeFirst --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testRegisterSuperTypeFirst --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testRegisterSuperTypeFirst --> assertEquals,com.google.gson.functional.TypeHierarchyAdapterTest,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testRegisterSuperTypeFirst --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testRegisterSuperTypeFirst --> assertEquals,com.google.gson.functional.TypeHierarchyAdapterTest,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testRegisterSubTypeFirstAllowed --> registerTypeHierarchyAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testRegisterSubTypeFirstAllowed --> registerTypeHierarchyAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest,testRegisterSubTypeFirstAllowed --> create,com.google.gson.GsonBuilder,);
EndClass 161
StartClass 162
Class(com.google.gson.functional.TypeVariableTest,N,N,Public);
Method(testAdvancedTypeVariables,void,Public,N,N);
Method(testTypeVariablesViaTypeParameter,void,Public,N,N);
Method(testBasicTypeVariables,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.functional.TypeVariableTest,testAdvancedTypeVariables --> add,java.util.ArrayList,);
Call(METHOD,com.google.gson.functional.TypeVariableTest,testAdvancedTypeVariables --> add,java.util.ArrayList,);
Call(METHOD,com.google.gson.functional.TypeVariableTest,testAdvancedTypeVariables --> add,java.util.ArrayList,);
Call(METHOD,com.google.gson.functional.TypeVariableTest,testAdvancedTypeVariables --> put,com.google.gson.functional.Bar,);
Call(METHOD,com.google.gson.functional.TypeVariableTest,testAdvancedTypeVariables --> put,com.google.gson.functional.Bar,);
Call(METHOD,com.google.gson.functional.TypeVariableTest,testAdvancedTypeVariables --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeVariableTest,testAdvancedTypeVariables --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeVariableTest,testAdvancedTypeVariables --> assertEquals,com.google.gson.functional.TypeVariableTest,);
Call(METHOD,com.google.gson.functional.TypeVariableTest,testTypeVariablesViaTypeParameter --> put,com.google.gson.functional.Foo,);
Call(METHOD,com.google.gson.functional.TypeVariableTest,testTypeVariablesViaTypeParameter --> asList,null,);
Call(METHOD,com.google.gson.functional.TypeVariableTest,testTypeVariablesViaTypeParameter --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.TypeVariableTest,testTypeVariablesViaTypeParameter --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeVariableTest,testTypeVariablesViaTypeParameter --> assertEquals,com.google.gson.functional.TypeVariableTest,);
Call(METHOD,com.google.gson.functional.TypeVariableTest,testTypeVariablesViaTypeParameter --> assertEquals,com.google.gson.functional.TypeVariableTest,);
Call(METHOD,com.google.gson.functional.TypeVariableTest,testBasicTypeVariables --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeVariableTest,testBasicTypeVariables --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.TypeVariableTest,testBasicTypeVariables --> assertEquals,com.google.gson.functional.TypeVariableTest,);
EndClass 162
StartClass 163
Class(com.google.gson.functional.Bar,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 163
StartClass 164
Class(com.google.gson.functional.Foo,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.TypeVariableTest.Blue.Red.Foo.Bar);
EndClass 164
StartClass 165
Class(com.google.gson.functional.TypeVariableTest.Blue.Red.Foo.Bar,N,N,Public);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,java.lang.Integer,);
Parameter(<init>$2,boolean,);
SuperClass(com.google.gson.functional.Foo);
Generalization(com.google.gson.functional.Foo);
Call(METHOD,com.google.gson.functional.TypeVariableTest.Blue.Red.Foo.Bar,<init> --> this,com.google.gson.functional.TypeVariableTest.Blue.Red.Foo.Bar,);
Call(METHOD,com.google.gson.functional.TypeVariableTest.Blue.Red.Foo.Bar,<init>$2 --> super,com.google.gson.functional.TypeVariableTest.Blue.Red.Foo.Bar,);
EndClass 165
StartClass 166
Class(com.google.gson.functional.UncategorizedTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testInvalidJsonDeserializationFails,void,Public,N,N);
Method(testObjectEqualButNotSameSerialization,void,Public,N,N);
Method(testStaticFieldsAreNotSerialized,void,Public,N,N);
Method(testGsonInstanceReusableForSerializationAndDeserialization,void,Public,N,N);
Method(testReturningDerivedClassesDuringDeserialization,void,Public,N,N);
Method(testTrailingWhitespace,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.functional.UncategorizedTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.UncategorizedTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testInvalidJsonDeserializationFails --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testInvalidJsonDeserializationFails --> fail,com.google.gson.functional.UncategorizedTest,);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testInvalidJsonDeserializationFails --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testInvalidJsonDeserializationFails --> fail,com.google.gson.functional.UncategorizedTest,);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testObjectEqualButNotSameSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testObjectEqualButNotSameSerialization --> assertEquals,com.google.gson.functional.UncategorizedTest,);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testObjectEqualButNotSameSerialization --> getExpectedJson,com.google.gson.common.TestTypes.ClassOverridingEquals,);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testStaticFieldsAreNotSerialized --> assertFalse,com.google.gson.functional.UncategorizedTest,);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testStaticFieldsAreNotSerialized --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testStaticFieldsAreNotSerialized --> contains,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testGsonInstanceReusableForSerializationAndDeserialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testGsonInstanceReusableForSerializationAndDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testGsonInstanceReusableForSerializationAndDeserialization --> assertEquals,com.google.gson.functional.UncategorizedTest,);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testReturningDerivedClassesDuringDeserialization --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testReturningDerivedClassesDuringDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testReturningDerivedClassesDuringDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testReturningDerivedClassesDuringDeserialization --> assertTrue,com.google.gson.functional.UncategorizedTest,);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testReturningDerivedClassesDuringDeserialization --> assertEquals,com.google.gson.functional.UncategorizedTest,);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testReturningDerivedClassesDuringDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testReturningDerivedClassesDuringDeserialization --> assertTrue,com.google.gson.functional.UncategorizedTest,);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testReturningDerivedClassesDuringDeserialization --> assertEquals,com.google.gson.functional.UncategorizedTest,);
Call(ATTRIBUTE,com.google.gson.functional.UncategorizedTest,testReturningDerivedClassesDuringDeserialization --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testTrailingWhitespace --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testTrailingWhitespace --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testTrailingWhitespace --> assertEquals,com.google.gson.functional.UncategorizedTest,);
Call(METHOD,com.google.gson.functional.UncategorizedTest,testTrailingWhitespace --> asList,null,);
EndClass 166
StartClass 167
Class(com.google.gson.functional.VersioningTest,N,N,Public);
Attribute(A,int,Private,Y,Y,);
Attribute(B,int,Private,Y,Y,);
Attribute(C,int,Private,Y,Y,);
Attribute(D,int,Private,Y,Y,);
Attribute(builder,com.google.gson.GsonBuilder,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testVersionedUntilSerialization,void,Public,N,N);
Method(testVersionedUntilDeserialization,void,Public,N,N);
Method(testVersionedClassesSerialization,void,Public,N,N);
Method(testVersionedClassesDeserialization,void,Public,N,N);
Method(testIgnoreLaterVersionClassSerialization,void,Public,N,N);
Method(testIgnoreLaterVersionClassDeserialization,void,Public,N,N);
Method(testVersionedGsonWithUnversionedClassesSerialization,void,Public,N,N);
Method(testVersionedGsonWithUnversionedClassesDeserialization,void,Public,N,N);
Method(testVersionedGsonMixingSinceAndUntilSerialization,void,Public,N,N);
Method(testVersionedGsonMixingSinceAndUntilDeserialization,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.GsonBuilder);
Call(METHOD,com.google.gson.functional.VersioningTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.functional.VersioningTest,setUp --> builder,com.google.gson.GsonBuilder,WRITE);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedUntilSerialization --> setVersion,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedUntilSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedUntilSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedUntilSerialization --> assertTrue,com.google.gson.functional.VersioningTest,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedUntilSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedUntilSerialization --> setVersion,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedUntilSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedUntilSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedUntilSerialization --> assertFalse,com.google.gson.functional.VersioningTest,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedUntilSerialization --> contains,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.functional.VersioningTest,testVersionedUntilSerialization --> builder,com.google.gson.GsonBuilder,READ);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedUntilDeserialization --> setVersion,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedUntilDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedUntilDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedUntilDeserialization --> assertEquals,com.google.gson.functional.VersioningTest,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedClassesSerialization --> setVersion,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedClassesSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedClassesSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedClassesSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedClassesSerialization --> assertEquals,com.google.gson.functional.VersioningTest,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedClassesDeserialization --> setVersion,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedClassesDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedClassesDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedClassesDeserialization --> assertEquals,com.google.gson.functional.VersioningTest,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedClassesDeserialization --> assertEquals,com.google.gson.functional.VersioningTest,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedClassesDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedClassesDeserialization --> assertEquals,com.google.gson.functional.VersioningTest,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedClassesDeserialization --> assertEquals,com.google.gson.functional.VersioningTest,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedClassesDeserialization --> assertEquals,com.google.gson.functional.VersioningTest,);
Call(METHOD,com.google.gson.functional.VersioningTest,testIgnoreLaterVersionClassSerialization --> setVersion,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testIgnoreLaterVersionClassSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testIgnoreLaterVersionClassSerialization --> assertEquals,com.google.gson.functional.VersioningTest,);
Call(METHOD,com.google.gson.functional.VersioningTest,testIgnoreLaterVersionClassSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.VersioningTest,testIgnoreLaterVersionClassDeserialization --> setVersion,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testIgnoreLaterVersionClassDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testIgnoreLaterVersionClassDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.VersioningTest,testIgnoreLaterVersionClassDeserialization --> assertNull,com.google.gson.functional.VersioningTest,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonWithUnversionedClassesSerialization --> setVersion,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonWithUnversionedClassesSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonWithUnversionedClassesSerialization --> assertEquals,com.google.gson.functional.VersioningTest,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonWithUnversionedClassesSerialization --> getExpectedJson,com.google.gson.common.TestTypes.BagOfPrimitives,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonWithUnversionedClassesSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonWithUnversionedClassesDeserialization --> setVersion,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonWithUnversionedClassesDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonWithUnversionedClassesDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonWithUnversionedClassesDeserialization --> assertEquals,com.google.gson.functional.VersioningTest,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilSerialization --> setVersion,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilSerialization --> assertFalse,com.google.gson.functional.VersioningTest,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilSerialization --> setVersion,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilSerialization --> assertTrue,com.google.gson.functional.VersioningTest,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilSerialization --> setVersion,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilSerialization --> assertFalse,com.google.gson.functional.VersioningTest,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilSerialization --> contains,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilSerialization --> builder,com.google.gson.GsonBuilder,READ);
Call(ATTRIBUTE,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilSerialization --> builder,com.google.gson.GsonBuilder,READ);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilDeserialization --> setVersion,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilDeserialization --> assertEquals,com.google.gson.functional.VersioningTest,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilDeserialization --> assertEquals,com.google.gson.functional.VersioningTest,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilDeserialization --> setVersion,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilDeserialization --> assertEquals,com.google.gson.functional.VersioningTest,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilDeserialization --> assertEquals,com.google.gson.functional.VersioningTest,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilDeserialization --> setVersion,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilDeserialization --> assertEquals,com.google.gson.functional.VersioningTest,);
Call(METHOD,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilDeserialization --> assertEquals,com.google.gson.functional.VersioningTest,);
Call(ATTRIBUTE,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilDeserialization --> builder,com.google.gson.GsonBuilder,READ);
Call(ATTRIBUTE,com.google.gson.functional.VersioningTest,testVersionedGsonMixingSinceAndUntilDeserialization --> builder,com.google.gson.GsonBuilder,READ);
EndClass 167
StartClass 168
Class(com.google.gson.GenericArrayTypeTest,N,N,Public);
Attribute(ourType,java.lang.reflect.GenericArrayType,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testOurTypeFunctionality,void,Public,N,N);
Method(testNotEquals,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.GenericArrayTypeTest,setUp --> setUp,null,);
Call(METHOD,com.google.gson.GenericArrayTypeTest,setUp --> arrayOf,null,);
Call(METHOD,com.google.gson.GenericArrayTypeTest,setUp --> newParameterizedTypeWithOwner,null,);
Call(ATTRIBUTE,com.google.gson.GenericArrayTypeTest,setUp --> ourType,java.lang.reflect.GenericArrayType,WRITE);
Call(METHOD,com.google.gson.GenericArrayTypeTest,testOurTypeFunctionality --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.GenericArrayTypeTest,testOurTypeFunctionality --> getType,com.google.gson.TypeToken,);
Call(METHOD,com.google.gson.GenericArrayTypeTest,testOurTypeFunctionality --> assertEquals,com.google.gson.GenericArrayTypeTest,);
Call(METHOD,com.google.gson.GenericArrayTypeTest,testOurTypeFunctionality --> getGenericComponentType,java.lang.reflect.GenericArrayType,);
Call(METHOD,com.google.gson.GenericArrayTypeTest,testOurTypeFunctionality --> assertEquals,com.google.gson.GenericArrayTypeTest,);
Call(METHOD,com.google.gson.GenericArrayTypeTest,testOurTypeFunctionality --> assertEquals,com.google.gson.GenericArrayTypeTest,);
Call(METHOD,com.google.gson.GenericArrayTypeTest,testOurTypeFunctionality --> hashCode,java.lang.reflect.Type,);
Call(METHOD,com.google.gson.GenericArrayTypeTest,testOurTypeFunctionality --> hashCode,java.lang.reflect.GenericArrayType,);
Call(METHOD,com.google.gson.GenericArrayTypeTest,testNotEquals --> getType,com.google.gson.TypeToken,);
Call(METHOD,com.google.gson.GenericArrayTypeTest,testNotEquals --> assertFalse,com.google.gson.GenericArrayTypeTest,);
Call(METHOD,com.google.gson.GenericArrayTypeTest,testNotEquals --> equals,java.lang.reflect.Type,);
Call(METHOD,com.google.gson.GenericArrayTypeTest,testNotEquals --> assertFalse,com.google.gson.GenericArrayTypeTest,);
Call(METHOD,com.google.gson.GenericArrayTypeTest,testNotEquals --> equals,java.lang.reflect.GenericArrayType,);
EndClass 168
StartClass 169
Class(com.google.gson.GsonBuilderTest,N,N,Public);
Attribute(NULL_TYPE_ADAPTER,com.google.gson.TypeAdapter,Private,Y,Y,);
Method(write,void,Public,N,N);
Method(read,java.lang.Object,Public,N,N);
Method(testCreatingMoreThanOnce,void,Public,N,N);
Method(testExcludeFieldsWithModifiers,void,Public,N,N);
Method(testRegisterTypeAdapterForCoreType,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,java.lang.Object,);
Parameter(read,com.google.gson.stream.JsonReader,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.TypeAdapter<Object>);
Call(METHOD,com.google.gson.GsonBuilderTest,testCreatingMoreThanOnce --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.GsonBuilderTest,testCreatingMoreThanOnce --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.GsonBuilderTest,testExcludeFieldsWithModifiers --> excludeFieldsWithModifiers,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.GsonBuilderTest,testExcludeFieldsWithModifiers --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.GsonBuilderTest,testExcludeFieldsWithModifiers --> assertEquals,com.google.gson.GsonBuilderTest,);
Call(METHOD,com.google.gson.GsonBuilderTest,testExcludeFieldsWithModifiers --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.GsonBuilderTest,testRegisterTypeAdapterForCoreType --> registerTypeAdapter,com.google.gson.GsonBuilder,);
EndClass 169
StartClass 170
Class(com.google.gson.GsonTest,N,N,Public);
Attribute(CUSTOM_EXCLUDER,com.google.gson.internal.Excluder,Private,Y,Y,);
Attribute(CUSTOM_FIELD_NAMING_STRATEGY,com.google.gson.FieldNamingStrategy,Private,Y,Y,);
Method(translateName,java.lang.String,Public,N,N);
Method(testOverridesDefaultExcluder,void,Public,N,N);
Method(testClonedTypeAdapterFactoryListsAreIndependent,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(translateName,java.lang.reflect.Field,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.internal.Excluder);
Composition(com.google.gson.FieldNamingStrategy);
Call(METHOD,com.google.gson.GsonTest,testOverridesDefaultExcluder --> assertEquals,com.google.gson.GsonTest,);
Call(METHOD,com.google.gson.GsonTest,testOverridesDefaultExcluder --> excluder,com.google.gson.Gson,);
Call(METHOD,com.google.gson.GsonTest,testOverridesDefaultExcluder --> assertEquals,com.google.gson.GsonTest,);
Call(METHOD,com.google.gson.GsonTest,testOverridesDefaultExcluder --> fieldNamingStrategy,com.google.gson.Gson,);
Call(METHOD,com.google.gson.GsonTest,testOverridesDefaultExcluder --> assertEquals,com.google.gson.GsonTest,);
Call(METHOD,com.google.gson.GsonTest,testOverridesDefaultExcluder --> serializeNulls,com.google.gson.Gson,);
Call(METHOD,com.google.gson.GsonTest,testOverridesDefaultExcluder --> assertEquals,com.google.gson.GsonTest,);
Call(METHOD,com.google.gson.GsonTest,testOverridesDefaultExcluder --> htmlSafe,com.google.gson.Gson,);
Call(METHOD,com.google.gson.GsonTest,testClonedTypeAdapterFactoryListsAreIndependent --> newBuilder,com.google.gson.Gson,);
Call(METHOD,com.google.gson.GsonTest,testClonedTypeAdapterFactoryListsAreIndependent --> registerTypeAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.GsonTest,testClonedTypeAdapterFactoryListsAreIndependent --> create,com.google.gson.Gson,);
Call(METHOD,com.google.gson.GsonTest,testClonedTypeAdapterFactoryListsAreIndependent --> assertEquals,com.google.gson.GsonTest,);
Call(METHOD,com.google.gson.GsonTest,testClonedTypeAdapterFactoryListsAreIndependent --> size,com.google.gson.Gson,);
Call(METHOD,com.google.gson.GsonTest,testClonedTypeAdapterFactoryListsAreIndependent --> size,com.google.gson.Gson,);
EndClass 170
StartClass 171
Class(com.google.gson.GsonTypeAdapterTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testDefaultTypeAdapterThrowsParseException,void,Public,N,N);
Method(testTypeAdapterThrowsException,void,Public,N,N);
Method(testTypeAdapterProperlyConvertsTypes,void,Public,N,N);
Method(testTypeAdapterDoesNotAffectNonAdaptedTypes,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.GsonTypeAdapterTest,setUp --> setUp,null,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest,setUp --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest,setUp --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest,setUp --> create,com.google.gson.GsonBuilder,);
Call(ATTRIBUTE,com.google.gson.GsonTypeAdapterTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.GsonTypeAdapterTest,testDefaultTypeAdapterThrowsParseException --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest,testDefaultTypeAdapterThrowsParseException --> fail,com.google.gson.GsonTypeAdapterTest,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest,testTypeAdapterThrowsException --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest,testTypeAdapterThrowsException --> fail,com.google.gson.GsonTypeAdapterTest,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest,testTypeAdapterThrowsException --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest,testTypeAdapterThrowsException --> fail,com.google.gson.GsonTypeAdapterTest,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest,testTypeAdapterProperlyConvertsTypes --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest,testTypeAdapterProperlyConvertsTypes --> assertEquals,com.google.gson.GsonTypeAdapterTest,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest,testTypeAdapterProperlyConvertsTypes --> parseInt,null,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest,testTypeAdapterProperlyConvertsTypes --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest,testTypeAdapterProperlyConvertsTypes --> assertEquals,com.google.gson.GsonTypeAdapterTest,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest,testTypeAdapterProperlyConvertsTypes --> get,java.util.concurrent.atomic.AtomicInteger,);
Call(ATTRIBUTE,com.google.gson.GsonTypeAdapterTest,testTypeAdapterProperlyConvertsTypes --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.GsonTypeAdapterTest,testTypeAdapterDoesNotAffectNonAdaptedTypes --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest,testTypeAdapterDoesNotAffectNonAdaptedTypes --> assertEquals,com.google.gson.GsonTypeAdapterTest,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest,testTypeAdapterDoesNotAffectNonAdaptedTypes --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest,testTypeAdapterDoesNotAffectNonAdaptedTypes --> assertEquals,com.google.gson.GsonTypeAdapterTest,);
Call(ATTRIBUTE,com.google.gson.GsonTypeAdapterTest,testTypeAdapterDoesNotAffectNonAdaptedTypes --> gson,com.google.gson.Gson,READ);
EndClass 171
StartClass 172
Class(com.google.gson.InnerClassExclusionStrategyTest,N,N,Public);
Attribute(innerClass,com.google.gson.InnerClass,Public,N,N,);
Attribute(staticNestedClass,com.google.gson.StaticNestedClass,Public,N,N,);
Attribute(excluder,com.google.gson.internal.Excluder,Private,N,N,);
Method(testExcludeInnerClassObject,void,Public,N,N);
Method(testExcludeInnerClassField,void,Public,N,N);
Method(testIncludeStaticNestedClassObject,void,Public,N,N);
Method(testIncludeStaticNestedClassField,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.InnerClass);
Composition(com.google.gson.StaticNestedClass);
Composition(com.google.gson.internal.Excluder);
Call(METHOD,com.google.gson.InnerClassExclusionStrategyTest,testExcludeInnerClassObject --> getClass,com.google.gson.InnerClass,);
Call(METHOD,com.google.gson.InnerClassExclusionStrategyTest,testExcludeInnerClassObject --> assertTrue,com.google.gson.InnerClassExclusionStrategyTest,);
Call(METHOD,com.google.gson.InnerClassExclusionStrategyTest,testExcludeInnerClassObject --> excludeClass,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.InnerClassExclusionStrategyTest,testExcludeInnerClassField --> getClass,com.google.gson.InnerClassExclusionStrategyTest,);
Call(METHOD,com.google.gson.InnerClassExclusionStrategyTest,testExcludeInnerClassField --> getField,com.google.gson.InnerClassExclusionStrategyTest,);
Call(METHOD,com.google.gson.InnerClassExclusionStrategyTest,testExcludeInnerClassField --> assertTrue,com.google.gson.InnerClassExclusionStrategyTest,);
Call(METHOD,com.google.gson.InnerClassExclusionStrategyTest,testExcludeInnerClassField --> excludeField,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.InnerClassExclusionStrategyTest,testIncludeStaticNestedClassObject --> getClass,com.google.gson.StaticNestedClass,);
Call(METHOD,com.google.gson.InnerClassExclusionStrategyTest,testIncludeStaticNestedClassObject --> assertFalse,com.google.gson.InnerClassExclusionStrategyTest,);
Call(METHOD,com.google.gson.InnerClassExclusionStrategyTest,testIncludeStaticNestedClassObject --> excludeClass,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.InnerClassExclusionStrategyTest,testIncludeStaticNestedClassField --> getClass,com.google.gson.InnerClassExclusionStrategyTest,);
Call(METHOD,com.google.gson.InnerClassExclusionStrategyTest,testIncludeStaticNestedClassField --> getField,com.google.gson.InnerClassExclusionStrategyTest,);
Call(METHOD,com.google.gson.InnerClassExclusionStrategyTest,testIncludeStaticNestedClassField --> assertFalse,com.google.gson.InnerClassExclusionStrategyTest,);
Call(METHOD,com.google.gson.InnerClassExclusionStrategyTest,testIncludeStaticNestedClassField --> excludeField,com.google.gson.internal.Excluder,);
EndClass 172
StartClass 173
Class(com.google.gson.InnerClass,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 173
StartClass 174
Class(com.google.gson.StaticNestedClass,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 174
StartClass 175
Class(com.google.gson.internal.bind.JsonElementReaderTest,N,N,Public);
Method(testNumbers,void,Public,N,N);
Method(testLenientNansAndInfinities,void,Public,N,N);
Method(testStrictNansAndInfinities,void,Public,N,N);
Method(testNumbersFromStrings,void,Public,N,N);
Method(testStringsFromNumbers,void,Public,N,N);
Method(testBooleans,void,Public,N,N);
Method(testNulls,void,Public,N,N);
Method(testStrings,void,Public,N,N);
Method(testArray,void,Public,N,N);
Method(testObject,void,Public,N,N);
Method(testEmptyArray,void,Public,N,N);
Method(testNestedArrays,void,Public,N,N);
Method(testNestedObjects,void,Public,N,N);
Method(testEmptyObject,void,Public,N,N);
Method(testSkipValue,void,Public,N,N);
Method(testWrongType,void,Public,N,N);
Method(testEarlyClose,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNumbers --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNumbers --> beginArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNumbers --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNumbers --> nextInt,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNumbers --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNumbers --> nextLong,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNumbers --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNumbers --> nextDouble,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNumbers --> endArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testLenientNansAndInfinities --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testLenientNansAndInfinities --> setLenient,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testLenientNansAndInfinities --> beginArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testLenientNansAndInfinities --> assertTrue,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testLenientNansAndInfinities --> isNaN,null,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testLenientNansAndInfinities --> nextDouble,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testLenientNansAndInfinities --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testLenientNansAndInfinities --> nextDouble,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testLenientNansAndInfinities --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testLenientNansAndInfinities --> nextDouble,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testLenientNansAndInfinities --> endArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStrictNansAndInfinities --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStrictNansAndInfinities --> setLenient,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStrictNansAndInfinities --> beginArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStrictNansAndInfinities --> nextDouble,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStrictNansAndInfinities --> fail,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStrictNansAndInfinities --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStrictNansAndInfinities --> nextString,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStrictNansAndInfinities --> nextDouble,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStrictNansAndInfinities --> fail,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStrictNansAndInfinities --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStrictNansAndInfinities --> nextString,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStrictNansAndInfinities --> nextDouble,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStrictNansAndInfinities --> fail,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStrictNansAndInfinities --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStrictNansAndInfinities --> nextString,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStrictNansAndInfinities --> endArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNumbersFromStrings --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNumbersFromStrings --> beginArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNumbersFromStrings --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNumbersFromStrings --> nextInt,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNumbersFromStrings --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNumbersFromStrings --> nextLong,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNumbersFromStrings --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNumbersFromStrings --> nextDouble,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNumbersFromStrings --> endArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStringsFromNumbers --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStringsFromNumbers --> beginArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStringsFromNumbers --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStringsFromNumbers --> nextString,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStringsFromNumbers --> endArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testBooleans --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testBooleans --> beginArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testBooleans --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testBooleans --> nextBoolean,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testBooleans --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testBooleans --> nextBoolean,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testBooleans --> endArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNulls --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNulls --> beginArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNulls --> nextNull,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNulls --> nextNull,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNulls --> endArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStrings --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStrings --> beginArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStrings --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStrings --> nextString,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStrings --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStrings --> nextString,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testStrings --> endArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testArray --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testArray --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testArray --> peek,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testArray --> beginArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testArray --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testArray --> peek,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testArray --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testArray --> nextInt,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testArray --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testArray --> peek,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testArray --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testArray --> nextInt,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testArray --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testArray --> peek,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testArray --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testArray --> nextInt,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testArray --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testArray --> peek,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testArray --> endArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testArray --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testArray --> peek,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> peek,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> beginObject,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> peek,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> nextName,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> peek,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> nextInt,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> peek,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> nextName,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> peek,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> nextInt,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> peek,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> endObject,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testObject --> peek,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testEmptyArray --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testEmptyArray --> beginArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testEmptyArray --> endArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNestedArrays --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNestedArrays --> beginArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNestedArrays --> beginArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNestedArrays --> endArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNestedArrays --> beginArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNestedArrays --> beginArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNestedArrays --> endArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNestedArrays --> endArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNestedArrays --> endArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNestedObjects --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNestedObjects --> beginObject,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNestedObjects --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNestedObjects --> nextName,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNestedObjects --> beginObject,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNestedObjects --> endObject,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNestedObjects --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNestedObjects --> nextName,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNestedObjects --> beginObject,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNestedObjects --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNestedObjects --> nextName,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNestedObjects --> beginObject,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNestedObjects --> endObject,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNestedObjects --> endObject,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testNestedObjects --> endObject,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testEmptyObject --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testEmptyObject --> beginObject,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testEmptyObject --> endObject,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testSkipValue --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testSkipValue --> beginArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testSkipValue --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testSkipValue --> nextString,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testSkipValue --> skipValue,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testSkipValue --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testSkipValue --> nextString,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testSkipValue --> skipValue,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testSkipValue --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testSkipValue --> nextString,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testSkipValue --> skipValue,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testSkipValue --> endArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> beginArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> nextBoolean,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> fail,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> nextNull,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> fail,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> nextString,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> fail,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> nextInt,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> fail,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> nextLong,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> fail,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> nextDouble,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> fail,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> nextName,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> fail,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> beginObject,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> fail,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> endArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> fail,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> endObject,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> fail,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> beginArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> endArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> nextBoolean,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> fail,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> nextNull,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> fail,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> nextInt,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> fail,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> nextLong,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> fail,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> nextDouble,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> fail,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> nextName,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> fail,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> assertEquals,com.google.gson.internal.bind.JsonElementReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> nextString,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testWrongType --> endArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testEarlyClose --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testEarlyClose --> beginArray,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testEarlyClose --> close,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testEarlyClose --> peek,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonElementReaderTest,testEarlyClose --> fail,com.google.gson.internal.bind.JsonElementReaderTest,);
EndClass 175
StartClass 176
Class(com.google.gson.internal.bind.JsonTreeReaderTest,N,N,Public);
Method(testSkipValue_emptyJsonObject,void,Public,N,N);
Method(testSkipValue_filledJsonObject,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReaderTest,testSkipValue_emptyJsonObject --> skipValue,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReaderTest,testSkipValue_emptyJsonObject --> assertEquals,com.google.gson.internal.bind.JsonTreeReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReaderTest,testSkipValue_emptyJsonObject --> peek,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReaderTest,testSkipValue_filledJsonObject --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReaderTest,testSkipValue_filledJsonObject --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReaderTest,testSkipValue_filledJsonObject --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReaderTest,testSkipValue_filledJsonObject --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReaderTest,testSkipValue_filledJsonObject --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReaderTest,testSkipValue_filledJsonObject --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReaderTest,testSkipValue_filledJsonObject --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReaderTest,testSkipValue_filledJsonObject --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReaderTest,testSkipValue_filledJsonObject --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReaderTest,testSkipValue_filledJsonObject --> skipValue,com.google.gson.internal.bind.JsonTreeReader,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReaderTest,testSkipValue_filledJsonObject --> assertEquals,com.google.gson.internal.bind.JsonTreeReaderTest,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeReaderTest,testSkipValue_filledJsonObject --> peek,com.google.gson.internal.bind.JsonTreeReader,);
EndClass 176
StartClass 177
Class(com.google.gson.internal.bind.JsonTreeWriterTest,N,N,Public);
Method(testArray,void,Public,N,N);
Method(testNestedArray,void,Public,N,N);
Method(testObject,void,Public,N,N);
Method(testNestedObject,void,Public,N,N);
Method(testWriteAfterClose,void,Public,N,N);
Method(testPrematureClose,void,Public,N,N);
Method(testSerializeNullsFalse,void,Public,N,N);
Method(testSerializeNullsTrue,void,Public,N,N);
Method(testEmptyWriter,void,Public,N,N);
Method(testLenientNansAndInfinities,void,Public,N,N);
Method(testStrictNansAndInfinities,void,Public,N,N);
Method(testStrictBoxedNansAndInfinities,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testArray --> beginArray,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testArray --> value,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testArray --> value,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testArray --> value,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testArray --> endArray,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testArray --> assertEquals,com.google.gson.internal.bind.JsonTreeWriterTest,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testArray --> get,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testArray --> toString,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedArray --> beginArray,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedArray --> beginArray,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedArray --> endArray,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedArray --> beginArray,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedArray --> beginArray,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedArray --> endArray,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedArray --> endArray,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedArray --> endArray,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedArray --> assertEquals,com.google.gson.internal.bind.JsonTreeWriterTest,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedArray --> get,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedArray --> toString,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testObject --> beginObject,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testObject --> name,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testObject --> value,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testObject --> name,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testObject --> value,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testObject --> endObject,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testObject --> assertEquals,com.google.gson.internal.bind.JsonTreeWriterTest,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testObject --> get,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testObject --> toString,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedObject --> beginObject,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedObject --> name,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedObject --> beginObject,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedObject --> name,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedObject --> beginObject,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedObject --> endObject,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedObject --> endObject,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedObject --> name,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedObject --> beginObject,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedObject --> endObject,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedObject --> endObject,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedObject --> assertEquals,com.google.gson.internal.bind.JsonTreeWriterTest,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedObject --> get,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testNestedObject --> toString,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testWriteAfterClose --> setLenient,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testWriteAfterClose --> beginArray,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testWriteAfterClose --> value,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testWriteAfterClose --> endArray,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testWriteAfterClose --> close,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testWriteAfterClose --> beginArray,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testWriteAfterClose --> fail,com.google.gson.internal.bind.JsonTreeWriterTest,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testPrematureClose --> setLenient,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testPrematureClose --> beginArray,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testPrematureClose --> close,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testPrematureClose --> fail,com.google.gson.internal.bind.JsonTreeWriterTest,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testSerializeNullsFalse --> setSerializeNulls,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testSerializeNullsFalse --> beginObject,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testSerializeNullsFalse --> name,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testSerializeNullsFalse --> nullValue,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testSerializeNullsFalse --> endObject,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testSerializeNullsFalse --> assertEquals,com.google.gson.internal.bind.JsonTreeWriterTest,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testSerializeNullsFalse --> get,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testSerializeNullsFalse --> toString,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testSerializeNullsTrue --> setSerializeNulls,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testSerializeNullsTrue --> beginObject,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testSerializeNullsTrue --> name,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testSerializeNullsTrue --> nullValue,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testSerializeNullsTrue --> endObject,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testSerializeNullsTrue --> assertEquals,com.google.gson.internal.bind.JsonTreeWriterTest,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testSerializeNullsTrue --> get,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testSerializeNullsTrue --> toString,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testEmptyWriter --> assertEquals,com.google.gson.internal.bind.JsonTreeWriterTest,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testEmptyWriter --> get,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testLenientNansAndInfinities --> setLenient,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testLenientNansAndInfinities --> beginArray,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testLenientNansAndInfinities --> value,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testLenientNansAndInfinities --> value,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testLenientNansAndInfinities --> value,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testLenientNansAndInfinities --> endArray,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testLenientNansAndInfinities --> assertEquals,com.google.gson.internal.bind.JsonTreeWriterTest,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testLenientNansAndInfinities --> get,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testLenientNansAndInfinities --> toString,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testStrictNansAndInfinities --> setLenient,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testStrictNansAndInfinities --> beginArray,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testStrictNansAndInfinities --> value,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testStrictNansAndInfinities --> fail,com.google.gson.internal.bind.JsonTreeWriterTest,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testStrictNansAndInfinities --> value,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testStrictNansAndInfinities --> fail,com.google.gson.internal.bind.JsonTreeWriterTest,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testStrictNansAndInfinities --> value,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testStrictNansAndInfinities --> fail,com.google.gson.internal.bind.JsonTreeWriterTest,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testStrictBoxedNansAndInfinities --> setLenient,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testStrictBoxedNansAndInfinities --> beginArray,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testStrictBoxedNansAndInfinities --> value,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testStrictBoxedNansAndInfinities --> fail,com.google.gson.internal.bind.JsonTreeWriterTest,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testStrictBoxedNansAndInfinities --> value,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testStrictBoxedNansAndInfinities --> fail,com.google.gson.internal.bind.JsonTreeWriterTest,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testStrictBoxedNansAndInfinities --> value,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.internal.bind.JsonTreeWriterTest,testStrictBoxedNansAndInfinities --> fail,com.google.gson.internal.bind.JsonTreeWriterTest,);
EndClass 177
StartClass 178
Class(com.google.gson.internal.bind.RecursiveTypesResolveTest,N,N,Public);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
EndClass 178
StartClass 179
Class(com.google.gson.internal.GsonTypesTest,N,N,Public);
Method(testNewParameterizedTypeWithoutOwner,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.internal.GsonTypesTest,testNewParameterizedTypeWithoutOwner --> newParameterizedTypeWithOwner,null,);
Call(METHOD,com.google.gson.internal.GsonTypesTest,testNewParameterizedTypeWithoutOwner --> assertEquals,com.google.gson.internal.GsonTypesTest,);
Call(METHOD,com.google.gson.internal.GsonTypesTest,testNewParameterizedTypeWithoutOwner --> getFirstTypeArgument,com.google.gson.internal.GsonTypesTest,);
Call(METHOD,com.google.gson.internal.GsonTypesTest,testNewParameterizedTypeWithoutOwner --> newParameterizedTypeWithOwner,null,);
Call(METHOD,com.google.gson.internal.GsonTypesTest,testNewParameterizedTypeWithoutOwner --> assertEquals,com.google.gson.internal.GsonTypesTest,);
Call(METHOD,com.google.gson.internal.GsonTypesTest,testNewParameterizedTypeWithoutOwner --> getFirstTypeArgument,com.google.gson.internal.GsonTypesTest,);
Call(METHOD,com.google.gson.internal.GsonTypesTest,testNewParameterizedTypeWithoutOwner --> newParameterizedTypeWithOwner,null,);
Call(METHOD,com.google.gson.internal.GsonTypesTest,testNewParameterizedTypeWithoutOwner --> fail,com.google.gson.internal.GsonTypesTest.D,);
Call(METHOD,com.google.gson.internal.GsonTypesTest,testNewParameterizedTypeWithoutOwner --> newParameterizedTypeWithOwner,null,);
Call(METHOD,com.google.gson.internal.GsonTypesTest,testNewParameterizedTypeWithoutOwner --> assertEquals,com.google.gson.internal.GsonTypesTest.D,);
Call(METHOD,com.google.gson.internal.GsonTypesTest,testNewParameterizedTypeWithoutOwner --> getFirstTypeArgument,com.google.gson.internal.GsonTypesTest.D,);
EndClass 179
StartClass 180
Class(com.google.gson.internal.GsonTypesTest.D,N,N,Protected);
Method(testGetFirstTypeArgument,void,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,com.google.gson.internal.GsonTypesTest.D,testGetFirstTypeArgument --> assertNull,com.google.gson.internal.GsonTypesTest.D,);
Call(METHOD,com.google.gson.internal.GsonTypesTest.D,testGetFirstTypeArgument --> getFirstTypeArgument,com.google.gson.internal.GsonTypesTest.D,);
Call(METHOD,com.google.gson.internal.GsonTypesTest.D,testGetFirstTypeArgument --> newParameterizedTypeWithOwner,null,);
Call(METHOD,com.google.gson.internal.GsonTypesTest.D,testGetFirstTypeArgument --> assertEquals,com.google.gson.internal.GsonTypesTest.D,);
Call(METHOD,com.google.gson.internal.GsonTypesTest.D,testGetFirstTypeArgument --> getFirstTypeArgument,com.google.gson.internal.GsonTypesTest.D,);
EndClass 180
StartClass 181
Class(com.google.gson.internal.LazilyParsedNumberTest,N,N,Public);
Method(testHashCode,void,Public,N,N);
Method(testEquals,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.internal.LazilyParsedNumberTest,testHashCode --> assertEquals,com.google.gson.internal.LazilyParsedNumberTest,);
Call(METHOD,com.google.gson.internal.LazilyParsedNumberTest,testHashCode --> hashCode,com.google.gson.internal.LazilyParsedNumber,);
Call(METHOD,com.google.gson.internal.LazilyParsedNumberTest,testHashCode --> hashCode,com.google.gson.internal.LazilyParsedNumber,);
Call(METHOD,com.google.gson.internal.LazilyParsedNumberTest,testEquals --> assertTrue,com.google.gson.internal.LazilyParsedNumberTest,);
Call(METHOD,com.google.gson.internal.LazilyParsedNumberTest,testEquals --> equals,com.google.gson.internal.LazilyParsedNumber,);
EndClass 181
StartClass 182
Class(com.google.gson.internal.LinkedHashTreeMapTest,N,N,Public);
Attribute(head,com.google.gson.internal.LinkedHashTreeMap.Node,Private,Y,Y,);
Method(testIterationOrder,void,Public,N,N);
Method(testRemoveRootDoesNotDoubleUnlink,void,Public,N,N);
Method(testPutNullKeyFails,void,Public,N,N);
Method(testPutNonComparableKeyFails,void,Public,N,N);
Method(testContainsNonComparableKeyReturnsFalse,void,Public,N,N);
Method(testContainsNullKeyIsAlwaysFalse,void,Public,N,N);
Method(testPutOverrides,void,Public,N,N);
Method(testEmptyStringValues,void,Public,N,N);
Method(testForceDoublingAndRehash,void,Public,N,N);
Method(testClear,void,Public,N,N);
Method(testEqualsAndHashCode,void,Public,N,N);
Method(testAvlWalker,void,Public,N,N);
Method(assertAvlWalker,void,Private,N,N);
Method(testAvlBuilder,void,Public,N,N);
Method(assertAvlBuilder,void,Private,N,N);
Method(testDoubleCapacity,void,Public,N,N);
Method(testDoubleCapacityAllNodesOnLeft,void,Public,N,N);
Method(node,com.google.gson.internal.LinkedHashTreeMap.Node,Private,N,N);
Method(node$2,com.google.gson.internal.LinkedHashTreeMap.Node,Private,N,N);
Method(assertTree,void,Private,N,N);
Method(assertConsistent,void,Private,N,N);
Method(toString,java.lang.String,Private,N,N);
Method(assertIterationOrder,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(assertAvlWalker,com.google.gson.internal.LinkedHashTreeMap.Node,);
Parameter(assertAvlBuilder,int,);
Parameter(assertAvlBuilder,java.lang.String,);
Parameter(node,java.lang.String,);
Parameter(node$2,com.google.gson.internal.LinkedHashTreeMap.Node,);
Parameter(node$2,java.lang.String,);
Parameter(node$2,com.google.gson.internal.LinkedHashTreeMap.Node,);
Parameter(assertTree,java.lang.String,);
Parameter(assertTree,com.google.gson.internal.LinkedHashTreeMap.Node,);
Parameter(assertConsistent,com.google.gson.internal.LinkedHashTreeMap.Node,);
Parameter(toString,com.google.gson.internal.LinkedHashTreeMap.Node,);
Parameter(assertIterationOrder,java.lang.Iterable,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testIterationOrder --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testIterationOrder --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testIterationOrder --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testIterationOrder --> assertIterationOrder,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testIterationOrder --> keySet,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testIterationOrder --> assertIterationOrder,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testIterationOrder --> values,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testRemoveRootDoesNotDoubleUnlink --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testRemoveRootDoesNotDoubleUnlink --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testRemoveRootDoesNotDoubleUnlink --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testRemoveRootDoesNotDoubleUnlink --> entrySet,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testRemoveRootDoesNotDoubleUnlink --> iterator,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testRemoveRootDoesNotDoubleUnlink --> next,java.util.Iterator,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testRemoveRootDoesNotDoubleUnlink --> next,java.util.Iterator,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testRemoveRootDoesNotDoubleUnlink --> next,java.util.Iterator,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testRemoveRootDoesNotDoubleUnlink --> remove,java.util.Iterator,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testRemoveRootDoesNotDoubleUnlink --> assertIterationOrder,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testRemoveRootDoesNotDoubleUnlink --> keySet,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testPutNullKeyFails --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testPutNullKeyFails --> fail,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testPutNonComparableKeyFails --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testPutNonComparableKeyFails --> fail,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testContainsNonComparableKeyReturnsFalse --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testContainsNonComparableKeyReturnsFalse --> assertFalse,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testContainsNonComparableKeyReturnsFalse --> containsKey,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testContainsNullKeyIsAlwaysFalse --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testContainsNullKeyIsAlwaysFalse --> assertFalse,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testContainsNullKeyIsAlwaysFalse --> containsKey,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testPutOverrides --> assertNull,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testPutOverrides --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testPutOverrides --> assertNull,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testPutOverrides --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testPutOverrides --> assertNull,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testPutOverrides --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testPutOverrides --> assertEquals,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testPutOverrides --> size,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testPutOverrides --> assertEquals,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testPutOverrides --> get,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testPutOverrides --> assertEquals,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testPutOverrides --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testPutOverrides --> assertEquals,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testPutOverrides --> size,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testEmptyStringValues --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testEmptyStringValues --> assertTrue,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testEmptyStringValues --> containsKey,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testEmptyStringValues --> assertEquals,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testEmptyStringValues --> get,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testForceDoublingAndRehash --> toString,null,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testForceDoublingAndRehash --> abs,null,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testForceDoublingAndRehash --> nextInt,java.util.Random,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testForceDoublingAndRehash --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testForceDoublingAndRehash --> assertTrue,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testForceDoublingAndRehash --> containsKey,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testForceDoublingAndRehash --> assertEquals,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testForceDoublingAndRehash --> get,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testClear --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testClear --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testClear --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testClear --> clear,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testClear --> assertIterationOrder,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testClear --> keySet,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testClear --> assertEquals,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testClear --> size,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testEqualsAndHashCode --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testEqualsAndHashCode --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testEqualsAndHashCode --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testEqualsAndHashCode --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testEqualsAndHashCode --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testEqualsAndHashCode --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testEqualsAndHashCode --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testEqualsAndHashCode --> put,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testEqualsAndHashCode --> assertEqualsAndHashCode,null,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> assertAvlWalker,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> assertAvlWalker,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> assertAvlWalker,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> assertAvlWalker,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> assertAvlWalker,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlWalker --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertAvlWalker --> reset,com.google.gson.internal.LinkedHashTreeMap.AvlIterator,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertAvlWalker --> assertEquals,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertAvlWalker --> next,com.google.gson.internal.LinkedHashTreeMap.AvlIterator,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertAvlWalker --> getKey,com.google.gson.internal.LinkedHashTreeMap.AvlIterator,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertAvlWalker --> assertNull,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertAvlWalker --> next,com.google.gson.internal.LinkedHashTreeMap.AvlIterator,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlBuilder --> assertAvlBuilder,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlBuilder --> assertAvlBuilder,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlBuilder --> assertAvlBuilder,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlBuilder --> assertAvlBuilder,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlBuilder --> assertAvlBuilder,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlBuilder --> assertAvlBuilder,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlBuilder --> assertAvlBuilder,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlBuilder --> assertAvlBuilder,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlBuilder --> assertAvlBuilder,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlBuilder --> assertAvlBuilder,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlBuilder --> assertAvlBuilder,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlBuilder --> assertAvlBuilder,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlBuilder --> assertAvlBuilder,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlBuilder --> assertAvlBuilder,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlBuilder --> assertAvlBuilder,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlBuilder --> assertAvlBuilder,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlBuilder --> assertAvlBuilder,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testAvlBuilder --> assertAvlBuilder,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertAvlBuilder --> toCharArray,java.lang.String,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertAvlBuilder --> reset,com.google.gson.internal.LinkedHashTreeMap.AvlBuilder,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertAvlBuilder --> add,com.google.gson.internal.LinkedHashTreeMap.AvlBuilder,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertAvlBuilder --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertAvlBuilder --> toString,null,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertAvlBuilder --> assertTree,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertAvlBuilder --> root,com.google.gson.internal.LinkedHashTreeMap.AvlBuilder,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testDoubleCapacity --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testDoubleCapacity --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testDoubleCapacity --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testDoubleCapacity --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testDoubleCapacity --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testDoubleCapacity --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testDoubleCapacity --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testDoubleCapacity --> doubleCapacity,null,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testDoubleCapacity --> assertTree,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testDoubleCapacity --> assertTree,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testDoubleCapacityAllNodesOnLeft --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testDoubleCapacityAllNodesOnLeft --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testDoubleCapacityAllNodesOnLeft --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testDoubleCapacityAllNodesOnLeft --> doubleCapacity,null,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testDoubleCapacityAllNodesOnLeft --> assertTree,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testDoubleCapacityAllNodesOnLeft --> assertNull,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,testDoubleCapacityAllNodesOnLeft --> assertConsistent,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,node --> hashCode,java.lang.String,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,node$2 --> node,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertTree --> assertEquals,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertTree --> toString,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertTree --> assertConsistent,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertConsistent --> assertConsistent,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertConsistent --> assertSame,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertConsistent --> assertConsistent,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertConsistent --> assertSame,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertConsistent --> assertTrue,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertConsistent --> max,null,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertConsistent --> fail,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,toString --> valueOf,null,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,toString --> format,null,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,toString --> toString,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,toString --> toString,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertIterationOrder --> add,java.util.ArrayList,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertIterationOrder --> assertEquals,com.google.gson.internal.LinkedHashTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMapTest,assertIterationOrder --> asList,null,);
EndClass 182
StartClass 183
Class(com.google.gson.internal.LinkedTreeMapTest,N,N,Public);
Method(testIterationOrder,void,Public,N,N);
Method(testRemoveRootDoesNotDoubleUnlink,void,Public,N,N);
Method(testPutNullKeyFails,void,Public,N,N);
Method(testPutNonComparableKeyFails,void,Public,N,N);
Method(testContainsNonComparableKeyReturnsFalse,void,Public,N,N);
Method(testContainsNullKeyIsAlwaysFalse,void,Public,N,N);
Method(testPutOverrides,void,Public,N,N);
Method(testEmptyStringValues,void,Public,N,N);
Method(testLargeSetOfRandomKeys,void,Public,N,N);
Method(testClear,void,Public,N,N);
Method(testEqualsAndHashCode,void,Public,N,N);
Method(assertIterationOrder,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(assertIterationOrder,java.lang.Iterable,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testIterationOrder --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testIterationOrder --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testIterationOrder --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testIterationOrder --> assertIterationOrder,com.google.gson.internal.LinkedTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testIterationOrder --> keySet,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testIterationOrder --> assertIterationOrder,com.google.gson.internal.LinkedTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testIterationOrder --> values,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testRemoveRootDoesNotDoubleUnlink --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testRemoveRootDoesNotDoubleUnlink --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testRemoveRootDoesNotDoubleUnlink --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testRemoveRootDoesNotDoubleUnlink --> entrySet,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testRemoveRootDoesNotDoubleUnlink --> iterator,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testRemoveRootDoesNotDoubleUnlink --> next,java.util.Iterator,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testRemoveRootDoesNotDoubleUnlink --> next,java.util.Iterator,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testRemoveRootDoesNotDoubleUnlink --> next,java.util.Iterator,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testRemoveRootDoesNotDoubleUnlink --> remove,java.util.Iterator,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testRemoveRootDoesNotDoubleUnlink --> assertIterationOrder,com.google.gson.internal.LinkedTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testRemoveRootDoesNotDoubleUnlink --> keySet,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testPutNullKeyFails --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testPutNullKeyFails --> fail,com.google.gson.internal.LinkedTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testPutNonComparableKeyFails --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testPutNonComparableKeyFails --> fail,com.google.gson.internal.LinkedTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testContainsNonComparableKeyReturnsFalse --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testContainsNonComparableKeyReturnsFalse --> assertFalse,com.google.gson.internal.LinkedTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testContainsNonComparableKeyReturnsFalse --> containsKey,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testContainsNullKeyIsAlwaysFalse --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testContainsNullKeyIsAlwaysFalse --> assertFalse,com.google.gson.internal.LinkedTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testContainsNullKeyIsAlwaysFalse --> containsKey,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testPutOverrides --> assertNull,com.google.gson.internal.LinkedTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testPutOverrides --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testPutOverrides --> assertNull,com.google.gson.internal.LinkedTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testPutOverrides --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testPutOverrides --> assertNull,com.google.gson.internal.LinkedTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testPutOverrides --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testPutOverrides --> assertEquals,com.google.gson.internal.LinkedTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testPutOverrides --> size,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testPutOverrides --> assertEquals,com.google.gson.internal.LinkedTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testPutOverrides --> get,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testPutOverrides --> assertEquals,com.google.gson.internal.LinkedTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testPutOverrides --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testPutOverrides --> assertEquals,com.google.gson.internal.LinkedTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testPutOverrides --> size,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testEmptyStringValues --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testEmptyStringValues --> assertTrue,com.google.gson.internal.LinkedTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testEmptyStringValues --> containsKey,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testEmptyStringValues --> assertEquals,com.google.gson.internal.LinkedTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testEmptyStringValues --> get,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testLargeSetOfRandomKeys --> toString,null,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testLargeSetOfRandomKeys --> abs,null,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testLargeSetOfRandomKeys --> nextInt,java.util.Random,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testLargeSetOfRandomKeys --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testLargeSetOfRandomKeys --> assertTrue,com.google.gson.internal.LinkedTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testLargeSetOfRandomKeys --> containsKey,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testLargeSetOfRandomKeys --> assertEquals,com.google.gson.internal.LinkedTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testLargeSetOfRandomKeys --> get,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testClear --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testClear --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testClear --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testClear --> clear,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testClear --> assertIterationOrder,com.google.gson.internal.LinkedTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testClear --> keySet,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testClear --> assertEquals,com.google.gson.internal.LinkedTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testClear --> size,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testEqualsAndHashCode --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testEqualsAndHashCode --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testEqualsAndHashCode --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testEqualsAndHashCode --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testEqualsAndHashCode --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testEqualsAndHashCode --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testEqualsAndHashCode --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testEqualsAndHashCode --> put,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,testEqualsAndHashCode --> assertEqualsAndHashCode,null,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,assertIterationOrder --> add,java.util.ArrayList,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,assertIterationOrder --> assertEquals,com.google.gson.internal.LinkedTreeMapTest,);
Call(METHOD,com.google.gson.internal.LinkedTreeMapTest,assertIterationOrder --> asList,null,);
EndClass 183
StartClass 184
Class(com.google.gson.internal.UnsafeAllocatorInstantiationTest,N,N,Public);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
EndClass 184
StartClass 185
Class(com.google.gson.JavaSerializationTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,Y,);
Method(testMapIsSerializable,void,Public,N,N);
Method(testListIsSerializable,void,Public,N,N);
Method(testNumberIsSerializable,void,Public,N,N);
Method(serializedCopy,com.google.gson.T,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(serializedCopy,com.google.gson.T,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.JavaSerializationTest,testMapIsSerializable --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.JavaSerializationTest,testMapIsSerializable --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.JavaSerializationTest,testMapIsSerializable --> serializedCopy,com.google.gson.JavaSerializationTest,);
Call(METHOD,com.google.gson.JavaSerializationTest,testMapIsSerializable --> assertEquals,com.google.gson.JavaSerializationTest,);
Call(METHOD,com.google.gson.JavaSerializationTest,testMapIsSerializable --> assertEquals,com.google.gson.JavaSerializationTest,);
Call(METHOD,com.google.gson.JavaSerializationTest,testMapIsSerializable --> asList,null,);
Call(METHOD,com.google.gson.JavaSerializationTest,testMapIsSerializable --> keySet,java.util.Map,);
Call(METHOD,com.google.gson.JavaSerializationTest,testListIsSerializable --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.JavaSerializationTest,testListIsSerializable --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.JavaSerializationTest,testListIsSerializable --> serializedCopy,com.google.gson.JavaSerializationTest,);
Call(METHOD,com.google.gson.JavaSerializationTest,testListIsSerializable --> assertEquals,com.google.gson.JavaSerializationTest,);
Call(METHOD,com.google.gson.JavaSerializationTest,testNumberIsSerializable --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.JavaSerializationTest,testNumberIsSerializable --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.JavaSerializationTest,testNumberIsSerializable --> serializedCopy,com.google.gson.JavaSerializationTest,);
Call(METHOD,com.google.gson.JavaSerializationTest,testNumberIsSerializable --> assertEquals,com.google.gson.JavaSerializationTest,);
Call(METHOD,com.google.gson.JavaSerializationTest,testNumberIsSerializable --> get,java.util.List,);
Call(METHOD,com.google.gson.JavaSerializationTest,testNumberIsSerializable --> doubleValue,java.util.List,);
Call(METHOD,com.google.gson.JavaSerializationTest,testNumberIsSerializable --> assertEquals,com.google.gson.JavaSerializationTest,);
Call(METHOD,com.google.gson.JavaSerializationTest,testNumberIsSerializable --> get,java.util.List,);
Call(METHOD,com.google.gson.JavaSerializationTest,testNumberIsSerializable --> doubleValue,java.util.List,);
Call(METHOD,com.google.gson.JavaSerializationTest,testNumberIsSerializable --> assertEquals,com.google.gson.JavaSerializationTest,);
Call(METHOD,com.google.gson.JavaSerializationTest,testNumberIsSerializable --> get,java.util.List,);
Call(METHOD,com.google.gson.JavaSerializationTest,testNumberIsSerializable --> doubleValue,java.util.List,);
Call(METHOD,com.google.gson.JavaSerializationTest,serializedCopy --> writeObject,java.io.ObjectOutputStream,);
Call(METHOD,com.google.gson.JavaSerializationTest,serializedCopy --> close,java.io.ObjectOutputStream,);
Call(METHOD,com.google.gson.JavaSerializationTest,serializedCopy --> toByteArray,java.io.ByteArrayOutputStream,);
Call(METHOD,com.google.gson.JavaSerializationTest,serializedCopy --> readObject,java.io.ObjectInputStream,);
EndClass 185
StartClass 186
Class(com.google.gson.JsonArrayTest,N,N,Public);
Method(testEqualsOnEmptyArray,void,Public,N,N);
Method(testEqualsNonEmptyArray,void,Public,N,N);
Method(testRemove,void,Public,N,N);
Method(testSet,void,Public,N,N);
Method(testDeepCopy,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.JsonArrayTest,testEqualsOnEmptyArray --> assertEqualsAndHashCode,null,);
Call(METHOD,com.google.gson.JsonArrayTest,testEqualsNonEmptyArray --> assertEquals,com.google.gson.JsonArrayTest,);
Call(METHOD,com.google.gson.JsonArrayTest,testEqualsNonEmptyArray --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testEqualsNonEmptyArray --> assertFalse,com.google.gson.JsonArrayTest,);
Call(METHOD,com.google.gson.JsonArrayTest,testEqualsNonEmptyArray --> equals,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testEqualsNonEmptyArray --> assertFalse,com.google.gson.JsonArrayTest,);
Call(METHOD,com.google.gson.JsonArrayTest,testEqualsNonEmptyArray --> equals,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testEqualsNonEmptyArray --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testEqualsNonEmptyArray --> assertEqualsAndHashCode,null,);
Call(METHOD,com.google.gson.JsonArrayTest,testEqualsNonEmptyArray --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testEqualsNonEmptyArray --> assertFalse,com.google.gson.JsonArrayTest,);
Call(METHOD,com.google.gson.JsonArrayTest,testEqualsNonEmptyArray --> equals,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testEqualsNonEmptyArray --> assertFalse,com.google.gson.JsonArrayTest,);
Call(METHOD,com.google.gson.JsonArrayTest,testEqualsNonEmptyArray --> equals,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testEqualsNonEmptyArray --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testEqualsNonEmptyArray --> assertFalse,com.google.gson.JsonArrayTest,);
Call(METHOD,com.google.gson.JsonArrayTest,testEqualsNonEmptyArray --> equals,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testEqualsNonEmptyArray --> assertFalse,com.google.gson.JsonArrayTest,);
Call(METHOD,com.google.gson.JsonArrayTest,testEqualsNonEmptyArray --> equals,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testRemove --> remove,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testRemove --> fail,com.google.gson.JsonArrayTest,);
Call(METHOD,com.google.gson.JsonArrayTest,testRemove --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testRemove --> assertTrue,com.google.gson.JsonArrayTest,);
Call(METHOD,com.google.gson.JsonArrayTest,testRemove --> remove,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testRemove --> assertFalse,com.google.gson.JsonArrayTest,);
Call(METHOD,com.google.gson.JsonArrayTest,testRemove --> contains,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testRemove --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testRemove --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testRemove --> assertEquals,com.google.gson.JsonArrayTest,);
Call(METHOD,com.google.gson.JsonArrayTest,testRemove --> remove,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testRemove --> getAsString,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testRemove --> assertEquals,com.google.gson.JsonArrayTest,);
Call(METHOD,com.google.gson.JsonArrayTest,testRemove --> size,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testRemove --> assertTrue,com.google.gson.JsonArrayTest,);
Call(METHOD,com.google.gson.JsonArrayTest,testRemove --> contains,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testSet --> set,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testSet --> fail,com.google.gson.JsonArrayTest,);
Call(METHOD,com.google.gson.JsonArrayTest,testSet --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testSet --> set,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testSet --> assertEquals,com.google.gson.JsonArrayTest,);
Call(METHOD,com.google.gson.JsonArrayTest,testSet --> get,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testSet --> getAsString,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testSet --> set,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testSet --> assertNull,com.google.gson.JsonArrayTest,);
Call(METHOD,com.google.gson.JsonArrayTest,testSet --> get,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testSet --> set,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testSet --> assertEquals,com.google.gson.JsonArrayTest,);
Call(METHOD,com.google.gson.JsonArrayTest,testSet --> get,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testSet --> getAsString,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testSet --> assertEquals,com.google.gson.JsonArrayTest,);
Call(METHOD,com.google.gson.JsonArrayTest,testSet --> size,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testDeepCopy --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testDeepCopy --> deepCopy,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testDeepCopy --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testDeepCopy --> assertEquals,com.google.gson.JsonArrayTest,);
Call(METHOD,com.google.gson.JsonArrayTest,testDeepCopy --> size,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testDeepCopy --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testDeepCopy --> assertEquals,com.google.gson.JsonArrayTest,);
Call(METHOD,com.google.gson.JsonArrayTest,testDeepCopy --> get,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testDeepCopy --> getAsJsonArray,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testDeepCopy --> size,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testDeepCopy --> assertEquals,com.google.gson.JsonArrayTest,);
Call(METHOD,com.google.gson.JsonArrayTest,testDeepCopy --> get,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testDeepCopy --> getAsJsonArray,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonArrayTest,testDeepCopy --> size,com.google.gson.JsonArray,);
EndClass 186
StartClass 187
Class(com.google.gson.JsonNullTest,N,N,Public);
Method(testEqualsAndHashcode,void,Public,N,N);
Method(testDeepCopy,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.JsonNullTest,testEqualsAndHashcode --> assertEqualsAndHashCode,null,);
Call(METHOD,com.google.gson.JsonNullTest,testEqualsAndHashcode --> assertEqualsAndHashCode,null,);
Call(METHOD,com.google.gson.JsonNullTest,testEqualsAndHashcode --> assertEqualsAndHashCode,null,);
Call(METHOD,com.google.gson.JsonNullTest,testDeepCopy --> assertSame,com.google.gson.JsonNullTest,);
Call(METHOD,com.google.gson.JsonNullTest,testDeepCopy --> deepCopy,com.google.gson.JsonNull,);
Call(METHOD,com.google.gson.JsonNullTest,testDeepCopy --> assertSame,com.google.gson.JsonNullTest,);
Call(METHOD,com.google.gson.JsonNullTest,testDeepCopy --> deepCopy,null,);
EndClass 187
StartClass 188
Class(com.google.gson.JsonObjectTest,N,N,Public);
Method(testAddingAndRemovingObjectProperties,void,Public,N,N);
Method(testAddingNullPropertyValue,void,Public,N,N);
Method(testAddingNullOrEmptyPropertyName,void,Public,N,N);
Method(testAddingBooleanProperties,void,Public,N,N);
Method(testAddingStringProperties,void,Public,N,N);
Method(testAddingCharacterProperties,void,Public,N,N);
Method(testPropertyWithQuotes,void,Public,N,N);
Method(testWritePropertyWithEmptyStringName,void,Public,N,N);
Method(testReadPropertyWithEmptyStringName,void,Public,N,N);
Method(testEqualsOnEmptyObject,void,Public,N,N);
Method(testEqualsNonEmptyObject,void,Public,N,N);
Method(testSize,void,Public,N,N);
Method(testDeepCopy,void,Public,N,N);
Method(testKeySet,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingAndRemovingObjectProperties --> assertFalse,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingAndRemovingObjectProperties --> has,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingAndRemovingObjectProperties --> assertNull,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingAndRemovingObjectProperties --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingAndRemovingObjectProperties --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingAndRemovingObjectProperties --> assertEquals,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingAndRemovingObjectProperties --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingAndRemovingObjectProperties --> remove,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingAndRemovingObjectProperties --> assertEquals,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingAndRemovingObjectProperties --> assertFalse,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingAndRemovingObjectProperties --> has,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingAndRemovingObjectProperties --> assertNull,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingAndRemovingObjectProperties --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingNullPropertyValue --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingNullPropertyValue --> assertTrue,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingNullPropertyValue --> has,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingNullPropertyValue --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingNullPropertyValue --> assertNotNull,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingNullPropertyValue --> assertTrue,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingNullPropertyValue --> isJsonNull,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingNullOrEmptyPropertyName --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingNullOrEmptyPropertyName --> fail,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingNullOrEmptyPropertyName --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingNullOrEmptyPropertyName --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingBooleanProperties --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingBooleanProperties --> assertTrue,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingBooleanProperties --> has,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingBooleanProperties --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingBooleanProperties --> assertNotNull,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingBooleanProperties --> assertTrue,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingBooleanProperties --> getAsBoolean,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingStringProperties --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingStringProperties --> assertTrue,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingStringProperties --> has,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingStringProperties --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingStringProperties --> assertNotNull,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingStringProperties --> assertEquals,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingStringProperties --> getAsString,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingCharacterProperties --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingCharacterProperties --> assertTrue,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingCharacterProperties --> has,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingCharacterProperties --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingCharacterProperties --> assertNotNull,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingCharacterProperties --> assertEquals,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingCharacterProperties --> valueOf,null,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingCharacterProperties --> getAsString,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingCharacterProperties --> assertEquals,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testAddingCharacterProperties --> getAsCharacter,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonObjectTest,testPropertyWithQuotes --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testPropertyWithQuotes --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.JsonObjectTest,testPropertyWithQuotes --> assertEquals,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testWritePropertyWithEmptyStringName --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testWritePropertyWithEmptyStringName --> assertEquals,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testWritePropertyWithEmptyStringName --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.JsonObjectTest,testReadPropertyWithEmptyStringName --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.JsonObjectTest,testReadPropertyWithEmptyStringName --> getAsJsonObject,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.JsonObjectTest,testReadPropertyWithEmptyStringName --> assertEquals,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testReadPropertyWithEmptyStringName --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testReadPropertyWithEmptyStringName --> getAsBoolean,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testEqualsOnEmptyObject --> assertEqualsAndHashCode,null,);
Call(METHOD,com.google.gson.JsonObjectTest,testEqualsNonEmptyObject --> assertEquals,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testEqualsNonEmptyObject --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testEqualsNonEmptyObject --> assertFalse,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testEqualsNonEmptyObject --> equals,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testEqualsNonEmptyObject --> assertFalse,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testEqualsNonEmptyObject --> equals,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testEqualsNonEmptyObject --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testEqualsNonEmptyObject --> assertEqualsAndHashCode,null,);
Call(METHOD,com.google.gson.JsonObjectTest,testEqualsNonEmptyObject --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testEqualsNonEmptyObject --> assertFalse,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testEqualsNonEmptyObject --> equals,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testEqualsNonEmptyObject --> assertFalse,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testEqualsNonEmptyObject --> equals,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testEqualsNonEmptyObject --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testEqualsNonEmptyObject --> assertFalse,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testEqualsNonEmptyObject --> equals,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testEqualsNonEmptyObject --> assertFalse,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testEqualsNonEmptyObject --> equals,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testSize --> assertEquals,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testSize --> size,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testSize --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testSize --> assertEquals,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testSize --> size,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testSize --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testSize --> assertEquals,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testSize --> size,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testSize --> remove,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testSize --> assertEquals,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testSize --> size,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testDeepCopy --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testDeepCopy --> deepCopy,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testDeepCopy --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonObjectTest,testDeepCopy --> assertEquals,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testDeepCopy --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testDeepCopy --> getAsJsonArray,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testDeepCopy --> size,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testDeepCopy --> assertEquals,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testDeepCopy --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testDeepCopy --> getAsJsonArray,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testDeepCopy --> size,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testKeySet --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testKeySet --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testKeySet --> assertEquals,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testKeySet --> size,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testKeySet --> assertEquals,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testKeySet --> keySet,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testKeySet --> size,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testKeySet --> assertTrue,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testKeySet --> keySet,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testKeySet --> contains,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testKeySet --> assertTrue,com.google.gson.JsonObjectTest,);
Call(METHOD,com.google.gson.JsonObjectTest,testKeySet --> keySet,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.JsonObjectTest,testKeySet --> contains,com.google.gson.JsonObject,);
EndClass 188
StartClass 189
Class(com.google.gson.JsonParserTest,N,N,Public);
Attribute(parser,com.google.gson.JsonParser,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testParseInvalidJson,void,Public,N,N);
Method(testParseUnquotedStringArrayFails,void,Public,N,N);
Method(testParseString,void,Public,N,N);
Method(testParseEmptyString,void,Public,N,N);
Method(testParseEmptyWhitespaceInput,void,Public,N,N);
Method(testParseUnquotedSingleWordStringFails,void,Public,N,N);
Method(testParseUnquotedMultiWordStringFails,void,Public,N,N);
Method(testParseMixedArray,void,Public,N,N);
Method(testParseReader,void,Public,N,N);
Method(testReadWriteTwoObjects,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.JsonParser);
Call(METHOD,com.google.gson.JsonParserTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.JsonParserTest,setUp --> parser,com.google.gson.JsonParser,WRITE);
Call(METHOD,com.google.gson.JsonParserTest,testParseInvalidJson --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.JsonParserTest,testParseInvalidJson --> fail,com.google.gson.JsonParserTest,);
Call(METHOD,com.google.gson.JsonParserTest,testParseUnquotedStringArrayFails --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.JsonParserTest,testParseUnquotedStringArrayFails --> assertEquals,com.google.gson.JsonParserTest,);
Call(METHOD,com.google.gson.JsonParserTest,testParseUnquotedStringArrayFails --> getAsJsonArray,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseUnquotedStringArrayFails --> get,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseUnquotedStringArrayFails --> getAsString,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseUnquotedStringArrayFails --> assertEquals,com.google.gson.JsonParserTest,);
Call(METHOD,com.google.gson.JsonParserTest,testParseUnquotedStringArrayFails --> getAsJsonArray,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseUnquotedStringArrayFails --> get,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseUnquotedStringArrayFails --> getAsString,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseUnquotedStringArrayFails --> assertEquals,com.google.gson.JsonParserTest,);
Call(METHOD,com.google.gson.JsonParserTest,testParseUnquotedStringArrayFails --> getAsJsonArray,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseUnquotedStringArrayFails --> get,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseUnquotedStringArrayFails --> getAsString,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseUnquotedStringArrayFails --> assertEquals,com.google.gson.JsonParserTest,);
Call(METHOD,com.google.gson.JsonParserTest,testParseUnquotedStringArrayFails --> getAsJsonArray,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseUnquotedStringArrayFails --> size,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseString --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.JsonParserTest,testParseString --> assertTrue,com.google.gson.JsonParserTest,);
Call(METHOD,com.google.gson.JsonParserTest,testParseString --> isJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseString --> assertEquals,com.google.gson.JsonParserTest,);
Call(METHOD,com.google.gson.JsonParserTest,testParseString --> getAsJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseString --> get,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseString --> getAsInt,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseString --> assertEquals,com.google.gson.JsonParserTest,);
Call(METHOD,com.google.gson.JsonParserTest,testParseString --> getAsJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseString --> get,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseString --> getAsString,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseEmptyString --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.JsonParserTest,testParseEmptyString --> assertTrue,com.google.gson.JsonParserTest,);
Call(METHOD,com.google.gson.JsonParserTest,testParseEmptyString --> isJsonPrimitive,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseEmptyString --> assertEquals,com.google.gson.JsonParserTest,);
Call(METHOD,com.google.gson.JsonParserTest,testParseEmptyString --> getAsString,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseEmptyWhitespaceInput --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.JsonParserTest,testParseEmptyWhitespaceInput --> assertTrue,com.google.gson.JsonParserTest,);
Call(METHOD,com.google.gson.JsonParserTest,testParseEmptyWhitespaceInput --> isJsonNull,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseUnquotedSingleWordStringFails --> assertEquals,com.google.gson.JsonParserTest,);
Call(METHOD,com.google.gson.JsonParserTest,testParseUnquotedSingleWordStringFails --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.JsonParserTest,testParseUnquotedSingleWordStringFails --> getAsString,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.JsonParserTest,testParseUnquotedMultiWordStringFails --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.JsonParserTest,testParseUnquotedMultiWordStringFails --> fail,com.google.gson.JsonParserTest,);
Call(METHOD,com.google.gson.JsonParserTest,testParseMixedArray --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.JsonParserTest,testParseMixedArray --> assertTrue,com.google.gson.JsonParserTest,);
Call(METHOD,com.google.gson.JsonParserTest,testParseMixedArray --> isJsonArray,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseMixedArray --> getAsJsonArray,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseMixedArray --> assertEquals,com.google.gson.JsonParserTest,);
Call(METHOD,com.google.gson.JsonParserTest,testParseMixedArray --> get,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonParserTest,testParseMixedArray --> toString,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonParserTest,testParseMixedArray --> assertEquals,com.google.gson.JsonParserTest,);
Call(METHOD,com.google.gson.JsonParserTest,testParseMixedArray --> get,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonParserTest,testParseMixedArray --> getAsInt,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonParserTest,testParseMixedArray --> assertEquals,com.google.gson.JsonParserTest,);
Call(METHOD,com.google.gson.JsonParserTest,testParseMixedArray --> get,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonParserTest,testParseMixedArray --> getAsString,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.JsonParserTest,testParseReader --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.JsonParserTest,testParseReader --> assertTrue,com.google.gson.JsonParserTest,);
Call(METHOD,com.google.gson.JsonParserTest,testParseReader --> isJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseReader --> assertEquals,com.google.gson.JsonParserTest,);
Call(METHOD,com.google.gson.JsonParserTest,testParseReader --> getAsJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseReader --> get,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseReader --> getAsInt,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseReader --> assertEquals,com.google.gson.JsonParserTest,);
Call(METHOD,com.google.gson.JsonParserTest,testParseReader --> getAsJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseReader --> get,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testParseReader --> getAsString,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.JsonParserTest,testReadWriteTwoObjects --> write,java.io.CharArrayWriter,);
Call(METHOD,com.google.gson.JsonParserTest,testReadWriteTwoObjects --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.JsonParserTest,testReadWriteTwoObjects --> toCharArray,com.google.gson.Gson,);
Call(METHOD,com.google.gson.JsonParserTest,testReadWriteTwoObjects --> write,java.io.CharArrayWriter,);
Call(METHOD,com.google.gson.JsonParserTest,testReadWriteTwoObjects --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.JsonParserTest,testReadWriteTwoObjects --> toCharArray,com.google.gson.Gson,);
Call(METHOD,com.google.gson.JsonParserTest,testReadWriteTwoObjects --> toCharArray,java.io.CharArrayWriter,);
Call(METHOD,com.google.gson.JsonParserTest,testReadWriteTwoObjects --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.JsonParserTest,testReadWriteTwoObjects --> parse,null,);
Call(METHOD,com.google.gson.JsonParserTest,testReadWriteTwoObjects --> parse,null,);
Call(METHOD,com.google.gson.JsonParserTest,testReadWriteTwoObjects --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.JsonParserTest,testReadWriteTwoObjects --> assertEquals,com.google.gson.JsonParserTest,);
Call(METHOD,com.google.gson.JsonParserTest,testReadWriteTwoObjects --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.JsonParserTest,testReadWriteTwoObjects --> assertEquals,com.google.gson.JsonParserTest,);
EndClass 189
StartClass 190
Class(com.google.gson.JsonPrimitiveTest,N,N,Public);
Method(testBoolean,void,Public,N,N);
Method(testParsingStringAsBoolean,void,Public,N,N);
Method(testParsingStringAsNumber,void,Public,N,N);
Method(testStringsAndChar,void,Public,N,N);
Method(testExponential,void,Public,N,N);
Method(testByteEqualsShort,void,Public,N,N);
Method(testByteEqualsInteger,void,Public,N,N);
Method(testByteEqualsLong,void,Public,N,N);
Method(testByteEqualsBigInteger,void,Public,N,N);
Method(testShortEqualsInteger,void,Public,N,N);
Method(testShortEqualsLong,void,Public,N,N);
Method(testShortEqualsBigInteger,void,Public,N,N);
Method(testIntegerEqualsLong,void,Public,N,N);
Method(testIntegerEqualsBigInteger,void,Public,N,N);
Method(testLongEqualsBigInteger,void,Public,N,N);
Method(testFloatEqualsDouble,void,Public,N,N);
Method(testFloatEqualsBigDecimal,void,Public,N,N);
Method(testDoubleEqualsBigDecimal,void,Public,N,N);
Method(testValidJsonOnToString,void,Public,N,N);
Method(testEquals,void,Public,N,N);
Method(testEqualsAcrossTypes,void,Public,N,N);
Method(testEqualsIntegerAndBigInteger,void,Public,N,N);
Method(testEqualsDoesNotEquateStringAndNonStringTypes,void,Public,N,N);
Method(testDeepCopy,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testBoolean --> assertTrue,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testBoolean --> isBoolean,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testBoolean --> assertTrue,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testBoolean --> getAsBoolean,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testBoolean --> assertFalse,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testBoolean --> getAsBoolean,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testBoolean --> assertFalse,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testBoolean --> getAsBoolean,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testBoolean --> assertTrue,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testBoolean --> getAsBoolean,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testBoolean --> assertTrue,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testBoolean --> getAsBoolean,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testBoolean --> assertFalse,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testBoolean --> getAsBoolean,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testParsingStringAsBoolean --> assertFalse,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testParsingStringAsBoolean --> isBoolean,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testParsingStringAsBoolean --> assertTrue,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testParsingStringAsBoolean --> getAsBoolean,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testParsingStringAsNumber --> assertFalse,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testParsingStringAsNumber --> isNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testParsingStringAsNumber --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testParsingStringAsNumber --> getAsDouble,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testParsingStringAsNumber --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testParsingStringAsNumber --> getAsFloat,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testParsingStringAsNumber --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testParsingStringAsNumber --> getAsInt,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testParsingStringAsNumber --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testParsingStringAsNumber --> getAsLong,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testParsingStringAsNumber --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testParsingStringAsNumber --> getAsShort,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testParsingStringAsNumber --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testParsingStringAsNumber --> getAsByte,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testParsingStringAsNumber --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testParsingStringAsNumber --> getAsBigInteger,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testParsingStringAsNumber --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testParsingStringAsNumber --> getAsBigDecimal,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testStringsAndChar --> assertTrue,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testStringsAndChar --> isString,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testStringsAndChar --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testStringsAndChar --> getAsCharacter,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testStringsAndChar --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testStringsAndChar --> getAsString,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testStringsAndChar --> assertTrue,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testStringsAndChar --> isString,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testStringsAndChar --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testStringsAndChar --> getAsCharacter,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testStringsAndChar --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testStringsAndChar --> getAsString,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testExponential --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testExponential --> getAsBigDecimal,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testExponential --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testExponential --> getAsDouble,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testExponential --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testExponential --> getAsDouble,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testExponential --> getAsInt,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testExponential --> fail,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testByteEqualsShort --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testByteEqualsShort --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testByteEqualsShort --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testByteEqualsShort --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testByteEqualsInteger --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testByteEqualsInteger --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testByteEqualsInteger --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testByteEqualsInteger --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testByteEqualsLong --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testByteEqualsLong --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testByteEqualsLong --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testByteEqualsLong --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testByteEqualsBigInteger --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testByteEqualsBigInteger --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testByteEqualsBigInteger --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testByteEqualsBigInteger --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testShortEqualsInteger --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testShortEqualsInteger --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testShortEqualsInteger --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testShortEqualsInteger --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testShortEqualsLong --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testShortEqualsLong --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testShortEqualsLong --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testShortEqualsLong --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testShortEqualsBigInteger --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testShortEqualsBigInteger --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testShortEqualsBigInteger --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testShortEqualsBigInteger --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testIntegerEqualsLong --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testIntegerEqualsLong --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testIntegerEqualsLong --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testIntegerEqualsLong --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testIntegerEqualsBigInteger --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testIntegerEqualsBigInteger --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testIntegerEqualsBigInteger --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testIntegerEqualsBigInteger --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testLongEqualsBigInteger --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testLongEqualsBigInteger --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testLongEqualsBigInteger --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testLongEqualsBigInteger --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testFloatEqualsDouble --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testFloatEqualsDouble --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testFloatEqualsDouble --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testFloatEqualsDouble --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testFloatEqualsBigDecimal --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testFloatEqualsBigDecimal --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testFloatEqualsBigDecimal --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testFloatEqualsBigDecimal --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testDoubleEqualsBigDecimal --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testDoubleEqualsBigDecimal --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testDoubleEqualsBigDecimal --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testDoubleEqualsBigDecimal --> hashCode,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testValidJsonOnToString --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testValidJsonOnToString --> toString,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testValidJsonOnToString --> assertEquals,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testValidJsonOnToString --> toString,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEquals --> assertEqualsAndHashCode,null,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEquals --> assertEqualsAndHashCode,null,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEquals --> assertEqualsAndHashCode,null,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEquals --> assertEqualsAndHashCode,null,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEquals --> assertEqualsAndHashCode,null,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEquals --> assertEqualsAndHashCode,null,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEquals --> assertEqualsAndHashCode,null,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEquals --> assertEqualsAndHashCode,null,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEquals --> assertEqualsAndHashCode,null,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEquals --> assertEqualsAndHashCode,null,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEquals --> assertFalse,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEquals --> equals,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEquals --> assertFalse,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEquals --> equals,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEquals --> assertFalse,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEquals --> equals,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEqualsAcrossTypes --> assertEqualsAndHashCode,null,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEqualsAcrossTypes --> assertEqualsAndHashCode,null,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEqualsAcrossTypes --> assertEqualsAndHashCode,null,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEqualsAcrossTypes --> assertEqualsAndHashCode,null,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEqualsAcrossTypes --> assertEqualsAndHashCode,null,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEqualsIntegerAndBigInteger --> assertTrue,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEqualsIntegerAndBigInteger --> equals,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEqualsDoesNotEquateStringAndNonStringTypes --> assertFalse,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEqualsDoesNotEquateStringAndNonStringTypes --> equals,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEqualsDoesNotEquateStringAndNonStringTypes --> assertFalse,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEqualsDoesNotEquateStringAndNonStringTypes --> equals,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEqualsDoesNotEquateStringAndNonStringTypes --> assertFalse,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testEqualsDoesNotEquateStringAndNonStringTypes --> equals,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testDeepCopy --> assertSame,com.google.gson.JsonPrimitiveTest,);
Call(METHOD,com.google.gson.JsonPrimitiveTest,testDeepCopy --> deepCopy,com.google.gson.JsonPrimitive,);
EndClass 190
StartClass 191
Class(com.google.gson.JsonStreamParserTest,N,N,Public);
Attribute(parser,com.google.gson.JsonStreamParser,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testParseTwoStrings,void,Public,N,N);
Method(testIterator,void,Public,N,N);
Method(testNoSideEffectForHasNext,void,Public,N,N);
Method(testCallingNextBeyondAvailableInput,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.JsonStreamParser);
Call(METHOD,com.google.gson.JsonStreamParserTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.JsonStreamParserTest,setUp --> parser,com.google.gson.JsonStreamParser,WRITE);
Call(METHOD,com.google.gson.JsonStreamParserTest,testParseTwoStrings --> next,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testParseTwoStrings --> getAsString,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testParseTwoStrings --> assertEquals,com.google.gson.JsonStreamParserTest,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testParseTwoStrings --> next,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testParseTwoStrings --> getAsString,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testParseTwoStrings --> assertEquals,com.google.gson.JsonStreamParserTest,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testIterator --> assertTrue,com.google.gson.JsonStreamParserTest,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testIterator --> hasNext,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testIterator --> assertEquals,com.google.gson.JsonStreamParserTest,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testIterator --> next,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testIterator --> getAsString,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testIterator --> assertTrue,com.google.gson.JsonStreamParserTest,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testIterator --> hasNext,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testIterator --> assertEquals,com.google.gson.JsonStreamParserTest,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testIterator --> next,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testIterator --> getAsString,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testIterator --> assertFalse,com.google.gson.JsonStreamParserTest,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testIterator --> hasNext,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testNoSideEffectForHasNext --> assertTrue,com.google.gson.JsonStreamParserTest,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testNoSideEffectForHasNext --> hasNext,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testNoSideEffectForHasNext --> assertTrue,com.google.gson.JsonStreamParserTest,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testNoSideEffectForHasNext --> hasNext,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testNoSideEffectForHasNext --> assertTrue,com.google.gson.JsonStreamParserTest,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testNoSideEffectForHasNext --> hasNext,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testNoSideEffectForHasNext --> assertEquals,com.google.gson.JsonStreamParserTest,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testNoSideEffectForHasNext --> next,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testNoSideEffectForHasNext --> getAsString,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testNoSideEffectForHasNext --> assertTrue,com.google.gson.JsonStreamParserTest,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testNoSideEffectForHasNext --> hasNext,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testNoSideEffectForHasNext --> assertTrue,com.google.gson.JsonStreamParserTest,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testNoSideEffectForHasNext --> hasNext,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testNoSideEffectForHasNext --> assertEquals,com.google.gson.JsonStreamParserTest,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testNoSideEffectForHasNext --> next,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testNoSideEffectForHasNext --> getAsString,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testNoSideEffectForHasNext --> assertFalse,com.google.gson.JsonStreamParserTest,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testNoSideEffectForHasNext --> hasNext,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testNoSideEffectForHasNext --> assertFalse,com.google.gson.JsonStreamParserTest,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testNoSideEffectForHasNext --> hasNext,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testCallingNextBeyondAvailableInput --> next,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testCallingNextBeyondAvailableInput --> next,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testCallingNextBeyondAvailableInput --> next,com.google.gson.JsonStreamParser,);
Call(METHOD,com.google.gson.JsonStreamParserTest,testCallingNextBeyondAvailableInput --> fail,com.google.gson.JsonStreamParserTest,);
EndClass 191
StartClass 192
Class(com.google.gson.LongSerializationPolicyTest,N,N,Public);
Method(testDefaultLongSerialization,void,Public,N,N);
Method(testDefaultLongSerializationIntegration,void,Public,N,N);
Method(testStringLongSerialization,void,Public,N,N);
Method(testStringLongSerializationIntegration,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testDefaultLongSerialization --> serialize,null,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testDefaultLongSerialization --> assertTrue,com.google.gson.LongSerializationPolicyTest,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testDefaultLongSerialization --> isJsonPrimitive,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testDefaultLongSerialization --> getAsJsonPrimitive,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testDefaultLongSerialization --> assertFalse,com.google.gson.LongSerializationPolicyTest,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testDefaultLongSerialization --> isString,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testDefaultLongSerialization --> assertTrue,com.google.gson.LongSerializationPolicyTest,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testDefaultLongSerialization --> isNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testDefaultLongSerialization --> assertEquals,com.google.gson.LongSerializationPolicyTest,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testDefaultLongSerialization --> getAsLong,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testDefaultLongSerializationIntegration --> setLongSerializationPolicy,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testDefaultLongSerializationIntegration --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testDefaultLongSerializationIntegration --> assertEquals,com.google.gson.LongSerializationPolicyTest,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testDefaultLongSerializationIntegration --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testDefaultLongSerializationIntegration --> assertEquals,com.google.gson.LongSerializationPolicyTest,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testDefaultLongSerializationIntegration --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testStringLongSerialization --> serialize,null,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testStringLongSerialization --> assertTrue,com.google.gson.LongSerializationPolicyTest,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testStringLongSerialization --> isJsonPrimitive,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testStringLongSerialization --> getAsJsonPrimitive,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testStringLongSerialization --> assertFalse,com.google.gson.LongSerializationPolicyTest,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testStringLongSerialization --> isNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testStringLongSerialization --> assertTrue,com.google.gson.LongSerializationPolicyTest,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testStringLongSerialization --> isString,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testStringLongSerialization --> assertEquals,com.google.gson.LongSerializationPolicyTest,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testStringLongSerialization --> getAsString,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testStringLongSerializationIntegration --> setLongSerializationPolicy,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testStringLongSerializationIntegration --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testStringLongSerializationIntegration --> assertEquals,com.google.gson.LongSerializationPolicyTest,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testStringLongSerializationIntegration --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testStringLongSerializationIntegration --> assertEquals,com.google.gson.LongSerializationPolicyTest,);
Call(METHOD,com.google.gson.LongSerializationPolicyTest,testStringLongSerializationIntegration --> toJson,com.google.gson.Gson,);
EndClass 192
StartClass 193
Class(com.google.gson.metrics.PerformanceTest,N,N,Public);
Attribute(COLLECTION_SIZE,int,Private,Y,Y,);
Attribute(NUM_ITERATIONS,int,Private,Y,Y,);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testDummy,void,Public,N,N);
Method(disabled_testStringDeserialization,void,Public,N,N);
Method(parseLongJson,void,Private,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(parseLongJson,java.lang.String,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.metrics.PerformanceTest,setUp --> setUp,null,);
Call(ATTRIBUTE,com.google.gson.metrics.PerformanceTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.metrics.PerformanceTest,disabled_testStringDeserialization --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest,disabled_testStringDeserialization --> toString,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest,disabled_testStringDeserialization --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest,disabled_testStringDeserialization --> parseLongJson,com.google.gson.metrics.PerformanceTest,);
Call(METHOD,com.google.gson.metrics.PerformanceTest,disabled_testStringDeserialization --> println,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest,disabled_testStringDeserialization --> length,java.lang.String,);
Call(METHOD,com.google.gson.metrics.PerformanceTest,parseLongJson --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.metrics.PerformanceTest,parseLongJson --> assertTrue,com.google.gson.metrics.PerformanceTest,);
Call(METHOD,com.google.gson.metrics.PerformanceTest,parseLongJson --> contains,com.google.gson.metrics.ExceptionHolder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest,parseLongJson --> assertTrue,com.google.gson.metrics.PerformanceTest,);
Call(METHOD,com.google.gson.metrics.PerformanceTest,parseLongJson --> contains,com.google.gson.metrics.ExceptionHolder,);
EndClass 193
StartClass 194
Class(com.google.gson.metrics.ExceptionHolder,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 194
StartClass 195
Class(com.google.gson.MixedStreamTest,N,N,Public);
Attribute(BLUE_MUSTANG,com.google.gson.Car,Private,Y,Y,);
Attribute(BLACK_BMW,com.google.gson.Car,Private,Y,Y,);
Attribute(RED_MIATA,com.google.gson.Car,Private,Y,Y,);
Attribute(CARS_JSON,java.lang.String,Private,Y,Y,);
Method(testWriteMixedStreamed,void,Public,N,N);
Method(testReadMixedStreamed,void,Public,N,N);
Method(testReaderDoesNotMutateState,void,Public,N,N);
Method(testWriteDoesNotMutateState,void,Public,N,N);
Method(testReadInvalidState,void,Public,N,N);
Method(testReadClosed,void,Public,N,N);
Method(testWriteInvalidState,void,Public,N,N);
Method(testWriteClosed,void,Public,N,N);
Method(testWriteNulls,void,Public,N,N);
Method(testReadNulls,void,Public,N,N);
Method(testWriteHtmlSafe,void,Public,N,N);
Method(testWriteLenient,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Car);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteMixedStreamed --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteMixedStreamed --> setIndent,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteMixedStreamed --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteMixedStreamed --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteMixedStreamed --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteMixedStreamed --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteMixedStreamed --> assertEquals,com.google.gson.MixedStreamTest,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteMixedStreamed --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.MixedStreamTest,testReadMixedStreamed --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.MixedStreamTest,testReadMixedStreamed --> assertEquals,com.google.gson.MixedStreamTest,);
Call(METHOD,com.google.gson.MixedStreamTest,testReadMixedStreamed --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.MixedStreamTest,testReadMixedStreamed --> assertEquals,com.google.gson.MixedStreamTest,);
Call(METHOD,com.google.gson.MixedStreamTest,testReadMixedStreamed --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.MixedStreamTest,testReadMixedStreamed --> assertEquals,com.google.gson.MixedStreamTest,);
Call(METHOD,com.google.gson.MixedStreamTest,testReadMixedStreamed --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.MixedStreamTest,testReadMixedStreamed --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.MixedStreamTest,testReaderDoesNotMutateState --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.MixedStreamTest,testReaderDoesNotMutateState --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.MixedStreamTest,testReaderDoesNotMutateState --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.MixedStreamTest,testReaderDoesNotMutateState --> assertFalse,com.google.gson.MixedStreamTest,);
Call(METHOD,com.google.gson.MixedStreamTest,testReaderDoesNotMutateState --> isLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.MixedStreamTest,testReaderDoesNotMutateState --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.MixedStreamTest,testReaderDoesNotMutateState --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.MixedStreamTest,testReaderDoesNotMutateState --> assertTrue,com.google.gson.MixedStreamTest,);
Call(METHOD,com.google.gson.MixedStreamTest,testReaderDoesNotMutateState --> isLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteDoesNotMutateState --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteDoesNotMutateState --> setHtmlSafe,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteDoesNotMutateState --> setLenient,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteDoesNotMutateState --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteDoesNotMutateState --> assertTrue,com.google.gson.MixedStreamTest,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteDoesNotMutateState --> isHtmlSafe,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteDoesNotMutateState --> assertTrue,com.google.gson.MixedStreamTest,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteDoesNotMutateState --> isLenient,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteDoesNotMutateState --> setHtmlSafe,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteDoesNotMutateState --> setLenient,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteDoesNotMutateState --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteDoesNotMutateState --> assertFalse,com.google.gson.MixedStreamTest,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteDoesNotMutateState --> isHtmlSafe,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteDoesNotMutateState --> assertFalse,com.google.gson.MixedStreamTest,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteDoesNotMutateState --> isLenient,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.MixedStreamTest,testReadInvalidState --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.MixedStreamTest,testReadInvalidState --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.MixedStreamTest,testReadInvalidState --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.MixedStreamTest,testReadInvalidState --> fail,com.google.gson.MixedStreamTest,);
Call(METHOD,com.google.gson.MixedStreamTest,testReadClosed --> close,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.MixedStreamTest,testReadClosed --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.MixedStreamTest,testReadClosed --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.MixedStreamTest,testReadClosed --> fail,com.google.gson.MixedStreamTest,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteInvalidState --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteInvalidState --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteInvalidState --> fail,com.google.gson.MixedStreamTest,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteClosed --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteClosed --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteClosed --> close,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteClosed --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteClosed --> fail,com.google.gson.MixedStreamTest,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteNulls --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteNulls --> fail,com.google.gson.MixedStreamTest,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteNulls --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteNulls --> assertEquals,com.google.gson.MixedStreamTest,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteNulls --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.MixedStreamTest,testReadNulls --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.MixedStreamTest,testReadNulls --> fail,com.google.gson.MixedStreamTest,);
Call(METHOD,com.google.gson.MixedStreamTest,testReadNulls --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.MixedStreamTest,testReadNulls --> fail,com.google.gson.MixedStreamTest,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteHtmlSafe --> asList,null,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteHtmlSafe --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteHtmlSafe --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteHtmlSafe --> assertEquals,com.google.gson.MixedStreamTest,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteHtmlSafe --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteHtmlSafe --> disableHtmlEscaping,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteHtmlSafe --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteHtmlSafe --> toJson,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteHtmlSafe --> assertEquals,com.google.gson.MixedStreamTest,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteHtmlSafe --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteLenient --> asList,null,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteLenient --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteLenient --> serializeSpecialFloatingPointValues,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteLenient --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteLenient --> toJson,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteLenient --> assertEquals,com.google.gson.MixedStreamTest,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteLenient --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteLenient --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.MixedStreamTest,testWriteLenient --> fail,com.google.gson.MixedStreamTest,);
EndClass 195
StartClass 196
Class(com.google.gson.Car,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 196
StartClass 197
Class(com.google.gson.ObjectTypeAdapterTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,Y,);
Attribute(adapter,com.google.gson.TypeAdapter,Private,N,Y,);
Method(testDeserialize,void,Public,N,N);
Method(testSerialize,void,Public,N,N);
Method(testSerializeNullValue,void,Public,N,N);
Method(testDeserializeNullValue,void,Public,N,N);
Method(testSerializeObject,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Composition(com.google.gson.TypeAdapter<Object>);
Call(METHOD,com.google.gson.ObjectTypeAdapterTest,testDeserialize --> fromJson,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.ObjectTypeAdapterTest,testDeserialize --> assertEquals,com.google.gson.ObjectTypeAdapterTest,);
Call(METHOD,com.google.gson.ObjectTypeAdapterTest,testDeserialize --> get,java.util.Map,);
Call(METHOD,com.google.gson.ObjectTypeAdapterTest,testDeserialize --> assertEquals,com.google.gson.ObjectTypeAdapterTest,);
Call(METHOD,com.google.gson.ObjectTypeAdapterTest,testDeserialize --> asList,null,);
Call(METHOD,com.google.gson.ObjectTypeAdapterTest,testDeserialize --> get,java.util.Map,);
Call(METHOD,com.google.gson.ObjectTypeAdapterTest,testDeserialize --> assertEquals,com.google.gson.ObjectTypeAdapterTest,);
Call(METHOD,com.google.gson.ObjectTypeAdapterTest,testDeserialize --> singletonMap,null,);
Call(METHOD,com.google.gson.ObjectTypeAdapterTest,testDeserialize --> get,java.util.Map,);
Call(METHOD,com.google.gson.ObjectTypeAdapterTest,testDeserialize --> assertEquals,com.google.gson.ObjectTypeAdapterTest,);
Call(METHOD,com.google.gson.ObjectTypeAdapterTest,testDeserialize --> size,java.util.Map,);
Call(METHOD,com.google.gson.ObjectTypeAdapterTest,testSerialize --> assertEquals,com.google.gson.ObjectTypeAdapterTest,);
Call(METHOD,com.google.gson.ObjectTypeAdapterTest,testSerialize --> toJson,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.ObjectTypeAdapterTest,testSerialize --> replace,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.ObjectTypeAdapterTest,testSerializeNullValue --> put,java.util.Map,);
Call(METHOD,com.google.gson.ObjectTypeAdapterTest,testSerializeNullValue --> assertEquals,com.google.gson.ObjectTypeAdapterTest,);
Call(METHOD,com.google.gson.ObjectTypeAdapterTest,testSerializeNullValue --> toJson,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.ObjectTypeAdapterTest,testSerializeNullValue --> replace,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.ObjectTypeAdapterTest,testDeserializeNullValue --> put,java.util.Map,);
Call(METHOD,com.google.gson.ObjectTypeAdapterTest,testDeserializeNullValue --> assertEquals,com.google.gson.ObjectTypeAdapterTest,);
Call(METHOD,com.google.gson.ObjectTypeAdapterTest,testDeserializeNullValue --> fromJson,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.ObjectTypeAdapterTest,testSerializeObject --> assertEquals,com.google.gson.ObjectTypeAdapterTest,);
Call(METHOD,com.google.gson.ObjectTypeAdapterTest,testSerializeObject --> toJson,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.ObjectTypeAdapterTest,testSerializeObject --> asList,null,);
EndClass 197
StartClass 198
Class(com.google.gson.OverrideCoreTypeAdaptersTest,N,N,Public);
Attribute(booleanAsIntAdapter,com.google.gson.TypeAdapter,Private,Y,Y,);
Attribute(swapCaseStringAdapter,com.google.gson.TypeAdapter,Private,Y,Y,);
Method(write,void,Public,N,N);
Method(read,java.lang.Boolean,Public,N,N);
Method(write$2,void,Public,N,N);
Method(read$2,java.lang.String,Public,N,N);
Method(testOverrideWrapperBooleanAdapter,void,Public,N,N);
Method(testOverridePrimitiveBooleanAdapter,void,Public,N,N);
Method(testOverrideStringAdapter,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,java.lang.Boolean,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(write$2,com.google.gson.stream.JsonWriter,);
Parameter(write$2,java.lang.String,);
Parameter(read$2,com.google.gson.stream.JsonReader,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,write --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,read --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,write$2 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,write$2 --> toUpperCase,java.lang.String,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,read$2 --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,read$2 --> toLowerCase,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverrideWrapperBooleanAdapter --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverrideWrapperBooleanAdapter --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverrideWrapperBooleanAdapter --> assertEquals,com.google.gson.OverrideCoreTypeAdaptersTest,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverrideWrapperBooleanAdapter --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverrideWrapperBooleanAdapter --> assertEquals,com.google.gson.OverrideCoreTypeAdaptersTest,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverrideWrapperBooleanAdapter --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverrideWrapperBooleanAdapter --> assertEquals,com.google.gson.OverrideCoreTypeAdaptersTest,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverrideWrapperBooleanAdapter --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverrideWrapperBooleanAdapter --> assertEquals,com.google.gson.OverrideCoreTypeAdaptersTest,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverrideWrapperBooleanAdapter --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverrideWrapperBooleanAdapter --> assertEquals,com.google.gson.OverrideCoreTypeAdaptersTest,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverrideWrapperBooleanAdapter --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverridePrimitiveBooleanAdapter --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverridePrimitiveBooleanAdapter --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverridePrimitiveBooleanAdapter --> assertEquals,com.google.gson.OverrideCoreTypeAdaptersTest,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverridePrimitiveBooleanAdapter --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverridePrimitiveBooleanAdapter --> assertEquals,com.google.gson.OverrideCoreTypeAdaptersTest,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverridePrimitiveBooleanAdapter --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverridePrimitiveBooleanAdapter --> assertEquals,com.google.gson.OverrideCoreTypeAdaptersTest,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverridePrimitiveBooleanAdapter --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverridePrimitiveBooleanAdapter --> assertEquals,com.google.gson.OverrideCoreTypeAdaptersTest,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverridePrimitiveBooleanAdapter --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverridePrimitiveBooleanAdapter --> assertEquals,com.google.gson.OverrideCoreTypeAdaptersTest,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverridePrimitiveBooleanAdapter --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverrideStringAdapter --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverrideStringAdapter --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverrideStringAdapter --> assertEquals,com.google.gson.OverrideCoreTypeAdaptersTest,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverrideStringAdapter --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverrideStringAdapter --> assertEquals,com.google.gson.OverrideCoreTypeAdaptersTest,);
Call(METHOD,com.google.gson.OverrideCoreTypeAdaptersTest,testOverrideStringAdapter --> fromJson,com.google.gson.Gson,);
EndClass 198
StartClass 199
Class(com.google.gson.ParameterizedTypeTest,N,N,Public);
Attribute(ourType,java.lang.reflect.ParameterizedType,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testOurTypeFunctionality,void,Public,N,N);
Method(testNotEquals,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.ParameterizedTypeTest,setUp --> setUp,null,);
Call(METHOD,com.google.gson.ParameterizedTypeTest,setUp --> newParameterizedTypeWithOwner,null,);
Call(ATTRIBUTE,com.google.gson.ParameterizedTypeTest,setUp --> ourType,java.lang.reflect.ParameterizedType,WRITE);
Call(METHOD,com.google.gson.ParameterizedTypeTest,testOurTypeFunctionality --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.ParameterizedTypeTest,testOurTypeFunctionality --> assertNull,com.google.gson.ParameterizedTypeTest,);
Call(METHOD,com.google.gson.ParameterizedTypeTest,testOurTypeFunctionality --> getOwnerType,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.ParameterizedTypeTest,testOurTypeFunctionality --> assertEquals,com.google.gson.ParameterizedTypeTest,);
Call(METHOD,com.google.gson.ParameterizedTypeTest,testOurTypeFunctionality --> getActualTypeArguments,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.ParameterizedTypeTest,testOurTypeFunctionality --> assertEquals,com.google.gson.ParameterizedTypeTest,);
Call(METHOD,com.google.gson.ParameterizedTypeTest,testOurTypeFunctionality --> getRawType,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.ParameterizedTypeTest,testOurTypeFunctionality --> assertEquals,com.google.gson.ParameterizedTypeTest,);
Call(METHOD,com.google.gson.ParameterizedTypeTest,testOurTypeFunctionality --> assertEquals,com.google.gson.ParameterizedTypeTest,);
Call(METHOD,com.google.gson.ParameterizedTypeTest,testOurTypeFunctionality --> hashCode,java.lang.reflect.Type,);
Call(METHOD,com.google.gson.ParameterizedTypeTest,testOurTypeFunctionality --> hashCode,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.ParameterizedTypeTest,testNotEquals --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.ParameterizedTypeTest,testNotEquals --> assertFalse,com.google.gson.ParameterizedTypeTest,);
Call(METHOD,com.google.gson.ParameterizedTypeTest,testNotEquals --> equals,java.lang.reflect.Type,);
Call(METHOD,com.google.gson.ParameterizedTypeTest,testNotEquals --> assertFalse,com.google.gson.ParameterizedTypeTest,);
Call(METHOD,com.google.gson.ParameterizedTypeTest,testNotEquals --> equals,java.lang.reflect.ParameterizedType,);
EndClass 199
StartClass 200
Class(com.google.gson.reflect.TypeTokenTest,N,N,Public);
Attribute(listOfInteger,java.util.List,Public,N,N,);
Attribute(listOfNumber,java.util.List,Public,N,N,);
Attribute(listOfString,java.util.List,Public,N,N,);
Attribute(listOfUnknown,java.util.List,Public,N,N,);
Attribute(listOfSetOfString,java.util.List,Public,N,N,);
Attribute(listOfSetOfUnknown,java.util.List,Public,N,N,);
Method(testIsAssignableFromRawTypes,void,Public,N,N);
Method(testIsAssignableFromWithTypeParameters,void,Public,N,N);
Method(testIsAssignableFromWithBasicWildcards,void,Public,N,N);
Method(testIsAssignableFromWithNestedWildcards,void,Public,N,N);
Method(testArrayFactory,void,Public,N,N);
Method(testParameterizedFactory,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromRawTypes --> assertTrue,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromRawTypes --> get,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromRawTypes --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromRawTypes --> assertFalse,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromRawTypes --> get,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromRawTypes --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromRawTypes --> assertTrue,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromRawTypes --> get,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromRawTypes --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromRawTypes --> assertFalse,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromRawTypes --> get,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromRawTypes --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithTypeParameters --> getClass,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithTypeParameters --> getDeclaredField,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithTypeParameters --> getGenericType,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithTypeParameters --> getClass,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithTypeParameters --> getDeclaredField,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithTypeParameters --> getGenericType,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithTypeParameters --> assertTrue,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithTypeParameters --> get,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithTypeParameters --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithTypeParameters --> assertTrue,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithTypeParameters --> get,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithTypeParameters --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithTypeParameters --> assertFalse,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithTypeParameters --> get,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithTypeParameters --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithTypeParameters --> assertFalse,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithTypeParameters --> get,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithTypeParameters --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithBasicWildcards --> getClass,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithBasicWildcards --> getDeclaredField,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithBasicWildcards --> getGenericType,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithBasicWildcards --> getClass,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithBasicWildcards --> getDeclaredField,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithBasicWildcards --> getGenericType,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithBasicWildcards --> assertTrue,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithBasicWildcards --> get,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithBasicWildcards --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithBasicWildcards --> assertTrue,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithBasicWildcards --> get,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithBasicWildcards --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithBasicWildcards --> assertFalse,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithBasicWildcards --> get,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithBasicWildcards --> isAssignableFrom,null,);
Call(ATTRIBUTE,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithBasicWildcards --> listOfUnknown,java.util.List,WRITE);
Call(ATTRIBUTE,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithBasicWildcards --> listOfString,java.util.List,READ);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithNestedWildcards --> getClass,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithNestedWildcards --> getDeclaredField,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithNestedWildcards --> getGenericType,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithNestedWildcards --> getClass,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithNestedWildcards --> getDeclaredField,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithNestedWildcards --> getGenericType,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithNestedWildcards --> assertTrue,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithNestedWildcards --> get,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithNestedWildcards --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithNestedWildcards --> assertTrue,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithNestedWildcards --> get,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithNestedWildcards --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithNestedWildcards --> assertFalse,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithNestedWildcards --> get,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithNestedWildcards --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithNestedWildcards --> assertFalse,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithNestedWildcards --> get,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testIsAssignableFromWithNestedWildcards --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testArrayFactory --> assertEquals,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testArrayFactory --> getArray,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testArrayFactory --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testArrayFactory --> assertEquals,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testArrayFactory --> getArray,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testParameterizedFactory --> assertEquals,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testParameterizedFactory --> getParameterized,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testParameterizedFactory --> assertEquals,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testParameterizedFactory --> getParameterized,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testParameterizedFactory --> getParameterized,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testParameterizedFactory --> getType,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testParameterizedFactory --> getParameterized,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testParameterizedFactory --> getType,null,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testParameterizedFactory --> assertEquals,com.google.gson.reflect.TypeTokenTest,);
Call(METHOD,com.google.gson.reflect.TypeTokenTest,testParameterizedFactory --> getParameterized,null,);
EndClass 200
StartClass 201
Class(com.google.gson.regression.JsonAdapterNullSafeTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,Y,);
Method(testNullSafeBugSerialize,void,Public,N,N);
Method(testNullSafeBugDeserialize,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.regression.JsonAdapterNullSafeTest,testNullSafeBugSerialize --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.regression.JsonAdapterNullSafeTest,testNullSafeBugDeserialize --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.regression.JsonAdapterNullSafeTest,testNullSafeBugDeserialize --> assertEquals,com.google.gson.regression.JsonAdapterNullSafeTest,);
EndClass 201
StartClass 202
Class(com.google.gson.stream.JsonReaderTest,N,N,Public);
Method(testReadArray,void,Public,N,N);
Method(testReadEmptyArray,void,Public,N,N);
Method(testReadObject,void,Public,N,N);
Method(testReadEmptyObject,void,Public,N,N);
Method(testSkipArray,void,Public,N,N);
Method(testSkipArrayAfterPeek,void,Public,N,N);
Method(testSkipTopLevelObject,void,Public,N,N);
Method(testSkipObject,void,Public,N,N);
Method(testSkipObjectAfterPeek,void,Public,N,N);
Method(testSkipInteger,void,Public,N,N);
Method(testSkipDouble,void,Public,N,N);
Method(testHelloWorld,void,Public,N,N);
Method(testInvalidJsonInput,void,Public,N,N);
Method(testNulls,void,Public,N,N);
Method(testEmptyString,void,Public,N,N);
Method(testCharacterUnescaping,void,Public,N,N);
Method(testUnescapingInvalidCharacters,void,Public,N,N);
Method(testUnescapingTruncatedCharacters,void,Public,N,N);
Method(testUnescapingTruncatedSequence,void,Public,N,N);
Method(testIntegersWithFractionalPartSpecified,void,Public,N,N);
Method(testDoubles,void,Public,N,N);
Method(testStrictNonFiniteDoubles,void,Public,N,N);
Method(testStrictQuotedNonFiniteDoubles,void,Public,N,N);
Method(testLenientNonFiniteDoubles,void,Public,N,N);
Method(testLenientQuotedNonFiniteDoubles,void,Public,N,N);
Method(testStrictNonFiniteDoublesWithSkipValue,void,Public,N,N);
Method(testLongs,void,Public,N,N);
Method(disabled_testNumberWithOctalPrefix,void,Public,N,N);
Method(testBooleans,void,Public,N,N);
Method(testPeekingUnquotedStringsPrefixedWithBooleans,void,Public,N,N);
Method(testMalformedNumbers,void,Public,N,N);
Method(assertNotANumber,void,Private,N,N);
Method(testPeekingUnquotedStringsPrefixedWithIntegers,void,Public,N,N);
Method(testPeekLongMinValue,void,Public,N,N);
Method(testPeekLongMaxValue,void,Public,N,N);
Method(testLongLargerThanMaxLongThatWrapsAround,void,Public,N,N);
Method(testLongLargerThanMinLongThatWrapsAround,void,Public,N,N);
Method(testNegativeZero,void,Public,N,N);
Method(disabled_testPeekLargerThanLongMaxValue,void,Public,N,N);
Method(disabled_testPeekLargerThanLongMinValue,void,Public,N,N);
Method(disabled_testHighPrecisionLong,void,Public,N,N);
Method(testPeekMuchLargerThanLongMinValue,void,Public,N,N);
Method(testQuotedNumberWithEscape,void,Public,N,N);
Method(testMixedCaseLiterals,void,Public,N,N);
Method(testMissingValue,void,Public,N,N);
Method(testPrematureEndOfInput,void,Public,N,N);
Method(testPrematurelyClosed,void,Public,N,N);
Method(testNextFailuresDoNotAdvance,void,Public,N,N);
Method(testIntegerMismatchFailuresDoNotAdvance,void,Public,N,N);
Method(testStringNullIsNotNull,void,Public,N,N);
Method(testNullLiteralIsNotAString,void,Public,N,N);
Method(testStrictNameValueSeparator,void,Public,N,N);
Method(testLenientNameValueSeparator,void,Public,N,N);
Method(testStrictNameValueSeparatorWithSkipValue,void,Public,N,N);
Method(testCommentsInStringValue,void,Public,N,N);
Method(testStrictComments,void,Public,N,N);
Method(testLenientComments,void,Public,N,N);
Method(testStrictCommentsWithSkipValue,void,Public,N,N);
Method(testStrictUnquotedNames,void,Public,N,N);
Method(testLenientUnquotedNames,void,Public,N,N);
Method(testStrictUnquotedNamesWithSkipValue,void,Public,N,N);
Method(testStrictSingleQuotedNames,void,Public,N,N);
Method(testLenientSingleQuotedNames,void,Public,N,N);
Method(testStrictSingleQuotedNamesWithSkipValue,void,Public,N,N);
Method(testStrictUnquotedStrings,void,Public,N,N);
Method(testStrictUnquotedStringsWithSkipValue,void,Public,N,N);
Method(testLenientUnquotedStrings,void,Public,N,N);
Method(testStrictSingleQuotedStrings,void,Public,N,N);
Method(testLenientSingleQuotedStrings,void,Public,N,N);
Method(testStrictSingleQuotedStringsWithSkipValue,void,Public,N,N);
Method(testStrictSemicolonDelimitedArray,void,Public,N,N);
Method(testLenientSemicolonDelimitedArray,void,Public,N,N);
Method(testStrictSemicolonDelimitedArrayWithSkipValue,void,Public,N,N);
Method(testStrictSemicolonDelimitedNameValuePair,void,Public,N,N);
Method(testLenientSemicolonDelimitedNameValuePair,void,Public,N,N);
Method(testStrictSemicolonDelimitedNameValuePairWithSkipValue,void,Public,N,N);
Method(testStrictUnnecessaryArraySeparators,void,Public,N,N);
Method(testLenientUnnecessaryArraySeparators,void,Public,N,N);
Method(testStrictUnnecessaryArraySeparatorsWithSkipValue,void,Public,N,N);
Method(testStrictMultipleTopLevelValues,void,Public,N,N);
Method(testLenientMultipleTopLevelValues,void,Public,N,N);
Method(testStrictMultipleTopLevelValuesWithSkipValue,void,Public,N,N);
Method(testTopLevelValueTypes,void,Public,N,N);
Method(testTopLevelValueTypeWithSkipValue,void,Public,N,N);
Method(testStrictNonExecutePrefix,void,Public,N,N);
Method(testStrictNonExecutePrefixWithSkipValue,void,Public,N,N);
Method(testLenientNonExecutePrefix,void,Public,N,N);
Method(testLenientNonExecutePrefixWithLeadingWhitespace,void,Public,N,N);
Method(testLenientPartialNonExecutePrefix,void,Public,N,N);
Method(testBomIgnoredAsFirstCharacterOfDocument,void,Public,N,N);
Method(testBomForbiddenAsOtherCharacterInDocument,void,Public,N,N);
Method(testFailWithPosition,void,Public,N,N);
Method(testFailWithPositionGreaterThanBufferSize,void,Public,N,N);
Method(testFailWithPositionOverSlashSlashEndOfLineComment,void,Public,N,N);
Method(testFailWithPositionOverHashEndOfLineComment,void,Public,N,N);
Method(testFailWithPositionOverCStyleComment,void,Public,N,N);
Method(testFailWithPositionOverQuotedString,void,Public,N,N);
Method(testFailWithPositionOverUnquotedString,void,Public,N,N);
Method(testFailWithEscapedNewlineCharacter,void,Public,N,N);
Method(testFailWithPositionIsOffsetByBom,void,Public,N,N);
Method(testFailWithPosition$2,void,Private,N,N);
Method(testFailWithPositionDeepPath,void,Public,N,N);
Method(testStrictVeryLongNumber,void,Public,N,N);
Method(testLenientVeryLongNumber,void,Public,N,N);
Method(testVeryLongUnquotedLiteral,void,Public,N,N);
Method(testDeeplyNestedArrays,void,Public,N,N);
Method(testDeeplyNestedObjects,void,Public,N,N);
Method(testStringEndingInSlash,void,Public,N,N);
Method(testDocumentWithCommentEndingInSlash,void,Public,N,N);
Method(testStringWithLeadingSlash,void,Public,N,N);
Method(testUnterminatedObject,void,Public,N,N);
Method(testVeryLongQuotedString,void,Public,N,N);
Method(testVeryLongUnquotedString,void,Public,N,N);
Method(testVeryLongUnterminatedString,void,Public,N,N);
Method(testSkipVeryLongUnquotedString,void,Public,N,N);
Method(testSkipTopLevelUnquotedString,void,Public,N,N);
Method(testSkipVeryLongQuotedString,void,Public,N,N);
Method(testSkipTopLevelQuotedString,void,Public,N,N);
Method(testStringAsNumberWithTruncatedExponent,void,Public,N,N);
Method(testStringAsNumberWithDigitAndNonDigitExponent,void,Public,N,N);
Method(testStringAsNumberWithNonDigitExponent,void,Public,N,N);
Method(testEmptyStringName,void,Public,N,N);
Method(testStrictExtraCommasInMaps,void,Public,N,N);
Method(testLenientExtraCommasInMaps,void,Public,N,N);
Method(repeat,java.lang.String,Private,N,N);
Method(testMalformedDocuments,void,Public,N,N);
Method(testUnterminatedStringFailure,void,Public,N,N);
Method(assertDocument,void,Private,N,N);
Method(reader,java.io.Reader,Private,N,N);
Method(<init>,void,Public,N,N);
Parameter(assertNotANumber,java.lang.String,);
Parameter(testFailWithPosition$2,java.lang.String,);
Parameter(testFailWithPosition$2,java.lang.String,);
Parameter(repeat,com.google.gson.stream.char,);
Parameter(repeat,int,);
Parameter(assertDocument,java.lang.String,);
Parameter(reader,java.lang.String,);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadArray --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadArray --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadArray --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadArray --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadArray --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadArray --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadArray --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadArray --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadArray --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadEmptyArray --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadEmptyArray --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadEmptyArray --> assertFalse,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadEmptyArray --> hasNext,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadEmptyArray --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadEmptyArray --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadEmptyArray --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadObject --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadObject --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadObject --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadObject --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadObject --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadObject --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadObject --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadObject --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadObject --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadObject --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadObject --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadObject --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadObject --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadEmptyObject --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadEmptyObject --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadEmptyObject --> assertFalse,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadEmptyObject --> hasNext,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadEmptyObject --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadEmptyObject --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testReadEmptyObject --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArray --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArray --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArray --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArray --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArray --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArray --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArray --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArray --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArray --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArray --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArray --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArray --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArrayAfterPeek --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArrayAfterPeek --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArrayAfterPeek --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArrayAfterPeek --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArrayAfterPeek --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArrayAfterPeek --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArrayAfterPeek --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArrayAfterPeek --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArrayAfterPeek --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArrayAfterPeek --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArrayAfterPeek --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArrayAfterPeek --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArrayAfterPeek --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipArrayAfterPeek --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipTopLevelObject --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipTopLevelObject --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipTopLevelObject --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipTopLevelObject --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObject --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObject --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObject --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObject --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObject --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObject --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObject --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObject --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObject --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObject --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObject --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObjectAfterPeek --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObjectAfterPeek --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObjectAfterPeek --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObjectAfterPeek --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObjectAfterPeek --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObjectAfterPeek --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObjectAfterPeek --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObjectAfterPeek --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObjectAfterPeek --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObjectAfterPeek --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObjectAfterPeek --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObjectAfterPeek --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObjectAfterPeek --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObjectAfterPeek --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObjectAfterPeek --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObjectAfterPeek --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObjectAfterPeek --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipObjectAfterPeek --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipInteger --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipInteger --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipInteger --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipInteger --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipInteger --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipInteger --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipInteger --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipInteger --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipInteger --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipInteger --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipInteger --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipDouble --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipDouble --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipDouble --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipDouble --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipDouble --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipDouble --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipDouble --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipDouble --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipDouble --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipDouble --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipDouble --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testHelloWorld --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testHelloWorld --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testHelloWorld --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testHelloWorld --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testHelloWorld --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testHelloWorld --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testHelloWorld --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testHelloWorld --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testHelloWorld --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testHelloWorld --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testHelloWorld --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testHelloWorld --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testHelloWorld --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testHelloWorld --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testHelloWorld --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testInvalidJsonInput --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testInvalidJsonInput --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testInvalidJsonInput --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testInvalidJsonInput --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNulls --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testEmptyString --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testEmptyString --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testEmptyString --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testEmptyString --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testEmptyString --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testEmptyString --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCharacterUnescaping --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnescapingInvalidCharacters --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnescapingInvalidCharacters --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnescapingInvalidCharacters --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnescapingInvalidCharacters --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnescapingTruncatedCharacters --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnescapingTruncatedCharacters --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnescapingTruncatedCharacters --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnescapingTruncatedCharacters --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnescapingTruncatedSequence --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnescapingTruncatedSequence --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnescapingTruncatedSequence --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnescapingTruncatedSequence --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testIntegersWithFractionalPartSpecified --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testIntegersWithFractionalPartSpecified --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testIntegersWithFractionalPartSpecified --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testIntegersWithFractionalPartSpecified --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testIntegersWithFractionalPartSpecified --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testIntegersWithFractionalPartSpecified --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testIntegersWithFractionalPartSpecified --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testIntegersWithFractionalPartSpecified --> nextLong,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDoubles --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDoubles --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDoubles --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDoubles --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDoubles --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDoubles --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDoubles --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDoubles --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDoubles --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDoubles --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDoubles --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDoubles --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDoubles --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDoubles --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDoubles --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDoubles --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDoubles --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDoubles --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDoubles --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDoubles --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDoubles --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDoubles --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDoubles --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNonFiniteDoubles --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNonFiniteDoubles --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNonFiniteDoubles --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNonFiniteDoubles --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictQuotedNonFiniteDoubles --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictQuotedNonFiniteDoubles --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictQuotedNonFiniteDoubles --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictQuotedNonFiniteDoubles --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNonFiniteDoubles --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNonFiniteDoubles --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNonFiniteDoubles --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNonFiniteDoubles --> assertTrue,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNonFiniteDoubles --> isNaN,null,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNonFiniteDoubles --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNonFiniteDoubles --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNonFiniteDoubles --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNonFiniteDoubles --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNonFiniteDoubles --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNonFiniteDoubles --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientQuotedNonFiniteDoubles --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientQuotedNonFiniteDoubles --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientQuotedNonFiniteDoubles --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientQuotedNonFiniteDoubles --> assertTrue,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientQuotedNonFiniteDoubles --> isNaN,null,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientQuotedNonFiniteDoubles --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientQuotedNonFiniteDoubles --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientQuotedNonFiniteDoubles --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientQuotedNonFiniteDoubles --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientQuotedNonFiniteDoubles --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientQuotedNonFiniteDoubles --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNonFiniteDoublesWithSkipValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNonFiniteDoublesWithSkipValue --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNonFiniteDoublesWithSkipValue --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNonFiniteDoublesWithSkipValue --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> nextLong,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> nextLong,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> nextLong,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> nextLong,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> nextLong,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongs --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testNumberWithOctalPrefix --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testNumberWithOctalPrefix --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testNumberWithOctalPrefix --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testNumberWithOctalPrefix --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testNumberWithOctalPrefix --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testNumberWithOctalPrefix --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testNumberWithOctalPrefix --> nextLong,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testNumberWithOctalPrefix --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testNumberWithOctalPrefix --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testNumberWithOctalPrefix --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testNumberWithOctalPrefix --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testNumberWithOctalPrefix --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testNumberWithOctalPrefix --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testNumberWithOctalPrefix --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testNumberWithOctalPrefix --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testBooleans --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testBooleans --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testBooleans --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testBooleans --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testBooleans --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testBooleans --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testBooleans --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testBooleans --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testBooleans --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekingUnquotedStringsPrefixedWithBooleans --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekingUnquotedStringsPrefixedWithBooleans --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekingUnquotedStringsPrefixedWithBooleans --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekingUnquotedStringsPrefixedWithBooleans --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekingUnquotedStringsPrefixedWithBooleans --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekingUnquotedStringsPrefixedWithBooleans --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekingUnquotedStringsPrefixedWithBooleans --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekingUnquotedStringsPrefixedWithBooleans --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekingUnquotedStringsPrefixedWithBooleans --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekingUnquotedStringsPrefixedWithBooleans --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedNumbers --> assertNotANumber,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedNumbers --> assertNotANumber,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedNumbers --> assertNotANumber,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedNumbers --> assertNotANumber,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedNumbers --> assertNotANumber,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedNumbers --> assertNotANumber,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedNumbers --> assertNotANumber,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedNumbers --> assertNotANumber,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedNumbers --> assertNotANumber,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedNumbers --> assertNotANumber,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedNumbers --> assertNotANumber,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedNumbers --> assertNotANumber,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedNumbers --> assertNotANumber,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedNumbers --> assertNotANumber,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedNumbers --> assertNotANumber,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedNumbers --> assertNotANumber,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedNumbers --> assertNotANumber,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedNumbers --> assertNotANumber,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedNumbers --> assertNotANumber,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedNumbers --> assertNotANumber,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedNumbers --> assertNotANumber,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedNumbers --> assertNotANumber,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedNumbers --> assertNotANumber,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedNumbers --> assertNotANumber,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertNotANumber --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertNotANumber --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertNotANumber --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertNotANumber --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertNotANumber --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertNotANumber --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertNotANumber --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertNotANumber --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekingUnquotedStringsPrefixedWithIntegers --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekingUnquotedStringsPrefixedWithIntegers --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekingUnquotedStringsPrefixedWithIntegers --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekingUnquotedStringsPrefixedWithIntegers --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekingUnquotedStringsPrefixedWithIntegers --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekingUnquotedStringsPrefixedWithIntegers --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekingUnquotedStringsPrefixedWithIntegers --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekingUnquotedStringsPrefixedWithIntegers --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekingUnquotedStringsPrefixedWithIntegers --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekLongMinValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekLongMinValue --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekLongMinValue --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekLongMinValue --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekLongMinValue --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekLongMinValue --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekLongMinValue --> nextLong,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekLongMaxValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekLongMaxValue --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekLongMaxValue --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekLongMaxValue --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekLongMaxValue --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekLongMaxValue --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekLongMaxValue --> nextLong,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongLargerThanMaxLongThatWrapsAround --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongLargerThanMaxLongThatWrapsAround --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongLargerThanMaxLongThatWrapsAround --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongLargerThanMaxLongThatWrapsAround --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongLargerThanMaxLongThatWrapsAround --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongLargerThanMaxLongThatWrapsAround --> nextLong,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongLargerThanMaxLongThatWrapsAround --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongLargerThanMinLongThatWrapsAround --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongLargerThanMinLongThatWrapsAround --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongLargerThanMinLongThatWrapsAround --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongLargerThanMinLongThatWrapsAround --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongLargerThanMinLongThatWrapsAround --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongLargerThanMinLongThatWrapsAround --> nextLong,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLongLargerThanMinLongThatWrapsAround --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNegativeZero --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNegativeZero --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNegativeZero --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNegativeZero --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNegativeZero --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNegativeZero --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNegativeZero --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testPeekLargerThanLongMaxValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testPeekLargerThanLongMaxValue --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testPeekLargerThanLongMaxValue --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testPeekLargerThanLongMaxValue --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testPeekLargerThanLongMaxValue --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testPeekLargerThanLongMaxValue --> nextLong,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testPeekLargerThanLongMaxValue --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testPeekLargerThanLongMinValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testPeekLargerThanLongMinValue --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testPeekLargerThanLongMinValue --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testPeekLargerThanLongMinValue --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testPeekLargerThanLongMinValue --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testPeekLargerThanLongMinValue --> nextLong,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testPeekLargerThanLongMinValue --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testPeekLargerThanLongMinValue --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testPeekLargerThanLongMinValue --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testHighPrecisionLong --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testHighPrecisionLong --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testHighPrecisionLong --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testHighPrecisionLong --> nextLong,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,disabled_testHighPrecisionLong --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekMuchLargerThanLongMinValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekMuchLargerThanLongMinValue --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekMuchLargerThanLongMinValue --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekMuchLargerThanLongMinValue --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekMuchLargerThanLongMinValue --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekMuchLargerThanLongMinValue --> nextLong,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekMuchLargerThanLongMinValue --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekMuchLargerThanLongMinValue --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPeekMuchLargerThanLongMinValue --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testQuotedNumberWithEscape --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testQuotedNumberWithEscape --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testQuotedNumberWithEscape --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testQuotedNumberWithEscape --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testQuotedNumberWithEscape --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testQuotedNumberWithEscape --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testQuotedNumberWithEscape --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMixedCaseLiterals --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMixedCaseLiterals --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMixedCaseLiterals --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMixedCaseLiterals --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMixedCaseLiterals --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMixedCaseLiterals --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMixedCaseLiterals --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMixedCaseLiterals --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMixedCaseLiterals --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMixedCaseLiterals --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMixedCaseLiterals --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMixedCaseLiterals --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMixedCaseLiterals --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMixedCaseLiterals --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMixedCaseLiterals --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMissingValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMissingValue --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMissingValue --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMissingValue --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMissingValue --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMissingValue --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPrematureEndOfInput --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPrematureEndOfInput --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPrematureEndOfInput --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPrematureEndOfInput --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPrematureEndOfInput --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPrematureEndOfInput --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPrematureEndOfInput --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPrematureEndOfInput --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPrematurelyClosed --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPrematurelyClosed --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPrematurelyClosed --> close,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPrematurelyClosed --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPrematurelyClosed --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPrematurelyClosed --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPrematurelyClosed --> close,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPrematurelyClosed --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPrematurelyClosed --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPrematurelyClosed --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPrematurelyClosed --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPrematurelyClosed --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPrematurelyClosed --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPrematurelyClosed --> close,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPrematurelyClosed --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testPrematurelyClosed --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNextFailuresDoNotAdvance --> close,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testIntegerMismatchFailuresDoNotAdvance --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testIntegerMismatchFailuresDoNotAdvance --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testIntegerMismatchFailuresDoNotAdvance --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testIntegerMismatchFailuresDoNotAdvance --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testIntegerMismatchFailuresDoNotAdvance --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testIntegerMismatchFailuresDoNotAdvance --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testIntegerMismatchFailuresDoNotAdvance --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringNullIsNotNull --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringNullIsNotNull --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringNullIsNotNull --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringNullIsNotNull --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNullLiteralIsNotAString --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNullLiteralIsNotAString --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNullLiteralIsNotAString --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testNullLiteralIsNotAString --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNameValueSeparator --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNameValueSeparator --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNameValueSeparator --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNameValueSeparator --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNameValueSeparator --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNameValueSeparator --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNameValueSeparator --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNameValueSeparator --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNameValueSeparator --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNameValueSeparator --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNameValueSeparator --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNameValueSeparator --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNameValueSeparator --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNameValueSeparator --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNameValueSeparator --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNameValueSeparator --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNameValueSeparator --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNameValueSeparator --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNameValueSeparator --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNameValueSeparator --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNameValueSeparator --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNameValueSeparator --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNameValueSeparator --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNameValueSeparator --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNameValueSeparator --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNameValueSeparator --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNameValueSeparatorWithSkipValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNameValueSeparatorWithSkipValue --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNameValueSeparatorWithSkipValue --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNameValueSeparatorWithSkipValue --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNameValueSeparatorWithSkipValue --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNameValueSeparatorWithSkipValue --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNameValueSeparatorWithSkipValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNameValueSeparatorWithSkipValue --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNameValueSeparatorWithSkipValue --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNameValueSeparatorWithSkipValue --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNameValueSeparatorWithSkipValue --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNameValueSeparatorWithSkipValue --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCommentsInStringValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCommentsInStringValue --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCommentsInStringValue --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCommentsInStringValue --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCommentsInStringValue --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCommentsInStringValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCommentsInStringValue --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCommentsInStringValue --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCommentsInStringValue --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCommentsInStringValue --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCommentsInStringValue --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCommentsInStringValue --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCommentsInStringValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCommentsInStringValue --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCommentsInStringValue --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCommentsInStringValue --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCommentsInStringValue --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCommentsInStringValue --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testCommentsInStringValue --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictComments --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictComments --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictComments --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictComments --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictComments --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictComments --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictComments --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictComments --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictComments --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictComments --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictComments --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictComments --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientComments --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientComments --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientComments --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientComments --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientComments --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientComments --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientComments --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientComments --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientComments --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientComments --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientComments --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientComments --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientComments --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientComments --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientComments --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictCommentsWithSkipValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictCommentsWithSkipValue --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictCommentsWithSkipValue --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictCommentsWithSkipValue --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictCommentsWithSkipValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictCommentsWithSkipValue --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictCommentsWithSkipValue --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictCommentsWithSkipValue --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictCommentsWithSkipValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictCommentsWithSkipValue --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictCommentsWithSkipValue --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictCommentsWithSkipValue --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnquotedNames --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnquotedNames --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnquotedNames --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnquotedNames --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnquotedNames --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnquotedNames --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnquotedNames --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnquotedNames --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnquotedNames --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnquotedNamesWithSkipValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnquotedNamesWithSkipValue --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnquotedNamesWithSkipValue --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnquotedNamesWithSkipValue --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSingleQuotedNames --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSingleQuotedNames --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSingleQuotedNames --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSingleQuotedNames --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSingleQuotedNames --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSingleQuotedNames --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSingleQuotedNames --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSingleQuotedNames --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSingleQuotedNames --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSingleQuotedNamesWithSkipValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSingleQuotedNamesWithSkipValue --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSingleQuotedNamesWithSkipValue --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSingleQuotedNamesWithSkipValue --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnquotedStrings --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnquotedStrings --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnquotedStrings --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnquotedStrings --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnquotedStringsWithSkipValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnquotedStringsWithSkipValue --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnquotedStringsWithSkipValue --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnquotedStringsWithSkipValue --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnquotedStrings --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnquotedStrings --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnquotedStrings --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnquotedStrings --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnquotedStrings --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSingleQuotedStrings --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSingleQuotedStrings --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSingleQuotedStrings --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSingleQuotedStrings --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSingleQuotedStrings --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSingleQuotedStrings --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSingleQuotedStrings --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSingleQuotedStrings --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSingleQuotedStrings --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSingleQuotedStringsWithSkipValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSingleQuotedStringsWithSkipValue --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSingleQuotedStringsWithSkipValue --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSingleQuotedStringsWithSkipValue --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSemicolonDelimitedArray --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSemicolonDelimitedArray --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSemicolonDelimitedArray --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSemicolonDelimitedArray --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSemicolonDelimitedArray --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSemicolonDelimitedArray --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSemicolonDelimitedArray --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSemicolonDelimitedArray --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSemicolonDelimitedArray --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSemicolonDelimitedArray --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSemicolonDelimitedArray --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSemicolonDelimitedArray --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSemicolonDelimitedArrayWithSkipValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSemicolonDelimitedArrayWithSkipValue --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSemicolonDelimitedArrayWithSkipValue --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSemicolonDelimitedArrayWithSkipValue --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSemicolonDelimitedArrayWithSkipValue --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSemicolonDelimitedNameValuePair --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSemicolonDelimitedNameValuePair --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSemicolonDelimitedNameValuePair --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSemicolonDelimitedNameValuePair --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSemicolonDelimitedNameValuePair --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSemicolonDelimitedNameValuePair --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSemicolonDelimitedNameValuePair --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSemicolonDelimitedNameValuePair --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSemicolonDelimitedNameValuePair --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSemicolonDelimitedNameValuePair --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSemicolonDelimitedNameValuePair --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSemicolonDelimitedNameValuePair --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSemicolonDelimitedNameValuePair --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSemicolonDelimitedNameValuePair --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSemicolonDelimitedNameValuePair --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientSemicolonDelimitedNameValuePair --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSemicolonDelimitedNameValuePairWithSkipValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSemicolonDelimitedNameValuePairWithSkipValue --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSemicolonDelimitedNameValuePairWithSkipValue --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSemicolonDelimitedNameValuePairWithSkipValue --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSemicolonDelimitedNameValuePairWithSkipValue --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSemicolonDelimitedNameValuePairWithSkipValue --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictSemicolonDelimitedNameValuePairWithSkipValue --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparators --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparators --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparators --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparators --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparators --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparators --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparators --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparators --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparators --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparators --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparators --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparators --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparators --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparators --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparators --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparators --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparators --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparators --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparators --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparators --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientUnnecessaryArraySeparators --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparatorsWithSkipValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparatorsWithSkipValue --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparatorsWithSkipValue --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparatorsWithSkipValue --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparatorsWithSkipValue --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparatorsWithSkipValue --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparatorsWithSkipValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparatorsWithSkipValue --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparatorsWithSkipValue --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparatorsWithSkipValue --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparatorsWithSkipValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparatorsWithSkipValue --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparatorsWithSkipValue --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparatorsWithSkipValue --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparatorsWithSkipValue --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparatorsWithSkipValue --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparatorsWithSkipValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparatorsWithSkipValue --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparatorsWithSkipValue --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictUnnecessaryArraySeparatorsWithSkipValue --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictMultipleTopLevelValues --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictMultipleTopLevelValues --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictMultipleTopLevelValues --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictMultipleTopLevelValues --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictMultipleTopLevelValues --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientMultipleTopLevelValues --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientMultipleTopLevelValues --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientMultipleTopLevelValues --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientMultipleTopLevelValues --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientMultipleTopLevelValues --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientMultipleTopLevelValues --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientMultipleTopLevelValues --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientMultipleTopLevelValues --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientMultipleTopLevelValues --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientMultipleTopLevelValues --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictMultipleTopLevelValuesWithSkipValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictMultipleTopLevelValuesWithSkipValue --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictMultipleTopLevelValuesWithSkipValue --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictMultipleTopLevelValuesWithSkipValue --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictMultipleTopLevelValuesWithSkipValue --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> assertTrue,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> assertFalse,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypes --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypeWithSkipValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypeWithSkipValue --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypeWithSkipValue --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testTopLevelValueTypeWithSkipValue --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNonExecutePrefix --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNonExecutePrefix --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNonExecutePrefix --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNonExecutePrefixWithSkipValue --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNonExecutePrefixWithSkipValue --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictNonExecutePrefixWithSkipValue --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNonExecutePrefix --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNonExecutePrefix --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNonExecutePrefix --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNonExecutePrefix --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNonExecutePrefix --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNonExecutePrefix --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNonExecutePrefixWithLeadingWhitespace --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNonExecutePrefixWithLeadingWhitespace --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNonExecutePrefixWithLeadingWhitespace --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNonExecutePrefixWithLeadingWhitespace --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNonExecutePrefixWithLeadingWhitespace --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientNonExecutePrefixWithLeadingWhitespace --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientPartialNonExecutePrefix --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientPartialNonExecutePrefix --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientPartialNonExecutePrefix --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientPartialNonExecutePrefix --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientPartialNonExecutePrefix --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientPartialNonExecutePrefix --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testBomIgnoredAsFirstCharacterOfDocument --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testBomIgnoredAsFirstCharacterOfDocument --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testBomIgnoredAsFirstCharacterOfDocument --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testBomForbiddenAsOtherCharacterInDocument --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testBomForbiddenAsOtherCharacterInDocument --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testBomForbiddenAsOtherCharacterInDocument --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testBomForbiddenAsOtherCharacterInDocument --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPosition --> testFailWithPosition,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPositionGreaterThanBufferSize --> repeat,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPositionGreaterThanBufferSize --> testFailWithPosition,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPositionOverSlashSlashEndOfLineComment --> testFailWithPosition,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPositionOverHashEndOfLineComment --> testFailWithPosition,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPositionOverCStyleComment --> testFailWithPosition,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPositionOverQuotedString --> testFailWithPosition,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPositionOverUnquotedString --> testFailWithPosition,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithEscapedNewlineCharacter --> testFailWithPosition,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPositionIsOffsetByBom --> testFailWithPosition,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPosition$2 --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPosition$2 --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPosition$2 --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPosition$2 --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPosition$2 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPosition$2 --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPosition$2 --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPosition$2 --> getMessage,null,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPosition$2 --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPosition$2 --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPosition$2 --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPosition$2 --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPosition$2 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPosition$2 --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPosition$2 --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPosition$2 --> getMessage,null,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPositionDeepPath --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPositionDeepPath --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPositionDeepPath --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPositionDeepPath --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPositionDeepPath --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPositionDeepPath --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPositionDeepPath --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPositionDeepPath --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPositionDeepPath --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPositionDeepPath --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPositionDeepPath --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testFailWithPositionDeepPath --> getMessage,null,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictVeryLongNumber --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictVeryLongNumber --> repeat,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictVeryLongNumber --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictVeryLongNumber --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictVeryLongNumber --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictVeryLongNumber --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientVeryLongNumber --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientVeryLongNumber --> repeat,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientVeryLongNumber --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientVeryLongNumber --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientVeryLongNumber --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientVeryLongNumber --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientVeryLongNumber --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientVeryLongNumber --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientVeryLongNumber --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientVeryLongNumber --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientVeryLongNumber --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongUnquotedLiteral --> repeat,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongUnquotedLiteral --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongUnquotedLiteral --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongUnquotedLiteral --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongUnquotedLiteral --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongUnquotedLiteral --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongUnquotedLiteral --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDeeplyNestedArrays --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDeeplyNestedArrays --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDeeplyNestedArrays --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDeeplyNestedArrays --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDeeplyNestedArrays --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDeeplyNestedArrays --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDeeplyNestedArrays --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDeeplyNestedObjects --> format,null,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDeeplyNestedObjects --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDeeplyNestedObjects --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDeeplyNestedObjects --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDeeplyNestedObjects --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDeeplyNestedObjects --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDeeplyNestedObjects --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDeeplyNestedObjects --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDeeplyNestedObjects --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDeeplyNestedObjects --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDeeplyNestedObjects --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDeeplyNestedObjects --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringEndingInSlash --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringEndingInSlash --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringEndingInSlash --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringEndingInSlash --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDocumentWithCommentEndingInSlash --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDocumentWithCommentEndingInSlash --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDocumentWithCommentEndingInSlash --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testDocumentWithCommentEndingInSlash --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringWithLeadingSlash --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringWithLeadingSlash --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringWithLeadingSlash --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringWithLeadingSlash --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnterminatedObject --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnterminatedObject --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnterminatedObject --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnterminatedObject --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnterminatedObject --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnterminatedObject --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnterminatedObject --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnterminatedObject --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnterminatedObject --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongQuotedString --> fill,null,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongQuotedString --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongQuotedString --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongQuotedString --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongQuotedString --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongQuotedString --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongUnquotedString --> fill,null,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongUnquotedString --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongUnquotedString --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongUnquotedString --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongUnquotedString --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongUnquotedString --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongUnquotedString --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongUnterminatedString --> fill,null,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongUnterminatedString --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongUnterminatedString --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongUnterminatedString --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongUnterminatedString --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongUnterminatedString --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongUnterminatedString --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testVeryLongUnterminatedString --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipVeryLongUnquotedString --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipVeryLongUnquotedString --> repeat,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipVeryLongUnquotedString --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipVeryLongUnquotedString --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipVeryLongUnquotedString --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipVeryLongUnquotedString --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipTopLevelUnquotedString --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipTopLevelUnquotedString --> repeat,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipTopLevelUnquotedString --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipTopLevelUnquotedString --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipTopLevelUnquotedString --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipTopLevelUnquotedString --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipVeryLongQuotedString --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipVeryLongQuotedString --> repeat,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipVeryLongQuotedString --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipVeryLongQuotedString --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipVeryLongQuotedString --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipTopLevelQuotedString --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipTopLevelQuotedString --> repeat,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipTopLevelQuotedString --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipTopLevelQuotedString --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipTopLevelQuotedString --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testSkipTopLevelQuotedString --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringAsNumberWithTruncatedExponent --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringAsNumberWithTruncatedExponent --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringAsNumberWithTruncatedExponent --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringAsNumberWithTruncatedExponent --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringAsNumberWithTruncatedExponent --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringAsNumberWithDigitAndNonDigitExponent --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringAsNumberWithDigitAndNonDigitExponent --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringAsNumberWithDigitAndNonDigitExponent --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringAsNumberWithDigitAndNonDigitExponent --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringAsNumberWithDigitAndNonDigitExponent --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringAsNumberWithNonDigitExponent --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringAsNumberWithNonDigitExponent --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringAsNumberWithNonDigitExponent --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringAsNumberWithNonDigitExponent --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStringAsNumberWithNonDigitExponent --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testEmptyStringName --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testEmptyStringName --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testEmptyStringName --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testEmptyStringName --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testEmptyStringName --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testEmptyStringName --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testEmptyStringName --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testEmptyStringName --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testEmptyStringName --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testEmptyStringName --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testEmptyStringName --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testEmptyStringName --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testEmptyStringName --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testEmptyStringName --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testEmptyStringName --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testEmptyStringName --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testEmptyStringName --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testEmptyStringName --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictExtraCommasInMaps --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictExtraCommasInMaps --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictExtraCommasInMaps --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictExtraCommasInMaps --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictExtraCommasInMaps --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictExtraCommasInMaps --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictExtraCommasInMaps --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testStrictExtraCommasInMaps --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientExtraCommasInMaps --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientExtraCommasInMaps --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientExtraCommasInMaps --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientExtraCommasInMaps --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientExtraCommasInMaps --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientExtraCommasInMaps --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientExtraCommasInMaps --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientExtraCommasInMaps --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testLenientExtraCommasInMaps --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,repeat --> fill,null,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testMalformedDocuments --> assertDocument,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnterminatedStringFailure --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnterminatedStringFailure --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnterminatedStringFailure --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnterminatedStringFailure --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnterminatedStringFailure --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnterminatedStringFailure --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,testUnterminatedStringFailure --> fail,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertDocument --> reader,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertDocument --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertDocument --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertDocument --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertDocument --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertDocument --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertDocument --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertDocument --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertDocument --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertDocument --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertDocument --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertDocument --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertDocument --> assertEquals,com.google.gson.stream.JsonReaderTest,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertDocument --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertDocument --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertDocument --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderTest,assertDocument --> fail,com.google.gson.stream.JsonReaderTest,);
EndClass 202
StartClass 203
Class(com.google.gson.stream.JsonWriterTest,N,N,Public);
Method(testTopLevelValueTypes,void,Public,N,N);
Method(testInvalidTopLevelTypes,void,Public,N,N);
Method(testTwoNames,void,Public,N,N);
Method(testNameWithoutValue,void,Public,N,N);
Method(testValueWithoutName,void,Public,N,N);
Method(testMultipleTopLevelValues,void,Public,N,N);
Method(testBadNestingObject,void,Public,N,N);
Method(testBadNestingArray,void,Public,N,N);
Method(testNullName,void,Public,N,N);
Method(testNullStringValue,void,Public,N,N);
Method(testJsonValue,void,Public,N,N);
Method(testNonFiniteDoubles,void,Public,N,N);
Method(testNonFiniteBoxedDoubles,void,Public,N,N);
Method(testNonFiniteDoublesWhenLenient,void,Public,N,N);
Method(testNonFiniteBoxedDoublesWhenLenient,void,Public,N,N);
Method(testDoubles,void,Public,N,N);
Method(testLongs,void,Public,N,N);
Method(testNumbers,void,Public,N,N);
Method(testBooleans,void,Public,N,N);
Method(testBoxedBooleans,void,Public,N,N);
Method(testNulls,void,Public,N,N);
Method(testStrings,void,Public,N,N);
Method(testUnicodeLineBreaksEscaped,void,Public,N,N);
Method(testEmptyArray,void,Public,N,N);
Method(testEmptyObject,void,Public,N,N);
Method(testObjectsInArrays,void,Public,N,N);
Method(testArraysInObjects,void,Public,N,N);
Method(testDeepNestingArrays,void,Public,N,N);
Method(testDeepNestingObjects,void,Public,N,N);
Method(testRepeatedName,void,Public,N,N);
Method(testPrettyPrintObject,void,Public,N,N);
Method(testPrettyPrintArray,void,Public,N,N);
Method(testLenientWriterPermitsMultipleTopLevelValues,void,Public,N,N);
Method(testStrictWriterDoesNotPermitMultipleTopLevelValues,void,Public,N,N);
Method(testClosedWriterThrowsOnStructure,void,Public,N,N);
Method(testClosedWriterThrowsOnName,void,Public,N,N);
Method(testClosedWriterThrowsOnValue,void,Public,N,N);
Method(testClosedWriterThrowsOnFlush,void,Public,N,N);
Method(testWriterCloseIsIdempotent,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testTopLevelValueTypes --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testTopLevelValueTypes --> close,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testTopLevelValueTypes --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testTopLevelValueTypes --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testTopLevelValueTypes --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testTopLevelValueTypes --> close,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testTopLevelValueTypes --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testTopLevelValueTypes --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testTopLevelValueTypes --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testTopLevelValueTypes --> close,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testTopLevelValueTypes --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testTopLevelValueTypes --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testTopLevelValueTypes --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testTopLevelValueTypes --> close,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testTopLevelValueTypes --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testTopLevelValueTypes --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testTopLevelValueTypes --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testTopLevelValueTypes --> close,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testTopLevelValueTypes --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testTopLevelValueTypes --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testInvalidTopLevelTypes --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testInvalidTopLevelTypes --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testInvalidTopLevelTypes --> fail,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testTwoNames --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testTwoNames --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testTwoNames --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testTwoNames --> fail,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNameWithoutValue --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNameWithoutValue --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNameWithoutValue --> endObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNameWithoutValue --> fail,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testValueWithoutName --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testValueWithoutName --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testValueWithoutName --> fail,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testMultipleTopLevelValues --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testMultipleTopLevelValues --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testMultipleTopLevelValues --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testMultipleTopLevelValues --> fail,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testBadNestingObject --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testBadNestingObject --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testBadNestingObject --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testBadNestingObject --> fail,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testBadNestingArray --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testBadNestingArray --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testBadNestingArray --> endObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testBadNestingArray --> fail,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNullName --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNullName --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNullName --> fail,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNullStringValue --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNullStringValue --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNullStringValue --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNullStringValue --> endObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNullStringValue --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNullStringValue --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testJsonValue --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testJsonValue --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testJsonValue --> jsonValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testJsonValue --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testJsonValue --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testJsonValue --> endObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testJsonValue --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testJsonValue --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteDoubles --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteDoubles --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteDoubles --> fail,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteDoubles --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteDoubles --> fail,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteDoubles --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteDoubles --> fail,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteBoxedDoubles --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteBoxedDoubles --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteBoxedDoubles --> fail,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteBoxedDoubles --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteBoxedDoubles --> fail,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteBoxedDoubles --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteBoxedDoubles --> fail,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteDoublesWhenLenient --> setLenient,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteDoublesWhenLenient --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteDoublesWhenLenient --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteDoublesWhenLenient --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteDoublesWhenLenient --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteDoublesWhenLenient --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteDoublesWhenLenient --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteDoublesWhenLenient --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteBoxedDoublesWhenLenient --> setLenient,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteBoxedDoublesWhenLenient --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteBoxedDoublesWhenLenient --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteBoxedDoublesWhenLenient --> valueOf,null,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteBoxedDoublesWhenLenient --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteBoxedDoublesWhenLenient --> valueOf,null,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteBoxedDoublesWhenLenient --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteBoxedDoublesWhenLenient --> valueOf,null,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteBoxedDoublesWhenLenient --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteBoxedDoublesWhenLenient --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNonFiniteBoxedDoublesWhenLenient --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDoubles --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDoubles --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDoubles --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDoubles --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDoubles --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDoubles --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDoubles --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDoubles --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDoubles --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDoubles --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDoubles --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDoubles --> close,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDoubles --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDoubles --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testLongs --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testLongs --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testLongs --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testLongs --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testLongs --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testLongs --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testLongs --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testLongs --> close,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testLongs --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testLongs --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNumbers --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNumbers --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNumbers --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNumbers --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNumbers --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNumbers --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNumbers --> close,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNumbers --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNumbers --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testBooleans --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testBooleans --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testBooleans --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testBooleans --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testBooleans --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testBooleans --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testBoxedBooleans --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testBoxedBooleans --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testBoxedBooleans --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testBoxedBooleans --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testBoxedBooleans --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testBoxedBooleans --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testBoxedBooleans --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNulls --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNulls --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNulls --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNulls --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testNulls --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrings --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrings --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrings --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrings --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrings --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrings --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrings --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrings --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrings --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrings --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrings --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrings --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrings --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrings --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrings --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrings --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrings --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrings --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrings --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrings --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrings --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrings --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testUnicodeLineBreaksEscaped --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testUnicodeLineBreaksEscaped --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testUnicodeLineBreaksEscaped --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testUnicodeLineBreaksEscaped --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testUnicodeLineBreaksEscaped --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testEmptyArray --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testEmptyArray --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testEmptyArray --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testEmptyArray --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testEmptyObject --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testEmptyObject --> endObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testEmptyObject --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testEmptyObject --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testObjectsInArrays --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testObjectsInArrays --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testObjectsInArrays --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testObjectsInArrays --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testObjectsInArrays --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testObjectsInArrays --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testObjectsInArrays --> endObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testObjectsInArrays --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testObjectsInArrays --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testObjectsInArrays --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testObjectsInArrays --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testObjectsInArrays --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testObjectsInArrays --> endObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testObjectsInArrays --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testObjectsInArrays --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testObjectsInArrays --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testArraysInObjects --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testArraysInObjects --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testArraysInObjects --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testArraysInObjects --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testArraysInObjects --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testArraysInObjects --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testArraysInObjects --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testArraysInObjects --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testArraysInObjects --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testArraysInObjects --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testArraysInObjects --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testArraysInObjects --> endObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testArraysInObjects --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testArraysInObjects --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDeepNestingArrays --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDeepNestingArrays --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDeepNestingArrays --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDeepNestingArrays --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDeepNestingObjects --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDeepNestingObjects --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDeepNestingObjects --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDeepNestingObjects --> endObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDeepNestingObjects --> endObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDeepNestingObjects --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testDeepNestingObjects --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testRepeatedName --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testRepeatedName --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testRepeatedName --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testRepeatedName --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testRepeatedName --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testRepeatedName --> endObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testRepeatedName --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testRepeatedName --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> setIndent,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> endObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> endObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintObject --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintArray --> setIndent,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintArray --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintArray --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintArray --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintArray --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintArray --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintArray --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintArray --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintArray --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintArray --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintArray --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintArray --> endObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintArray --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintArray --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintArray --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintArray --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintArray --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintArray --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testPrettyPrintArray --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testLenientWriterPermitsMultipleTopLevelValues --> setLenient,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testLenientWriterPermitsMultipleTopLevelValues --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testLenientWriterPermitsMultipleTopLevelValues --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testLenientWriterPermitsMultipleTopLevelValues --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testLenientWriterPermitsMultipleTopLevelValues --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testLenientWriterPermitsMultipleTopLevelValues --> close,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testLenientWriterPermitsMultipleTopLevelValues --> assertEquals,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testLenientWriterPermitsMultipleTopLevelValues --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrictWriterDoesNotPermitMultipleTopLevelValues --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrictWriterDoesNotPermitMultipleTopLevelValues --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrictWriterDoesNotPermitMultipleTopLevelValues --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testStrictWriterDoesNotPermitMultipleTopLevelValues --> fail,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnStructure --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnStructure --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnStructure --> close,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnStructure --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnStructure --> fail,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnStructure --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnStructure --> fail,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnStructure --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnStructure --> fail,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnStructure --> endObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnStructure --> fail,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnName --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnName --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnName --> close,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnName --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnName --> fail,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnValue --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnValue --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnValue --> close,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnValue --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnValue --> fail,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnFlush --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnFlush --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnFlush --> close,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnFlush --> flush,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testClosedWriterThrowsOnFlush --> fail,com.google.gson.stream.JsonWriterTest,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testWriterCloseIsIdempotent --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testWriterCloseIsIdempotent --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testWriterCloseIsIdempotent --> close,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.stream.JsonWriterTest,testWriterCloseIsIdempotent --> close,com.google.gson.stream.JsonWriter,);
EndClass 203
StartClass 204
Class(com.google.gson.VersionExclusionStrategyTest,N,N,Public);
Attribute(VERSION,double,Private,Y,Y,);
Method(testClassAndFieldAreAtSameVersion,void,Public,N,N);
Method(testClassAndFieldAreBehindInVersion,void,Public,N,N);
Method(testClassAndFieldAreAheadInVersion,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Call(METHOD,com.google.gson.VersionExclusionStrategyTest,testClassAndFieldAreAtSameVersion --> withVersion,null,);
Call(METHOD,com.google.gson.VersionExclusionStrategyTest,testClassAndFieldAreAtSameVersion --> assertFalse,com.google.gson.VersionExclusionStrategyTest,);
Call(METHOD,com.google.gson.VersionExclusionStrategyTest,testClassAndFieldAreAtSameVersion --> excludeClass,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.VersionExclusionStrategyTest,testClassAndFieldAreAtSameVersion --> assertFalse,com.google.gson.VersionExclusionStrategyTest,);
Call(METHOD,com.google.gson.VersionExclusionStrategyTest,testClassAndFieldAreAtSameVersion --> excludeField,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.VersionExclusionStrategyTest,testClassAndFieldAreAtSameVersion --> getField,null,);
Call(METHOD,com.google.gson.VersionExclusionStrategyTest,testClassAndFieldAreBehindInVersion --> withVersion,null,);
Call(METHOD,com.google.gson.VersionExclusionStrategyTest,testClassAndFieldAreBehindInVersion --> assertFalse,com.google.gson.VersionExclusionStrategyTest,);
Call(METHOD,com.google.gson.VersionExclusionStrategyTest,testClassAndFieldAreBehindInVersion --> excludeClass,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.VersionExclusionStrategyTest,testClassAndFieldAreBehindInVersion --> assertFalse,com.google.gson.VersionExclusionStrategyTest,);
Call(METHOD,com.google.gson.VersionExclusionStrategyTest,testClassAndFieldAreBehindInVersion --> excludeField,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.VersionExclusionStrategyTest,testClassAndFieldAreBehindInVersion --> getField,null,);
Call(METHOD,com.google.gson.VersionExclusionStrategyTest,testClassAndFieldAreAheadInVersion --> withVersion,null,);
Call(METHOD,com.google.gson.VersionExclusionStrategyTest,testClassAndFieldAreAheadInVersion --> assertTrue,com.google.gson.VersionExclusionStrategyTest,);
Call(METHOD,com.google.gson.VersionExclusionStrategyTest,testClassAndFieldAreAheadInVersion --> excludeClass,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.VersionExclusionStrategyTest,testClassAndFieldAreAheadInVersion --> assertTrue,com.google.gson.VersionExclusionStrategyTest,);
Call(METHOD,com.google.gson.VersionExclusionStrategyTest,testClassAndFieldAreAheadInVersion --> excludeField,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.VersionExclusionStrategyTest,testClassAndFieldAreAheadInVersion --> getField,null,);
EndClass 204
StartClass 205
Class(com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Attribute(gsonWithEnumNumbers,com.google.gson.Gson,Private,N,N,);
Attribute(gsonWithLowerHyphen,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testProtoWithAnnotations_deserialize,void,Public,N,N);
Method(testProtoWithAnnotations_deserializeUnknownEnumValue,void,Public,N,N);
Method(testProtoWithAnnotations_deserializeUnrecognizedEnumValue,void,Public,N,N);
Method(testProtoWithAnnotations_deserializeWithEnumNumbers,void,Public,N,N);
Method(testProtoWithAnnotations_serialize,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,setUp --> setUp,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,setUp --> newBuilder,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,setUp --> setEnumSerialization,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,setUp --> addSerializedNameExtension,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,setUp --> addSerializedEnumValueExtension,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,setUp --> registerTypeHierarchyAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,setUp --> build,com.google.gson.protobuf.functional.ProtoTypeAdapter.Builder,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,setUp --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,setUp --> registerTypeHierarchyAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,setUp --> setEnumSerialization,com.google.gson.protobuf.functional.ProtoTypeAdapter.Builder,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,setUp --> build,com.google.gson.protobuf.functional.ProtoTypeAdapter.Builder,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,setUp --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,setUp --> registerTypeHierarchyAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,setUp --> setFieldNameSerializationFormat,com.google.gson.protobuf.functional.ProtoTypeAdapter.Builder,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,setUp --> build,com.google.gson.protobuf.functional.ProtoTypeAdapter.Builder,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,setUp --> create,com.google.gson.GsonBuilder,);
Call(ATTRIBUTE,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(ATTRIBUTE,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,setUp --> gsonWithEnumNumbers,com.google.gson.Gson,WRITE);
Call(ATTRIBUTE,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,setUp --> gsonWithLowerHyphen,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> format,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> assertThat,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> getId,com.google.gson.protobuf.generated.Bag.ProtoWithAnnotations,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> isEqualTo,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> assertThat,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> getOuterMessage,com.google.gson.protobuf.generated.Bag.ProtoWithAnnotations,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> isEqualTo,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> newBuilder,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> setMonth,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> setYear,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> setLongTimestamp,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> setCountryCode5F55,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> build,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> assertThat,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> hasInnerMessage1,com.google.gson.protobuf.generated.Bag.ProtoWithAnnotations,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> isFalse,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> assertThat,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> getInnerMessage2,com.google.gson.protobuf.generated.Bag.ProtoWithAnnotations,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> isEqualTo,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> newBuilder,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> setNIdCt,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> setContent,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> addData,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> newBuilder,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> setData,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> setHeight,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> addData,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> newBuilder,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> setData,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> setWidth,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> build,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> assertThat,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserialize --> isEqualTo,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeUnknownEnumValue --> format,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeUnknownEnumValue --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeUnknownEnumValue --> assertThat,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeUnknownEnumValue --> getContent,com.google.gson.protobuf.generated.Bag.ProtoWithAnnotations.InnerMessage,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeUnknownEnumValue --> isEqualTo,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeUnrecognizedEnumValue --> format,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeUnrecognizedEnumValue --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeUnrecognizedEnumValue --> assert_,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeUnrecognizedEnumValue --> fail,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeWithEnumNumbers --> format,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeWithEnumNumbers --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeWithEnumNumbers --> assertThat,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeWithEnumNumbers --> getContent,com.google.gson.protobuf.generated.Bag.ProtoWithAnnotations.InnerMessage,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeWithEnumNumbers --> isEqualTo,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeWithEnumNumbers --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeWithEnumNumbers --> assertThat,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeWithEnumNumbers --> isEqualTo,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeWithEnumNumbers --> format,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeWithEnumNumbers --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeWithEnumNumbers --> assertThat,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeWithEnumNumbers --> getContent,com.google.gson.protobuf.generated.Bag.ProtoWithAnnotations.InnerMessage,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeWithEnumNumbers --> isEqualTo,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeWithEnumNumbers --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeWithEnumNumbers --> assertThat,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeWithEnumNumbers --> isEqualTo,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(ATTRIBUTE,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeWithEnumNumbers --> gsonWithEnumNumbers,com.google.gson.Gson,READ);
Call(ATTRIBUTE,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_deserializeWithEnumNumbers --> gsonWithEnumNumbers,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> newBuilder,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> setId,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> setOuterMessage,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> newBuilder,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> setMonth,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> setYear,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> setLongTimestamp,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> setInnerMessage1,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> newBuilder,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> setNIdCt,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> setContent,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> addData,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> newBuilder,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> setData,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> setWidth,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> addData,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> newBuilder,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> setHeight,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> build,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> assertThat,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> isEqualTo,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> assertThat,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,testProtoWithAnnotations_serialize --> isEqualTo,com.google.gson.protobuf.functional.ProtosWithAnnotationsTest,);
EndClass 205
StartClass 206
Class(com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Attribute(upperCamelGson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testSerializeRepeatedFields,void,Public,N,N);
Method(testDeserializeRepeatedFieldsProto,void,Public,N,N);
Method(testSerializeDifferentCaseFormat,void,Public,N,N);
Method(testDeserializeDifferentCaseFormat,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,setUp --> setUp,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,setUp --> registerTypeHierarchyAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,setUp --> newBuilder,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,setUp --> setEnumSerialization,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,setUp --> build,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,setUp --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,setUp --> registerTypeHierarchyAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,setUp --> newBuilder,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,setUp --> setFieldNameSerializationFormat,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,setUp --> build,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,setUp --> create,com.google.gson.GsonBuilder,);
Call(ATTRIBUTE,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(ATTRIBUTE,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,setUp --> upperCamelGson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeRepeatedFields --> newBuilder,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeRepeatedFields --> addNumbers,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeRepeatedFields --> addNumbers,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeRepeatedFields --> addSimples,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeRepeatedFields --> newBuilder,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeRepeatedFields --> setMsg,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeRepeatedFields --> build,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeRepeatedFields --> addSimples,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeRepeatedFields --> newBuilder,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeRepeatedFields --> setCount,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeRepeatedFields --> build,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeRepeatedFields --> build,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeRepeatedFields --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeRepeatedFields --> assertTrue,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeRepeatedFields --> contains,java.lang.String,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeRepeatedFields --> assertTrue,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeRepeatedFields --> contains,java.lang.String,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeRepeatedFields --> assertTrue,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeRepeatedFields --> contains,java.lang.String,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testDeserializeRepeatedFieldsProto --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testDeserializeRepeatedFieldsProto --> assertEquals,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testDeserializeRepeatedFieldsProto --> getNumbers,com.google.gson.protobuf.generated.Bag.ProtoWithRepeatedFields,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testDeserializeRepeatedFieldsProto --> assertEquals,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testDeserializeRepeatedFieldsProto --> getNumbers,com.google.gson.protobuf.generated.Bag.ProtoWithRepeatedFields,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testDeserializeRepeatedFieldsProto --> assertEquals,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testDeserializeRepeatedFieldsProto --> getSimples,com.google.gson.protobuf.generated.Bag.ProtoWithRepeatedFields,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testDeserializeRepeatedFieldsProto --> getMsg,com.google.gson.protobuf.generated.Bag.ProtoWithRepeatedFields,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testDeserializeRepeatedFieldsProto --> assertEquals,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testDeserializeRepeatedFieldsProto --> getSimples,com.google.gson.protobuf.generated.Bag.ProtoWithRepeatedFields,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testDeserializeRepeatedFieldsProto --> getCount,com.google.gson.protobuf.generated.Bag.ProtoWithRepeatedFields,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeDifferentCaseFormat --> newBuilder,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeDifferentCaseFormat --> setAnotherField,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeDifferentCaseFormat --> addNameThatTestsCaseFormat,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeDifferentCaseFormat --> build,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeDifferentCaseFormat --> toJsonTree,com.google.gson.Gson,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeDifferentCaseFormat --> getAsJsonObject,com.google.gson.Gson,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeDifferentCaseFormat --> assertEquals,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeDifferentCaseFormat --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeDifferentCaseFormat --> getAsString,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeDifferentCaseFormat --> assertEquals,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeDifferentCaseFormat --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeDifferentCaseFormat --> getAsJsonArray,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeDifferentCaseFormat --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testSerializeDifferentCaseFormat --> getAsString,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testDeserializeDifferentCaseFormat --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testDeserializeDifferentCaseFormat --> assertEquals,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testDeserializeDifferentCaseFormat --> getAnotherField,com.google.gson.protobuf.generated.Bag.ProtoWithDifferentCaseFormat,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testDeserializeDifferentCaseFormat --> assertEquals,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest,testDeserializeDifferentCaseFormat --> getNameThatTestsCaseFormat,com.google.gson.protobuf.generated.Bag.ProtoWithDifferentCaseFormat,);
EndClass 206
StartClass 207
Class(com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Method(setUp,void,Protected,N,N);
Method(testSerializeEmptyProto,void,Public,N,N);
Method(testDeserializeEmptyProto,void,Public,N,N);
Method(testSerializeProto,void,Public,N,N);
Method(testDeserializeProto,void,Public,N,N);
Method(testDeserializeWithExplicitNullValue,void,Public,N,N);
Method(<init>,void,Public,N,N);
SuperClass(junit.framework.TestCase);
Generalization(junit.framework.TestCase);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,setUp --> setUp,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,setUp --> registerTypeHierarchyAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,setUp --> newBuilder,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,setUp --> setEnumSerialization,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,setUp --> build,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,setUp --> create,com.google.gson.GsonBuilder,);
Call(ATTRIBUTE,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,setUp --> gson,com.google.gson.Gson,WRITE);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testSerializeEmptyProto --> newBuilder,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testSerializeEmptyProto --> build,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testSerializeEmptyProto --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testSerializeEmptyProto --> assertEquals,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testDeserializeEmptyProto --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testDeserializeEmptyProto --> assertFalse,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testDeserializeEmptyProto --> hasCount,com.google.gson.protobuf.generated.Bag.SimpleProto,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testDeserializeEmptyProto --> assertFalse,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testDeserializeEmptyProto --> hasMsg,com.google.gson.protobuf.generated.Bag.SimpleProto,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testSerializeProto --> getDescriptor,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testSerializeProto --> newBuilder,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testSerializeProto --> setCount,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testSerializeProto --> setMsg,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testSerializeProto --> build,null,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testSerializeProto --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testSerializeProto --> assertTrue,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testSerializeProto --> contains,java.lang.String,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testSerializeProto --> assertTrue,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testSerializeProto --> contains,java.lang.String,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testDeserializeProto --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testDeserializeProto --> assertEquals,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testDeserializeProto --> getMsg,com.google.gson.protobuf.generated.Bag.SimpleProto,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testDeserializeProto --> assertEquals,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testDeserializeProto --> getCount,com.google.gson.protobuf.generated.Bag.SimpleProto,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testDeserializeWithExplicitNullValue --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testDeserializeWithExplicitNullValue --> assertEquals,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testDeserializeWithExplicitNullValue --> getMsg,com.google.gson.protobuf.generated.Bag.SimpleProto,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testDeserializeWithExplicitNullValue --> assertEquals,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,);
Call(METHOD,com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest,testDeserializeWithExplicitNullValue --> getCount,com.google.gson.protobuf.generated.Bag.SimpleProto,);
EndClass 207
StartClass 208
Class(com.google.gson.codegen.functional.Order,N,N,Public);
Attribute(itemName,java.lang.String,Private,N,Y,);
Attribute(price,int,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(getItemName,java.lang.String,Public,N,N);
Method(getAmount,int,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,int,);
Call(ATTRIBUTE,com.google.gson.codegen.functional.Order,<init> --> itemName,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.codegen.functional.Order,<init> --> price,int,READ);
EndClass 208
StartClass 209
Class(com.google.gson.examples.android.GsonProguardExampleActivity,N,N,Public);
Method(onCreate,void,Public,N,N);
Method(buildCart,com.google.gson.examples.android.model.Cart,Private,N,N);
Method(<init>,void,Public,N,N);
Parameter(onCreate,android.os.Bundle,);
SuperClass(android.app.Activity);
Generalization(android.app.Activity);
Call(METHOD,com.google.gson.examples.android.GsonProguardExampleActivity,onCreate --> onCreate,null,);
Call(METHOD,com.google.gson.examples.android.GsonProguardExampleActivity,onCreate --> setContentView,com.google.gson.examples.android.GsonProguardExampleActivity,);
Call(METHOD,com.google.gson.examples.android.GsonProguardExampleActivity,onCreate --> findViewById,com.google.gson.examples.android.GsonProguardExampleActivity,);
Call(METHOD,com.google.gson.examples.android.GsonProguardExampleActivity,onCreate --> buildCart,com.google.gson.examples.android.GsonProguardExampleActivity,);
Call(METHOD,com.google.gson.examples.android.GsonProguardExampleActivity,onCreate --> append,com.google.gson.examples.android.StringBuilder,);
Call(METHOD,com.google.gson.examples.android.GsonProguardExampleActivity,onCreate --> append,com.google.gson.examples.android.StringBuilder,);
Call(METHOD,com.google.gson.examples.android.GsonProguardExampleActivity,onCreate --> append,com.google.gson.examples.android.StringBuilder,);
Call(METHOD,com.google.gson.examples.android.GsonProguardExampleActivity,onCreate --> append,com.google.gson.examples.android.StringBuilder,);
Call(METHOD,com.google.gson.examples.android.GsonProguardExampleActivity,onCreate --> append,com.google.gson.examples.android.StringBuilder,);
Call(METHOD,com.google.gson.examples.android.GsonProguardExampleActivity,onCreate --> append,com.google.gson.examples.android.StringBuilder,);
Call(METHOD,com.google.gson.examples.android.GsonProguardExampleActivity,onCreate --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.examples.android.GsonProguardExampleActivity,onCreate --> append,com.google.gson.examples.android.StringBuilder,);
Call(METHOD,com.google.gson.examples.android.GsonProguardExampleActivity,onCreate --> append,com.google.gson.examples.android.StringBuilder,);
Call(METHOD,com.google.gson.examples.android.GsonProguardExampleActivity,onCreate --> append,com.google.gson.examples.android.StringBuilder,);
Call(METHOD,com.google.gson.examples.android.GsonProguardExampleActivity,onCreate --> append,com.google.gson.examples.android.StringBuilder,);
Call(METHOD,com.google.gson.examples.android.GsonProguardExampleActivity,onCreate --> append,com.google.gson.examples.android.StringBuilder,);
Call(METHOD,com.google.gson.examples.android.GsonProguardExampleActivity,onCreate --> append,com.google.gson.examples.android.StringBuilder,);
Call(METHOD,com.google.gson.examples.android.GsonProguardExampleActivity,onCreate --> append,com.google.gson.examples.android.StringBuilder,);
Call(METHOD,com.google.gson.examples.android.GsonProguardExampleActivity,onCreate --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.examples.android.GsonProguardExampleActivity,onCreate --> append,com.google.gson.examples.android.StringBuilder,);
Call(METHOD,com.google.gson.examples.android.GsonProguardExampleActivity,onCreate --> setText,android.widget.TextView,);
Call(METHOD,com.google.gson.examples.android.GsonProguardExampleActivity,onCreate --> toString,com.google.gson.examples.android.StringBuilder,);
Call(METHOD,com.google.gson.examples.android.GsonProguardExampleActivity,onCreate --> invalidate,android.widget.TextView,);
Call(METHOD,com.google.gson.examples.android.GsonProguardExampleActivity,buildCart --> add,java.util.List,);
EndClass 209
StartClass 210
Class(com.google.gson.examples.android.model.Cart,N,N,Public);
Attribute(lineItems,java.util.List,Public,N,Y,);
Attribute(buyerName,java.lang.String,Private,N,Y,);
Attribute(creditCard,java.lang.String,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(getLineItems,java.util.List,Public,N,N);
Method(getBuyerName,java.lang.String,Public,N,N);
Method(getCreditCard,java.lang.String,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(getSimpleTypeName,java.lang.String,Public,Y,N);
Parameter(<init>,java.util.List,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.String,);
Parameter(getSimpleTypeName,java.lang.reflect.Type,);
Call(ATTRIBUTE,com.google.gson.examples.android.model.Cart,<init> --> lineItems,java.util.List,READ);
Call(ATTRIBUTE,com.google.gson.examples.android.model.Cart,<init> --> buyerName,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.examples.android.model.Cart,<init> --> creditCard,java.lang.String,READ);
Call(METHOD,com.google.gson.examples.android.model.Cart,toString --> getField,null,);
Call(METHOD,com.google.gson.examples.android.model.Cart,toString --> getType,null,);
Call(METHOD,com.google.gson.examples.android.model.Cart,toString --> println,null,);
Call(METHOD,com.google.gson.examples.android.model.Cart,toString --> getSimpleTypeName,com.google.gson.examples.android.model.Cart,);
Call(METHOD,com.google.gson.examples.android.model.Cart,toString --> append,com.google.gson.examples.android.model.StringBuilder,);
Call(METHOD,com.google.gson.examples.android.model.Cart,toString --> append,com.google.gson.examples.android.model.StringBuilder,);
Call(METHOD,com.google.gson.examples.android.model.Cart,toString --> toString,com.google.gson.examples.android.model.StringBuilder,);
Call(METHOD,com.google.gson.examples.android.model.Cart,getSimpleTypeName --> getSimpleName,java.lang.Class,);
Call(METHOD,com.google.gson.examples.android.model.Cart,getSimpleTypeName --> getSimpleTypeName,com.google.gson.examples.android.model.Cart,);
Call(METHOD,com.google.gson.examples.android.model.Cart,getSimpleTypeName --> getRawType,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.examples.android.model.Cart,getSimpleTypeName --> append,com.google.gson.examples.android.model.StringBuilder,);
Call(METHOD,com.google.gson.examples.android.model.Cart,getSimpleTypeName --> getActualTypeArguments,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.examples.android.model.Cart,getSimpleTypeName --> append,com.google.gson.examples.android.model.StringBuilder,);
Call(METHOD,com.google.gson.examples.android.model.Cart,getSimpleTypeName --> append,com.google.gson.examples.android.model.StringBuilder,);
Call(METHOD,com.google.gson.examples.android.model.Cart,getSimpleTypeName --> getSimpleTypeName,com.google.gson.examples.android.model.Cart,);
Call(METHOD,com.google.gson.examples.android.model.Cart,getSimpleTypeName --> append,com.google.gson.examples.android.model.StringBuilder,);
Call(METHOD,com.google.gson.examples.android.model.Cart,getSimpleTypeName --> toString,com.google.gson.examples.android.model.StringBuilder,);
Call(METHOD,com.google.gson.examples.android.model.Cart,getSimpleTypeName --> toString,java.lang.reflect.Type,);
EndClass 210
StartClass 211
Class(android.app.Activity,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.examples.android.GsonProguardExampleActivity);
EndClass 211
StartClass 212
Class(com.google.gson.examples.android.model.LineItem,N,N,Public);
Attribute(name,java.lang.String,Private,N,Y,);
Attribute(quantity,int,Private,N,Y,);
Attribute(priceInMicros,long,Private,N,Y,);
Attribute(currencyCode,java.lang.String,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(getQuantity,int,Public,N,N);
Method(getPriceInMicros,long,Public,N,N);
Method(getCurrencyCode,java.lang.String,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,int,);
Parameter(<init>,long,);
Parameter(<init>,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.examples.android.model.LineItem,<init> --> name,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.examples.android.model.LineItem,<init> --> quantity,int,READ);
Call(ATTRIBUTE,com.google.gson.examples.android.model.LineItem,<init> --> priceInMicros,long,READ);
Call(ATTRIBUTE,com.google.gson.examples.android.model.LineItem,<init> --> currencyCode,java.lang.String,READ);
Call(METHOD,com.google.gson.examples.android.model.LineItem,toString --> format,null,);
EndClass 212
StartClass 213
Class(com.google.gson.extras.examples.rawcollections.RawCollectionsExample,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 213
StartClass 214
Class(com.google.gson.extras.examples.rawcollections.RawCollectionsExample.Event,N,N,Protected);
Attribute(name,java.lang.String,Private,N,N,);
Attribute(source,java.lang.String,Private,N,N,);
Method(<init>,void,Private,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(main,void,Public,Y,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.String,);
Parameter(main,java.lang.String[],);
Call(ATTRIBUTE,com.google.gson.extras.examples.rawcollections.RawCollectionsExample.Event,<init> --> name,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.extras.examples.rawcollections.RawCollectionsExample.Event,<init> --> source,java.lang.String,READ);
Call(METHOD,com.google.gson.extras.examples.rawcollections.RawCollectionsExample.Event,toString --> format,null,);
Call(METHOD,com.google.gson.extras.examples.rawcollections.RawCollectionsExample.Event,main --> add,java.util.Collection,);
Call(METHOD,com.google.gson.extras.examples.rawcollections.RawCollectionsExample.Event,main --> add,java.util.Collection,);
Call(METHOD,com.google.gson.extras.examples.rawcollections.RawCollectionsExample.Event,main --> add,java.util.Collection,);
Call(METHOD,com.google.gson.extras.examples.rawcollections.RawCollectionsExample.Event,main --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.extras.examples.rawcollections.RawCollectionsExample.Event,main --> println,null,);
Call(METHOD,com.google.gson.extras.examples.rawcollections.RawCollectionsExample.Event,main --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.extras.examples.rawcollections.RawCollectionsExample.Event,main --> getAsJsonArray,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.extras.examples.rawcollections.RawCollectionsExample.Event,main --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.extras.examples.rawcollections.RawCollectionsExample.Event,main --> get,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.extras.examples.rawcollections.RawCollectionsExample.Event,main --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.extras.examples.rawcollections.RawCollectionsExample.Event,main --> get,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.extras.examples.rawcollections.RawCollectionsExample.Event,main --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.extras.examples.rawcollections.RawCollectionsExample.Event,main --> get,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.extras.examples.rawcollections.RawCollectionsExample.Event,main --> printf,null,);
EndClass 214
StartClass 215
Class(com.google.gson.graph.GraphAdapterBuilder.Factory,N,N,Protected);
Attribute(instanceCreators,java.util.Map,Private,N,Y,);
Attribute(graphThreadLocal,java.lang.ThreadLocal,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(create,com.google.gson.TypeAdapter,Public,N,N);
Method(write,void,Public,N,N);
Method(read,com.google.gson.graph.T,Public,N,N);
Method(createInstance,java.lang.Object,Public,N,N);
Parameter(<init>,java.util.Map,);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.graph.T,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(createInstance,java.lang.reflect.Type,);
Realization(com.google.gson.TypeAdapterFactory);
Realization(com.google.gson.InstanceCreator);
Call(ATTRIBUTE,com.google.gson.graph.GraphAdapterBuilder.Factory,<init> --> instanceCreators,java.util.Map,READ);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,create --> containsKey,java.util.Map,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,create --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,create --> getDelegateAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,create --> getAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,write --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,write --> get,java.lang.ThreadLocal,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,write --> get,com.google.gson.graph.Graph,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,write --> nextName,com.google.gson.graph.Graph,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,write --> put,com.google.gson.graph.Graph,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,write --> add,com.google.gson.graph.Graph,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,write --> set,java.lang.ThreadLocal,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,write --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,write --> poll,com.google.gson.graph.Graph,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,write --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,write --> write,com.google.gson.graph.Element,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,write --> endObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,write --> remove,java.lang.ThreadLocal,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,write --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,read --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,read --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,read --> get,java.lang.ThreadLocal,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,read --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,read --> hasNext,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,read --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,read --> read,null,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,read --> put,com.google.gson.graph.Graph,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,read --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,read --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,read --> set,java.lang.ThreadLocal,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,read --> get,com.google.gson.graph.Graph,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,read --> read,com.google.gson.graph.Element,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,read --> remove,java.lang.ThreadLocal,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,createInstance --> get,java.lang.ThreadLocal,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,createInstance --> get,java.util.Map,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory,createInstance --> createInstance,com.google.gson.InstanceCreator,);
EndClass 215
StartClass 216
Class(com.google.gson.InstanceCreator,Y,Y,Public);
Method(createInstance,com.google.gson.T,Public,N,Y);
Parameter(createInstance,java.lang.reflect.Type,);
EndClass 216
StartClass 217
Class(com.google.gson.graph.Graph,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 217
StartClass 218
Class(com.google.gson.graph.GraphAdapterBuilder.Factory.Graph,N,N,Protected);
Attribute(map,java.util.Map,Private,N,Y,);
Attribute(queue,java.util.Queue,Private,N,Y,);
Attribute(nextCreate,com.google.gson.graph.Element,Private,N,N,);
Method(<init>,void,Private,N,N);
Method(nextName,java.lang.String,Public,N,N);
Parameter(<init>,java.util.Map,);
Composition(com.google.gson.graph.Element);
Call(ATTRIBUTE,com.google.gson.graph.GraphAdapterBuilder.Factory.Graph,<init> --> map,java.util.Map,READ);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory.Graph,nextName --> toHexString,null,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory.Graph,nextName --> size,java.util.Map,);
EndClass 218
StartClass 219
Class(com.google.gson.graph.Element,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 219
StartClass 220
Class(com.google.gson.graph.GraphAdapterBuilder.Factory.Graph.Element,N,N,Protected);
Attribute(id,java.lang.String,Private,N,Y,);
Attribute(value,com.google.gson.graph.T,Private,N,N,);
Attribute(typeAdapter,com.google.gson.TypeAdapter,Private,N,N,);
Attribute(element,com.google.gson.JsonElement,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(write,void,Public,N,N);
Method(read,void,Public,N,N);
Parameter(<init>,com.google.gson.graph.T,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,com.google.gson.TypeAdapter,);
Parameter(<init>,com.google.gson.JsonElement,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(read,com.google.gson.graph.Graph,);
Composition(com.google.gson.TypeAdapter<T>);
Composition(com.google.gson.JsonElement);
Call(ATTRIBUTE,com.google.gson.graph.GraphAdapterBuilder.Factory.Graph.Element,<init> --> value,com.google.gson.graph.T,READ);
Call(ATTRIBUTE,com.google.gson.graph.GraphAdapterBuilder.Factory.Graph.Element,<init> --> id,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.graph.GraphAdapterBuilder.Factory.Graph.Element,<init> --> typeAdapter,com.google.gson.TypeAdapter,READ);
Call(ATTRIBUTE,com.google.gson.graph.GraphAdapterBuilder.Factory.Graph.Element,<init> --> element,com.google.gson.JsonElement,READ);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory.Graph.Element,write --> write,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilder.Factory.Graph.Element,read --> fromJsonTree,com.google.gson.TypeAdapter,);
Call(ATTRIBUTE,com.google.gson.graph.GraphAdapterBuilder.Factory.Graph.Element,read --> value,com.google.gson.graph.T,WRITE);
Call(ATTRIBUTE,com.google.gson.graph.GraphAdapterBuilder.Factory.Graph.Element,read --> typeAdapter,com.google.gson.TypeAdapter,READ);
EndClass 220
StartClass 221
Class(com.google.gson.interceptors.InterceptorFactory,N,N,Public);
Method(create,com.google.gson.TypeAdapter,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
Realization(com.google.gson.TypeAdapterFactory);
Call(METHOD,com.google.gson.interceptors.InterceptorFactory,create --> getRawType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.interceptors.InterceptorFactory,create --> getAnnotation,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.interceptors.InterceptorFactory,create --> getDelegateAdapter,com.google.gson.Gson,);
EndClass 221
StartClass 222
Class(com.google.gson.interceptors.InterceptorFactory.InterceptorAdapter,N,N,Protected);
Attribute(delegate,com.google.gson.TypeAdapter,Private,N,Y,);
Attribute(postDeserializer,com.google.gson.interceptors.JsonPostDeserializer,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(write,void,Public,N,N);
Method(read,com.google.gson.interceptors.T,Public,N,N);
Parameter(<init>,com.google.gson.TypeAdapter,);
Parameter(<init>,com.google.gson.interceptors.Intercept,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.interceptors.T,);
Parameter(read,com.google.gson.stream.JsonReader,);
SuperClass(com.google.gson.interceptors.TypeAdapter);
Generalization(com.google.gson.interceptors.TypeAdapter);
Composition(com.google.gson.TypeAdapter<T>);
Call(METHOD,com.google.gson.interceptors.InterceptorFactory.InterceptorAdapter,<init> --> postDeserialize,com.google.gson.interceptors.Intercept,);
Call(METHOD,com.google.gson.interceptors.InterceptorFactory.InterceptorAdapter,<init> --> newInstance,com.google.gson.interceptors.Intercept,);
Call(ATTRIBUTE,com.google.gson.interceptors.InterceptorFactory.InterceptorAdapter,<init> --> delegate,com.google.gson.TypeAdapter,READ);
Call(METHOD,com.google.gson.interceptors.InterceptorFactory.InterceptorAdapter,write --> write,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.interceptors.InterceptorFactory.InterceptorAdapter,read --> read,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.interceptors.InterceptorFactory.InterceptorAdapter,read --> postDeserialize,com.google.gson.interceptors.JsonPostDeserializer,);
EndClass 222
StartClass 223
Class(com.google.gson.interceptors.TypeAdapter,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.interceptors.InterceptorFactory.InterceptorAdapter);
EndClass 223
StartClass 224
Class(com.google.gson.typeadapters.PostConstructAdapterFactory,N,N,Public);
Method(create,com.google.gson.TypeAdapter,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
Realization(com.google.gson.TypeAdapterFactory);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactory,create --> getRawType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactory,create --> getSuperclass,java.lang.Class,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactory,create --> getSuperclass,java.lang.Class,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactory,create --> getDeclaredMethods,java.lang.Class,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactory,create --> isAnnotationPresent,null,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactory,create --> setAccessible,null,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactory,create --> getDelegateAdapter,com.google.gson.Gson,);
EndClass 224
StartClass 225
Class(com.google.gson.typeadapters.PostConstructAdapterFactory.PostConstructAdapter,N,N,Protected);
Attribute(delegate,com.google.gson.TypeAdapter,Private,N,Y,);
Attribute(method,java.lang.reflect.Method,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(read,com.google.gson.typeadapters.T,Public,N,N);
Method(write,void,Public,N,N);
Parameter(<init>,com.google.gson.TypeAdapter,);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.typeadapters.T,);
SuperClass(com.google.gson.typeadapters.TypeAdapter);
Generalization(com.google.gson.typeadapters.TypeAdapter);
Composition(com.google.gson.TypeAdapter<T>);
Call(ATTRIBUTE,com.google.gson.typeadapters.PostConstructAdapterFactory.PostConstructAdapter,<init> --> delegate,com.google.gson.TypeAdapter,READ);
Call(ATTRIBUTE,com.google.gson.typeadapters.PostConstructAdapterFactory.PostConstructAdapter,<init> --> method,java.lang.reflect.Method,READ);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactory.PostConstructAdapter,read --> read,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactory.PostConstructAdapter,read --> invoke,java.lang.reflect.Method,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactory.PostConstructAdapter,read --> getCause,null,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactory.PostConstructAdapter,read --> getCause,null,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactory.PostConstructAdapter,read --> getCause,null,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactory.PostConstructAdapter,write --> write,com.google.gson.TypeAdapter,);
EndClass 225
StartClass 226
Class(com.google.gson.typeadapters.TypeAdapter,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.typeadapters.PostConstructAdapterFactory.PostConstructAdapter);
EndClass 226
StartClass 227
Class(com.google.gson.typeadapters.RuntimeTypeAdapterFactory,N,N,Public);
Attribute(baseType,java.lang.Class,Private,N,Y,);
Attribute(typeFieldName,java.lang.String,Private,N,Y,);
Attribute(labelToSubtype,java.util.Map,Private,N,Y,);
Attribute(subtypeToLabel,java.util.Map,Private,N,Y,);
Attribute(maintainType,boolean,Private,N,Y,);
Method(<init>,void,Private,N,N);
Method(of,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,Public,N,N);
Method(of$2,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,Public,N,N);
Method(of$3,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,Public,N,N);
Method(registerSubtype,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,Public,N,N);
Method(registerSubtype$2,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,Public,N,N);
Method(create,com.google.gson.TypeAdapter,Public,N,N);
Method(read,com.google.gson.typeadapters.R,Public,N,N);
Method(write,void,Public,N,N);
Parameter(<init>,java.lang.Class,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,boolean,);
Parameter(of,java.lang.Class,);
Parameter(of,java.lang.String,);
Parameter(of,boolean,);
Parameter(of$2,java.lang.Class,);
Parameter(of$2,java.lang.String,);
Parameter(of$3,java.lang.Class,);
Parameter(registerSubtype,java.lang.Class,);
Parameter(registerSubtype,java.lang.String,);
Parameter(registerSubtype$2,java.lang.Class,);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.typeadapters.R,);
Realization(com.google.gson.TypeAdapterFactory);
Call(ATTRIBUTE,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,<init> --> baseType,java.lang.Class,READ);
Call(ATTRIBUTE,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,<init> --> typeFieldName,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,<init> --> maintainType,boolean,READ);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,registerSubtype --> containsKey,java.util.Map,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,registerSubtype --> containsKey,java.util.Map,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,registerSubtype --> put,java.util.Map,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,registerSubtype --> put,java.util.Map,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,registerSubtype$2 --> registerSubtype,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,registerSubtype$2 --> getSimpleName,java.lang.Class,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,create --> getRawType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,create --> entrySet,java.util.Map,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,create --> getDelegateAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,create --> get,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,create --> getValue,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,create --> put,java.util.Map,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,create --> getKey,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,create --> put,java.util.Map,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,create --> getValue,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,read --> parse,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,read --> getAsJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,read --> get,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,read --> getAsJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,read --> remove,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,read --> getAsString,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,read --> get,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,read --> fromJsonTree,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,write --> getClass,com.google.gson.typeadapters.R,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,write --> get,java.util.Map,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,write --> get,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,write --> getName,java.lang.Class,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,write --> toJsonTree,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,write --> getAsJsonObject,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,write --> write,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,write --> has,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,write --> getName,java.lang.Class,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,write --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,write --> entrySet,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,write --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,write --> getKey,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,write --> getValue,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,write --> write,null,);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactory,write --> nullSafe,com.google.gson.TypeAdapter,);
EndClass 227
StartClass 228
Class(com.google.gson.typeadapters.UtcDateTypeAdapter,N,N,Public);
Attribute(UTC_TIME_ZONE,java.util.TimeZone,Private,N,Y,);
Attribute(GMT_ID,java.lang.String,Private,Y,Y,);
Method(write,void,Public,N,N);
Method(read,java.util.Date,Public,N,N);
Method(format,java.lang.String,Private,Y,N);
Method(padInt,void,Private,Y,N);
Method(parse,java.util.Date,Private,Y,N);
Method(checkOffset,boolean,Private,Y,N);
Method(parseInt,int,Private,Y,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,java.util.Date,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(format,java.util.Date,);
Parameter(format,boolean,);
Parameter(format,java.util.TimeZone,);
Parameter(padInt,com.google.gson.typeadapters.StringBuilder,);
Parameter(padInt,int,);
Parameter(padInt,int,);
Parameter(parse,java.lang.String,);
Parameter(parse,java.text.ParsePosition,);
Parameter(checkOffset,java.lang.String,);
Parameter(checkOffset,int,);
Parameter(checkOffset,com.google.gson.typeadapters.char,);
Parameter(parseInt,java.lang.String,);
Parameter(parseInt,int,);
Parameter(parseInt,int,);
SuperClass(com.google.gson.typeadapters.TypeAdapter);
Generalization(com.google.gson.typeadapters.TypeAdapter);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,write --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,write --> format,com.google.gson.typeadapters.UtcDateTypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,write --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,read --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,read --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,read --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,read --> parse,com.google.gson.typeadapters.UtcDateTypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> setTime,java.util.Calendar,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> length,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> length,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> getRawOffset,java.util.TimeZone,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> length,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> length,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> padInt,com.google.gson.typeadapters.UtcDateTypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> length,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> append,com.google.gson.typeadapters.StringBuilder,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> padInt,com.google.gson.typeadapters.UtcDateTypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> length,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> append,com.google.gson.typeadapters.StringBuilder,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> padInt,com.google.gson.typeadapters.UtcDateTypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> length,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> append,com.google.gson.typeadapters.StringBuilder,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> padInt,com.google.gson.typeadapters.UtcDateTypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> length,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> append,com.google.gson.typeadapters.StringBuilder,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> padInt,com.google.gson.typeadapters.UtcDateTypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> length,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> append,com.google.gson.typeadapters.StringBuilder,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> padInt,com.google.gson.typeadapters.UtcDateTypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> length,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> append,com.google.gson.typeadapters.StringBuilder,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> padInt,com.google.gson.typeadapters.UtcDateTypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> length,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> getOffset,java.util.TimeZone,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> getTimeInMillis,java.util.Calendar,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> abs,null,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> abs,null,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> append,com.google.gson.typeadapters.StringBuilder,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> padInt,com.google.gson.typeadapters.UtcDateTypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> length,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> append,com.google.gson.typeadapters.StringBuilder,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> padInt,com.google.gson.typeadapters.UtcDateTypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> length,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> append,com.google.gson.typeadapters.StringBuilder,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,format --> toString,com.google.gson.typeadapters.StringBuilder,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,padInt --> toString,null,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,padInt --> length,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,padInt --> append,com.google.gson.typeadapters.StringBuilder,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,padInt --> append,com.google.gson.typeadapters.StringBuilder,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> getIndex,java.text.ParsePosition,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> parseInt,com.google.gson.typeadapters.UtcDateTypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> checkOffset,com.google.gson.typeadapters.UtcDateTypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> parseInt,com.google.gson.typeadapters.UtcDateTypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> checkOffset,com.google.gson.typeadapters.UtcDateTypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> parseInt,com.google.gson.typeadapters.UtcDateTypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> checkOffset,com.google.gson.typeadapters.UtcDateTypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> parseInt,com.google.gson.typeadapters.UtcDateTypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> checkOffset,com.google.gson.typeadapters.UtcDateTypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> parseInt,com.google.gson.typeadapters.UtcDateTypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> checkOffset,com.google.gson.typeadapters.UtcDateTypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> length,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> charAt,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> parseInt,com.google.gson.typeadapters.UtcDateTypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> checkOffset,com.google.gson.typeadapters.UtcDateTypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> parseInt,com.google.gson.typeadapters.UtcDateTypeAdapter,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> length,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> charAt,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> substring,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> length,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> getTimeZone,null,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> getID,java.util.TimeZone,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> equals,java.util.TimeZone,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> setLenient,java.util.Calendar,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> set,java.util.Calendar,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> set,java.util.Calendar,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> set,java.util.Calendar,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> set,java.util.Calendar,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> set,java.util.Calendar,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> set,java.util.Calendar,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> set,java.util.Calendar,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> setIndex,java.text.ParsePosition,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> getTime,java.util.Calendar,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> getMessage,java.lang.Exception,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> getIndex,java.text.ParsePosition,);
Call(ATTRIBUTE,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> GMT_ID,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.typeadapters.UtcDateTypeAdapter,parse --> GMT_ID,java.lang.String,READ);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,checkOffset --> length,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,checkOffset --> charAt,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parseInt --> length,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parseInt --> digit,null,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parseInt --> charAt,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parseInt --> digit,null,);
Call(METHOD,com.google.gson.typeadapters.UtcDateTypeAdapter,parseInt --> charAt,java.lang.String,);
EndClass 228
StartClass 229
Class(com.google.gson.typeadapters.TypeAdapter,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.typeadapters.UtcDateTypeAdapter);
EndClass 229
StartClass 230
Class(com.google.gson.graph.GraphAdapterBuilderTest.Roshambo,N,N,Protected);
Attribute(name,java.lang.String,Public,N,N,);
Attribute(beats,com.google.gson.graph.Roshambo,Public,N,N,);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Composition(com.google.gson.graph.Roshambo);
Call(ATTRIBUTE,com.google.gson.graph.GraphAdapterBuilderTest.Roshambo,<init> --> name,java.lang.String,READ);
EndClass 230
StartClass 231
Class(com.google.gson.graph.Roshambo,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 231
StartClass 232
Class(com.google.gson.graph.GraphAdapterBuilderTest.Roshambo.Employee,N,N,Protected);
Attribute(name,java.lang.String,Public,N,Y,);
Attribute(company,com.google.gson.graph.Company,Public,N,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,com.google.gson.graph.Company,);
Composition(com.google.gson.graph.Company);
Call(METHOD,com.google.gson.graph.GraphAdapterBuilderTest.Roshambo.Employee,<init> --> add,null,);
Call(ATTRIBUTE,com.google.gson.graph.GraphAdapterBuilderTest.Roshambo.Employee,<init> --> name,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.graph.GraphAdapterBuilderTest.Roshambo.Employee,<init> --> company,com.google.gson.graph.Company,READ);
EndClass 232
StartClass 233
Class(com.google.gson.graph.GraphAdapterBuilderTest.Roshambo.Employee.Company,N,N,Protected);
Attribute(name,java.lang.String,Public,N,Y,);
Attribute(employees,java.util.List,Public,N,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.graph.GraphAdapterBuilderTest.Roshambo.Employee.Company,<init> --> name,java.lang.String,READ);
EndClass 233
StartClass 234
Class(com.google.gson.interceptors.InterceptorTest.UserGroup,N,N,Private);
Attribute(user,com.google.gson.interceptors.User,Public,N,N,);
Attribute(city,java.lang.String,Public,N,N,);
Method(<init>,void,Public,N,N);
Composition(com.google.gson.interceptors.User);
EndClass 234
StartClass 235
Class(com.google.gson.interceptors.InterceptorTest.UserGroup.User,N,N,Private);
Attribute(DEFAULT_EMAIL,java.lang.String,Public,Y,Y,);
Attribute(name,java.lang.String,Public,N,N,);
Attribute(password,java.lang.String,Public,N,N,);
Attribute(email,java.lang.String,Public,N,N,);
Attribute(address,com.google.gson.interceptors.Address,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.String,);
Composition(com.google.gson.interceptors.Address);
Call(ATTRIBUTE,com.google.gson.interceptors.InterceptorTest.UserGroup.User,<init> --> name,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.interceptors.InterceptorTest.UserGroup.User,<init> --> password,java.lang.String,READ);
EndClass 235
StartClass 236
Class(com.google.gson.interceptors.Address,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 236
StartClass 237
Class(com.google.gson.interceptors.InterceptorTest.UserGroup.User.UserValidator,N,N,Public);
Method(postDeserialize,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(postDeserialize,com.google.gson.interceptors.User,);
Realization(com.google.gson.interceptors.JsonPostDeserializer);
EndClass 237
StartClass 238
Class(com.google.gson.interceptors.JsonPostDeserializer,Y,Y,Public);
EndClass 238
StartClass 239
Class(com.google.gson.interceptors.InterceptorTest.UserGroup.User.UserValidator.Address,N,N,Private);
Attribute(DEFAULT_FIRST_LINE,java.lang.String,Public,Y,Y,);
Attribute(firstLine,java.lang.String,Public,N,N,);
Attribute(secondLine,java.lang.String,Public,N,N,);
Attribute(city,java.lang.String,Public,N,N,);
Attribute(state,java.lang.String,Public,N,N,);
Attribute(zip,java.lang.String,Public,N,N,);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
EndClass 239
StartClass 240
Class(com.google.gson.interceptors.InterceptorTest.UserGroup.User.UserValidator.Address.AddressValidator,N,N,Public);
Method(postDeserialize,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(postDeserialize,com.google.gson.interceptors.Address,);
Realization(com.google.gson.interceptors.JsonPostDeserializer);
EndClass 240
StartClass 241
Class(com.google.gson.interceptors.JsonPostDeserializer,Y,Y,Public);
EndClass 241
StartClass 242
Class(com.google.gson.typeadapters.PostConstructAdapterFactoryTest.Sandwich,N,N,Protected);
Attribute(bread,java.lang.String,Public,N,N,);
Attribute(cheese,java.lang.String,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(validate,void,Private,N,N);
Method(equals,boolean,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.String,);
Parameter(equals,java.lang.Object,);
Call(ATTRIBUTE,com.google.gson.typeadapters.PostConstructAdapterFactoryTest.Sandwich,<init> --> bread,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.typeadapters.PostConstructAdapterFactoryTest.Sandwich,<init> --> cheese,java.lang.String,READ);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactoryTest.Sandwich,validate --> equals,java.lang.String,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactoryTest.Sandwich,equals --> equals,null,);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactoryTest.Sandwich,equals --> equals,null,);
EndClass 242
StartClass 243
Class(com.google.gson.typeadapters.PostConstructAdapterFactoryTest.Sandwich.MultipleSandwiches,N,N,Protected);
Attribute(sandwiches,java.util.List,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(equals,boolean,Public,N,N);
Parameter(<init>,java.util.List,);
Parameter(equals,java.lang.Object,);
Call(ATTRIBUTE,com.google.gson.typeadapters.PostConstructAdapterFactoryTest.Sandwich.MultipleSandwiches,<init> --> sandwiches,java.util.List,READ);
Call(METHOD,com.google.gson.typeadapters.PostConstructAdapterFactoryTest.Sandwich.MultipleSandwiches,equals --> equals,null,);
EndClass 243
StartClass 244
Class(com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.BillingInstrumentWrapper,N,N,Protected);
Attribute(instrument,com.google.gson.typeadapters.BillingInstrument,Public,N,N,);
Method(<init>,void,Public,N,N);
Parameter(<init>,com.google.gson.typeadapters.BillingInstrument,);
Composition(com.google.gson.typeadapters.BillingInstrument);
Call(ATTRIBUTE,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.BillingInstrumentWrapper,<init> --> instrument,com.google.gson.typeadapters.BillingInstrument,READ);
EndClass 244
StartClass 245
Class(com.google.gson.typeadapters.BillingInstrument,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.BillingInstrumentWrapper.BillingInstrument.CreditCard);
SubClass(com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.BillingInstrumentWrapper.BillingInstrument.CreditCard.BankTransfer);
EndClass 245
StartClass 246
Class(com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.BillingInstrumentWrapper.BillingInstrument.CreditCard,N,N,Protected);
Attribute(cvv,int,Public,N,N,);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,int,);
SuperClass(com.google.gson.typeadapters.BillingInstrument);
Generalization(com.google.gson.typeadapters.BillingInstrument);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.BillingInstrumentWrapper.BillingInstrument.CreditCard,<init> --> super,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.BillingInstrumentWrapper.BillingInstrument.CreditCard,);
Call(ATTRIBUTE,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.BillingInstrumentWrapper.BillingInstrument.CreditCard,<init> --> cvv,int,READ);
EndClass 246
StartClass 247
Class(com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.BillingInstrumentWrapper.BillingInstrument.CreditCard.BankTransfer,N,N,Protected);
Attribute(bankAccount,int,Public,N,N,);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,int,);
SuperClass(com.google.gson.typeadapters.BillingInstrument);
Generalization(com.google.gson.typeadapters.BillingInstrument);
Call(METHOD,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.BillingInstrumentWrapper.BillingInstrument.CreditCard.BankTransfer,<init> --> super,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.BillingInstrumentWrapper.BillingInstrument.CreditCard.BankTransfer,);
Call(ATTRIBUTE,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.BillingInstrumentWrapper.BillingInstrument.CreditCard.BankTransfer,<init> --> bankAccount,int,READ);
EndClass 247
StartClass 248
Class(com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.BillingInstrumentWrapper.BillingInstrument,N,N,Protected);
Attribute(ownerName,java.lang.String,Private,N,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.BillingInstrumentWrapper.BillingInstrument,<init> --> ownerName,java.lang.String,READ);
EndClass 248
StartClass 249
Class(com.google.gson.internal.$Gson$Preconditions,N,N,Public);
Method(<init>,void,Private,N,N);
Method(checkNotNull,com.google.gson.internal.T,Public,N,N);
Method(checkArgument,void,Public,Y,N);
Parameter(checkNotNull,com.google.gson.internal.T,);
Parameter(checkArgument,boolean,);
EndClass 249
StartClass 250
Class(com.google.gson.internal.$Gson$Types,N,N,Public);
Attribute(EMPTY_TYPE_ARRAY,java.lang.reflect.Type[],Public,Y,Y,);
Method(<init>,void,Private,N,N);
Method(newParameterizedTypeWithOwner,java.lang.reflect.ParameterizedType,Public,Y,N);
Method(arrayOf,java.lang.reflect.GenericArrayType,Public,Y,N);
Method(subtypeOf,java.util.WildcardType,Public,Y,N);
Method(supertypeOf,java.util.WildcardType,Public,Y,N);
Method(canonicalize,java.lang.reflect.Type,Public,Y,N);
Method(getRawType,java.util.Class,Public,Y,N);
Method(equal,boolean,Public,Y,N);
Method(equals,boolean,Public,Y,N);
Method(hashCodeOrZero,int,Public,Y,N);
Method(typeToString,java.util.String,Public,Y,N);
Method(getGenericSupertype,java.lang.reflect.Type,Public,Y,N);
Method(getSupertype,java.lang.reflect.Type,Public,Y,N);
Method(getArrayComponentType,java.lang.reflect.Type,Public,Y,N);
Method(getCollectionElementType,java.lang.reflect.Type,Public,Y,N);
Method(getMapKeyAndValueTypes,java.lang.reflect.Type[],Public,Y,N);
Method(resolve,java.lang.reflect.Type,Public,Y,N);
Method(resolve$2,java.lang.reflect.Type,Private,Y,N);
Method(resolveTypeVariable,java.lang.reflect.Type,Public,Y,N);
Method(indexOf,int,Private,Y,N);
Method(declaringClassOf,java.util.Class,Private,Y,N);
Method(checkNotPrimitive,void,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(newParameterizedTypeWithOwner,java.lang.reflect.Type,);
Parameter(newParameterizedTypeWithOwner,java.lang.reflect.Type,);
Parameter(arrayOf,java.lang.reflect.Type,);
Parameter(subtypeOf,java.lang.reflect.Type,);
Parameter(supertypeOf,java.lang.reflect.Type,);
Parameter(canonicalize,java.lang.reflect.Type,);
Parameter(getRawType,java.lang.reflect.Type,);
Parameter(equal,java.util.Object,);
Parameter(equal,java.util.Object,);
Parameter(equals,java.lang.reflect.Type,);
Parameter(equals,java.lang.reflect.Type,);
Parameter(hashCodeOrZero,java.util.Object,);
Parameter(typeToString,java.lang.reflect.Type,);
Parameter(getGenericSupertype,java.lang.reflect.Type,);
Parameter(getGenericSupertype,java.util.Class,);
Parameter(getGenericSupertype,java.util.Class,);
Parameter(getSupertype,java.lang.reflect.Type,);
Parameter(getSupertype,java.util.Class,);
Parameter(getSupertype,java.util.Class,);
Parameter(getArrayComponentType,java.lang.reflect.Type,);
Parameter(getCollectionElementType,java.lang.reflect.Type,);
Parameter(getCollectionElementType,java.util.Class,);
Parameter(getMapKeyAndValueTypes,java.lang.reflect.Type,);
Parameter(getMapKeyAndValueTypes,java.util.Class,);
Parameter(resolve,java.lang.reflect.Type,);
Parameter(resolve,java.util.Class,);
Parameter(resolve,java.lang.reflect.Type,);
Parameter(resolve$2,java.lang.reflect.Type,);
Parameter(resolve$2,java.util.Class,);
Parameter(resolve$2,java.lang.reflect.Type,);
Parameter(resolve$2,java.util.Collection,);
Parameter(resolveTypeVariable,java.lang.reflect.Type,);
Parameter(resolveTypeVariable,java.util.Class,);
Parameter(resolveTypeVariable,java.util.TypeVariable,);
Parameter(indexOf,java.util.Object[],);
Parameter(indexOf,java.util.Object,);
Parameter(declaringClassOf,java.util.TypeVariable,);
Parameter(checkNotPrimitive,java.lang.reflect.Type,);
Call(METHOD,com.google.gson.internal.$Gson$Types,subtypeOf --> getUpperBounds,java.util.WildcardType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,supertypeOf --> getLowerBounds,java.util.WildcardType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,canonicalize --> isArray,java.util.Class,);
Call(METHOD,com.google.gson.internal.$Gson$Types,canonicalize --> canonicalize,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,canonicalize --> getComponentType,java.util.Class,);
Call(METHOD,com.google.gson.internal.$Gson$Types,canonicalize --> getOwnerType,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,canonicalize --> getRawType,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,canonicalize --> getActualTypeArguments,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,canonicalize --> getGenericComponentType,java.lang.reflect.GenericArrayType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,canonicalize --> getUpperBounds,java.util.WildcardType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,canonicalize --> getLowerBounds,java.util.WildcardType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getRawType --> getRawType,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getRawType --> checkArgument,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getRawType --> getGenericComponentType,java.lang.reflect.GenericArrayType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getRawType --> newInstance,null,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getRawType --> getRawType,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getRawType --> getClass,null,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getRawType --> getRawType,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getRawType --> getUpperBounds,java.util.WildcardType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getRawType --> getClass,java.lang.reflect.Type,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getRawType --> getName,java.lang.reflect.Type,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equal --> equals,java.util.Object,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equals --> equals,java.lang.reflect.Type,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equals --> equal,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equals --> getOwnerType,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equals --> getOwnerType,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equals --> getRawType,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equals --> equals,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equals --> getRawType,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equals --> equals,null,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equals --> getActualTypeArguments,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equals --> getActualTypeArguments,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equals --> equals,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equals --> getGenericComponentType,java.lang.reflect.GenericArrayType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equals --> getGenericComponentType,java.lang.reflect.GenericArrayType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equals --> equals,null,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equals --> getUpperBounds,java.util.WildcardType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equals --> getUpperBounds,java.util.WildcardType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equals --> equals,null,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equals --> getLowerBounds,java.util.WildcardType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equals --> getLowerBounds,java.util.WildcardType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equals --> getGenericDeclaration,java.util.TypeVariable,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equals --> getGenericDeclaration,java.util.TypeVariable,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equals --> getName,java.util.TypeVariable,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equals --> equals,java.util.TypeVariable,);
Call(METHOD,com.google.gson.internal.$Gson$Types,equals --> getName,java.util.TypeVariable,);
Call(METHOD,com.google.gson.internal.$Gson$Types,hashCodeOrZero --> hashCode,java.util.Object,);
Call(METHOD,com.google.gson.internal.$Gson$Types,typeToString --> getName,java.util.Class,);
Call(METHOD,com.google.gson.internal.$Gson$Types,typeToString --> toString,java.lang.reflect.Type,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getGenericSupertype --> isInterface,java.util.Class,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getGenericSupertype --> getInterfaces,java.util.Class,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getGenericSupertype --> getGenericInterfaces,java.util.Class,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getGenericSupertype --> isAssignableFrom,java.util.Class,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getGenericSupertype --> getGenericSupertype,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getGenericSupertype --> getGenericInterfaces,java.util.Class,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getGenericSupertype --> isInterface,java.util.Class,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getGenericSupertype --> getSuperclass,java.util.Class,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getGenericSupertype --> getGenericSuperclass,java.util.Class,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getGenericSupertype --> isAssignableFrom,java.util.Class,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getGenericSupertype --> getGenericSupertype,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getGenericSupertype --> getGenericSuperclass,java.util.Class,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getSupertype --> getUpperBounds,java.util.WildcardType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getSupertype --> checkArgument,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getSupertype --> isAssignableFrom,java.util.Class,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getSupertype --> resolve,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getSupertype --> getGenericSupertype,null,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getArrayComponentType --> getGenericComponentType,java.lang.reflect.GenericArrayType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getArrayComponentType --> getComponentType,java.util.Class,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getCollectionElementType --> getSupertype,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getCollectionElementType --> getUpperBounds,java.util.WildcardType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getCollectionElementType --> getActualTypeArguments,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getMapKeyAndValueTypes --> getSupertype,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,getMapKeyAndValueTypes --> getActualTypeArguments,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolve --> resolve,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolve$2 --> contains,java.util.Collection,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolve$2 --> add,java.util.Collection,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolve$2 --> resolveTypeVariable,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolve$2 --> isArray,java.util.Class,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolve$2 --> getComponentType,java.util.Class,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolve$2 --> resolve,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolve$2 --> arrayOf,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolve$2 --> getGenericComponentType,java.lang.reflect.GenericArrayType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolve$2 --> resolve,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolve$2 --> arrayOf,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolve$2 --> getOwnerType,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolve$2 --> resolve,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolve$2 --> getActualTypeArguments,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolve$2 --> resolve,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolve$2 --> clone,java.lang.reflect.Type[],);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolve$2 --> newParameterizedTypeWithOwner,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolve$2 --> getRawType,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolve$2 --> getLowerBounds,java.util.WildcardType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolve$2 --> getUpperBounds,java.util.WildcardType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolve$2 --> resolve,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolve$2 --> supertypeOf,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolve$2 --> resolve,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolve$2 --> subtypeOf,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolveTypeVariable --> declaringClassOf,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolveTypeVariable --> getGenericSupertype,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolveTypeVariable --> indexOf,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolveTypeVariable --> getTypeParameters,java.util.Class,);
Call(METHOD,com.google.gson.internal.$Gson$Types,resolveTypeVariable --> getActualTypeArguments,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.internal.$Gson$Types,indexOf --> equals,java.util.Object,);
Call(METHOD,com.google.gson.internal.$Gson$Types,declaringClassOf --> getGenericDeclaration,java.util.TypeVariable,);
Call(METHOD,com.google.gson.internal.$Gson$Types,checkNotPrimitive --> checkArgument,com.google.gson.internal.$Gson$Types,);
Call(METHOD,com.google.gson.internal.$Gson$Types,checkNotPrimitive --> isPrimitive,java.util.Class,);
EndClass 250
StartClass 251
Class(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,N,N,Private);
Attribute(ownerType,java.lang.reflect.Type,Private,N,Y,);
Attribute(rawType,java.lang.reflect.Type,Private,N,Y,);
Attribute(typeArguments,java.lang.reflect.Type[],Private,N,Y,);
Attribute(serialVersionUID,long,Private,Y,Y,);
Method(<init>,void,Public,N,N);
Method(getActualTypeArguments,java.lang.reflect.Type[],Public,N,N);
Method(getRawType,java.lang.reflect.Type,Public,N,N);
Method(getOwnerType,java.lang.reflect.Type,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(toString,java.util.String,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,java.lang.reflect.Type,);
Parameter(<init>,java.lang.reflect.Type,);
Parameter(equals,java.util.Object,);
Realization(java.lang.reflect.ParameterizedType);
Realization(java.util.Serializable);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,<init> --> isStatic,null,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,<init> --> getModifiers,java.util.Class,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,<init> --> getEnclosingClass,java.util.Class,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,<init> --> checkArgument,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,<init> --> canonicalize,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,<init> --> canonicalize,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,<init> --> clone,java.lang.reflect.Type[],);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,<init> --> checkNotNull,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,<init> --> checkNotPrimitive,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,<init> --> canonicalize,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,);
Call(ATTRIBUTE,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,<init> --> ownerType,java.lang.reflect.Type,READ);
Call(ATTRIBUTE,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,<init> --> typeArguments,java.lang.reflect.Type[],READ);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,getActualTypeArguments --> clone,java.lang.reflect.Type[],);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,equals --> equals,null,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,hashCode --> hashCode,null,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,hashCode --> hashCode,java.lang.reflect.Type,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,hashCode --> hashCodeOrZero,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,toString --> typeToString,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,toString --> append,java.util.StringBuilder,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,toString --> typeToString,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,toString --> append,java.util.StringBuilder,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,toString --> append,java.util.StringBuilder,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,toString --> typeToString,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,toString --> append,java.util.StringBuilder,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,toString --> append,java.util.StringBuilder,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,toString --> typeToString,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,toString --> append,java.util.StringBuilder,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl,toString --> toString,java.util.StringBuilder,);
EndClass 251
StartClass 252
Class(java.lang.reflect.ParameterizedType,Y,Y,Public);
EndClass 252
StartClass 253
Class(java.util.Serializable,Y,Y,Public);
EndClass 253
StartClass 254
Class(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl,N,N,Private);
Attribute(componentType,java.lang.reflect.Type,Private,N,Y,);
Attribute(serialVersionUID,long,Private,Y,Y,);
Method(<init>,void,Public,N,N);
Method(getGenericComponentType,java.lang.reflect.Type,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(toString,java.util.String,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,java.lang.reflect.Type,);
Parameter(equals,java.util.Object,);
Realization(java.lang.reflect.GenericArrayType);
Realization(java.util.Serializable);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl,<init> --> canonicalize,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl,equals --> equals,null,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl,hashCode --> hashCode,java.lang.reflect.Type,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl,toString --> typeToString,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl,);
EndClass 254
StartClass 255
Class(java.lang.reflect.GenericArrayType,Y,Y,Public);
EndClass 255
StartClass 256
Class(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,N,N,Private);
Attribute(upperBound,java.lang.reflect.Type,Private,N,Y,);
Attribute(lowerBound,java.lang.reflect.Type,Private,N,Y,);
Attribute(serialVersionUID,long,Private,Y,Y,);
Method(<init>,void,Public,N,N);
Method(getUpperBounds,java.lang.reflect.Type[],Public,N,N);
Method(getLowerBounds,java.lang.reflect.Type[],Public,N,N);
Method(equals,boolean,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(toString,java.util.String,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,java.lang.reflect.Type[],);
Parameter(<init>,java.lang.reflect.Type[],);
Parameter(equals,java.util.Object,);
Realization(java.util.WildcardType);
Realization(java.util.Serializable);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,<init> --> checkArgument,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,<init> --> checkArgument,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,<init> --> checkNotNull,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,<init> --> checkNotPrimitive,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,<init> --> checkArgument,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,<init> --> canonicalize,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,<init> --> checkNotNull,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,<init> --> checkNotPrimitive,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,<init> --> canonicalize,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,equals --> equals,null,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,hashCode --> hashCode,java.lang.reflect.Type,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,hashCode --> hashCode,java.lang.reflect.Type,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,toString --> typeToString,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,);
Call(METHOD,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,toString --> typeToString,com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.GenericArrayTypeImpl.WildcardTypeImpl,);
EndClass 256
StartClass 257
Class(java.util.WildcardType,Y,Y,Public);
EndClass 257
StartClass 258
Class(com.google.gson.internal.bind.ArrayTypeAdapter,N,N,Public);
Attribute(FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(componentType,java.lang.Class,Private,N,Y,);
Attribute(componentTypeAdapter,com.google.gson.TypeAdapter,Private,N,Y,);
Method(create,com.google.gson.TypeAdapter,Public,N,N);
Method(<init>,void,Public,N,N);
Method(read,java.lang.Object,Public,N,N);
Method(write,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
Parameter(<init>,com.google.gson.Gson,);
Parameter(<init>,com.google.gson.TypeAdapter,);
Parameter(<init>,java.lang.Class,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,java.lang.Object,);
SuperClass(com.google.gson.internal.bind.TypeAdapter);
Generalization(com.google.gson.internal.bind.TypeAdapter);
Composition(com.google.gson.TypeAdapterFactory);
Call(METHOD,com.google.gson.internal.bind.ArrayTypeAdapter,create --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.ArrayTypeAdapter,create --> isArray,java.lang.Class,);
Call(METHOD,com.google.gson.internal.bind.ArrayTypeAdapter,create --> getArrayComponentType,null,);
Call(METHOD,com.google.gson.internal.bind.ArrayTypeAdapter,create --> getAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.internal.bind.ArrayTypeAdapter,create --> get,null,);
Call(METHOD,com.google.gson.internal.bind.ArrayTypeAdapter,create --> getRawType,null,);
Call(ATTRIBUTE,com.google.gson.internal.bind.ArrayTypeAdapter,<init> --> componentType,java.lang.Class,READ);
Call(METHOD,com.google.gson.internal.bind.ArrayTypeAdapter,read --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.ArrayTypeAdapter,read --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.ArrayTypeAdapter,read --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.ArrayTypeAdapter,read --> hasNext,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.ArrayTypeAdapter,read --> read,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.ArrayTypeAdapter,read --> add,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.ArrayTypeAdapter,read --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.ArrayTypeAdapter,read --> size,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.ArrayTypeAdapter,read --> newInstance,null,);
Call(METHOD,com.google.gson.internal.bind.ArrayTypeAdapter,read --> set,null,);
Call(METHOD,com.google.gson.internal.bind.ArrayTypeAdapter,read --> get,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.ArrayTypeAdapter,write --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.ArrayTypeAdapter,write --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.ArrayTypeAdapter,write --> getLength,null,);
Call(METHOD,com.google.gson.internal.bind.ArrayTypeAdapter,write --> get,null,);
Call(METHOD,com.google.gson.internal.bind.ArrayTypeAdapter,write --> write,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.ArrayTypeAdapter,write --> endArray,com.google.gson.stream.JsonWriter,);
EndClass 258
StartClass 259
Class(com.google.gson.internal.bind.TypeAdapter,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.internal.bind.ArrayTypeAdapter);
SubClass(com.google.gson.internal.bind.ObjectTypeAdapter);
EndClass 259
StartClass 260
Class(com.google.gson.internal.bind.ObjectTypeAdapter,N,N,Public);
Attribute(FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(gson,com.google.gson.Gson,Private,N,Y,);
Method(create,com.google.gson.TypeAdapter,Public,N,N);
Method(<init>,void,Public,N,N);
Method(read,java.lang.Object,Public,N,N);
Method(write,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
Parameter(<init>,com.google.gson.Gson,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,java.lang.Object,);
SuperClass(com.google.gson.internal.bind.TypeAdapter);
Generalization(com.google.gson.internal.bind.TypeAdapter);
Composition(com.google.gson.TypeAdapterFactory);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.internal.bind.ObjectTypeAdapter,create --> getRawType,com.google.gson.reflect.TypeToken,);
Call(ATTRIBUTE,com.google.gson.internal.bind.ObjectTypeAdapter,<init> --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.internal.bind.ObjectTypeAdapter,read --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.ObjectTypeAdapter,read --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.ObjectTypeAdapter,read --> hasNext,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.ObjectTypeAdapter,read --> add,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.ObjectTypeAdapter,read --> read,com.google.gson.internal.bind.ObjectTypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.ObjectTypeAdapter,read --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.ObjectTypeAdapter,read --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.ObjectTypeAdapter,read --> hasNext,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.ObjectTypeAdapter,read --> put,java.util.Map,);
Call(METHOD,com.google.gson.internal.bind.ObjectTypeAdapter,read --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.ObjectTypeAdapter,read --> read,com.google.gson.internal.bind.ObjectTypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.ObjectTypeAdapter,read --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.ObjectTypeAdapter,read --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.ObjectTypeAdapter,read --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.ObjectTypeAdapter,read --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.ObjectTypeAdapter,read --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.ObjectTypeAdapter,write --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.ObjectTypeAdapter,write --> getAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.internal.bind.ObjectTypeAdapter,write --> getClass,java.lang.Object,);
Call(METHOD,com.google.gson.internal.bind.ObjectTypeAdapter,write --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.ObjectTypeAdapter,write --> endObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.ObjectTypeAdapter,write --> write,com.google.gson.TypeAdapter,);
EndClass 260
StartClass 261
Class(com.google.gson.internal.bind.CollectionTypeAdapterFactory,N,N,Public);
Attribute(constructorConstructor,com.google.gson.internal.ConstructorConstructor,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(create,com.google.gson.TypeAdapter,Public,N,N);
Parameter(<init>,com.google.gson.internal.ConstructorConstructor,);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
Realization(com.google.gson.TypeAdapterFactory);
Composition(com.google.gson.internal.ConstructorConstructor);
Call(ATTRIBUTE,com.google.gson.internal.bind.CollectionTypeAdapterFactory,<init> --> constructorConstructor,com.google.gson.internal.ConstructorConstructor,READ);
Call(METHOD,com.google.gson.internal.bind.CollectionTypeAdapterFactory,create --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.CollectionTypeAdapterFactory,create --> getRawType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.CollectionTypeAdapterFactory,create --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.internal.bind.CollectionTypeAdapterFactory,create --> getCollectionElementType,null,);
Call(METHOD,com.google.gson.internal.bind.CollectionTypeAdapterFactory,create --> getAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.internal.bind.CollectionTypeAdapterFactory,create --> get,null,);
Call(METHOD,com.google.gson.internal.bind.CollectionTypeAdapterFactory,create --> get,com.google.gson.internal.ConstructorConstructor,);
EndClass 261
StartClass 262
Class(com.google.gson.internal.bind.CollectionTypeAdapterFactory.Adapter,N,N,Private);
Attribute(elementTypeAdapter,com.google.gson.TypeAdapter,Private,N,Y,);
Attribute(constructor,com.google.gson.internal.ObjectConstructor,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(read,java.util.Collection,Public,N,N);
Method(write,void,Public,N,N);
Parameter(<init>,com.google.gson.Gson,);
Parameter(<init>,java.lang.reflect.Type,);
Parameter(<init>,com.google.gson.TypeAdapter,);
Parameter(<init>,com.google.gson.internal.ObjectConstructor,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,java.util.Collection,);
SuperClass(com.google.gson.internal.bind.TypeAdapter);
Generalization(com.google.gson.internal.bind.TypeAdapter);
Call(ATTRIBUTE,com.google.gson.internal.bind.CollectionTypeAdapterFactory.Adapter,<init> --> constructor,com.google.gson.internal.ObjectConstructor,READ);
Call(METHOD,com.google.gson.internal.bind.CollectionTypeAdapterFactory.Adapter,read --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.CollectionTypeAdapterFactory.Adapter,read --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.CollectionTypeAdapterFactory.Adapter,read --> construct,com.google.gson.internal.ObjectConstructor,);
Call(METHOD,com.google.gson.internal.bind.CollectionTypeAdapterFactory.Adapter,read --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.CollectionTypeAdapterFactory.Adapter,read --> hasNext,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.CollectionTypeAdapterFactory.Adapter,read --> read,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.CollectionTypeAdapterFactory.Adapter,read --> add,java.util.Collection,);
Call(METHOD,com.google.gson.internal.bind.CollectionTypeAdapterFactory.Adapter,read --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.CollectionTypeAdapterFactory.Adapter,write --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.CollectionTypeAdapterFactory.Adapter,write --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.CollectionTypeAdapterFactory.Adapter,write --> write,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.CollectionTypeAdapterFactory.Adapter,write --> endArray,com.google.gson.stream.JsonWriter,);
EndClass 262
StartClass 263
Class(com.google.gson.internal.bind.TypeAdapter,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.internal.bind.CollectionTypeAdapterFactory.Adapter);
EndClass 263
StartClass 264
Class(com.google.gson.internal.bind.DateTypeAdapter,N,N,Public);
Attribute(FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(dateFormats,java.util.List,Private,N,Y,);
Method(create,com.google.gson.TypeAdapter,Public,N,N);
Method(<init>,void,Public,N,N);
Method(read,java.util.Date,Public,N,N);
Method(deserializeToDate,java.util.Date,Private,N,N);
Method(write,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(deserializeToDate,java.lang.String,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,java.util.Date,);
SuperClass(com.google.gson.internal.bind.TypeAdapter);
Generalization(com.google.gson.internal.bind.TypeAdapter);
Composition(com.google.gson.TypeAdapterFactory);
Call(METHOD,com.google.gson.internal.bind.DateTypeAdapter,create --> getRawType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.DateTypeAdapter,<init> --> add,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.DateTypeAdapter,<init> --> getDateTimeInstance,null,);
Call(METHOD,com.google.gson.internal.bind.DateTypeAdapter,<init> --> getDefault,null,);
Call(METHOD,com.google.gson.internal.bind.DateTypeAdapter,<init> --> equals,null,);
Call(METHOD,com.google.gson.internal.bind.DateTypeAdapter,<init> --> add,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.DateTypeAdapter,<init> --> getDateTimeInstance,null,);
Call(METHOD,com.google.gson.internal.bind.DateTypeAdapter,<init> --> isJava9OrLater,null,);
Call(METHOD,com.google.gson.internal.bind.DateTypeAdapter,<init> --> add,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.DateTypeAdapter,<init> --> getUSDateTimeFormat,null,);
Call(METHOD,com.google.gson.internal.bind.DateTypeAdapter,read --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.DateTypeAdapter,read --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.DateTypeAdapter,read --> deserializeToDate,com.google.gson.internal.bind.DateTypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.DateTypeAdapter,read --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.DateTypeAdapter,deserializeToDate --> parse,null,);
Call(METHOD,com.google.gson.internal.bind.DateTypeAdapter,deserializeToDate --> parse,null,);
Call(METHOD,com.google.gson.internal.bind.DateTypeAdapter,write --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.DateTypeAdapter,write --> get,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.DateTypeAdapter,write --> format,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.DateTypeAdapter,write --> value,com.google.gson.stream.JsonWriter,);
EndClass 264
StartClass 265
Class(com.google.gson.internal.bind.TypeAdapter,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.internal.bind.DateTypeAdapter);
EndClass 265
StartClass 266
Class(com.google.gson.internal.bind.MapTypeAdapterFactory,N,N,Public);
Attribute(constructorConstructor,com.google.gson.internal.ConstructorConstructor,Private,N,Y,);
Attribute(complexMapKeySerialization,boolean,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(create,com.google.gson.TypeAdapter,Public,N,N);
Method(getKeyAdapter,com.google.gson.TypeAdapter,Private,N,N);
Parameter(<init>,com.google.gson.internal.ConstructorConstructor,);
Parameter(<init>,boolean,);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
Parameter(getKeyAdapter,com.google.gson.Gson,);
Parameter(getKeyAdapter,java.lang.reflect.Type,);
Realization(com.google.gson.TypeAdapterFactory);
Composition(com.google.gson.internal.ConstructorConstructor);
Call(ATTRIBUTE,com.google.gson.internal.bind.MapTypeAdapterFactory,<init> --> constructorConstructor,com.google.gson.internal.ConstructorConstructor,READ);
Call(ATTRIBUTE,com.google.gson.internal.bind.MapTypeAdapterFactory,<init> --> complexMapKeySerialization,boolean,READ);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory,create --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory,create --> getRawType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory,create --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory,create --> getRawType,null,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory,create --> getMapKeyAndValueTypes,null,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory,create --> getKeyAdapter,com.google.gson.internal.bind.MapTypeAdapterFactory,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory,create --> getAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory,create --> get,null,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory,create --> get,com.google.gson.internal.ConstructorConstructor,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory,getKeyAdapter --> getAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory,getKeyAdapter --> get,null,);
EndClass 266
StartClass 267
Class(com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,N,N,Private);
Attribute(keyTypeAdapter,com.google.gson.TypeAdapter,Private,N,Y,);
Attribute(valueTypeAdapter,com.google.gson.TypeAdapter,Private,N,Y,);
Attribute(constructor,com.google.gson.internal.ObjectConstructor,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(read,java.util.Map,Public,N,N);
Method(write,void,Public,N,N);
Method(keyToString,java.lang.String,Private,N,N);
Parameter(<init>,com.google.gson.Gson,);
Parameter(<init>,java.lang.reflect.Type,);
Parameter(<init>,com.google.gson.TypeAdapter,);
Parameter(<init>,java.lang.reflect.Type,);
Parameter(<init>,com.google.gson.TypeAdapter,);
Parameter(<init>,com.google.gson.internal.ObjectConstructor,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,java.util.Map,);
Parameter(keyToString,com.google.gson.JsonElement,);
SuperClass(com.google.gson.internal.bind.TypeAdapter);
Generalization(com.google.gson.internal.bind.TypeAdapter);
Call(ATTRIBUTE,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,<init> --> constructor,com.google.gson.internal.ObjectConstructor,READ);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,read --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,read --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,read --> construct,com.google.gson.internal.ObjectConstructor,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,read --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,read --> hasNext,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,read --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,read --> read,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,read --> read,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,read --> put,java.util.Map,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,read --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,read --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,read --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,read --> hasNext,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,read --> promoteNameToValue,null,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,read --> read,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,read --> read,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,read --> put,java.util.Map,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,read --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> entrySet,java.util.Map,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> valueOf,null,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> getKey,null,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> write,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> getValue,null,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> endObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> size,java.util.Map,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> size,java.util.Map,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> entrySet,java.util.Map,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> toJsonTree,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> getKey,null,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> add,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> add,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> getValue,null,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> isJsonArray,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> isJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> size,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> write,null,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> get,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> write,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> get,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> size,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> get,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> keyToString,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> write,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> get,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,write --> endObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,keyToString --> isJsonPrimitive,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,keyToString --> getAsJsonPrimitive,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,keyToString --> isNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,keyToString --> valueOf,null,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,keyToString --> getAsNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,keyToString --> isBoolean,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,keyToString --> toString,null,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,keyToString --> getAsBoolean,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,keyToString --> isString,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,keyToString --> getAsString,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter,keyToString --> isJsonNull,com.google.gson.JsonElement,);
EndClass 267
StartClass 268
Class(com.google.gson.internal.bind.TypeAdapter,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter);
EndClass 268
StartClass 269
Class(com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,N,N,Public);
Attribute(constructorConstructor,com.google.gson.internal.ConstructorConstructor,Private,N,Y,);
Attribute(fieldNamingPolicy,com.google.gson.FieldNamingStrategy,Private,N,Y,);
Attribute(excluder,com.google.gson.internal.Excluder,Private,N,Y,);
Attribute(jsonAdapterFactory,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory,Private,N,Y,);
Attribute(accessor,com.google.gson.internal.reflect.ReflectionAccessor,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(excludeField,boolean,Public,N,N);
Method(excludeField$2,boolean,Public,Y,N);
Method(getFieldNames,java.util.List,Private,N,N);
Method(create,com.google.gson.TypeAdapter,Public,N,N);
Method(createBoundField,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField,Private,N,N);
Method(write,void,Public,N,N);
Method(read,void,Public,N,N);
Method(writeField,boolean,Public,N,N);
Method(getBoundFields,java.util.Map,Private,N,N);
Parameter(<init>,com.google.gson.internal.ConstructorConstructor,);
Parameter(<init>,com.google.gson.FieldNamingStrategy,);
Parameter(<init>,com.google.gson.internal.Excluder,);
Parameter(<init>,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory,);
Parameter(excludeField,java.lang.reflect.Field,);
Parameter(excludeField,boolean,);
Parameter(excludeField$2,java.lang.reflect.Field,);
Parameter(excludeField$2,boolean,);
Parameter(excludeField$2,com.google.gson.internal.Excluder,);
Parameter(getFieldNames,java.lang.reflect.Field,);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
Parameter(createBoundField,com.google.gson.Gson,);
Parameter(createBoundField,java.lang.reflect.Field,);
Parameter(createBoundField,java.lang.String,);
Parameter(createBoundField,com.google.gson.reflect.TypeToken,);
Parameter(createBoundField,boolean,);
Parameter(createBoundField,boolean,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,java.lang.Object,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(read,java.lang.Object,);
Parameter(writeField,java.lang.Object,);
Parameter(getBoundFields,com.google.gson.Gson,);
Parameter(getBoundFields,com.google.gson.reflect.TypeToken,);
Parameter(getBoundFields,java.lang.Class,);
Realization(com.google.gson.TypeAdapterFactory);
Composition(com.google.gson.internal.ConstructorConstructor);
Composition(com.google.gson.FieldNamingStrategy);
Composition(com.google.gson.internal.Excluder);
Composition(com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory);
Composition(com.google.gson.internal.reflect.ReflectionAccessor);
Call(ATTRIBUTE,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,<init> --> constructorConstructor,com.google.gson.internal.ConstructorConstructor,READ);
Call(ATTRIBUTE,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,<init> --> fieldNamingPolicy,com.google.gson.FieldNamingStrategy,READ);
Call(ATTRIBUTE,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,<init> --> excluder,com.google.gson.internal.Excluder,READ);
Call(ATTRIBUTE,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,<init> --> jsonAdapterFactory,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory,READ);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,excludeField --> excludeField,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,excludeField$2 --> excludeClass,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,excludeField$2 --> getType,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,excludeField$2 --> excludeField,com.google.gson.internal.Excluder,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getFieldNames --> getAnnotation,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getFieldNames --> translateName,com.google.gson.FieldNamingStrategy,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getFieldNames --> singletonList,null,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getFieldNames --> value,com.google.gson.annotations.SerializedName,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getFieldNames --> alternate,com.google.gson.annotations.SerializedName,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getFieldNames --> singletonList,null,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getFieldNames --> add,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getFieldNames --> add,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,create --> getRawType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,create --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,create --> get,com.google.gson.internal.ConstructorConstructor,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,create --> getBoundFields,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,createBoundField --> isPrimitive,null,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,createBoundField --> getRawType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,createBoundField --> getAnnotation,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,createBoundField --> getTypeAdapter,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,createBoundField --> getAdapter,com.google.gson.Gson,);
Call(ATTRIBUTE,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,createBoundField --> jsonAdapterFactory,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory,READ);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,write --> get,null,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,write --> getType,null,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,write --> write,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,read --> read,null,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,read --> set,null,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,writeField --> get,null,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getBoundFields --> isInterface,java.lang.Class,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getBoundFields --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getBoundFields --> getDeclaredFields,java.lang.Class,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getBoundFields --> excludeField,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getBoundFields --> excludeField,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getBoundFields --> makeAccessible,com.google.gson.internal.reflect.ReflectionAccessor,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getBoundFields --> resolve,null,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getBoundFields --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getBoundFields --> getGenericType,null,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getBoundFields --> getFieldNames,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getBoundFields --> size,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getBoundFields --> get,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getBoundFields --> createBoundField,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getBoundFields --> get,null,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getBoundFields --> put,java.util.Map,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getBoundFields --> get,null,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getBoundFields --> resolve,null,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getBoundFields --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getBoundFields --> getGenericSuperclass,java.lang.Class,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,getBoundFields --> getRawType,com.google.gson.reflect.TypeToken,);
EndClass 269
StartClass 270
Class(com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField,N,Y,Protected);
Attribute(name,java.lang.String,Public,N,Y,);
Attribute(serialized,boolean,Public,N,Y,);
Attribute(deserialized,boolean,Public,N,Y,);
Method(<init>,void,Protected,N,N);
Method(writeField,boolean,Public,N,Y);
Method(write,void,Public,N,Y);
Method(read,void,Public,N,Y);
Parameter(<init>,java.lang.String,);
Parameter(<init>,boolean,);
Parameter(<init>,boolean,);
Parameter(writeField,java.lang.Object,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,java.lang.Object,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(read,java.lang.Object,);
Call(ATTRIBUTE,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField,<init> --> name,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField,<init> --> serialized,boolean,READ);
Call(ATTRIBUTE,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField,<init> --> deserialized,boolean,READ);
EndClass 270
StartClass 271
Class(com.google.gson.TypeAdapter,N,Y,Public);
Method(write,void,Public,N,Y);
Method(toJson,void,Public,N,N);
Method(nullSafe,com.google.gson.TypeAdapter,Public,N,N);
Method(write$2,void,Public,N,N);
Method(read,com.google.gson.T,Public,N,N);
Method(toJson$2,java.lang.String,Public,N,N);
Method(toJsonTree,com.google.gson.JsonElement,Public,N,N);
Method(read$2,com.google.gson.T,Public,N,Y);
Method(fromJson,com.google.gson.T,Public,N,N);
Method(fromJson$2,com.google.gson.T,Public,N,N);
Method(fromJsonTree,com.google.gson.T,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.T,);
Parameter(toJson,java.io.Writer,);
Parameter(toJson,com.google.gson.T,);
Parameter(write$2,com.google.gson.stream.JsonWriter,);
Parameter(write$2,com.google.gson.T,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(toJson$2,com.google.gson.T,);
Parameter(toJsonTree,com.google.gson.T,);
Parameter(read$2,com.google.gson.stream.JsonReader,);
Parameter(fromJson,java.io.Reader,);
Parameter(fromJson$2,java.lang.String,);
Parameter(fromJsonTree,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.TypeAdapter,toJson --> write,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.TypeAdapter,write$2 --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.TypeAdapter,write$2 --> write,null,);
Call(METHOD,com.google.gson.TypeAdapter,read --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.TypeAdapter,read --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.TypeAdapter,read --> read,null,);
Call(METHOD,com.google.gson.TypeAdapter,toJson$2 --> toJson,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.TypeAdapter,toJson$2 --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.TypeAdapter,toJsonTree --> write,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.TypeAdapter,toJsonTree --> get,com.google.gson.internal.bind.JsonTreeWriter,);
Call(METHOD,com.google.gson.TypeAdapter,fromJson --> read,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.TypeAdapter,fromJson$2 --> fromJson,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.TypeAdapter,fromJsonTree --> read,com.google.gson.TypeAdapter,);
EndClass 271
StartClass 272
Class(com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField.Adapter,N,N,Public);
Attribute(constructor,com.google.gson.internal.ObjectConstructor,Private,N,Y,);
Attribute(boundFields,java.util.Map,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(read,com.google.gson.internal.bind.T,Public,N,N);
Method(write,void,Public,N,N);
Parameter(<init>,com.google.gson.internal.ObjectConstructor,);
Parameter(<init>,java.util.Map,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.internal.bind.T,);
SuperClass(com.google.gson.internal.bind.TypeAdapter);
Generalization(com.google.gson.internal.bind.TypeAdapter);
Call(ATTRIBUTE,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField.Adapter,<init> --> constructor,com.google.gson.internal.ObjectConstructor,READ);
Call(ATTRIBUTE,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField.Adapter,<init> --> boundFields,java.util.Map,READ);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField.Adapter,read --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField.Adapter,read --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField.Adapter,read --> construct,com.google.gson.internal.ObjectConstructor,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField.Adapter,read --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField.Adapter,read --> hasNext,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField.Adapter,read --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField.Adapter,read --> get,java.util.Map,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField.Adapter,read --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField.Adapter,read --> read,com.google.gson.internal.bind.BoundField,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField.Adapter,read --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField.Adapter,write --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField.Adapter,write --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField.Adapter,write --> values,java.util.Map,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField.Adapter,write --> writeField,null,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField.Adapter,write --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField.Adapter,write --> write,null,);
Call(METHOD,com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField.Adapter,write --> endObject,com.google.gson.stream.JsonWriter,);
EndClass 272
StartClass 273
Class(com.google.gson.internal.bind.TypeAdapter,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField.Adapter);
SubClass(com.google.gson.internal.bind.TreeTypeAdapter);
SubClass(com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper);
SubClass(com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter);
EndClass 273
StartClass 274
Class(com.google.gson.internal.bind.TreeTypeAdapter,N,N,Public);
Attribute(serializer,com.google.gson.JsonSerializer,Private,N,Y,);
Attribute(deserializer,com.google.gson.JsonDeserializer,Private,N,Y,);
Attribute(gson,com.google.gson.Gson,Public,N,Y,);
Attribute(typeToken,com.google.gson.reflect.TypeToken,Private,N,Y,);
Attribute(skipPast,com.google.gson.TypeAdapterFactory,Private,N,Y,);
Attribute(context,com.google.gson.internal.bind.GsonContextImpl,Private,N,Y,);
Attribute(delegate,com.google.gson.TypeAdapter,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(read,com.google.gson.internal.bind.T,Public,N,N);
Method(write,void,Public,N,N);
Method(delegate,com.google.gson.TypeAdapter,Private,N,N);
Method(newFactory,com.google.gson.TypeAdapterFactory,Public,Y,N);
Method(newFactoryWithMatchRawType,com.google.gson.TypeAdapterFactory,Public,Y,N);
Method(newTypeHierarchyFactory,com.google.gson.TypeAdapterFactory,Public,Y,N);
Parameter(<init>,com.google.gson.JsonSerializer,);
Parameter(<init>,com.google.gson.JsonDeserializer,);
Parameter(<init>,com.google.gson.Gson,);
Parameter(<init>,com.google.gson.reflect.TypeToken,);
Parameter(<init>,com.google.gson.TypeAdapterFactory,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.internal.bind.T,);
Parameter(newFactory,com.google.gson.reflect.TypeToken,);
Parameter(newFactory,java.lang.Object,);
Parameter(newFactoryWithMatchRawType,com.google.gson.reflect.TypeToken,);
Parameter(newFactoryWithMatchRawType,java.lang.Object,);
Parameter(newTypeHierarchyFactory,java.lang.Class,);
Parameter(newTypeHierarchyFactory,java.lang.Object,);
SuperClass(com.google.gson.internal.bind.TypeAdapter);
Generalization(com.google.gson.internal.bind.TypeAdapter);
Composition(com.google.gson.Gson);
Composition(com.google.gson.TypeAdapterFactory);
Composition(com.google.gson.internal.bind.GsonContextImpl);
Composition(com.google.gson.TypeAdapter<T>);
Call(ATTRIBUTE,com.google.gson.internal.bind.TreeTypeAdapter,<init> --> serializer,com.google.gson.JsonSerializer,READ);
Call(ATTRIBUTE,com.google.gson.internal.bind.TreeTypeAdapter,<init> --> deserializer,com.google.gson.JsonDeserializer,READ);
Call(ATTRIBUTE,com.google.gson.internal.bind.TreeTypeAdapter,<init> --> gson,com.google.gson.Gson,READ);
Call(ATTRIBUTE,com.google.gson.internal.bind.TreeTypeAdapter,<init> --> typeToken,com.google.gson.reflect.TypeToken,READ);
Call(ATTRIBUTE,com.google.gson.internal.bind.TreeTypeAdapter,<init> --> skipPast,com.google.gson.TypeAdapterFactory,READ);
Call(METHOD,com.google.gson.internal.bind.TreeTypeAdapter,read --> delegate,com.google.gson.internal.bind.TreeTypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.TreeTypeAdapter,read --> read,com.google.gson.internal.bind.TreeTypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.TreeTypeAdapter,read --> parse,null,);
Call(METHOD,com.google.gson.internal.bind.TreeTypeAdapter,read --> isJsonNull,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.internal.bind.TreeTypeAdapter,read --> deserialize,com.google.gson.JsonDeserializer,);
Call(METHOD,com.google.gson.internal.bind.TreeTypeAdapter,read --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.TreeTypeAdapter,write --> delegate,com.google.gson.internal.bind.TreeTypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.TreeTypeAdapter,write --> write,com.google.gson.internal.bind.TreeTypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.TreeTypeAdapter,write --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TreeTypeAdapter,write --> serialize,com.google.gson.JsonSerializer,);
Call(METHOD,com.google.gson.internal.bind.TreeTypeAdapter,write --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.TreeTypeAdapter,write --> write,null,);
Call(METHOD,com.google.gson.internal.bind.TreeTypeAdapter,delegate --> getDelegateAdapter,com.google.gson.Gson,);
Call(ATTRIBUTE,com.google.gson.internal.bind.TreeTypeAdapter,delegate --> delegate,com.google.gson.TypeAdapter,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.bind.TreeTypeAdapter,delegate --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.internal.bind.TreeTypeAdapter,newFactoryWithMatchRawType --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.TreeTypeAdapter,newFactoryWithMatchRawType --> getRawType,com.google.gson.reflect.TypeToken,);
EndClass 274
StartClass 275
Class(com.google.gson.internal.bind.GsonContextImpl,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 275
StartClass 276
Class(com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper,N,N,Public);
Attribute(context,com.google.gson.Gson,Private,N,Y,);
Attribute(delegate,com.google.gson.TypeAdapter,Private,N,Y,);
Attribute(type,java.lang.reflect.Type,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(read,com.google.gson.internal.bind.T,Public,N,N);
Method(write,void,Public,N,N);
Method(getRuntimeTypeIfMoreSpecific,java.lang.reflect.Type,Private,N,N);
Parameter(<init>,com.google.gson.Gson,);
Parameter(<init>,com.google.gson.TypeAdapter,);
Parameter(<init>,java.lang.reflect.Type,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.internal.bind.T,);
Parameter(getRuntimeTypeIfMoreSpecific,java.lang.reflect.Type,);
Parameter(getRuntimeTypeIfMoreSpecific,java.lang.Object,);
SuperClass(com.google.gson.internal.bind.TypeAdapter);
Generalization(com.google.gson.internal.bind.TypeAdapter);
Composition(com.google.gson.Gson);
Composition(com.google.gson.TypeAdapter<T>);
Call(ATTRIBUTE,com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper,<init> --> context,com.google.gson.Gson,READ);
Call(ATTRIBUTE,com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper,<init> --> delegate,com.google.gson.TypeAdapter,READ);
Call(ATTRIBUTE,com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper,<init> --> type,java.lang.reflect.Type,READ);
Call(METHOD,com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper,read --> read,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper,write --> getRuntimeTypeIfMoreSpecific,com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper,write --> getAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper,write --> get,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper,write --> write,com.google.gson.TypeAdapter,);
Call(ATTRIBUTE,com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper,write --> delegate,com.google.gson.TypeAdapter,READ);
Call(METHOD,com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper,getRuntimeTypeIfMoreSpecific --> getClass,java.lang.Object,);
Call(ATTRIBUTE,com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper,getRuntimeTypeIfMoreSpecific --> type,java.lang.reflect.Type,WRITE);
EndClass 276
StartClass 277
Class(com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,N,N,Private);
Attribute(nameToConstant,java.util.Map,Private,N,Y,);
Attribute(constantToName,java.util.Map,Private,N,Y,);
Attribute(ENUM_FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(read,com.google.gson.internal.bind.T,Public,N,N);
Method(write,void,Public,N,N);
Method(create,com.google.gson.TypeAdapter,Public,N,N);
Method(newFactory,com.google.gson.TypeAdapterFactory,Public,N,N);
Method(create$2,com.google.gson.TypeAdapter,Public,N,N);
Method(newFactory$2,com.google.gson.TypeAdapterFactory,Public,N,N);
Method(create$3,com.google.gson.TypeAdapter,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(newFactory$3,com.google.gson.TypeAdapterFactory,Public,N,N);
Method(create$4,com.google.gson.TypeAdapter,Public,N,N);
Method(toString$2,java.lang.String,Public,N,N);
Method(newFactoryForMultipleTypes,com.google.gson.TypeAdapterFactory,Public,N,N);
Method(create$5,com.google.gson.TypeAdapter,Public,N,N);
Method(toString$3,java.lang.String,Public,N,N);
Method(newTypeHierarchyFactory,com.google.gson.TypeAdapterFactory,Public,N,N);
Method(create$6,com.google.gson.TypeAdapter,Public,N,N);
Method(write$2,void,Public,N,N);
Method(read$2,com.google.gson.internal.bind.T1,Public,N,N);
Method(toString$4,java.lang.String,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,java.lang.Class,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.internal.bind.T,);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
Parameter(newFactory,com.google.gson.reflect.TypeToken,);
Parameter(newFactory,com.google.gson.TypeAdapter,);
Parameter(create$2,com.google.gson.Gson,);
Parameter(create$2,com.google.gson.reflect.TypeToken,);
Parameter(newFactory$2,java.lang.Class,);
Parameter(newFactory$2,com.google.gson.TypeAdapter,);
Parameter(create$3,com.google.gson.Gson,);
Parameter(create$3,com.google.gson.reflect.TypeToken,);
Parameter(newFactory$3,java.lang.Class,);
Parameter(newFactory$3,java.lang.Class,);
Parameter(newFactory$3,com.google.gson.TypeAdapter,);
Parameter(create$4,com.google.gson.Gson,);
Parameter(create$4,com.google.gson.reflect.TypeToken,);
Parameter(newFactoryForMultipleTypes,java.lang.Class,);
Parameter(newFactoryForMultipleTypes,java.lang.Class,);
Parameter(newFactoryForMultipleTypes,com.google.gson.TypeAdapter,);
Parameter(create$5,com.google.gson.Gson,);
Parameter(create$5,com.google.gson.reflect.TypeToken,);
Parameter(newTypeHierarchyFactory,java.lang.Class,);
Parameter(newTypeHierarchyFactory,com.google.gson.TypeAdapter,);
Parameter(create$6,com.google.gson.Gson,);
Parameter(create$6,com.google.gson.reflect.TypeToken,);
Parameter(write$2,com.google.gson.stream.JsonWriter,);
Parameter(write$2,com.google.gson.internal.bind.T1,);
Parameter(read$2,com.google.gson.stream.JsonReader,);
SuperClass(com.google.gson.internal.bind.TypeAdapter);
Generalization(com.google.gson.internal.bind.TypeAdapter);
Composition(com.google.gson.TypeAdapterFactory);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,<init> --> getEnumConstants,java.lang.Class,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,<init> --> name,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,<init> --> getField,java.lang.Class,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,<init> --> getAnnotation,java.lang.Class,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,<init> --> value,com.google.gson.annotations.SerializedName,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,<init> --> alternate,com.google.gson.annotations.SerializedName,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,<init> --> put,java.util.Map,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,<init> --> put,java.util.Map,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,<init> --> put,java.util.Map,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,read --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,read --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,read --> get,java.util.Map,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,read --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,write --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,write --> get,java.util.Map,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,create --> getRawType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,create --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,create --> isEnum,java.lang.Class,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,create --> getSuperclass,java.lang.Class,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,create$2 --> equals,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,create$3 --> getRawType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,toString --> getName,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,create$4 --> getRawType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,toString$2 --> getName,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,toString$2 --> getName,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,create$5 --> getRawType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,toString$3 --> getName,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,toString$3 --> getName,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,create$6 --> getRawType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,create$6 --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,write$2 --> write,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,read$2 --> read,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,read$2 --> isInstance,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,read$2 --> getName,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,read$2 --> getClass,com.google.gson.internal.bind.T1,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,read$2 --> getName,com.google.gson.internal.bind.T1,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter,toString$4 --> getName,null,);
EndClass 277
StartClass 278
Class(com.google.gson.internal.bind.BoundField,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 278
StartClass 279
Class(com.google.gson.internal.bind.SqlDateTypeAdapter,N,N,Public);
Attribute(FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(format,java.text.DateFormat,Private,N,Y,);
Method(create,com.google.gson.TypeAdapter,Public,N,N);
Method(read,com.google.gson.internal.bind.java.sql.Date,Public,N,N);
Method(write,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.internal.bind.java.sql.Date,);
SuperClass(com.google.gson.internal.bind.TypeAdapter);
Generalization(com.google.gson.internal.bind.TypeAdapter);
Composition(com.google.gson.TypeAdapterFactory);
Call(METHOD,com.google.gson.internal.bind.SqlDateTypeAdapter,create --> getRawType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.SqlDateTypeAdapter,read --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.SqlDateTypeAdapter,read --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.SqlDateTypeAdapter,read --> parse,java.text.DateFormat,);
Call(METHOD,com.google.gson.internal.bind.SqlDateTypeAdapter,read --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.SqlDateTypeAdapter,read --> getTime,java.text.DateFormat,);
Call(METHOD,com.google.gson.internal.bind.SqlDateTypeAdapter,write --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.SqlDateTypeAdapter,write --> format,java.text.DateFormat,);
EndClass 279
StartClass 280
Class(com.google.gson.internal.bind.TypeAdapter,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.internal.bind.SqlDateTypeAdapter);
EndClass 280
StartClass 281
Class(com.google.gson.internal.bind.TimeTypeAdapter,N,N,Public);
Attribute(FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(format,java.text.DateFormat,Private,N,Y,);
Method(create,com.google.gson.TypeAdapter,Public,N,N);
Method(read,java.sql.Time,Public,N,N);
Method(write,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,java.sql.Time,);
SuperClass(com.google.gson.internal.bind.TypeAdapter);
Generalization(com.google.gson.internal.bind.TypeAdapter);
Composition(com.google.gson.TypeAdapterFactory);
Call(METHOD,com.google.gson.internal.bind.TimeTypeAdapter,create --> getRawType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.TimeTypeAdapter,read --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TimeTypeAdapter,read --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TimeTypeAdapter,read --> parse,java.text.DateFormat,);
Call(METHOD,com.google.gson.internal.bind.TimeTypeAdapter,read --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TimeTypeAdapter,read --> getTime,java.util.Date,);
Call(METHOD,com.google.gson.internal.bind.TimeTypeAdapter,write --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TimeTypeAdapter,write --> format,java.text.DateFormat,);
EndClass 281
StartClass 282
Class(com.google.gson.internal.bind.TypeAdapter,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.internal.bind.TimeTypeAdapter);
EndClass 282
StartClass 283
Class(com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory,N,N,Private);
Attribute(exactType,com.google.gson.reflect.TypeToken,Private,N,Y,);
Attribute(matchRawType,boolean,Private,N,Y,);
Attribute(hierarchyType,java.lang.Class,Private,N,Y,);
Attribute(serializer,com.google.gson.JsonSerializer,Private,N,Y,);
Attribute(deserializer,com.google.gson.JsonDeserializer,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(create,com.google.gson.TypeAdapter,Public,N,N);
Parameter(<init>,java.lang.Object,);
Parameter(<init>,com.google.gson.reflect.TypeToken,);
Parameter(<init>,boolean,);
Parameter(<init>,java.lang.Class,);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
Realization(com.google.gson.TypeAdapterFactory);
Call(METHOD,com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory,<init> --> checkArgument,null,);
Call(ATTRIBUTE,com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory,<init> --> serializer,com.google.gson.JsonSerializer,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory,<init> --> deserializer,com.google.gson.JsonDeserializer,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory,<init> --> exactType,com.google.gson.reflect.TypeToken,READ);
Call(ATTRIBUTE,com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory,<init> --> matchRawType,boolean,READ);
Call(ATTRIBUTE,com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory,<init> --> hierarchyType,java.lang.Class,READ);
Call(METHOD,com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory,create --> equals,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory,create --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory,create --> getRawType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory,create --> isAssignableFrom,java.lang.Class,);
Call(METHOD,com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory,create --> getRawType,com.google.gson.reflect.TypeToken,);
EndClass 283
StartClass 284
Class(com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory.GsonContextImpl,N,N,Private);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(serialize$2,com.google.gson.JsonElement,Public,N,N);
Method(deserialize,com.google.gson.internal.bind.R,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(serialize,java.lang.Object,);
Parameter(serialize$2,java.lang.Object,);
Parameter(serialize$2,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Realization(com.google.gson.JsonSerializationContext);
Realization(com.google.gson.JsonDeserializationContext);
Call(METHOD,com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory.GsonContextImpl,serialize --> toJsonTree,null,);
Call(METHOD,com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory.GsonContextImpl,serialize$2 --> toJsonTree,null,);
Call(METHOD,com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory.GsonContextImpl,deserialize --> fromJson,null,);
EndClass 284
StartClass 285
Class(com.google.gson.internal.bind.TypeAdapters,N,N,Public);
Attribute(CLASS,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(CLASS_FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(BIT_SET,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(BIT_SET_FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(BOOLEAN,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(BOOLEAN_AS_STRING,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(BOOLEAN_FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(BYTE,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(BYTE_FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(SHORT,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(SHORT_FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(INTEGER,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(INTEGER_FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(ATOMIC_INTEGER,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(ATOMIC_INTEGER_FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(ATOMIC_BOOLEAN,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(ATOMIC_BOOLEAN_FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(ATOMIC_INTEGER_ARRAY,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(ATOMIC_INTEGER_ARRAY_FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(LONG,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(FLOAT,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(DOUBLE,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(NUMBER,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(NUMBER_FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(CHARACTER,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(CHARACTER_FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(STRING,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(BIG_DECIMAL,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(BIG_INTEGER,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(STRING_FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(STRING_BUILDER,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(STRING_BUILDER_FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(STRING_BUFFER,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(STRING_BUFFER_FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(URL,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(URL_FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(URI,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(URI_FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(INET_ADDRESS,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(INET_ADDRESS_FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(UUID,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(UUID_FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(CURRENCY,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(CURRENCY_FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(TIMESTAMP_FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(CALENDAR,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(YEAR,java.lang.String,Private,Y,Y,);
Attribute(MONTH,java.lang.String,Private,Y,Y,);
Attribute(DAY_OF_MONTH,java.lang.String,Private,Y,Y,);
Attribute(HOUR_OF_DAY,java.lang.String,Private,Y,Y,);
Attribute(MINUTE,java.lang.String,Private,Y,Y,);
Attribute(SECOND,java.lang.String,Private,Y,Y,);
Attribute(CALENDAR_FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(LOCALE,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(LOCALE_FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Attribute(JSON_ELEMENT,com.google.gson.TypeAdapter,Public,Y,Y,);
Attribute(JSON_ELEMENT_FACTORY,com.google.gson.TypeAdapterFactory,Public,Y,Y,);
Method(<init>,void,Private,N,N);
Method(write,void,Public,N,N);
Method(read,java.lang.Class,Public,N,N);
Method(read$2,java.util.BitSet,Public,N,N);
Method(write$2,void,Public,N,N);
Method(read$3,java.lang.Boolean,Public,N,N);
Method(write$3,void,Public,N,N);
Method(read$4,java.lang.Boolean,Public,N,N);
Method(write$4,void,Public,N,N);
Method(read$5,java.lang.Number,Public,N,N);
Method(write$5,void,Public,N,N);
Method(read$6,java.lang.Number,Public,N,N);
Method(write$6,void,Public,N,N);
Method(read$7,java.lang.Number,Public,N,N);
Method(write$7,void,Public,N,N);
Method(read$8,java.util.concurrent.atomic.AtomicInteger,Public,N,N);
Method(write$8,void,Public,N,N);
Method(read$9,java.util.concurrent.atomic.AtomicBoolean,Public,N,N);
Method(write$9,void,Public,N,N);
Method(read$10,java.util.concurrent.atomic.AtomicIntegerArray,Public,N,N);
Method(write$10,void,Public,N,N);
Method(read$11,java.lang.Number,Public,N,N);
Method(write$11,void,Public,N,N);
Method(read$12,java.lang.Number,Public,N,N);
Method(write$12,void,Public,N,N);
Method(read$13,java.lang.Number,Public,N,N);
Method(write$13,void,Public,N,N);
Method(read$14,java.lang.Number,Public,N,N);
Method(write$14,void,Public,N,N);
Method(read$15,java.lang.Character,Public,N,N);
Method(write$15,void,Public,N,N);
Method(read$16,java.lang.String,Public,N,N);
Method(write$16,void,Public,N,N);
Method(read$17,java.math.BigDecimal,Public,N,N);
Method(write$17,void,Public,N,N);
Method(read$18,java.math.BigInteger,Public,N,N);
Method(write$18,void,Public,N,N);
Method(read$19,com.google.gson.internal.bind.StringBuilder,Public,N,N);
Method(write$19,void,Public,N,N);
Method(read$20,java.lang.StringBuffer,Public,N,N);
Method(write$20,void,Public,N,N);
Method(read$21,java.net.URL,Public,N,N);
Method(write$21,void,Public,N,N);
Method(read$22,java.net.URI,Public,N,N);
Method(write$22,void,Public,N,N);
Method(read$23,java.net.InetAddress,Public,N,N);
Method(write$23,void,Public,N,N);
Method(read$24,java.util.UUID,Public,N,N);
Method(write$24,void,Public,N,N);
Method(read$25,java.util.Currency,Public,N,N);
Method(write$25,void,Public,N,N);
Method(create,com.google.gson.TypeAdapter,Public,N,N);
Method(read$26,java.sql.Timestamp,Public,N,N);
Method(write$26,void,Public,N,N);
Method(read$27,java.util.Calendar,Public,N,N);
Method(write$27,void,Public,N,N);
Method(read$28,java.util.Locale,Public,N,N);
Method(write$28,void,Public,N,N);
Method(read$29,com.google.gson.JsonElement,Public,N,N);
Method(write$29,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,java.lang.Class,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(read$2,com.google.gson.stream.JsonReader,);
Parameter(write$2,com.google.gson.stream.JsonWriter,);
Parameter(write$2,java.util.BitSet,);
Parameter(read$3,com.google.gson.stream.JsonReader,);
Parameter(write$3,com.google.gson.stream.JsonWriter,);
Parameter(write$3,java.lang.Boolean,);
Parameter(read$4,com.google.gson.stream.JsonReader,);
Parameter(write$4,com.google.gson.stream.JsonWriter,);
Parameter(write$4,java.lang.Boolean,);
Parameter(read$5,com.google.gson.stream.JsonReader,);
Parameter(write$5,com.google.gson.stream.JsonWriter,);
Parameter(write$5,java.lang.Number,);
Parameter(read$6,com.google.gson.stream.JsonReader,);
Parameter(write$6,com.google.gson.stream.JsonWriter,);
Parameter(write$6,java.lang.Number,);
Parameter(read$7,com.google.gson.stream.JsonReader,);
Parameter(write$7,com.google.gson.stream.JsonWriter,);
Parameter(write$7,java.lang.Number,);
Parameter(read$8,com.google.gson.stream.JsonReader,);
Parameter(write$8,com.google.gson.stream.JsonWriter,);
Parameter(write$8,java.util.concurrent.atomic.AtomicInteger,);
Parameter(read$9,com.google.gson.stream.JsonReader,);
Parameter(write$9,com.google.gson.stream.JsonWriter,);
Parameter(write$9,java.util.concurrent.atomic.AtomicBoolean,);
Parameter(read$10,com.google.gson.stream.JsonReader,);
Parameter(write$10,com.google.gson.stream.JsonWriter,);
Parameter(write$10,java.util.concurrent.atomic.AtomicIntegerArray,);
Parameter(read$11,com.google.gson.stream.JsonReader,);
Parameter(write$11,com.google.gson.stream.JsonWriter,);
Parameter(write$11,java.lang.Number,);
Parameter(read$12,com.google.gson.stream.JsonReader,);
Parameter(write$12,com.google.gson.stream.JsonWriter,);
Parameter(write$12,java.lang.Number,);
Parameter(read$13,com.google.gson.stream.JsonReader,);
Parameter(write$13,com.google.gson.stream.JsonWriter,);
Parameter(write$13,java.lang.Number,);
Parameter(read$14,com.google.gson.stream.JsonReader,);
Parameter(write$14,com.google.gson.stream.JsonWriter,);
Parameter(write$14,java.lang.Number,);
Parameter(read$15,com.google.gson.stream.JsonReader,);
Parameter(write$15,com.google.gson.stream.JsonWriter,);
Parameter(write$15,java.lang.Character,);
Parameter(read$16,com.google.gson.stream.JsonReader,);
Parameter(write$16,com.google.gson.stream.JsonWriter,);
Parameter(write$16,java.lang.String,);
Parameter(read$17,com.google.gson.stream.JsonReader,);
Parameter(write$17,com.google.gson.stream.JsonWriter,);
Parameter(write$17,java.math.BigDecimal,);
Parameter(read$18,com.google.gson.stream.JsonReader,);
Parameter(write$18,com.google.gson.stream.JsonWriter,);
Parameter(write$18,java.math.BigInteger,);
Parameter(read$19,com.google.gson.stream.JsonReader,);
Parameter(write$19,com.google.gson.stream.JsonWriter,);
Parameter(write$19,com.google.gson.internal.bind.StringBuilder,);
Parameter(read$20,com.google.gson.stream.JsonReader,);
Parameter(write$20,com.google.gson.stream.JsonWriter,);
Parameter(write$20,java.lang.StringBuffer,);
Parameter(read$21,com.google.gson.stream.JsonReader,);
Parameter(write$21,com.google.gson.stream.JsonWriter,);
Parameter(write$21,java.net.URL,);
Parameter(read$22,com.google.gson.stream.JsonReader,);
Parameter(write$22,com.google.gson.stream.JsonWriter,);
Parameter(write$22,java.net.URI,);
Parameter(read$23,com.google.gson.stream.JsonReader,);
Parameter(write$23,com.google.gson.stream.JsonWriter,);
Parameter(write$23,java.net.InetAddress,);
Parameter(read$24,com.google.gson.stream.JsonReader,);
Parameter(write$24,com.google.gson.stream.JsonWriter,);
Parameter(write$24,java.util.UUID,);
Parameter(read$25,com.google.gson.stream.JsonReader,);
Parameter(write$25,com.google.gson.stream.JsonWriter,);
Parameter(write$25,java.util.Currency,);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
Parameter(read$26,com.google.gson.stream.JsonReader,);
Parameter(write$26,com.google.gson.stream.JsonWriter,);
Parameter(write$26,java.sql.Timestamp,);
Parameter(read$27,com.google.gson.stream.JsonReader,);
Parameter(write$27,com.google.gson.stream.JsonWriter,);
Parameter(write$27,java.util.Calendar,);
Parameter(read$28,com.google.gson.stream.JsonReader,);
Parameter(write$28,com.google.gson.stream.JsonWriter,);
Parameter(write$28,java.util.Locale,);
Parameter(read$29,com.google.gson.stream.JsonReader,);
Parameter(write$29,com.google.gson.stream.JsonWriter,);
Parameter(write$29,com.google.gson.JsonElement,);
Composition(com.google.gson.TypeAdapterFactory);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write --> getName,java.lang.Class,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read --> nullSafe,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read --> newFactory,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$2 --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$2 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$2 --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$2 --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$2 --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$2 --> parseInt,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$2 --> set,java.util.BitSet,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$2 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$2 --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$2 --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$2 --> length,java.util.BitSet,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$2 --> get,java.util.BitSet,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$2 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$2 --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$2 --> nullSafe,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$2 --> newFactory,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$3 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$3 --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$3 --> parseBoolean,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$3 --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$3 --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$3 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$4 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$4 --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$4 --> valueOf,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$4 --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$4 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$4 --> toString,java.lang.Boolean,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$4 --> newFactory,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$5 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$5 --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$5 --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$5 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$5 --> newFactory,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$6 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$6 --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$6 --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$6 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$6 --> newFactory,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$7 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$7 --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$7 --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$7 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$7 --> newFactory,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$8 --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$8 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$8 --> get,java.util.concurrent.atomic.AtomicInteger,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$8 --> nullSafe,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$8 --> newFactory,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$9 --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$9 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$9 --> get,java.util.concurrent.atomic.AtomicBoolean,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$9 --> nullSafe,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$9 --> newFactory,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$10 --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$10 --> hasNext,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$10 --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$10 --> add,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$10 --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$10 --> size,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$10 --> set,java.util.concurrent.atomic.AtomicIntegerArray,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$10 --> get,java.util.List,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$10 --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$10 --> length,java.util.concurrent.atomic.AtomicIntegerArray,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$10 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$10 --> get,java.util.concurrent.atomic.AtomicIntegerArray,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$10 --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$10 --> nullSafe,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$10 --> newFactory,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$11 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$11 --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$11 --> nextLong,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$11 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$12 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$12 --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$12 --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$12 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$13 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$13 --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$13 --> nextDouble,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$13 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$14 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$14 --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$14 --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$14 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$14 --> newFactory,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$15 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$15 --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$15 --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$15 --> length,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$15 --> charAt,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$15 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$15 --> valueOf,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$15 --> newFactory,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$16 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$16 --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$16 --> toString,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$16 --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$16 --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$16 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$17 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$17 --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$17 --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$17 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$18 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$18 --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$18 --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$18 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$18 --> newFactory,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$19 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$19 --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$19 --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$19 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$19 --> toString,com.google.gson.internal.bind.StringBuilder,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$19 --> newFactory,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$20 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$20 --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$20 --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$20 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$20 --> toString,java.lang.StringBuffer,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$20 --> newFactory,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$21 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$21 --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$21 --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$21 --> equals,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$21 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$21 --> toExternalForm,java.net.URL,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$21 --> newFactory,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$22 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$22 --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$22 --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$22 --> equals,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$22 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$22 --> toASCIIString,java.net.URI,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$22 --> newFactory,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$23 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$23 --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$23 --> getByName,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$23 --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$23 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$23 --> getHostAddress,java.net.InetAddress,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$23 --> newTypeHierarchyFactory,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$24 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$24 --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$24 --> fromString,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$24 --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$24 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$24 --> toString,java.util.UUID,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$24 --> newFactory,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$25 --> getInstance,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$25 --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$25 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$25 --> getCurrencyCode,java.util.Currency,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$25 --> nullSafe,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$25 --> newFactory,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,create --> getRawType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,create --> getAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$26 --> read,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$26 --> getTime,java.util.Date,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$26 --> write,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$27 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$27 --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$27 --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$27 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$27 --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$27 --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$27 --> equals,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$27 --> equals,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$27 --> equals,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$27 --> equals,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$27 --> equals,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$27 --> equals,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$27 --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$27 --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$27 --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$27 --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$27 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$27 --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$27 --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$27 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$27 --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$27 --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$27 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$27 --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$27 --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$27 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$27 --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$27 --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$27 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$27 --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$27 --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$27 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$27 --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$27 --> endObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$27 --> newFactoryForMultipleTypes,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$28 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$28 --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$28 --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$28 --> hasMoreElements,java.util.StringTokenizer,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$28 --> nextToken,java.util.StringTokenizer,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$28 --> hasMoreElements,java.util.StringTokenizer,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$28 --> nextToken,java.util.StringTokenizer,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$28 --> hasMoreElements,java.util.StringTokenizer,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$28 --> nextToken,java.util.StringTokenizer,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$28 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$28 --> toString,java.util.Locale,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$28 --> newFactory,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$29 --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$29 --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$29 --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$29 --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$29 --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$29 --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$29 --> hasNext,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$29 --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$29 --> read,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$29 --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$29 --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$29 --> hasNext,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$29 --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$29 --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$29 --> read,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,read$29 --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> isJsonNull,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> nullValue,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> isJsonPrimitive,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> getAsJsonPrimitive,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> isNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> getAsNumber,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> isBoolean,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> getAsBoolean,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> getAsString,com.google.gson.JsonPrimitive,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> isJsonArray,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> beginArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> getAsJsonArray,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> write,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> endArray,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> isJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> getAsJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> entrySet,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> getKey,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> write,com.google.gson.internal.bind.TypeAdapters,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> getValue,null,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> endObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> getClass,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.internal.bind.TypeAdapters,write$29 --> newTypeHierarchyFactory,com.google.gson.internal.bind.TypeAdapters,);
EndClass 285
StartClass 286
Class(com.google.gson.internal.bind.util.ISO8601Utils,N,N,Public);
Attribute(UTC_ID,java.util.String,Private,Y,Y,);
Attribute(TIMEZONE_UTC,java.util.TimeZone,Private,Y,Y,);
Method(format,java.util.String,Public,Y,N);
Method(format$2,java.util.String,Public,Y,N);
Method(format$3,java.util.String,Public,Y,N);
Method(parse,java.util.Date,Public,Y,N);
Method(checkOffset,boolean,Private,Y,N);
Method(parseInt,int,Private,Y,N);
Method(padInt,void,Private,Y,N);
Method(indexOfNonDigit,int,Private,Y,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(format,java.util.Date,);
Parameter(format$2,java.util.Date,);
Parameter(format$2,boolean,);
Parameter(format$3,java.util.Date,);
Parameter(format$3,boolean,);
Parameter(format$3,java.util.TimeZone,);
Parameter(parse,java.util.String,);
Parameter(parse,java.util.ParsePosition,);
Parameter(checkOffset,java.util.String,);
Parameter(checkOffset,int,);
Parameter(checkOffset,java.util.char,);
Parameter(parseInt,java.util.String,);
Parameter(parseInt,int,);
Parameter(parseInt,int,);
Parameter(padInt,java.util.StringBuilder,);
Parameter(padInt,int,);
Parameter(padInt,int,);
Parameter(indexOfNonDigit,java.util.String,);
Parameter(indexOfNonDigit,int,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format --> format,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$2 --> format,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> setTime,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> length,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> length,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> getRawOffset,java.util.TimeZone,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> length,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> length,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> padInt,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> length,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> append,java.util.StringBuilder,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> padInt,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> length,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> append,java.util.StringBuilder,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> padInt,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> length,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> append,java.util.StringBuilder,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> padInt,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> length,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> append,java.util.StringBuilder,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> padInt,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> length,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> append,java.util.StringBuilder,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> padInt,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> length,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> append,java.util.StringBuilder,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> padInt,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> length,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> getOffset,java.util.TimeZone,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> getTimeInMillis,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> abs,null,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> abs,null,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> append,java.util.StringBuilder,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> padInt,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> length,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> append,java.util.StringBuilder,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> padInt,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> length,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> append,java.util.StringBuilder,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,format$3 --> toString,java.util.StringBuilder,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> getIndex,java.util.ParsePosition,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> parseInt,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> checkOffset,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> parseInt,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> checkOffset,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> parseInt,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> checkOffset,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> length,java.util.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> setIndex,java.util.ParsePosition,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> getTime,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> parseInt,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> checkOffset,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> parseInt,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> checkOffset,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> length,java.util.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> charAt,java.util.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> parseInt,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> checkOffset,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> indexOfNonDigit,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> min,null,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> parseInt,com.google.gson.internal.bind.util.ISO8601Utils,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> length,java.util.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> charAt,java.util.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> substring,java.util.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> length,java.util.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> length,java.util.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> equals,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> equals,java.lang.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> getTimeZone,null,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> getID,java.util.TimeZone,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> equals,java.util.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> replace,java.util.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> equals,java.util.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> getID,java.util.TimeZone,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> setLenient,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> set,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> set,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> set,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> set,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> set,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> set,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> set,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> setIndex,java.util.ParsePosition,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> getTime,java.util.Calendar,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> getMessage,java.util.Exception,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> isEmpty,java.util.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> getClass,java.util.Exception,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> getName,java.util.Exception,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> getIndex,java.util.ParsePosition,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parse --> initCause,java.util.ParseException,);
Call(ATTRIBUTE,com.google.gson.internal.bind.util.ISO8601Utils,parse --> TIMEZONE_UTC,java.util.TimeZone,READ);
Call(ATTRIBUTE,com.google.gson.internal.bind.util.ISO8601Utils,parse --> TIMEZONE_UTC,java.util.TimeZone,READ);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,checkOffset --> length,java.util.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,checkOffset --> charAt,java.util.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parseInt --> length,java.util.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parseInt --> digit,null,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parseInt --> charAt,java.util.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parseInt --> substring,java.util.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parseInt --> digit,null,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parseInt --> charAt,java.util.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,parseInt --> substring,java.util.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,padInt --> toString,null,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,padInt --> length,java.util.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,padInt --> append,java.util.StringBuilder,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,padInt --> append,java.util.StringBuilder,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,indexOfNonDigit --> length,java.util.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,indexOfNonDigit --> charAt,java.util.String,);
Call(METHOD,com.google.gson.internal.bind.util.ISO8601Utils,indexOfNonDigit --> length,java.util.String,);
EndClass 286
StartClass 287
Class(com.google.gson.internal.JavaVersion,N,N,Public);
Attribute(majorJavaVersion,int,Private,Y,Y,);
Method(determineMajorJavaVersion,int,Private,Y,N);
Method(getMajorJavaVersion,int,Public,Y,N);
Method(parseDotted,int,Private,Y,N);
Method(extractBeginningInt,int,Private,Y,N);
Method(getMajorJavaVersion$2,int,Public,Y,N);
Method(isJava9OrLater,boolean,Public,Y,N);
Method(<init>,void,Private,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(getMajorJavaVersion,java.lang.String,);
Parameter(parseDotted,java.lang.String,);
Parameter(extractBeginningInt,java.lang.String,);
Call(METHOD,com.google.gson.internal.JavaVersion,determineMajorJavaVersion --> getProperty,null,);
Call(METHOD,com.google.gson.internal.JavaVersion,determineMajorJavaVersion --> getMajorJavaVersion,com.google.gson.internal.JavaVersion,);
Call(METHOD,com.google.gson.internal.JavaVersion,getMajorJavaVersion --> parseDotted,com.google.gson.internal.JavaVersion,);
Call(METHOD,com.google.gson.internal.JavaVersion,getMajorJavaVersion --> extractBeginningInt,com.google.gson.internal.JavaVersion,);
Call(METHOD,com.google.gson.internal.JavaVersion,parseDotted --> split,java.lang.String,);
Call(METHOD,com.google.gson.internal.JavaVersion,parseDotted --> parseInt,null,);
Call(METHOD,com.google.gson.internal.JavaVersion,parseDotted --> parseInt,null,);
Call(METHOD,com.google.gson.internal.JavaVersion,extractBeginningInt --> length,java.lang.String,);
Call(METHOD,com.google.gson.internal.JavaVersion,extractBeginningInt --> charAt,java.lang.String,);
Call(METHOD,com.google.gson.internal.JavaVersion,extractBeginningInt --> isDigit,null,);
Call(METHOD,com.google.gson.internal.JavaVersion,extractBeginningInt --> append,com.google.gson.internal.StringBuilder,);
Call(METHOD,com.google.gson.internal.JavaVersion,extractBeginningInt --> parseInt,null,);
Call(METHOD,com.google.gson.internal.JavaVersion,extractBeginningInt --> toString,com.google.gson.internal.StringBuilder,);
EndClass 287
StartClass 288
Class(com.google.gson.internal.JsonReaderInternalAccess,N,Y,Public);
Attribute(INSTANCE,com.google.gson.internal.JsonReaderInternalAccess,Public,Y,N,);
Method(promoteNameToValue,void,Public,N,Y);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(promoteNameToValue,com.google.gson.stream.JsonReader,);
Composition(com.google.gson.internal.JsonReaderInternalAccess);
EndClass 288
StartClass 289
Class(com.google.gson.internal.LinkedHashTreeMap,N,N,Public);
Attribute(NATURAL_ORDER,java.util.Comparator,Private,Y,Y,);
Attribute(comparator,java.util.Comparator,Public,N,N,);
Attribute(table,com.google.gson.internal.Node,Public,N,N,);
Attribute(header,com.google.gson.internal.Node,Public,N,Y,);
Attribute(size,int,Public,N,N,);
Attribute(modCount,int,Public,N,N,);
Attribute(threshold,int,Public,N,N,);
Attribute(entrySet,com.google.gson.internal.EntrySet,Private,N,N,);
Attribute(keySet,com.google.gson.internal.KeySet,Private,N,N,);
Method(compare,int,Public,N,N);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(size,int,Public,N,N);
Method(get,com.google.gson.internal.V,Public,N,N);
Method(containsKey,boolean,Public,N,N);
Method(put,com.google.gson.internal.V,Public,N,N);
Method(clear,void,Public,N,N);
Method(remove,com.google.gson.internal.V,Public,N,N);
Method(find,com.google.gson.internal.Node,Public,N,N);
Method(findByObject,com.google.gson.internal.Node,Public,N,N);
Method(findByEntry,com.google.gson.internal.Node,Public,N,N);
Method(equal,boolean,Private,N,N);
Method(secondaryHash,int,Private,Y,N);
Method(removeInternal,void,Public,N,N);
Method(removeInternalByKey,com.google.gson.internal.Node,Public,N,N);
Method(replaceInParent,void,Private,N,N);
Method(rebalance,void,Private,N,N);
Method(rotateLeft,void,Private,N,N);
Method(rotateRight,void,Private,N,N);
Method(entrySet,java.util.Set,Public,N,N);
Method(keySet,java.util.Set,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(compare,java.lang.Comparable,);
Parameter(compare,java.lang.Comparable,);
Parameter(<init>$2,java.util.Comparator,);
Parameter(get,java.lang.Object,);
Parameter(containsKey,java.lang.Object,);
Parameter(put,com.google.gson.internal.K,);
Parameter(put,com.google.gson.internal.V,);
Parameter(remove,java.lang.Object,);
Parameter(find,com.google.gson.internal.K,);
Parameter(find,boolean,);
Parameter(findByObject,java.lang.Object,);
Parameter(findByEntry,com.google.gson.internal.Entry,);
Parameter(equal,java.lang.Object,);
Parameter(equal,java.lang.Object,);
Parameter(secondaryHash,int,);
Parameter(removeInternal,com.google.gson.internal.Node,);
Parameter(removeInternal,boolean,);
Parameter(removeInternalByKey,java.lang.Object,);
Parameter(replaceInParent,com.google.gson.internal.Node,);
Parameter(replaceInParent,com.google.gson.internal.Node,);
Parameter(rebalance,com.google.gson.internal.Node,);
Parameter(rebalance,boolean,);
Parameter(rotateLeft,com.google.gson.internal.Node,);
Parameter(rotateRight,com.google.gson.internal.Node,);
SuperClass(com.google.gson.internal.AbstractMap);
Generalization(com.google.gson.internal.AbstractMap);
Realization(java.io.Serializable);
Composition(com.google.gson.internal.EntrySet);
Composition(com.google.gson.internal.KeySet);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,compare --> compareTo,java.lang.Comparable,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,<init> --> <init>$2,com.google.gson.internal.LinkedHashTreeMap,);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap,<init>$2 --> comparator,java.util.Comparator,READ);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap,<init>$2 --> comparator,java.util.Comparator,READ);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,get --> findByObject,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,containsKey --> findByObject,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,put --> find,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,clear --> fill,null,);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap,clear --> size,int,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap,clear --> header,com.google.gson.internal.Node,READ);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap,clear --> header,com.google.gson.internal.Node,READ);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap,clear --> header,com.google.gson.internal.Node,READ);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,remove --> removeInternalByKey,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,find --> secondaryHash,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,find --> hashCode,com.google.gson.internal.K,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,find --> compareTo,java.lang.Comparable,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,find --> compare,java.util.Comparator,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,find --> getClass,com.google.gson.internal.K,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,find --> getName,com.google.gson.internal.K,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,find --> rebalance,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,find --> doubleCapacity,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,findByObject --> find,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,findByEntry --> findByObject,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,findByEntry --> getKey,com.google.gson.internal.Entry,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,findByEntry --> equal,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,findByEntry --> getValue,com.google.gson.internal.Entry,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,equal --> equals,java.lang.Object,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,removeInternal --> last,com.google.gson.internal.Node,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,removeInternal --> first,com.google.gson.internal.Node,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,removeInternal --> removeInternal,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,removeInternal --> max,null,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,removeInternal --> replaceInParent,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,removeInternal --> replaceInParent,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,removeInternal --> replaceInParent,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,removeInternal --> replaceInParent,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,removeInternal --> rebalance,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,removeInternalByKey --> findByObject,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,removeInternalByKey --> removeInternal,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,rebalance --> rotateLeft,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,rebalance --> rotateRight,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,rebalance --> rotateLeft,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,rebalance --> rotateRight,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,rebalance --> rotateLeft,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,rebalance --> rotateRight,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,rebalance --> max,null,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,rotateLeft --> replaceInParent,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,rotateLeft --> max,null,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,rotateLeft --> max,null,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,rotateRight --> replaceInParent,com.google.gson.internal.LinkedHashTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,rotateRight --> max,null,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap,rotateRight --> max,null,);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap,entrySet --> entrySet,com.google.gson.internal.EntrySet,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap,keySet --> keySet,com.google.gson.internal.KeySet,WRITE);
EndClass 289
StartClass 290
Class(com.google.gson.internal.EntrySet,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 290
StartClass 291
Class(com.google.gson.internal.KeySet,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 291
StartClass 292
Class(com.google.gson.internal.AbstractMap,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.internal.LinkedHashTreeMap);
SubClass(com.google.gson.internal.LinkedTreeMap);
EndClass 292
StartClass 293
Class(com.google.gson.internal.LinkedTreeMap,N,N,Public);
Attribute(NATURAL_ORDER,java.util.Comparator,Private,Y,Y,);
Attribute(comparator,java.util.Comparator,Public,N,N,);
Attribute(root,com.google.gson.internal.Node,Public,N,N,);
Attribute(size,int,Public,N,N,);
Attribute(modCount,int,Public,N,N,);
Attribute(header,com.google.gson.internal.Node,Public,N,Y,);
Attribute(entrySet,com.google.gson.internal.EntrySet,Private,N,N,);
Attribute(keySet,com.google.gson.internal.KeySet,Private,N,N,);
Method(compare,int,Public,N,N);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(size,int,Public,N,N);
Method(get,com.google.gson.internal.V,Public,N,N);
Method(containsKey,boolean,Public,N,N);
Method(put,com.google.gson.internal.V,Public,N,N);
Method(clear,void,Public,N,N);
Method(remove,com.google.gson.internal.V,Public,N,N);
Method(find,com.google.gson.internal.Node,Public,N,N);
Method(findByObject,com.google.gson.internal.Node,Public,N,N);
Method(findByEntry,com.google.gson.internal.Node,Public,N,N);
Method(equal,boolean,Private,N,N);
Method(removeInternal,void,Public,N,N);
Method(removeInternalByKey,com.google.gson.internal.Node,Public,N,N);
Method(replaceInParent,void,Private,N,N);
Method(rebalance,void,Private,N,N);
Method(rotateLeft,void,Private,N,N);
Method(rotateRight,void,Private,N,N);
Method(entrySet,java.util.Set,Public,N,N);
Method(keySet,java.util.Set,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(compare,java.lang.Comparable,);
Parameter(compare,java.lang.Comparable,);
Parameter(<init>$2,java.util.Comparator,);
Parameter(get,java.lang.Object,);
Parameter(containsKey,java.lang.Object,);
Parameter(put,com.google.gson.internal.K,);
Parameter(put,com.google.gson.internal.V,);
Parameter(remove,java.lang.Object,);
Parameter(find,com.google.gson.internal.K,);
Parameter(find,boolean,);
Parameter(findByObject,java.lang.Object,);
Parameter(findByEntry,com.google.gson.internal.Entry,);
Parameter(equal,java.lang.Object,);
Parameter(equal,java.lang.Object,);
Parameter(removeInternal,com.google.gson.internal.Node,);
Parameter(removeInternal,boolean,);
Parameter(removeInternalByKey,java.lang.Object,);
Parameter(replaceInParent,com.google.gson.internal.Node,);
Parameter(replaceInParent,com.google.gson.internal.Node,);
Parameter(rebalance,com.google.gson.internal.Node,);
Parameter(rebalance,boolean,);
Parameter(rotateLeft,com.google.gson.internal.Node,);
Parameter(rotateRight,com.google.gson.internal.Node,);
SuperClass(com.google.gson.internal.AbstractMap);
Generalization(com.google.gson.internal.AbstractMap);
Realization(java.io.Serializable);
Composition(com.google.gson.internal.EntrySet);
Composition(com.google.gson.internal.KeySet);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,compare --> compareTo,java.lang.Comparable,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,<init> --> <init>$2,com.google.gson.internal.LinkedTreeMap,);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap,<init>$2 --> comparator,java.util.Comparator,READ);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap,<init>$2 --> comparator,java.util.Comparator,READ);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,get --> findByObject,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,containsKey --> findByObject,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,put --> find,com.google.gson.internal.LinkedTreeMap,);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap,clear --> root,com.google.gson.internal.Node,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap,clear --> size,int,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap,clear --> header,com.google.gson.internal.Node,READ);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap,clear --> header,com.google.gson.internal.Node,READ);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap,clear --> header,com.google.gson.internal.Node,READ);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,remove --> removeInternalByKey,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,find --> compareTo,java.lang.Comparable,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,find --> compare,java.util.Comparator,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,find --> getClass,com.google.gson.internal.K,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,find --> getName,com.google.gson.internal.K,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,find --> rebalance,com.google.gson.internal.LinkedTreeMap,);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap,find --> root,com.google.gson.internal.Node,WRITE);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,findByObject --> find,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,findByEntry --> findByObject,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,findByEntry --> getKey,com.google.gson.internal.Entry,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,findByEntry --> equal,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,findByEntry --> getValue,com.google.gson.internal.Entry,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,equal --> equals,java.lang.Object,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,removeInternal --> last,com.google.gson.internal.Node,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,removeInternal --> first,com.google.gson.internal.Node,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,removeInternal --> removeInternal,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,removeInternal --> max,null,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,removeInternal --> replaceInParent,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,removeInternal --> replaceInParent,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,removeInternal --> replaceInParent,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,removeInternal --> replaceInParent,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,removeInternal --> rebalance,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,removeInternalByKey --> findByObject,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,removeInternalByKey --> removeInternal,com.google.gson.internal.LinkedTreeMap,);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap,replaceInParent --> root,com.google.gson.internal.Node,WRITE);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,rebalance --> rotateLeft,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,rebalance --> rotateRight,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,rebalance --> rotateLeft,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,rebalance --> rotateRight,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,rebalance --> rotateLeft,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,rebalance --> rotateRight,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,rebalance --> max,null,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,rotateLeft --> replaceInParent,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,rotateLeft --> max,null,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,rotateLeft --> max,null,);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap,rotateLeft --> root,com.google.gson.internal.Node,READ);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap,rotateLeft --> root,com.google.gson.internal.Node,READ);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,rotateRight --> replaceInParent,com.google.gson.internal.LinkedTreeMap,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,rotateRight --> max,null,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap,rotateRight --> max,null,);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap,rotateRight --> root,com.google.gson.internal.Node,READ);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap,rotateRight --> root,com.google.gson.internal.Node,READ);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap,entrySet --> entrySet,com.google.gson.internal.EntrySet,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap,keySet --> keySet,com.google.gson.internal.KeySet,WRITE);
EndClass 293
StartClass 294
Class(java.io.Serializable,Y,Y,Public);
EndClass 294
StartClass 295
Class(com.google.gson.internal.LinkedHashTreeMap.Node,N,N,Protected);
Attribute(parent,com.google.gson.internal.Node,Public,N,N,);
Attribute(left,com.google.gson.internal.Node,Public,N,N,);
Attribute(right,com.google.gson.internal.Node,Public,N,N,);
Attribute(next,com.google.gson.internal.Node,Public,N,N,);
Attribute(prev,com.google.gson.internal.Node,Public,N,N,);
Attribute(key,com.google.gson.internal.K,Public,N,Y,);
Attribute(hash,int,Public,N,Y,);
Attribute(value,com.google.gson.internal.V,Public,N,N,);
Attribute(height,int,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getKey,com.google.gson.internal.K,Public,N,N);
Method(getValue,com.google.gson.internal.V,Public,N,N);
Method(setValue,com.google.gson.internal.V,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(first,com.google.gson.internal.Node,Public,N,N);
Method(last,com.google.gson.internal.Node,Public,N,N);
Method(doubleCapacity,void,Private,N,N);
Method(doubleCapacity$2,com.google.gson.internal.Node,Public,N,N);
Parameter(<init>$2,com.google.gson.internal.Node,);
Parameter(<init>$2,com.google.gson.internal.K,);
Parameter(<init>$2,int,);
Parameter(<init>$2,com.google.gson.internal.Node,);
Parameter(<init>$2,com.google.gson.internal.Node,);
Parameter(setValue,com.google.gson.internal.V,);
Parameter(equals,java.lang.Object,);
Parameter(doubleCapacity$2,com.google.gson.internal.Node,);
Realization(com.google.gson.internal.Entry);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node,<init> --> key,com.google.gson.internal.K,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node,<init> --> hash,int,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node,<init> --> next,com.google.gson.internal.Node,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node,<init> --> prev,com.google.gson.internal.Node,READ);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node,<init> --> prev,com.google.gson.internal.Node,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node,<init>$2 --> parent,com.google.gson.internal.Node,READ);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node,<init>$2 --> key,com.google.gson.internal.K,READ);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node,<init>$2 --> hash,int,READ);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node,<init>$2 --> next,com.google.gson.internal.Node,READ);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node,<init>$2 --> prev,com.google.gson.internal.Node,READ);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node,setValue --> value,com.google.gson.internal.V,READ);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node,equals --> getKey,com.google.gson.internal.Entry,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node,equals --> equals,com.google.gson.internal.K,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node,equals --> getKey,com.google.gson.internal.Entry,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node,equals --> getValue,com.google.gson.internal.Entry,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node,equals --> equals,com.google.gson.internal.V,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node,equals --> getValue,com.google.gson.internal.Entry,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node,hashCode --> hashCode,com.google.gson.internal.K,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node,hashCode --> hashCode,com.google.gson.internal.V,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node,doubleCapacity --> doubleCapacity,com.google.gson.internal.LinkedHashTreeMap.Node,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node,doubleCapacity$2 --> reset,com.google.gson.internal.AvlIterator,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node,doubleCapacity$2 --> next,com.google.gson.internal.AvlIterator,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node,doubleCapacity$2 --> reset,com.google.gson.internal.AvlBuilder,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node,doubleCapacity$2 --> reset,com.google.gson.internal.AvlBuilder,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node,doubleCapacity$2 --> reset,com.google.gson.internal.AvlIterator,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node,doubleCapacity$2 --> next,com.google.gson.internal.AvlIterator,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node,doubleCapacity$2 --> add,com.google.gson.internal.AvlBuilder,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node,doubleCapacity$2 --> add,com.google.gson.internal.AvlBuilder,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node,doubleCapacity$2 --> root,com.google.gson.internal.AvlBuilder,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node,doubleCapacity$2 --> root,com.google.gson.internal.AvlBuilder,);
EndClass 295
StartClass 296
Class(com.google.gson.internal.Entry,Y,Y,Public);
EndClass 296
StartClass 297
Class(com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator,N,N,Protected);
Attribute(stackTop,com.google.gson.internal.Node,Private,N,N,);
Method(reset,void,Public,N,N);
Method(next,com.google.gson.internal.Node,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(reset,com.google.gson.internal.Node,);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator,reset --> stackTop,com.google.gson.internal.Node,READ);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator,reset --> stackTop,com.google.gson.internal.Node,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator,reset --> stackTop,com.google.gson.internal.Node,READ);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator,next --> stackTop,com.google.gson.internal.Node,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator,next --> stackTop,com.google.gson.internal.Node,READ);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator,next --> stackTop,com.google.gson.internal.Node,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator,next --> stackTop,com.google.gson.internal.Node,READ);
EndClass 297
StartClass 298
Class(com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder,N,N,Protected);
Attribute(stack,com.google.gson.internal.Node,Private,N,N,);
Attribute(leavesToSkip,int,Private,N,N,);
Attribute(leavesSkipped,int,Private,N,N,);
Attribute(size,int,Private,N,N,);
Method(reset,void,Public,N,N);
Method(add,void,Public,N,N);
Method(root,com.google.gson.internal.Node,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(reset,int,);
Parameter(add,com.google.gson.internal.Node,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder,reset --> highestOneBit,null,);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder,reset --> leavesToSkip,int,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder,reset --> size,int,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder,reset --> leavesSkipped,int,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder,reset --> stack,com.google.gson.internal.Node,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder,add --> stack,com.google.gson.internal.Node,READ);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder,add --> stack,com.google.gson.internal.Node,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder,add --> stack,com.google.gson.internal.Node,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder,add --> stack,com.google.gson.internal.Node,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder,add --> leavesSkipped,int,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder,add --> leavesSkipped,int,WRITE);
EndClass 298
StartClass 299
Class(com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator,N,Y,Private);
Attribute(next,com.google.gson.internal.Node,Public,N,N,);
Attribute(lastReturned,com.google.gson.internal.Node,Public,N,N,);
Attribute(expectedModCount,int,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(hasNext,boolean,Public,N,N);
Method(nextNode,com.google.gson.internal.Node,Public,N,N);
Method(remove,void,Public,N,N);
Realization(com.google.gson.internal.Iterator);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator,nextNode --> next,com.google.gson.internal.Node,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator,nextNode --> lastReturned,com.google.gson.internal.Node,WRITE);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator,remove --> removeInternal,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator,);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator,remove --> lastReturned,com.google.gson.internal.Node,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator,remove --> expectedModCount,int,WRITE);
EndClass 299
StartClass 300
Class(com.google.gson.internal.Iterator,Y,Y,Public);
EndClass 300
StartClass 301
Class(com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator.EntrySet,N,N,Protected);
Method(size,int,Public,N,N);
Method(iterator,java.util.Iterator,Public,N,N);
Method(next,com.google.gson.internal.Entry,Public,N,N);
Method(contains,boolean,Public,N,N);
Method(remove,boolean,Public,N,N);
Method(clear,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(contains,java.lang.Object,);
Parameter(remove,java.lang.Object,);
SuperClass(com.google.gson.internal.AbstractSet);
Generalization(com.google.gson.internal.AbstractSet);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator.EntrySet,next --> nextNode,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator.EntrySet,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator.EntrySet,contains --> findByEntry,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator.EntrySet,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator.EntrySet,remove --> findByEntry,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator.EntrySet,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator.EntrySet,remove --> removeInternal,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator.EntrySet,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator.EntrySet,clear --> clear,null,);
EndClass 301
StartClass 302
Class(com.google.gson.internal.AbstractSet,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator.EntrySet);
SubClass(com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator.EntrySet);
EndClass 302
StartClass 303
Class(com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator.EntrySet,N,N,Protected);
Method(size,int,Public,N,N);
Method(iterator,java.util.Iterator,Public,N,N);
Method(next,com.google.gson.internal.Entry,Public,N,N);
Method(contains,boolean,Public,N,N);
Method(remove,boolean,Public,N,N);
Method(clear,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(contains,java.lang.Object,);
Parameter(remove,java.lang.Object,);
SuperClass(com.google.gson.internal.AbstractSet);
Generalization(com.google.gson.internal.AbstractSet);
Call(METHOD,com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator.EntrySet,next --> nextNode,com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator.EntrySet,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator.EntrySet,contains --> findByEntry,com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator.EntrySet,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator.EntrySet,remove --> findByEntry,com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator.EntrySet,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator.EntrySet,remove --> removeInternal,com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator.EntrySet,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator.EntrySet,clear --> clear,null,);
EndClass 303
StartClass 304
Class(com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator.EntrySet.KeySet,N,N,Protected);
Method(size,int,Public,N,N);
Method(iterator,java.util.Iterator,Public,N,N);
Method(next,com.google.gson.internal.K,Public,N,N);
Method(contains,boolean,Public,N,N);
Method(remove,boolean,Public,N,N);
Method(clear,void,Public,N,N);
Method(writeReplace,java.lang.Object,Private,N,N);
Method(<init>,void,Public,N,N);
Parameter(contains,java.lang.Object,);
Parameter(remove,java.lang.Object,);
SuperClass(com.google.gson.internal.AbstractSet);
Generalization(com.google.gson.internal.AbstractSet);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator.EntrySet.KeySet,next --> nextNode,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator.EntrySet.KeySet,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator.EntrySet.KeySet,contains --> containsKey,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator.EntrySet.KeySet,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator.EntrySet.KeySet,remove --> removeInternalByKey,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator.EntrySet.KeySet,);
Call(METHOD,com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator.EntrySet.KeySet,clear --> clear,null,);
EndClass 304
StartClass 305
Class(com.google.gson.internal.AbstractSet,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.internal.LinkedHashTreeMap.Node.AvlIterator.AvlBuilder.LinkedTreeMapIterator.EntrySet.KeySet);
SubClass(com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator.EntrySet.KeySet);
EndClass 305
StartClass 306
Class(com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator.EntrySet.KeySet,N,N,Protected);
Method(size,int,Public,N,N);
Method(iterator,java.util.Iterator,Public,N,N);
Method(next,com.google.gson.internal.K,Public,N,N);
Method(contains,boolean,Public,N,N);
Method(remove,boolean,Public,N,N);
Method(clear,void,Public,N,N);
Method(writeReplace,java.lang.Object,Private,N,N);
Method(<init>,void,Public,N,N);
Parameter(contains,java.lang.Object,);
Parameter(remove,java.lang.Object,);
SuperClass(com.google.gson.internal.AbstractSet);
Generalization(com.google.gson.internal.AbstractSet);
Call(METHOD,com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator.EntrySet.KeySet,next --> nextNode,com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator.EntrySet.KeySet,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator.EntrySet.KeySet,contains --> containsKey,com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator.EntrySet.KeySet,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator.EntrySet.KeySet,remove --> removeInternalByKey,com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator.EntrySet.KeySet,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator.EntrySet.KeySet,clear --> clear,null,);
EndClass 306
StartClass 307
Class(com.google.gson.internal.LinkedTreeMap.Node,N,N,Protected);
Attribute(parent,com.google.gson.internal.Node,Public,N,N,);
Attribute(left,com.google.gson.internal.Node,Public,N,N,);
Attribute(right,com.google.gson.internal.Node,Public,N,N,);
Attribute(next,com.google.gson.internal.Node,Public,N,N,);
Attribute(prev,com.google.gson.internal.Node,Public,N,N,);
Attribute(key,com.google.gson.internal.K,Public,N,Y,);
Attribute(value,com.google.gson.internal.V,Public,N,N,);
Attribute(height,int,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getKey,com.google.gson.internal.K,Public,N,N);
Method(getValue,com.google.gson.internal.V,Public,N,N);
Method(setValue,com.google.gson.internal.V,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(first,com.google.gson.internal.Node,Public,N,N);
Method(last,com.google.gson.internal.Node,Public,N,N);
Parameter(<init>$2,com.google.gson.internal.Node,);
Parameter(<init>$2,com.google.gson.internal.K,);
Parameter(<init>$2,com.google.gson.internal.Node,);
Parameter(<init>$2,com.google.gson.internal.Node,);
Parameter(setValue,com.google.gson.internal.V,);
Parameter(equals,java.lang.Object,);
Realization(com.google.gson.internal.Entry);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap.Node,<init> --> key,com.google.gson.internal.K,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap.Node,<init> --> next,com.google.gson.internal.Node,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap.Node,<init> --> prev,com.google.gson.internal.Node,READ);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap.Node,<init> --> prev,com.google.gson.internal.Node,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap.Node,<init>$2 --> parent,com.google.gson.internal.Node,READ);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap.Node,<init>$2 --> key,com.google.gson.internal.K,READ);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap.Node,<init>$2 --> next,com.google.gson.internal.Node,READ);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap.Node,<init>$2 --> prev,com.google.gson.internal.Node,READ);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap.Node,setValue --> value,com.google.gson.internal.V,READ);
Call(METHOD,com.google.gson.internal.LinkedTreeMap.Node,equals --> getKey,com.google.gson.internal.Entry,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap.Node,equals --> equals,com.google.gson.internal.K,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap.Node,equals --> getKey,com.google.gson.internal.Entry,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap.Node,equals --> getValue,com.google.gson.internal.Entry,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap.Node,equals --> equals,com.google.gson.internal.V,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap.Node,equals --> getValue,com.google.gson.internal.Entry,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap.Node,hashCode --> hashCode,com.google.gson.internal.K,);
Call(METHOD,com.google.gson.internal.LinkedTreeMap.Node,hashCode --> hashCode,com.google.gson.internal.V,);
EndClass 307
StartClass 308
Class(com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator,N,Y,Private);
Attribute(next,com.google.gson.internal.Node,Public,N,N,);
Attribute(lastReturned,com.google.gson.internal.Node,Public,N,N,);
Attribute(expectedModCount,int,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(hasNext,boolean,Public,N,N);
Method(nextNode,com.google.gson.internal.Node,Public,N,N);
Method(remove,void,Public,N,N);
Realization(com.google.gson.internal.Iterator);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator,nextNode --> next,com.google.gson.internal.Node,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator,nextNode --> lastReturned,com.google.gson.internal.Node,WRITE);
Call(METHOD,com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator,remove --> removeInternal,com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator,);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator,remove --> lastReturned,com.google.gson.internal.Node,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.LinkedTreeMap.Node.LinkedTreeMapIterator,remove --> expectedModCount,int,WRITE);
EndClass 308
StartClass 309
Class(com.google.gson.internal.PreJava9DateFormatProvider,N,N,Public);
Method(getUSDateFormat,java.text.DateFormat,Public,Y,N);
Method(getUSDateTimeFormat,java.text.DateFormat,Public,Y,N);
Method(getDateFormatPattern,java.lang.String,Private,Y,N);
Method(getDatePartOfDateTimePattern,java.lang.String,Private,Y,N);
Method(getTimePartOfDateTimePattern,java.lang.String,Private,Y,N);
Method(<init>,void,Public,N,N);
Parameter(getUSDateFormat,int,);
Parameter(getUSDateTimeFormat,int,);
Parameter(getUSDateTimeFormat,int,);
Parameter(getDateFormatPattern,int,);
Parameter(getDatePartOfDateTimePattern,int,);
Parameter(getTimePartOfDateTimePattern,int,);
Call(METHOD,com.google.gson.internal.PreJava9DateFormatProvider,getUSDateFormat --> getDateFormatPattern,com.google.gson.internal.PreJava9DateFormatProvider,);
Call(METHOD,com.google.gson.internal.PreJava9DateFormatProvider,getUSDateTimeFormat --> getDatePartOfDateTimePattern,com.google.gson.internal.PreJava9DateFormatProvider,);
Call(METHOD,com.google.gson.internal.PreJava9DateFormatProvider,getUSDateTimeFormat --> getTimePartOfDateTimePattern,com.google.gson.internal.PreJava9DateFormatProvider,);
EndClass 309
StartClass 310
Class(com.google.gson.internal.Primitives,N,N,Public);
Attribute(PRIMITIVE_TO_WRAPPER_TYPE,java.util.Map,Private,Y,Y,);
Attribute(WRAPPER_TO_PRIMITIVE_TYPE,java.util.Map,Private,Y,Y,);
Method(<init>,void,Private,N,N);
Method(add,void,Private,Y,N);
Method(isPrimitive,boolean,Public,Y,N);
Method(isWrapperType,boolean,Public,Y,N);
Method(wrap,java.lang.Class,Public,N,N);
Method(unwrap,java.lang.Class,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(add,java.util.Map,);
Parameter(add,java.util.Map,);
Parameter(add,java.lang.Class,);
Parameter(add,java.lang.Class,);
Parameter(isPrimitive,java.lang.reflect.Type,);
Parameter(isWrapperType,java.lang.reflect.Type,);
Parameter(wrap,java.lang.Class,);
Parameter(unwrap,java.lang.Class,);
Call(METHOD,com.google.gson.internal.Primitives,<init> --> add,com.google.gson.internal.Primitives,);
Call(METHOD,com.google.gson.internal.Primitives,<init> --> add,com.google.gson.internal.Primitives,);
Call(METHOD,com.google.gson.internal.Primitives,<init> --> add,com.google.gson.internal.Primitives,);
Call(METHOD,com.google.gson.internal.Primitives,<init> --> add,com.google.gson.internal.Primitives,);
Call(METHOD,com.google.gson.internal.Primitives,<init> --> add,com.google.gson.internal.Primitives,);
Call(METHOD,com.google.gson.internal.Primitives,<init> --> add,com.google.gson.internal.Primitives,);
Call(METHOD,com.google.gson.internal.Primitives,<init> --> add,com.google.gson.internal.Primitives,);
Call(METHOD,com.google.gson.internal.Primitives,<init> --> add,com.google.gson.internal.Primitives,);
Call(METHOD,com.google.gson.internal.Primitives,<init> --> add,com.google.gson.internal.Primitives,);
Call(METHOD,com.google.gson.internal.Primitives,<init> --> unmodifiableMap,null,);
Call(METHOD,com.google.gson.internal.Primitives,<init> --> unmodifiableMap,null,);
Call(ATTRIBUTE,com.google.gson.internal.Primitives,<init> --> PRIMITIVE_TO_WRAPPER_TYPE,java.util.Map,WRITE);
Call(ATTRIBUTE,com.google.gson.internal.Primitives,<init> --> WRAPPER_TO_PRIMITIVE_TYPE,java.util.Map,WRITE);
Call(METHOD,com.google.gson.internal.Primitives,add --> put,java.util.Map,);
Call(METHOD,com.google.gson.internal.Primitives,add --> put,java.util.Map,);
Call(METHOD,com.google.gson.internal.Primitives,isPrimitive --> containsKey,java.util.Map,);
Call(METHOD,com.google.gson.internal.Primitives,isWrapperType --> containsKey,java.util.Map,);
Call(METHOD,com.google.gson.internal.Primitives,isWrapperType --> checkNotNull,null,);
Call(METHOD,com.google.gson.internal.Primitives,wrap --> get,java.util.Map,);
Call(METHOD,com.google.gson.internal.Primitives,wrap --> checkNotNull,null,);
Call(METHOD,com.google.gson.internal.Primitives,unwrap --> get,java.util.Map,);
Call(METHOD,com.google.gson.internal.Primitives,unwrap --> checkNotNull,null,);
EndClass 310
StartClass 311
Class(com.google.gson.internal.Streams,N,N,Public);
Method(<init>,void,Private,N,N);
Method(parse,com.google.gson.JsonElement,Public,Y,N);
Method(write,void,Public,Y,N);
Method(writerForAppendable,java.io.Writer,Public,Y,N);
Parameter(parse,com.google.gson.stream.JsonReader,);
Parameter(write,com.google.gson.JsonElement,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(writerForAppendable,java.lang.Appendable,);
Call(METHOD,com.google.gson.internal.Streams,parse --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.internal.Streams,parse --> read,null,);
Call(METHOD,com.google.gson.internal.Streams,write --> write,null,);
EndClass 311
StartClass 312
Class(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite,N,N,Protected);
Attribute(chars,com.google.gson.internal.char[],Public,N,N,);
Method(length,int,Public,N,N);
Method(charAt,com.google.gson.internal.char,Public,N,N);
Method(subSequence,java.lang.CharSequence,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(charAt,int,);
Parameter(subSequence,int,);
Parameter(subSequence,int,);
Realization(java.lang.CharSequence);
EndClass 312
StartClass 313
Class(java.lang.CharSequence,Y,Y,Public);
EndClass 313
StartClass 314
Class(com.google.gson.reflect.TypeToken,N,N,Public);
Attribute(rawType,java.lang.Class,Public,N,Y,);
Attribute(type,java.lang.reflect.Type,Public,N,Y,);
Attribute(hashCode,int,Public,N,Y,);
Method(<init>,void,Protected,N,N);
Method(<init>$2,void,Public,N,N);
Method(getSuperclassTypeParameter,java.lang.reflect.Type,Public,Y,N);
Method(getRawType,java.lang.Class,Public,N,N);
Method(getType,java.lang.reflect.Type,Public,N,N);
Method(isAssignableFrom,boolean,Public,N,N);
Method(isAssignableFrom$2,boolean,Public,N,N);
Method(isAssignableFrom$3,boolean,Public,N,N);
Method(isAssignableFrom$4,boolean,Private,Y,N);
Method(isAssignableFrom$5,boolean,Private,Y,N);
Method(typeEquals,boolean,Private,Y,N);
Method(buildUnexpectedTypeError,java.lang.AssertionError,Private,Y,N);
Method(matches,boolean,Private,Y,N);
Method(hashCode,int,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(get,com.google.gson.reflect.TypeToken,Public,Y,N);
Method(get$2,com.google.gson.reflect.TypeToken,Public,N,N);
Method(getParameterized,com.google.gson.reflect.TypeToken,Public,Y,N);
Method(getArray,com.google.gson.reflect.TypeToken,Public,Y,N);
Parameter(<init>$2,java.lang.reflect.Type,);
Parameter(getSuperclassTypeParameter,java.lang.Class,);
Parameter(isAssignableFrom,java.lang.Class,);
Parameter(isAssignableFrom$2,java.lang.reflect.Type,);
Parameter(isAssignableFrom$3,com.google.gson.reflect.TypeToken,);
Parameter(isAssignableFrom$4,java.lang.reflect.Type,);
Parameter(isAssignableFrom$4,java.lang.reflect.GenericArrayType,);
Parameter(isAssignableFrom$5,java.lang.reflect.Type,);
Parameter(isAssignableFrom$5,java.lang.reflect.ParameterizedType,);
Parameter(isAssignableFrom$5,java.util.Map,);
Parameter(typeEquals,java.lang.reflect.ParameterizedType,);
Parameter(typeEquals,java.lang.reflect.ParameterizedType,);
Parameter(typeEquals,java.util.Map,);
Parameter(buildUnexpectedTypeError,java.lang.reflect.Type,);
Parameter(matches,java.lang.reflect.Type,);
Parameter(matches,java.lang.reflect.Type,);
Parameter(matches,java.util.Map,);
Parameter(equals,java.lang.Object,);
Parameter(get,java.lang.reflect.Type,);
Parameter(get$2,java.lang.Class,);
Parameter(getParameterized,java.lang.reflect.Type,);
Parameter(getArray,java.lang.reflect.Type,);
Call(METHOD,com.google.gson.reflect.TypeToken,<init> --> getSuperclassTypeParameter,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.reflect.TypeToken,<init> --> getClass,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.reflect.TypeToken,<init> --> getRawType,null,);
Call(METHOD,com.google.gson.reflect.TypeToken,<init> --> hashCode,java.lang.reflect.Type,);
Call(ATTRIBUTE,com.google.gson.reflect.TypeToken,<init> --> type,java.lang.reflect.Type,READ);
Call(METHOD,com.google.gson.reflect.TypeToken,<init>$2 --> canonicalize,null,);
Call(METHOD,com.google.gson.reflect.TypeToken,<init>$2 --> checkNotNull,null,);
Call(METHOD,com.google.gson.reflect.TypeToken,<init>$2 --> getRawType,null,);
Call(METHOD,com.google.gson.reflect.TypeToken,<init>$2 --> hashCode,null,);
Call(METHOD,com.google.gson.reflect.TypeToken,getSuperclassTypeParameter --> getGenericSuperclass,java.lang.Class,);
Call(METHOD,com.google.gson.reflect.TypeToken,getSuperclassTypeParameter --> canonicalize,null,);
Call(METHOD,com.google.gson.reflect.TypeToken,getSuperclassTypeParameter --> getActualTypeArguments,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom --> isAssignableFrom,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$2 --> equals,java.lang.reflect.Type,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$2 --> isAssignableFrom,java.lang.Class,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$2 --> getRawType,null,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$2 --> isAssignableFrom,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$2 --> isAssignableFrom,java.lang.Class,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$2 --> getRawType,null,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$2 --> isAssignableFrom,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$2 --> buildUnexpectedTypeError,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$3 --> isAssignableFrom,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$3 --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$4 --> getGenericComponentType,java.lang.reflect.GenericArrayType,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$4 --> getGenericComponentType,java.lang.reflect.GenericArrayType,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$4 --> isArray,java.lang.Class,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$4 --> getComponentType,java.lang.Class,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$4 --> isAssignableFrom,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$5 --> equals,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$5 --> getRawType,null,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$5 --> getActualTypeArguments,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$5 --> getTypeParameters,java.lang.Class,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$5 --> get,java.util.Map,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$5 --> getName,java.lang.reflect.TypeVariable,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$5 --> put,java.util.Map,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$5 --> getName,java.lang.reflect.TypeVariable,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$5 --> typeEquals,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$5 --> getGenericInterfaces,java.lang.Class,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$5 --> isAssignableFrom,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$5 --> getGenericSuperclass,java.lang.Class,);
Call(METHOD,com.google.gson.reflect.TypeToken,isAssignableFrom$5 --> isAssignableFrom,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.reflect.TypeToken,typeEquals --> getRawType,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.reflect.TypeToken,typeEquals --> equals,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.reflect.TypeToken,typeEquals --> getRawType,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.reflect.TypeToken,typeEquals --> getActualTypeArguments,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.reflect.TypeToken,typeEquals --> getActualTypeArguments,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.reflect.TypeToken,typeEquals --> matches,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.reflect.TypeToken,buildUnexpectedTypeError --> append,com.google.gson.reflect.StringBuilder,);
Call(METHOD,com.google.gson.reflect.TypeToken,buildUnexpectedTypeError --> getName,null,);
Call(METHOD,com.google.gson.reflect.TypeToken,buildUnexpectedTypeError --> append,com.google.gson.reflect.StringBuilder,);
Call(METHOD,com.google.gson.reflect.TypeToken,buildUnexpectedTypeError --> append,com.google.gson.reflect.StringBuilder,);
Call(METHOD,com.google.gson.reflect.TypeToken,buildUnexpectedTypeError --> append,com.google.gson.reflect.StringBuilder,);
Call(METHOD,com.google.gson.reflect.TypeToken,buildUnexpectedTypeError --> getClass,java.lang.reflect.Type,);
Call(METHOD,com.google.gson.reflect.TypeToken,buildUnexpectedTypeError --> getName,java.lang.reflect.Type,);
Call(METHOD,com.google.gson.reflect.TypeToken,buildUnexpectedTypeError --> append,com.google.gson.reflect.StringBuilder,);
Call(METHOD,com.google.gson.reflect.TypeToken,buildUnexpectedTypeError --> append,com.google.gson.reflect.StringBuilder,);
Call(METHOD,com.google.gson.reflect.TypeToken,buildUnexpectedTypeError --> toString,java.lang.reflect.Type,);
Call(METHOD,com.google.gson.reflect.TypeToken,buildUnexpectedTypeError --> append,com.google.gson.reflect.StringBuilder,);
Call(METHOD,com.google.gson.reflect.TypeToken,buildUnexpectedTypeError --> toString,com.google.gson.reflect.StringBuilder,);
Call(METHOD,com.google.gson.reflect.TypeToken,matches --> equals,java.lang.reflect.Type,);
Call(METHOD,com.google.gson.reflect.TypeToken,matches --> equals,java.lang.reflect.Type,);
Call(METHOD,com.google.gson.reflect.TypeToken,matches --> get,java.util.Map,);
Call(METHOD,com.google.gson.reflect.TypeToken,matches --> getName,java.lang.reflect.TypeVariable,);
Call(METHOD,com.google.gson.reflect.TypeToken,equals --> equals,null,);
Call(METHOD,com.google.gson.reflect.TypeToken,toString --> typeToString,null,);
Call(METHOD,com.google.gson.reflect.TypeToken,getParameterized --> newParameterizedTypeWithOwner,null,);
Call(METHOD,com.google.gson.reflect.TypeToken,getArray --> arrayOf,null,);
EndClass 314
StartClass 315
Class(com.google.gson.stream.JsonScope,N,N,Public);
Attribute(EMPTY_ARRAY,int,Public,Y,Y,);
Attribute(NONEMPTY_ARRAY,int,Public,Y,Y,);
Attribute(EMPTY_OBJECT,int,Public,Y,Y,);
Attribute(DANGLING_NAME,int,Public,Y,Y,);
Attribute(NONEMPTY_OBJECT,int,Public,Y,Y,);
Attribute(EMPTY_DOCUMENT,int,Public,Y,Y,);
Attribute(NONEMPTY_DOCUMENT,int,Public,Y,Y,);
Attribute(CLOSED,int,Public,Y,Y,);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
EndClass 315
StartClass 316
Class(com.google.gson.internal.GsonBuildConfig,N,N,Public);
Attribute(VERSION,java.lang.String,Public,Y,Y,);
Method(<init>,void,Private,N,N);
Method(<clinit>,void,Public,Y,N);
EndClass 316
StartClass 317
Class(com.google.gson.common.MoreAsserts,N,N,Public);
Method(assertEquals,void,Public,Y,N);
Method(assertEquals$2,void,Public,Y,N);
Method(assertContains,void,Public,N,N);
Method(assertEqualsAndHashCode,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(assertEquals,int[],);
Parameter(assertEquals,int[],);
Parameter(assertEquals$2,java.lang.Integer[],);
Parameter(assertEquals$2,java.lang.Integer[],);
Parameter(assertContains,java.util.Collection,);
Parameter(assertContains,com.google.gson.common.T,);
Parameter(assertEqualsAndHashCode,java.lang.Object,);
Parameter(assertEqualsAndHashCode,java.lang.Object,);
Call(METHOD,com.google.gson.common.MoreAsserts,assertEquals --> assertNull,null,);
Call(METHOD,com.google.gson.common.MoreAsserts,assertEquals --> assertEquals,null,);
Call(METHOD,com.google.gson.common.MoreAsserts,assertEquals --> assertEquals,null,);
Call(METHOD,com.google.gson.common.MoreAsserts,assertEquals$2 --> assertNull,null,);
Call(METHOD,com.google.gson.common.MoreAsserts,assertEquals$2 --> assertEquals,null,);
Call(METHOD,com.google.gson.common.MoreAsserts,assertEquals$2 --> assertEquals,null,);
Call(METHOD,com.google.gson.common.MoreAsserts,assertContains --> equals,null,);
Call(METHOD,com.google.gson.common.MoreAsserts,assertContains --> fail,null,);
Call(METHOD,com.google.gson.common.MoreAsserts,assertEqualsAndHashCode --> assertTrue,null,);
Call(METHOD,com.google.gson.common.MoreAsserts,assertEqualsAndHashCode --> equals,java.lang.Object,);
Call(METHOD,com.google.gson.common.MoreAsserts,assertEqualsAndHashCode --> assertTrue,null,);
Call(METHOD,com.google.gson.common.MoreAsserts,assertEqualsAndHashCode --> equals,java.lang.Object,);
Call(METHOD,com.google.gson.common.MoreAsserts,assertEqualsAndHashCode --> assertEquals,null,);
Call(METHOD,com.google.gson.common.MoreAsserts,assertEqualsAndHashCode --> hashCode,java.lang.Object,);
Call(METHOD,com.google.gson.common.MoreAsserts,assertEqualsAndHashCode --> hashCode,java.lang.Object,);
Call(METHOD,com.google.gson.common.MoreAsserts,assertEqualsAndHashCode --> assertFalse,null,);
Call(METHOD,com.google.gson.common.MoreAsserts,assertEqualsAndHashCode --> equals,java.lang.Object,);
Call(METHOD,com.google.gson.common.MoreAsserts,assertEqualsAndHashCode --> assertFalse,null,);
Call(METHOD,com.google.gson.common.MoreAsserts,assertEqualsAndHashCode --> equals,java.lang.Object,);
EndClass 317
StartClass 318
Class(com.google.gson.common.TestTypes,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 318
StartClass 319
Class(com.google.gson.common.TestTypes.Base.Sub,N,N,Public);
Attribute(SUB_NAME,java.lang.String,Public,Y,Y,);
Attribute(SUB_FIELD_KEY,java.lang.String,Public,Y,Y,);
Attribute(subName,java.lang.String,Public,N,Y,);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
SuperClass(com.google.gson.common.Base);
Generalization(com.google.gson.common.Base);
EndClass 319
StartClass 320
Class(com.google.gson.common.Base,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.common.TestTypes.Base.Sub);
EndClass 320
StartClass 321
Class(com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField,N,N,Public);
Attribute(FIELD_KEY,java.lang.String,Public,Y,Y,);
Attribute(base,com.google.gson.common.Base,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,com.google.gson.common.Base,);
Composition(com.google.gson.common.Base);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField,<init> --> base,com.google.gson.common.Base,READ);
EndClass 321
StartClass 322
Class(com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField,N,N,Public);
Attribute(FIELD_KEY,java.lang.String,Public,Y,Y,);
Attribute(base,com.google.gson.common.Base[],Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,com.google.gson.common.Base[],);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField,<init> --> base,com.google.gson.common.Base[],READ);
EndClass 322
StartClass 323
Class(com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField,N,N,Public);
Attribute(FIELD_KEY,java.lang.String,Public,Y,Y,);
Attribute(base,java.util.Collection,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,java.util.Collection,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField,<init> --> getSimpleName,null,);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField,<init> --> base,java.util.Collection,READ);
EndClass 323
StartClass 324
Class(com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer,N,N,Public);
Attribute(NAME,java.lang.String,Public,Y,Y,);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(serialize,com.google.gson.common.Base,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Realization(com.google.gson.common.JsonSerializer);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer,serialize --> addProperty,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer,serialize --> getSimpleName,null,);
EndClass 324
StartClass 325
Class(com.google.gson.common.JsonSerializer,Y,Y,Public);
EndClass 325
StartClass 326
Class(com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer,N,N,Public);
Attribute(NAME,java.lang.String,Public,Y,Y,);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(serialize,com.google.gson.common.Sub,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Realization(com.google.gson.common.JsonSerializer);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer,serialize --> addProperty,com.google.gson.JsonObject,);
EndClass 326
StartClass 327
Class(com.google.gson.common.Sub,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 327
StartClass 328
Class(com.google.gson.common.JsonSerializer,Y,Y,Public);
EndClass 328
StartClass 329
Class(com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper,N,N,Public);
Attribute(someConstantStringInstanceField,java.lang.String,Public,N,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper,<init> --> someConstantStringInstanceField,java.lang.String,WRITE);
EndClass 329
StartClass 330
Class(com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,N,N,Public);
Attribute(DEFAULT_VALUE,long,Public,Y,Y,);
Attribute(longValue,long,Public,N,N,);
Attribute(intValue,int,Public,N,N,);
Attribute(booleanValue,boolean,Public,N,N,);
Attribute(stringValue,java.lang.String,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getIntValue,int,Public,N,N);
Method(getExpectedJson,java.lang.String,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>$2,long,);
Parameter(<init>$2,int,);
Parameter(<init>$2,boolean,);
Parameter(<init>$2,java.lang.String,);
Parameter(equals,java.lang.Object,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,<init> --> <init>$2,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,<init>$2 --> longValue,long,READ);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,<init>$2 --> intValue,int,READ);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,<init>$2 --> booleanValue,boolean,READ);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,<init>$2 --> stringValue,java.lang.String,READ);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,getExpectedJson --> toString,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,hashCode --> hashCode,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,hashCode --> intValue,int,READ);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,equals --> getClass,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,equals --> getClass,java.lang.Object,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,equals --> equals,java.lang.String,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives,toString --> format,null,);
EndClass 330
StartClass 331
Class(com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers,N,N,Public);
Attribute(longValue,java.lang.Long,Private,N,Y,);
Attribute(intValue,java.lang.Integer,Private,N,Y,);
Attribute(booleanValue,java.lang.Boolean,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(getExpectedJson,java.lang.String,Public,N,N);
Parameter(<init>,java.lang.Long,);
Parameter(<init>,java.lang.Integer,);
Parameter(<init>,java.lang.Boolean,);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers,<init> --> longValue,java.lang.Long,READ);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers,<init> --> intValue,java.lang.Integer,READ);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers,<init> --> booleanValue,java.lang.Boolean,READ);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers,getExpectedJson --> toString,com.google.gson.common.StringBuilder,);
EndClass 331
StartClass 332
Class(com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray,N,N,Public);
Attribute(longArray,long[],Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getExpectedJson,java.lang.String,Public,N,N);
Parameter(<init>$2,long[],);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray,<init> --> this,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray,);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray,<init>$2 --> longArray,long[],READ);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray,getExpectedJson --> toString,com.google.gson.common.StringBuilder,);
EndClass 332
StartClass 333
Class(com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields,N,N,Public);
Method(equals,boolean,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(equals,java.lang.Object,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields,equals --> getClass,java.lang.Object,);
EndClass 333
StartClass 334
Class(com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested,N,N,Public);
Attribute(primitive1,com.google.gson.common.BagOfPrimitives,Private,N,Y,);
Attribute(primitive2,com.google.gson.common.BagOfPrimitives,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getExpectedJson,java.lang.String,Public,N,N);
Method(appendFields,void,Public,N,N);
Parameter(<init>$2,com.google.gson.common.BagOfPrimitives,);
Parameter(<init>$2,com.google.gson.common.BagOfPrimitives,);
Parameter(appendFields,com.google.gson.common.StringBuilder,);
Composition(com.google.gson.common.BagOfPrimitives);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested,<init> --> <init>$2,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested,);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested,<init>$2 --> primitive1,com.google.gson.common.BagOfPrimitives,READ);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested,<init>$2 --> primitive2,com.google.gson.common.BagOfPrimitives,READ);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested,getExpectedJson --> appendFields,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested,getExpectedJson --> toString,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested,appendFields --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested,appendFields --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested,appendFields --> getExpectedJson,com.google.gson.common.BagOfPrimitives,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested,appendFields --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested,appendFields --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested,appendFields --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested,appendFields --> getExpectedJson,com.google.gson.common.BagOfPrimitives,);
EndClass 334
StartClass 335
Class(com.google.gson.common.BagOfPrimitives,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 335
StartClass 336
Class(com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields,N,N,Public);
Attribute(transientT,com.google.gson.common.T,Public,N,N,);
Attribute(transientLongValue,long,Public,N,Y,);
Attribute(longValue,long[],Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getExpectedJson,java.lang.String,Public,N,N);
Parameter(<init>$2,long,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields,<init> --> this,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields,);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields,<init>$2 --> longValue,long[],WRITE);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields,<init>$2 --> transientLongValue,long,WRITE);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields,getExpectedJson --> toString,com.google.gson.common.StringBuilder,);
EndClass 336
StartClass 337
Class(com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter,N,N,Public);
Attribute(bag,com.google.gson.common.BagOfPrimitives,Private,N,Y,);
Attribute(value,int,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(getBag,com.google.gson.common.BagOfPrimitives,Public,N,N);
Method(getExpectedJson,java.lang.String,Public,N,N);
Method(getValue,int,Public,N,N);
Parameter(<init>$2,int,);
Parameter(<init>$3,com.google.gson.common.BagOfPrimitives,);
Parameter(<init>$3,int,);
Composition(com.google.gson.common.BagOfPrimitives);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter,<init> --> <init>$3,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter,<init>$2 --> <init>$3,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter,);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter,<init>$3 --> bag,com.google.gson.common.BagOfPrimitives,READ);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter,<init>$3 --> value,int,READ);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter,getExpectedJson --> getExpectedJson,com.google.gson.common.BagOfPrimitives,);
EndClass 337
StartClass 338
Class(com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter.ArrayOfObjects,N,N,Public);
Attribute(elements,com.google.gson.common.BagOfPrimitives[],Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(getExpectedJson,java.lang.String,Public,N,N);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter.ArrayOfObjects,<init> --> elements,com.google.gson.common.BagOfPrimitives[],WRITE);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter.ArrayOfObjects,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter.ArrayOfObjects,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter.ArrayOfObjects,getExpectedJson --> getExpectedJson,null,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter.ArrayOfObjects,getExpectedJson --> append,com.google.gson.common.StringBuilder,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter.ArrayOfObjects,getExpectedJson --> toString,com.google.gson.common.StringBuilder,);
EndClass 338
StartClass 339
Class(com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter.ArrayOfObjects.ClassOverridingEquals,N,N,Public);
Attribute(ref,com.google.gson.common.ClassOverridingEquals,Public,N,N,);
Method(getExpectedJson,java.lang.String,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(equals,java.lang.Object,);
Composition(com.google.gson.common.ClassOverridingEquals);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter.ArrayOfObjects.ClassOverridingEquals,getExpectedJson --> getExpectedJson,com.google.gson.common.ClassOverridingEquals,);
EndClass 339
StartClass 340
Class(com.google.gson.common.ClassOverridingEquals,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 340
StartClass 341
Class(com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter.ArrayOfObjects.ClassOverridingEquals.ClassWithArray,N,N,Public);
Attribute(array,java.lang.Object[],Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>$2,java.lang.Object[],);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter.ArrayOfObjects.ClassOverridingEquals.ClassWithArray,<init> --> array,java.lang.Object[],WRITE);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter.ArrayOfObjects.ClassOverridingEquals.ClassWithArray,<init>$2 --> array,java.lang.Object[],READ);
EndClass 341
StartClass 342
Class(com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter.ArrayOfObjects.ClassOverridingEquals.ClassWithArray.ClassWithObjects,N,N,Public);
Attribute(bag,com.google.gson.common.BagOfPrimitives,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>$2,com.google.gson.common.BagOfPrimitives,);
Composition(com.google.gson.common.BagOfPrimitives);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter.ArrayOfObjects.ClassOverridingEquals.ClassWithArray.ClassWithObjects,<init> --> <init>$2,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter.ArrayOfObjects.ClassOverridingEquals.ClassWithArray.ClassWithObjects,);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter.ArrayOfObjects.ClassOverridingEquals.ClassWithArray.ClassWithObjects,<init>$2 --> bag,com.google.gson.common.BagOfPrimitives,READ);
EndClass 342
StartClass 343
Class(com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter.ArrayOfObjects.ClassOverridingEquals.ClassWithArray.ClassWithObjects.ClassWithSerializedNameFields,N,N,Public);
Attribute(f,int,Public,N,Y,);
Attribute(g,int,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getExpectedJson,java.lang.String,Public,N,N);
Parameter(<init>$2,int,);
Parameter(<init>$2,int,);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter.ArrayOfObjects.ClassOverridingEquals.ClassWithArray.ClassWithObjects.ClassWithSerializedNameFields,<init> --> <init>$2,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter.ArrayOfObjects.ClassOverridingEquals.ClassWithArray.ClassWithObjects.ClassWithSerializedNameFields,);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter.ArrayOfObjects.ClassOverridingEquals.ClassWithArray.ClassWithObjects.ClassWithSerializedNameFields,<init>$2 --> f,int,READ);
Call(ATTRIBUTE,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter.ArrayOfObjects.ClassOverridingEquals.ClassWithArray.ClassWithObjects.ClassWithSerializedNameFields,<init>$2 --> g,int,READ);
EndClass 343
StartClass 344
Class(com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter.ArrayOfObjects.ClassOverridingEquals.ClassWithArray.ClassWithObjects.ClassWithSerializedNameFields.CrazyLongTypeAdapter,N,N,Public);
Attribute(DIFFERENCE,long,Public,Y,Y,);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(deserialize,java.lang.Long,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(serialize,java.lang.Long,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
Realization(com.google.gson.common.JsonSerializer);
Realization(com.google.gson.common.JsonDeserializer);
Call(METHOD,com.google.gson.common.TestTypes.Base.Sub.ClassWithBaseField.ClassWithBaseArrayField.ClassWithBaseCollectionField.BaseSerializer.SubSerializer.StringWrapper.BagOfPrimitives.BagOfPrimitiveWrappers.PrimitiveArray.ClassWithNoFields.Nested.ClassWithTransientFields.ClassWithCustomTypeConverter.ArrayOfObjects.ClassOverridingEquals.ClassWithArray.ClassWithObjects.ClassWithSerializedNameFields.CrazyLongTypeAdapter,deserialize --> getAsLong,com.google.gson.JsonElement,);
EndClass 344
StartClass 345
Class(com.google.gson.common.JsonSerializer,Y,Y,Public);
EndClass 345
StartClass 346
Class(com.google.gson.common.JsonDeserializer,Y,Y,Public);
EndClass 346
StartClass 347
Class(com.google.gson.ExposeAnnotationExclusionStrategyTest.MockObject,N,N,Private);
Attribute(exposedField,int,Public,N,Y,);
Attribute(explicitlyExposedField,int,Public,N,Y,);
Attribute(explicitlyHiddenField,int,Public,N,Y,);
Attribute(explicitlyDifferentModeField,int,Public,N,Y,);
Attribute(hiddenField,int,Public,N,Y,);
Method(<init>,void,Public,N,N);
EndClass 347
StartClass 348
Class(com.google.gson.FieldAttributesTest.Foo,N,N,Private);
Attribute(bar,java.util.List,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 348
StartClass 349
Class(com.google.gson.functional.CircularReferenceTest.ContainsReferenceToSelfType,N,N,Private);
Attribute(children,java.util.Collection,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 349
StartClass 350
Class(com.google.gson.functional.CircularReferenceTest.ContainsReferenceToSelfType.ClassWithSelfReference,N,N,Private);
Attribute(child,com.google.gson.functional.ClassWithSelfReference,Public,N,N,);
Method(<init>,void,Public,N,N);
Composition(com.google.gson.functional.ClassWithSelfReference);
EndClass 350
StartClass 351
Class(com.google.gson.functional.CircularReferenceTest.ContainsReferenceToSelfType.ClassWithSelfReference.ClassWithSelfReferenceArray,N,N,Private);
Attribute(children,com.google.gson.functional.ClassWithSelfReferenceArray[],Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 351
StartClass 352
Class(com.google.gson.functional.CollectionTest.HasArrayListField,N,N,Protected);
Attribute(longs,java.util.ArrayList,Public,N,N,);
Method(toIntArray,int[],Private,Y,N);
Method(<init>,void,Public,N,N);
Parameter(toIntArray,java.util.Collection,);
Call(METHOD,com.google.gson.functional.CollectionTest.HasArrayListField,toIntArray --> size,java.util.Collection,);
Call(METHOD,com.google.gson.functional.CollectionTest.HasArrayListField,toIntArray --> iterator,java.util.Collection,);
Call(METHOD,com.google.gson.functional.CollectionTest.HasArrayListField,toIntArray --> hasNext,java.util.Iterator,);
Call(METHOD,com.google.gson.functional.CollectionTest.HasArrayListField,toIntArray --> next,java.util.Iterator,);
Call(METHOD,com.google.gson.functional.CollectionTest.HasArrayListField,toIntArray --> intValue,java.lang.Integer,);
Call(METHOD,com.google.gson.functional.CollectionTest.HasArrayListField,toIntArray --> intValue,java.lang.Long,);
EndClass 352
StartClass 353
Class(com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection,N,N,Private);
Attribute(collection,java.util.Collection,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(getCollection,java.util.Collection,Public,N,N);
Parameter(<init>,java.util.Collection,);
Call(ATTRIBUTE,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection,<init> --> collection,java.util.Collection,READ);
EndClass 353
StartClass 354
Class(com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry,N,N,Private);
Attribute(value,int,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(testSetSerialization,void,Public,N,N);
Method(testSetDeserialization,void,Public,N,N);
Parameter(<init>,int,);
Call(ATTRIBUTE,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry,<init> --> value,int,READ);
Call(METHOD,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry,testSetSerialization --> add,java.util.Set,);
Call(METHOD,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry,testSetSerialization --> add,java.util.Set,);
Call(METHOD,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry,testSetSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry,testSetSerialization --> assertTrue,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry,);
Call(METHOD,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry,testSetSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry,testSetSerialization --> assertTrue,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry,);
Call(METHOD,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry,testSetSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry,testSetDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry,testSetDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry,testSetDeserialization --> assertEquals,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry,);
Call(METHOD,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry,testSetDeserialization --> size,java.util.Set,);
Call(METHOD,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry,testSetDeserialization --> assertTrue,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry,);
EndClass 354
StartClass 355
Class(com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry.BigClass,N,N,Private);
Attribute(inBig,java.util.Map,Private,N,N,);
Method(<init>,void,Public,N,N);
EndClass 355
StartClass 356
Class(com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry.BigClass.SmallClass,N,N,Private);
Attribute(inSmall,java.lang.String,Private,N,N,);
Method(testIssue1107,void,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry.BigClass.SmallClass,testIssue1107 --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry.BigClass.SmallClass,testIssue1107 --> get,com.google.gson.functional.BigClass,);
Call(METHOD,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry.BigClass.SmallClass,testIssue1107 --> get,com.google.gson.functional.BigClass,);
Call(METHOD,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry.BigClass.SmallClass,testIssue1107 --> assertNotNull,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry.BigClass.SmallClass,);
Call(METHOD,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry.BigClass.SmallClass,testIssue1107 --> assertEquals,com.google.gson.functional.CollectionTest.HasArrayListField.ObjectWithWildcardCollection.Entry.BigClass.SmallClass,);
EndClass 356
StartClass 357
Class(com.google.gson.functional.BigClass,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 357
StartClass 358
Class(com.google.gson.functional.ConcurrencyTest.MyObject,N,N,Private);
Attribute(a,java.lang.String,Public,N,N,);
Attribute(b,java.lang.String,Public,N,N,);
Attribute(i,int,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,int,);
Call(METHOD,com.google.gson.functional.ConcurrencyTest.MyObject,<init> --> <init>$2,com.google.gson.functional.ConcurrencyTest.MyObject,);
Call(ATTRIBUTE,com.google.gson.functional.ConcurrencyTest.MyObject,<init>$2 --> a,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.functional.ConcurrencyTest.MyObject,<init>$2 --> b,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.functional.ConcurrencyTest.MyObject,<init>$2 --> i,int,READ);
EndClass 358
StartClass 359
Class(com.google.gson.functional.CustomDeserializerTest.DataHolder,N,N,Private);
Attribute(data,java.lang.String,Private,N,Y,);
Method(<init>,void,Private,N,N);
Method(<init>$2,void,Public,N,N);
Method(getData,java.lang.String,Public,N,N);
Parameter(<init>$2,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.functional.CustomDeserializerTest.DataHolder,<init>$2 --> data,java.lang.String,READ);
EndClass 359
StartClass 360
Class(com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper,N,N,Private);
Attribute(wrappedData,com.google.gson.functional.DataHolder,Private,N,Y,);
Method(<init>,void,Private,N,N);
Method(<init>$2,void,Public,N,N);
Method(getWrappedData,com.google.gson.functional.DataHolder,Public,N,N);
Parameter(<init>$2,com.google.gson.functional.DataHolder,);
Composition(com.google.gson.functional.DataHolder);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper,<init> --> <init>$2,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper,);
EndClass 360
StartClass 361
Class(com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer,N,N,Private);
Method(deserialize,com.google.gson.functional.DataHolder,Public,N,N);
Method(testJsonTypeFieldBasedDeserialization,void,Public,N,N);
Method(deserialize$2,com.google.gson.functional.MyBase,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
Parameter(deserialize$2,com.google.gson.JsonElement,);
Parameter(deserialize$2,java.lang.reflect.Type,);
Parameter(deserialize$2,com.google.gson.JsonDeserializationContext,);
Realization(com.google.gson.functional.JsonDeserializer);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer,deserialize --> getAsJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer,deserialize --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer,deserialize --> getAsString,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer,testJsonTypeFieldBasedDeserialization --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer,deserialize$2 --> getAsJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer,deserialize$2 --> get,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer,deserialize$2 --> getAsString,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer,deserialize$2 --> deserialize,com.google.gson.JsonDeserializationContext,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer,deserialize$2 --> valueOf,null,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer,deserialize$2 --> getSubclass,null,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer,deserialize$2 --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer,deserialize$2 --> fromJson,null,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer,deserialize$2 --> assertEquals,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer,);
EndClass 361
StartClass 362
Class(com.google.gson.functional.MyBase,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1);
SubClass(com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2);
EndClass 362
StartClass 363
Class(com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1,N,N,Private);
Attribute(field1,java.lang.String,Public,N,N,);
Method(<init>,void,Public,N,N);
SuperClass(com.google.gson.functional.MyBase);
Generalization(com.google.gson.functional.MyBase);
EndClass 363
StartClass 364
Class(com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,N,N,Private);
Attribute(field2,java.lang.String,Public,N,N,);
Method(testCustomDeserializerReturnsNullForTopLevelObject,void,Public,N,N);
Method(deserialize,com.google.gson.common.TestTypes.Base,Public,N,N);
Method(testCustomDeserializerReturnsNull,void,Public,N,N);
Method(deserialize$2,com.google.gson.common.TestTypes.Base,Public,N,N);
Method(testCustomDeserializerReturnsNullForArrayElements,void,Public,N,N);
Method(deserialize$3,com.google.gson.common.TestTypes.Base,Public,N,N);
Method(testCustomDeserializerReturnsNullForArrayElementsForArrayField,void,Public,N,N);
Method(deserialize$4,com.google.gson.common.TestTypes.Base,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
Parameter(deserialize$2,com.google.gson.JsonElement,);
Parameter(deserialize$2,java.lang.reflect.Type,);
Parameter(deserialize$2,com.google.gson.JsonDeserializationContext,);
Parameter(deserialize$3,com.google.gson.JsonElement,);
Parameter(deserialize$3,java.lang.reflect.Type,);
Parameter(deserialize$3,com.google.gson.JsonDeserializationContext,);
Parameter(deserialize$4,com.google.gson.JsonElement,);
Parameter(deserialize$4,java.lang.reflect.Type,);
Parameter(deserialize$4,com.google.gson.JsonDeserializationContext,);
SuperClass(com.google.gson.functional.MyBase);
Generalization(com.google.gson.functional.MyBase);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,testCustomDeserializerReturnsNullForTopLevelObject --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,deserialize --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,deserialize --> fromJson,null,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,deserialize --> assertNull,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,testCustomDeserializerReturnsNull --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,deserialize$2 --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,deserialize$2 --> fromJson,null,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,deserialize$2 --> assertNull,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,testCustomDeserializerReturnsNullForArrayElements --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,deserialize$3 --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,deserialize$3 --> fromJson,null,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,deserialize$3 --> assertNull,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,deserialize$3 --> assertNull,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,testCustomDeserializerReturnsNullForArrayElementsForArrayField --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,deserialize$4 --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,deserialize$4 --> fromJson,null,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,deserialize$4 --> assertNull,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,);
Call(METHOD,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,deserialize$4 --> assertNull,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2,);
EndClass 364
StartClass 365
Class(com.google.gson.functional.JsonDeserializer,Y,Y,Public);
EndClass 365
StartClass 366
Class(com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase,N,N,Private);
Attribute(TYPE_ACCESS,java.lang.String,Public,Y,Y,);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
EndClass 366
StartClass 367
Class(com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes,N,N,Public);
Attribute(subClass,java.lang.reflect.Type,Private,N,Y,);
Method(<init>,void,Private,N,N);
Method(getSubclass,java.lang.reflect.Type,Public,N,N);
Parameter(<init>,java.lang.reflect.Type,);
Call(ATTRIBUTE,com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes,<init> --> subClass,java.lang.reflect.Type,READ);
EndClass 367
StartClass 368
Class(com.google.gson.functional.CustomDeserializerTest.DataHolder.DataHolderWrapper.DataHolderDeserializer.MyBase.SubTypes.SubType1.SubType2.ClassWithBaseArray,N,N,Private);
Attribute(bases,com.google.gson.common.TestTypes.Base[],Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 368
StartClass 369
Class(com.google.gson.functional.CustomTypeAdaptersTest.Base,N,N,Private);
Attribute(baseValue,int,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 369
StartClass 370
Class(com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo,N,N,Public);
Attribute(key,int,Private,N,Y,);
Attribute(value,long,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>$2,int,);
Parameter(<init>$2,long,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo,<init> --> this,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo,);
Call(ATTRIBUTE,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo,<init>$2 --> key,int,READ);
Call(ATTRIBUTE,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo,<init>$2 --> value,long,READ);
EndClass 370
StartClass 371
Class(com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,N,N,Public);
Method(deserialize,com.google.gson.functional.Foo,Public,N,N);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(testCustomSerializerInvokedForPrimitives,void,Public,N,N);
Method(serialize$2,com.google.gson.JsonElement,Public,N,N);
Method(testCustomDeserializerInvokedForPrimitives,void,Public,N,N);
Method(deserialize$2,java.lang.Object,Public,N,N);
Method(testCustomByteArraySerializer,void,Public,N,N);
Method(serialize$3,com.google.gson.JsonElement,Public,N,N);
Method(testCustomByteArrayDeserializerAndInstanceCreator,void,Public,N,N);
Method(deserialize$3,byte[],Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
Parameter(serialize,com.google.gson.functional.Foo,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Parameter(serialize$2,java.lang.Boolean,);
Parameter(serialize$2,java.lang.reflect.Type,);
Parameter(serialize$2,com.google.gson.JsonSerializationContext,);
Parameter(deserialize$2,com.google.gson.JsonElement,);
Parameter(deserialize$2,java.lang.reflect.Type,);
Parameter(deserialize$2,com.google.gson.JsonDeserializationContext,);
Parameter(serialize$3,byte[],);
Parameter(serialize$3,java.lang.reflect.Type,);
Parameter(serialize$3,com.google.gson.JsonSerializationContext,);
Parameter(deserialize$3,com.google.gson.JsonElement,);
Parameter(deserialize$3,java.lang.reflect.Type,);
Parameter(deserialize$3,com.google.gson.JsonDeserializationContext,);
Realization(com.google.gson.functional.JsonSerializer);
Realization(com.google.gson.functional.JsonDeserializer);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,deserialize --> deserialize,com.google.gson.JsonDeserializationContext,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,serialize --> serialize,com.google.gson.JsonSerializationContext,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,testCustomSerializerInvokedForPrimitives --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,serialize$2 --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,serialize$2 --> assertEquals,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,serialize$2 --> toJson,null,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,serialize$2 --> assertEquals,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,serialize$2 --> toJson,null,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,testCustomDeserializerInvokedForPrimitives --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,deserialize$2 --> getAsInt,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,deserialize$2 --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,deserialize$2 --> assertEquals,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,deserialize$2 --> fromJson,null,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,deserialize$2 --> assertEquals,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,deserialize$2 --> fromJson,null,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,testCustomByteArraySerializer --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,serialize$3 --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,serialize$3 --> toString,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,serialize$3 --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,serialize$3 --> toJson,null,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,serialize$3 --> assertEquals,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,testCustomByteArrayDeserializerAndInstanceCreator --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,deserialize$3 --> getAsString,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,deserialize$3 --> length,java.lang.String,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,deserialize$3 --> parseByte,null,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,deserialize$3 --> charAt,java.lang.String,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,deserialize$3 --> create,null,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,deserialize$3 --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,deserialize$3 --> assertEquals,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter,);
EndClass 371
StartClass 372
Class(com.google.gson.functional.Foo,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 372
StartClass 373
Class(com.google.gson.functional.JsonSerializer,Y,Y,Public);
EndClass 373
StartClass 374
Class(com.google.gson.functional.JsonDeserializer,Y,Y,Public);
EndClass 374
StartClass 375
Class(com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder,N,N,Private);
Attribute(part1,java.lang.String,Public,N,N,);
Attribute(part2,java.lang.String,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,java.lang.String,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder,<init> --> split,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder,<init> --> part1,java.lang.String,WRITE);
Call(ATTRIBUTE,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder,<init> --> part2,java.lang.String,WRITE);
Call(ATTRIBUTE,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder,<init>$2 --> part1,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder,<init>$2 --> part2,java.lang.String,READ);
EndClass 375
StartClass 376
Class(com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,N,N,Private);
Method(createInstance,com.google.gson.functional.StringHolder,Public,N,N);
Method(deserialize,com.google.gson.functional.StringHolder,Public,N,N);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(testCustomAdapterInvokedForCollectionElementSerializationWithType,void,Public,N,N);
Method(testCustomAdapterInvokedForCollectionElementSerialization,void,Public,N,N);
Method(testCustomAdapterInvokedForCollectionElementDeserialization,void,Public,N,N);
Method(testCustomAdapterInvokedForMapElementSerializationWithType,void,Public,N,N);
Method(testCustomAdapterInvokedForMapElementSerialization,void,Public,N,N);
Method(testCustomAdapterInvokedForMapElementDeserialization,void,Public,N,N);
Method(testEnsureCustomSerializerNotInvokedForNullValues,void,Public,N,N);
Method(testEnsureCustomDeserializerNotInvokedForNullValues,void,Public,N,N);
Method(testRegisterHierarchyAdapterForDate,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(createInstance,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
Parameter(serialize,com.google.gson.functional.StringHolder,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Realization(com.google.gson.functional.JsonSerializer);
Realization(com.google.gson.functional.JsonDeserializer);
Realization(com.google.gson.functional.InstanceCreator);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,deserialize --> getAsString,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForCollectionElementSerializationWithType --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForCollectionElementSerializationWithType --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForCollectionElementSerializationWithType --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForCollectionElementSerializationWithType --> add,java.util.Set,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForCollectionElementSerializationWithType --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForCollectionElementSerializationWithType --> assertTrue,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForCollectionElementSerializationWithType --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForCollectionElementSerialization --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForCollectionElementSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForCollectionElementSerialization --> add,java.util.Set,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForCollectionElementSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForCollectionElementSerialization --> assertTrue,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForCollectionElementSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForCollectionElementDeserialization --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForCollectionElementDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForCollectionElementDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForCollectionElementDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForCollectionElementDeserialization --> assertEquals,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForCollectionElementDeserialization --> size,java.util.Set,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForCollectionElementDeserialization --> iterator,java.util.Set,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForCollectionElementDeserialization --> next,java.util.Set,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForCollectionElementDeserialization --> assertEquals,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForCollectionElementDeserialization --> assertEquals,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForMapElementSerializationWithType --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForMapElementSerializationWithType --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForMapElementSerializationWithType --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForMapElementSerializationWithType --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForMapElementSerializationWithType --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForMapElementSerializationWithType --> assertTrue,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForMapElementSerializationWithType --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForMapElementSerialization --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForMapElementSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForMapElementSerialization --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForMapElementSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForMapElementSerialization --> assertTrue,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForMapElementSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForMapElementDeserialization --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForMapElementDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForMapElementDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForMapElementDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForMapElementDeserialization --> assertEquals,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForMapElementDeserialization --> size,java.util.Map,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForMapElementDeserialization --> get,java.util.Map,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForMapElementDeserialization --> assertEquals,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testCustomAdapterInvokedForMapElementDeserialization --> assertEquals,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testEnsureCustomSerializerNotInvokedForNullValues --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testEnsureCustomSerializerNotInvokedForNullValues --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testEnsureCustomSerializerNotInvokedForNullValues --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testEnsureCustomSerializerNotInvokedForNullValues --> assertEquals,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testEnsureCustomDeserializerNotInvokedForNullValues --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testEnsureCustomDeserializerNotInvokedForNullValues --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testEnsureCustomDeserializerNotInvokedForNullValues --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testEnsureCustomDeserializerNotInvokedForNullValues --> assertNull,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testRegisterHierarchyAdapterForDate --> registerTypeHierarchyAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testRegisterHierarchyAdapterForDate --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testRegisterHierarchyAdapterForDate --> assertEquals,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testRegisterHierarchyAdapterForDate --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testRegisterHierarchyAdapterForDate --> assertEquals,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testRegisterHierarchyAdapterForDate --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testRegisterHierarchyAdapterForDate --> assertEquals,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testRegisterHierarchyAdapterForDate --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testRegisterHierarchyAdapterForDate --> assertEquals,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter,testRegisterHierarchyAdapterForDate --> fromJson,com.google.gson.Gson,);
EndClass 376
StartClass 377
Class(com.google.gson.functional.StringHolder,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 377
StartClass 378
Class(com.google.gson.functional.JsonSerializer,Y,Y,Public);
EndClass 378
StartClass 379
Class(com.google.gson.functional.JsonDeserializer,Y,Y,Public);
EndClass 379
StartClass 380
Class(com.google.gson.functional.InstanceCreator,Y,Y,Public);
EndClass 380
StartClass 381
Class(com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter.DataHolder,N,N,Private);
Attribute(data,java.lang.String,Public,N,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter.DataHolder,<init> --> data,java.lang.String,READ);
EndClass 381
StartClass 382
Class(com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter.DataHolder.DataHolderWrapper,N,N,Private);
Attribute(wrappedData,com.google.gson.functional.DataHolder,Public,N,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,com.google.gson.functional.DataHolder,);
Composition(com.google.gson.functional.DataHolder);
EndClass 382
StartClass 383
Class(com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter.DataHolder.DataHolderWrapper.DataHolderSerializer,N,N,Private);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(serialize,com.google.gson.functional.DataHolder,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Realization(com.google.gson.functional.JsonSerializer);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter.DataHolder.DataHolderWrapper.DataHolderSerializer,serialize --> addProperty,com.google.gson.JsonObject,);
EndClass 383
StartClass 384
Class(com.google.gson.functional.JsonSerializer,Y,Y,Public);
EndClass 384
StartClass 385
Class(com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter.DataHolder.DataHolderWrapper.DataHolderSerializer.DataHolderDeserializer,N,N,Private);
Method(deserialize,com.google.gson.functional.DataHolder,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
Realization(com.google.gson.functional.JsonDeserializer);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter.DataHolder.DataHolderWrapper.DataHolderSerializer.DataHolderDeserializer,deserialize --> getAsJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter.DataHolder.DataHolderWrapper.DataHolderSerializer.DataHolderDeserializer,deserialize --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter.DataHolder.DataHolderWrapper.DataHolderSerializer.DataHolderDeserializer,deserialize --> isJsonNull,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter.DataHolder.DataHolderWrapper.DataHolderSerializer.DataHolderDeserializer,deserialize --> getAsString,com.google.gson.JsonElement,);
EndClass 385
StartClass 386
Class(com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter.DataHolder.DataHolderWrapper.DataHolderSerializer.DataHolderDeserializer.DateTypeAdapter,N,N,Private);
Method(deserialize,java.util.Date,Public,N,N);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
Parameter(serialize,java.util.Date,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Realization(com.google.gson.functional.JsonSerializer);
Realization(com.google.gson.functional.JsonDeserializer);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter.DataHolder.DataHolderWrapper.DataHolderSerializer.DataHolderDeserializer.DateTypeAdapter,deserialize --> getAsLong,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter.DataHolder.DataHolderWrapper.DataHolderSerializer.DataHolderDeserializer.DateTypeAdapter,deserialize --> getAsLong,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.CustomTypeAdaptersTest.Base.Derived.Foo.FooTypeAdapter.StringHolder.StringHolderTypeAdapter.DataHolder.DataHolderWrapper.DataHolderSerializer.DataHolderDeserializer.DateTypeAdapter,serialize --> getTime,java.util.Date,);
EndClass 386
StartClass 387
Class(com.google.gson.functional.JsonSerializer,Y,Y,Public);
EndClass 387
StartClass 388
Class(com.google.gson.functional.JsonDeserializer,Y,Y,Public);
EndClass 388
StartClass 389
Class(com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,N,N,Private);
Attribute(url,java.net.URL,Public,N,N,);
Method(testUriSerialization,void,Public,N,N);
Method(testUriDeserialization,void,Public,N,N);
Method(testNullSerialization,void,Public,N,N);
Method(testNullSerializationAndDeserialization,void,Private,N,N);
Method(testUuidSerialization,void,Public,N,N);
Method(testUuidDeserialization,void,Public,N,N);
Method(testLocaleSerializationWithLanguage,void,Public,N,N);
Method(testLocaleDeserializationWithLanguage,void,Public,N,N);
Method(testLocaleSerializationWithLanguageCountry,void,Public,N,N);
Method(testLocaleDeserializationWithLanguageCountry,void,Public,N,N);
Method(testLocaleSerializationWithLanguageCountryVariant,void,Public,N,N);
Method(testLocaleDeserializationWithLanguageCountryVariant,void,Public,N,N);
Method(testBigDecimalFieldSerialization,void,Public,N,N);
Method(testBigDecimalFieldDeserialization,void,Public,N,N);
Method(testBadValueForBigDecimalDeserialization,void,Public,N,N);
Method(testBigIntegerFieldSerialization,void,Public,N,N);
Method(testBigIntegerFieldDeserialization,void,Public,N,N);
Method(testOverrideBigIntegerTypeAdapter,void,Public,N,N);
Method(testOverrideBigDecimalTypeAdapter,void,Public,N,N);
Method(testSetSerialization,void,Public,N,N);
Method(testBitSetSerialization,void,Public,N,N);
Method(testBitSetDeserialization,void,Public,N,N);
Method(testDefaultDateSerialization,void,Public,N,N);
Method(testDefaultDateDeserialization,void,Public,N,N);
Method(assertEqualsDate,void,Private,N,N);
Method(assertEqualsTime,void,Private,N,N);
Method(testDefaultJavaSqlDateSerialization,void,Public,N,N);
Method(testDefaultJavaSqlDateDeserialization,void,Public,N,N);
Method(testDefaultJavaSqlTimestampSerialization,void,Public,N,N);
Method(testDefaultJavaSqlTimestampDeserialization,void,Public,N,N);
Method(testDefaultJavaSqlTimeSerialization,void,Public,N,N);
Method(testDefaultJavaSqlTimeDeserialization,void,Public,N,N);
Method(testDefaultDateSerializationUsingBuilder,void,Public,N,N);
Method(testDefaultDateDeserializationUsingBuilder,void,Public,N,N);
Method(testDefaultCalendarSerialization,void,Public,N,N);
Method(testDefaultCalendarDeserialization,void,Public,N,N);
Method(testDefaultGregorianCalendarSerialization,void,Public,N,N);
Method(testDefaultGregorianCalendarDeserialization,void,Public,N,N);
Method(testDateSerializationWithPattern,void,Public,N,N);
Method(testDateDeserializationWithPattern,void,Public,N,N);
Method(testDateSerializationWithPatternNotOverridenByTypeAdapter,void,Public,N,N);
Method(deserialize,java.util.Date,Public,N,N);
Method(testDateSerializationInCollection,void,Public,N,N);
Method(testTimestampSerialization,void,Public,N,N);
Method(testSqlDateSerialization,void,Public,N,N);
Method(testJsonPrimitiveSerialization,void,Public,N,N);
Method(testJsonPrimitiveDeserialization,void,Public,N,N);
Method(testJsonNullSerialization,void,Public,N,N);
Method(testNullJsonElementSerialization,void,Public,N,N);
Method(testJsonArraySerialization,void,Public,N,N);
Method(testJsonArrayDeserialization,void,Public,N,N);
Method(testJsonObjectSerialization,void,Public,N,N);
Method(testJsonObjectDeserialization,void,Public,N,N);
Method(testJsonNullDeserialization,void,Public,N,N);
Method(testJsonElementTypeMismatch,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(testNullSerializationAndDeserialization,java.lang.Class,);
Parameter(assertEqualsDate,java.util.Date,);
Parameter(assertEqualsDate,int,);
Parameter(assertEqualsDate,int,);
Parameter(assertEqualsDate,int,);
Parameter(assertEqualsTime,java.util.Date,);
Parameter(assertEqualsTime,int,);
Parameter(assertEqualsTime,int,);
Parameter(assertEqualsTime,int,);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testUriSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testUriSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testUriDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testUriDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testUriDeserialization --> toASCIIString,java.net.URI,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerialization --> testNullSerializationAndDeserialization,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerializationAndDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerializationAndDeserialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerializationAndDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullSerializationAndDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testUuidSerialization --> fromString,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testUuidSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testUuidSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testUuidDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testUuidDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testUuidDeserialization --> toString,java.util.UUID,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testLocaleSerializationWithLanguage --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testLocaleSerializationWithLanguage --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testLocaleDeserializationWithLanguage --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testLocaleDeserializationWithLanguage --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testLocaleDeserializationWithLanguage --> getLanguage,java.util.Locale,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testLocaleSerializationWithLanguageCountry --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testLocaleSerializationWithLanguageCountry --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testLocaleDeserializationWithLanguageCountry --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testLocaleDeserializationWithLanguageCountry --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testLocaleSerializationWithLanguageCountryVariant --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testLocaleSerializationWithLanguageCountryVariant --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testLocaleDeserializationWithLanguageCountryVariant --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testLocaleDeserializationWithLanguageCountryVariant --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testLocaleDeserializationWithLanguageCountryVariant --> getLanguage,java.util.Locale,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testLocaleDeserializationWithLanguageCountryVariant --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testLocaleDeserializationWithLanguageCountryVariant --> getCountry,java.util.Locale,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testLocaleDeserializationWithLanguageCountryVariant --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testLocaleDeserializationWithLanguageCountryVariant --> getVariant,java.util.Locale,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBigDecimalFieldSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBigDecimalFieldSerialization --> substring,java.lang.String,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBigDecimalFieldSerialization --> indexOf,java.lang.String,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBigDecimalFieldSerialization --> indexOf,java.lang.String,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBigDecimalFieldSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBigDecimalFieldDeserialization --> getExpectedJson,com.google.gson.functional.ClassWithBigDecimal,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBigDecimalFieldDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBigDecimalFieldDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBadValueForBigDecimalDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBadValueForBigDecimalDeserialization --> fail,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBigIntegerFieldSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBigIntegerFieldSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBigIntegerFieldSerialization --> getExpectedJson,com.google.gson.functional.ClassWithBigInteger,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBigIntegerFieldDeserialization --> getExpectedJson,com.google.gson.functional.ClassWithBigInteger,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBigIntegerFieldDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBigIntegerFieldDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testOverrideBigIntegerTypeAdapter --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testOverrideBigIntegerTypeAdapter --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testOverrideBigIntegerTypeAdapter --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testOverrideBigIntegerTypeAdapter --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testOverrideBigIntegerTypeAdapter --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testOverrideBigIntegerTypeAdapter --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testOverrideBigDecimalTypeAdapter --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testOverrideBigDecimalTypeAdapter --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testOverrideBigDecimalTypeAdapter --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testOverrideBigDecimalTypeAdapter --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testOverrideBigDecimalTypeAdapter --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testOverrideBigDecimalTypeAdapter --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testSetSerialization --> add,java.util.HashSet,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testSetSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testSetSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testSetSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testSetSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBitSetSerialization --> set,java.util.BitSet,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBitSetSerialization --> set,java.util.BitSet,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBitSetSerialization --> set,java.util.BitSet,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBitSetSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBitSetSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBitSetDeserialization --> set,java.util.BitSet,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBitSetDeserialization --> set,java.util.BitSet,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBitSetDeserialization --> set,java.util.BitSet,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBitSetDeserialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBitSetDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBitSetDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBitSetDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBitSetDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBitSetDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBitSetDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBitSetDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testBitSetDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultDateSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultDateSerialization --> isJava9OrLater,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultDateSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultDateSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultDateDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultDateDeserialization --> assertEqualsDate,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultDateDeserialization --> assertEqualsTime,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,assertEqualsDate --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,assertEqualsDate --> getYear,java.util.Date,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,assertEqualsDate --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,assertEqualsDate --> getMonth,java.util.Date,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,assertEqualsDate --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,assertEqualsDate --> getDate,java.util.Date,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,assertEqualsTime --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,assertEqualsTime --> getHours,java.util.Date,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,assertEqualsTime --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,assertEqualsTime --> getMinutes,java.util.Date,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,assertEqualsTime --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,assertEqualsTime --> getSeconds,java.util.Date,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultJavaSqlDateSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultJavaSqlDateSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultJavaSqlDateDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultJavaSqlDateDeserialization --> assertEqualsDate,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultJavaSqlTimestampSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultJavaSqlTimestampSerialization --> isJava9OrLater,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultJavaSqlTimestampSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultJavaSqlTimestampSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultJavaSqlTimestampDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultJavaSqlTimestampDeserialization --> assertEqualsDate,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultJavaSqlTimestampDeserialization --> assertEqualsTime,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultJavaSqlTimeSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultJavaSqlTimeSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultJavaSqlTimeDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultJavaSqlTimeDeserialization --> assertEqualsTime,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultDateSerializationUsingBuilder --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultDateSerializationUsingBuilder --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultDateSerializationUsingBuilder --> isJava9OrLater,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultDateSerializationUsingBuilder --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultDateSerializationUsingBuilder --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultDateDeserializationUsingBuilder --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultDateDeserializationUsingBuilder --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultDateDeserializationUsingBuilder --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultDateDeserializationUsingBuilder --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultDateDeserializationUsingBuilder --> toString,java.util.Date,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultDateDeserializationUsingBuilder --> toString,java.util.Date,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarSerialization --> getInstance,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarSerialization --> assertTrue,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarSerialization --> assertTrue,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarSerialization --> assertTrue,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarSerialization --> assertTrue,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarSerialization --> assertTrue,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarSerialization --> assertTrue,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarDeserialization --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarDeserialization --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarDeserialization --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarDeserialization --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarDeserialization --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultCalendarDeserialization --> get,java.util.Calendar,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarSerialization --> assertTrue,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarSerialization --> assertTrue,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarSerialization --> assertTrue,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarSerialization --> assertTrue,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarSerialization --> assertTrue,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarSerialization --> assertTrue,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarDeserialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarDeserialization --> get,java.util.GregorianCalendar,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarDeserialization --> get,java.util.GregorianCalendar,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarDeserialization --> get,java.util.GregorianCalendar,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarDeserialization --> get,java.util.GregorianCalendar,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarDeserialization --> get,java.util.GregorianCalendar,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDefaultGregorianCalendarDeserialization --> get,java.util.GregorianCalendar,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateSerializationWithPattern --> setDateFormat,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateSerializationWithPattern --> setDateFormat,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateSerializationWithPattern --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateSerializationWithPattern --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateSerializationWithPattern --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateDeserializationWithPattern --> setDateFormat,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateDeserializationWithPattern --> setDateFormat,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateDeserializationWithPattern --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateDeserializationWithPattern --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateDeserializationWithPattern --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateDeserializationWithPattern --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateDeserializationWithPattern --> getYear,java.util.Date,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateDeserializationWithPattern --> getYear,java.util.Date,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateDeserializationWithPattern --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateDeserializationWithPattern --> getMonth,java.util.Date,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateDeserializationWithPattern --> getMonth,java.util.Date,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateDeserializationWithPattern --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateDeserializationWithPattern --> getDay,java.util.Date,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateDeserializationWithPattern --> getDay,java.util.Date,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateSerializationWithPatternNotOverridenByTypeAdapter --> setDateFormat,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateSerializationWithPatternNotOverridenByTypeAdapter --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,deserialize --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,deserialize --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,deserialize --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateSerializationInCollection --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateSerializationInCollection --> getDefault,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateSerializationInCollection --> setDefault,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateSerializationInCollection --> getTimeZone,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateSerializationInCollection --> getDefault,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateSerializationInCollection --> setDefault,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateSerializationInCollection --> setDateFormat,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateSerializationInCollection --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateSerializationInCollection --> asList,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateSerializationInCollection --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateSerializationInCollection --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateSerializationInCollection --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateSerializationInCollection --> get,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateSerializationInCollection --> getTime,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateSerializationInCollection --> setDefault,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testDateSerializationInCollection --> setDefault,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testTimestampSerialization --> getDefault,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testTimestampSerialization --> setDefault,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testTimestampSerialization --> getTimeZone,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testTimestampSerialization --> getDefault,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testTimestampSerialization --> setDefault,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testTimestampSerialization --> setDateFormat,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testTimestampSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testTimestampSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testTimestampSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testTimestampSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testTimestampSerialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testTimestampSerialization --> getTime,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testTimestampSerialization --> setDefault,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testTimestampSerialization --> setDefault,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testSqlDateSerialization --> getDefault,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testSqlDateSerialization --> setDefault,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testSqlDateSerialization --> getTimeZone,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testSqlDateSerialization --> getDefault,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testSqlDateSerialization --> setDefault,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testSqlDateSerialization --> setDateFormat,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testSqlDateSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testSqlDateSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testSqlDateSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testSqlDateSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testSqlDateSerialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testSqlDateSerialization --> getTime,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testSqlDateSerialization --> setDefault,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testSqlDateSerialization --> setDefault,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonPrimitiveSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonPrimitiveSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonPrimitiveSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonPrimitiveSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonPrimitiveSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonPrimitiveSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonPrimitiveSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonPrimitiveSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonPrimitiveDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonPrimitiveDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonPrimitiveDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonPrimitiveDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonPrimitiveDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonPrimitiveDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonPrimitiveDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonPrimitiveDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonPrimitiveDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonPrimitiveDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonPrimitiveDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonPrimitiveDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonPrimitiveDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonPrimitiveDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonPrimitiveDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonPrimitiveDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonNullSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonNullSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonNullSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonNullSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullJsonElementSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullJsonElementSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullJsonElementSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testNullJsonElementSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonArraySerialization --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonArraySerialization --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonArraySerialization --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonArraySerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonArraySerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonArrayDeserialization --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonArrayDeserialization --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonArrayDeserialization --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonArrayDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonArrayDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonArrayDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonArrayDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonObjectSerialization --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonObjectSerialization --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonObjectSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonObjectSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonObjectDeserialization --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonObjectDeserialization --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonObjectDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonObjectDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonObjectDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonObjectDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonNullDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonNullDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonNullDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonNullDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonElementTypeMismatch --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonElementTypeMismatch --> fail,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonElementTypeMismatch --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField,testJsonElementTypeMismatch --> getMessage,null,);
EndClass 389
StartClass 390
Class(com.google.gson.functional.ClassWithBigDecimal,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 390
StartClass 391
Class(com.google.gson.functional.ClassWithBigInteger,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 391
StartClass 392
Class(com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal,N,N,Private);
Attribute(value,java.math.BigDecimal,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(getExpectedJson,java.lang.String,Public,N,N);
Parameter(<init>,java.lang.String,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal,getExpectedJson --> toEngineeringString,java.math.BigDecimal,);
EndClass 392
StartClass 393
Class(com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,N,N,Private);
Attribute(value,java.math.BigInteger,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(getExpectedJson,java.lang.String,Public,N,N);
Method(testPropertiesSerialization,void,Public,N,N);
Method(testPropertiesDeserialization,void,Public,N,N);
Method(testTreeSetSerialization,void,Public,N,N);
Method(testTreeSetDeserialization,void,Public,N,N);
Method(testStringBuilderSerialization,void,Public,N,N);
Method(testStringBuilderDeserialization,void,Public,N,N);
Method(testStringBufferSerialization,void,Public,N,N);
Method(testStringBufferDeserialization,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,testPropertiesSerialization --> setProperty,java.util.Properties,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,testPropertiesSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,testPropertiesSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,testPropertiesDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,testPropertiesDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,testPropertiesDeserialization --> getProperty,java.util.Properties,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,testTreeSetSerialization --> add,java.util.TreeSet,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,testTreeSetSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,testTreeSetSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,testTreeSetDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,testTreeSetDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,testTreeSetDeserialization --> assertTrue,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,testTreeSetDeserialization --> contains,java.util.TreeSet,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,testStringBuilderSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,testStringBuilderSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,testStringBuilderDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,testStringBuilderDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,testStringBuilderDeserialization --> toString,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,testStringBufferSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,testStringBufferSerialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,testStringBufferDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,testStringBufferDeserialization --> assertEquals,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger,testStringBufferDeserialization --> toString,java.lang.StringBuffer,);
EndClass 393
StartClass 394
Class(com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger.MyClassTypeAdapter,N,N,Private);
Method(write,void,Public,N,N);
Method(read,java.lang.Class,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,java.lang.Class,);
Parameter(read,com.google.gson.stream.JsonReader,);
SuperClass(com.google.gson.functional.TypeAdapter);
Generalization(com.google.gson.functional.TypeAdapter);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger.MyClassTypeAdapter,write --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger.MyClassTypeAdapter,write --> getName,java.lang.Class,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger.MyClassTypeAdapter,read --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger.MyClassTypeAdapter,read --> forName,null,);
EndClass 394
StartClass 395
Class(com.google.gson.functional.TypeAdapter,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger.MyClassTypeAdapter);
EndClass 395
StartClass 396
Class(com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger.MyClassTypeAdapter.NumberAsStringAdapter,N,N,Protected);
Attribute(constructor,java.lang.reflect.Constructor,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(write,void,Public,N,N);
Method(read,java.lang.Number,Public,N,N);
Parameter(<init>,java.lang.Class,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,java.lang.Number,);
Parameter(read,com.google.gson.stream.JsonReader,);
SuperClass(com.google.gson.functional.TypeAdapter);
Generalization(com.google.gson.functional.TypeAdapter);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger.MyClassTypeAdapter.NumberAsStringAdapter,<init> --> getConstructor,java.lang.Class,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger.MyClassTypeAdapter.NumberAsStringAdapter,write --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger.MyClassTypeAdapter.NumberAsStringAdapter,write --> toString,java.lang.Number,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger.MyClassTypeAdapter.NumberAsStringAdapter,read --> newInstance,java.lang.reflect.Constructor,);
Call(METHOD,com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger.MyClassTypeAdapter.NumberAsStringAdapter,read --> nextString,com.google.gson.stream.JsonReader,);
EndClass 396
StartClass 397
Class(com.google.gson.functional.TypeAdapter,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.DefaultTypeAdaptersTest.ClassWithUrlField.ClassWithBigDecimal.ClassWithBigInteger.MyClassTypeAdapter.NumberAsStringAdapter);
EndClass 397
StartClass 398
Class(com.google.gson.functional.DelegateTypeAdapterTest.StatsTypeAdapterFactory,N,N,Private);
Attribute(numReads,int,Public,N,N,);
Attribute(numWrites,int,Public,N,N,);
Method(create,com.google.gson.TypeAdapter,Public,N,N);
Method(write,void,Public,N,N);
Method(read,com.google.gson.functional.T,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.functional.T,);
Parameter(read,com.google.gson.stream.JsonReader,);
Realization(com.google.gson.TypeAdapterFactory);
Call(METHOD,com.google.gson.functional.DelegateTypeAdapterTest.StatsTypeAdapterFactory,create --> getDelegateAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.DelegateTypeAdapterTest.StatsTypeAdapterFactory,write --> write,null,);
Call(METHOD,com.google.gson.functional.DelegateTypeAdapterTest.StatsTypeAdapterFactory,read --> read,null,);
EndClass 398
StartClass 399
Class(com.google.gson.functional.EnumTest.MyEnum,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 399
StartClass 400
Class(com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,N,N,Private);
Attribute(value1,com.google.gson.functional.MyEnum,Private,N,Y,);
Attribute(value2,com.google.gson.functional.MyEnum,Private,N,Y,);
Method(getExpectedJson,java.lang.String,Public,N,N);
Method(testEnumSubclass,void,Public,N,N);
Method(testEnumSubclassWithRegisteredTypeAdapter,void,Public,N,N);
Method(testEnumSubclassAsParameterizedType,void,Public,N,N);
Method(testEnumCaseMapping,void,Public,N,N);
Method(testEnumSet,void,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclass --> assertFalse,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclass --> getClass,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclass --> assertEquals,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclass --> toJson,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclass --> assertEquals,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclass --> toJson,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclass --> allOf,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclass --> assertEquals,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclass --> fromJson,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclass --> assertEquals,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclass --> allOf,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclass --> fromJson,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclass --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclassWithRegisteredTypeAdapter --> registerTypeHierarchyAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclassWithRegisteredTypeAdapter --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclassWithRegisteredTypeAdapter --> assertFalse,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclassWithRegisteredTypeAdapter --> getClass,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclassWithRegisteredTypeAdapter --> assertEquals,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclassWithRegisteredTypeAdapter --> toJson,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclassWithRegisteredTypeAdapter --> assertEquals,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclassWithRegisteredTypeAdapter --> toJson,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclassWithRegisteredTypeAdapter --> allOf,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclassWithRegisteredTypeAdapter --> assertEquals,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclassWithRegisteredTypeAdapter --> fromJson,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclassWithRegisteredTypeAdapter --> assertEquals,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclassWithRegisteredTypeAdapter --> allOf,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclassWithRegisteredTypeAdapter --> fromJson,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclassWithRegisteredTypeAdapter --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclassAsParameterizedType --> add,java.util.Collection,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclassAsParameterizedType --> add,java.util.Collection,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclassAsParameterizedType --> toJson,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclassAsParameterizedType --> assertEquals,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclassAsParameterizedType --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclassAsParameterizedType --> fromJson,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclassAsParameterizedType --> assertContains,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSubclassAsParameterizedType --> assertContains,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumCaseMapping --> assertEquals,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumCaseMapping --> fromJson,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumCaseMapping --> assertEquals,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumCaseMapping --> toJson,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSet --> of,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSet --> toJson,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSet --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSet --> fromJson,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSet --> assertTrue,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSet --> contains,java.util.EnumSet,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSet --> assertTrue,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSet --> contains,java.util.EnumSet,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSet --> assertFalse,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields,testEnumSet --> contains,java.util.EnumSet,);
EndClass 400
StartClass 401
Class(com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields.Roshambo,N,N,Public);
Method(defeats,com.google.gson.functional.Roshambo,Public,N,N);
Method(defeats$2,com.google.gson.functional.Roshambo,Public,N,N);
Method(defeats$3,com.google.gson.functional.Roshambo,Public,N,N);
Method(defeats$4,com.google.gson.functional.Roshambo,Public,N,Y);
Method(<init>,void,Public,N,N);
EndClass 401
StartClass 402
Class(com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields.Roshambo.MyEnumTypeAdapter,N,N,Private);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(deserialize,com.google.gson.functional.Roshambo,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(serialize,com.google.gson.functional.Roshambo,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
Realization(com.google.gson.functional.JsonSerializer);
Realization(com.google.gson.functional.JsonDeserializer);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields.Roshambo.MyEnumTypeAdapter,serialize --> name,com.google.gson.functional.Roshambo,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields.Roshambo.MyEnumTypeAdapter,deserialize --> valueOf,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields.Roshambo.MyEnumTypeAdapter,deserialize --> getAsString,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields.Roshambo.MyEnumTypeAdapter,deserialize --> substring,com.google.gson.JsonElement,);
EndClass 402
StartClass 403
Class(com.google.gson.functional.JsonSerializer,Y,Y,Public);
EndClass 403
StartClass 404
Class(com.google.gson.functional.JsonDeserializer,Y,Y,Public);
EndClass 404
StartClass 405
Class(com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields.Roshambo.MyEnumTypeAdapter.Gender,N,N,Public);
Method(testEnumClassWithFields,void,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields.Roshambo.MyEnumTypeAdapter.Gender,testEnumClassWithFields --> assertEquals,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields.Roshambo.MyEnumTypeAdapter.Gender,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields.Roshambo.MyEnumTypeAdapter.Gender,testEnumClassWithFields --> toJson,null,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields.Roshambo.MyEnumTypeAdapter.Gender,testEnumClassWithFields --> assertEquals,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields.Roshambo.MyEnumTypeAdapter.Gender,);
Call(METHOD,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields.Roshambo.MyEnumTypeAdapter.Gender,testEnumClassWithFields --> fromJson,null,);
EndClass 405
StartClass 406
Class(com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields.Roshambo.MyEnumTypeAdapter.Gender.Color,N,N,Public);
Attribute(value,java.lang.String,Public,N,N,);
Attribute(index,int,Public,N,N,);
Method(<init>,void,Private,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,int,);
Call(ATTRIBUTE,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields.Roshambo.MyEnumTypeAdapter.Gender.Color,<init> --> value,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.functional.EnumTest.MyEnum.ClassWithEnumFields.Roshambo.MyEnumTypeAdapter.Gender.Color,<init> --> index,int,READ);
EndClass 406
StartClass 407
Class(com.google.gson.functional.ExclusionStrategyFunctionalTest.SampleObjectForTest,N,N,Private);
Attribute(annotatedField,int,Private,N,Y,);
Attribute(stringField,java.lang.String,Private,N,Y,);
Attribute(longField,long,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>$2,int,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,long,);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest.SampleObjectForTest,<init> --> this,com.google.gson.functional.ExclusionStrategyFunctionalTest.SampleObjectForTest,);
Call(ATTRIBUTE,com.google.gson.functional.ExclusionStrategyFunctionalTest.SampleObjectForTest,<init>$2 --> annotatedField,int,READ);
Call(ATTRIBUTE,com.google.gson.functional.ExclusionStrategyFunctionalTest.SampleObjectForTest,<init>$2 --> stringField,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.functional.ExclusionStrategyFunctionalTest.SampleObjectForTest,<init>$2 --> longField,long,READ);
EndClass 407
StartClass 408
Class(com.google.gson.functional.ExclusionStrategyFunctionalTest.SampleObjectForTest.MyExclusionStrategy,N,N,Private);
Attribute(typeToSkip,java.lang.Class,Private,N,Y,);
Method(<init>,void,Private,N,N);
Method(shouldSkipClass,boolean,Public,N,N);
Method(shouldSkipField,boolean,Public,N,N);
Parameter(<init>,java.lang.Class,);
Parameter(shouldSkipClass,java.lang.Class,);
Parameter(shouldSkipField,com.google.gson.FieldAttributes,);
Realization(com.google.gson.ExclusionStrategy);
Call(ATTRIBUTE,com.google.gson.functional.ExclusionStrategyFunctionalTest.SampleObjectForTest.MyExclusionStrategy,<init> --> typeToSkip,java.lang.Class,READ);
Call(METHOD,com.google.gson.functional.ExclusionStrategyFunctionalTest.SampleObjectForTest.MyExclusionStrategy,shouldSkipField --> getAnnotation,com.google.gson.FieldAttributes,);
EndClass 408
StartClass 409
Class(com.google.gson.functional.ExposeFieldsTest.ClassWithExposedFields,N,N,Private);
Attribute(a,java.lang.Integer,Private,N,Y,);
Attribute(b,java.lang.Integer,Private,N,Y,);
Attribute(c,long,Public,N,Y,);
Attribute(d,double,Public,N,Y,);
Attribute(e,com.google.gson.functional.char,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getExpectedJson,java.lang.String,Public,N,N);
Parameter(<init>,java.lang.Integer,);
Parameter(<init>,java.lang.Integer,);
Parameter(<init>$2,java.lang.Integer,);
Parameter(<init>$2,java.lang.Integer,);
Parameter(<init>$2,long,);
Parameter(<init>$2,double,);
Parameter(<init>$2,com.google.gson.functional.char,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest.ClassWithExposedFields,<init> --> this,com.google.gson.functional.ExposeFieldsTest.ClassWithExposedFields,);
Call(ATTRIBUTE,com.google.gson.functional.ExposeFieldsTest.ClassWithExposedFields,<init>$2 --> a,java.lang.Integer,READ);
Call(ATTRIBUTE,com.google.gson.functional.ExposeFieldsTest.ClassWithExposedFields,<init>$2 --> b,java.lang.Integer,READ);
Call(ATTRIBUTE,com.google.gson.functional.ExposeFieldsTest.ClassWithExposedFields,<init>$2 --> c,long,READ);
Call(ATTRIBUTE,com.google.gson.functional.ExposeFieldsTest.ClassWithExposedFields,<init>$2 --> d,double,READ);
Call(ATTRIBUTE,com.google.gson.functional.ExposeFieldsTest.ClassWithExposedFields,<init>$2 --> e,com.google.gson.functional.char,READ);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest.ClassWithExposedFields,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest.ClassWithExposedFields,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest.ClassWithExposedFields,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest.ClassWithExposedFields,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest.ClassWithExposedFields,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest.ClassWithExposedFields,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ExposeFieldsTest.ClassWithExposedFields,getExpectedJson --> toString,com.google.gson.functional.StringBuilder,);
EndClass 409
StartClass 410
Class(com.google.gson.functional.ExposeFieldsTest.ClassWithExposedFields.ClassWithNoExposedFields,N,N,Private);
Attribute(a,int,Private,N,Y,);
Attribute(b,int,Private,N,Y,);
Method(<init>,void,Public,N,N);
EndClass 410
StartClass 411
Class(com.google.gson.functional.ExposeFieldsTest.ClassWithExposedFields.ClassWithNoExposedFields.SomeInterface.SomeObject,N,N,Private);
Method(<init>,void,Public,N,N);
Realization(com.google.gson.functional.SomeInterface);
EndClass 411
StartClass 412
Class(com.google.gson.functional.SomeInterface,Y,Y,Public);
EndClass 412
StartClass 413
Class(com.google.gson.functional.ExposeFieldsTest.ClassWithExposedFields.ClassWithNoExposedFields.SomeInterface.SomeObject.SomeInterfaceInstanceCreator,N,N,Private);
Method(createInstance,com.google.gson.functional.SomeInterface,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(createInstance,java.lang.reflect.Type,);
Realization(com.google.gson.functional.InstanceCreator);
EndClass 413
StartClass 414
Class(com.google.gson.functional.InstanceCreator,Y,Y,Public);
EndClass 414
StartClass 415
Class(com.google.gson.functional.ExposeFieldsTest.ClassWithExposedFields.ClassWithNoExposedFields.SomeInterface.SomeObject.SomeInterfaceInstanceCreator.ClassWithInterfaceField,N,N,Private);
Attribute(interfaceField,com.google.gson.functional.SomeInterface,Private,N,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,com.google.gson.functional.SomeInterface,);
Composition(com.google.gson.functional.SomeInterface);
Call(ATTRIBUTE,com.google.gson.functional.ExposeFieldsTest.ClassWithExposedFields.ClassWithNoExposedFields.SomeInterface.SomeObject.SomeInterfaceInstanceCreator.ClassWithInterfaceField,<init> --> interfaceField,com.google.gson.functional.SomeInterface,READ);
EndClass 415
StartClass 416
Class(com.google.gson.functional.FieldExclusionTest.Outer,N,N,Private);
Method(<init>,void,Public,N,N);
EndClass 416
StartClass 417
Class(com.google.gson.functional.FieldExclusionTest.Outer.Inner,N,N,Private);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.lang.String,);
SuperClass(com.google.gson.functional.NestedClass);
Generalization(com.google.gson.functional.NestedClass);
Call(METHOD,com.google.gson.functional.FieldExclusionTest.Outer.Inner,<init> --> super,com.google.gson.functional.FieldExclusionTest.Outer.Inner,);
EndClass 417
StartClass 418
Class(com.google.gson.functional.NestedClass,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.FieldExclusionTest.Outer.Inner);
EndClass 418
StartClass 419
Class(com.google.gson.functional.FieldExclusionTest.Outer.Inner.NestedClass,N,N,Private);
Attribute(value,java.lang.String,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(toJson,java.lang.String,Public,N,N);
Parameter(<init>,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.functional.FieldExclusionTest.Outer.Inner.NestedClass,<init> --> value,java.lang.String,READ);
EndClass 419
StartClass 420
Class(com.google.gson.functional.FieldNamingTest.TestNames,N,N,Private);
Attribute(lowerCamel,int,Public,N,N,);
Attribute(UpperCamel,int,Public,N,N,);
Attribute(_lowerCamelLeadingUnderscore,int,Public,N,N,);
Attribute(_UpperCamelLeadingUnderscore,int,Public,N,N,);
Attribute(lower_words,int,Public,N,N,);
Attribute(UPPER_WORDS,int,Public,N,N,);
Attribute(annotated,int,Public,N,N,);
Attribute(lowerId,int,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 420
StartClass 421
Class(com.google.gson.functional.GsonVersionDiagnosticsTest.TestType,N,N,Private);
Attribute(a,java.lang.String,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 421
StartClass 422
Class(com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,N,N,Private);
Attribute(list,java.util.List,Private,N,N,);
Attribute(queue,java.util.Queue,Private,N,N,);
Attribute(set,java.util.Set,Private,N,N,);
Attribute(sortedSet,java.util.SortedSet,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(listContains,boolean,Public,N,N);
Method(queueContains,boolean,Public,N,N);
Method(setContains,boolean,Public,N,N);
Method(sortedSetContains,boolean,Public,N,N);
Method(getExpectedJson,java.lang.String,Public,N,N);
Method(append,com.google.gson.functional.StringBuilder,Private,N,N);
Parameter(<init>,java.util.List,);
Parameter(<init>,java.util.Queue,);
Parameter(<init>,java.util.Set,);
Parameter(<init>,java.util.SortedSet,);
Parameter(append,com.google.gson.functional.StringBuilder,);
Parameter(append,java.util.Collection,);
Call(ATTRIBUTE,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,<init> --> list,java.util.List,READ);
Call(ATTRIBUTE,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,<init> --> queue,java.util.Queue,READ);
Call(ATTRIBUTE,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,<init> --> set,java.util.Set,READ);
Call(ATTRIBUTE,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,<init> --> sortedSet,java.util.SortedSet,READ);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,listContains --> contains,java.util.List,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,queueContains --> contains,java.util.Queue,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,setContains --> contains,java.util.Set,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,sortedSetContains --> contains,java.util.SortedSet,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,getExpectedJson --> append,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,getExpectedJson --> append,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,getExpectedJson --> append,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,getExpectedJson --> append,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,getExpectedJson --> append,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,getExpectedJson --> append,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,getExpectedJson --> append,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,getExpectedJson --> toString,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,append --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,append --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,append --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,append --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,append --> toString,null,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,append --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.InheritanceTest.SubTypeOfNested.ClassWithSubInterfacesOfCollection,append --> append,com.google.gson.functional.StringBuilder,);
EndClass 422
StartClass 423
Class(com.google.gson.functional.InstanceCreatorTest.SubArrayList,N,N,Protected);
Method(createInstance,java.util.List,Public,N,N);
Method(testInstanceCreatorForParametrizedType,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(createInstance,java.lang.reflect.Type,);
SuperClass(com.google.gson.functional.ArrayList);
Generalization(com.google.gson.functional.ArrayList);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest.SubArrayList,createInstance --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest.SubArrayList,createInstance --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest.SubArrayList,createInstance --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest.SubArrayList,createInstance --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest.SubArrayList,createInstance --> assertEquals,com.google.gson.functional.InstanceCreatorTest.SubArrayList,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest.SubArrayList,createInstance --> getClass,java.util.List,);
EndClass 423
StartClass 424
Class(com.google.gson.functional.ArrayList,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.InstanceCreatorTest.SubArrayList);
EndClass 424
StartClass 425
Class(com.google.gson.functional.InstanceCreatorTest.SubArrayList.SubTreeSet,N,N,Protected);
Method(createInstance,java.util.SortedSet,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(createInstance,java.lang.reflect.Type,);
SuperClass(com.google.gson.functional.TreeSet);
Generalization(com.google.gson.functional.TreeSet);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest.SubArrayList.SubTreeSet,createInstance --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest.SubArrayList.SubTreeSet,createInstance --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest.SubArrayList.SubTreeSet,createInstance --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest.SubArrayList.SubTreeSet,createInstance --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest.SubArrayList.SubTreeSet,createInstance --> assertEquals,com.google.gson.functional.InstanceCreatorTest.SubArrayList.SubTreeSet,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest.SubArrayList.SubTreeSet,createInstance --> first,java.util.SortedSet,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest.SubArrayList.SubTreeSet,createInstance --> assertEquals,com.google.gson.functional.InstanceCreatorTest.SubArrayList.SubTreeSet,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest.SubArrayList.SubTreeSet,createInstance --> getClass,java.util.SortedSet,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest.SubArrayList.SubTreeSet,createInstance --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest.SubArrayList.SubTreeSet,createInstance --> assertEquals,com.google.gson.functional.InstanceCreatorTest.SubArrayList.SubTreeSet,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest.SubArrayList.SubTreeSet,createInstance --> first,java.util.SortedSet,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest.SubArrayList.SubTreeSet,createInstance --> assertEquals,com.google.gson.functional.InstanceCreatorTest.SubArrayList.SubTreeSet,);
Call(METHOD,com.google.gson.functional.InstanceCreatorTest.SubArrayList.SubTreeSet,createInstance --> getClass,java.util.SortedSet,);
EndClass 425
StartClass 426
Class(com.google.gson.functional.TreeSet,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.InstanceCreatorTest.SubArrayList.SubTreeSet);
EndClass 426
StartClass 427
Class(com.google.gson.functional.InterfaceTest.TestObjectInterface.TestObject,N,N,Private);
Attribute(someStringValue,java.lang.String,Private,N,N,);
Method(<init>,void,Private,N,N);
Parameter(<init>,java.lang.String,);
Realization(com.google.gson.functional.TestObjectInterface);
EndClass 427
StartClass 428
Class(com.google.gson.functional.TestObjectInterface,Y,Y,Public);
EndClass 428
StartClass 429
Class(com.google.gson.functional.InterfaceTest.TestObjectInterface.TestObject.TestObjectWrapper,N,N,Private);
Attribute(obj,com.google.gson.functional.TestObjectInterface,Private,N,N,);
Method(<init>,void,Private,N,N);
Parameter(<init>,com.google.gson.functional.TestObjectInterface,);
Composition(com.google.gson.functional.TestObjectInterface);
Call(ATTRIBUTE,com.google.gson.functional.InterfaceTest.TestObjectInterface.TestObject.TestObjectWrapper,<init> --> obj,com.google.gson.functional.TestObjectInterface,READ);
EndClass 429
StartClass 430
Class(com.google.gson.functional.JavaUtilConcurrentAtomicTest.AtomicLongHolder,N,N,Private);
Attribute(value,java.util.concurrent.atomic.AtomicLong,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 430
StartClass 431
Class(com.google.gson.functional.JavaUtilTest.CurrencyHolder,N,N,Private);
Attribute(value,java.util.Currency,Public,N,N,);
Method(testProperties,void,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,com.google.gson.functional.JavaUtilTest.CurrencyHolder,testProperties --> fromJson,null,);
Call(METHOD,com.google.gson.functional.JavaUtilTest.CurrencyHolder,testProperties --> assertEquals,com.google.gson.functional.JavaUtilTest.CurrencyHolder,);
Call(METHOD,com.google.gson.functional.JavaUtilTest.CurrencyHolder,testProperties --> getProperty,java.util.Properties,);
Call(METHOD,com.google.gson.functional.JavaUtilTest.CurrencyHolder,testProperties --> assertEquals,com.google.gson.functional.JavaUtilTest.CurrencyHolder,);
Call(METHOD,com.google.gson.functional.JavaUtilTest.CurrencyHolder,testProperties --> getProperty,java.util.Properties,);
Call(METHOD,com.google.gson.functional.JavaUtilTest.CurrencyHolder,testProperties --> toJson,null,);
Call(METHOD,com.google.gson.functional.JavaUtilTest.CurrencyHolder,testProperties --> assertTrue,com.google.gson.functional.JavaUtilTest.CurrencyHolder,);
Call(METHOD,com.google.gson.functional.JavaUtilTest.CurrencyHolder,testProperties --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.JavaUtilTest.CurrencyHolder,testProperties --> assertTrue,com.google.gson.functional.JavaUtilTest.CurrencyHolder,);
Call(METHOD,com.google.gson.functional.JavaUtilTest.CurrencyHolder,testProperties --> contains,java.lang.String,);
EndClass 431
StartClass 432
Class(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A,N,N,Private);
Attribute(value,java.lang.String,Public,N,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A,<init> --> value,java.lang.String,READ);
EndClass 432
StartClass 433
Class(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter,N,N,Protected);
Method(write,void,Public,N,N);
Method(read,com.google.gson.functional.A,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.functional.A,);
Parameter(read,com.google.gson.stream.JsonReader,);
SuperClass(com.google.gson.functional.TypeAdapter);
Generalization(com.google.gson.functional.TypeAdapter);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter,write --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter,read --> nextString,com.google.gson.stream.JsonReader,);
EndClass 433
StartClass 434
Class(com.google.gson.functional.TypeAdapter,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter);
EndClass 434
StartClass 435
Class(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C,N,N,Private);
Attribute(value,java.lang.String,Public,N,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C,<init> --> value,java.lang.String,READ);
EndClass 435
StartClass 436
Class(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory,N,N,Protected);
Method(create,com.google.gson.TypeAdapter,Public,N,N);
Method(write,void,Public,N,N);
Method(read,com.google.gson.functional.T,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.functional.T,);
Parameter(read,com.google.gson.stream.JsonReader,);
Realization(com.google.gson.TypeAdapterFactory);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory,write --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory,read --> nextString,com.google.gson.stream.JsonReader,);
EndClass 436
StartClass 437
Class(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter,N,N,Private);
Attribute(value,java.lang.String,Public,N,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter,<init> --> value,java.lang.String,READ);
EndClass 437
StartClass 438
Class(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User,N,N,Private);
Attribute(firstName,java.lang.String,Public,N,Y,);
Attribute(lastName,java.lang.String,Public,N,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User,<init> --> firstName,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User,<init> --> lastName,java.lang.String,READ);
EndClass 438
StartClass 439
Class(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter,N,N,Private);
Method(write,void,Public,N,N);
Method(read,com.google.gson.functional.User,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.functional.User,);
Parameter(read,com.google.gson.stream.JsonReader,);
SuperClass(com.google.gson.functional.TypeAdapter);
Generalization(com.google.gson.functional.TypeAdapter);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter,write --> beginObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter,write --> name,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter,write --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter,write --> endObject,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter,read --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter,read --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter,read --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter,read --> split,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter,read --> endObject,com.google.gson.stream.JsonReader,);
EndClass 439
StartClass 440
Class(com.google.gson.functional.User,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 440
StartClass 441
Class(com.google.gson.functional.TypeAdapter,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter);
SubClass(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter);
SubClass(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter);
SubClass(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter);
EndClass 441
StartClass 442
Class(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter,N,N,Private);
Method(write,void,Public,N,N);
Method(read,com.google.gson.functional.User,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.functional.User,);
Parameter(read,com.google.gson.stream.JsonReader,);
SuperClass(com.google.gson.functional.TypeAdapter);
Generalization(com.google.gson.functional.TypeAdapter);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter,write --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter,read --> nextString,com.google.gson.stream.JsonReader,);
EndClass 442
StartClass 443
Class(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter,N,N,Private);
Method(write,void,Public,N,N);
Method(read,com.google.gson.functional.User,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.functional.User,);
Parameter(read,com.google.gson.stream.JsonReader,);
SuperClass(com.google.gson.functional.TypeAdapter);
Generalization(com.google.gson.functional.TypeAdapter);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter,write --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter,read --> nextString,com.google.gson.stream.JsonReader,);
EndClass 443
StartClass 444
Class(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter,N,N,Private);
Method(write,void,Public,N,N);
Method(read,com.google.gson.functional.User,Public,N,N);
Method(testJsonAdapterInvokedOnlyForAnnotatedFields,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.functional.User,);
Parameter(read,com.google.gson.stream.JsonReader,);
SuperClass(com.google.gson.functional.TypeAdapter);
Generalization(com.google.gson.functional.TypeAdapter);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter,write --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter,read --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter,testJsonAdapterInvokedOnlyForAnnotatedFields --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter,testJsonAdapterInvokedOnlyForAnnotatedFields --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter,testJsonAdapterInvokedOnlyForAnnotatedFields --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter,);
EndClass 444
StartClass 445
Class(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter.NullableClass,N,N,Private);
Method(<init>,void,Public,N,N);
EndClass 445
StartClass 446
Class(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter.NullableClass.NullableClassJsonAdapter,N,N,Private);
Method(write,void,Public,N,N);
Method(read,com.google.gson.functional.NullableClass,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.functional.NullableClass,);
Parameter(read,com.google.gson.stream.JsonReader,);
SuperClass(com.google.gson.functional.TypeAdapter);
Generalization(com.google.gson.functional.TypeAdapter);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter.NullableClass.NullableClassJsonAdapter,write --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter.NullableClass.NullableClassJsonAdapter,read --> nextString,com.google.gson.stream.JsonReader,);
EndClass 446
StartClass 447
Class(com.google.gson.functional.NullableClass,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 447
StartClass 448
Class(com.google.gson.functional.TypeAdapter,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter.NullableClass.NullableClassJsonAdapter);
EndClass 448
StartClass 449
Class(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter.NullableClass.NullableClassJsonAdapter.Foo,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 449
StartClass 450
Class(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter.NullableClass.NullableClassJsonAdapter.Foo.FooJsonAdapter,N,N,Private);
Method(write,void,Public,N,N);
Method(read,com.google.gson.functional.Foo,Public,N,N);
Method(testIncorrectJsonAdapterType,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.functional.Foo,);
Parameter(read,com.google.gson.stream.JsonReader,);
SuperClass(com.google.gson.functional.TypeAdapter);
Generalization(com.google.gson.functional.TypeAdapter);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter.NullableClass.NullableClassJsonAdapter.Foo.FooJsonAdapter,write --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter.NullableClass.NullableClassJsonAdapter.Foo.FooJsonAdapter,write --> name,com.google.gson.functional.Foo,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter.NullableClass.NullableClassJsonAdapter.Foo.FooJsonAdapter,write --> toLowerCase,com.google.gson.functional.Foo,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter.NullableClass.NullableClassJsonAdapter.Foo.FooJsonAdapter,read --> valueOf,null,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter.NullableClass.NullableClassJsonAdapter.Foo.FooJsonAdapter,read --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter.NullableClass.NullableClassJsonAdapter.Foo.FooJsonAdapter,read --> toUpperCase,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter.NullableClass.NullableClassJsonAdapter.Foo.FooJsonAdapter,testIncorrectJsonAdapterType --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter.NullableClass.NullableClassJsonAdapter.Foo.FooJsonAdapter,testIncorrectJsonAdapterType --> fail,com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter.NullableClass.NullableClassJsonAdapter.Foo.FooJsonAdapter,);
EndClass 450
StartClass 451
Class(com.google.gson.functional.TypeAdapter,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter.NullableClass.NullableClassJsonAdapter.Foo.FooJsonAdapter);
EndClass 451
StartClass 452
Class(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.A.JsonAdapter.C.JsonAdapterFactory.B.ClassWithIncorrectJsonAdapter.User.UserJsonAdapter.NullableClass.NullableClassJsonAdapter.Foo.FooJsonAdapter.D,N,N,Private);
Attribute(value,java.lang.String,Public,N,Y,);
Method(<init>,void,Public,N,N);
EndClass 452
StartClass 453
Class(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget,N,N,Private);
Attribute(part,com.google.gson.functional.Part,Public,N,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,com.google.gson.functional.Part,);
Composition(com.google.gson.functional.Part);
Call(ATTRIBUTE,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget,<init> --> part,com.google.gson.functional.Part,READ);
EndClass 453
StartClass 454
Class(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo,N,N,Private);
Attribute(part,com.google.gson.functional.Part,Public,N,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,com.google.gson.functional.Part,);
Composition(com.google.gson.functional.Part);
Call(ATTRIBUTE,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo,<init> --> part,com.google.gson.functional.Part,READ);
EndClass 454
StartClass 455
Class(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part,N,N,Private);
Attribute(name,java.lang.String,Public,N,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part,<init> --> name,java.lang.String,READ);
EndClass 455
StartClass 456
Class(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter,N,N,Private);
Method(write,void,Public,N,N);
Method(read,com.google.gson.functional.Part,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.functional.Part,);
Parameter(read,com.google.gson.stream.JsonReader,);
SuperClass(com.google.gson.functional.TypeAdapter);
Generalization(com.google.gson.functional.TypeAdapter);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter,write --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter,read --> nextString,com.google.gson.stream.JsonReader,);
EndClass 456
StartClass 457
Class(com.google.gson.functional.TypeAdapter,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter);
EndClass 457
StartClass 458
Class(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory,N,N,Private);
Method(create,com.google.gson.TypeAdapter,Public,N,N);
Method(write,void,Public,N,N);
Method(read,com.google.gson.functional.T,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.functional.T,);
Parameter(read,com.google.gson.stream.JsonReader,);
Realization(com.google.gson.TypeAdapterFactory);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory,write --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory,read --> nextString,com.google.gson.stream.JsonReader,);
EndClass 458
StartClass 459
Class(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer,N,N,Private);
Attribute(user,com.google.gson.functional.User,Public,N,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,com.google.gson.functional.User,);
Composition(com.google.gson.functional.User);
Call(ATTRIBUTE,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer,<init> --> user,com.google.gson.functional.User,READ);
EndClass 459
StartClass 460
Class(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User,N,N,Private);
Attribute(name,java.lang.String,Public,N,Y,);
Method(<init>,void,Private,N,N);
Parameter(<init>,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User,<init> --> name,java.lang.String,READ);
EndClass 460
StartClass 461
Class(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2,N,N,Private);
Attribute(user,com.google.gson.functional.User,Public,N,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,com.google.gson.functional.User,);
Composition(com.google.gson.functional.User);
Call(ATTRIBUTE,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2,<init> --> user,com.google.gson.functional.User,READ);
EndClass 461
StartClass 462
Class(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts,N,N,Private);
Attribute(part1,com.google.gson.functional.Part,Public,N,Y,);
Attribute(part2,com.google.gson.functional.Part,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(testJsonAdapterWrappedInNullSafeAsRequested,void,Public,N,N);
Parameter(<init>,com.google.gson.functional.Part,);
Parameter(<init>,com.google.gson.functional.Part,);
Composition(com.google.gson.functional.Part);
Call(ATTRIBUTE,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts,<init> --> part1,com.google.gson.functional.Part,READ);
Call(ATTRIBUTE,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts,<init> --> part2,com.google.gson.functional.Part,READ);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts,testJsonAdapterWrappedInNullSafeAsRequested --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts,testJsonAdapterWrappedInNullSafeAsRequested --> assertNull,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts,testJsonAdapterWrappedInNullSafeAsRequested --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts,testJsonAdapterWrappedInNullSafeAsRequested --> assertFalse,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts,testJsonAdapterWrappedInNullSafeAsRequested --> contains,java.lang.String,);
EndClass 462
StartClass 463
Class(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart,N,N,Private);
Attribute(part,com.google.gson.functional.Part,Public,N,Y,);
Method(<init>,void,Private,N,N);
Method(testNonPrimitiveFieldAnnotationTakesPrecedenceOverDefault,void,Public,N,N);
Method(testPrimitiveFieldAnnotationTakesPrecedenceOverDefault,void,Public,N,N);
Parameter(<init>,com.google.gson.functional.Part,);
Composition(com.google.gson.functional.Part);
Call(ATTRIBUTE,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart,<init> --> part,com.google.gson.functional.Part,READ);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart,testNonPrimitiveFieldAnnotationTakesPrecedenceOverDefault --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart,testNonPrimitiveFieldAnnotationTakesPrecedenceOverDefault --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart,testNonPrimitiveFieldAnnotationTakesPrecedenceOverDefault --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart,testNonPrimitiveFieldAnnotationTakesPrecedenceOverDefault --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart,testPrimitiveFieldAnnotationTakesPrecedenceOverDefault --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart,testPrimitiveFieldAnnotationTakesPrecedenceOverDefault --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart,testPrimitiveFieldAnnotationTakesPrecedenceOverDefault --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart,testPrimitiveFieldAnnotationTakesPrecedenceOverDefault --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart,);
EndClass 463
StartClass 464
Class(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart.GadgetWithPrimitivePart,N,N,Private);
Attribute(part,long,Public,N,Y,);
Method(<init>,void,Private,N,N);
Parameter(<init>,long,);
Call(ATTRIBUTE,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart.GadgetWithPrimitivePart,<init> --> part,long,READ);
EndClass 464
StartClass 465
Class(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart.GadgetWithPrimitivePart.LongToStringTypeAdapterFactory,N,N,Private);
Attribute(ADAPTER,com.google.gson.TypeAdapter,Public,Y,Y,);
Method(write,void,Public,N,N);
Method(read,java.lang.Long,Public,N,N);
Method(create,com.google.gson.TypeAdapter,Public,N,N);
Method(testFieldAnnotationWorksForParameterizedType,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,java.lang.Long,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
Realization(com.google.gson.TypeAdapterFactory);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart.GadgetWithPrimitivePart.LongToStringTypeAdapterFactory,write --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart.GadgetWithPrimitivePart.LongToStringTypeAdapterFactory,write --> toString,java.lang.Long,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart.GadgetWithPrimitivePart.LongToStringTypeAdapterFactory,read --> nextLong,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart.GadgetWithPrimitivePart.LongToStringTypeAdapterFactory,create --> getRawType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart.GadgetWithPrimitivePart.LongToStringTypeAdapterFactory,create --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart.GadgetWithPrimitivePart.LongToStringTypeAdapterFactory,create --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart.GadgetWithPrimitivePart.LongToStringTypeAdapterFactory,testFieldAnnotationWorksForParameterizedType --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart.GadgetWithPrimitivePart.LongToStringTypeAdapterFactory,testFieldAnnotationWorksForParameterizedType --> asList,null,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart.GadgetWithPrimitivePart.LongToStringTypeAdapterFactory,testFieldAnnotationWorksForParameterizedType --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart.GadgetWithPrimitivePart.LongToStringTypeAdapterFactory,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart.GadgetWithPrimitivePart.LongToStringTypeAdapterFactory,testFieldAnnotationWorksForParameterizedType --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart.GadgetWithPrimitivePart.LongToStringTypeAdapterFactory,testFieldAnnotationWorksForParameterizedType --> assertEquals,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart.GadgetWithPrimitivePart.LongToStringTypeAdapterFactory,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart.GadgetWithPrimitivePart.LongToStringTypeAdapterFactory,testFieldAnnotationWorksForParameterizedType --> get,com.google.gson.functional.Gizmo2,);
EndClass 465
StartClass 466
Class(com.google.gson.functional.Gizmo2,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 466
StartClass 467
Class(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart.GadgetWithPrimitivePart.LongToStringTypeAdapterFactory.Gizmo2,N,N,Private);
Attribute(part,java.util.List,Public,N,N,);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.util.List,);
Call(ATTRIBUTE,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart.GadgetWithPrimitivePart.LongToStringTypeAdapterFactory.Gizmo2,<init> --> part,java.util.List,READ);
EndClass 467
StartClass 468
Class(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart.GadgetWithPrimitivePart.LongToStringTypeAdapterFactory.Gizmo2.Gizmo2PartTypeAdapterFactory,N,N,Private);
Method(create,com.google.gson.TypeAdapter,Public,N,N);
Method(write,void,Public,N,N);
Method(read,com.google.gson.functional.T,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.functional.T,);
Parameter(read,com.google.gson.stream.JsonReader,);
Realization(com.google.gson.TypeAdapterFactory);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart.GadgetWithPrimitivePart.LongToStringTypeAdapterFactory.Gizmo2.Gizmo2PartTypeAdapterFactory,write --> value,com.google.gson.stream.JsonWriter,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart.GadgetWithPrimitivePart.LongToStringTypeAdapterFactory.Gizmo2.Gizmo2PartTypeAdapterFactory,read --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Gadget.Gizmo.Part.PartJsonFieldAnnotationAdapter.GizmoPartTypeAdapterFactory.Computer.User.UserClassAnnotationAdapter.Computer2.UserFieldAnnotationAdapter.RegisteredUserAdapter.GadgetWithTwoParts.GadgetWithOptionalPart.GadgetWithPrimitivePart.LongToStringTypeAdapterFactory.Gizmo2.Gizmo2PartTypeAdapterFactory,read --> asList,null,);
EndClass 468
StartClass 469
Class(com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer,N,N,Private);
Attribute(user1,com.google.gson.functional.User,Public,N,Y,);
Attribute(user2,com.google.gson.functional.User,Public,N,Y,);
Attribute(user3,com.google.gson.functional.User,Public,N,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,com.google.gson.functional.User,);
Parameter(<init>,com.google.gson.functional.User,);
Parameter(<init>,com.google.gson.functional.User,);
Composition(com.google.gson.functional.User);
Call(ATTRIBUTE,com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer,<init> --> user1,com.google.gson.functional.User,READ);
Call(ATTRIBUTE,com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer,<init> --> user2,com.google.gson.functional.User,READ);
Call(ATTRIBUTE,com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer,<init> --> user3,com.google.gson.functional.User,READ);
EndClass 469
StartClass 470
Class(com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User,N,N,Private);
Attribute(name,java.lang.String,Public,N,Y,);
Method(<init>,void,Private,N,N);
Parameter(<init>,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User,<init> --> name,java.lang.String,READ);
EndClass 470
StartClass 471
Class(com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer,N,N,Private);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(serialize,com.google.gson.functional.User,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Realization(com.google.gson.functional.JsonSerializer);
EndClass 471
StartClass 472
Class(com.google.gson.functional.JsonSerializer,Y,Y,Public);
EndClass 472
StartClass 473
Class(com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer,N,N,Private);
Method(deserialize,com.google.gson.functional.User,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
Realization(com.google.gson.functional.JsonDeserializer);
EndClass 473
StartClass 474
Class(com.google.gson.functional.JsonDeserializer,Y,Y,Public);
EndClass 474
StartClass 475
Class(com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer.UserSerializerDeserializer,N,N,Private);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(deserialize,com.google.gson.functional.User,Public,N,N);
Method(testJsonSerializerDeserializerBasedJsonAdapterOnClass,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(serialize,com.google.gson.functional.User,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
Realization(com.google.gson.functional.JsonSerializer);
Realization(com.google.gson.functional.JsonDeserializer);
Call(METHOD,com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer.UserSerializerDeserializer,testJsonSerializerDeserializerBasedJsonAdapterOnClass --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer.UserSerializerDeserializer,testJsonSerializerDeserializerBasedJsonAdapterOnClass --> assertEquals,com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer.UserSerializerDeserializer,);
Call(METHOD,com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer.UserSerializerDeserializer,testJsonSerializerDeserializerBasedJsonAdapterOnClass --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer.UserSerializerDeserializer,testJsonSerializerDeserializerBasedJsonAdapterOnClass --> assertEquals,com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer.UserSerializerDeserializer,);
EndClass 475
StartClass 476
Class(com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer.UserSerializerDeserializer.Computer2,N,N,Private);
Attribute(user,com.google.gson.functional.User2,Public,N,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,com.google.gson.functional.User2,);
Composition(com.google.gson.functional.User2);
Call(ATTRIBUTE,com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer.UserSerializerDeserializer.Computer2,<init> --> user,com.google.gson.functional.User2,READ);
EndClass 476
StartClass 477
Class(com.google.gson.functional.User2,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 477
StartClass 478
Class(com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer.UserSerializerDeserializer.Computer2.User2,N,N,Private);
Attribute(name,java.lang.String,Public,N,Y,);
Method(<init>,void,Private,N,N);
Parameter(<init>,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer.UserSerializerDeserializer.Computer2.User2,<init> --> name,java.lang.String,READ);
EndClass 478
StartClass 479
Class(com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer.UserSerializerDeserializer.Computer2.User2.UserSerializerDeserializer2,N,N,Private);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(deserialize,com.google.gson.functional.User2,Public,N,N);
Method(testDifferentJsonAdaptersForGenericFieldsOfSameRawType,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(serialize,com.google.gson.functional.User2,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
Realization(com.google.gson.functional.JsonSerializer);
Realization(com.google.gson.functional.JsonDeserializer);
Call(METHOD,com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer.UserSerializerDeserializer.Computer2.User2.UserSerializerDeserializer2,testDifferentJsonAdaptersForGenericFieldsOfSameRawType --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer.UserSerializerDeserializer.Computer2.User2.UserSerializerDeserializer2,testDifferentJsonAdaptersForGenericFieldsOfSameRawType --> assertTrue,com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer.UserSerializerDeserializer.Computer2.User2.UserSerializerDeserializer2,);
Call(METHOD,com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer.UserSerializerDeserializer.Computer2.User2.UserSerializerDeserializer2,testDifferentJsonAdaptersForGenericFieldsOfSameRawType --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer.UserSerializerDeserializer.Computer2.User2.UserSerializerDeserializer2,testDifferentJsonAdaptersForGenericFieldsOfSameRawType --> assertTrue,com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer.UserSerializerDeserializer.Computer2.User2.UserSerializerDeserializer2,);
Call(METHOD,com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer.UserSerializerDeserializer.Computer2.User2.UserSerializerDeserializer2,testDifferentJsonAdaptersForGenericFieldsOfSameRawType --> contains,java.lang.String,);
EndClass 479
StartClass 480
Class(com.google.gson.functional.JsonSerializer,Y,Y,Public);
EndClass 480
StartClass 481
Class(com.google.gson.functional.JsonDeserializer,Y,Y,Public);
EndClass 481
StartClass 482
Class(com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer.UserSerializerDeserializer.Computer2.User2.UserSerializerDeserializer2.Container,N,N,Private);
Attribute(a,com.google.gson.functional.Base,Public,N,N,);
Attribute(b,com.google.gson.functional.Base,Public,N,N,);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,int,);
EndClass 482
StartClass 483
Class(com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer.UserSerializerDeserializer.Computer2.User2.UserSerializerDeserializer2.Container.Base,N,N,Private);
Attribute(value,com.google.gson.functional.T,Public,N,N,);
Method(<init>,void,Public,N,N);
Parameter(<init>,com.google.gson.functional.T,);
Call(ATTRIBUTE,com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer.UserSerializerDeserializer.Computer2.User2.UserSerializerDeserializer2.Container.Base,<init> --> value,com.google.gson.functional.T,READ);
EndClass 483
StartClass 484
Class(com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer.UserSerializerDeserializer.Computer2.User2.UserSerializerDeserializer2.Container.Base.BaseStringAdapter,N,N,Private);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(serialize,com.google.gson.functional.Base,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Realization(com.google.gson.functional.JsonSerializer);
EndClass 484
StartClass 485
Class(com.google.gson.functional.JsonSerializer,Y,Y,Public);
EndClass 485
StartClass 486
Class(com.google.gson.functional.JsonAdapterSerializerDeserializerTest.Computer.User.UserSerializer.UserDeserializer.UserSerializerDeserializer.Computer2.User2.UserSerializerDeserializer2.Container.Base.BaseStringAdapter.BaseIntegerAdapter,N,N,Private);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(serialize,com.google.gson.functional.Base,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Realization(com.google.gson.functional.JsonSerializer);
EndClass 486
StartClass 487
Class(com.google.gson.functional.JsonSerializer,Y,Y,Public);
EndClass 487
StartClass 488
Class(com.google.gson.functional.MapAsArrayTypeAdapterTest.Point,N,N,Protected);
Attribute(x,int,Public,N,N,);
Attribute(y,int,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Parameter(<init>,int,);
Parameter(<init>,int,);
Parameter(equals,java.lang.Object,);
Call(ATTRIBUTE,com.google.gson.functional.MapAsArrayTypeAdapterTest.Point,<init> --> x,int,READ);
Call(ATTRIBUTE,com.google.gson.functional.MapAsArrayTypeAdapterTest.Point,<init> --> y,int,READ);
EndClass 488
StartClass 489
Class(com.google.gson.functional.MapAsArrayTypeAdapterTest.Point.PointWithProperty,N,N,Protected);
Attribute(map,java.util.Map,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 489
StartClass 490
Class(com.google.gson.functional.MapTest.MyParameterizedMap,N,N,Private);
Attribute(foo,int,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(testMapSubclassSerialization,void,Public,N,N);
Method(testMapStandardSubclassDeserialization,void,Public,N,N);
Method(testMapSubclassDeserialization,void,Public,N,N);
Method(createInstance,com.google.gson.functional.MyMap,Public,N,N);
Method(testCustomSerializerForSpecificMapType,void,Public,N,N);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Parameter(<init>,int,);
Parameter(createInstance,java.lang.reflect.Type,);
Parameter(serialize,java.util.Map,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
SuperClass(com.google.gson.functional.LinkedHashMap);
Generalization(com.google.gson.functional.LinkedHashMap);
Call(ATTRIBUTE,com.google.gson.functional.MapTest.MyParameterizedMap,<init> --> foo,int,READ);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,testMapSubclassSerialization --> put,com.google.gson.functional.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,testMapSubclassSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,testMapSubclassSerialization --> assertTrue,com.google.gson.functional.MapTest.MyParameterizedMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,testMapSubclassSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,testMapStandardSubclassDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,testMapStandardSubclassDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,testMapStandardSubclassDeserialization --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,testMapStandardSubclassDeserialization --> get,java.util.LinkedHashMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,testMapStandardSubclassDeserialization --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,testMapStandardSubclassDeserialization --> get,java.util.LinkedHashMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,testMapSubclassDeserialization --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,createInstance --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,createInstance --> fromJson,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,createInstance --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,createInstance --> get,com.google.gson.functional.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,createInstance --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,createInstance --> get,com.google.gson.functional.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,testCustomSerializerForSpecificMapType --> newParameterizedTypeWithOwner,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,testCustomSerializerForSpecificMapType --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,serialize --> values,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,serialize --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,serialize --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,serialize --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,serialize --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,serialize --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,serialize --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap,serialize --> toJson,null,);
EndClass 490
StartClass 491
Class(com.google.gson.functional.MyMap,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 491
StartClass 492
Class(com.google.gson.functional.LinkedHashMap,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.MapTest.MyParameterizedMap);
EndClass 492
StartClass 493
Class(com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,N,N,Private);
Attribute(map,java.util.Map,Public,N,N,);
Method(testMapSerializationWithNullValues,void,Public,N,N);
Method(testMapSerializationWithNullValuesSerialized,void,Public,N,N);
Method(testMapSerializationWithWildcardValues,void,Public,N,N);
Method(testMapDeserializationWithWildcardValues,void,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapSerializationWithNullValues --> put,com.google.gson.functional.ClassWithAMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapSerializationWithNullValues --> put,com.google.gson.functional.ClassWithAMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapSerializationWithNullValues --> toJson,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapSerializationWithNullValues --> assertFalse,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapSerializationWithNullValues --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapSerializationWithNullValues --> assertTrue,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapSerializationWithNullValues --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapSerializationWithNullValuesSerialized --> serializeNulls,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapSerializationWithNullValuesSerialized --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapSerializationWithNullValuesSerialized --> put,com.google.gson.functional.ClassWithAMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapSerializationWithNullValuesSerialized --> put,com.google.gson.functional.ClassWithAMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapSerializationWithNullValuesSerialized --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapSerializationWithNullValuesSerialized --> assertTrue,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapSerializationWithNullValuesSerialized --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapSerializationWithNullValuesSerialized --> assertTrue,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapSerializationWithNullValuesSerialized --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapSerializationWithWildcardValues --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapSerializationWithWildcardValues --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapSerializationWithWildcardValues --> toJson,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapSerializationWithWildcardValues --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapDeserializationWithWildcardValues --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapDeserializationWithWildcardValues --> fromJson,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapDeserializationWithWildcardValues --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapDeserializationWithWildcardValues --> size,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapDeserializationWithWildcardValues --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap,testMapDeserializationWithWildcardValues --> get,java.util.Map,);
EndClass 493
StartClass 494
Class(com.google.gson.functional.ClassWithAMap,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 494
StartClass 495
Class(com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,N,N,Private);
Attribute(serialVersionUID,long,Private,Y,Y,);
Attribute(foo,int,Public,N,N,);
Method(testMapOfMapSerialization,void,Public,N,N);
Method(testMapOfMapDeserialization,void,Public,N,N);
Method(testMapWithQuotes,void,Public,N,N);
Method(testWriteMapsWithEmptyStringKey,void,Public,N,N);
Method(testReadMapsWithEmptyStringKey,void,Public,N,N);
Method(testSerializeMaps,void,Public,N,N);
Method(testInterfaceTypeMap,void,Public,N,N);
Method(testInterfaceTypeMapWithSerializer,void,Public,N,N);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(testGeneralMapField,void,Public,N,N);
Method(testComplexKeysSerialization,void,Public,N,N);
Method(testComplexKeysDeserialization,void,Public,N,N);
Method(testStringKeyDeserialization,void,Public,N,N);
Method(testNumberKeyDeserialization,void,Public,N,N);
Method(testBooleanKeyDeserialization,void,Public,N,N);
Method(testMapDeserializationWithDuplicateKeys,void,Public,N,N);
Method(testSerializeMapOfMaps,void,Public,N,N);
Method(testDeerializeMapOfMaps,void,Public,N,N);
Method(newMap,java.util.Map,Public,N,N);
Method(testMapNamePromotionWithJsonElementReader,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(serialize,com.google.gson.functional.TestTypes.Base,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Parameter(newMap,com.google.gson.functional.K,);
Parameter(newMap,com.google.gson.functional.V,);
Parameter(newMap,com.google.gson.functional.K,);
Parameter(newMap,com.google.gson.functional.V,);
SuperClass(com.google.gson.functional.LinkedHashMap);
Generalization(com.google.gson.functional.LinkedHashMap);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapOfMapSerialization --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapOfMapSerialization --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapOfMapSerialization --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapOfMapSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapOfMapSerialization --> assertTrue,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapOfMapSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapOfMapSerialization --> assertTrue,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapOfMapSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapOfMapSerialization --> assertTrue,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapOfMapSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapOfMapDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapOfMapDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapOfMapDeserialization --> get,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapOfMapDeserialization --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapOfMapDeserialization --> get,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapOfMapDeserialization --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapOfMapDeserialization --> get,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapWithQuotes --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapWithQuotes --> toJson,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapWithQuotes --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testWriteMapsWithEmptyStringKey --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testWriteMapsWithEmptyStringKey --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testWriteMapsWithEmptyStringKey --> toJson,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testReadMapsWithEmptyStringKey --> fromJson,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testReadMapsWithEmptyStringKey --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testReadMapsWithEmptyStringKey --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testReadMapsWithEmptyStringKey --> get,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMaps --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMaps --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMaps --> put,java.util.LinkedHashMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMaps --> put,java.util.LinkedHashMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMaps --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMaps --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMaps --> serializeNulls,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMaps --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMaps --> toJson,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMaps --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMaps --> setPrettyPrinting,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMaps --> serializeNulls,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMaps --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMaps --> toJson,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMaps --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMaps --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMaps --> toJson,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMaps --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMaps --> setPrettyPrinting,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMaps --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMaps --> toJson,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMaps --> put,java.util.LinkedHashMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMaps --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMaps --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testInterfaceTypeMap --> addBase,com.google.gson.functional.MapClass,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testInterfaceTypeMap --> addSub,com.google.gson.functional.MapClass,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testInterfaceTypeMap --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testInterfaceTypeMap --> enableComplexMapKeySerialization,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testInterfaceTypeMap --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testInterfaceTypeMap --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testInterfaceTypeMap --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testInterfaceTypeMap --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testInterfaceTypeMap --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testInterfaceTypeMapWithSerializer --> addBase,com.google.gson.functional.MapClass,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testInterfaceTypeMapWithSerializer --> addSub,com.google.gson.functional.MapClass,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testInterfaceTypeMapWithSerializer --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testInterfaceTypeMapWithSerializer --> toJsonTree,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testInterfaceTypeMapWithSerializer --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,serialize --> enableComplexMapKeySerialization,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,serialize --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,serialize --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,serialize --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,serialize --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,serialize --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,serialize --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,serialize --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,serialize --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testGeneralMapField --> put,com.google.gson.functional.MapWithGeneralMapParameters,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testGeneralMapField --> put,com.google.gson.functional.MapWithGeneralMapParameters,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testGeneralMapField --> put,com.google.gson.functional.MapWithGeneralMapParameters,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testGeneralMapField --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testGeneralMapField --> toJson,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testGeneralMapField --> enableComplexMapKeySerialization,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testGeneralMapField --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testGeneralMapField --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testGeneralMapField --> toJson,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testComplexKeysSerialization --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testComplexKeysSerialization --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testComplexKeysSerialization --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testComplexKeysSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testComplexKeysSerialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testComplexKeysSerialization --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testComplexKeysSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testComplexKeysDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testComplexKeysDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testComplexKeysDeserialization --> fail,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testStringKeyDeserialization --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testStringKeyDeserialization --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testStringKeyDeserialization --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testStringKeyDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testStringKeyDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testNumberKeyDeserialization --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testNumberKeyDeserialization --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testNumberKeyDeserialization --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testNumberKeyDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testNumberKeyDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testBooleanKeyDeserialization --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testBooleanKeyDeserialization --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testBooleanKeyDeserialization --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testBooleanKeyDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testBooleanKeyDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapDeserializationWithDuplicateKeys --> fromJson,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapDeserializationWithDuplicateKeys --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapDeserializationWithDuplicateKeys --> fail,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMapOfMaps --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMapOfMaps --> newMap,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMapOfMaps --> newMap,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMapOfMaps --> newMap,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMapOfMaps --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMapOfMaps --> toJson,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testSerializeMapOfMaps --> replace,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testDeerializeMapOfMaps --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testDeerializeMapOfMaps --> newMap,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testDeerializeMapOfMaps --> newMap,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testDeerializeMapOfMaps --> newMap,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testDeerializeMapOfMaps --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testDeerializeMapOfMaps --> fromJson,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,newMap --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,newMap --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapNamePromotionWithJsonElementReader --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapNamePromotionWithJsonElementReader --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapNamePromotionWithJsonElementReader --> assertEquals,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapNamePromotionWithJsonElementReader --> fromJson,null,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap,testMapNamePromotionWithJsonElementReader --> getType,com.google.gson.reflect.TypeToken,);
EndClass 495
StartClass 496
Class(com.google.gson.functional.LinkedHashMap,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap);
EndClass 496
StartClass 497
Class(com.google.gson.functional.MapClass,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 497
StartClass 498
Class(com.google.gson.functional.MapWithGeneralMapParameters,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 498
StartClass 499
Class(com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap.Point,N,N,Protected);
Attribute(x,int,Private,N,Y,);
Attribute(y,int,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Parameter(<init>,int,);
Parameter(<init>,int,);
Parameter(equals,java.lang.Object,);
Call(ATTRIBUTE,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap.Point,<init> --> x,int,READ);
Call(ATTRIBUTE,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap.Point,<init> --> y,int,READ);
EndClass 499
StartClass 500
Class(com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap.Point.MapClass,N,N,Protected);
Attribute(bases,java.util.Map,Private,N,Y,);
Attribute(subs,java.util.Map,Private,N,Y,);
Method(addBase,void,Public,N,N);
Method(addSub,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(addBase,java.lang.String,);
Parameter(addBase,com.google.gson.functional.TestTypes.Base,);
Parameter(addSub,java.lang.String,);
Parameter(addSub,com.google.gson.functional.TestTypes.Sub,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap.Point.MapClass,addBase --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap.Point.MapClass,addSub --> put,java.util.Map,);
EndClass 500
StartClass 501
Class(com.google.gson.functional.MapTest.MyParameterizedMap.ClassWithAMap.MyMap.Point.MapClass.MapWithGeneralMapParameters,N,N,Protected);
Attribute(map,java.util.Map,Public,N,Y,);
Method(<init>,void,Public,N,N);
EndClass 501
StartClass 502
Class(com.google.gson.functional.MoreSpecificTypeSerializationTest.Base,N,N,Private);
Attribute(b,int,Public,N,N,);
Method(<init>,void,Public,N,N);
Parameter(<init>,int,);
Call(ATTRIBUTE,com.google.gson.functional.MoreSpecificTypeSerializationTest.Base,<init> --> b,int,READ);
EndClass 502
StartClass 503
Class(com.google.gson.functional.MoreSpecificTypeSerializationTest.Base.Sub.ClassWithBaseFields,N,N,Private);
Attribute(b,com.google.gson.functional.Base,Public,N,N,);
Method(<init>,void,Public,N,N);
Parameter(<init>,com.google.gson.functional.Base,);
Composition(com.google.gson.functional.Base);
Call(ATTRIBUTE,com.google.gson.functional.MoreSpecificTypeSerializationTest.Base.Sub.ClassWithBaseFields,<init> --> b,com.google.gson.functional.Base,READ);
EndClass 503
StartClass 504
Class(com.google.gson.functional.MoreSpecificTypeSerializationTest.Base.Sub.ClassWithBaseFields.ClassWithContainersOfBaseFields,N,N,Private);
Attribute(collection,java.util.Collection,Public,N,N,);
Attribute(map,java.util.Map,Public,N,N,);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.util.Collection,);
Parameter(<init>,java.util.Map,);
Call(ATTRIBUTE,com.google.gson.functional.MoreSpecificTypeSerializationTest.Base.Sub.ClassWithBaseFields.ClassWithContainersOfBaseFields,<init> --> collection,java.util.Collection,READ);
Call(ATTRIBUTE,com.google.gson.functional.MoreSpecificTypeSerializationTest.Base.Sub.ClassWithBaseFields.ClassWithContainersOfBaseFields,<init> --> map,java.util.Map,READ);
EndClass 504
StartClass 505
Class(com.google.gson.functional.MoreSpecificTypeSerializationTest.Base.Sub.ClassWithBaseFields.ClassWithContainersOfBaseFields.ParameterizedBase,N,N,Private);
Attribute(t,com.google.gson.functional.T,Public,N,N,);
Method(<init>,void,Public,N,N);
Parameter(<init>,com.google.gson.functional.T,);
Call(ATTRIBUTE,com.google.gson.functional.MoreSpecificTypeSerializationTest.Base.Sub.ClassWithBaseFields.ClassWithContainersOfBaseFields.ParameterizedBase,<init> --> t,com.google.gson.functional.T,READ);
EndClass 505
StartClass 506
Class(com.google.gson.functional.MoreSpecificTypeSerializationTest.Base.Sub.ClassWithBaseFields.ClassWithContainersOfBaseFields.ParameterizedBase.ParameterizedSub,N,N,Private);
Attribute(s,com.google.gson.functional.T,Public,N,N,);
Method(<init>,void,Public,N,N);
Parameter(<init>,com.google.gson.functional.T,);
Parameter(<init>,com.google.gson.functional.T,);
SuperClass(com.google.gson.functional.ParameterizedBase);
Generalization(com.google.gson.functional.ParameterizedBase);
Call(METHOD,com.google.gson.functional.MoreSpecificTypeSerializationTest.Base.Sub.ClassWithBaseFields.ClassWithContainersOfBaseFields.ParameterizedBase.ParameterizedSub,<init> --> super,com.google.gson.functional.MoreSpecificTypeSerializationTest.Base.Sub.ClassWithBaseFields.ClassWithContainersOfBaseFields.ParameterizedBase.ParameterizedSub,);
Call(ATTRIBUTE,com.google.gson.functional.MoreSpecificTypeSerializationTest.Base.Sub.ClassWithBaseFields.ClassWithContainersOfBaseFields.ParameterizedBase.ParameterizedSub,<init> --> s,com.google.gson.functional.T,READ);
EndClass 506
StartClass 507
Class(com.google.gson.functional.ParameterizedBase,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.MoreSpecificTypeSerializationTest.Base.Sub.ClassWithBaseFields.ClassWithContainersOfBaseFields.ParameterizedBase.ParameterizedSub);
EndClass 507
StartClass 508
Class(com.google.gson.functional.MoreSpecificTypeSerializationTest.Base.Sub.ClassWithBaseFields.ClassWithContainersOfBaseFields.ParameterizedBase.ParameterizedSub.ClassWithParameterizedBaseFields,N,N,Private);
Attribute(b,com.google.gson.functional.ParameterizedBase,Public,N,N,);
Method(<init>,void,Public,N,N);
Parameter(<init>,com.google.gson.functional.ParameterizedBase,);
Call(ATTRIBUTE,com.google.gson.functional.MoreSpecificTypeSerializationTest.Base.Sub.ClassWithBaseFields.ClassWithContainersOfBaseFields.ParameterizedBase.ParameterizedSub.ClassWithParameterizedBaseFields,<init> --> b,com.google.gson.functional.ParameterizedBase,READ);
EndClass 508
StartClass 509
Class(com.google.gson.functional.MoreSpecificTypeSerializationTest.Base.Sub.ClassWithBaseFields.ClassWithContainersOfBaseFields.ParameterizedBase.ParameterizedSub.ClassWithParameterizedBaseFields.ClassWithContainersOfParameterizedBaseFields,N,N,Private);
Attribute(collection,java.util.Collection,Public,N,N,);
Attribute(map,java.util.Map,Public,N,N,);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.util.Collection,);
Parameter(<init>,java.util.Map,);
Call(ATTRIBUTE,com.google.gson.functional.MoreSpecificTypeSerializationTest.Base.Sub.ClassWithBaseFields.ClassWithContainersOfBaseFields.ParameterizedBase.ParameterizedSub.ClassWithParameterizedBaseFields.ClassWithContainersOfParameterizedBaseFields,<init> --> collection,java.util.Collection,READ);
Call(ATTRIBUTE,com.google.gson.functional.MoreSpecificTypeSerializationTest.Base.Sub.ClassWithBaseFields.ClassWithContainersOfBaseFields.ParameterizedBase.ParameterizedSub.ClassWithParameterizedBaseFields.ClassWithContainersOfParameterizedBaseFields,<init> --> map,java.util.Map,READ);
EndClass 509
StartClass 510
Class(com.google.gson.functional.NamingPolicyTest.AtName,N,N,Protected);
Attribute(f,java.lang.String,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 510
StartClass 511
Class(com.google.gson.functional.NamingPolicyTest.AtName.UpperCaseNamingStrategy,N,N,Private);
Method(translateName,java.lang.String,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(translateName,java.lang.reflect.Field,);
Realization(com.google.gson.FieldNamingStrategy);
Call(METHOD,com.google.gson.functional.NamingPolicyTest.AtName.UpperCaseNamingStrategy,translateName --> getName,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest.AtName.UpperCaseNamingStrategy,translateName --> toUpperCase,java.lang.reflect.Field,);
EndClass 511
StartClass 512
Class(com.google.gson.functional.NamingPolicyTest.AtName.UpperCaseNamingStrategy.ClassWithDuplicateFields,N,N,Private);
Attribute(a,java.lang.Integer,Public,N,N,);
Attribute(b,java.lang.Double,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Parameter(<init>,java.lang.Integer,);
Parameter(<init>$2,java.lang.Double,);
Parameter(<init>$3,java.lang.Integer,);
Parameter(<init>$3,java.lang.Double,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest.AtName.UpperCaseNamingStrategy.ClassWithDuplicateFields,<init> --> <init>$3,com.google.gson.functional.NamingPolicyTest.AtName.UpperCaseNamingStrategy.ClassWithDuplicateFields,);
Call(METHOD,com.google.gson.functional.NamingPolicyTest.AtName.UpperCaseNamingStrategy.ClassWithDuplicateFields,<init>$2 --> <init>$3,com.google.gson.functional.NamingPolicyTest.AtName.UpperCaseNamingStrategy.ClassWithDuplicateFields,);
Call(ATTRIBUTE,com.google.gson.functional.NamingPolicyTest.AtName.UpperCaseNamingStrategy.ClassWithDuplicateFields,<init>$3 --> a,java.lang.Integer,READ);
Call(ATTRIBUTE,com.google.gson.functional.NamingPolicyTest.AtName.UpperCaseNamingStrategy.ClassWithDuplicateFields,<init>$3 --> b,java.lang.Double,READ);
EndClass 512
StartClass 513
Class(com.google.gson.functional.NamingPolicyTest.AtName.UpperCaseNamingStrategy.ClassWithDuplicateFields.ClassWithComplexFieldName,N,N,Private);
Attribute(value,long,Public,N,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,long,);
Call(ATTRIBUTE,com.google.gson.functional.NamingPolicyTest.AtName.UpperCaseNamingStrategy.ClassWithDuplicateFields.ClassWithComplexFieldName,<init> --> value,long,READ);
EndClass 513
StartClass 514
Class(com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers,N,N,Public);
Attribute(MY_STRING_DEFAULT,java.lang.String,Public,Y,Y,);
Attribute(MY_INT_DEFAULT,int,Private,Y,Y,);
Attribute(MY_BOOLEAN_DEFAULT,boolean,Private,Y,Y,);
Attribute(array,int[],Public,N,N,);
Attribute(str1,java.lang.String,Public,N,N,);
Attribute(str2,java.lang.String,Public,N,N,);
Attribute(int1,int,Public,N,N,);
Attribute(int2,int,Public,N,N,);
Attribute(bool1,boolean,Public,N,N,);
Attribute(bool2,boolean,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Call(ATTRIBUTE,com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers,<init> --> str1,java.lang.String,WRITE);
Call(ATTRIBUTE,com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers,<init> --> MY_STRING_DEFAULT,java.lang.String,READ);
EndClass 514
StartClass 515
Class(com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers.ClassWithNullWrappedPrimitive,N,N,Private);
Attribute(value,java.lang.Long,Private,N,N,);
Method(<init>,void,Public,N,N);
EndClass 515
StartClass 516
Class(com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers.ClassWithNullWrappedPrimitive.ClassWithMembers,N,N,Private);
Attribute(str,java.lang.String,Public,N,N,);
Attribute(array,int[],Public,N,N,);
Attribute(col,java.util.Collection,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 516
StartClass 517
Class(com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers.ClassWithNullWrappedPrimitive.ClassWithMembers.ClassWithObjectsSerializer,N,N,Private);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(testExplicitNullSetsFieldToNullDuringDeserialization,void,Public,N,N);
Method(testCustomTypeAdapterPassesNullSerialization,void,Public,N,N);
Method(serialize$2,com.google.gson.JsonElement,Public,N,N);
Method(testCustomTypeAdapterPassesNullDesrialization,void,Public,N,N);
Method(deserialize,com.google.gson.functional.ObjectWithField,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(serialize,com.google.gson.common.TestTypes.ClassWithObjects,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Parameter(serialize$2,com.google.gson.functional.ObjectWithField,);
Parameter(serialize$2,java.lang.reflect.Type,);
Parameter(serialize$2,com.google.gson.JsonSerializationContext,);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
Realization(com.google.gson.functional.JsonSerializer);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers.ClassWithNullWrappedPrimitive.ClassWithMembers.ClassWithObjectsSerializer,serialize --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers.ClassWithNullWrappedPrimitive.ClassWithMembers.ClassWithObjectsSerializer,testExplicitNullSetsFieldToNullDuringDeserialization --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers.ClassWithNullWrappedPrimitive.ClassWithMembers.ClassWithObjectsSerializer,testExplicitNullSetsFieldToNullDuringDeserialization --> assertNull,com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers.ClassWithNullWrappedPrimitive.ClassWithMembers.ClassWithObjectsSerializer,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers.ClassWithNullWrappedPrimitive.ClassWithMembers.ClassWithObjectsSerializer,testCustomTypeAdapterPassesNullSerialization --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers.ClassWithNullWrappedPrimitive.ClassWithMembers.ClassWithObjectsSerializer,serialize$2 --> serialize,com.google.gson.JsonSerializationContext,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers.ClassWithNullWrappedPrimitive.ClassWithMembers.ClassWithObjectsSerializer,serialize$2 --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers.ClassWithNullWrappedPrimitive.ClassWithMembers.ClassWithObjectsSerializer,serialize$2 --> toJson,null,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers.ClassWithNullWrappedPrimitive.ClassWithMembers.ClassWithObjectsSerializer,serialize$2 --> assertFalse,com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers.ClassWithNullWrappedPrimitive.ClassWithMembers.ClassWithObjectsSerializer,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers.ClassWithNullWrappedPrimitive.ClassWithMembers.ClassWithObjectsSerializer,serialize$2 --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers.ClassWithNullWrappedPrimitive.ClassWithMembers.ClassWithObjectsSerializer,testCustomTypeAdapterPassesNullDesrialization --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers.ClassWithNullWrappedPrimitive.ClassWithMembers.ClassWithObjectsSerializer,deserialize --> deserialize,com.google.gson.JsonDeserializationContext,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers.ClassWithNullWrappedPrimitive.ClassWithMembers.ClassWithObjectsSerializer,deserialize --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers.ClassWithNullWrappedPrimitive.ClassWithMembers.ClassWithObjectsSerializer,deserialize --> fromJson,null,);
Call(METHOD,com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers.ClassWithNullWrappedPrimitive.ClassWithMembers.ClassWithObjectsSerializer,deserialize --> assertNull,com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers.ClassWithNullWrappedPrimitive.ClassWithMembers.ClassWithObjectsSerializer,);
EndClass 517
StartClass 518
Class(com.google.gson.functional.ObjectWithField,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 518
StartClass 519
Class(com.google.gson.functional.JsonSerializer,Y,Y,Public);
EndClass 519
StartClass 520
Class(com.google.gson.functional.NullObjectAndFieldTest.ClassWithInitializedMembers.ClassWithNullWrappedPrimitive.ClassWithMembers.ClassWithObjectsSerializer.ObjectWithField,N,N,Private);
Attribute(value,java.lang.String,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 520
StartClass 521
Class(com.google.gson.functional.ObjectTest.ClassWithCollectionField,N,N,Private);
Attribute(children,java.util.Collection,Public,N,N,);
Method(testPrimitiveArrayInAnObjectDeserialization,void,Public,N,N);
Method(testNullPrimitiveFieldsDeserialization,void,Public,N,N);
Method(testEmptyCollectionInAnObjectSerialization,void,Public,N,N);
Method(testPrivateNoArgConstructorDeserialization,void,Public,N,N);
Method(testAnonymousLocalClassesSerialization,void,Public,N,N);
Method(testAnonymousLocalClassesCustomSerialization,void,Public,N,N);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(testPrimitiveArrayFieldSerialization,void,Public,N,N);
Method(testClassWithObjectFieldSerialization,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(serialize,com.google.gson.common.TestTypes.ClassWithNoFields,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField,testPrimitiveArrayInAnObjectDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField,testPrimitiveArrayInAnObjectDeserialization --> assertEquals,com.google.gson.functional.ObjectTest.ClassWithCollectionField,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField,testPrimitiveArrayInAnObjectDeserialization --> getExpectedJson,com.google.gson.common.TestTypes.PrimitiveArray,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField,testNullPrimitiveFieldsDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField,testNullPrimitiveFieldsDeserialization --> assertEquals,com.google.gson.functional.ObjectTest.ClassWithCollectionField,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField,testEmptyCollectionInAnObjectSerialization --> assertEquals,com.google.gson.functional.ObjectTest.ClassWithCollectionField,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField,testEmptyCollectionInAnObjectSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField,testPrivateNoArgConstructorDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField,testPrivateNoArgConstructorDeserialization --> assertEquals,com.google.gson.functional.ObjectTest.ClassWithCollectionField,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField,testAnonymousLocalClassesSerialization --> assertEquals,com.google.gson.functional.ObjectTest.ClassWithCollectionField,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField,testAnonymousLocalClassesSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField,testAnonymousLocalClassesCustomSerialization --> registerTypeHierarchyAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField,serialize --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField,serialize --> assertEquals,com.google.gson.functional.ObjectTest.ClassWithCollectionField,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField,serialize --> toJson,null,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField,testPrimitiveArrayFieldSerialization --> assertEquals,com.google.gson.functional.ObjectTest.ClassWithCollectionField,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField,testPrimitiveArrayFieldSerialization --> getExpectedJson,com.google.gson.common.TestTypes.PrimitiveArray,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField,testPrimitiveArrayFieldSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField,testClassWithObjectFieldSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField,testClassWithObjectFieldSerialization --> assertTrue,com.google.gson.functional.ObjectTest.ClassWithCollectionField,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField,testClassWithObjectFieldSerialization --> contains,java.lang.String,);
EndClass 521
StartClass 522
Class(com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField,N,N,Private);
Attribute(member,java.lang.Object,Public,N,N,);
Method(testInnerClassSerialization,void,Public,N,N);
Method(testInnerClassDeserialization,void,Public,N,N);
Method(createInstance,com.google.gson.functional.Parent.Child,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(createInstance,java.lang.reflect.Type,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField,testInnerClassSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField,testInnerClassSerialization --> assertTrue,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField,testInnerClassSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField,testInnerClassSerialization --> assertFalse,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField,testInnerClassSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField,testInnerClassDeserialization --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField,createInstance --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField,createInstance --> fromJson,null,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField,createInstance --> assertEquals,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField,);
EndClass 522
StartClass 523
Class(com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent,N,N,Private);
Attribute(value1,int,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 523
StartClass 524
Class(com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child,N,N,Private);
Attribute(value2,int,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 524
StartClass 525
Class(com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays,N,N,Private);
Attribute(elements,com.google.gson.common.TestTypes.BagOfPrimitives[][],Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(getExpectedJson,java.lang.String,Public,N,N);
Call(ATTRIBUTE,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays,<init> --> elements,com.google.gson.common.TestTypes.BagOfPrimitives[][],WRITE);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays,getExpectedJson --> getExpectedJson,null,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays,getExpectedJson --> toString,com.google.gson.functional.StringBuilder,);
EndClass 525
StartClass 526
Class(com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,N,N,Private);
Attribute(a,int,Public,N,N,);
Method(<init>,void,Private,N,N);
Method(testObjectFieldNamesWithoutQuotesDeserialization,void,Public,N,N);
Method(testStringFieldWithNumberValueDeserialization,void,Public,N,N);
Method(testStringFieldWithEmptyValueSerialization,void,Public,N,N);
Method(testStringFieldWithEmptyValueDeserialization,void,Public,N,N);
Call(ATTRIBUTE,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,<init> --> a,int,WRITE);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,testObjectFieldNamesWithoutQuotesDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,testObjectFieldNamesWithoutQuotesDeserialization --> assertEquals,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,testObjectFieldNamesWithoutQuotesDeserialization --> assertTrue,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,testObjectFieldNamesWithoutQuotesDeserialization --> assertEquals,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,testStringFieldWithNumberValueDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,testStringFieldWithNumberValueDeserialization --> assertEquals,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,testStringFieldWithNumberValueDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,testStringFieldWithNumberValueDeserialization --> assertEquals,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,testStringFieldWithNumberValueDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,testStringFieldWithNumberValueDeserialization --> assertEquals,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,testStringFieldWithEmptyValueSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,testStringFieldWithEmptyValueSerialization --> assertTrue,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,testStringFieldWithEmptyValueSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,testStringFieldWithEmptyValueSerialization --> assertTrue,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,testStringFieldWithEmptyValueSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,testStringFieldWithEmptyValueSerialization --> assertTrue,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,testStringFieldWithEmptyValueSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,testStringFieldWithEmptyValueDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,testStringFieldWithEmptyValueDeserialization --> assertEquals,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,testStringFieldWithEmptyValueDeserialization --> assertEquals,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,testStringFieldWithEmptyValueDeserialization --> assertEquals,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor,);
EndClass 526
StartClass 527
Class(com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,N,N,Private);
Attribute(a,java.lang.String,Public,N,N,);
Attribute(b,java.lang.String,Public,N,N,);
Attribute(c,java.lang.String,Public,N,N,);
Method(testJsonObjectSerialization,void,Public,N,N);
Method(testSingletonLists,void,Public,N,N);
Method(testDateAsMapObjectField,void,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,testJsonObjectSerialization --> serializeNulls,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,testJsonObjectSerialization --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,testJsonObjectSerialization --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,testJsonObjectSerialization --> assertEquals,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,testSingletonLists --> assertEquals,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,testSingletonLists --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,testSingletonLists --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,testSingletonLists --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,testSingletonLists --> add,com.google.gson.functional.Product,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,testSingletonLists --> assertEquals,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,testSingletonLists --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,testSingletonLists --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,testSingletonLists --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,testSingletonLists --> add,com.google.gson.functional.Product,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,testSingletonLists --> assertEquals,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,testSingletonLists --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,testSingletonLists --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,testSingletonLists --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,testDateAsMapObjectField --> put,com.google.gson.functional.HasObjectMap,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,testDateAsMapObjectField --> isJava9OrLater,null,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,testDateAsMapObjectField --> assertEquals,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,testDateAsMapObjectField --> toJson,null,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,testDateAsMapObjectField --> assertEquals,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,);
Call(METHOD,com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields,testDateAsMapObjectField --> toJson,null,);
EndClass 527
StartClass 528
Class(com.google.gson.functional.Product,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 528
StartClass 529
Class(com.google.gson.functional.HasObjectMap,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 529
StartClass 530
Class(com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields.HasObjectMap,N,N,Public);
Attribute(map,java.util.Map,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 530
StartClass 531
Class(com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields.HasObjectMap.Department,N,N,Protected);
Attribute(name,java.lang.String,Public,N,N,);
Attribute(code,java.lang.String,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 531
StartClass 532
Class(com.google.gson.functional.ObjectTest.ClassWithCollectionField.ClassWithObjectField.Parent.Child.ArrayOfArrays.ClassWithPrivateNoArgsConstructor.ClassWithEmptyStringFields.HasObjectMap.Department.Product,N,N,Protected);
Attribute(attributes,java.util.List,Private,N,N,);
Attribute(departments,java.util.List,Private,N,N,);
Method(<init>,void,Public,N,N);
EndClass 532
StartClass 533
Class(com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,N,N,Private);
Attribute(typeParameterObj,com.google.gson.functional.T,Private,N,Y,);
Attribute(typeParameterArray,com.google.gson.functional.T[],Private,N,Y,);
Attribute(listOfTypeParameters,java.util.List,Private,N,Y,);
Attribute(arrayOfListOfTypeParameters,com.google.gson.functional.List,Private,N,Y,);
Attribute(listOfWildcardTypeParameters,java.util.List,Private,N,Y,);
Attribute(arrayOfListOfWildcardTypeParameters,com.google.gson.functional.List,Private,N,Y,);
Method(<init>,void,Private,N,N);
Method(<init>$2,void,Public,N,N);
Method(getExpectedJson,java.lang.String,Public,N,N);
Method(appendObjectsToBuilder,void,Private,N,N);
Method(appendObjectsToBuilder$2,void,Private,N,N);
Method(toString,java.lang.String,Public,N,N);
Parameter(<init>$2,com.google.gson.functional.T,);
Parameter(<init>$2,com.google.gson.functional.T[],);
Parameter(<init>$2,java.util.List,);
Parameter(<init>$2,com.google.gson.functional.List,);
Parameter(<init>$2,java.util.List,);
Parameter(<init>$2,com.google.gson.functional.List,);
Parameter(appendObjectsToBuilder,com.google.gson.functional.StringBuilder,);
Parameter(appendObjectsToBuilder,java.lang.Iterable,);
Parameter(appendObjectsToBuilder$2,com.google.gson.functional.StringBuilder,);
Parameter(appendObjectsToBuilder$2,com.google.gson.functional.List,);
Parameter(toString,com.google.gson.functional.T,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,<init> --> <init>$2,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> toString,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> appendObjectsToBuilder,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> asList,null,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> appendObjectsToBuilder,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> appendObjectsToBuilder,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> appendObjectsToBuilder,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> appendObjectsToBuilder,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,getExpectedJson --> toString,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,appendObjectsToBuilder --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,appendObjectsToBuilder --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,appendObjectsToBuilder --> toString,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,appendObjectsToBuilder$2 --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,appendObjectsToBuilder$2 --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,appendObjectsToBuilder$2 --> appendObjectsToBuilder,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,appendObjectsToBuilder$2 --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,appendObjectsToBuilder$2 --> append,com.google.gson.functional.StringBuilder,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables,toString --> toString,com.google.gson.functional.T,);
EndClass 533
StartClass 534
Class(com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters,N,N,Private);
Attribute(a,com.google.gson.functional.A,Public,N,N,);
Attribute(b,com.google.gson.functional.B,Public,N,N,);
Attribute(c,com.google.gson.functional.C,Public,N,N,);
Attribute(d,com.google.gson.functional.D,Public,N,N,);
Attribute(e,com.google.gson.functional.E,Public,N,N,);
Method(<init>,void,Private,N,N);
Method(<init>$2,void,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(equals,boolean,Public,N,N);
Parameter(<init>$2,com.google.gson.functional.A,);
Parameter(<init>$2,com.google.gson.functional.B,);
Parameter(<init>$2,com.google.gson.functional.C,);
Parameter(<init>$2,com.google.gson.functional.D,);
Parameter(<init>$2,com.google.gson.functional.E,);
Parameter(equals,java.lang.Object,);
Composition(com.google.gson.functional.A);
Composition(com.google.gson.functional.B);
Composition(com.google.gson.functional.C);
Composition(com.google.gson.functional.D);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters,<init>$2 --> super,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters,);
Call(ATTRIBUTE,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters,<init>$2 --> a,com.google.gson.functional.A,READ);
Call(ATTRIBUTE,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters,<init>$2 --> b,com.google.gson.functional.B,READ);
Call(ATTRIBUTE,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters,<init>$2 --> c,com.google.gson.functional.C,READ);
Call(ATTRIBUTE,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters,<init>$2 --> d,com.google.gson.functional.D,READ);
Call(ATTRIBUTE,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters,<init>$2 --> e,com.google.gson.functional.E,READ);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters,hashCode --> hashCode,com.google.gson.functional.A,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters,hashCode --> hashCode,com.google.gson.functional.B,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters,hashCode --> hashCode,com.google.gson.functional.C,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters,hashCode --> hashCode,com.google.gson.functional.D,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters,hashCode --> hashCode,com.google.gson.functional.E,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters,equals --> getClass,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters,equals --> getClass,java.lang.Object,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters,equals --> equals,com.google.gson.functional.A,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters,equals --> equals,com.google.gson.functional.B,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters,equals --> equals,com.google.gson.functional.C,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters,equals --> equals,com.google.gson.functional.D,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters,equals --> equals,com.google.gson.functional.E,);
EndClass 534
StartClass 535
Class(com.google.gson.functional.B,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 535
StartClass 536
Class(com.google.gson.functional.C,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 536
StartClass 537
Class(com.google.gson.functional.D,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 537
StartClass 538
Class(com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters.Quantity,N,N,Private);
Attribute(q,int,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 538
StartClass 539
Class(com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters.Quantity.MyQuantity,N,N,Private);
Attribute(q2,int,Public,N,N,);
Method(<init>,void,Public,N,N);
SuperClass(com.google.gson.functional.Quantity);
Generalization(com.google.gson.functional.Quantity);
EndClass 539
StartClass 540
Class(com.google.gson.functional.Quantity,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters.Quantity.MyQuantity);
EndClass 540
StartClass 541
Class(com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters.Quantity.MyQuantity.Measurable.Field.Immutable.Amount,N,N,Public);
Attribute(serialVersionUID,long,Private,Y,Y,);
Attribute(value,int,Public,N,N,);
Method(testDeepParameterizedTypeSerialization,void,Public,N,N);
Method(testDeepParameterizedTypeDeserialization,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Realization(com.google.gson.functional.Measurable);
Realization(com.google.gson.functional.Field);
Realization(java.io.Serializable);
Realization(com.google.gson.functional.Immutable);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters.Quantity.MyQuantity.Measurable.Field.Immutable.Amount,testDeepParameterizedTypeSerialization --> toJson,null,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters.Quantity.MyQuantity.Measurable.Field.Immutable.Amount,testDeepParameterizedTypeSerialization --> assertTrue,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters.Quantity.MyQuantity.Measurable.Field.Immutable.Amount,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters.Quantity.MyQuantity.Measurable.Field.Immutable.Amount,testDeepParameterizedTypeSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters.Quantity.MyQuantity.Measurable.Field.Immutable.Amount,testDeepParameterizedTypeSerialization --> assertTrue,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters.Quantity.MyQuantity.Measurable.Field.Immutable.Amount,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters.Quantity.MyQuantity.Measurable.Field.Immutable.Amount,testDeepParameterizedTypeSerialization --> contains,java.lang.String,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters.Quantity.MyQuantity.Measurable.Field.Immutable.Amount,testDeepParameterizedTypeDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters.Quantity.MyQuantity.Measurable.Field.Immutable.Amount,testDeepParameterizedTypeDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters.Quantity.MyQuantity.Measurable.Field.Immutable.Amount,testDeepParameterizedTypeDeserialization --> assertEquals,com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters.Quantity.MyQuantity.Measurable.Field.Immutable.Amount,);
EndClass 541
StartClass 542
Class(com.google.gson.functional.Measurable,Y,Y,Public);
EndClass 542
StartClass 543
Class(com.google.gson.functional.Field,Y,Y,Public);
EndClass 543
StartClass 544
Class(com.google.gson.functional.Immutable,Y,Y,Public);
EndClass 544
StartClass 545
Class(com.google.gson.functional.PrettyPrintingTest.ClassWithMap,N,N,Private);
Attribute(map,java.util.Map,Public,N,N,);
Attribute(value,int,Public,N,N,);
Method(testMultipleArrays,void,Public,N,N);
Method(print,void,Private,N,N);
Method(<init>,void,Public,N,N);
Parameter(print,java.lang.String,);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest.ClassWithMap,testMultipleArrays --> toJson,null,);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest.ClassWithMap,testMultipleArrays --> assertEquals,com.google.gson.functional.PrettyPrintingTest.ClassWithMap,);
Call(METHOD,com.google.gson.functional.PrettyPrintingTest.ClassWithMap,print --> println,null,);
EndClass 545
StartClass 546
Class(com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,N,N,Private);
Attribute(i,java.lang.Integer,Public,N,N,);
Method(testPrimitiveClassLiteral,void,Public,N,N);
Method(testDeserializeJsonObjectAsLongPrimitive,void,Public,N,N);
Method(testDeserializeJsonArrayAsLongWrapper,void,Public,N,N);
Method(testDeserializeJsonArrayAsInt,void,Public,N,N);
Method(testDeserializeJsonObjectAsInteger,void,Public,N,N);
Method(testDeserializeJsonObjectAsShortPrimitive,void,Public,N,N);
Method(testDeserializeJsonArrayAsShortWrapper,void,Public,N,N);
Method(testDeserializeJsonArrayAsDoublePrimitive,void,Public,N,N);
Method(testDeserializeJsonObjectAsDoubleWrapper,void,Public,N,N);
Method(testDeserializeJsonObjectAsFloatPrimitive,void,Public,N,N);
Method(testDeserializeJsonArrayAsFloatWrapper,void,Public,N,N);
Method(testDeserializeJsonObjectAsBytePrimitive,void,Public,N,N);
Method(testDeserializeJsonArrayAsByteWrapper,void,Public,N,N);
Method(testDeserializeJsonObjectAsBooleanPrimitive,void,Public,N,N);
Method(testDeserializeJsonArrayAsBooleanWrapper,void,Public,N,N);
Method(testDeserializeJsonArrayAsBigDecimal,void,Public,N,N);
Method(testDeserializeJsonObjectAsBigDecimal,void,Public,N,N);
Method(testDeserializeJsonArrayAsBigInteger,void,Public,N,N);
Method(testDeserializeJsonObjectAsBigInteger,void,Public,N,N);
Method(testDeserializeJsonArrayAsNumber,void,Public,N,N);
Method(testDeserializeJsonObjectAsNumber,void,Public,N,N);
Method(testDeserializingDecimalPointValueZeroSucceeds,void,Public,N,N);
Method(testDeserializingNonZeroDecimalPointValuesAsIntegerFails,void,Public,N,N);
Method(testDeserializingBigDecimalAsIntegerFails,void,Public,N,N);
Method(testDeserializingBigIntegerAsInteger,void,Public,N,N);
Method(testDeserializingBigIntegerAsLong,void,Public,N,N);
Method(testValueVeryCloseToZeroIsZero,void,Public,N,N);
Method(testDeserializingBigDecimalAsFloat,void,Public,N,N);
Method(testDeserializingBigDecimalAsDouble,void,Public,N,N);
Method(testDeserializingBigDecimalAsBigIntegerFails,void,Public,N,N);
Method(testDeserializingBigIntegerAsBigDecimal,void,Public,N,N);
Method(testStringsAsBooleans,void,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testPrimitiveClassLiteral --> assertEquals,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testPrimitiveClassLiteral --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testPrimitiveClassLiteral --> intValue,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testPrimitiveClassLiteral --> assertEquals,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testPrimitiveClassLiteral --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testPrimitiveClassLiteral --> intValue,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testPrimitiveClassLiteral --> assertEquals,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testPrimitiveClassLiteral --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testPrimitiveClassLiteral --> intValue,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonObjectAsLongPrimitive --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonObjectAsLongPrimitive --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonArrayAsLongWrapper --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonArrayAsLongWrapper --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonArrayAsInt --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonArrayAsInt --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonObjectAsInteger --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonObjectAsInteger --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonObjectAsShortPrimitive --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonObjectAsShortPrimitive --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonArrayAsShortWrapper --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonArrayAsShortWrapper --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonArrayAsDoublePrimitive --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonArrayAsDoublePrimitive --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonObjectAsDoubleWrapper --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonObjectAsDoubleWrapper --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonObjectAsFloatPrimitive --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonObjectAsFloatPrimitive --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonArrayAsFloatWrapper --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonArrayAsFloatWrapper --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonObjectAsBytePrimitive --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonObjectAsBytePrimitive --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonArrayAsByteWrapper --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonArrayAsByteWrapper --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonObjectAsBooleanPrimitive --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonObjectAsBooleanPrimitive --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonArrayAsBooleanWrapper --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonArrayAsBooleanWrapper --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonArrayAsBigDecimal --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonArrayAsBigDecimal --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonObjectAsBigDecimal --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonObjectAsBigDecimal --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonArrayAsBigInteger --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonArrayAsBigInteger --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonObjectAsBigInteger --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonObjectAsBigInteger --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonArrayAsNumber --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonArrayAsNumber --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonObjectAsNumber --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializeJsonObjectAsNumber --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingDecimalPointValueZeroSucceeds --> assertEquals,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingDecimalPointValueZeroSucceeds --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingNonZeroDecimalPointValuesAsIntegerFails --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingNonZeroDecimalPointValuesAsIntegerFails --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingNonZeroDecimalPointValuesAsIntegerFails --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingNonZeroDecimalPointValuesAsIntegerFails --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingNonZeroDecimalPointValuesAsIntegerFails --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingNonZeroDecimalPointValuesAsIntegerFails --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingNonZeroDecimalPointValuesAsIntegerFails --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingNonZeroDecimalPointValuesAsIntegerFails --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingBigDecimalAsIntegerFails --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingBigDecimalAsIntegerFails --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingBigIntegerAsInteger --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingBigIntegerAsInteger --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingBigIntegerAsLong --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingBigIntegerAsLong --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testValueVeryCloseToZeroIsZero --> assertEquals,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testValueVeryCloseToZeroIsZero --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testValueVeryCloseToZeroIsZero --> assertEquals,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testValueVeryCloseToZeroIsZero --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testValueVeryCloseToZeroIsZero --> assertEquals,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testValueVeryCloseToZeroIsZero --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testValueVeryCloseToZeroIsZero --> assertEquals,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testValueVeryCloseToZeroIsZero --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testValueVeryCloseToZeroIsZero --> assertEquals,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testValueVeryCloseToZeroIsZero --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testValueVeryCloseToZeroIsZero --> assertEquals,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testValueVeryCloseToZeroIsZero --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testValueVeryCloseToZeroIsZero --> assertEquals,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testValueVeryCloseToZeroIsZero --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testValueVeryCloseToZeroIsZero --> assertEquals,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testValueVeryCloseToZeroIsZero --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingBigDecimalAsFloat --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingBigDecimalAsFloat --> assertEquals,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingBigDecimalAsDouble --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingBigDecimalAsDouble --> assertEquals,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingBigDecimalAsBigIntegerFails --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingBigDecimalAsBigIntegerFails --> fail,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingBigIntegerAsBigDecimal --> fromJson,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingBigIntegerAsBigDecimal --> assertEquals,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testDeserializingBigIntegerAsBigDecimal --> toPlainString,java.math.BigDecimal,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testStringsAsBooleans --> assertEquals,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testStringsAsBooleans --> asList,null,);
Call(METHOD,com.google.gson.functional.PrimitiveTest.ClassWithIntegerField,testStringsAsBooleans --> getType,com.google.gson.reflect.TypeToken,);
EndClass 546
StartClass 547
Class(com.google.gson.functional.RawSerializationTest.Foo,N,N,Private);
Attribute(b,int,Public,N,N,);
Method(<init>,void,Public,N,N);
Parameter(<init>,int,);
Call(ATTRIBUTE,com.google.gson.functional.RawSerializationTest.Foo,<init> --> b,int,READ);
EndClass 547
StartClass 548
Class(com.google.gson.functional.RawSerializationTest.Foo.Bar,N,N,Private);
Attribute(t,com.google.gson.functional.T,Public,N,N,);
Method(<init>,void,Public,N,N);
Parameter(<init>,com.google.gson.functional.T,);
Call(ATTRIBUTE,com.google.gson.functional.RawSerializationTest.Foo.Bar,<init> --> t,com.google.gson.functional.T,READ);
EndClass 548
StartClass 549
Class(com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape,N,N,Protected);
Attribute(type,com.google.gson.functional.ShapeType,Public,N,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,com.google.gson.functional.ShapeType,);
Call(ATTRIBUTE,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape,<init> --> type,com.google.gson.functional.ShapeType,READ);
EndClass 549
StartClass 550
Class(com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory,N,N,Private);
Method(<init>,void,Public,N,N);
SuperClass(com.google.gson.functional.RuntimeTypeAdapterFactory);
Generalization(com.google.gson.functional.RuntimeTypeAdapterFactory);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory,<init> --> super,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory,<init> --> registerSubtype,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory,<init> --> toString,null,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory,<init> --> registerSubtype,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory,<init> --> toString,null,);
EndClass 550
StartClass 551
Class(com.google.gson.functional.RuntimeTypeAdapterFactory,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory);
EndClass 551
StartClass 552
Class(com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 552
StartClass 553
Class(com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle,N,N,Private);
Attribute(radius,int,Public,N,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,int,);
SuperClass(com.google.gson.functional.Shape);
Generalization(com.google.gson.functional.Shape);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle,<init> --> super,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle,);
Call(ATTRIBUTE,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle,<init> --> radius,int,READ);
EndClass 553
StartClass 554
Class(com.google.gson.functional.Shape,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle);
SubClass(com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square);
EndClass 554
StartClass 555
Class(com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square,N,N,Private);
Attribute(side,int,Public,N,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,int,);
SuperClass(com.google.gson.functional.Shape);
Generalization(com.google.gson.functional.Shape);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square,<init> --> super,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square,);
Call(ATTRIBUTE,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square,<init> --> side,int,READ);
EndClass 555
StartClass 556
Class(com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,N,N,Protected);
Attribute(baseType,java.lang.Class,Private,N,Y,);
Attribute(typeFieldName,java.lang.String,Private,N,Y,);
Attribute(labelToSubtype,java.util.Map,Private,N,Y,);
Attribute(subtypeToLabel,java.util.Map,Private,N,Y,);
Method(<init>,void,Protected,N,N);
Method(of,com.google.gson.functional.RuntimeTypeAdapterFactory,Public,N,N);
Method(of$2,com.google.gson.functional.RuntimeTypeAdapterFactory,Public,N,N);
Method(registerSubtype,com.google.gson.functional.RuntimeTypeAdapterFactory,Public,N,N);
Method(registerSubtype$2,com.google.gson.functional.RuntimeTypeAdapterFactory,Public,N,N);
Method(create,com.google.gson.TypeAdapter,Public,N,N);
Method(read,com.google.gson.functional.R,Public,N,N);
Method(write,void,Public,N,N);
Parameter(<init>,java.lang.Class,);
Parameter(<init>,java.lang.String,);
Parameter(of,java.lang.Class,);
Parameter(of,java.lang.String,);
Parameter(of$2,java.lang.Class,);
Parameter(registerSubtype,java.lang.Class,);
Parameter(registerSubtype,java.lang.String,);
Parameter(registerSubtype$2,java.lang.Class,);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.functional.R,);
Realization(com.google.gson.TypeAdapterFactory);
Call(ATTRIBUTE,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,<init> --> baseType,java.lang.Class,READ);
Call(ATTRIBUTE,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,<init> --> typeFieldName,java.lang.String,READ);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,registerSubtype --> containsKey,java.util.Map,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,registerSubtype --> containsKey,java.util.Map,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,registerSubtype --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,registerSubtype --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,registerSubtype$2 --> registerSubtype,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,registerSubtype$2 --> getSimpleName,java.lang.Class,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,create --> getRawType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,create --> entrySet,java.util.Map,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,create --> getDelegateAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,create --> get,null,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,create --> getValue,null,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,create --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,create --> getKey,null,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,create --> put,java.util.Map,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,create --> getValue,null,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,read --> parse,null,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,read --> getAsJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,read --> get,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,read --> getAsString,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,read --> get,null,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,read --> fromJsonTree,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,write --> getClass,com.google.gson.functional.R,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,write --> get,java.util.Map,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,write --> get,null,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,write --> getName,java.lang.Class,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,write --> toJsonTree,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,write --> getAsJsonObject,com.google.gson.TypeAdapter,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,write --> has,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,write --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,write --> entrySet,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,write --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,write --> getKey,null,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,write --> getValue,null,);
Call(METHOD,com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.Shape.JsonAdapterFactory.ShapeType.Circle.Square.RuntimeTypeAdapterFactory,write --> write,null,);
EndClass 556
StartClass 557
Class(com.google.gson.functional.SerializedNameTest.MyClass,N,N,Private);
Attribute(a,java.lang.String,Public,N,N,);
Attribute(b,java.lang.String,Public,N,N,);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.functional.SerializedNameTest.MyClass,<init> --> a,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.functional.SerializedNameTest.MyClass,<init> --> b,java.lang.String,READ);
EndClass 557
StartClass 558
Class(com.google.gson.functional.StreamingTypeAdaptersTest.Truck,N,N,Protected);
Attribute(horsePower,double,Public,N,N,);
Attribute(passengers,java.util.List,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 558
StartClass 559
Class(com.google.gson.functional.StreamingTypeAdaptersTest.Truck.Person,N,N,Protected);
Attribute(age,int,Public,N,N,);
Attribute(name,java.lang.String,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(hashCode,int,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,int,);
Parameter(equals,java.lang.Object,);
Call(ATTRIBUTE,com.google.gson.functional.StreamingTypeAdaptersTest.Truck.Person,<init> --> name,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.functional.StreamingTypeAdaptersTest.Truck.Person,<init> --> age,int,READ);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest.Truck.Person,equals --> equals,com.google.gson.functional.Person,);
Call(METHOD,com.google.gson.functional.StreamingTypeAdaptersTest.Truck.Person,hashCode --> hashCode,java.lang.String,);
EndClass 559
StartClass 560
Class(com.google.gson.functional.StreamingTypeAdaptersTest.Truck.Person.Node,N,N,Protected);
Attribute(label,java.lang.String,Public,N,N,);
Attribute(left,com.google.gson.functional.Node,Public,N,N,);
Attribute(right,com.google.gson.functional.Node,Public,N,N,);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Composition(com.google.gson.functional.Node);
Call(ATTRIBUTE,com.google.gson.functional.StreamingTypeAdaptersTest.Truck.Person.Node,<init> --> label,java.lang.String,READ);
EndClass 560
StartClass 561
Class(com.google.gson.functional.Node,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 561
StartClass 562
Class(com.google.gson.functional.TreeTypeAdaptersTest.Id,N,N,Private);
Attribute(value,java.lang.String,Public,N,Y,);
Attribute(typeOfId,java.lang.reflect.Type,Public,N,Y,);
Method(<init>,void,Private,N,N);
Method(getValue,java.lang.String,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.reflect.Type,);
Call(ATTRIBUTE,com.google.gson.functional.TreeTypeAdaptersTest.Id,<init> --> value,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.functional.TreeTypeAdaptersTest.Id,<init> --> typeOfId,java.lang.reflect.Type,READ);
EndClass 562
StartClass 563
Class(com.google.gson.functional.TreeTypeAdaptersTest.Id.IdTreeTypeAdapter,N,N,Private);
Method(deserialize,com.google.gson.functional.Id,Public,N,N);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
Parameter(serialize,com.google.gson.functional.Id,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Realization(com.google.gson.functional.JsonSerializer);
Realization(com.google.gson.functional.JsonDeserializer);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest.Id.IdTreeTypeAdapter,deserialize --> getActualTypeArguments,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest.Id.IdTreeTypeAdapter,deserialize --> getAsString,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest.Id.IdTreeTypeAdapter,serialize --> getValue,com.google.gson.functional.Id,);
EndClass 563
StartClass 564
Class(com.google.gson.functional.JsonSerializer,Y,Y,Public);
EndClass 564
StartClass 565
Class(com.google.gson.functional.JsonDeserializer,Y,Y,Public);
EndClass 565
StartClass 566
Class(com.google.gson.functional.TreeTypeAdaptersTest.Id.IdTreeTypeAdapter.Student,N,N,Private);
Attribute(id,com.google.gson.functional.Id,Public,N,N,);
Attribute(name,java.lang.String,Public,N,N,);
Method(<init>,void,Private,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>$2,com.google.gson.functional.Id,);
Parameter(<init>$2,java.lang.String,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest.Id.IdTreeTypeAdapter.Student,<init> --> <init>$2,com.google.gson.functional.TreeTypeAdaptersTest.Id.IdTreeTypeAdapter.Student,);
Call(ATTRIBUTE,com.google.gson.functional.TreeTypeAdaptersTest.Id.IdTreeTypeAdapter.Student,<init>$2 --> id,com.google.gson.functional.Id,READ);
Call(ATTRIBUTE,com.google.gson.functional.TreeTypeAdaptersTest.Id.IdTreeTypeAdapter.Student,<init>$2 --> name,java.lang.String,READ);
EndClass 566
StartClass 567
Class(com.google.gson.functional.TreeTypeAdaptersTest.Id.IdTreeTypeAdapter.Student.Course,N,N,Private);
Attribute(students,java.util.List,Public,N,Y,);
Attribute(courseId,com.google.gson.functional.Id,Private,N,Y,);
Attribute(numAssignments,int,Private,N,Y,);
Attribute(assignment,com.google.gson.functional.Assignment,Private,N,Y,);
Method(<init>,void,Private,N,N);
Method(<init>$2,void,Public,N,N);
Method(getId,com.google.gson.functional.Id,Public,N,N);
Method(getStudents,java.util.List,Public,N,N);
Parameter(<init>$2,com.google.gson.functional.Id,);
Parameter(<init>$2,int,);
Parameter(<init>$2,com.google.gson.functional.Assignment,);
Parameter(<init>$2,java.util.List,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest.Id.IdTreeTypeAdapter.Student.Course,<init> --> this,com.google.gson.functional.TreeTypeAdaptersTest.Id.IdTreeTypeAdapter.Student.Course,);
Call(ATTRIBUTE,com.google.gson.functional.TreeTypeAdaptersTest.Id.IdTreeTypeAdapter.Student.Course,<init>$2 --> courseId,com.google.gson.functional.Id,READ);
Call(ATTRIBUTE,com.google.gson.functional.TreeTypeAdaptersTest.Id.IdTreeTypeAdapter.Student.Course,<init>$2 --> numAssignments,int,READ);
Call(ATTRIBUTE,com.google.gson.functional.TreeTypeAdaptersTest.Id.IdTreeTypeAdapter.Student.Course,<init>$2 --> assignment,com.google.gson.functional.Assignment,READ);
EndClass 567
StartClass 568
Class(com.google.gson.functional.TreeTypeAdaptersTest.Id.IdTreeTypeAdapter.Student.Course.Assignment,N,N,Private);
Attribute(id,com.google.gson.functional.Id,Private,N,Y,);
Attribute(data,com.google.gson.functional.T,Private,N,Y,);
Method(<init>,void,Private,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>$2,com.google.gson.functional.Id,);
Parameter(<init>$2,com.google.gson.functional.T,);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest.Id.IdTreeTypeAdapter.Student.Course.Assignment,<init> --> <init>$2,com.google.gson.functional.TreeTypeAdaptersTest.Id.IdTreeTypeAdapter.Student.Course.Assignment,);
Call(ATTRIBUTE,com.google.gson.functional.TreeTypeAdaptersTest.Id.IdTreeTypeAdapter.Student.Course.Assignment,<init>$2 --> id,com.google.gson.functional.Id,READ);
Call(ATTRIBUTE,com.google.gson.functional.TreeTypeAdaptersTest.Id.IdTreeTypeAdapter.Student.Course.Assignment,<init>$2 --> data,com.google.gson.functional.T,READ);
EndClass 568
StartClass 569
Class(com.google.gson.functional.TreeTypeAdaptersTest.Id.IdTreeTypeAdapter.Student.Course.Assignment.HistoryCourse,N,N,Private);
Attribute(numClasses,int,Public,N,N,);
Method(createList,java.util.List,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,com.google.gson.functional.TreeTypeAdaptersTest.Id.IdTreeTypeAdapter.Student.Course.Assignment.HistoryCourse,createList --> asList,null,);
EndClass 569
StartClass 570
Class(com.google.gson.functional.TypeAdapterPrecedenceTest.Foo,N,N,Private);
Attribute(name,java.lang.String,Public,N,Y,);
Method(<init>,void,Private,N,N);
Method(newSerializer,com.google.gson.JsonSerializer,Private,N,N);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(newDeserializer,com.google.gson.JsonDeserializer,Private,N,N);
Method(deserialize,com.google.gson.functional.Foo,Public,N,N);
Method(newTypeAdapter,com.google.gson.TypeAdapter,Private,N,N);
Method(read,com.google.gson.functional.Foo,Public,N,N);
Method(write,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(newSerializer,java.lang.String,);
Parameter(serialize,com.google.gson.functional.Foo,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Parameter(newDeserializer,java.lang.String,);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
Parameter(newTypeAdapter,java.lang.String,);
Parameter(read,com.google.gson.stream.JsonReader,);
Parameter(write,com.google.gson.stream.JsonWriter,);
Parameter(write,com.google.gson.functional.Foo,);
Call(ATTRIBUTE,com.google.gson.functional.TypeAdapterPrecedenceTest.Foo,<init> --> name,java.lang.String,READ);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest.Foo,deserialize --> getAsString,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest.Foo,read --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.functional.TypeAdapterPrecedenceTest.Foo,write --> value,com.google.gson.stream.JsonWriter,);
EndClass 570
StartClass 571
Class(com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter,N,N,Protected);
Method(deserialize,com.google.gson.functional.Manager,Public,N,N);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
Parameter(serialize,com.google.gson.functional.Manager,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Realization(com.google.gson.functional.JsonSerializer);
Realization(com.google.gson.functional.JsonDeserializer);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter,deserialize --> getAsString,com.google.gson.JsonElement,);
EndClass 571
StartClass 572
Class(com.google.gson.functional.Manager,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter.Employee.Manager.CEO);
EndClass 572
StartClass 573
Class(com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter.Employee.Manager.CEO,N,N,Protected);
Attribute(assistant,com.google.gson.functional.Employee,Public,N,N,);
Method(<init>,void,Public,N,N);
SuperClass(com.google.gson.functional.Manager);
Generalization(com.google.gson.functional.Manager);
Composition(com.google.gson.functional.Employee);
EndClass 573
StartClass 574
Class(com.google.gson.functional.Employee,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter.Employee.Manager);
EndClass 574
StartClass 575
Class(com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter.Employee.Manager,N,N,Protected);
Attribute(minions,com.google.gson.functional.Employee[],Public,N,N,);
Method(<init>,void,Public,N,N);
SuperClass(com.google.gson.functional.Employee);
Generalization(com.google.gson.functional.Employee);
EndClass 575
StartClass 576
Class(com.google.gson.functional.JsonSerializer,Y,Y,Public);
EndClass 576
StartClass 577
Class(com.google.gson.functional.JsonDeserializer,Y,Y,Public);
EndClass 577
StartClass 578
Class(com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter,N,N,Protected);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(deserialize,com.google.gson.functional.Employee,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(serialize,com.google.gson.functional.Employee,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
Realization(com.google.gson.functional.JsonSerializer);
Realization(com.google.gson.functional.JsonDeserializer);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter,serialize --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter,serialize --> serialize,com.google.gson.JsonSerializationContext,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter,serialize --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter,serialize --> serialize,com.google.gson.JsonSerializationContext,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter,serialize --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter,serialize --> serialize,com.google.gson.JsonSerializationContext,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter,serialize --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter,serialize --> serialize,com.google.gson.JsonSerializationContext,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter,deserialize --> getAsJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter,deserialize --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter,deserialize --> deserialize,com.google.gson.JsonDeserializationContext,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter,deserialize --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter,deserialize --> deserialize,com.google.gson.JsonDeserializationContext,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter,deserialize --> deserialize,com.google.gson.JsonDeserializationContext,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter,deserialize --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter,deserialize --> get,com.google.gson.JsonObject,);
EndClass 578
StartClass 579
Class(com.google.gson.functional.JsonSerializer,Y,Y,Public);
EndClass 579
StartClass 580
Class(com.google.gson.functional.JsonDeserializer,Y,Y,Public);
EndClass 580
StartClass 581
Class(com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter.Employee,N,N,Protected);
Attribute(userid,java.lang.String,Public,N,N,);
Attribute(startDate,long,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,long,);
Call(ATTRIBUTE,com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter.Employee,<init> --> userid,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter.Employee,<init> --> startDate,long,READ);
EndClass 581
StartClass 582
Class(com.google.gson.functional.TypeHierarchyAdapterTest.ManagerAdapter.EmployeeAdapter.Employee.Manager.CEO.Company,N,N,Protected);
Attribute(ceo,com.google.gson.functional.CEO,Public,N,N,);
Method(<init>,void,Public,N,N);
Composition(com.google.gson.functional.CEO);
EndClass 582
StartClass 583
Class(com.google.gson.functional.CEO,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 583
StartClass 584
Class(com.google.gson.functional.TypeVariableTest.Blue,N,N,Public);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(equals,boolean,Public,N,N);
Parameter(<init>$2,boolean,);
Parameter(equals,java.lang.Object,);
SuperClass(com.google.gson.functional.Red);
Generalization(com.google.gson.functional.Red);
Call(METHOD,com.google.gson.functional.TypeVariableTest.Blue,<init> --> super,com.google.gson.functional.TypeVariableTest.Blue,);
Call(METHOD,com.google.gson.functional.TypeVariableTest.Blue,<init>$2 --> super,com.google.gson.functional.TypeVariableTest.Blue,);
Call(METHOD,com.google.gson.functional.TypeVariableTest.Blue,equals --> equals,null,);
EndClass 584
StartClass 585
Class(com.google.gson.functional.Red,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.TypeVariableTest.Blue);
SubClass(com.google.gson.functional.TypeVariableTest.Blue.Red.Foo);
EndClass 585
StartClass 586
Class(com.google.gson.functional.TypeVariableTest.Blue.Red.Foo,N,N,Public);
Attribute(someSField,com.google.gson.functional.S,Private,N,N,);
Attribute(someTField,com.google.gson.functional.T,Private,N,N,);
Attribute(map,java.util.Map,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(equals,boolean,Public,N,N);
Parameter(<init>$2,com.google.gson.functional.S,);
Parameter(<init>$2,com.google.gson.functional.T,);
Parameter(<init>$2,java.lang.Boolean,);
Parameter(equals,java.lang.Object,);
SuperClass(com.google.gson.functional.Red);
Generalization(com.google.gson.functional.Red);
Call(METHOD,com.google.gson.functional.TypeVariableTest.Blue.Red.Foo,<init>$2 --> super,com.google.gson.functional.TypeVariableTest.Blue.Red.Foo,);
Call(METHOD,com.google.gson.functional.TypeVariableTest.Blue.Red.Foo,equals --> equals,null,);
Call(METHOD,com.google.gson.functional.TypeVariableTest.Blue.Red.Foo,equals --> equals,com.google.gson.functional.T,);
Call(METHOD,com.google.gson.functional.TypeVariableTest.Blue.Red.Foo,equals --> equals,com.google.gson.functional.S,);
Call(METHOD,com.google.gson.functional.TypeVariableTest.Blue.Red.Foo,equals --> equals,java.util.Map,);
EndClass 586
StartClass 587
Class(com.google.gson.functional.TypeVariableTest.Blue.Red,N,N,Public);
Attribute(redField,com.google.gson.functional.S,Protected,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>$2,com.google.gson.functional.S,);
Call(ATTRIBUTE,com.google.gson.functional.TypeVariableTest.Blue.Red,<init>$2 --> redField,com.google.gson.functional.S,READ);
EndClass 587
StartClass 588
Class(com.google.gson.functional.UncategorizedTest.OperationType,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 588
StartClass 589
Class(com.google.gson.functional.UncategorizedTest.OperationType.Base,N,N,Private);
Attribute(opType,com.google.gson.functional.OperationType,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 589
StartClass 590
Class(com.google.gson.functional.UncategorizedTest.OperationType.Base.Derived1.Derived2.BaseTypeAdapter,N,N,Private);
Method(deserialize,com.google.gson.functional.Base,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
Realization(com.google.gson.functional.JsonDeserializer);
Call(METHOD,com.google.gson.functional.UncategorizedTest.OperationType.Base.Derived1.Derived2.BaseTypeAdapter,deserialize --> getAsJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.UncategorizedTest.OperationType.Base.Derived1.Derived2.BaseTypeAdapter,deserialize --> get,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.UncategorizedTest.OperationType.Base.Derived1.Derived2.BaseTypeAdapter,deserialize --> getAsString,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.functional.UncategorizedTest.OperationType.Base.Derived1.Derived2.BaseTypeAdapter,deserialize --> valueOf,null,);
EndClass 590
StartClass 591
Class(com.google.gson.functional.JsonDeserializer,Y,Y,Public);
EndClass 591
StartClass 592
Class(com.google.gson.functional.VersioningTest.Version1,N,N,Private);
Attribute(a,int,Public,N,N,);
Attribute(b,int,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 592
StartClass 593
Class(com.google.gson.functional.VersioningTest.Version1.Version1_1,N,N,Private);
Attribute(c,int,Public,N,N,);
Method(<init>,void,Public,N,N);
SuperClass(com.google.gson.functional.Version1);
Generalization(com.google.gson.functional.Version1);
EndClass 593
StartClass 594
Class(com.google.gson.functional.Version1,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.VersioningTest.Version1.Version1_1);
EndClass 594
StartClass 595
Class(com.google.gson.functional.VersioningTest.Version1.Version1_1.Version1_2,N,N,Private);
Attribute(d,int,Public,N,N,);
Method(<init>,void,Public,N,N);
SuperClass(com.google.gson.functional.Version1_1);
Generalization(com.google.gson.functional.Version1_1);
EndClass 595
StartClass 596
Class(com.google.gson.functional.Version1_1,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.functional.VersioningTest.Version1.Version1_1.Version1_2);
EndClass 596
StartClass 597
Class(com.google.gson.functional.VersioningTest.Version1.Version1_1.Version1_2.SinceUntilMixing,N,N,Private);
Attribute(a,int,Public,N,N,);
Attribute(b,int,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 597
StartClass 598
Class(com.google.gson.GsonBuilderTest.HasModifiers,N,N,Protected);
Attribute(a,java.lang.String,Private,N,N,);
Attribute(b,java.lang.String,Public,N,N,);
Attribute(c,java.lang.String,Private,N,N,);
Attribute(d,java.lang.String,Public,N,N,);
Method(testTransientFieldExclusion,void,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,com.google.gson.GsonBuilderTest.HasModifiers,testTransientFieldExclusion --> excludeFieldsWithModifiers,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.GsonBuilderTest.HasModifiers,testTransientFieldExclusion --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.GsonBuilderTest.HasModifiers,testTransientFieldExclusion --> assertEquals,com.google.gson.GsonBuilderTest.HasModifiers,);
Call(METHOD,com.google.gson.GsonBuilderTest.HasModifiers,testTransientFieldExclusion --> toJson,com.google.gson.Gson,);
EndClass 598
StartClass 599
Class(com.google.gson.GsonBuilderTest.HasModifiers.HasTransients,N,N,Protected);
Attribute(a,java.lang.String,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 599
StartClass 600
Class(com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter,N,N,Private);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(deserialize,java.util.concurrent.atomic.AtomicLong,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(serialize,java.util.concurrent.atomic.AtomicLong,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
Realization(com.google.gson.JsonSerializer);
Realization(com.google.gson.JsonDeserializer);
EndClass 600
StartClass 601
Class(com.google.gson.JsonSerializer,Y,Y,Public);
EndClass 601
StartClass 602
Class(com.google.gson.JsonDeserializer,Y,Y,Public);
EndClass 602
StartClass 603
Class(com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter,N,N,Private);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(deserialize,java.util.concurrent.atomic.AtomicInteger,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(serialize,java.util.concurrent.atomic.AtomicInteger,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
Realization(com.google.gson.JsonSerializer);
Realization(com.google.gson.JsonDeserializer);
Call(METHOD,com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter,serialize --> incrementAndGet,java.util.concurrent.atomic.AtomicInteger,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter,deserialize --> getAsInt,com.google.gson.JsonElement,);
EndClass 603
StartClass 604
Class(com.google.gson.JsonSerializer,Y,Y,Public);
EndClass 604
StartClass 605
Class(com.google.gson.JsonDeserializer,Y,Y,Public);
EndClass 605
StartClass 606
Class(com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract,N,Y,Protected);
Attribute(a,java.lang.String,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 606
StartClass 607
Class(com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract.Concrete,N,N,Protected);
Attribute(b,java.lang.String,Public,N,N,);
Method(testDeserializerForAbstractClass,void,Public,N,N);
Method(assertSerialized,void,Private,N,N);
Method(deserialize,com.google.gson.Abstract,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(assertSerialized,java.lang.String,);
Parameter(assertSerialized,java.lang.Class,);
Parameter(assertSerialized,boolean,);
Parameter(assertSerialized,boolean,);
Parameter(assertSerialized,java.lang.Object,);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
SuperClass(com.google.gson.Abstract);
Generalization(com.google.gson.Abstract);
Call(METHOD,com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract.Concrete,testDeserializerForAbstractClass --> assertSerialized,com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract.Concrete,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract.Concrete,testDeserializerForAbstractClass --> assertSerialized,com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract.Concrete,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract.Concrete,testDeserializerForAbstractClass --> assertSerialized,com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract.Concrete,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract.Concrete,testDeserializerForAbstractClass --> assertSerialized,com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract.Concrete,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract.Concrete,testDeserializerForAbstractClass --> assertSerialized,com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract.Concrete,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract.Concrete,testDeserializerForAbstractClass --> assertSerialized,com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract.Concrete,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract.Concrete,testDeserializerForAbstractClass --> assertSerialized,com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract.Concrete,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract.Concrete,testDeserializerForAbstractClass --> assertSerialized,com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract.Concrete,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract.Concrete,deserialize --> registerTypeAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract.Concrete,deserialize --> registerTypeHierarchyAdapter,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract.Concrete,deserialize --> create,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract.Concrete,deserialize --> assertEquals,com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract.Concrete,);
Call(METHOD,com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract.Concrete,deserialize --> toJson,com.google.gson.Gson,);
EndClass 607
StartClass 608
Class(com.google.gson.Abstract,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.GsonTypeAdapterTest.ExceptionTypeAdapter.AtomicIntegerTypeAdapter.Abstract.Concrete);
EndClass 608
StartClass 609
Class(com.google.gson.InnerClassExclusionStrategyTest.InnerClass,N,N,Protected);
Method(<init>,void,Public,N,N);
EndClass 609
StartClass 610
Class(com.google.gson.InnerClassExclusionStrategyTest.InnerClass.StaticNestedClass,N,N,Protected);
Method(<init>,void,Public,N,N);
EndClass 610
StartClass 611
Class(com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1,N,N,Private);
Attribute(foo2,com.google.gson.internal.bind.Foo2,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 611
StartClass 612
Class(com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,N,N,Private);
Attribute(foo1,com.google.gson.internal.bind.Foo1,Public,N,N,);
Method(testRecursiveResolveSimple,void,Public,N,N);
Method(testIssue603PrintStream,void,Public,N,N);
Method(testIssue440WeakReference,void,Public,N,N);
Method(testDoubleSupertype,void,Public,N,N);
Method(testDoubleSubtype,void,Public,N,N);
Method(testSuperSubtype,void,Public,N,N);
Method(testSubSupertype,void,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,testRecursiveResolveSimple --> getAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,testRecursiveResolveSimple --> assertNotNull,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,testIssue603PrintStream --> getAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,testIssue603PrintStream --> assertNotNull,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,testIssue440WeakReference --> getAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,testIssue440WeakReference --> assertNotNull,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,testDoubleSupertype --> assertEquals,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,testDoubleSupertype --> supertypeOf,null,);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,testDoubleSupertype --> supertypeOf,null,);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,testDoubleSupertype --> supertypeOf,null,);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,testDoubleSubtype --> assertEquals,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,testDoubleSubtype --> subtypeOf,null,);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,testDoubleSubtype --> subtypeOf,null,);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,testDoubleSubtype --> subtypeOf,null,);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,testSuperSubtype --> assertEquals,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,testSuperSubtype --> subtypeOf,null,);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,testSuperSubtype --> supertypeOf,null,);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,testSuperSubtype --> subtypeOf,null,);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,testSubSupertype --> assertEquals,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,testSubSupertype --> subtypeOf,null,);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,testSubSupertype --> subtypeOf,null,);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2,testSubSupertype --> supertypeOf,null,);
EndClass 612
StartClass 613
Class(com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2.TestType,N,N,Private);
Attribute(superType,com.google.gson.internal.bind.TestType,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 613
StartClass 614
Class(com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2.TestType.TestType2,N,N,Private);
Attribute(superReversedType,com.google.gson.internal.bind.TestType2,Public,N,N,);
Method(testRecursiveTypeVariablesResolve1,void,Public,N,N);
Method(testRecursiveTypeVariablesResolve12,void,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2.TestType.TestType2,testRecursiveTypeVariablesResolve1 --> getAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2.TestType.TestType2,testRecursiveTypeVariablesResolve1 --> assertNotNull,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2.TestType.TestType2,);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2.TestType.TestType2,testRecursiveTypeVariablesResolve12 --> getAdapter,com.google.gson.Gson,);
Call(METHOD,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2.TestType.TestType2,testRecursiveTypeVariablesResolve12 --> assertNotNull,com.google.gson.internal.bind.RecursiveTypesResolveTest.Foo1.Foo2.TestType.TestType2,);
EndClass 614
StartClass 615
Class(com.google.gson.internal.GsonBuildConfigTest,N,N,Public);
Method(testEnsureGsonBuildConfigGetsUpdatedToMavenVersion,void,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,com.google.gson.internal.GsonBuildConfigTest,testEnsureGsonBuildConfigGetsUpdatedToMavenVersion --> assertFalse,com.google.gson.internal.GsonBuildConfigTest,);
Call(METHOD,com.google.gson.internal.GsonBuildConfigTest,testEnsureGsonBuildConfigGetsUpdatedToMavenVersion --> equals,java.lang.String,);
EndClass 615
StartClass 616
Class(com.google.gson.internal.GsonTypesTest.D.A,N,N,Private);
Method(<init>,void,Public,N,N);
EndClass 616
StartClass 617
Class(com.google.gson.internal.GsonTypesTest.D.A.B,N,N,Private);
Method(<init>,void,Public,N,N);
EndClass 617
StartClass 618
Class(com.google.gson.internal.GsonTypesTest.D.A.B.C,N,N,Private);
Method(getFirstTypeArgument,java.lang.reflect.Type,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(getFirstTypeArgument,java.lang.reflect.Type,);
Call(METHOD,com.google.gson.internal.GsonTypesTest.D.A.B.C,getFirstTypeArgument --> getActualTypeArguments,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.internal.GsonTypesTest.D.A.B.C,getFirstTypeArgument --> canonicalize,null,);
EndClass 618
StartClass 619
Class(com.google.gson.internal.JavaVersionTest,N,N,Public);
Method(testGetMajorJavaVersion,void,Public,N,N);
Method(testJava6,void,Public,N,N);
Method(testJava7,void,Public,N,N);
Method(testJava8,void,Public,N,N);
Method(testJava9,void,Public,N,N);
Method(testJava10,void,Public,N,N);
Method(testUnknownVersionFormat,void,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testGetMajorJavaVersion --> getMajorJavaVersion,null,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava6 --> assertEquals,com.google.gson.internal.JavaVersionTest,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava6 --> getMajorJavaVersion,null,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava7 --> assertEquals,com.google.gson.internal.JavaVersionTest,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava7 --> getMajorJavaVersion,null,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava8 --> assertEquals,com.google.gson.internal.JavaVersionTest,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava8 --> getMajorJavaVersion,null,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava8 --> assertEquals,com.google.gson.internal.JavaVersionTest,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava8 --> getMajorJavaVersion,null,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava8 --> assertEquals,com.google.gson.internal.JavaVersionTest,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava8 --> getMajorJavaVersion,null,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava8 --> assertEquals,com.google.gson.internal.JavaVersionTest,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava8 --> getMajorJavaVersion,null,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava8 --> assertEquals,com.google.gson.internal.JavaVersionTest,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava8 --> getMajorJavaVersion,null,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava8 --> assertEquals,com.google.gson.internal.JavaVersionTest,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava8 --> getMajorJavaVersion,null,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava8 --> assertEquals,com.google.gson.internal.JavaVersionTest,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava8 --> getMajorJavaVersion,null,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava9 --> assertEquals,com.google.gson.internal.JavaVersionTest,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava9 --> getMajorJavaVersion,null,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava9 --> assertEquals,com.google.gson.internal.JavaVersionTest,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava9 --> getMajorJavaVersion,null,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava9 --> assertEquals,com.google.gson.internal.JavaVersionTest,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava9 --> getMajorJavaVersion,null,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava9 --> assertEquals,com.google.gson.internal.JavaVersionTest,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava9 --> getMajorJavaVersion,null,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava9 --> assertEquals,com.google.gson.internal.JavaVersionTest,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava9 --> getMajorJavaVersion,null,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava9 --> assertEquals,com.google.gson.internal.JavaVersionTest,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava9 --> getMajorJavaVersion,null,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava10 --> assertEquals,com.google.gson.internal.JavaVersionTest,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testJava10 --> getMajorJavaVersion,null,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testUnknownVersionFormat --> assertEquals,com.google.gson.internal.JavaVersionTest,);
Call(METHOD,com.google.gson.internal.JavaVersionTest,testUnknownVersionFormat --> getMajorJavaVersion,null,);
EndClass 619
StartClass 620
Class(com.google.gson.internal.reflect.UnsafeReflectionAccessorTest,N,N,Public);
Method(testMakeAccessibleWithUnsafe,void,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,com.google.gson.internal.reflect.UnsafeReflectionAccessorTest,testMakeAccessibleWithUnsafe --> getDeclaredField,null,);
Call(METHOD,com.google.gson.internal.reflect.UnsafeReflectionAccessorTest,testMakeAccessibleWithUnsafe --> makeAccessibleWithUnsafe,com.google.gson.internal.reflect.UnsafeReflectionAccessor,);
Call(METHOD,com.google.gson.internal.reflect.UnsafeReflectionAccessorTest,testMakeAccessibleWithUnsafe --> assertTrue,com.google.gson.internal.reflect.UnsafeReflectionAccessorTest,);
Call(METHOD,com.google.gson.internal.reflect.UnsafeReflectionAccessorTest,testMakeAccessibleWithUnsafe --> fail,com.google.gson.internal.reflect.UnsafeReflectionAccessorTest,);
EndClass 620
StartClass 621
Class(com.google.gson.internal.reflect.UnsafeReflectionAccessorTest.ClassWithPrivateFinalFields,N,N,Private);
Attribute(a,java.lang.String,Private,N,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.internal.reflect.UnsafeReflectionAccessorTest.ClassWithPrivateFinalFields,<init> --> a,java.lang.String,READ);
EndClass 621
StartClass 622
Class(com.google.gson.internal.UnsafeAllocatorInstantiationTest.Interface.AbstractClass,N,Y,Public);
Method(<init>,void,Public,N,N);
EndClass 622
StartClass 623
Class(com.google.gson.internal.UnsafeAllocatorInstantiationTest.Interface.AbstractClass.ConcreteClass,N,N,Public);
Method(testInterfaceInstantiation,void,Public,N,N);
Method(testAbstractClassInstantiation,void,Public,N,N);
Method(testConcreteClassInstantiation,void,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,com.google.gson.internal.UnsafeAllocatorInstantiationTest.Interface.AbstractClass.ConcreteClass,testInterfaceInstantiation --> create,null,);
Call(METHOD,com.google.gson.internal.UnsafeAllocatorInstantiationTest.Interface.AbstractClass.ConcreteClass,testInterfaceInstantiation --> newInstance,com.google.gson.internal.UnsafeAllocator,);
Call(METHOD,com.google.gson.internal.UnsafeAllocatorInstantiationTest.Interface.AbstractClass.ConcreteClass,testInterfaceInstantiation --> fail,com.google.gson.internal.UnsafeAllocatorInstantiationTest.Interface.AbstractClass.ConcreteClass,);
Call(METHOD,com.google.gson.internal.UnsafeAllocatorInstantiationTest.Interface.AbstractClass.ConcreteClass,testInterfaceInstantiation --> assertEquals,com.google.gson.internal.UnsafeAllocatorInstantiationTest.Interface.AbstractClass.ConcreteClass,);
Call(METHOD,com.google.gson.internal.UnsafeAllocatorInstantiationTest.Interface.AbstractClass.ConcreteClass,testInterfaceInstantiation --> getClass,null,);
Call(METHOD,com.google.gson.internal.UnsafeAllocatorInstantiationTest.Interface.AbstractClass.ConcreteClass,testAbstractClassInstantiation --> create,null,);
Call(METHOD,com.google.gson.internal.UnsafeAllocatorInstantiationTest.Interface.AbstractClass.ConcreteClass,testAbstractClassInstantiation --> newInstance,com.google.gson.internal.UnsafeAllocator,);
Call(METHOD,com.google.gson.internal.UnsafeAllocatorInstantiationTest.Interface.AbstractClass.ConcreteClass,testAbstractClassInstantiation --> fail,com.google.gson.internal.UnsafeAllocatorInstantiationTest.Interface.AbstractClass.ConcreteClass,);
Call(METHOD,com.google.gson.internal.UnsafeAllocatorInstantiationTest.Interface.AbstractClass.ConcreteClass,testAbstractClassInstantiation --> assertEquals,com.google.gson.internal.UnsafeAllocatorInstantiationTest.Interface.AbstractClass.ConcreteClass,);
Call(METHOD,com.google.gson.internal.UnsafeAllocatorInstantiationTest.Interface.AbstractClass.ConcreteClass,testAbstractClassInstantiation --> getClass,null,);
Call(METHOD,com.google.gson.internal.UnsafeAllocatorInstantiationTest.Interface.AbstractClass.ConcreteClass,testConcreteClassInstantiation --> create,null,);
Call(METHOD,com.google.gson.internal.UnsafeAllocatorInstantiationTest.Interface.AbstractClass.ConcreteClass,testConcreteClassInstantiation --> newInstance,com.google.gson.internal.UnsafeAllocator,);
Call(METHOD,com.google.gson.internal.UnsafeAllocatorInstantiationTest.Interface.AbstractClass.ConcreteClass,testConcreteClassInstantiation --> fail,com.google.gson.internal.UnsafeAllocatorInstantiationTest.Interface.AbstractClass.ConcreteClass,);
EndClass 623
StartClass 624
Class(com.google.gson.metrics.PerformanceTest.ExceptionHolder,N,N,Private);
Attribute(message,java.lang.String,Public,N,Y,);
Attribute(stackTrace,java.lang.String,Public,N,Y,);
Method(<init>,void,Private,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,java.lang.String,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder,<init> --> <init>$2,com.google.gson.metrics.PerformanceTest.ExceptionHolder,);
Call(ATTRIBUTE,com.google.gson.metrics.PerformanceTest.ExceptionHolder,<init>$2 --> message,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.metrics.PerformanceTest.ExceptionHolder,<init>$2 --> stackTrace,java.lang.String,READ);
EndClass 624
StartClass 625
Class(com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,N,N,Private);
Attribute(name,java.lang.String,Public,N,Y,);
Attribute(value,java.lang.String,Public,N,Y,);
Method(<init>,void,Private,N,N);
Method(<init>$2,void,Public,N,N);
Method(disabled_testLargeCollectionSerialization,void,Public,N,N);
Method(disabled_testLargeCollectionDeserialization,void,Public,N,N);
Method(disabled_testByteArraySerialization,void,Public,N,N);
Method(disable_testByteArrayDeserialization,void,Public,N,N);
Method(disabled_testSerializeClasses,void,Public,N,N);
Method(disabled_testDeserializeClasses,void,Public,N,N);
Method(disable_testLargeObjectSerializationAndDeserialization,void,Public,N,N);
Method(disabled_testSerializeExposedClasses,void,Public,N,N);
Method(disabled_testDeserializeExposedClasses,void,Public,N,N);
Method(disabled_testLargeGsonMapRoundTrip,void,Public,N,N);
Method(buildJsonForClassWithList,java.lang.String,Private,N,N);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,java.lang.String,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,<init> --> <init>$2,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,);
Call(ATTRIBUTE,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,<init>$2 --> name,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,<init>$2 --> value,java.lang.String,READ);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testLargeCollectionSerialization --> add,java.util.List,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testLargeCollectionSerialization --> toJson,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testLargeCollectionDeserialization --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testLargeCollectionDeserialization --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testLargeCollectionDeserialization --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testLargeCollectionDeserialization --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testLargeCollectionDeserialization --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testLargeCollectionDeserialization --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testLargeCollectionDeserialization --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testLargeCollectionDeserialization --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testLargeCollectionDeserialization --> toString,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testLargeCollectionDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testLargeCollectionDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testLargeCollectionDeserialization --> assertEquals,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testLargeCollectionDeserialization --> size,java.util.List,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testByteArraySerialization --> toJson,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testByteArraySerialization --> printf,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disable_testByteArrayDeserialization --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disable_testByteArrayDeserialization --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disable_testByteArrayDeserialization --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disable_testByteArrayDeserialization --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disable_testByteArrayDeserialization --> toString,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disable_testByteArrayDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disable_testByteArrayDeserialization --> printf,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testSerializeClasses --> add,com.google.gson.metrics.ClassWithList,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testSerializeClasses --> currentTimeMillis,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testSerializeClasses --> toJson,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testSerializeClasses --> currentTimeMillis,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testSerializeClasses --> printf,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testDeserializeClasses --> buildJsonForClassWithList,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testDeserializeClasses --> currentTimeMillis,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testDeserializeClasses --> fromJson,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testDeserializeClasses --> currentTimeMillis,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testDeserializeClasses --> printf,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disable_testLargeObjectSerializationAndDeserialization --> put,java.util.Map,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disable_testLargeObjectSerializationAndDeserialization --> currentTimeMillis,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disable_testLargeObjectSerializationAndDeserialization --> toJson,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disable_testLargeObjectSerializationAndDeserialization --> currentTimeMillis,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disable_testLargeObjectSerializationAndDeserialization --> printf,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disable_testLargeObjectSerializationAndDeserialization --> currentTimeMillis,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disable_testLargeObjectSerializationAndDeserialization --> fromJson,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disable_testLargeObjectSerializationAndDeserialization --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disable_testLargeObjectSerializationAndDeserialization --> currentTimeMillis,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disable_testLargeObjectSerializationAndDeserialization --> printf,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testSerializeExposedClasses --> add,com.google.gson.metrics.ClassWithListOfObjects,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testSerializeExposedClasses --> currentTimeMillis,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testSerializeExposedClasses --> toJson,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testSerializeExposedClasses --> currentTimeMillis,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testSerializeExposedClasses --> printf,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testDeserializeExposedClasses --> buildJsonForClassWithList,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testDeserializeExposedClasses --> currentTimeMillis,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testDeserializeExposedClasses --> fromJson,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testDeserializeExposedClasses --> currentTimeMillis,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testDeserializeExposedClasses --> printf,null,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testLargeGsonMapRoundTrip --> put,java.util.Map,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testLargeGsonMapRoundTrip --> toJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testLargeGsonMapRoundTrip --> getType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,disabled_testLargeGsonMapRoundTrip --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,buildJsonForClassWithList --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,buildJsonForClassWithList --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,buildJsonForClassWithList --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,buildJsonForClassWithList --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,buildJsonForClassWithList --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,buildJsonForClassWithList --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,buildJsonForClassWithList --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry,buildJsonForClassWithList --> toString,com.google.gson.metrics.StringBuilder,);
EndClass 625
StartClass 626
Class(com.google.gson.metrics.ClassWithList,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 626
StartClass 627
Class(com.google.gson.metrics.ClassWithListOfObjects,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 627
StartClass 628
Class(com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry.ClassWithList,N,N,Private);
Attribute(field,java.lang.String,Public,N,Y,);
Attribute(list,java.util.List,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>$2,java.lang.String,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry.ClassWithList,<init> --> <init>$2,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry.ClassWithList,);
Call(ATTRIBUTE,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry.ClassWithList,<init>$2 --> field,java.lang.String,READ);
EndClass 628
StartClass 629
Class(com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry.ClassWithList.ClassWithField,N,N,Private);
Attribute(field,java.lang.String,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>$2,java.lang.String,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry.ClassWithList.ClassWithField,<init> --> <init>$2,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry.ClassWithList.ClassWithField,);
Call(ATTRIBUTE,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry.ClassWithList.ClassWithField,<init>$2 --> field,java.lang.String,READ);
EndClass 629
StartClass 630
Class(com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry.ClassWithList.ClassWithField.ClassWithListOfObjects,N,N,Private);
Attribute(field,java.lang.String,Public,N,Y,);
Attribute(list,java.util.List,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>$2,java.lang.String,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry.ClassWithList.ClassWithField.ClassWithListOfObjects,<init> --> <init>$2,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry.ClassWithList.ClassWithField.ClassWithListOfObjects,);
Call(ATTRIBUTE,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry.ClassWithList.ClassWithField.ClassWithListOfObjects,<init>$2 --> field,java.lang.String,READ);
EndClass 630
StartClass 631
Class(com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry.ClassWithList.ClassWithField.ClassWithListOfObjects.ClassWithExposedField,N,N,Private);
Attribute(field,java.lang.String,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>$2,java.lang.String,);
Call(METHOD,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry.ClassWithList.ClassWithField.ClassWithListOfObjects.ClassWithExposedField,<init> --> <init>$2,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry.ClassWithList.ClassWithField.ClassWithListOfObjects.ClassWithExposedField,);
Call(ATTRIBUTE,com.google.gson.metrics.PerformanceTest.ExceptionHolder.CollectionEntry.ClassWithList.ClassWithField.ClassWithListOfObjects.ClassWithExposedField,<init>$2 --> field,java.lang.String,READ);
EndClass 631
StartClass 632
Class(com.google.gson.MixedStreamTest.Car,N,N,Protected);
Attribute(name,java.lang.String,Public,N,N,);
Attribute(color,int,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(equals,boolean,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,int,);
Parameter(equals,java.lang.Object,);
Call(ATTRIBUTE,com.google.gson.MixedStreamTest.Car,<init> --> name,java.lang.String,READ);
Call(ATTRIBUTE,com.google.gson.MixedStreamTest.Car,<init> --> color,int,READ);
Call(METHOD,com.google.gson.MixedStreamTest.Car,hashCode --> hashCode,java.lang.String,);
Call(METHOD,com.google.gson.MixedStreamTest.Car,equals --> equals,com.google.gson.Car,);
EndClass 632
StartClass 633
Class(com.google.gson.MockExclusionStrategy,N,N,Public);
Attribute(skipClass,boolean,Private,N,Y,);
Attribute(skipField,boolean,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(shouldSkipField,boolean,Public,N,N);
Method(shouldSkipClass,boolean,Public,N,N);
Parameter(<init>,boolean,);
Parameter(<init>,boolean,);
Parameter(shouldSkipField,com.google.gson.FieldAttributes,);
Parameter(shouldSkipClass,java.lang.Class,);
Realization(com.google.gson.ExclusionStrategy);
Call(ATTRIBUTE,com.google.gson.MockExclusionStrategy,<init> --> skipClass,boolean,READ);
Call(ATTRIBUTE,com.google.gson.MockExclusionStrategy,<init> --> skipField,boolean,READ);
EndClass 633
StartClass 634
Class(com.google.gson.ObjectTypeAdapterTest.RuntimeType,N,N,Private);
Attribute(a,java.lang.Object,Public,N,N,);
Attribute(b,java.lang.Object,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 634
StartClass 635
Class(com.google.gson.ParameterizedTypeFixtures,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 635
StartClass 636
Class(com.google.gson.ParameterizedTypeFixtures.MyParameterizedType,N,N,Public);
Attribute(value,com.google.gson.T,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getValue,com.google.gson.T,Public,N,N);
Method(getExpectedJson,java.lang.String,Public,N,N);
Method(getExpectedJson$2,java.lang.String,Private,N,N);
Method(hashCode,int,Public,N,N);
Method(equals,boolean,Public,N,N);
Parameter(<init>,com.google.gson.T,);
Parameter(getExpectedJson$2,java.lang.Object,);
Parameter(equals,java.lang.Object,);
Call(ATTRIBUTE,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType,<init> --> value,com.google.gson.T,READ);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType,getExpectedJson --> getExpectedJson,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType,getExpectedJson --> format,null,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType,getExpectedJson$2 --> getClass,java.lang.Object,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType,getExpectedJson$2 --> isWrapperType,null,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType,getExpectedJson$2 --> wrap,null,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType,getExpectedJson$2 --> toString,java.lang.Object,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType,getExpectedJson$2 --> getClass,java.lang.Object,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType,getExpectedJson$2 --> equals,java.lang.Object,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType,getExpectedJson$2 --> toString,java.lang.Object,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType,getExpectedJson$2 --> getMethod,java.lang.Class,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType,getExpectedJson$2 --> invoke,java.lang.reflect.Method,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType,hashCode --> hashCode,com.google.gson.T,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType,equals --> getClass,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType,equals --> getClass,java.lang.Object,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType,equals --> equals,com.google.gson.T,);
EndClass 636
StartClass 637
Class(com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator,N,N,Public);
Attribute(instanceOfT,com.google.gson.T,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(createInstance,com.google.gson.MyParameterizedType,Public,N,N);
Parameter(<init>,com.google.gson.T,);
Parameter(createInstance,java.lang.reflect.Type,);
Realization(com.google.gson.InstanceCreator);
Call(ATTRIBUTE,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator,<init> --> instanceOfT,com.google.gson.T,READ);
EndClass 637
StartClass 638
Class(com.google.gson.InstanceCreator,Y,Y,Public);
EndClass 638
StartClass 639
Class(com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,N,N,Public);
Method(getExpectedJson,java.lang.String,Public,N,N);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(deserialize,com.google.gson.MyParameterizedType,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(getExpectedJson,com.google.gson.MyParameterizedType,);
Parameter(serialize,com.google.gson.MyParameterizedType,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
Realization(com.google.gson.JsonSerializer);
Realization(com.google.gson.JsonDeserializer);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,getExpectedJson --> getClass,com.google.gson.MyParameterizedType,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,getExpectedJson --> isArray,java.lang.Class,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,getExpectedJson --> unwrap,null,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,getExpectedJson --> isPrimitive,null,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,getExpectedJson --> append,com.google.gson.StringBuilder,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,getExpectedJson --> getClass,com.google.gson.MyParameterizedType,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,getExpectedJson --> getSimpleName,com.google.gson.MyParameterizedType,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,getExpectedJson --> append,com.google.gson.StringBuilder,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,getExpectedJson --> append,com.google.gson.StringBuilder,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,getExpectedJson --> append,com.google.gson.StringBuilder,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,getExpectedJson --> toString,com.google.gson.MyParameterizedType,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,getExpectedJson --> append,com.google.gson.StringBuilder,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,getExpectedJson --> append,com.google.gson.StringBuilder,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,getExpectedJson --> toString,com.google.gson.StringBuilder,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,serialize --> getValue,com.google.gson.MyParameterizedType,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,serialize --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,serialize --> getClass,com.google.gson.T,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,serialize --> getSimpleName,com.google.gson.T,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,serialize --> serialize,com.google.gson.JsonSerializationContext,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,deserialize --> getActualTypeArguments,java.lang.reflect.ParameterizedType,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,deserialize --> getRawType,null,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,deserialize --> getSimpleName,java.lang.Class,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,deserialize --> getAsJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,deserialize --> get,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,deserialize --> valueOf,null,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,deserialize --> getAsInt,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,deserialize --> getAsString,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,deserialize --> isPrimitive,null,);
Call(METHOD,com.google.gson.ParameterizedTypeFixtures.MyParameterizedType.MyParameterizedTypeInstanceCreator.MyParameterizedTypeAdapter,deserialize --> adaptType,com.google.gson.PrimitiveTypeAdapter,);
EndClass 639
StartClass 640
Class(com.google.gson.JsonSerializer,Y,Y,Public);
EndClass 640
StartClass 641
Class(com.google.gson.JsonDeserializer,Y,Y,Public);
EndClass 641
StartClass 642
Class(com.google.gson.PrimitiveTypeAdapter,N,N,Public);
Method(adaptType,com.google.gson.T,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(adaptType,java.lang.Object,);
Parameter(adaptType,java.lang.Class,);
Call(METHOD,com.google.gson.PrimitiveTypeAdapter,adaptType --> wrap,null,);
Call(METHOD,com.google.gson.PrimitiveTypeAdapter,adaptType --> isWrapperType,null,);
Call(METHOD,com.google.gson.PrimitiveTypeAdapter,adaptType --> toString,java.lang.Object,);
Call(METHOD,com.google.gson.PrimitiveTypeAdapter,adaptType --> length,java.lang.String,);
Call(METHOD,com.google.gson.PrimitiveTypeAdapter,adaptType --> toString,java.lang.Object,);
Call(METHOD,com.google.gson.PrimitiveTypeAdapter,adaptType --> charAt,java.lang.Object,);
Call(METHOD,com.google.gson.PrimitiveTypeAdapter,adaptType --> getConstructor,java.lang.Class,);
Call(METHOD,com.google.gson.PrimitiveTypeAdapter,adaptType --> newInstance,java.lang.reflect.Constructor,);
Call(METHOD,com.google.gson.PrimitiveTypeAdapter,adaptType --> toString,java.lang.Object,);
Call(METHOD,com.google.gson.PrimitiveTypeAdapter,adaptType --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.PrimitiveTypeAdapter,adaptType --> getMethod,java.lang.Class,);
Call(METHOD,com.google.gson.PrimitiveTypeAdapter,adaptType --> invoke,java.lang.reflect.Method,);
Call(METHOD,com.google.gson.PrimitiveTypeAdapter,adaptType --> toString,java.lang.Object,);
Call(METHOD,com.google.gson.PrimitiveTypeAdapter,adaptType --> getClass,java.lang.Object,);
EndClass 642
StartClass 643
Class(com.google.gson.regression.JsonAdapterNullSafeTest.Device,N,N,Private);
Attribute(id,java.lang.String,Public,N,N,);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.regression.JsonAdapterNullSafeTest.Device,<init> --> id,java.lang.String,READ);
EndClass 643
StartClass 644
Class(com.google.gson.regression.JsonAdapterNullSafeTest.Device.JsonAdapterFactory,N,N,Protected);
Attribute(recursiveCall,java.lang.ThreadLocal,Private,Y,Y,);
Method(create,com.google.gson.TypeAdapter,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(create,com.google.gson.Gson,);
Parameter(create,com.google.gson.reflect.TypeToken,);
Realization(com.google.gson.TypeAdapterFactory);
Call(METHOD,com.google.gson.regression.JsonAdapterNullSafeTest.Device.JsonAdapterFactory,create --> getRawType,com.google.gson.reflect.TypeToken,);
Call(METHOD,com.google.gson.regression.JsonAdapterNullSafeTest.Device.JsonAdapterFactory,create --> get,java.lang.ThreadLocal,);
Call(METHOD,com.google.gson.regression.JsonAdapterNullSafeTest.Device.JsonAdapterFactory,create --> set,java.lang.ThreadLocal,);
Call(METHOD,com.google.gson.regression.JsonAdapterNullSafeTest.Device.JsonAdapterFactory,create --> set,java.lang.ThreadLocal,);
Call(METHOD,com.google.gson.regression.JsonAdapterNullSafeTest.Device.JsonAdapterFactory,create --> getDelegateAdapter,com.google.gson.Gson,);
EndClass 644
StartClass 645
Class(com.google.gson.stream.JsonReaderPathTest,N,N,Public);
Attribute(factory,com.google.gson.stream.Factory,Public,N,N,);
Method(parameters,com.google.gson.stream.List,Public,Y,N);
Method(path,void,Public,N,N);
Method(objectPath,void,Public,N,N);
Method(arrayPath,void,Public,N,N);
Method(multipleTopLevelValuesInOneDocument,void,Public,N,N);
Method(skipArrayElements,void,Public,N,N);
Method(skipObjectNames,void,Public,N,N);
Method(skipObjectValues,void,Public,N,N);
Method(skipNestedStructures,void,Public,N,N);
Method(arrayOfObjects,void,Public,N,N);
Method(arrayOfArrays,void,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,parameters --> asList,null,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> create,com.google.gson.stream.Factory,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,path --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> create,com.google.gson.stream.Factory,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> close,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,objectPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> create,com.google.gson.stream.Factory,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> close,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayPath --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,multipleTopLevelValuesInOneDocument --> assumeTrue,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,multipleTopLevelValuesInOneDocument --> create,com.google.gson.stream.Factory,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,multipleTopLevelValuesInOneDocument --> setLenient,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,multipleTopLevelValuesInOneDocument --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,multipleTopLevelValuesInOneDocument --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,multipleTopLevelValuesInOneDocument --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,multipleTopLevelValuesInOneDocument --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,multipleTopLevelValuesInOneDocument --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,multipleTopLevelValuesInOneDocument --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,multipleTopLevelValuesInOneDocument --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,multipleTopLevelValuesInOneDocument --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipArrayElements --> create,com.google.gson.stream.Factory,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipArrayElements --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipArrayElements --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipArrayElements --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipArrayElements --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipArrayElements --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipObjectNames --> create,com.google.gson.stream.Factory,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipObjectNames --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipObjectNames --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipObjectNames --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipObjectNames --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipObjectValues --> create,com.google.gson.stream.Factory,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipObjectValues --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipObjectValues --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipObjectValues --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipObjectValues --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipObjectValues --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipObjectValues --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipObjectValues --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipObjectValues --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipObjectValues --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipObjectValues --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipNestedStructures --> create,com.google.gson.stream.Factory,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipNestedStructures --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipNestedStructures --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipNestedStructures --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,skipNestedStructures --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> create,com.google.gson.stream.Factory,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfObjects --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> create,com.google.gson.stream.Factory,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> getPath,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> assertEquals,com.google.gson.stream.JsonReaderPathTest,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest,arrayOfArrays --> getPath,com.google.gson.stream.JsonReader,);
EndClass 645
StartClass 646
Class(com.google.gson.stream.JsonReaderPathTest.Factory,N,N,Public);
Method(create,com.google.gson.stream.JsonReader,Public,N,N);
Method(create$2,com.google.gson.stream.JsonReader,Public,N,N);
Method(create$3,com.google.gson.stream.JsonReader,Public,N,Y);
Method(<init>,void,Public,N,N);
Parameter(create,java.lang.String,);
Parameter(create$2,java.lang.String,);
Parameter(create$3,java.lang.String,);
Call(METHOD,com.google.gson.stream.JsonReaderPathTest.Factory,create$2 --> parse,null,);
EndClass 646
StartClass 647
Class(com.google.gson.VersionExclusionStrategyTest.MockObject,N,N,Private);
Attribute(someField,int,Public,N,Y,);
Method(<init>,void,Public,N,N);
EndClass 647
StartClass 648
Class(com.google.gson.metrics.BagOfPrimitives,N,N,Public);
Attribute(DEFAULT_VALUE,long,Public,Y,Y,);
Attribute(longValue,long,Public,N,N,);
Attribute(intValue,int,Public,N,N,);
Attribute(booleanValue,boolean,Public,N,N,);
Attribute(stringValue,java.lang.String,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getIntValue,int,Public,N,N);
Method(getExpectedJson,java.lang.String,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>$2,long,);
Parameter(<init>$2,int,);
Parameter(<init>$2,boolean,);
Parameter(<init>$2,java.lang.String,);
Parameter(equals,java.lang.Object,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitives,<init> --> <init>$2,com.google.gson.metrics.BagOfPrimitives,);
Call(ATTRIBUTE,com.google.gson.metrics.BagOfPrimitives,<init>$2 --> longValue,long,READ);
Call(ATTRIBUTE,com.google.gson.metrics.BagOfPrimitives,<init>$2 --> intValue,int,READ);
Call(ATTRIBUTE,com.google.gson.metrics.BagOfPrimitives,<init>$2 --> booleanValue,boolean,READ);
Call(ATTRIBUTE,com.google.gson.metrics.BagOfPrimitives,<init>$2 --> stringValue,java.lang.String,READ);
Call(METHOD,com.google.gson.metrics.BagOfPrimitives,getExpectedJson --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitives,getExpectedJson --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitives,getExpectedJson --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitives,getExpectedJson --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitives,getExpectedJson --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitives,getExpectedJson --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitives,getExpectedJson --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitives,getExpectedJson --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitives,getExpectedJson --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitives,getExpectedJson --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitives,getExpectedJson --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitives,getExpectedJson --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitives,getExpectedJson --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitives,getExpectedJson --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitives,getExpectedJson --> toString,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitives,hashCode --> hashCode,java.lang.String,);
Call(ATTRIBUTE,com.google.gson.metrics.BagOfPrimitives,hashCode --> intValue,int,READ);
Call(METHOD,com.google.gson.metrics.BagOfPrimitives,equals --> getClass,com.google.gson.metrics.BagOfPrimitives,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitives,equals --> getClass,java.lang.Object,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitives,equals --> equals,java.lang.String,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitives,toString --> format,null,);
EndClass 648
StartClass 649
Class(com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Attribute(json,java.lang.String,Private,N,N,);
Method(main,void,Public,Y,N);
Method(setUp,void,Protected,N,N);
Method(timeBagOfPrimitivesDefault,void,Public,N,N);
Method(timeBagOfPrimitivesStreaming,void,Public,N,N);
Method(timeBagOfPrimitivesReflectionStreaming,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(main,java.lang.String[],);
Parameter(timeBagOfPrimitivesDefault,int,);
Parameter(timeBagOfPrimitivesStreaming,int,);
Parameter(timeBagOfPrimitivesReflectionStreaming,int,);
SuperClass(com.google.caliper.SimpleBenchmark);
Generalization(com.google.caliper.SimpleBenchmark);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,main --> main,null,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,setUp --> toJson,com.google.gson.Gson,);
Call(ATTRIBUTE,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,setUp --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesDefault --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesStreaming --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesStreaming --> hasNext,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesStreaming --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesStreaming --> equals,java.lang.String,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesStreaming --> nextLong,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesStreaming --> equals,java.lang.String,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesStreaming --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesStreaming --> equals,java.lang.String,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesStreaming --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesStreaming --> equals,java.lang.String,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesStreaming --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesStreaming --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesReflectionStreaming --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesReflectionStreaming --> hasNext,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesReflectionStreaming --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesReflectionStreaming --> getDeclaredFields,null,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesReflectionStreaming --> getName,null,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesReflectionStreaming --> equals,null,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesReflectionStreaming --> getType,null,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesReflectionStreaming --> equals,java.lang.Class,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesReflectionStreaming --> setLong,null,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesReflectionStreaming --> nextLong,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesReflectionStreaming --> equals,java.lang.Class,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesReflectionStreaming --> setInt,null,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesReflectionStreaming --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesReflectionStreaming --> equals,java.lang.Class,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesReflectionStreaming --> setBoolean,null,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesReflectionStreaming --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesReflectionStreaming --> equals,java.lang.Class,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesReflectionStreaming --> set,null,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesReflectionStreaming --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark,timeBagOfPrimitivesReflectionStreaming --> endObject,com.google.gson.stream.JsonReader,);
EndClass 649
StartClass 650
Class(com.google.caliper.SimpleBenchmark,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark);
SubClass(com.google.gson.metrics.CollectionsDeserializationBenchmark);
SubClass(com.google.gson.metrics.ParseBenchmark);
SubClass(com.google.gson.metrics.SerializationBenchmark);
EndClass 650
StartClass 651
Class(com.google.gson.metrics.CollectionsDeserializationBenchmark,N,N,Public);
Attribute(LIST_TYPE,java.lang.reflect.Type,Private,Y,Y,);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Attribute(json,java.lang.String,Private,N,N,);
Method(main,void,Public,Y,N);
Method(setUp,void,Protected,N,N);
Method(timeCollectionsDefault,void,Public,N,N);
Method(timeCollectionsStreaming,void,Public,N,N);
Method(timeCollectionsReflectionStreaming,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(main,java.lang.String[],);
Parameter(timeCollectionsDefault,int,);
Parameter(timeCollectionsStreaming,int,);
Parameter(timeCollectionsReflectionStreaming,int,);
SuperClass(com.google.caliper.SimpleBenchmark);
Generalization(com.google.caliper.SimpleBenchmark);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,main --> main,null,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,setUp --> add,java.util.List,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,setUp --> toJson,com.google.gson.Gson,);
Call(ATTRIBUTE,com.google.gson.metrics.CollectionsDeserializationBenchmark,setUp --> gson,com.google.gson.Gson,READ);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsDefault --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsStreaming --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsStreaming --> hasNext,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsStreaming --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsStreaming --> hasNext,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsStreaming --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsStreaming --> equals,java.lang.String,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsStreaming --> nextLong,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsStreaming --> equals,java.lang.String,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsStreaming --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsStreaming --> equals,java.lang.String,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsStreaming --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsStreaming --> equals,java.lang.String,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsStreaming --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsStreaming --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsStreaming --> add,java.util.List,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsStreaming --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsReflectionStreaming --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsReflectionStreaming --> hasNext,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsReflectionStreaming --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsReflectionStreaming --> hasNext,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsReflectionStreaming --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsReflectionStreaming --> getDeclaredFields,null,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsReflectionStreaming --> getName,null,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsReflectionStreaming --> equals,null,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsReflectionStreaming --> getType,null,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsReflectionStreaming --> equals,java.lang.Class,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsReflectionStreaming --> setLong,null,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsReflectionStreaming --> nextLong,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsReflectionStreaming --> equals,java.lang.Class,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsReflectionStreaming --> setInt,null,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsReflectionStreaming --> nextInt,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsReflectionStreaming --> equals,java.lang.Class,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsReflectionStreaming --> setBoolean,null,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsReflectionStreaming --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsReflectionStreaming --> equals,java.lang.Class,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsReflectionStreaming --> set,null,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsReflectionStreaming --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsReflectionStreaming --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsReflectionStreaming --> add,java.util.List,);
Call(METHOD,com.google.gson.metrics.CollectionsDeserializationBenchmark,timeCollectionsReflectionStreaming --> endArray,com.google.gson.stream.JsonReader,);
EndClass 651
StartClass 652
Class(com.google.gson.metrics.ParseBenchmark,N,N,Public);
Attribute(document,com.google.gson.metrics.Document,Public,N,N,);
Attribute(api,com.google.gson.metrics.Api,Public,N,N,);
Method(<init>,void,Public,N,N);
SuperClass(com.google.caliper.SimpleBenchmark);
Generalization(com.google.caliper.SimpleBenchmark);
EndClass 652
StartClass 653
Class(com.google.gson.metrics.SerializationBenchmark,N,N,Public);
Attribute(gson,com.google.gson.Gson,Private,N,N,);
Attribute(bag,com.google.gson.metrics.BagOfPrimitives,Private,N,N,);
Attribute(pretty,boolean,Private,N,N,);
Method(main,void,Public,Y,N);
Method(setUp,void,Protected,N,N);
Method(timeObjectSerialization,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(main,java.lang.String[],);
Parameter(timeObjectSerialization,int,);
SuperClass(com.google.caliper.SimpleBenchmark);
Generalization(com.google.caliper.SimpleBenchmark);
Composition(com.google.gson.Gson);
Composition(com.google.gson.metrics.BagOfPrimitives);
Call(METHOD,com.google.gson.metrics.SerializationBenchmark,main --> main,null,);
Call(METHOD,com.google.gson.metrics.SerializationBenchmark,setUp --> setPrettyPrinting,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.metrics.SerializationBenchmark,setUp --> create,com.google.gson.GsonBuilder,);
Call(ATTRIBUTE,com.google.gson.metrics.SerializationBenchmark,setUp --> pretty,boolean,READ);
Call(METHOD,com.google.gson.metrics.SerializationBenchmark,timeObjectSerialization --> toJson,com.google.gson.Gson,);
EndClass 653
StartClass 654
Class(com.google.gson.metrics.ParseBenchmark.Document,N,N,Public);
Attribute(gsonType,java.lang.reflect.Type,Private,N,Y,);
Attribute(jacksonType,org.codehaus.jackson.type.TypeReference,Private,N,Y,);
Method(<init>,void,Private,N,N);
Parameter(<init>,com.google.gson.reflect.TypeToken,);
Parameter(<init>,org.codehaus.jackson.type.TypeReference,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document,<init> --> getType,com.google.gson.reflect.TypeToken,);
EndClass 654
StartClass 655
Class(com.google.gson.metrics.ParseBenchmark.Document.Api,N,N,Public);
Attribute(text,com.google.gson.metrics.char[],Private,N,N,);
Attribute(parser,com.google.gson.metrics.Parser,Private,N,N,);
Method(newParser,com.google.gson.metrics.Parser,Public,N,N);
Method(newParser$2,com.google.gson.metrics.Parser,Public,N,N);
Method(newParser$3,com.google.gson.metrics.Parser,Public,N,N);
Method(newParser$4,com.google.gson.metrics.Parser,Public,N,N);
Method(newParser$5,com.google.gson.metrics.Parser,Public,N,N);
Method(newParser$6,com.google.gson.metrics.Parser,Public,N,N);
Method(newParser$7,com.google.gson.metrics.Parser,Public,N,Y);
Method(setUp,void,Protected,N,N);
Method(timeParse,void,Public,N,N);
Method(resourceToString,java.lang.String,Private,Y,N);
Method(main,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(timeParse,int,);
Parameter(resourceToString,java.lang.String,);
Parameter(main,java.lang.String[],);
Composition(com.google.gson.metrics.Parser);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api,setUp --> resourceToString,com.google.gson.metrics.ParseBenchmark.Document.Api,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api,setUp --> name,null,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api,setUp --> toCharArray,com.google.gson.metrics.ParseBenchmark.Document.Api,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api,setUp --> newParser,null,);
Call(ATTRIBUTE,com.google.gson.metrics.ParseBenchmark.Document.Api,setUp --> text,com.google.gson.metrics.char[],WRITE);
Call(ATTRIBUTE,com.google.gson.metrics.ParseBenchmark.Document.Api,setUp --> parser,com.google.gson.metrics.Parser,WRITE);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api,timeParse --> parse,com.google.gson.metrics.Parser,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api,resourceToString --> getResourceAsStream,null,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api,resourceToString --> read,java.io.Reader,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api,resourceToString --> write,java.io.StringWriter,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api,resourceToString --> close,java.io.Reader,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api,resourceToString --> toString,java.io.StringWriter,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api,main --> main,null,);
EndClass 655
StartClass 656
Class(com.google.gson.metrics.Parser,Y,Y,Public);
EndClass 656
StartClass 657
Class(com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser,N,N,Private);
Method(parse,void,Public,N,N);
Method(readToken,void,Private,N,N);
Method(<init>,void,Public,N,N);
Parameter(parse,com.google.gson.metrics.char[],);
Parameter(parse,com.google.gson.metrics.Document,);
Parameter(readToken,com.google.gson.stream.JsonReader,);
Realization(com.google.gson.metrics.Parser);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser,parse --> readToken,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser,parse --> close,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser,readToken --> peek,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser,readToken --> beginArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser,readToken --> endArray,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser,readToken --> beginObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser,readToken --> endObject,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser,readToken --> nextName,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser,readToken --> nextBoolean,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser,readToken --> nextNull,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser,readToken --> nextLong,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser,readToken --> nextString,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser,readToken --> peek,com.google.gson.stream.JsonReader,);
EndClass 657
StartClass 658
Class(com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser,N,N,Private);
Method(parse,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(parse,com.google.gson.metrics.char[],);
Parameter(parse,com.google.gson.metrics.Document,);
Realization(com.google.gson.metrics.Parser);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser,parse --> skipValue,com.google.gson.stream.JsonReader,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser,parse --> close,com.google.gson.stream.JsonReader,);
EndClass 658
StartClass 659
Class(com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser,N,N,Private);
Method(parse,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(parse,com.google.gson.metrics.char[],);
Parameter(parse,com.google.gson.metrics.Document,);
Realization(com.google.gson.metrics.Parser);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser,parse --> createJsonParser,org.codehaus.jackson.JsonFactory,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser,parse --> configure,com.google.gson.metrics.org.codehaus.jackson.JsonParser,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser,parse --> nextToken,com.google.gson.metrics.org.codehaus.jackson.JsonParser,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser,parse --> getCurrentName,com.google.gson.metrics.org.codehaus.jackson.JsonParser,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser,parse --> getText,com.google.gson.metrics.org.codehaus.jackson.JsonParser,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser,parse --> getLongValue,com.google.gson.metrics.org.codehaus.jackson.JsonParser,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser,parse --> close,com.google.gson.metrics.org.codehaus.jackson.JsonParser,);
EndClass 659
StartClass 660
Class(com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser,N,N,Private);
Method(parse,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(parse,com.google.gson.metrics.char[],);
Parameter(parse,com.google.gson.metrics.Document,);
Realization(com.google.gson.metrics.Parser);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser,parse --> parse,com.google.gson.JsonParser,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser,parse --> setDateFormat,com.google.gson.GsonBuilder,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser,parse --> create,com.google.gson.GsonBuilder,);
EndClass 660
StartClass 661
Class(com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser,N,N,Private);
Attribute(gson,com.google.gson.Gson,Private,Y,N,);
Method(parse,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(parse,com.google.gson.metrics.char[],);
Parameter(parse,com.google.gson.metrics.Document,);
Realization(com.google.gson.metrics.Parser);
Composition(com.google.gson.Gson);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser,parse --> fromJson,com.google.gson.Gson,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser,parse --> configure,org.codehaus.jackson.map.ObjectMapper,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser,parse --> configure,org.codehaus.jackson.map.ObjectMapper,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser,parse --> setDateFormat,org.codehaus.jackson.map.ObjectMapper,);
EndClass 661
StartClass 662
Class(com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser.JacksonBindParser,N,N,Private);
Attribute(mapper,org.codehaus.jackson.map.ObjectMapper,Private,Y,N,);
Method(parse,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(parse,com.google.gson.metrics.char[],);
Parameter(parse,com.google.gson.metrics.Document,);
Realization(com.google.gson.metrics.Parser);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser.JacksonBindParser,parse --> readValue,org.codehaus.jackson.map.ObjectMapper,);
EndClass 662
StartClass 663
Class(com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser.JacksonBindParser.Tweet,N,N,Protected);
Attribute(coordinates,java.lang.String,Public,N,N,);
Attribute(favorited,boolean,Public,N,N,);
Attribute(created_at,java.util.Date,Public,N,N,);
Attribute(truncated,boolean,Public,N,N,);
Attribute(retweeted_status,com.google.gson.metrics.Tweet,Public,N,N,);
Attribute(id_str,java.lang.String,Public,N,N,);
Attribute(in_reply_to_id_str,java.lang.String,Public,N,N,);
Attribute(contributors,java.lang.String,Public,N,N,);
Attribute(text,java.lang.String,Public,N,N,);
Attribute(id,long,Public,N,N,);
Attribute(retweet_count,java.lang.String,Public,N,N,);
Attribute(in_reply_to_status_id_str,java.lang.String,Public,N,N,);
Attribute(geo,java.lang.Object,Public,N,N,);
Attribute(retweeted,boolean,Public,N,N,);
Attribute(in_reply_to_user_id,java.lang.String,Public,N,N,);
Attribute(in_reply_to_screen_name,java.lang.String,Public,N,N,);
Attribute(place,java.lang.Object,Public,N,N,);
Attribute(user,com.google.gson.metrics.User,Public,N,N,);
Attribute(source,java.lang.String,Public,N,N,);
Attribute(in_reply_to_user_id_str,java.lang.String,Public,N,N,);
Method(<init>,void,Public,N,N);
Composition(com.google.gson.metrics.Tweet);
Composition(com.google.gson.metrics.User);
EndClass 663
StartClass 664
Class(com.google.gson.metrics.Tweet,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 664
StartClass 665
Class(com.google.gson.metrics.User,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 665
StartClass 666
Class(com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser.JacksonBindParser.Tweet.User,N,N,Protected);
Attribute(name,java.lang.String,Public,N,N,);
Attribute(profile_sidebar_border_color,java.lang.String,Public,N,N,);
Attribute(profile_background_tile,boolean,Public,N,N,);
Attribute(profile_sidebar_fill_color,java.lang.String,Public,N,N,);
Attribute(created_at,java.util.Date,Public,N,N,);
Attribute(location,java.lang.String,Public,N,N,);
Attribute(profile_image_url,java.lang.String,Public,N,N,);
Attribute(follow_request_sent,boolean,Public,N,N,);
Attribute(profile_link_color,java.lang.String,Public,N,N,);
Attribute(is_translator,boolean,Public,N,N,);
Attribute(id_str,java.lang.String,Public,N,N,);
Attribute(favourites_count,int,Public,N,N,);
Attribute(contributors_enabled,boolean,Public,N,N,);
Attribute(url,java.lang.String,Public,N,N,);
Attribute(default_profile,boolean,Public,N,N,);
Attribute(utc_offset,long,Public,N,N,);
Attribute(id,long,Public,N,N,);
Attribute(profile_use_background_image,boolean,Public,N,N,);
Attribute(listed_count,int,Public,N,N,);
Attribute(lang,java.lang.String,Public,N,N,);
Attribute(isProtected,boolean,Public,N,N,);
Attribute(followers_count,int,Public,N,N,);
Attribute(profile_text_color,java.lang.String,Public,N,N,);
Attribute(profile_background_color,java.lang.String,Public,N,N,);
Attribute(time_zone,java.lang.String,Public,N,N,);
Attribute(description,java.lang.String,Public,N,N,);
Attribute(notifications,boolean,Public,N,N,);
Attribute(geo_enabled,boolean,Public,N,N,);
Attribute(verified,boolean,Public,N,N,);
Attribute(profile_background_image_url,java.lang.String,Public,N,N,);
Attribute(defalut_profile_image,boolean,Public,N,N,);
Attribute(friends_count,int,Public,N,N,);
Attribute(statuses_count,int,Public,N,N,);
Attribute(screen_name,java.lang.String,Public,N,N,);
Attribute(following,boolean,Public,N,N,);
Attribute(show_all_inline_media,boolean,Public,N,N,);
Method(<init>,void,Public,N,N);
EndClass 666
StartClass 667
Class(com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser.JacksonBindParser.Tweet.User.Feed,N,N,Protected);
Attribute(id,java.lang.String,Public,N,N,);
Attribute(title,java.lang.String,Public,N,N,);
Attribute(description,java.lang.String,Public,N,N,);
Attribute(alternates,java.util.List,Public,N,N,);
Attribute(updated,long,Public,N,N,);
Attribute(items,java.util.List,Public,N,N,);
Method(toString,java.lang.String,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser.JacksonBindParser.Tweet.User.Feed,toString --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser.JacksonBindParser.Tweet.User.Feed,toString --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser.JacksonBindParser.Tweet.User.Feed,toString --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser.JacksonBindParser.Tweet.User.Feed,toString --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser.JacksonBindParser.Tweet.User.Feed,toString --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser.JacksonBindParser.Tweet.User.Feed,toString --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser.JacksonBindParser.Tweet.User.Feed,toString --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser.JacksonBindParser.Tweet.User.Feed,toString --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser.JacksonBindParser.Tweet.User.Feed,toString --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser.JacksonBindParser.Tweet.User.Feed,toString --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser.JacksonBindParser.Tweet.User.Feed,toString --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser.JacksonBindParser.Tweet.User.Feed,toString --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser.JacksonBindParser.Tweet.User.Feed,toString --> append,com.google.gson.metrics.StringBuilder,);
Call(METHOD,com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser.JacksonBindParser.Tweet.User.Feed,toString --> toString,com.google.gson.metrics.StringBuilder,);
EndClass 667
StartClass 668
Class(com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser.JacksonBindParser.Tweet.User.Feed.Link,N,N,Protected);
Attribute(href,java.lang.String,Public,N,N,);
Method(toString,java.lang.String,Public,N,N);
Method(<init>,void,Public,N,N);
EndClass 668
StartClass 669
Class(com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser.JacksonBindParser.Tweet.User.Feed.Link.Item,N,N,Protected);
Attribute(categories,java.util.List,Public,N,N,);
Attribute(title,java.lang.String,Public,N,N,);
Attribute(published,long,Public,N,N,);
Attribute(updated,long,Public,N,N,);
Attribute(alternates,java.util.List,Public,N,N,);
Attribute(content,com.google.gson.metrics.Content,Public,N,N,);
Attribute(author,java.lang.String,Public,N,N,);
Attribute(likingUsers,java.util.List,Public,N,N,);
Method(toString,java.lang.String,Public,N,N);
Method(<init>,void,Public,N,N);
Composition(com.google.gson.metrics.Content);
EndClass 669
StartClass 670
Class(com.google.gson.metrics.Content,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 670
StartClass 671
Class(com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser.JacksonBindParser.Tweet.User.Feed.Link.Item.Content,N,N,Protected);
Attribute(content,java.lang.String,Public,N,N,);
Method(toString,java.lang.String,Public,N,N);
Method(<init>,void,Public,N,N);
EndClass 671
StartClass 672
Class(com.google.gson.metrics.ParseBenchmark.Document.Api.Parser.GsonStreamParser.GsonSkipParser.JacksonStreamParser.GsonDomParser.GsonBindParser.JacksonBindParser.Tweet.User.Feed.Link.Item.Content.ReaderUser,N,N,Protected);
Attribute(userId,java.lang.String,Public,N,N,);
Method(toString,java.lang.String,Public,N,N);
Method(<init>,void,Public,N,N);
EndClass 672
StartClass 673
Class(com.google.gson.protobuf.ProtoTypeAdapter,N,N,Public);
Method(<init>,void,Public,N,N);
Realization(com.google.gson.protobuf.JsonSerializer);
Realization(com.google.gson.protobuf.JsonDeserializer);
EndClass 673
StartClass 674
Class(com.google.gson.protobuf.JsonSerializer,Y,Y,Public);
EndClass 674
StartClass 675
Class(com.google.gson.protobuf.JsonDeserializer,Y,Y,Public);
EndClass 675
StartClass 676
Class(com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 676
StartClass 677
Class(com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,N,N,Public);
Attribute(serializedNameExtensions,java.util.Set,Private,N,Y,);
Attribute(serializedEnumValueExtensions,java.util.Set,Private,N,Y,);
Attribute(enumSerialization,com.google.gson.protobuf.EnumSerialization,Private,N,N,);
Attribute(protoFormat,com.google.common.base.CaseFormat,Private,N,N,);
Attribute(jsonFormat,com.google.common.base.CaseFormat,Private,N,N,);
Attribute(ENUM_TYPE,com.google.gson.protobuf.com.google.protobuf.Descriptors.FieldDescriptor.Type,Private,Y,Y,);
Attribute(mapOfMapOfMethods,java.util.concurrent.ConcurrentMap,Private,Y,Y,);
Attribute(enumSerialization,com.google.gson.protobuf.EnumSerialization,Private,N,Y,);
Attribute(protoFormat,com.google.common.base.CaseFormat,Private,N,Y,);
Attribute(jsonFormat,com.google.common.base.CaseFormat,Private,N,Y,);
Attribute(serializedNameExtensions,java.util.Set,Private,N,Y,);
Attribute(serializedEnumValueExtensions,java.util.Set,Private,N,Y,);
Method(<init>,void,Private,N,N);
Method(setEnumSerialization,com.google.gson.protobuf.Builder,Public,N,N);
Method(setFieldNameSerializationFormat,com.google.gson.protobuf.Builder,Public,N,N);
Method(addSerializedNameExtension,com.google.gson.protobuf.Builder,Public,N,N);
Method(addSerializedEnumValueExtension,com.google.gson.protobuf.Builder,Public,N,N);
Method(build,com.google.gson.protobuf.ProtoTypeAdapter,Public,N,N);
Method(newBuilder,com.google.gson.protobuf.Builder,Public,Y,N);
Method(<init>$2,void,Private,N,N);
Method(serialize,com.google.gson.JsonElement,Public,N,N);
Method(deserialize,com.google.protobuf.Message,Public,N,N);
Method(getCustSerializedName,java.lang.String,Private,N,N);
Method(getCustSerializedEnumValue,java.lang.String,Private,N,N);
Method(getEnumValue,java.lang.Object,Private,N,N);
Method(findValueByNameAndExtension,com.google.protobuf.Descriptors.EnumValueDescriptor,Private,N,N);
Method(getCachedMethod,java.lang.reflect.Method,Private,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,com.google.gson.protobuf.EnumSerialization,);
Parameter(<init>,com.google.common.base.CaseFormat,);
Parameter(<init>,com.google.common.base.CaseFormat,);
Parameter(setEnumSerialization,com.google.gson.protobuf.EnumSerialization,);
Parameter(setFieldNameSerializationFormat,com.google.common.base.CaseFormat,);
Parameter(setFieldNameSerializationFormat,com.google.common.base.CaseFormat,);
Parameter(addSerializedNameExtension,com.google.protobuf.Extension,);
Parameter(addSerializedEnumValueExtension,com.google.protobuf.Extension,);
Parameter(<init>$2,com.google.gson.protobuf.EnumSerialization,);
Parameter(<init>$2,com.google.common.base.CaseFormat,);
Parameter(<init>$2,com.google.common.base.CaseFormat,);
Parameter(<init>$2,java.util.Set,);
Parameter(<init>$2,java.util.Set,);
Parameter(serialize,com.google.protobuf.Message,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
Parameter(getCustSerializedName,com.google.protobuf.DescriptorProtos.FieldOptions,);
Parameter(getCustSerializedName,java.lang.String,);
Parameter(getCustSerializedEnumValue,com.google.protobuf.DescriptorProtos.EnumValueOptions,);
Parameter(getCustSerializedEnumValue,java.lang.String,);
Parameter(getEnumValue,com.google.protobuf.Descriptors.EnumValueDescriptor,);
Parameter(findValueByNameAndExtension,com.google.protobuf.Descriptors.EnumDescriptor,);
Parameter(findValueByNameAndExtension,com.google.gson.JsonElement,);
Parameter(getCachedMethod,java.lang.Class,);
Parameter(getCachedMethod,java.lang.String,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,<init> --> setEnumSerialization,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,<init> --> setFieldNameSerializationFormat,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,setEnumSerialization --> checkNotNull,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,addSerializedNameExtension --> add,java.util.Set,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,addSerializedNameExtension --> checkNotNull,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,addSerializedEnumValueExtension --> add,java.util.Set,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,addSerializedEnumValueExtension --> checkNotNull,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,newBuilder --> makeMap,com.google.common.collect.MapMaker,);
Call(ATTRIBUTE,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,<init>$2 --> enumSerialization,com.google.gson.protobuf.EnumSerialization,READ);
Call(ATTRIBUTE,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,<init>$2 --> protoFormat,com.google.common.base.CaseFormat,READ);
Call(ATTRIBUTE,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,<init>$2 --> jsonFormat,com.google.common.base.CaseFormat,READ);
Call(ATTRIBUTE,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,<init>$2 --> serializedNameExtensions,java.util.Set,READ);
Call(ATTRIBUTE,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,<init>$2 --> serializedEnumValueExtensions,java.util.Set,READ);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,serialize --> getAllFields,com.google.protobuf.Message,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,serialize --> entrySet,java.util.Map,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,serialize --> getKey,null,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,serialize --> getCustSerializedName,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,serialize --> getOptions,com.google.protobuf.Descriptors.FieldDescriptor,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,serialize --> getName,com.google.protobuf.Descriptors.FieldDescriptor,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,serialize --> getType,com.google.protobuf.Descriptors.FieldDescriptor,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,serialize --> getValue,null,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,serialize --> getValue,null,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,serialize --> add,com.google.gson.JsonArray,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,serialize --> serialize,com.google.gson.JsonSerializationContext,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,serialize --> getEnumValue,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,serialize --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,serialize --> getValue,null,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,serialize --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,serialize --> serialize,com.google.gson.JsonSerializationContext,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,serialize --> getEnumValue,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,serialize --> add,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,serialize --> serialize,com.google.gson.JsonSerializationContext,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,serialize --> getValue,null,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> getAsJsonObject,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> isAssignableFrom,null,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> getCachedMethod,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> invoke,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> getCachedMethod,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> invoke,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> getCachedMethod,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> invoke,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> getFields,com.google.protobuf.Descriptors.Descriptor,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> getCustSerializedName,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> getOptions,null,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> getName,null,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> get,com.google.gson.JsonObject,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> isJsonNull,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> getType,null,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> isJsonArray,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> getAsJsonArray,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> size,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> getAsJsonArray,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> add,java.util.Collection,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> findValueByNameAndExtension,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> getEnumType,null,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> findValueByNameAndExtension,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> getEnumType,null,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> setField,com.google.gson.protobuf.Message.Builder,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> isRepeated,null,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> to,com.google.common.base.CaseFormat,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> getName,null,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> getDeclaredField,java.lang.Class,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> getGenericType,java.lang.reflect.Field,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> deserialize,com.google.gson.JsonDeserializationContext,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> setField,com.google.gson.protobuf.Message.Builder,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> getField,com.google.protobuf.Message,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> deserialize,com.google.gson.JsonDeserializationContext,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> getClass,java.lang.Object,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> setField,com.google.gson.protobuf.Message.Builder,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,deserialize --> build,com.google.gson.protobuf.Message.Builder,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,getCustSerializedName --> hasExtension,com.google.protobuf.DescriptorProtos.FieldOptions,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,getCustSerializedName --> getExtension,com.google.protobuf.DescriptorProtos.FieldOptions,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,getCustSerializedName --> to,com.google.common.base.CaseFormat,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,getCustSerializedEnumValue --> hasExtension,com.google.protobuf.DescriptorProtos.EnumValueOptions,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,getCustSerializedEnumValue --> getExtension,com.google.protobuf.DescriptorProtos.EnumValueOptions,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,getEnumValue --> getCustSerializedEnumValue,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,getEnumValue --> getOptions,com.google.protobuf.Descriptors.EnumValueDescriptor,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,getEnumValue --> getName,com.google.protobuf.Descriptors.EnumValueDescriptor,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,getEnumValue --> getNumber,com.google.protobuf.Descriptors.EnumValueDescriptor,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,findValueByNameAndExtension --> getValues,com.google.protobuf.Descriptors.EnumDescriptor,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,findValueByNameAndExtension --> getCustSerializedEnumValue,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,findValueByNameAndExtension --> getOptions,null,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,findValueByNameAndExtension --> getName,null,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,findValueByNameAndExtension --> equals,java.lang.String,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,findValueByNameAndExtension --> getAsString,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,findValueByNameAndExtension --> format,null,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,findValueByNameAndExtension --> getAsString,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,findValueByNameAndExtension --> findValueByNumber,com.google.protobuf.Descriptors.EnumDescriptor,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,findValueByNameAndExtension --> getAsInt,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,findValueByNameAndExtension --> format,null,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,findValueByNameAndExtension --> getAsInt,com.google.gson.JsonElement,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,getCachedMethod --> get,java.util.concurrent.ConcurrentMap,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,getCachedMethod --> makeMap,com.google.common.collect.MapMaker,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,getCachedMethod --> putIfAbsent,java.util.concurrent.ConcurrentMap,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,getCachedMethod --> get,java.util.Map,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,getCachedMethod --> getMethod,java.lang.Class,);
Call(METHOD,com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization.Builder,getCachedMethod --> putIfAbsent,java.util.Map,);
EndClass 677
StartClass 678
Class(com.google.gson.protobuf.Builder,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 678
StartClass 679
Class(com.google.gson.interceptors.JsonPostDeserializer,Y,Y,Public);
Method(postDeserialize,void,Public,N,Y);
Parameter(postDeserialize,com.google.gson.interceptors.T,);
EndClass 679
StartClass 680
Class(com.google.gson.internal.ObjectConstructor,Y,Y,Public);
Method(construct,com.google.gson.internal.T,Public,N,Y);
EndClass 680
StartClass 681
Class(com.google.gson.JsonDeserializer,Y,Y,Public);
Method(deserialize,com.google.gson.T,Public,N,Y);
Parameter(deserialize,com.google.gson.JsonElement,);
Parameter(deserialize,java.lang.reflect.Type,);
Parameter(deserialize,com.google.gson.JsonDeserializationContext,);
EndClass 681
StartClass 682
Class(com.google.gson.JsonSerializer,Y,Y,Public);
Method(serialize,com.google.gson.JsonElement,Public,N,Y);
Parameter(serialize,com.google.gson.T,);
Parameter(serialize,java.lang.reflect.Type,);
Parameter(serialize,com.google.gson.JsonSerializationContext,);
EndClass 682
StartClass 683
Class(com.google.gson.functional.ExposeFieldsTest.ClassWithExposedFields.ClassWithNoExposedFields.SomeInterface,Y,Y,Public);
EndClass 683
StartClass 684
Class(com.google.gson.functional.InterfaceTest.TestObjectInterface,Y,Y,Public);
EndClass 684
StartClass 685
Class(com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters.Quantity.MyQuantity.Measurable,Y,Y,Public);
EndClass 685
StartClass 686
Class(com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters.Quantity.MyQuantity.Measurable.Field,Y,Y,Public);
EndClass 686
StartClass 687
Class(com.google.gson.functional.ParameterizedTypesTest.ObjectWithTypeVariables.MultiParameters.Quantity.MyQuantity.Measurable.Field.Immutable,Y,Y,Public);
EndClass 687
StartClass 688
Class(com.google.gson.internal.UnsafeAllocatorInstantiationTest.Interface,Y,Y,Public);
EndClass 688
StartClass 689
Class(com.google.gson.metrics.ParseBenchmark.Document.Api.Parser,Y,Y,Public);
Method(parse,void,Public,N,Y);
Parameter(parse,com.google.gson.metrics.char[],);
Parameter(parse,com.google.gson.metrics.Document,);
EndClass 689
