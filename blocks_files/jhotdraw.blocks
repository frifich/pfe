StartClass 1
Class(org.jhotdraw.samples.draw.Main,N,N,Public);
Method(<init>,void,Public,N,N);
Method(main,void,Public,Y,N);
Parameter(main,java.lang.String[],);
Call(METHOD,org.jhotdraw.samples.draw.Main,main --> setVerbose,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.samples.draw.Main,main --> <init>,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.samples.draw.Main,main --> <init>,org.jhotdraw.app.SDIApplication,);
Call(METHOD,org.jhotdraw.samples.draw.Main,main --> <init>,org.jhotdraw.samples.draw.DrawApplicationModel,);
Call(METHOD,org.jhotdraw.samples.draw.Main,main --> setName,org.jhotdraw.app.AbstractApplicationModel,);
Call(METHOD,org.jhotdraw.samples.draw.Main,main --> setVersion,org.jhotdraw.app.AbstractApplicationModel,);
Call(METHOD,org.jhotdraw.samples.draw.Main,main --> setCopyright,org.jhotdraw.app.AbstractApplicationModel,);
Call(METHOD,org.jhotdraw.samples.draw.Main,main --> setViewClassName,org.jhotdraw.app.AbstractApplicationModel,);
Call(METHOD,org.jhotdraw.samples.draw.Main,main --> setModel,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.samples.draw.Main,main --> launch,org.jhotdraw.app.Application,);
EndClass 1
StartClass 2
Class(org.jhotdraw.util.ResourceBundleUtil,N,N,Public);
Attribute(acceleratorKeys,java.util.HashSet,Private,Y,Y,java.lang.String);
Attribute(resource,java.util.ResourceBundle,Private,N,N,);
Attribute(locale,java.util.Locale,Private,N,N,);
Attribute(baseClass,java.lang.Class,Private,N,N,);
Attribute(baseName,java.lang.String,Private,N,N,);
Attribute(isVerbose,boolean,Private,Y,N,);
Attribute(propertyNameModifiers,java.util.HashMap,Private,Y,N,java.lang.String;[Ljava.lang.String);
Method(<init>,void,Public,N,N);
Method(getWrappedBundle,java.util.ResourceBundle,Public,N,N);
Method(getString,java.lang.String,Public,N,N);
Method(getStringRecursive,java.lang.String,Private,N,N);
Method(generateFallbackKeys,void,Private,N,N);
Method(getFormatted,java.lang.String,Public,N,N);
Method(format,java.lang.String,Public,N,N);
Method(getInteger,java.lang.Integer,Public,N,N);
Method(getIconProperty,javax.swing.ImageIcon,Public,N,N);
Method(getMnemonic,char,Public,N,N);
Method(getMnemonicProperty,char,Public,N,N);
Method(getToolTipTextProperty,java.lang.String,Public,N,N);
Method(getTextProperty,java.lang.String,Public,N,N);
Method(getKeyStroke,javax.swing.KeyStroke,Public,N,N);
Method(getAcceleratorProperty,javax.swing.KeyStroke,Public,N,N);
Method(getBundle,org.jhotdraw.util.ResourceBundleUtil,Public,Y,N);
Method(setBaseClass,void,Public,N,N);
Method(getBaseClass,java.lang.Class,Public,N,N);
Method(configureAction,void,Public,N,N);
Method(configureAction$2,void,Public,N,N);
Method(configureButton,void,Public,N,N);
Method(configureButton$2,void,Public,N,N);
Method(configureToolBarButton,void,Public,N,N);
Method(configureToolBarButton$2,void,Public,N,N);
Method(configureMenu,void,Public,N,N);
Method(createMenuItem,javax.swing.JMenuItem,Public,N,N);
Method(getBundle$2,org.jhotdraw.util.ResourceBundleUtil,Public,Y,N);
Method(toString,java.lang.String,Public,N,N);
Method(setVerbose,void,Public,Y,N);
Method(isVerbose,boolean,Public,Y,N);
Method(putPropertyNameModifier,void,Public,Y,N);
Method(removePropertyNameModifier,void,Public,Y,N);
Method(readObject,void,Private,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.util.Locale,);
Parameter(getString,java.lang.String,);
Parameter(getStringRecursive,java.lang.String,);
Parameter(generateFallbackKeys,java.lang.String,java.lang.String);
Parameter(generateFallbackKeys,java.util.ArrayList,);
Parameter(getFormatted,java.lang.String,);
Parameter(getFormatted,java.lang.Object[],);
Parameter(format,java.lang.String,);
Parameter(format,java.lang.Object[],);
Parameter(getInteger,java.lang.String,);
Parameter(getIconProperty,java.lang.String,);
Parameter(getIconProperty,java.lang.Class,);
Parameter(getMnemonic,java.lang.String,);
Parameter(getMnemonicProperty,java.lang.String,);
Parameter(getToolTipTextProperty,java.lang.String,);
Parameter(getTextProperty,java.lang.String,);
Parameter(getKeyStroke,java.lang.String,);
Parameter(getAcceleratorProperty,java.lang.String,);
Parameter(getBundle,java.lang.String,);
Parameter(setBaseClass,java.lang.Class,);
Parameter(configureAction,javax.swing.Action,);
Parameter(configureAction,java.lang.String,);
Parameter(configureAction$2,javax.swing.Action,);
Parameter(configureAction$2,java.lang.String,);
Parameter(configureAction$2,java.lang.Class,);
Parameter(configureButton,javax.swing.AbstractButton,);
Parameter(configureButton,java.lang.String,);
Parameter(configureButton$2,javax.swing.AbstractButton,);
Parameter(configureButton$2,java.lang.String,);
Parameter(configureButton$2,java.lang.Class,);
Parameter(configureToolBarButton,javax.swing.AbstractButton,);
Parameter(configureToolBarButton,java.lang.String,);
Parameter(configureToolBarButton$2,javax.swing.AbstractButton,);
Parameter(configureToolBarButton$2,java.lang.String,);
Parameter(configureToolBarButton$2,java.lang.Class,);
Parameter(configureMenu,javax.swing.JMenuItem,);
Parameter(configureMenu,java.lang.String,);
Parameter(createMenuItem,javax.swing.Action,);
Parameter(createMenuItem,java.lang.String,);
Parameter(getBundle$2,java.lang.String,);
Parameter(getBundle$2,java.util.Locale,);
Parameter(setVerbose,boolean,);
Parameter(putPropertyNameModifier,java.lang.String,);
Parameter(putPropertyNameModifier,java.lang.String[],);
Parameter(removePropertyNameModifier,java.lang.String,);
Parameter(readObject,java.io.ObjectInputStream,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,getString --> getStringRecursive,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,getStringRecursive --> generateFallbackKeys,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,getStringRecursive --> getStringRecursive,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,getStringRecursive --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,generateFallbackKeys --> generateFallbackKeys,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,getFormatted --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,format --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,getInteger --> getStringRecursive,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,getIconProperty --> getStringRecursive,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,getMnemonic --> getStringRecursive,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,getMnemonicProperty --> getStringRecursive,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,getToolTipTextProperty --> getStringRecursive,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,getTextProperty --> getStringRecursive,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,getKeyStroke --> getStringRecursive,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,getAcceleratorProperty --> getStringRecursive,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,getBundle --> getBundle$2,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,configureAction --> getBaseClass,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,configureAction --> configureAction$2,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,configureAction$2 --> getTextProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,configureAction$2 --> getToolTipTextProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,configureAction$2 --> getAcceleratorProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,configureAction$2 --> getMnemonicProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,configureAction$2 --> getIconProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,configureButton --> getBaseClass,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,configureButton --> configureButton$2,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,configureButton$2 --> getTextProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,configureButton$2 --> getIconProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,configureButton$2 --> getToolTipTextProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,configureToolBarButton --> getBaseClass,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,configureToolBarButton --> configureToolBarButton$2,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,configureToolBarButton$2 --> getIconProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,configureToolBarButton$2 --> getTextProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,configureToolBarButton$2 --> getToolTipTextProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,configureMenu --> getTextProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,configureMenu --> getAcceleratorProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,configureMenu --> getMnemonicProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,configureMenu --> getIconProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,createMenuItem --> configureMenu,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,getBundle$2 --> <init>,org.jhotdraw.util.ResourceBundleUtil,);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,<init> --> baseClass,org.jhotdraw.util.ResourceBundleUtil,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,<init> --> locale,org.jhotdraw.util.ResourceBundleUtil,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,<init> --> baseName,org.jhotdraw.util.ResourceBundleUtil,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,<init> --> resource,org.jhotdraw.util.ResourceBundleUtil,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,getWrappedBundle --> resource,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,getString --> isVerbose,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,getString --> baseName,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,getStringRecursive --> resource,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,getStringRecursive --> baseName,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,getStringRecursive --> acceleratorKeys,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,generateFallbackKeys --> propertyNameModifiers,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,format --> resource,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,getInteger --> isVerbose,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,getInteger --> baseName,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,getIconProperty --> isVerbose,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,getIconProperty --> baseName,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,getMnemonicProperty --> isVerbose,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,getMnemonicProperty --> baseName,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,getToolTipTextProperty --> isVerbose,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,getToolTipTextProperty --> baseName,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,getTextProperty --> isVerbose,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,getTextProperty --> baseName,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,getAcceleratorProperty --> isVerbose,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,getAcceleratorProperty --> baseName,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,setBaseClass --> baseClass,org.jhotdraw.util.ResourceBundleUtil,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,getBaseClass --> baseClass,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,configureMenu --> baseClass,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,toString --> baseName,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,toString --> resource,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,setVerbose --> isVerbose,org.jhotdraw.util.ResourceBundleUtil,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,isVerbose --> isVerbose,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,putPropertyNameModifier --> propertyNameModifiers,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,removePropertyNameModifier --> propertyNameModifiers,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,readObject --> baseName,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,readObject --> locale,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,readObject --> resource,org.jhotdraw.util.ResourceBundleUtil,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,<clinit> --> propertyNameModifiers,org.jhotdraw.util.ResourceBundleUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,<clinit> --> acceleratorKeys,org.jhotdraw.util.ResourceBundleUtil,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,<clinit> --> isVerbose,org.jhotdraw.util.ResourceBundleUtil,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.ResourceBundleUtil,<clinit> --> propertyNameModifiers,org.jhotdraw.util.ResourceBundleUtil,WRITE);
Call(METHOD,org.jhotdraw.util.ResourceBundleUtil,getBundle --> getDefault,org.jhotdraw.util.LocaleUtil,);
EndClass 2
StartClass 3
Class(org.jhotdraw.app.SDIApplication,N,N,Public);
Attribute(prefs,java.util.prefs.Preferences,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(launch,void,Public,N,N);
Method(init,void,Public,N,N);
Method(remove,void,Public,N,N);
Method(configure,void,Public,N,N);
Method(initLookAndFeel,void,Protected,N,N);
Method(show,void,Public,N,N);
Method(wrapViewComponent,java.awt.Component,Protected,N,N);
Method(hide,void,Public,N,N);
Method(dispose,void,Public,N,N);
Method(createMenuBar,javax.swing.JMenuBar,Protected,N,N);
Method(createFileMenu,javax.swing.JMenu,Public,N,N);
Method(createEditMenu,javax.swing.JMenu,Public,N,N);
Method(updateViewTitle,void,Protected,N,N);
Method(isSharingToolsAmongViews,boolean,Public,N,N);
Method(getComponent,java.awt.Component,Public,N,N);
Method(createWindowMenu,javax.swing.JMenu,Public,N,N);
Method(createViewMenu,javax.swing.JMenu,Public,N,N);
Method(createHelpMenu,javax.swing.JMenu,Public,N,N);
Method(createModelActionMap,javax.swing.ActionMap,Protected,N,N);
Method(createViewActionMap,javax.swing.ActionMap,Protected,N,N);
Parameter(launch,java.lang.String[],);
Parameter(remove,org.jhotdraw.app.View,);
Parameter(configure,java.lang.String[],);
Parameter(show,org.jhotdraw.app.View,);
Parameter(wrapViewComponent,org.jhotdraw.app.View,);
Parameter(hide,org.jhotdraw.app.View,);
Parameter(dispose,org.jhotdraw.app.View,);
Parameter(createMenuBar,org.jhotdraw.app.View,);
Parameter(createFileMenu,org.jhotdraw.app.View,);
Parameter(createEditMenu,org.jhotdraw.app.View,);
Parameter(updateViewTitle,org.jhotdraw.app.View,);
Parameter(updateViewTitle,javax.swing.JFrame,);
Parameter(createWindowMenu,org.jhotdraw.app.View,);
Parameter(createViewMenu,org.jhotdraw.app.View,);
Parameter(createHelpMenu,org.jhotdraw.app.View,);
Parameter(createModelActionMap,org.jhotdraw.app.ApplicationModel,);
Parameter(createViewActionMap,org.jhotdraw.app.View,);
SuperClass(org.jhotdraw.app.AbstractApplication);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.app.AbstractApplication);
Call(METHOD,org.jhotdraw.app.SDIApplication,init --> initLookAndFeel,org.jhotdraw.app.SDIApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,init --> createModelActionMap,org.jhotdraw.app.SDIApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,show --> updateViewTitle,org.jhotdraw.app.SDIApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,show --> wrapViewComponent,org.jhotdraw.app.SDIApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,show --> createMenuBar,org.jhotdraw.app.SDIApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createMenuBar --> createFileMenu,org.jhotdraw.app.SDIApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createMenuBar --> createEditMenu,org.jhotdraw.app.SDIApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createMenuBar --> createViewMenu,org.jhotdraw.app.SDIApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createMenuBar --> createWindowMenu,org.jhotdraw.app.SDIApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createMenuBar --> createHelpMenu,org.jhotdraw.app.SDIApplication,);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication,init --> prefs,org.jhotdraw.app.SDIApplication,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication,show --> prefs,org.jhotdraw.app.SDIApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication,wrapViewComponent --> prefs,org.jhotdraw.app.SDIApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication,init --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication,createMenuBar --> labels,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication,createFileMenu --> labels,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication,createFileMenu --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication,createEditMenu --> labels,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication,createEditMenu --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication,updateViewTitle --> labels,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication,createWindowMenu --> labels,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication,createWindowMenu --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication,createViewMenu --> labels,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication,createViewMenu --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication,createHelpMenu --> labels,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication,createViewActionMap --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(METHOD,org.jhotdraw.app.SDIApplication,<init> --> <init>,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,launch --> launch,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,init --> init,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,init --> getModel,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,init --> userNodeForPackage,org.jhotdraw.util.prefs.PreferencesUtil,);
Call(METHOD,org.jhotdraw.app.SDIApplication,init --> initLabels,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,init --> setActionMap,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,init --> initApplication,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.SDIApplication,remove --> remove,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,remove --> views,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,remove --> stop,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,show --> isShowing,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.SDIApplication,show --> setShowing,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.SDIApplication,show --> installFramePrefsHandler,org.jhotdraw.util.prefs.PreferencesUtil,);
Call(METHOD,org.jhotdraw.app.SDIApplication,show --> views,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,show --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.SDIApplication,show --> <init>,org.jhotdraw.app.SDIApplication$1,);
Call(METHOD,org.jhotdraw.app.SDIApplication,show --> <init>,org.jhotdraw.app.SDIApplication$2,);
Call(METHOD,org.jhotdraw.app.SDIApplication,show --> addPropertyChangeListener,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.SDIApplication,show --> start,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.SDIApplication,wrapViewComponent --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.SDIApplication,wrapViewComponent --> getModel,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,wrapViewComponent --> createToolBars,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.SDIApplication,wrapViewComponent --> <init>,org.jhotdraw.util.ReversedList,);
Call(METHOD,org.jhotdraw.app.SDIApplication,wrapViewComponent --> installToolBarPrefsHandler,org.jhotdraw.util.prefs.PreferencesUtil,);
Call(METHOD,org.jhotdraw.app.SDIApplication,wrapViewComponent --> <init>,org.jhotdraw.app.action.window.ToggleVisibleAction,);
Call(METHOD,org.jhotdraw.app.SDIApplication,hide --> isShowing,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.SDIApplication,hide --> getActiveView,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,hide --> setActiveView,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,hide --> setShowing,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.SDIApplication,hide --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.SDIApplication,dispose --> dispose,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,dispose --> views,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,dispose --> stop,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createMenuBar --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createMenuBar --> getModel,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createMenuBar --> getMenuBuilder,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createMenuBar --> addOtherMenus,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createFileMenu --> configureMenu,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createFileMenu --> getMenuBuilder,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createFileMenu --> addClearFileItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createFileMenu --> addNewFileItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createFileMenu --> addNewWindowItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createFileMenu --> addLoadFileItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createFileMenu --> addOpenFileItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createFileMenu --> getAction,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createFileMenu --> createOpenRecentFileMenu,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createFileMenu --> maybeAddSeparator,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createFileMenu --> addSaveFileItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createFileMenu --> addExportFileItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createFileMenu --> addPrintFileItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createFileMenu --> addOtherFileItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createFileMenu --> addCloseFileItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createEditMenu --> configureMenu,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createEditMenu --> getMenuBuilder,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createEditMenu --> addUndoItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createEditMenu --> maybeAddSeparator,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createEditMenu --> addClipboardItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createEditMenu --> addSelectionItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createEditMenu --> addFindItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createEditMenu --> addOtherEditItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createEditMenu --> addPreferencesItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.SDIApplication,updateViewTitle --> getURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.SDIApplication,updateViewTitle --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.SDIApplication,updateViewTitle --> getName,org.jhotdraw.net.URIUtil,);
Call(METHOD,org.jhotdraw.app.SDIApplication,updateViewTitle --> hasUnsavedChanges,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.SDIApplication,updateViewTitle --> getName,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,updateViewTitle --> getMultipleOpenId,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.SDIApplication,updateViewTitle --> getFormatted,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.SDIApplication,updateViewTitle --> setTitle,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.SDIApplication,updateViewTitle --> getTitle,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.SDIApplication,getComponent --> getActiveView,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,getComponent --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createWindowMenu --> configureMenu,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createWindowMenu --> getMenuBuilder,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createWindowMenu --> addOtherWindowItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createViewMenu --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createViewMenu --> configureMenu,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createViewMenu --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createViewMenu --> configureJCheckBoxMenuItem,org.jhotdraw.app.action.ActionUtil,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createViewMenu --> getMenuBuilder,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createViewMenu --> addOtherViewItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createHelpMenu --> configureMenu,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createHelpMenu --> getAction,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createModelActionMap --> <init>,org.jhotdraw.app.action.app.AboutAction,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createModelActionMap --> <init>,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createModelActionMap --> createActionMap,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createViewActionMap --> <init>,org.jhotdraw.app.action.file.CloseFileAction,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createViewActionMap --> createActionMap,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.SDIApplication,createViewActionMap --> getActionMap,org.jhotdraw.app.AbstractApplication,);
EndClass 3
StartClass 4
Class(org.jhotdraw.app.ApplicationModel,Y,Y,Public);
Method(getName,java.lang.String,Public,N,Y);
Method(getVersion,java.lang.String,Public,N,Y);
Method(getCopyright,java.lang.String,Public,N,Y);
Method(createView,org.jhotdraw.app.View,Public,N,Y);
Method(initApplication,void,Public,N,Y);
Method(destroyApplication,void,Public,N,Y);
Method(initView,void,Public,N,Y);
Method(destroyView,void,Public,N,Y);
Method(createActionMap,javax.swing.ActionMap,Public,N,Y);
Method(createToolBars,java.util.List,Public,N,Y);
Method(getMenuBuilder,org.jhotdraw.app.MenuBuilder,Public,N,Y);
Method(createOpenChooser,org.jhotdraw.gui.URIChooser,Public,N,Y);
Method(createOpenDirectoryChooser,org.jhotdraw.gui.URIChooser,Public,N,Y);
Method(createSaveChooser,org.jhotdraw.gui.URIChooser,Public,N,Y);
Method(createImportChooser,org.jhotdraw.gui.URIChooser,Public,N,Y);
Method(createExportChooser,org.jhotdraw.gui.URIChooser,Public,N,Y);
Parameter(initApplication,org.jhotdraw.app.Application,);
Parameter(destroyApplication,org.jhotdraw.app.Application,);
Parameter(initView,org.jhotdraw.app.Application,);
Parameter(initView,org.jhotdraw.app.View,);
Parameter(destroyView,org.jhotdraw.app.Application,);
Parameter(destroyView,org.jhotdraw.app.View,);
Parameter(createActionMap,org.jhotdraw.app.Application,);
Parameter(createActionMap,org.jhotdraw.app.View,);
Parameter(createToolBars,org.jhotdraw.app.Application,javax.swing.JToolBar);
Parameter(createToolBars,org.jhotdraw.app.View,);
Parameter(createOpenChooser,org.jhotdraw.app.Application,);
Parameter(createOpenChooser,org.jhotdraw.app.View,);
Parameter(createOpenDirectoryChooser,org.jhotdraw.app.Application,);
Parameter(createOpenDirectoryChooser,org.jhotdraw.app.View,);
Parameter(createSaveChooser,org.jhotdraw.app.Application,);
Parameter(createSaveChooser,org.jhotdraw.app.View,);
Parameter(createImportChooser,org.jhotdraw.app.Application,);
Parameter(createImportChooser,org.jhotdraw.app.View,);
Parameter(createExportChooser,org.jhotdraw.app.Application,);
Parameter(createExportChooser,org.jhotdraw.app.View,);
EndClass 4
StartClass 5
Class(org.jhotdraw.app.Application,Y,Y,Public);
Attribute(ACTIVE_VIEW_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(RECENT_URIS_PROPERTY,java.lang.String,Public,Y,Y,);
Method(launch,void,Public,N,Y);
Method(configure,void,Public,N,Y);
Method(init,void,Public,N,Y);
Method(start,void,Public,N,Y);
Method(stop,void,Public,N,Y);
Method(destroy,void,Public,N,Y);
Method(createView,org.jhotdraw.app.View,Public,N,Y);
Method(add,void,Public,N,Y);
Method(remove,void,Public,N,Y);
Method(show,void,Public,N,Y);
Method(hide,void,Public,N,Y);
Method(dispose,void,Public,N,Y);
Method(views,java.util.Collection,Public,N,Y);
Method(getActiveView,org.jhotdraw.app.View,Public,N,Y);
Method(isEnabled,boolean,Public,N,Y);
Method(setEnabled,void,Public,N,Y);
Method(addPropertyChangeListener,void,Public,N,Y);
Method(removePropertyChangeListener,void,Public,N,Y);
Method(getName,java.lang.String,Public,N,Y);
Method(getVersion,java.lang.String,Public,N,Y);
Method(getCopyright,java.lang.String,Public,N,Y);
Method(setModel,void,Public,N,Y);
Method(getModel,org.jhotdraw.app.ApplicationModel,Public,N,Y);
Method(isSharingToolsAmongViews,boolean,Public,N,Y);
Method(getComponent,java.awt.Component,Public,N,Y);
Method(addPalette,void,Public,N,Y);
Method(removePalette,void,Public,N,Y);
Method(addWindow,void,Public,N,Y);
Method(removeWindow,void,Public,N,Y);
Method(getRecentURIs,java.util.List,Public,N,Y);
Method(addRecentURI,void,Public,N,Y);
Method(clearRecentURIs,void,Public,N,Y);
Method(createFileMenu,javax.swing.JMenu,Public,N,Y);
Method(createEditMenu,javax.swing.JMenu,Public,N,Y);
Method(createViewMenu,javax.swing.JMenu,Public,N,Y);
Method(createWindowMenu,javax.swing.JMenu,Public,N,Y);
Method(createHelpMenu,javax.swing.JMenu,Public,N,Y);
Method(getOpenChooser,org.jhotdraw.gui.URIChooser,Public,N,Y);
Method(getSaveChooser,org.jhotdraw.gui.URIChooser,Public,N,Y);
Method(getExportChooser,org.jhotdraw.gui.URIChooser,Public,N,Y);
Method(getImportChooser,org.jhotdraw.gui.URIChooser,Public,N,Y);
Method(getActionMap,javax.swing.ActionMap,Public,N,Y);
Parameter(launch,java.lang.String[],);
Parameter(configure,java.lang.String[],);
Parameter(start,java.util.List,java.net.URI);
Parameter(add,org.jhotdraw.app.View,);
Parameter(remove,org.jhotdraw.app.View,);
Parameter(show,org.jhotdraw.app.View,);
Parameter(hide,org.jhotdraw.app.View,);
Parameter(dispose,org.jhotdraw.app.View,);
Parameter(setEnabled,boolean,);
Parameter(addPropertyChangeListener,java.beans.PropertyChangeListener,);
Parameter(removePropertyChangeListener,java.beans.PropertyChangeListener,);
Parameter(setModel,org.jhotdraw.app.ApplicationModel,);
Parameter(addPalette,java.awt.Window,);
Parameter(removePalette,java.awt.Window,);
Parameter(addWindow,java.awt.Window,);
Parameter(addWindow,org.jhotdraw.app.View,);
Parameter(removeWindow,java.awt.Window,);
Parameter(addRecentURI,java.net.URI,);
Parameter(createFileMenu,org.jhotdraw.app.View,);
Parameter(createEditMenu,org.jhotdraw.app.View,);
Parameter(createViewMenu,org.jhotdraw.app.View,);
Parameter(createWindowMenu,org.jhotdraw.app.View,);
Parameter(createHelpMenu,org.jhotdraw.app.View,);
Parameter(getOpenChooser,org.jhotdraw.app.View,);
Parameter(getSaveChooser,org.jhotdraw.app.View,);
Parameter(getExportChooser,org.jhotdraw.app.View,);
Parameter(getImportChooser,org.jhotdraw.app.View,);
Parameter(getActionMap,org.jhotdraw.app.View,);
EndClass 5
StartClass 6
Class(org.jhotdraw.app.OSXApplication,N,N,Public);
Attribute(paletteHandler,org.jhotdraw.app.osx.OSXPaletteHandler,Private,N,N,);
Attribute(prefs,java.util.prefs.Preferences,Private,N,N,);
Attribute(paletteActions,java.util.LinkedList,Private,N,N,javax.swing.Action);
Attribute(invisibleFrame,javax.swing.JFrame,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(init,void,Public,N,N);
Method(launch,void,Public,N,N);
Method(configure,void,Public,N,N);
Method(initLookAndFeel,void,Protected,N,N);
Method(dispose,void,Public,N,N);
Method(addPalette,void,Public,N,N);
Method(removePalette,void,Public,N,N);
Method(addWindow,void,Public,N,N);
Method(removeWindow,void,Public,N,N);
Method(show,void,Public,N,N);
Method(updateViewTitle,void,Protected,N,N);
Method(hide,void,Public,N,N);
Method(createMenuBar,javax.swing.JMenuBar,Protected,N,N);
Method(createViewMenu,javax.swing.JMenu,Public,N,N);
Method(createWindowMenu,javax.swing.JMenu,Public,N,N);
Method(createFileMenu,javax.swing.JMenu,Public,N,N);
Method(createEditMenu,javax.swing.JMenu,Public,N,N);
Method(createHelpMenu,javax.swing.JMenu,Public,N,N);
Method(initScreenMenuBar,void,Protected,N,N);
Method(initPalettes,void,Protected,N,N);
Method(isSharingToolsAmongViews,boolean,Public,N,N);
Method(getComponent,java.awt.Component,Public,N,N);
Method(setScreenMenuBar,void,Protected,N,N);
Method(createModelActionMap,javax.swing.ActionMap,Protected,N,N);
Method(createViewActionMap,javax.swing.ActionMap,Protected,N,N);
Method(access$000,java.util.prefs.Preferences,Public,Y,N);
Method(access$100,void,Public,Y,N);
Method(access$200,java.util.LinkedList,Public,Y,N);
Parameter(launch,java.lang.String[],);
Parameter(configure,java.lang.String[],);
Parameter(dispose,org.jhotdraw.app.View,);
Parameter(addPalette,java.awt.Window,);
Parameter(removePalette,java.awt.Window,);
Parameter(addWindow,java.awt.Window,);
Parameter(addWindow,org.jhotdraw.app.View,);
Parameter(removeWindow,java.awt.Window,);
Parameter(show,org.jhotdraw.app.View,);
Parameter(updateViewTitle,org.jhotdraw.app.View,);
Parameter(updateViewTitle,javax.swing.JFrame,);
Parameter(hide,org.jhotdraw.app.View,);
Parameter(createMenuBar,org.jhotdraw.app.View,);
Parameter(createViewMenu,org.jhotdraw.app.View,);
Parameter(createWindowMenu,org.jhotdraw.app.View,);
Parameter(createFileMenu,org.jhotdraw.app.View,);
Parameter(createEditMenu,org.jhotdraw.app.View,);
Parameter(createHelpMenu,org.jhotdraw.app.View,);
Parameter(initPalettes,java.util.LinkedList,javax.swing.Action);
Parameter(setScreenMenuBar,javax.swing.JMenuBar,);
Parameter(createModelActionMap,org.jhotdraw.app.ApplicationModel,);
Parameter(createViewActionMap,org.jhotdraw.app.View,);
Parameter(access$000,org.jhotdraw.app.OSXApplication,);
Parameter(access$100,org.jhotdraw.app.OSXApplication,);
Parameter(access$100,java.lang.String,);
Parameter(access$100,int,);
Parameter(access$100,int,);
Parameter(access$200,org.jhotdraw.app.OSXApplication,);
SuperClass(org.jhotdraw.app.AbstractApplication);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.app.AbstractApplication);
Composition(org.jhotdraw.app.osx.OSXPaletteHandler);
Call(METHOD,org.jhotdraw.app.OSXApplication,init --> initLookAndFeel,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,init --> createModelActionMap,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,init --> initPalettes,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,init --> initScreenMenuBar,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,addWindow --> createMenuBar,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,show --> updateViewTitle,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,show --> addWindow,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,hide --> removeWindow,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createMenuBar --> createFileMenu,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createMenuBar --> createEditMenu,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createMenuBar --> createViewMenu,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createMenuBar --> createWindowMenu,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createMenuBar --> createHelpMenu,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,initScreenMenuBar --> createMenuBar,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,initScreenMenuBar --> setScreenMenuBar,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,initScreenMenuBar --> getComponent,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,setScreenMenuBar --> getComponent,org.jhotdraw.app.OSXApplication,);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,init --> paletteActions,org.jhotdraw.app.OSXApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,init --> prefs,org.jhotdraw.app.OSXApplication,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,init --> paletteHandler,org.jhotdraw.app.OSXApplication,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,init --> paletteActions,org.jhotdraw.app.OSXApplication,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,addPalette --> paletteHandler,org.jhotdraw.app.OSXApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,removePalette --> paletteHandler,org.jhotdraw.app.OSXApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,addWindow --> paletteHandler,org.jhotdraw.app.OSXApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,removeWindow --> paletteHandler,org.jhotdraw.app.OSXApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,show --> prefs,org.jhotdraw.app.OSXApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,initScreenMenuBar --> paletteHandler,org.jhotdraw.app.OSXApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,getComponent --> invisibleFrame,org.jhotdraw.app.OSXApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,getComponent --> invisibleFrame,org.jhotdraw.app.OSXApplication,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,setScreenMenuBar --> invisibleFrame,org.jhotdraw.app.OSXApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,access$000 --> prefs,org.jhotdraw.app.OSXApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,access$200 --> paletteActions,org.jhotdraw.app.OSXApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,init --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,updateViewTitle --> labels,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,createMenuBar --> labels,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,createViewMenu --> labels,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,createViewMenu --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,createWindowMenu --> labels,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,createWindowMenu --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,createFileMenu --> labels,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,createFileMenu --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,createEditMenu --> labels,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,createEditMenu --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,createHelpMenu --> labels,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,createHelpMenu --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication,createViewActionMap --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(METHOD,org.jhotdraw.app.OSXApplication,<init> --> <init>,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,init --> init,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,init --> putPropertyNameModifier,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.OSXApplication,init --> getModel,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,init --> userNodeForPackage,org.jhotdraw.util.prefs.PreferencesUtil,);
Call(METHOD,org.jhotdraw.app.OSXApplication,init --> <init>,org.jhotdraw.app.osx.OSXPaletteHandler,);
Call(METHOD,org.jhotdraw.app.OSXApplication,init --> initLabels,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,init --> setActionMap,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,init --> initApplication,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.OSXApplication,launch --> launch,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,dispose --> getAction,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,dispose --> dispose,org.jhotdraw.app.action.window.FocusWindowAction,);
Call(METHOD,org.jhotdraw.app.OSXApplication,dispose --> dispose,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,addPalette --> addPalette,org.jhotdraw.app.osx.OSXPaletteHandler,);
Call(METHOD,org.jhotdraw.app.OSXApplication,removePalette --> removePalette,org.jhotdraw.app.osx.OSXPaletteHandler,);
Call(METHOD,org.jhotdraw.app.OSXApplication,addWindow --> add,org.jhotdraw.app.osx.OSXPaletteHandler,);
Call(METHOD,org.jhotdraw.app.OSXApplication,removeWindow --> remove,org.jhotdraw.app.osx.OSXPaletteHandler,);
Call(METHOD,org.jhotdraw.app.OSXApplication,show --> isShowing,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.OSXApplication,show --> setShowing,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.OSXApplication,show --> installFramePrefsHandler,org.jhotdraw.util.prefs.PreferencesUtil,);
Call(METHOD,org.jhotdraw.app.OSXApplication,show --> views,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,show --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.OSXApplication,show --> <init>,org.jhotdraw.app.OSXApplication$FrameHandler,);
Call(METHOD,org.jhotdraw.app.OSXApplication,show --> start,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.OSXApplication,updateViewTitle --> getURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.OSXApplication,updateViewTitle --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.OSXApplication,updateViewTitle --> getName,org.jhotdraw.net.URIUtil,);
Call(METHOD,org.jhotdraw.app.OSXApplication,updateViewTitle --> getName,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,updateViewTitle --> getMultipleOpenId,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.OSXApplication,updateViewTitle --> getFormatted,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.OSXApplication,updateViewTitle --> setTitle,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.OSXApplication,updateViewTitle --> getTitle,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.OSXApplication,hide --> isShowing,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.OSXApplication,hide --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.OSXApplication,hide --> getActiveView,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,hide --> setActiveView,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createMenuBar --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createMenuBar --> getModel,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createMenuBar --> getMenuBuilder,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createMenuBar --> addOtherMenus,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createViewMenu --> configureMenu,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createViewMenu --> getMenuBuilder,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createViewMenu --> addOtherViewItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createWindowMenu --> configureMenu,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createWindowMenu --> getMenuBuilder,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createWindowMenu --> addOtherWindowItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createWindowMenu --> <init>,org.jhotdraw.app.OSXApplication$WindowMenuHandler,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createFileMenu --> configureMenu,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createFileMenu --> getMenuBuilder,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createFileMenu --> addClearFileItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createFileMenu --> addNewFileItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createFileMenu --> addNewWindowItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createFileMenu --> addLoadFileItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createFileMenu --> addOpenFileItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createFileMenu --> getAction,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createFileMenu --> createOpenRecentFileMenu,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createFileMenu --> maybeAddSeparator,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createFileMenu --> addCloseFileItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createFileMenu --> addSaveFileItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createFileMenu --> addExportFileItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createFileMenu --> addPrintFileItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createFileMenu --> addOtherFileItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createEditMenu --> configureMenu,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createEditMenu --> getMenuBuilder,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createEditMenu --> addUndoItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createEditMenu --> maybeAddSeparator,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createEditMenu --> addClipboardItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createEditMenu --> addSelectionItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createEditMenu --> addFindItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createEditMenu --> addOtherEditItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createHelpMenu --> configureMenu,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createHelpMenu --> getMenuBuilder,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createHelpMenu --> addHelpItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.OSXApplication,initScreenMenuBar --> add,org.jhotdraw.app.osx.OSXPaletteHandler,);
Call(METHOD,org.jhotdraw.app.OSXApplication,initScreenMenuBar --> getAction,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,initScreenMenuBar --> setOpenApplicationHandler,org.jhotdraw.app.osx.OSXAdapter,);
Call(METHOD,org.jhotdraw.app.OSXApplication,initScreenMenuBar --> setReOpenApplicationHandler,org.jhotdraw.app.osx.OSXAdapter,);
Call(METHOD,org.jhotdraw.app.OSXApplication,initScreenMenuBar --> setOpenFileHandler,org.jhotdraw.app.osx.OSXAdapter,);
Call(METHOD,org.jhotdraw.app.OSXApplication,initScreenMenuBar --> setPrintFileHandler,org.jhotdraw.app.osx.OSXAdapter,);
Call(METHOD,org.jhotdraw.app.OSXApplication,initScreenMenuBar --> setAboutHandler,org.jhotdraw.app.osx.OSXAdapter,);
Call(METHOD,org.jhotdraw.app.OSXApplication,initScreenMenuBar --> setPreferencesHandler,org.jhotdraw.app.osx.OSXAdapter,);
Call(METHOD,org.jhotdraw.app.OSXApplication,initScreenMenuBar --> setQuitHandler,org.jhotdraw.app.osx.OSXAdapter,);
Call(METHOD,org.jhotdraw.app.OSXApplication,initPalettes --> <init>,org.jhotdraw.app.OSXApplication$1,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createModelActionMap --> <init>,org.jhotdraw.app.action.app.AboutAction,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createModelActionMap --> <init>,org.jhotdraw.app.action.app.ExitAction,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createModelActionMap --> <init>,org.jhotdraw.app.action.app.OpenApplicationAction,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createModelActionMap --> <init>,org.jhotdraw.app.action.app.OpenApplicationFileAction,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createModelActionMap --> <init>,org.jhotdraw.app.action.app.ReOpenApplicationAction,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createModelActionMap --> <init>,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createModelActionMap --> <init>,org.jhotdraw.app.action.window.MaximizeWindowAction,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createModelActionMap --> <init>,org.jhotdraw.app.action.window.MinimizeWindowAction,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createModelActionMap --> createActionMap,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createViewActionMap --> <init>,org.jhotdraw.app.action.window.FocusWindowAction,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createViewActionMap --> <init>,org.jhotdraw.app.action.window.MaximizeWindowAction,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createViewActionMap --> <init>,org.jhotdraw.app.action.window.MinimizeWindowAction,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createViewActionMap --> createActionMap,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.OSXApplication,createViewActionMap --> getActionMap,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication,access$100 --> firePropertyChange$2,org.jhotdraw.beans.AbstractBean,);
EndClass 6
StartClass 7
Class(org.jhotdraw.samples.draw.DrawApplicationModel,N,N,Public);
Attribute(sharedEditor,org.jhotdraw.draw.DefaultDrawingEditor,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getSharedEditor,org.jhotdraw.draw.DefaultDrawingEditor,Public,N,N);
Method(initView,void,Public,N,N);
Method(createToolBars,java.util.List,Public,N,N);
Method(addCreationButtonsTo,void,Private,N,N);
Method(addDefaultCreationButtonsTo,void,Public,N,N);
Method(createOpenChooser,org.jhotdraw.gui.URIChooser,Public,N,N);
Method(createSaveChooser,org.jhotdraw.gui.URIChooser,Public,N,N);
Parameter(initView,org.jhotdraw.app.Application,);
Parameter(initView,org.jhotdraw.app.View,);
Parameter(createToolBars,org.jhotdraw.app.Application,javax.swing.JToolBar);
Parameter(createToolBars,org.jhotdraw.app.View,);
Parameter(addCreationButtonsTo,javax.swing.JToolBar,);
Parameter(addCreationButtonsTo,org.jhotdraw.draw.DrawingEditor,);
Parameter(addDefaultCreationButtonsTo,javax.swing.JToolBar,javax.swing.Action);
Parameter(addDefaultCreationButtonsTo,org.jhotdraw.draw.DrawingEditor,javax.swing.Action);
Parameter(addDefaultCreationButtonsTo,java.util.Collection,);
Parameter(addDefaultCreationButtonsTo,java.util.Collection,);
Parameter(createOpenChooser,org.jhotdraw.app.Application,);
Parameter(createOpenChooser,org.jhotdraw.app.View,);
Parameter(createSaveChooser,org.jhotdraw.app.Application,);
Parameter(createSaveChooser,org.jhotdraw.app.View,);
SuperClass(org.jhotdraw.app.DefaultApplicationModel);
SuperClass(org.jhotdraw.app.AbstractApplicationModel);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.app.DefaultApplicationModel);
Composition(org.jhotdraw.draw.DefaultDrawingEditor);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,initView --> getSharedEditor,org.jhotdraw.samples.draw.DrawApplicationModel,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,createToolBars --> getSharedEditor,org.jhotdraw.samples.draw.DrawApplicationModel,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,createToolBars --> addCreationButtonsTo,org.jhotdraw.samples.draw.DrawApplicationModel,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addCreationButtonsTo --> addDefaultCreationButtonsTo,org.jhotdraw.samples.draw.DrawApplicationModel,);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawApplicationModel,getSharedEditor --> sharedEditor,org.jhotdraw.samples.draw.DrawApplicationModel,READ);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawApplicationModel,getSharedEditor --> sharedEditor,org.jhotdraw.samples.draw.DrawApplicationModel,WRITE);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> END_DECORATION,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,<init> --> <init>,org.jhotdraw.app.DefaultApplicationModel,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,getSharedEditor --> <init>,org.jhotdraw.draw.DefaultDrawingEditor,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,initView --> isSharingToolsAmongViews,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,initView --> setEditor,org.jhotdraw.samples.draw.DrawView,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,createToolBars --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,createToolBars --> getEditor,org.jhotdraw.samples.draw.DrawView,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,createToolBars --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,createToolBars --> addAttributesButtonsTo,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,createToolBars --> addAlignmentButtonsTo,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addCreationButtonsTo --> createDrawingActions,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addCreationButtonsTo --> createSelectionActions,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> addSelectionToolTo$2,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> <init>,org.jhotdraw.draw.RectangleFigure,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> <init>$4,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> addToolTo,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> <init>,org.jhotdraw.draw.RoundRectangleFigure,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> <init>,org.jhotdraw.draw.EllipseFigure,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> <init>,org.jhotdraw.draw.DiamondFigure,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> <init>,org.jhotdraw.draw.TriangleFigure,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> <init>,org.jhotdraw.draw.LineFigure,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> getPrototype,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> <init>$2,org.jhotdraw.draw.decoration.ArrowTip,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> set,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> <init>,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> <init>,org.jhotdraw.draw.tool.ConnectionTool,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> getPrototype,org.jhotdraw.draw.tool.ConnectionTool,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> <init>,org.jhotdraw.draw.liner.ElbowLiner,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> setLiner,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> <init>,org.jhotdraw.draw.liner.CurvedLiner,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> <init>,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> <init>,org.jhotdraw.draw.tool.BezierTool,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> <init>$2,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> <init>,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> <init>,org.jhotdraw.draw.tool.TextCreationTool,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> <init>,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> <init>,org.jhotdraw.draw.tool.TextAreaCreationTool,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> <init>,org.jhotdraw.draw.ImageFigure,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,addDefaultCreationButtonsTo --> <init>,org.jhotdraw.draw.tool.ImageTool,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,createOpenChooser --> <init>,org.jhotdraw.gui.JFileURIChooser,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,createOpenChooser --> <init>,org.jhotdraw.gui.filechooser.ExtensionFileFilter,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,createSaveChooser --> <init>,org.jhotdraw.gui.JFileURIChooser,);
Call(METHOD,org.jhotdraw.samples.draw.DrawApplicationModel,createSaveChooser --> <init>,org.jhotdraw.gui.filechooser.ExtensionFileFilter,);
EndClass 7
StartClass 8
Class(org.jhotdraw.util.LocaleUtil,N,N,Public);
Attribute(defaultLocale,java.util.Locale,Private,Y,N,);
Method(<init>,void,Public,N,N);
Method(setDefault,void,Public,Y,N);
Method(getDefault,java.util.Locale,Public,Y,N);
Parameter(setDefault,java.util.Locale,);
Call(ATTRIBUTE,org.jhotdraw.util.LocaleUtil,setDefault --> defaultLocale,org.jhotdraw.util.LocaleUtil,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.LocaleUtil,getDefault --> defaultLocale,org.jhotdraw.util.LocaleUtil,READ);
EndClass 8
StartClass 9
Class(org.jhotdraw.app.AbstractApplication,N,Y,Public);
Attribute(views,java.util.LinkedList,Private,N,N,org.jhotdraw.app.View);
Attribute(unmodifiableViews,java.util.Collection,Private,N,N,org.jhotdraw.app.View);
Attribute(isEnabled,boolean,Private,N,N,);
Attribute(labels,org.jhotdraw.util.ResourceBundleUtil,Protected,N,N,);
Attribute(model,org.jhotdraw.app.ApplicationModel,Protected,N,N,);
Attribute(prefs,java.util.prefs.Preferences,Private,N,N,);
Attribute(activeView,org.jhotdraw.app.View,Private,N,N,);
Attribute(VIEW_COUNT_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(recentFiles,java.util.LinkedList,Private,N,N,java.net.URI);
Attribute(maxRecentFilesCount,int,Private,Y,Y,);
Attribute(actionMap,javax.swing.ActionMap,Private,N,N,);
Attribute(openChooser,org.jhotdraw.gui.URIChooser,Private,N,N,);
Attribute(saveChooser,org.jhotdraw.gui.URIChooser,Private,N,N,);
Attribute(importChooser,org.jhotdraw.gui.URIChooser,Private,N,N,);
Attribute(exportChooser,org.jhotdraw.gui.URIChooser,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(init,void,Public,N,N);
Method(start,void,Public,N,N);
Method(createView,org.jhotdraw.app.View,Public,N,N);
Method(setModel,void,Public,N,N);
Method(getModel,org.jhotdraw.app.ApplicationModel,Public,N,N);
Method(basicCreateView,org.jhotdraw.app.View,Protected,N,N);
Method(setActiveView,void,Public,N,N);
Method(getActiveView,org.jhotdraw.app.View,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(getVersion,java.lang.String,Public,N,N);
Method(getCopyright,java.lang.String,Public,N,N);
Method(stop,void,Public,N,N);
Method(destroy,void,Public,N,N);
Method(remove,void,Public,N,N);
Method(add,void,Public,N,N);
Method(createViewActionMap,javax.swing.ActionMap,Protected,N,Y);
Method(dispose,void,Public,N,N);
Method(views,java.util.Collection,Public,N,N);
Method(isEnabled,boolean,Public,N,N);
Method(setEnabled,void,Public,N,N);
Method(createContainer,java.awt.Container,Public,N,N);
Method(launch,void,Public,N,N);
Method(getOpenURIsFromMainArgs,java.util.List,Protected,N,N);
Method(initLabels,void,Protected,N,N);
Method(configure,void,Public,N,N);
Method(removePalette,void,Public,N,N);
Method(addPalette,void,Public,N,N);
Method(removeWindow,void,Public,N,N);
Method(addWindow,void,Public,N,N);
Method(getAction,javax.swing.Action,Protected,N,N);
Method(addAction,void,Protected,N,N);
Method(addAction$2,void,Protected,N,N);
Method(addMenuItem,void,Protected,N,N);
Method(maybeAddSeparator,void,Protected,N,N);
Method(getRecentURIs,java.util.List,Public,N,N);
Method(clearRecentURIs,void,Public,N,N);
Method(addRecentURI,void,Public,N,N);
Method(createOpenRecentFileMenu,javax.swing.JMenu,Protected,N,N);
Method(getOpenChooser,org.jhotdraw.gui.URIChooser,Public,N,N);
Method(getSaveChooser,org.jhotdraw.gui.URIChooser,Public,N,N);
Method(getImportChooser,org.jhotdraw.gui.URIChooser,Public,N,N);
Method(getExportChooser,org.jhotdraw.gui.URIChooser,Public,N,N);
Method(setActionMap,void,Public,N,N);
Method(getActionMap,javax.swing.ActionMap,Public,N,N);
Parameter(start,java.util.List,java.net.URI);
Parameter(setModel,org.jhotdraw.app.ApplicationModel,);
Parameter(setActiveView,org.jhotdraw.app.View,);
Parameter(remove,org.jhotdraw.app.View,);
Parameter(add,org.jhotdraw.app.View,);
Parameter(createViewActionMap,org.jhotdraw.app.View,);
Parameter(dispose,org.jhotdraw.app.View,);
Parameter(setEnabled,boolean,);
Parameter(launch,java.lang.String[],);
Parameter(getOpenURIsFromMainArgs,java.lang.String[],java.net.URI);
Parameter(configure,java.lang.String[],);
Parameter(removePalette,java.awt.Window,);
Parameter(addPalette,java.awt.Window,);
Parameter(removeWindow,java.awt.Window,);
Parameter(addWindow,java.awt.Window,);
Parameter(addWindow,org.jhotdraw.app.View,);
Parameter(getAction,org.jhotdraw.app.View,);
Parameter(getAction,java.lang.String,);
Parameter(addAction,javax.swing.JMenu,);
Parameter(addAction,org.jhotdraw.app.View,);
Parameter(addAction,java.lang.String,);
Parameter(addAction$2,javax.swing.JMenu,);
Parameter(addAction$2,javax.swing.Action,);
Parameter(addMenuItem,javax.swing.JMenu,);
Parameter(addMenuItem,javax.swing.JMenuItem,);
Parameter(maybeAddSeparator,javax.swing.JMenu,);
Parameter(addRecentURI,java.net.URI,);
Parameter(createOpenRecentFileMenu,org.jhotdraw.app.View,);
Parameter(getOpenChooser,org.jhotdraw.app.View,);
Parameter(getSaveChooser,org.jhotdraw.app.View,);
Parameter(getImportChooser,org.jhotdraw.app.View,);
Parameter(getExportChooser,org.jhotdraw.app.View,);
Parameter(setActionMap,javax.swing.ActionMap,);
Parameter(getActionMap,org.jhotdraw.app.View,);
SuperClass(org.jhotdraw.beans.AbstractBean);
SubClass(org.jhotdraw.app.SDIApplication);
SubClass(org.jhotdraw.app.OSXApplication);
Generalization(org.jhotdraw.beans.AbstractBean);
Realization(org.jhotdraw.app.Application);
Composition(org.jhotdraw.util.ResourceBundleUtil);
Composition(org.jhotdraw.app.ApplicationModel);
Composition(org.jhotdraw.app.View);
Composition(org.jhotdraw.gui.URIChooser);
Call(METHOD,org.jhotdraw.app.AbstractApplication,init --> getModel,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,start --> createView,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,start --> add,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,start --> setActiveView,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,createView --> basicCreateView,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,createView --> createViewActionMap,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,stop --> views,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,stop --> dispose,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,destroy --> stop,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,remove --> getActiveView,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,remove --> setActiveView,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,dispose --> remove,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,launch --> configure,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,launch --> getOpenURIsFromMainArgs,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,getAction --> getActionMap,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,addAction --> getAction,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,addAction --> addAction$2,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,createOpenRecentFileMenu --> getAction,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,getOpenChooser --> getRecentURIs,org.jhotdraw.app.AbstractApplication,);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,<init> --> views,org.jhotdraw.app.AbstractApplication,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,<init> --> isEnabled,org.jhotdraw.app.AbstractApplication,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,<init> --> recentFiles,org.jhotdraw.app.AbstractApplication,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,init --> prefs,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,init --> recentFiles,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,init --> prefs,org.jhotdraw.app.AbstractApplication,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,setModel --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,setModel --> model,org.jhotdraw.app.AbstractApplication,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,getModel --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,basicCreateView --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,setActiveView --> activeView,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,setActiveView --> activeView,org.jhotdraw.app.AbstractApplication,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,getActiveView --> activeView,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,getName --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,getVersion --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,getCopyright --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,destroy --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,remove --> views,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,add --> views,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,add --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,dispose --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,views --> unmodifiableViews,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,views --> views,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,views --> unmodifiableViews,org.jhotdraw.app.AbstractApplication,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,isEnabled --> isEnabled,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,setEnabled --> isEnabled,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,setEnabled --> isEnabled,org.jhotdraw.app.AbstractApplication,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,initLabels --> labels,org.jhotdraw.app.AbstractApplication,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,getRecentURIs --> recentFiles,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,clearRecentURIs --> recentFiles,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,clearRecentURIs --> prefs,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,addRecentURI --> recentFiles,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,addRecentURI --> prefs,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,createOpenRecentFileMenu --> labels,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,getOpenChooser --> openChooser,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,getOpenChooser --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,getOpenChooser --> openChooser,org.jhotdraw.app.AbstractApplication,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,getSaveChooser --> saveChooser,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,getSaveChooser --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,getSaveChooser --> saveChooser,org.jhotdraw.app.AbstractApplication,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,getImportChooser --> importChooser,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,getImportChooser --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,getImportChooser --> importChooser,org.jhotdraw.app.AbstractApplication,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,getExportChooser --> exportChooser,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,getExportChooser --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,getExportChooser --> exportChooser,org.jhotdraw.app.AbstractApplication,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,setActionMap --> actionMap,org.jhotdraw.app.AbstractApplication,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication,getActionMap --> actionMap,org.jhotdraw.app.AbstractApplication,READ);
Call(METHOD,org.jhotdraw.app.AbstractApplication,<init> --> <init>,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,init --> userNodeForPackage,org.jhotdraw.util.prefs.PreferencesUtil,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,start --> setEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,start --> show,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,start --> <init>,org.jhotdraw.app.AbstractApplication$1,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,start --> execute,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,start --> <init>,org.jhotdraw.app.AbstractApplication$2,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,createView --> setActionMap,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,setModel --> firePropertyChange$3,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,basicCreateView --> createView,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,setActiveView --> deactivate,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,setActiveView --> activate,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,setActiveView --> firePropertyChange$3,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,getName --> getName,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,getVersion --> getVersion,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,getCopyright --> getCopyright,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,destroy --> destroyApplication,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,remove --> hide,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,remove --> setApplication,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,remove --> firePropertyChange$2,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,add --> getApplication,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,add --> setApplication,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,add --> init,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,add --> initView,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,add --> firePropertyChange$2,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,dispose --> destroyView,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,dispose --> dispose,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,setEnabled --> firePropertyChange,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,launch --> <init>,org.jhotdraw.app.AbstractApplication$3,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,initLabels --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,clearRecentURIs --> firePropertyChange$3,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,addRecentURI --> firePropertyChange$3,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,createOpenRecentFileMenu --> configureMenu,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,createOpenRecentFileMenu --> <init>,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,getOpenChooser --> createOpenChooser,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,getOpenChooser --> setSelectedURI,org.jhotdraw.gui.URIChooser,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,getOpenChooser --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,getSaveChooser --> createSaveChooser,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,getSaveChooser --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,getSaveChooser --> getURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,getSaveChooser --> setSelectedURI,org.jhotdraw.gui.URIChooser,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,getImportChooser --> createImportChooser,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,getImportChooser --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,getExportChooser --> createExportChooser,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,getExportChooser --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.AbstractApplication,getActionMap --> getActionMap,org.jhotdraw.app.View,);
EndClass 9
StartClass 10
Class(org.jhotdraw.app.View,Y,Y,Public);
Attribute(URI_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(APPLICATION_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(TITLE_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(ENABLED_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(HAS_UNSAVED_CHANGES_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(MULTIPLE_OPEN_ID_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(SHOWING_PROPERTY,java.lang.String,Public,Y,Y,);
Method(getApplication,org.jhotdraw.app.Application,Public,N,Y);
Method(setApplication,void,Public,N,Y);
Method(getComponent,javax.swing.JComponent,Public,N,Y);
Method(isEnabled,boolean,Public,N,Y);
Method(setEnabled,void,Public,N,Y);
Method(clear,void,Public,N,Y);
Method(isEmpty,boolean,Public,N,Y);
Method(hasUnsavedChanges,boolean,Public,N,Y);
Method(markChangesAsSaved,void,Public,N,Y);
Method(execute,void,Public,N,Y);
Method(init,void,Public,N,Y);
Method(start,void,Public,N,Y);
Method(activate,void,Public,N,Y);
Method(deactivate,void,Public,N,Y);
Method(stop,void,Public,N,Y);
Method(dispose,void,Public,N,Y);
Method(getActionMap,javax.swing.ActionMap,Public,N,Y);
Method(setActionMap,void,Public,N,Y);
Method(addPropertyChangeListener,void,Public,N,Y);
Method(removePropertyChangeListener,void,Public,N,Y);
Method(setMultipleOpenId,void,Public,N,Y);
Method(getMultipleOpenId,int,Public,N,Y);
Method(isShowing,boolean,Public,N,Y);
Method(setShowing,void,Public,N,Y);
Method(setTitle,void,Public,N,Y);
Method(getTitle,java.lang.String,Public,N,Y);
Method(addDisposable,void,Public,N,Y);
Method(removeDisposable,void,Public,N,Y);
Method(getURI,java.net.URI,Public,N,Y);
Method(setURI,void,Public,N,Y);
Method(canSaveTo,boolean,Public,N,Y);
Method(write,void,Public,N,Y);
Method(read,void,Public,N,Y);
Parameter(setApplication,org.jhotdraw.app.Application,);
Parameter(setEnabled,boolean,);
Parameter(execute,java.lang.Runnable,);
Parameter(setActionMap,javax.swing.ActionMap,);
Parameter(addPropertyChangeListener,java.beans.PropertyChangeListener,);
Parameter(removePropertyChangeListener,java.beans.PropertyChangeListener,);
Parameter(setMultipleOpenId,int,);
Parameter(setShowing,boolean,);
Parameter(setTitle,java.lang.String,);
Parameter(addDisposable,org.jhotdraw.app.Disposable,);
Parameter(removeDisposable,org.jhotdraw.app.Disposable,);
Parameter(setURI,java.net.URI,);
Parameter(canSaveTo,java.net.URI,);
Parameter(write,java.net.URI,);
Parameter(write,org.jhotdraw.gui.URIChooser,);
Parameter(read,java.net.URI,);
Parameter(read,org.jhotdraw.gui.URIChooser,);
Realization(org.jhotdraw.app.Disposable);
EndClass 10
StartClass 11
Class(org.jhotdraw.app.action.app.AboutAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.Application,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
SuperClass(org.jhotdraw.app.action.AbstractApplicationAction);
Generalization(org.jhotdraw.app.action.AbstractApplicationAction);
Call(METHOD,org.jhotdraw.app.action.app.AboutAction,<init> --> <init>,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.app.AboutAction,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.app.AboutAction,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.app.AboutAction,actionPerformed --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.app.AboutAction,actionPerformed --> getComponent,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.AboutAction,actionPerformed --> getName,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.AboutAction,actionPerformed --> getVersion,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.AboutAction,actionPerformed --> getCopyright,org.jhotdraw.app.Application,);
EndClass 11
StartClass 12
Class(org.jhotdraw.app.action.window.ToggleVisibleAction,N,N,Public);
Attribute(component,java.awt.Component,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(access$000,java.awt.Component,Public,Y,N);
Parameter(<init>,java.awt.Component,);
Parameter(<init>,java.lang.String,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(access$000,org.jhotdraw.app.action.window.ToggleVisibleAction,);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.ToggleVisibleAction,<init> --> component,org.jhotdraw.app.action.window.ToggleVisibleAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.ToggleVisibleAction,actionPerformed --> component,org.jhotdraw.app.action.window.ToggleVisibleAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.ToggleVisibleAction,access$000 --> component,org.jhotdraw.app.action.window.ToggleVisibleAction,READ);
Call(METHOD,org.jhotdraw.app.action.window.ToggleVisibleAction,<init> --> <init>,org.jhotdraw.app.action.window.ToggleVisibleAction$1,);
EndClass 12
StartClass 13
Class(org.jhotdraw.util.ReversedList,N,N,Public);
Attribute(target,java.util.List,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(get,java.lang.Object,Public,N,N);
Method(size,int,Public,N,N);
Parameter(<init>,java.util.List,);
Parameter(get,int,);
Call(ATTRIBUTE,org.jhotdraw.util.ReversedList,<init> --> target,org.jhotdraw.util.ReversedList,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.ReversedList,get --> target,org.jhotdraw.util.ReversedList,READ);
Call(ATTRIBUTE,org.jhotdraw.util.ReversedList,size --> target,org.jhotdraw.util.ReversedList,READ);
EndClass 13
StartClass 14
Class(org.jhotdraw.app.action.ActionUtil,N,N,Public);
Attribute(SELECTED_KEY,java.lang.String,Public,Y,Y,);
Attribute(SUBMENU_KEY,java.lang.String,Public,Y,Y,);
Attribute(BUTTON_GROUP_KEY,java.lang.String,Public,Y,Y,);
Attribute(UNDO_PRESENTATION_NAME_KEY,java.lang.String,Public,Y,Y,);
Method(<init>,void,Private,N,N);
Method(configureJCheckBoxMenuItem,void,Public,Y,N);
Method(unconfigureJCheckBoxMenuItem,void,Public,Y,N);
Parameter(configureJCheckBoxMenuItem,javax.swing.JCheckBoxMenuItem,);
Parameter(configureJCheckBoxMenuItem,javax.swing.Action,);
Parameter(unconfigureJCheckBoxMenuItem,javax.swing.JCheckBoxMenuItem,);
Parameter(unconfigureJCheckBoxMenuItem,javax.swing.Action,);
EndClass 14
StartClass 15
Class(org.jhotdraw.net.URIUtil,N,N,Public);
Method(<init>,void,Public,N,N);
Method(URIUtil,void,Private,N,N);
Method(getName,java.lang.String,Public,Y,N);
Parameter(getName,java.net.URI,);
EndClass 15
StartClass 16
Class(org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Attribute(applicationListener,java.beans.PropertyChangeListener,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(installApplicationListeners,void,Protected,N,N);
Method(createApplicationListener,java.beans.PropertyChangeListener,Private,N,N);
Method(uninstallApplicationListeners,void,Protected,N,N);
Method(actionPerformed,void,Public,N,N);
Method(updateEnabled,void,Private,N,N);
Method(access$000,void,Public,Y,N);
Parameter(<init>,org.jhotdraw.app.Application,);
Parameter(installApplicationListeners,org.jhotdraw.app.Application,);
Parameter(uninstallApplicationListeners,org.jhotdraw.app.Application,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(access$000,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,);
SuperClass(org.jhotdraw.app.action.AbstractApplicationAction);
Generalization(org.jhotdraw.app.action.AbstractApplicationAction);
Call(METHOD,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,<init> --> updateEnabled,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,);
Call(METHOD,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,installApplicationListeners --> createApplicationListener,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,);
Call(METHOD,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,access$000 --> updateEnabled,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,installApplicationListeners --> applicationListener,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,installApplicationListeners --> applicationListener,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,uninstallApplicationListeners --> applicationListener,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,READ);
Call(METHOD,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,<init> --> <init>,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,installApplicationListeners --> installApplicationListeners,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,installApplicationListeners --> addPropertyChangeListener,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,createApplicationListener --> <init>,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction$1,);
Call(METHOD,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,uninstallApplicationListeners --> uninstallApplicationListeners,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,uninstallApplicationListeners --> removePropertyChangeListener,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,actionPerformed --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,actionPerformed --> clearRecentURIs,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,updateEnabled --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,updateEnabled --> getRecentURIs,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,updateEnabled --> setEnabled,org.jhotdraw.app.action.AbstractApplicationAction,);
EndClass 16
StartClass 17
Class(org.jhotdraw.app.SDIApplication$1,N,N,NA);
Attribute(val$view,org.jhotdraw.app.View,Public,N,Y,);
Attribute(val$f,javax.swing.JFrame,Public,N,Y,);
Attribute(this$0,org.jhotdraw.app.SDIApplication,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(windowClosing,void,Public,N,N);
Method(windowClosed,void,Public,N,N);
Method(windowGainedFocus,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.SDIApplication,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(<init>,javax.swing.JFrame,);
Parameter(windowClosing,java.awt.event.WindowEvent,);
Parameter(windowClosed,java.awt.event.WindowEvent,);
Parameter(windowGainedFocus,java.awt.event.WindowEvent,);
Composition(org.jhotdraw.app.View);
Composition(org.jhotdraw.app.SDIApplication);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication$1,<init> --> this$0,org.jhotdraw.app.SDIApplication$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication$1,<init> --> val$view,org.jhotdraw.app.SDIApplication$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication$1,<init> --> val$f,org.jhotdraw.app.SDIApplication$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication$1,windowClosing --> this$0,org.jhotdraw.app.SDIApplication$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication$1,windowClosing --> val$view,org.jhotdraw.app.SDIApplication$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication$1,windowClosing --> val$f,org.jhotdraw.app.SDIApplication$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication$1,windowClosed --> val$view,org.jhotdraw.app.SDIApplication$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication$1,windowGainedFocus --> this$0,org.jhotdraw.app.SDIApplication$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication$1,windowGainedFocus --> val$view,org.jhotdraw.app.SDIApplication$1,READ);
Call(METHOD,org.jhotdraw.app.SDIApplication$1,windowClosing --> getAction,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.SDIApplication$1,windowClosed --> stop,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.SDIApplication$1,windowGainedFocus --> setActiveView,org.jhotdraw.app.AbstractApplication,);
EndClass 17
StartClass 18
Class(org.jhotdraw.app.SDIApplication$2,N,N,NA);
Attribute(val$view,org.jhotdraw.app.View,Public,N,Y,);
Attribute(val$f,javax.swing.JFrame,Public,N,Y,);
Attribute(this$0,org.jhotdraw.app.SDIApplication,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(propertyChange,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.SDIApplication,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(<init>,javax.swing.JFrame,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Composition(org.jhotdraw.app.View);
Composition(org.jhotdraw.app.SDIApplication);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication$2,<init> --> this$0,org.jhotdraw.app.SDIApplication$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication$2,<init> --> val$view,org.jhotdraw.app.SDIApplication$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication$2,<init> --> val$f,org.jhotdraw.app.SDIApplication$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication$2,propertyChange --> this$0,org.jhotdraw.app.SDIApplication$2,READ);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication$2,propertyChange --> val$view,org.jhotdraw.app.SDIApplication$2,READ);
Call(ATTRIBUTE,org.jhotdraw.app.SDIApplication$2,propertyChange --> val$f,org.jhotdraw.app.SDIApplication$2,READ);
Call(METHOD,org.jhotdraw.app.SDIApplication$2,propertyChange --> updateViewTitle,org.jhotdraw.app.SDIApplication,);
EndClass 18
StartClass 19
Class(org.jhotdraw.app.action.file.CloseFileAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(doIt,void,Protected,N,N);
Parameter(<init>,org.jhotdraw.app.Application,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(doIt,org.jhotdraw.app.View,);
SuperClass(org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction);
SuperClass(org.jhotdraw.app.action.AbstractViewAction);
Generalization(org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction);
Call(METHOD,org.jhotdraw.app.action.file.CloseFileAction,<init> --> <init>,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,);
Call(METHOD,org.jhotdraw.app.action.file.CloseFileAction,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.CloseFileAction,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.CloseFileAction,doIt --> getApplication,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.CloseFileAction,doIt --> dispose,org.jhotdraw.app.Application,);
EndClass 19
StartClass 20
Class(org.jhotdraw.app.MenuBuilder,Y,Y,Public);
Method(addPreferencesItems,void,Public,N,Y);
Method(addExitItems,void,Public,N,Y);
Method(addClearFileItems,void,Public,N,Y);
Method(addNewWindowItems,void,Public,N,Y);
Method(addNewFileItems,void,Public,N,Y);
Method(addLoadFileItems,void,Public,N,Y);
Method(addOpenFileItems,void,Public,N,Y);
Method(addCloseFileItems,void,Public,N,Y);
Method(addSaveFileItems,void,Public,N,Y);
Method(addExportFileItems,void,Public,N,Y);
Method(addPrintFileItems,void,Public,N,Y);
Method(addOtherFileItems,void,Public,N,Y);
Method(addUndoItems,void,Public,N,Y);
Method(addClipboardItems,void,Public,N,Y);
Method(addSelectionItems,void,Public,N,Y);
Method(addFindItems,void,Public,N,Y);
Method(addOtherEditItems,void,Public,N,Y);
Method(addOtherViewItems,void,Public,N,Y);
Method(addOtherMenus,void,Public,N,Y);
Method(addOtherWindowItems,void,Public,N,Y);
Method(addHelpItems,void,Public,N,Y);
Method(addAboutItems,void,Public,N,Y);
Parameter(addPreferencesItems,javax.swing.JMenu,);
Parameter(addPreferencesItems,org.jhotdraw.app.Application,);
Parameter(addPreferencesItems,org.jhotdraw.app.View,);
Parameter(addExitItems,javax.swing.JMenu,);
Parameter(addExitItems,org.jhotdraw.app.Application,);
Parameter(addExitItems,org.jhotdraw.app.View,);
Parameter(addClearFileItems,javax.swing.JMenu,);
Parameter(addClearFileItems,org.jhotdraw.app.Application,);
Parameter(addClearFileItems,org.jhotdraw.app.View,);
Parameter(addNewWindowItems,javax.swing.JMenu,);
Parameter(addNewWindowItems,org.jhotdraw.app.Application,);
Parameter(addNewWindowItems,org.jhotdraw.app.View,);
Parameter(addNewFileItems,javax.swing.JMenu,);
Parameter(addNewFileItems,org.jhotdraw.app.Application,);
Parameter(addNewFileItems,org.jhotdraw.app.View,);
Parameter(addLoadFileItems,javax.swing.JMenu,);
Parameter(addLoadFileItems,org.jhotdraw.app.Application,);
Parameter(addLoadFileItems,org.jhotdraw.app.View,);
Parameter(addOpenFileItems,javax.swing.JMenu,);
Parameter(addOpenFileItems,org.jhotdraw.app.Application,);
Parameter(addOpenFileItems,org.jhotdraw.app.View,);
Parameter(addCloseFileItems,javax.swing.JMenu,);
Parameter(addCloseFileItems,org.jhotdraw.app.Application,);
Parameter(addCloseFileItems,org.jhotdraw.app.View,);
Parameter(addSaveFileItems,javax.swing.JMenu,);
Parameter(addSaveFileItems,org.jhotdraw.app.Application,);
Parameter(addSaveFileItems,org.jhotdraw.app.View,);
Parameter(addExportFileItems,javax.swing.JMenu,);
Parameter(addExportFileItems,org.jhotdraw.app.Application,);
Parameter(addExportFileItems,org.jhotdraw.app.View,);
Parameter(addPrintFileItems,javax.swing.JMenu,);
Parameter(addPrintFileItems,org.jhotdraw.app.Application,);
Parameter(addPrintFileItems,org.jhotdraw.app.View,);
Parameter(addOtherFileItems,javax.swing.JMenu,);
Parameter(addOtherFileItems,org.jhotdraw.app.Application,);
Parameter(addOtherFileItems,org.jhotdraw.app.View,);
Parameter(addUndoItems,javax.swing.JMenu,);
Parameter(addUndoItems,org.jhotdraw.app.Application,);
Parameter(addUndoItems,org.jhotdraw.app.View,);
Parameter(addClipboardItems,javax.swing.JMenu,);
Parameter(addClipboardItems,org.jhotdraw.app.Application,);
Parameter(addClipboardItems,org.jhotdraw.app.View,);
Parameter(addSelectionItems,javax.swing.JMenu,);
Parameter(addSelectionItems,org.jhotdraw.app.Application,);
Parameter(addSelectionItems,org.jhotdraw.app.View,);
Parameter(addFindItems,javax.swing.JMenu,);
Parameter(addFindItems,org.jhotdraw.app.Application,);
Parameter(addFindItems,org.jhotdraw.app.View,);
Parameter(addOtherEditItems,javax.swing.JMenu,);
Parameter(addOtherEditItems,org.jhotdraw.app.Application,);
Parameter(addOtherEditItems,org.jhotdraw.app.View,);
Parameter(addOtherViewItems,javax.swing.JMenu,);
Parameter(addOtherViewItems,org.jhotdraw.app.Application,);
Parameter(addOtherViewItems,org.jhotdraw.app.View,);
Parameter(addOtherMenus,java.util.List,javax.swing.JMenu);
Parameter(addOtherMenus,org.jhotdraw.app.Application,);
Parameter(addOtherMenus,org.jhotdraw.app.View,);
Parameter(addOtherWindowItems,javax.swing.JMenu,);
Parameter(addOtherWindowItems,org.jhotdraw.app.Application,);
Parameter(addOtherWindowItems,org.jhotdraw.app.View,);
Parameter(addHelpItems,javax.swing.JMenu,);
Parameter(addHelpItems,org.jhotdraw.app.Application,);
Parameter(addHelpItems,org.jhotdraw.app.View,);
Parameter(addAboutItems,javax.swing.JMenu,);
Parameter(addAboutItems,org.jhotdraw.app.Application,);
Parameter(addAboutItems,org.jhotdraw.app.View,);
EndClass 20
StartClass 21
Class(org.jhotdraw.util.prefs.PreferencesUtil,N,N,Public);
Attribute(map,java.util.HashMap,Private,N,N,java.lang.String;java.lang.Object);
Attribute(isUserNode,boolean,Private,N,N,);
Attribute(systemNodes,java.util.HashMap,Private,Y,N,java.lang.Package;java.util.prefs.Preferences);
Attribute(userNodes,java.util.HashMap,Private,Y,N,java.lang.Package;java.util.prefs.Preferences);
Method(<init>,void,Public,N,N);
Method(put,void,Public,N,N);
Method(get,java.lang.String,Public,N,N);
Method(remove,void,Public,N,N);
Method(clear,void,Public,N,N);
Method(putInt,void,Public,N,N);
Method(getInt,int,Public,N,N);
Method(putLong,void,Public,N,N);
Method(getLong,long,Public,N,N);
Method(putBoolean,void,Public,N,N);
Method(getBoolean,boolean,Public,N,N);
Method(putFloat,void,Public,N,N);
Method(getFloat,float,Public,N,N);
Method(putDouble,void,Public,N,N);
Method(getDouble,double,Public,N,N);
Method(putByteArray,void,Public,N,N);
Method(getByteArray,byte[],Public,N,N);
Method(keys,java.lang.String[],Public,N,N);
Method(childrenNames,java.lang.String[],Public,N,N);
Method(parent,java.util.prefs.Preferences,Public,N,N);
Method(node,java.util.prefs.Preferences,Public,N,N);
Method(nodeExists,boolean,Public,N,N);
Method(removeNode,void,Public,N,N);
Method(name,java.lang.String,Public,N,N);
Method(absolutePath,java.lang.String,Public,N,N);
Method(isUserNode,boolean,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(flush,void,Public,N,N);
Method(sync,void,Public,N,N);
Method(addPreferenceChangeListener,void,Public,N,N);
Method(removePreferenceChangeListener,void,Public,N,N);
Method(addNodeChangeListener,void,Public,N,N);
Method(removeNodeChangeListener,void,Public,N,N);
Method(exportNode,void,Public,N,N);
Method(exportSubtree,void,Public,N,N);
Method(systemNodeForPackage,java.util.prefs.Preferences,Public,Y,N);
Method(userNodeForPackage,java.util.prefs.Preferences,Public,Y,N);
Method(installPrefsHandler,void,Public,Y,N);
Method(<init>$2,void,Private,N,N);
Method(installFramePrefsHandler,void,Public,Y,N);
Method(installFramePrefsHandler$2,void,Public,Y,N);
Method(installPalettePrefsHandler,void,Public,Y,N);
Method(installPalettePrefsHandler$2,void,Public,Y,N);
Method(installInternalFramePrefsHandler,void,Public,Y,N);
Method(installToolBarPrefsHandler,void,Public,Y,N);
Method(installTabbedPanePrefsHandler,void,Public,Y,N);
Parameter(<init>,boolean,);
Parameter(put,java.lang.String,);
Parameter(put,java.lang.String,);
Parameter(get,java.lang.String,);
Parameter(get,java.lang.String,);
Parameter(remove,java.lang.String,);
Parameter(putInt,java.lang.String,);
Parameter(putInt,int,);
Parameter(getInt,java.lang.String,);
Parameter(getInt,int,);
Parameter(putLong,java.lang.String,);
Parameter(putLong,long,);
Parameter(getLong,java.lang.String,);
Parameter(getLong,long,);
Parameter(putBoolean,java.lang.String,);
Parameter(putBoolean,boolean,);
Parameter(getBoolean,java.lang.String,);
Parameter(getBoolean,boolean,);
Parameter(putFloat,java.lang.String,);
Parameter(putFloat,float,);
Parameter(getFloat,java.lang.String,);
Parameter(getFloat,float,);
Parameter(putDouble,java.lang.String,);
Parameter(putDouble,double,);
Parameter(getDouble,java.lang.String,);
Parameter(getDouble,double,);
Parameter(putByteArray,java.lang.String,);
Parameter(putByteArray,byte[],);
Parameter(getByteArray,java.lang.String,);
Parameter(getByteArray,byte[],);
Parameter(node,java.lang.String,);
Parameter(nodeExists,java.lang.String,);
Parameter(addPreferenceChangeListener,java.util.prefs.PreferenceChangeListener,);
Parameter(removePreferenceChangeListener,java.util.prefs.PreferenceChangeListener,);
Parameter(addNodeChangeListener,java.util.prefs.NodeChangeListener,);
Parameter(removeNodeChangeListener,java.util.prefs.NodeChangeListener,);
Parameter(exportNode,java.io.OutputStream,);
Parameter(exportSubtree,java.io.OutputStream,);
Parameter(systemNodeForPackage,java.lang.Class,);
Parameter(userNodeForPackage,java.lang.Class,);
Parameter(installPrefsHandler,java.util.prefs.Preferences,);
Parameter(installPrefsHandler,java.lang.String,);
Parameter(installPrefsHandler,javax.swing.JTabbedPane,);
Parameter(installFramePrefsHandler,java.util.prefs.Preferences,);
Parameter(installFramePrefsHandler,java.lang.String,);
Parameter(installFramePrefsHandler,java.awt.Window,);
Parameter(installFramePrefsHandler$2,java.util.prefs.Preferences,);
Parameter(installFramePrefsHandler$2,java.lang.String,);
Parameter(installFramePrefsHandler$2,java.awt.Window,);
Parameter(installFramePrefsHandler$2,java.awt.Dimension,);
Parameter(installPalettePrefsHandler,java.util.prefs.Preferences,);
Parameter(installPalettePrefsHandler,java.lang.String,);
Parameter(installPalettePrefsHandler,java.awt.Window,);
Parameter(installPalettePrefsHandler$2,java.util.prefs.Preferences,);
Parameter(installPalettePrefsHandler$2,java.lang.String,);
Parameter(installPalettePrefsHandler$2,java.awt.Window,);
Parameter(installPalettePrefsHandler$2,int,);
Parameter(installInternalFramePrefsHandler,java.util.prefs.Preferences,);
Parameter(installInternalFramePrefsHandler,java.lang.String,);
Parameter(installInternalFramePrefsHandler,javax.swing.JInternalFrame,);
Parameter(installInternalFramePrefsHandler,javax.swing.JDesktopPane,);
Parameter(installToolBarPrefsHandler,java.util.prefs.Preferences,);
Parameter(installToolBarPrefsHandler,java.lang.String,);
Parameter(installToolBarPrefsHandler,javax.swing.JToolBar,);
Parameter(installTabbedPanePrefsHandler,java.util.prefs.Preferences,);
Parameter(installTabbedPanePrefsHandler,java.lang.String,);
Parameter(installTabbedPanePrefsHandler,javax.swing.JTabbedPane,);
Call(METHOD,org.jhotdraw.util.prefs.PreferencesUtil,flush --> clear,org.jhotdraw.util.prefs.PreferencesUtil,);
Call(METHOD,org.jhotdraw.util.prefs.PreferencesUtil,systemNodeForPackage --> <init>,org.jhotdraw.util.prefs.PreferencesUtil,);
Call(METHOD,org.jhotdraw.util.prefs.PreferencesUtil,systemNodeForPackage --> systemNodeForPackage,org.jhotdraw.util.prefs.PreferencesUtil,);
Call(METHOD,org.jhotdraw.util.prefs.PreferencesUtil,userNodeForPackage --> <init>,org.jhotdraw.util.prefs.PreferencesUtil,);
Call(METHOD,org.jhotdraw.util.prefs.PreferencesUtil,userNodeForPackage --> userNodeForPackage,org.jhotdraw.util.prefs.PreferencesUtil,);
Call(METHOD,org.jhotdraw.util.prefs.PreferencesUtil,installFramePrefsHandler --> installFramePrefsHandler$2,org.jhotdraw.util.prefs.PreferencesUtil,);
Call(METHOD,org.jhotdraw.util.prefs.PreferencesUtil,installPalettePrefsHandler --> installPalettePrefsHandler$2,org.jhotdraw.util.prefs.PreferencesUtil,);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,<init> --> map,org.jhotdraw.util.prefs.PreferencesUtil,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,<init> --> isUserNode,org.jhotdraw.util.prefs.PreferencesUtil,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,put --> map,org.jhotdraw.util.prefs.PreferencesUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,get --> map,org.jhotdraw.util.prefs.PreferencesUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,remove --> map,org.jhotdraw.util.prefs.PreferencesUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,clear --> map,org.jhotdraw.util.prefs.PreferencesUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,putInt --> map,org.jhotdraw.util.prefs.PreferencesUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,getInt --> map,org.jhotdraw.util.prefs.PreferencesUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,putLong --> map,org.jhotdraw.util.prefs.PreferencesUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,getLong --> map,org.jhotdraw.util.prefs.PreferencesUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,putBoolean --> map,org.jhotdraw.util.prefs.PreferencesUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,getBoolean --> map,org.jhotdraw.util.prefs.PreferencesUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,putFloat --> map,org.jhotdraw.util.prefs.PreferencesUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,getFloat --> map,org.jhotdraw.util.prefs.PreferencesUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,putDouble --> map,org.jhotdraw.util.prefs.PreferencesUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,getDouble --> map,org.jhotdraw.util.prefs.PreferencesUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,putByteArray --> map,org.jhotdraw.util.prefs.PreferencesUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,getByteArray --> map,org.jhotdraw.util.prefs.PreferencesUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,keys --> map,org.jhotdraw.util.prefs.PreferencesUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,isUserNode --> isUserNode,org.jhotdraw.util.prefs.PreferencesUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,systemNodeForPackage --> systemNodes,org.jhotdraw.util.prefs.PreferencesUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,systemNodeForPackage --> systemNodes,org.jhotdraw.util.prefs.PreferencesUtil,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,userNodeForPackage --> userNodes,org.jhotdraw.util.prefs.PreferencesUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,userNodeForPackage --> userNodes,org.jhotdraw.util.prefs.PreferencesUtil,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil,<init>$2 --> map,org.jhotdraw.util.prefs.PreferencesUtil,WRITE);
Call(METHOD,org.jhotdraw.util.prefs.PreferencesUtil,installFramePrefsHandler$2 --> <init>,org.jhotdraw.util.prefs.PreferencesUtil$1,);
Call(METHOD,org.jhotdraw.util.prefs.PreferencesUtil,installPalettePrefsHandler$2 --> <init>,org.jhotdraw.util.prefs.PreferencesUtil$2,);
Call(METHOD,org.jhotdraw.util.prefs.PreferencesUtil,installPalettePrefsHandler$2 --> <init>,org.jhotdraw.util.prefs.PreferencesUtil$3,);
Call(METHOD,org.jhotdraw.util.prefs.PreferencesUtil,installInternalFramePrefsHandler --> <init>,org.jhotdraw.util.prefs.PreferencesUtil$4,);
Call(METHOD,org.jhotdraw.util.prefs.PreferencesUtil,installToolBarPrefsHandler --> <init>,org.jhotdraw.util.prefs.ToolBarPrefsHandler,);
Call(METHOD,org.jhotdraw.util.prefs.PreferencesUtil,installTabbedPanePrefsHandler --> <init>,org.jhotdraw.util.prefs.PreferencesUtil$5,);
EndClass 21
StartClass 22
Class(org.jhotdraw.gui.URIChooser,Y,Y,Public);
Attribute(OPEN_DIALOG,int,Public,Y,Y,);
Attribute(SAVE_DIALOG,int,Public,Y,Y,);
Attribute(CUSTOM_DIALOG,int,Public,Y,Y,);
Attribute(CANCEL_OPTION,int,Public,Y,Y,);
Attribute(APPROVE_OPTION,int,Public,Y,Y,);
Attribute(ERROR_OPTION,int,Public,Y,Y,);
Attribute(CANCEL_SELECTION,java.lang.String,Public,Y,Y,);
Attribute(APPROVE_SELECTION,java.lang.String,Public,Y,Y,);
Attribute(SELECTED_URI_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(DIALOG_TITLE_PROPERTY,java.lang.String,Public,Y,Y,);
Method(getSelectedURI,java.net.URI,Public,N,Y);
Method(setSelectedURI,void,Public,N,Y);
Method(getDialogType,int,Public,N,Y);
Method(setDialogType,void,Public,N,Y);
Method(getApproveButtonText,java.lang.String,Public,N,Y);
Method(setApproveButtonText,void,Public,N,Y);
Method(getApproveButtonMnemonic,int,Public,N,Y);
Method(setApproveButtonMnemonic,void,Public,N,Y);
Method(getComponent,javax.swing.JComponent,Public,N,Y);
Method(addActionListener,void,Public,N,Y);
Method(removeActionListener,void,Public,N,Y);
Method(setDialogTitle,void,Public,N,Y);
Method(getDialogTitle,java.lang.String,Public,N,Y);
Method(rescanCurrentDirectory,void,Public,N,Y);
Method(showOpenDialog,int,Public,N,Y);
Method(showSaveDialog,int,Public,N,Y);
Method(showDialog,int,Public,N,Y);
Parameter(setSelectedURI,java.net.URI,);
Parameter(setDialogType,int,);
Parameter(setApproveButtonText,java.lang.String,);
Parameter(setApproveButtonMnemonic,int,);
Parameter(addActionListener,java.awt.event.ActionListener,);
Parameter(removeActionListener,java.awt.event.ActionListener,);
Parameter(setDialogTitle,java.lang.String,);
Parameter(showOpenDialog,java.awt.Component,);
Parameter(showSaveDialog,java.awt.Component,);
Parameter(showDialog,java.awt.Component,);
Parameter(showDialog,java.lang.String,);
EndClass 22
StartClass 23
Class(org.jhotdraw.app.osx.OSXPaletteHandler,N,N,Public);
Attribute(palettes,java.util.HashSet,Private,N,N,java.awt.Window);
Attribute(windows,java.util.HashMap,Private,N,N,java.awt.Window;org.jhotdraw.app.View);
Attribute(timer,javax.swing.Timer,Private,N,N,);
Attribute(app,org.jhotdraw.app.OSXApplication,Private,N,N,);
Attribute(focusHandler,java.awt.event.WindowFocusListener,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(add,void,Public,N,N);
Method(remove,void,Public,N,N);
Method(addPalette,void,Public,N,N);
Method(removePalette,void,Public,N,N);
Method(getPalettes,java.util.Set,Public,N,N);
Method(showPalettes,void,Private,N,N);
Method(isFocused,boolean,Private,N,N);
Method(maybeHidePalettes,void,Private,N,N);
Method(addWindow,void,Public,N,N);
Method(removeWindow,void,Public,N,N);
Method(access$000,javax.swing.Timer,Public,Y,N);
Method(access$100,java.util.HashMap,Public,Y,N);
Method(access$200,org.jhotdraw.app.OSXApplication,Public,Y,N);
Method(access$300,void,Public,Y,N);
Method(access$400,void,Public,Y,N);
Parameter(<init>,org.jhotdraw.app.OSXApplication,);
Parameter(add,java.awt.Window,);
Parameter(add,org.jhotdraw.app.View,);
Parameter(remove,java.awt.Window,);
Parameter(addPalette,java.awt.Window,);
Parameter(removePalette,java.awt.Window,);
Parameter(isFocused,java.awt.Window,);
Parameter(addWindow,java.awt.Window,);
Parameter(removeWindow,java.awt.Window,);
Parameter(access$000,org.jhotdraw.app.osx.OSXPaletteHandler,);
Parameter(access$100,org.jhotdraw.app.osx.OSXPaletteHandler,);
Parameter(access$200,org.jhotdraw.app.osx.OSXPaletteHandler,);
Parameter(access$300,org.jhotdraw.app.osx.OSXPaletteHandler,);
Parameter(access$400,org.jhotdraw.app.osx.OSXPaletteHandler,);
Composition(org.jhotdraw.app.OSXApplication);
Call(METHOD,org.jhotdraw.app.osx.OSXPaletteHandler,isFocused --> isFocused,org.jhotdraw.app.osx.OSXPaletteHandler,);
Call(METHOD,org.jhotdraw.app.osx.OSXPaletteHandler,maybeHidePalettes --> isFocused,org.jhotdraw.app.osx.OSXPaletteHandler,);
Call(METHOD,org.jhotdraw.app.osx.OSXPaletteHandler,access$300 --> showPalettes,org.jhotdraw.app.osx.OSXPaletteHandler,);
Call(METHOD,org.jhotdraw.app.osx.OSXPaletteHandler,access$400 --> maybeHidePalettes,org.jhotdraw.app.osx.OSXPaletteHandler,);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,<init> --> timer,org.jhotdraw.app.osx.OSXPaletteHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,<init> --> palettes,org.jhotdraw.app.osx.OSXPaletteHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,<init> --> windows,org.jhotdraw.app.osx.OSXPaletteHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,<init> --> focusHandler,org.jhotdraw.app.osx.OSXPaletteHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,<init> --> app,org.jhotdraw.app.osx.OSXPaletteHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,<init> --> timer,org.jhotdraw.app.osx.OSXPaletteHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,add --> focusHandler,org.jhotdraw.app.osx.OSXPaletteHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,add --> windows,org.jhotdraw.app.osx.OSXPaletteHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,remove --> windows,org.jhotdraw.app.osx.OSXPaletteHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,remove --> focusHandler,org.jhotdraw.app.osx.OSXPaletteHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,addPalette --> focusHandler,org.jhotdraw.app.osx.OSXPaletteHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,addPalette --> palettes,org.jhotdraw.app.osx.OSXPaletteHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,removePalette --> palettes,org.jhotdraw.app.osx.OSXPaletteHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,removePalette --> focusHandler,org.jhotdraw.app.osx.OSXPaletteHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,getPalettes --> palettes,org.jhotdraw.app.osx.OSXPaletteHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,showPalettes --> palettes,org.jhotdraw.app.osx.OSXPaletteHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,maybeHidePalettes --> windows,org.jhotdraw.app.osx.OSXPaletteHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,maybeHidePalettes --> palettes,org.jhotdraw.app.osx.OSXPaletteHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,addWindow --> focusHandler,org.jhotdraw.app.osx.OSXPaletteHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,addWindow --> windows,org.jhotdraw.app.osx.OSXPaletteHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,removeWindow --> windows,org.jhotdraw.app.osx.OSXPaletteHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,removeWindow --> focusHandler,org.jhotdraw.app.osx.OSXPaletteHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,access$000 --> timer,org.jhotdraw.app.osx.OSXPaletteHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,access$100 --> windows,org.jhotdraw.app.osx.OSXPaletteHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler,access$200 --> app,org.jhotdraw.app.osx.OSXPaletteHandler,READ);
Call(METHOD,org.jhotdraw.app.osx.OSXPaletteHandler,<init> --> <init>,org.jhotdraw.app.osx.OSXPaletteHandler$1,);
Call(METHOD,org.jhotdraw.app.osx.OSXPaletteHandler,<init> --> <init>,org.jhotdraw.app.osx.OSXPaletteHandler$2,);
EndClass 23
StartClass 24
Class(org.jhotdraw.app.action.app.ReOpenApplicationAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.Application,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
SuperClass(org.jhotdraw.app.action.AbstractApplicationAction);
Generalization(org.jhotdraw.app.action.AbstractApplicationAction);
Call(METHOD,org.jhotdraw.app.action.app.ReOpenApplicationAction,<init> --> <init>,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.app.ReOpenApplicationAction,actionPerformed --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.app.ReOpenApplicationAction,actionPerformed --> getActiveView,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.ReOpenApplicationAction,actionPerformed --> views,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.ReOpenApplicationAction,actionPerformed --> getComponent,org.jhotdraw.app.View,);
EndClass 24
StartClass 25
Class(org.jhotdraw.app.action.app.OpenApplicationFileAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Attribute(fileChooser,javax.swing.JFileChooser,Private,N,N,);
Attribute(entries,int,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(openView,void,Protected,N,N);
Parameter(<init>,org.jhotdraw.app.Application,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(openView,org.jhotdraw.app.View,);
Parameter(openView,java.net.URI,);
SuperClass(org.jhotdraw.app.action.AbstractApplicationAction);
Generalization(org.jhotdraw.app.action.AbstractApplicationAction);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction,actionPerformed --> openView,org.jhotdraw.app.action.app.OpenApplicationFileAction,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction,<init> --> <init>,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction,actionPerformed --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction,actionPerformed --> isEnabled,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction,actionPerformed --> setEnabled,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction,actionPerformed --> getActiveView,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction,actionPerformed --> getURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction,actionPerformed --> hasUnsavedChanges,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction,actionPerformed --> createView,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction,actionPerformed --> add,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction,actionPerformed --> show,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction,openView --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction,openView --> setEnabled,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction,openView --> views,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction,openView --> getURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction,openView --> getMultipleOpenId,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction,openView --> setMultipleOpenId,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction,openView --> setEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction,openView --> <init>,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction,openView --> execute,org.jhotdraw.app.View,);
EndClass 25
StartClass 26
Class(org.jhotdraw.app.action.window.MaximizeWindowAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(getFrame,javax.swing.JFrame,Private,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.Application,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
SuperClass(org.jhotdraw.app.action.AbstractViewAction);
Generalization(org.jhotdraw.app.action.AbstractViewAction);
Call(METHOD,org.jhotdraw.app.action.window.MaximizeWindowAction,actionPerformed --> getFrame,org.jhotdraw.app.action.window.MaximizeWindowAction,);
Call(METHOD,org.jhotdraw.app.action.window.MaximizeWindowAction,<init> --> <init>,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.window.MaximizeWindowAction,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.window.MaximizeWindowAction,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.window.MaximizeWindowAction,getFrame --> getActiveView,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.window.MaximizeWindowAction,getFrame --> getComponent,org.jhotdraw.app.View,);
EndClass 26
StartClass 27
Class(org.jhotdraw.app.action.window.MinimizeWindowAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(getFrame,javax.swing.JFrame,Private,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.Application,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
SuperClass(org.jhotdraw.app.action.AbstractViewAction);
Generalization(org.jhotdraw.app.action.AbstractViewAction);
Call(METHOD,org.jhotdraw.app.action.window.MinimizeWindowAction,actionPerformed --> getFrame,org.jhotdraw.app.action.window.MinimizeWindowAction,);
Call(METHOD,org.jhotdraw.app.action.window.MinimizeWindowAction,<init> --> <init>,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.window.MinimizeWindowAction,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.window.MinimizeWindowAction,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.window.MinimizeWindowAction,getFrame --> getActiveView,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.window.MinimizeWindowAction,getFrame --> getComponent,org.jhotdraw.app.View,);
EndClass 27
StartClass 28
Class(org.jhotdraw.app.osx.OSXAdapter,N,N,Public);
Attribute(targetAction,java.awt.event.ActionListener,Protected,N,N,);
Attribute(targetObject,java.lang.Object,Protected,N,N,);
Attribute(targetMethod,java.lang.reflect.Method,Protected,N,N,);
Attribute(proxySignature,java.lang.String,Protected,N,N,);
Attribute(macOSXApplication,java.lang.Object,Public,Y,N,);
Method(setOpenApplicationHandler,void,Public,Y,N);
Method(setReOpenApplicationHandler,void,Public,Y,N);
Method(setQuitHandler,void,Public,Y,N);
Method(setAboutHandler,void,Public,Y,N);
Method(setPreferencesHandler,void,Public,Y,N);
Method(setOpenFileHandler,void,Public,Y,N);
Method(setPrintFileHandler,void,Public,Y,N);
Method(setHandler,void,Public,Y,N);
Method(<init>,void,Protected,N,N);
Method(<init>$2,void,Protected,N,N);
Method(callTarget,boolean,Public,N,N);
Method(invoke,java.lang.Object,Public,N,N);
Method(isCorrectMethod,boolean,Protected,N,N);
Method(setApplicationEventHandled,void,Protected,N,N);
Parameter(setOpenApplicationHandler,java.awt.event.ActionListener,);
Parameter(setReOpenApplicationHandler,java.awt.event.ActionListener,);
Parameter(setQuitHandler,java.awt.event.ActionListener,);
Parameter(setAboutHandler,java.awt.event.ActionListener,);
Parameter(setPreferencesHandler,java.awt.event.ActionListener,);
Parameter(setOpenFileHandler,java.awt.event.ActionListener,);
Parameter(setPrintFileHandler,java.awt.event.ActionListener,);
Parameter(setHandler,org.jhotdraw.app.osx.OSXAdapter,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.Object,);
Parameter(<init>,java.lang.reflect.Method,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,java.awt.event.ActionListener,);
Parameter(callTarget,java.lang.Object,);
Parameter(invoke,java.lang.Object,);
Parameter(invoke,java.lang.reflect.Method,);
Parameter(invoke,java.lang.Object[],);
Parameter(isCorrectMethod,java.lang.reflect.Method,);
Parameter(isCorrectMethod,java.lang.Object[],);
Parameter(setApplicationEventHandled,java.lang.Object,);
Parameter(setApplicationEventHandled,boolean,);
SubClass(org.jhotdraw.app.osx.OSXAdapter$3);
SubClass(org.jhotdraw.app.osx.OSXAdapter$1);
SubClass(org.jhotdraw.app.osx.OSXAdapter$2);
Call(METHOD,org.jhotdraw.app.osx.OSXAdapter,setOpenApplicationHandler --> <init>$2,org.jhotdraw.app.osx.OSXAdapter,);
Call(METHOD,org.jhotdraw.app.osx.OSXAdapter,setOpenApplicationHandler --> setHandler,org.jhotdraw.app.osx.OSXAdapter,);
Call(METHOD,org.jhotdraw.app.osx.OSXAdapter,setReOpenApplicationHandler --> <init>$2,org.jhotdraw.app.osx.OSXAdapter,);
Call(METHOD,org.jhotdraw.app.osx.OSXAdapter,setReOpenApplicationHandler --> setHandler,org.jhotdraw.app.osx.OSXAdapter,);
Call(METHOD,org.jhotdraw.app.osx.OSXAdapter,setQuitHandler --> setHandler,org.jhotdraw.app.osx.OSXAdapter,);
Call(METHOD,org.jhotdraw.app.osx.OSXAdapter,setAboutHandler --> <init>$2,org.jhotdraw.app.osx.OSXAdapter,);
Call(METHOD,org.jhotdraw.app.osx.OSXAdapter,setAboutHandler --> setHandler,org.jhotdraw.app.osx.OSXAdapter,);
Call(METHOD,org.jhotdraw.app.osx.OSXAdapter,setPreferencesHandler --> <init>$2,org.jhotdraw.app.osx.OSXAdapter,);
Call(METHOD,org.jhotdraw.app.osx.OSXAdapter,setPreferencesHandler --> setHandler,org.jhotdraw.app.osx.OSXAdapter,);
Call(METHOD,org.jhotdraw.app.osx.OSXAdapter,setOpenFileHandler --> setHandler,org.jhotdraw.app.osx.OSXAdapter,);
Call(METHOD,org.jhotdraw.app.osx.OSXAdapter,setPrintFileHandler --> setHandler,org.jhotdraw.app.osx.OSXAdapter,);
Call(METHOD,org.jhotdraw.app.osx.OSXAdapter,invoke --> isCorrectMethod,org.jhotdraw.app.osx.OSXAdapter,);
Call(METHOD,org.jhotdraw.app.osx.OSXAdapter,invoke --> callTarget,org.jhotdraw.app.osx.OSXAdapter,);
Call(METHOD,org.jhotdraw.app.osx.OSXAdapter,invoke --> setApplicationEventHandled,org.jhotdraw.app.osx.OSXAdapter,);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXAdapter,setAboutHandler --> macOSXApplication,org.jhotdraw.app.osx.OSXAdapter,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXAdapter,setPreferencesHandler --> macOSXApplication,org.jhotdraw.app.osx.OSXAdapter,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXAdapter,setHandler --> macOSXApplication,org.jhotdraw.app.osx.OSXAdapter,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXAdapter,setHandler --> macOSXApplication,org.jhotdraw.app.osx.OSXAdapter,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXAdapter,<init> --> proxySignature,org.jhotdraw.app.osx.OSXAdapter,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXAdapter,<init> --> targetObject,org.jhotdraw.app.osx.OSXAdapter,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXAdapter,<init> --> targetMethod,org.jhotdraw.app.osx.OSXAdapter,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXAdapter,<init>$2 --> proxySignature,org.jhotdraw.app.osx.OSXAdapter,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXAdapter,<init>$2 --> targetAction,org.jhotdraw.app.osx.OSXAdapter,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXAdapter,callTarget --> targetAction,org.jhotdraw.app.osx.OSXAdapter,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXAdapter,callTarget --> proxySignature,org.jhotdraw.app.osx.OSXAdapter,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXAdapter,callTarget --> targetMethod,org.jhotdraw.app.osx.OSXAdapter,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXAdapter,callTarget --> targetObject,org.jhotdraw.app.osx.OSXAdapter,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXAdapter,isCorrectMethod --> proxySignature,org.jhotdraw.app.osx.OSXAdapter,READ);
Call(METHOD,org.jhotdraw.app.osx.OSXAdapter,setQuitHandler --> <init>,org.jhotdraw.app.osx.OSXAdapter$1,);
Call(METHOD,org.jhotdraw.app.osx.OSXAdapter,setOpenFileHandler --> <init>,org.jhotdraw.app.osx.OSXAdapter$2,);
Call(METHOD,org.jhotdraw.app.osx.OSXAdapter,setPrintFileHandler --> <init>,org.jhotdraw.app.osx.OSXAdapter$3,);
EndClass 28
StartClass 29
Class(org.jhotdraw.app.OSXApplication$WindowMenuHandler,N,N,NA);
Attribute(windowMenu,javax.swing.JMenu,Private,N,N,);
Attribute(view,org.jhotdraw.app.View,Private,N,N,);
Attribute(this$0,org.jhotdraw.app.OSXApplication,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(propertyChange,void,Public,N,N);
Method(updateWindowMenu,void,Protected,N,N);
Method(dispose,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.OSXApplication,);
Parameter(<init>,javax.swing.JMenu,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Realization(org.jhotdraw.app.Disposable);
Composition(org.jhotdraw.app.View);
Composition(org.jhotdraw.app.OSXApplication);
Call(METHOD,org.jhotdraw.app.OSXApplication$WindowMenuHandler,<init> --> updateWindowMenu,org.jhotdraw.app.OSXApplication$WindowMenuHandler,);
Call(METHOD,org.jhotdraw.app.OSXApplication$WindowMenuHandler,propertyChange --> updateWindowMenu,org.jhotdraw.app.OSXApplication$WindowMenuHandler,);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$WindowMenuHandler,<init> --> this$0,org.jhotdraw.app.OSXApplication$WindowMenuHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$WindowMenuHandler,<init> --> windowMenu,org.jhotdraw.app.OSXApplication$WindowMenuHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$WindowMenuHandler,<init> --> view,org.jhotdraw.app.OSXApplication$WindowMenuHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$WindowMenuHandler,updateWindowMenu --> windowMenu,org.jhotdraw.app.OSXApplication$WindowMenuHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$WindowMenuHandler,updateWindowMenu --> this$0,org.jhotdraw.app.OSXApplication$WindowMenuHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$WindowMenuHandler,updateWindowMenu --> view,org.jhotdraw.app.OSXApplication$WindowMenuHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$WindowMenuHandler,dispose --> windowMenu,org.jhotdraw.app.OSXApplication$WindowMenuHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$WindowMenuHandler,dispose --> this$0,org.jhotdraw.app.OSXApplication$WindowMenuHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$WindowMenuHandler,dispose --> view,org.jhotdraw.app.OSXApplication$WindowMenuHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$WindowMenuHandler,updateWindowMenu --> model,org.jhotdraw.app.AbstractApplication,READ);
Call(METHOD,org.jhotdraw.app.OSXApplication$WindowMenuHandler,<init> --> addPropertyChangeListener,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.app.OSXApplication$WindowMenuHandler,<init> --> addDisposable,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.OSXApplication$WindowMenuHandler,updateWindowMenu --> getAction,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication$WindowMenuHandler,updateWindowMenu --> views,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication$WindowMenuHandler,updateWindowMenu --> access$200,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication$WindowMenuHandler,updateWindowMenu --> configureJCheckBoxMenuItem,org.jhotdraw.app.action.ActionUtil,);
Call(METHOD,org.jhotdraw.app.OSXApplication$WindowMenuHandler,updateWindowMenu --> getMenuBuilder,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.OSXApplication$WindowMenuHandler,updateWindowMenu --> addOtherWindowItems,org.jhotdraw.app.MenuBuilder,);
Call(METHOD,org.jhotdraw.app.OSXApplication$WindowMenuHandler,dispose --> removePropertyChangeListener,org.jhotdraw.beans.AbstractBean,);
EndClass 29
StartClass 30
Class(org.jhotdraw.app.OSXApplication$QuitHandler,N,N,NA);
Method(<init>,void,Private,N,N);
Method(handleQuit,boolean,Public,N,N);
EndClass 30
StartClass 31
Class(org.jhotdraw.app.action.window.FocusWindowAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Attribute(view,org.jhotdraw.app.View,Private,N,N,);
Attribute(ppc,java.beans.PropertyChangeListener,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(dispose,void,Public,N,N);
Method(setView,void,Public,N,N);
Method(getValue,java.lang.Object,Public,N,N);
Method(getTitle,java.lang.String,Private,N,N);
Method(getFrame,javax.swing.JFrame,Private,N,N);
Method(getRootPaneContainer,java.awt.Component,Private,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(setView,org.jhotdraw.app.View,);
Parameter(getValue,java.lang.String,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Composition(org.jhotdraw.app.View);
Call(METHOD,org.jhotdraw.app.action.window.FocusWindowAction,dispose --> setView,org.jhotdraw.app.action.window.FocusWindowAction,);
Call(METHOD,org.jhotdraw.app.action.window.FocusWindowAction,getValue --> getTitle,org.jhotdraw.app.action.window.FocusWindowAction,);
Call(METHOD,org.jhotdraw.app.action.window.FocusWindowAction,actionPerformed --> getRootPaneContainer,org.jhotdraw.app.action.window.FocusWindowAction,);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.FocusWindowAction,<init> --> ppc,org.jhotdraw.app.action.window.FocusWindowAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.FocusWindowAction,<init> --> view,org.jhotdraw.app.action.window.FocusWindowAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.FocusWindowAction,<init> --> ppc,org.jhotdraw.app.action.window.FocusWindowAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.FocusWindowAction,setView --> view,org.jhotdraw.app.action.window.FocusWindowAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.FocusWindowAction,setView --> ppc,org.jhotdraw.app.action.window.FocusWindowAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.FocusWindowAction,setView --> view,org.jhotdraw.app.action.window.FocusWindowAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.FocusWindowAction,getValue --> view,org.jhotdraw.app.action.window.FocusWindowAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.FocusWindowAction,getTitle --> view,org.jhotdraw.app.action.window.FocusWindowAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.FocusWindowAction,getFrame --> view,org.jhotdraw.app.action.window.FocusWindowAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.FocusWindowAction,getRootPaneContainer --> view,org.jhotdraw.app.action.window.FocusWindowAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.FocusWindowAction,actionPerformed --> view,org.jhotdraw.app.action.window.FocusWindowAction,READ);
Call(METHOD,org.jhotdraw.app.action.window.FocusWindowAction,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.window.FocusWindowAction,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.window.FocusWindowAction,<init> --> <init>,org.jhotdraw.app.action.window.FocusWindowAction$1,);
Call(METHOD,org.jhotdraw.app.action.window.FocusWindowAction,<init> --> addPropertyChangeListener,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.window.FocusWindowAction,setView --> removePropertyChangeListener,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.window.FocusWindowAction,setView --> addPropertyChangeListener,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.window.FocusWindowAction,getTitle --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.window.FocusWindowAction,getTitle --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.window.FocusWindowAction,getTitle --> getURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.window.FocusWindowAction,getTitle --> getName,org.jhotdraw.net.URIUtil,);
Call(METHOD,org.jhotdraw.app.action.window.FocusWindowAction,getTitle --> hasUnsavedChanges,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.window.FocusWindowAction,getTitle --> getApplication,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.window.FocusWindowAction,getTitle --> getName,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.window.FocusWindowAction,getTitle --> getMultipleOpenId,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.window.FocusWindowAction,getTitle --> getFormatted,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.window.FocusWindowAction,getFrame --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.window.FocusWindowAction,getRootPaneContainer --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.window.FocusWindowAction,actionPerformed --> getComponent,org.jhotdraw.app.View,);
EndClass 31
StartClass 32
Class(org.jhotdraw.app.action.app.OpenApplicationAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.Application,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
SuperClass(org.jhotdraw.app.action.AbstractApplicationAction);
Generalization(org.jhotdraw.app.action.AbstractApplicationAction);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationAction,<init> --> <init>,org.jhotdraw.app.action.AbstractApplicationAction,);
EndClass 32
StartClass 33
Class(org.jhotdraw.app.action.app.ExitAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Attribute(oldFocusOwner,java.awt.Component,Private,N,N,);
Attribute(unsavedView,org.jhotdraw.app.View,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(getChooser,org.jhotdraw.gui.URIChooser,Protected,N,N);
Method(saveChanges,void,Protected,N,N);
Method(reviewChanges,void,Protected,N,N);
Method(saveChangesAndReviewNext,void,Protected,N,N);
Method(reviewNext,void,Protected,N,N);
Method(saveToFile,void,Protected,N,N);
Method(saveToFileAndReviewNext,void,Protected,N,N);
Method(doExit,void,Protected,N,N);
Method(access$000,org.jhotdraw.app.View,Public,Y,N);
Method(access$100,java.awt.Component,Public,Y,N);
Parameter(<init>,org.jhotdraw.app.Application,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(getChooser,org.jhotdraw.app.View,);
Parameter(saveToFile,java.net.URI,);
Parameter(saveToFile,org.jhotdraw.gui.URIChooser,);
Parameter(saveToFileAndReviewNext,java.net.URI,);
Parameter(saveToFileAndReviewNext,org.jhotdraw.gui.URIChooser,);
Parameter(access$000,org.jhotdraw.app.action.app.ExitAction,);
Parameter(access$100,org.jhotdraw.app.action.app.ExitAction,);
SuperClass(org.jhotdraw.app.action.AbstractApplicationAction);
Generalization(org.jhotdraw.app.action.AbstractApplicationAction);
Composition(org.jhotdraw.app.View);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,actionPerformed --> doExit,org.jhotdraw.app.action.app.ExitAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,actionPerformed --> reviewChanges,org.jhotdraw.app.action.app.ExitAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,saveChanges --> getChooser,org.jhotdraw.app.action.app.ExitAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,saveChanges --> saveToFile,org.jhotdraw.app.action.app.ExitAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,saveChangesAndReviewNext --> getChooser,org.jhotdraw.app.action.app.ExitAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,saveChangesAndReviewNext --> saveToFileAndReviewNext,org.jhotdraw.app.action.app.ExitAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,reviewNext --> doExit,org.jhotdraw.app.action.app.ExitAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,reviewNext --> reviewChanges,org.jhotdraw.app.action.app.ExitAction,);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction,actionPerformed --> unsavedView,org.jhotdraw.app.action.app.ExitAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction,actionPerformed --> unsavedView,org.jhotdraw.app.action.app.ExitAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction,actionPerformed --> oldFocusOwner,org.jhotdraw.app.action.app.ExitAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction,saveChanges --> unsavedView,org.jhotdraw.app.action.app.ExitAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction,reviewChanges --> unsavedView,org.jhotdraw.app.action.app.ExitAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction,reviewChanges --> oldFocusOwner,org.jhotdraw.app.action.app.ExitAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction,saveChangesAndReviewNext --> unsavedView,org.jhotdraw.app.action.app.ExitAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction,reviewNext --> unsavedView,org.jhotdraw.app.action.app.ExitAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction,saveToFile --> unsavedView,org.jhotdraw.app.action.app.ExitAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction,saveToFileAndReviewNext --> unsavedView,org.jhotdraw.app.action.app.ExitAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction,access$000 --> unsavedView,org.jhotdraw.app.action.app.ExitAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction,access$100 --> oldFocusOwner,org.jhotdraw.app.action.app.ExitAction,READ);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,<init> --> <init>,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,actionPerformed --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,actionPerformed --> isEnabled,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,actionPerformed --> setEnabled,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,actionPerformed --> views,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,actionPerformed --> hasUnsavedChanges,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,actionPerformed --> isEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,actionPerformed --> getURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,actionPerformed --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,actionPerformed --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,actionPerformed --> setEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,actionPerformed --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,actionPerformed --> getName,org.jhotdraw.net.URIUtil,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,actionPerformed --> getFormatted,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,actionPerformed --> <init>,org.jhotdraw.app.action.app.ExitAction$1,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,actionPerformed --> showSheet,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,actionPerformed --> getComponent,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,getChooser --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,getChooser --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,getChooser --> getModel,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,getChooser --> createSaveChooser,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,saveChanges --> getURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,saveChanges --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,saveChanges --> <init>,org.jhotdraw.app.action.app.ExitAction$2,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,saveChanges --> showSaveSheet$2,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,reviewChanges --> isEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,reviewChanges --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,reviewChanges --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,reviewChanges --> setEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,reviewChanges --> getURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,reviewChanges --> getTitle,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,reviewChanges --> getName,org.jhotdraw.net.URIUtil,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,reviewChanges --> getFormatted,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,reviewChanges --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,reviewChanges --> <init>,org.jhotdraw.app.action.app.ExitAction$3,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,reviewChanges --> showSheet,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,reviewChanges --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,reviewChanges --> setEnabled,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,saveChangesAndReviewNext --> getURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,saveChangesAndReviewNext --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,saveChangesAndReviewNext --> <init>,org.jhotdraw.app.action.app.ExitAction$4,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,saveChangesAndReviewNext --> showSaveSheet$2,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,reviewNext --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,reviewNext --> views,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,reviewNext --> hasUnsavedChanges,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,reviewNext --> isEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,reviewNext --> setEnabled,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,saveToFile --> <init>,org.jhotdraw.app.action.app.ExitAction$5,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,saveToFile --> execute,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,saveToFileAndReviewNext --> <init>,org.jhotdraw.app.action.app.ExitAction$6,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,saveToFileAndReviewNext --> execute,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,doExit --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction,doExit --> destroy,org.jhotdraw.app.Application,);
EndClass 33
StartClass 34
Class(org.jhotdraw.app.OSXApplication$FrameHandler,N,N,NA);
Attribute(frame,javax.swing.JFrame,Private,N,N,);
Attribute(view,org.jhotdraw.app.View,Private,N,N,);
Attribute(this$0,org.jhotdraw.app.OSXApplication,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(propertyChange,void,Public,N,N);
Method(windowClosing,void,Public,N,N);
Method(windowClosed,void,Public,N,N);
Method(windowIconified,void,Public,N,N);
Method(windowDeiconified,void,Public,N,N);
Method(dispose,void,Public,N,N);
Method(windowGainedFocus,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.OSXApplication,);
Parameter(<init>,javax.swing.JFrame,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Parameter(windowClosing,java.awt.event.WindowEvent,);
Parameter(windowClosed,java.awt.event.WindowEvent,);
Parameter(windowIconified,java.awt.event.WindowEvent,);
Parameter(windowDeiconified,java.awt.event.WindowEvent,);
Parameter(windowGainedFocus,java.awt.event.WindowEvent,);
Realization(org.jhotdraw.app.Disposable);
Composition(org.jhotdraw.app.View);
Composition(org.jhotdraw.app.OSXApplication);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$FrameHandler,<init> --> this$0,org.jhotdraw.app.OSXApplication$FrameHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$FrameHandler,<init> --> frame,org.jhotdraw.app.OSXApplication$FrameHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$FrameHandler,<init> --> view,org.jhotdraw.app.OSXApplication$FrameHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$FrameHandler,propertyChange --> frame,org.jhotdraw.app.OSXApplication$FrameHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$FrameHandler,propertyChange --> view,org.jhotdraw.app.OSXApplication$FrameHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$FrameHandler,propertyChange --> this$0,org.jhotdraw.app.OSXApplication$FrameHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$FrameHandler,windowClosing --> this$0,org.jhotdraw.app.OSXApplication$FrameHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$FrameHandler,windowClosing --> view,org.jhotdraw.app.OSXApplication$FrameHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$FrameHandler,windowIconified --> view,org.jhotdraw.app.OSXApplication$FrameHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$FrameHandler,windowIconified --> this$0,org.jhotdraw.app.OSXApplication$FrameHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$FrameHandler,windowDeiconified --> view,org.jhotdraw.app.OSXApplication$FrameHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$FrameHandler,dispose --> frame,org.jhotdraw.app.OSXApplication$FrameHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$FrameHandler,dispose --> view,org.jhotdraw.app.OSXApplication$FrameHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$FrameHandler,windowGainedFocus --> this$0,org.jhotdraw.app.OSXApplication$FrameHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$FrameHandler,windowGainedFocus --> view,org.jhotdraw.app.OSXApplication$FrameHandler,READ);
Call(METHOD,org.jhotdraw.app.OSXApplication$FrameHandler,<init> --> addPropertyChangeListener,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.OSXApplication$FrameHandler,<init> --> addDisposable,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.OSXApplication$FrameHandler,propertyChange --> hasUnsavedChanges,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.OSXApplication$FrameHandler,propertyChange --> updateViewTitle,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication$FrameHandler,windowClosing --> getAction,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication$FrameHandler,windowIconified --> getActiveView,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication$FrameHandler,windowIconified --> setActiveView,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication$FrameHandler,windowIconified --> stop,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.OSXApplication$FrameHandler,windowDeiconified --> start,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.OSXApplication$FrameHandler,dispose --> removePropertyChangeListener,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.OSXApplication$FrameHandler,windowGainedFocus --> setActiveView,org.jhotdraw.app.AbstractApplication,);
EndClass 34
StartClass 35
Class(org.jhotdraw.app.OSXApplication$1,N,N,NA);
Attribute(val$paletteActions,java.util.LinkedList,Public,N,Y,);
Attribute(this$0,org.jhotdraw.app.OSXApplication,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(construct,java.util.LinkedList,Public,N,N);
Method(done,void,Protected,N,N);
Method(done$2,void,Protected,N,N);
Method(construct$2,java.lang.Object,Public,N,N);
Parameter(<init>,org.jhotdraw.app.OSXApplication,);
Parameter(<init>,java.util.LinkedList,);
Parameter(done,java.util.LinkedList,javax.swing.JFrame);
Parameter(done$2,java.lang.Object,);
SuperClass(org.jhotdraw.gui.Worker);
Generalization(org.jhotdraw.gui.Worker);
Composition(org.jhotdraw.app.OSXApplication);
Call(METHOD,org.jhotdraw.app.OSXApplication$1,done$2 --> done,org.jhotdraw.app.OSXApplication$1,);
Call(METHOD,org.jhotdraw.app.OSXApplication$1,construct$2 --> construct,org.jhotdraw.app.OSXApplication$1,);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$1,<init> --> this$0,org.jhotdraw.app.OSXApplication$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$1,<init> --> val$paletteActions,org.jhotdraw.app.OSXApplication$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$1,construct --> this$0,org.jhotdraw.app.OSXApplication$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$1,construct --> val$paletteActions,org.jhotdraw.app.OSXApplication$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.OSXApplication$1,done --> this$0,org.jhotdraw.app.OSXApplication$1,READ);
Call(METHOD,org.jhotdraw.app.OSXApplication$1,<init> --> <init>,org.jhotdraw.gui.Worker,);
Call(METHOD,org.jhotdraw.app.OSXApplication$1,construct --> getModel,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication$1,construct --> createToolBars,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.OSXApplication$1,construct --> createMenuBar,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication$1,construct --> access$000,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication$1,construct --> installPalettePrefsHandler$2,org.jhotdraw.util.prefs.PreferencesUtil,);
Call(METHOD,org.jhotdraw.app.OSXApplication$1,construct --> <init>,org.jhotdraw.app.action.window.TogglePaletteAction,);
Call(METHOD,org.jhotdraw.app.OSXApplication$1,construct --> addPalette,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.app.OSXApplication$1,construct --> putValue,org.jhotdraw.app.action.window.TogglePaletteAction,);
Call(METHOD,org.jhotdraw.app.OSXApplication$1,done --> access$100,org.jhotdraw.app.OSXApplication,);
EndClass 35
StartClass 36
Class(org.jhotdraw.app.DefaultApplicationModel,N,N,Public);
Attribute(menuBuilder,org.jhotdraw.app.MenuBuilder,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(initView,void,Public,N,N);
Method(createActionMap,javax.swing.ActionMap,Public,N,N);
Method(createToolBars,java.util.List,Public,N,N);
Method(createMenuBuilder,org.jhotdraw.app.MenuBuilder,Protected,N,N);
Method(getMenuBuilder,org.jhotdraw.app.MenuBuilder,Public,N,N);
Method(setMenuBuilder,void,Public,N,N);
Parameter(initView,org.jhotdraw.app.Application,);
Parameter(initView,org.jhotdraw.app.View,);
Parameter(createActionMap,org.jhotdraw.app.Application,);
Parameter(createActionMap,org.jhotdraw.app.View,);
Parameter(createToolBars,org.jhotdraw.app.Application,javax.swing.JToolBar);
Parameter(createToolBars,org.jhotdraw.app.View,);
Parameter(setMenuBuilder,org.jhotdraw.app.MenuBuilder,);
SuperClass(org.jhotdraw.app.AbstractApplicationModel);
SuperClass(org.jhotdraw.beans.AbstractBean);
SubClass(org.jhotdraw.samples.draw.DrawApplicationModel);
Generalization(org.jhotdraw.app.AbstractApplicationModel);
Composition(org.jhotdraw.app.MenuBuilder);
Call(METHOD,org.jhotdraw.app.DefaultApplicationModel,getMenuBuilder --> createMenuBuilder,org.jhotdraw.app.DefaultApplicationModel,);
Call(ATTRIBUTE,org.jhotdraw.app.DefaultApplicationModel,getMenuBuilder --> menuBuilder,org.jhotdraw.app.DefaultApplicationModel,READ);
Call(ATTRIBUTE,org.jhotdraw.app.DefaultApplicationModel,getMenuBuilder --> menuBuilder,org.jhotdraw.app.DefaultApplicationModel,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.DefaultApplicationModel,setMenuBuilder --> menuBuilder,org.jhotdraw.app.DefaultApplicationModel,WRITE);
Call(METHOD,org.jhotdraw.app.DefaultApplicationModel,<init> --> <init>,org.jhotdraw.app.AbstractApplicationModel,);
Call(METHOD,org.jhotdraw.app.DefaultApplicationModel,createActionMap --> <init>,org.jhotdraw.app.action.file.NewFileAction,);
Call(METHOD,org.jhotdraw.app.DefaultApplicationModel,createActionMap --> <init>,org.jhotdraw.app.action.file.OpenFileAction,);
Call(METHOD,org.jhotdraw.app.DefaultApplicationModel,createActionMap --> <init>,org.jhotdraw.app.action.file.SaveFileAction,);
Call(METHOD,org.jhotdraw.app.DefaultApplicationModel,createActionMap --> <init>,org.jhotdraw.app.action.file.SaveFileAsAction,);
Call(METHOD,org.jhotdraw.app.DefaultApplicationModel,createActionMap --> <init>,org.jhotdraw.app.action.file.CloseFileAction,);
Call(METHOD,org.jhotdraw.app.DefaultApplicationModel,createActionMap --> <init>,org.jhotdraw.app.action.edit.UndoAction,);
Call(METHOD,org.jhotdraw.app.DefaultApplicationModel,createActionMap --> <init>,org.jhotdraw.app.action.edit.RedoAction,);
Call(METHOD,org.jhotdraw.app.DefaultApplicationModel,createActionMap --> <init>,org.jhotdraw.app.action.edit.CutAction,);
Call(METHOD,org.jhotdraw.app.DefaultApplicationModel,createActionMap --> <init>,org.jhotdraw.app.action.edit.CopyAction,);
Call(METHOD,org.jhotdraw.app.DefaultApplicationModel,createActionMap --> <init>,org.jhotdraw.app.action.edit.PasteAction,);
Call(METHOD,org.jhotdraw.app.DefaultApplicationModel,createActionMap --> <init>,org.jhotdraw.app.action.edit.DeleteAction,);
Call(METHOD,org.jhotdraw.app.DefaultApplicationModel,createActionMap --> <init>,org.jhotdraw.app.action.edit.DuplicateAction,);
Call(METHOD,org.jhotdraw.app.DefaultApplicationModel,createActionMap --> <init>,org.jhotdraw.app.action.edit.SelectAllAction,);
Call(METHOD,org.jhotdraw.app.DefaultApplicationModel,createActionMap --> <init>,org.jhotdraw.app.action.edit.ClearSelectionAction,);
Call(METHOD,org.jhotdraw.app.DefaultApplicationModel,createMenuBuilder --> <init>,org.jhotdraw.app.DefaultMenuBuilder,);
EndClass 36
StartClass 37
Class(org.jhotdraw.draw.DefaultDrawingEditor,N,N,Public);
Attribute(defaultAttributes,java.util.HashMap,Private,N,N,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Attribute(handleAttributes,java.util.HashMap,Private,N,N,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Attribute(tool,org.jhotdraw.draw.tool.Tool,Private,N,N,);
Attribute(views,java.util.HashSet,Private,N,N,org.jhotdraw.draw.DrawingView);
Attribute(activeView,org.jhotdraw.draw.DrawingView,Private,N,N,);
Attribute(isEnabled,boolean,Private,N,N,);
Attribute(toolHandler,org.jhotdraw.draw.DefaultDrawingEditor$ToolHandler,Private,N,N,);
Attribute(inputMap,javax.swing.InputMap,Private,N,N,);
Attribute(actionMap,javax.swing.ActionMap,Private,N,N,);
Attribute(focusHandler,java.awt.event.FocusListener,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setTool,void,Public,N,N);
Method(setActiveView,void,Public,N,N);
Method(getTool,org.jhotdraw.draw.tool.Tool,Public,N,N);
Method(getActiveView,org.jhotdraw.draw.DrawingView,Public,N,N);
Method(updateActiveView,void,Private,N,N);
Method(applyDefaultAttributesTo,void,Public,N,N);
Method(getDefaultAttribute,java.lang.Object,Public,N,N);
Method(setDefaultAttribute,void,Public,N,N);
Method(remove,void,Public,N,N);
Method(add,void,Public,N,N);
Method(setCursor,void,Public,N,N);
Method(getDrawingViews,java.util.Collection,Public,N,N);
Method(findView,org.jhotdraw.draw.DrawingView,Public,N,N);
Method(setEnabled,void,Public,N,N);
Method(isEnabled,boolean,Public,N,N);
Method(getDefaultAttributes,java.util.Map,Public,N,N);
Method(setHandleAttribute,void,Public,N,N);
Method(getHandleAttribute,java.lang.Object,Public,N,N);
Method(setInputMap,void,Public,N,N);
Method(getInputMap,javax.swing.InputMap,Public,N,N);
Method(setActionMap,void,Public,N,N);
Method(getActionMap,javax.swing.ActionMap,Public,N,N);
Method(createInputMap,javax.swing.InputMap,Protected,N,N);
Method(createActionMap,javax.swing.ActionMap,Protected,N,N);
Method(access$000,java.util.HashSet,Public,Y,N);
Parameter(setTool,org.jhotdraw.draw.tool.Tool,);
Parameter(setActiveView,org.jhotdraw.draw.DrawingView,);
Parameter(applyDefaultAttributesTo,org.jhotdraw.draw.Figure,);
Parameter(getDefaultAttribute,org.jhotdraw.draw.AttributeKey,);
Parameter(setDefaultAttribute,org.jhotdraw.draw.AttributeKey,);
Parameter(setDefaultAttribute,java.lang.Object,);
Parameter(remove,org.jhotdraw.draw.DrawingView,);
Parameter(add,org.jhotdraw.draw.DrawingView,);
Parameter(setCursor,java.awt.Cursor,);
Parameter(findView,java.awt.Container,);
Parameter(setEnabled,boolean,);
Parameter(setHandleAttribute,org.jhotdraw.draw.AttributeKey,);
Parameter(setHandleAttribute,java.lang.Object,);
Parameter(getHandleAttribute,org.jhotdraw.draw.AttributeKey,);
Parameter(setInputMap,javax.swing.InputMap,);
Parameter(setActionMap,javax.swing.ActionMap,);
Parameter(access$000,org.jhotdraw.draw.DefaultDrawingEditor,);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.beans.AbstractBean);
Realization(org.jhotdraw.draw.DrawingEditor);
Composition(org.jhotdraw.draw.tool.Tool);
Composition(org.jhotdraw.draw.DrawingView);
Composition(org.jhotdraw.draw.DefaultDrawingEditor$ToolHandler);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,<init> --> setDefaultAttribute,org.jhotdraw.draw.DefaultDrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,<init> --> createInputMap,org.jhotdraw.draw.DefaultDrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,<init> --> createActionMap,org.jhotdraw.draw.DefaultDrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,updateActiveView --> setActiveView,org.jhotdraw.draw.DefaultDrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,remove --> updateActiveView,org.jhotdraw.draw.DefaultDrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,add --> updateActiveView,org.jhotdraw.draw.DefaultDrawingEditor,);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,<init> --> defaultAttributes,org.jhotdraw.draw.DefaultDrawingEditor,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,<init> --> handleAttributes,org.jhotdraw.draw.DefaultDrawingEditor,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,<init> --> isEnabled,org.jhotdraw.draw.DefaultDrawingEditor,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,<init> --> focusHandler,org.jhotdraw.draw.DefaultDrawingEditor,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,<init> --> toolHandler,org.jhotdraw.draw.DefaultDrawingEditor,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,<init> --> views,org.jhotdraw.draw.DefaultDrawingEditor,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,<init> --> inputMap,org.jhotdraw.draw.DefaultDrawingEditor,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,<init> --> actionMap,org.jhotdraw.draw.DefaultDrawingEditor,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,setTool --> tool,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,setTool --> views,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,setTool --> toolHandler,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,setTool --> tool,org.jhotdraw.draw.DefaultDrawingEditor,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,setActiveView --> activeView,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,setActiveView --> activeView,org.jhotdraw.draw.DefaultDrawingEditor,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,getTool --> tool,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,getActiveView --> activeView,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,updateActiveView --> views,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,applyDefaultAttributesTo --> defaultAttributes,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,getDefaultAttribute --> defaultAttributes,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,setDefaultAttribute --> defaultAttributes,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,remove --> focusHandler,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,remove --> views,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,remove --> tool,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,remove --> activeView,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,add --> views,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,add --> focusHandler,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,add --> tool,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,getDrawingViews --> views,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,findView --> views,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,setEnabled --> isEnabled,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,setEnabled --> isEnabled,org.jhotdraw.draw.DefaultDrawingEditor,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,isEnabled --> isEnabled,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,getDefaultAttributes --> defaultAttributes,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,setHandleAttribute --> handleAttributes,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,getHandleAttribute --> handleAttributes,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,setInputMap --> inputMap,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,setInputMap --> inputMap,org.jhotdraw.draw.DefaultDrawingEditor,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,getInputMap --> inputMap,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,setActionMap --> actionMap,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,setActionMap --> actionMap,org.jhotdraw.draw.DefaultDrawingEditor,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,getActionMap --> actionMap,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,access$000 --> views,org.jhotdraw.draw.DefaultDrawingEditor,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,<init> --> FILL_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,<init> --> STROKE_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor,<init> --> TEXT_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,<init> --> <init>,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,<init> --> <init>,org.jhotdraw.draw.DefaultDrawingEditor$1,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,<init> --> <init>$2,org.jhotdraw.draw.DefaultDrawingEditor$ToolHandler,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,setTool --> removeMouseListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,setTool --> removeMouseMotionListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,setTool --> removeKeyListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,setTool --> deactivate,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,setTool --> removeToolListener,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,setTool --> activate,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,setTool --> addMouseListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,setTool --> addMouseMotionListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,setTool --> addKeyListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,setTool --> addToolListener,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,setTool --> firePropertyChange$3,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,setActiveView --> firePropertyChange$3,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,updateActiveView --> getComponent,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,applyDefaultAttributesTo --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,getDefaultAttribute --> get$2,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,getDefaultAttribute --> getDefaultValue,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,setDefaultAttribute --> getKey,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,setDefaultAttribute --> firePropertyChange$3,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,remove --> getComponent,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,remove --> removeMouseListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,remove --> removeMouseMotionListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,remove --> removeKeyListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,remove --> removeNotify,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,add --> addNotify,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,add --> getComponent,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,add --> addMouseListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,add --> addMouseMotionListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,add --> addKeyListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,findView --> getComponent,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,setEnabled --> firePropertyChange,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,getHandleAttribute --> get$2,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,getHandleAttribute --> getDefaultValue,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,setInputMap --> firePropertyChange$3,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,setActionMap --> firePropertyChange$3,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,createActionMap --> <init>,org.jhotdraw.app.action.edit.DeleteAction,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,createActionMap --> <init>,org.jhotdraw.app.action.edit.SelectAllAction,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,createActionMap --> <init>,org.jhotdraw.draw.action.IncreaseHandleDetailLevelAction,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,createActionMap --> <init>,org.jhotdraw.draw.action.MoveAction$East,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,createActionMap --> <init>,org.jhotdraw.draw.action.MoveAction$West,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,createActionMap --> <init>,org.jhotdraw.draw.action.MoveAction$North,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,createActionMap --> <init>,org.jhotdraw.draw.action.MoveAction$South,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,createActionMap --> <init>,org.jhotdraw.draw.action.MoveConstrainedAction$East,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,createActionMap --> <init>,org.jhotdraw.draw.action.MoveConstrainedAction$West,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,createActionMap --> <init>,org.jhotdraw.draw.action.MoveConstrainedAction$North,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,createActionMap --> <init>,org.jhotdraw.draw.action.MoveConstrainedAction$South,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,createActionMap --> <init>,org.jhotdraw.app.action.edit.CutAction,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,createActionMap --> <init>,org.jhotdraw.app.action.edit.CopyAction,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor,createActionMap --> <init>,org.jhotdraw.app.action.edit.PasteAction,);
EndClass 37
StartClass 38
Class(org.jhotdraw.draw.DrawingEditor,Y,Y,Public);
Attribute(ACTIVE_VIEW_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(TOOL_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(INPUT_MAP_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(ACTION_MAP_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(DEFAULT_ATTRIBUTE_PROPERTY_PREFIX,java.lang.String,Public,Y,Y,);
Method(add,void,Public,N,Y);
Method(remove,void,Public,N,Y);
Method(getDrawingViews,java.util.Collection,Public,N,Y);
Method(getActiveView,org.jhotdraw.draw.DrawingView,Public,N,Y);
Method(setActiveView,void,Public,N,Y);
Method(setTool,void,Public,N,Y);
Method(getTool,org.jhotdraw.draw.tool.Tool,Public,N,Y);
Method(setCursor,void,Public,N,Y);
Method(findView,org.jhotdraw.draw.DrawingView,Public,N,Y);
Method(setDefaultAttribute,void,Public,N,Y);
Method(getDefaultAttribute,java.lang.Object,Public,N,Y);
Method(applyDefaultAttributesTo,void,Public,N,Y);
Method(getDefaultAttributes,java.util.Map,Public,N,Y);
Method(setHandleAttribute,void,Public,N,Y);
Method(getHandleAttribute,java.lang.Object,Public,N,Y);
Method(setInputMap,void,Public,N,Y);
Method(getInputMap,javax.swing.InputMap,Public,N,Y);
Method(setActionMap,void,Public,N,Y);
Method(getActionMap,javax.swing.ActionMap,Public,N,Y);
Method(setEnabled,void,Public,N,Y);
Method(isEnabled,boolean,Public,N,Y);
Method(addPropertyChangeListener,void,Public,N,Y);
Method(removePropertyChangeListener,void,Public,N,Y);
Parameter(add,org.jhotdraw.draw.DrawingView,);
Parameter(remove,org.jhotdraw.draw.DrawingView,);
Parameter(setActiveView,org.jhotdraw.draw.DrawingView,);
Parameter(setTool,org.jhotdraw.draw.tool.Tool,);
Parameter(setCursor,java.awt.Cursor,);
Parameter(findView,java.awt.Container,);
Parameter(setDefaultAttribute,org.jhotdraw.draw.AttributeKey,);
Parameter(setDefaultAttribute,java.lang.Object,);
Parameter(getDefaultAttribute,org.jhotdraw.draw.AttributeKey,);
Parameter(applyDefaultAttributesTo,org.jhotdraw.draw.Figure,);
Parameter(setHandleAttribute,org.jhotdraw.draw.AttributeKey,);
Parameter(setHandleAttribute,java.lang.Object,);
Parameter(getHandleAttribute,org.jhotdraw.draw.AttributeKey,);
Parameter(setInputMap,javax.swing.InputMap,);
Parameter(setActionMap,javax.swing.ActionMap,);
Parameter(setEnabled,boolean,);
Parameter(addPropertyChangeListener,java.beans.PropertyChangeListener,);
Parameter(removePropertyChangeListener,java.beans.PropertyChangeListener,);
EndClass 38
StartClass 39
Class(org.jhotdraw.draw.AbstractAttributedFigure,N,Y,Public);
Attribute(attributes,java.util.HashMap,Private,N,N,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Attribute(forbiddenAttributes,java.util.HashSet,Private,N,N,org.jhotdraw.draw.AttributeKey);
Method(<init>,void,Public,N,N);
Method(setAttributeEnabled,void,Public,N,N);
Method(isAttributeEnabled,boolean,Public,N,N);
Method(setAttributes,void,Public,N,N);
Method(getAttributes,java.util.Map,Public,N,N);
Method(getAttributesRestoreData,java.lang.Object,Public,N,N);
Method(restoreAttributesTo,void,Public,N,N);
Method(set,void,Public,N,N);
Method(get,java.lang.Object,Public,N,N);
Method(draw,void,Public,N,N);
Method(getStroke,java.awt.Stroke,Public,N,N);
Method(getStrokeMiterLimitFactor,double,Public,N,N);
Method(getDrawingArea,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(drawFill,void,Protected,N,Y);
Method(drawStroke,void,Protected,N,Y);
Method(drawText,void,Protected,N,N);
Method(clone,org.jhotdraw.draw.AbstractAttributedFigure,Public,N,N);
Method(writeAttributes,void,Protected,N,N);
Method(readAttributes,void,Protected,N,N);
Method(getAttributeKey,org.jhotdraw.draw.AttributeKey,Protected,N,N);
Method(applyAttributesTo,void,Protected,N,N);
Method(write,void,Public,N,N);
Method(read,void,Public,N,N);
Method(removeAttribute,void,Public,N,N);
Method(hasAttribute,boolean,Public,N,N);
Method(clone$2,org.jhotdraw.draw.AbstractFigure,Public,N,N);
Method(clone$3,org.jhotdraw.draw.Figure,Public,N,N);
Method(clone$4,org.jhotdraw.beans.AbstractBean,Public,N,N);
Method(clone$5,java.lang.Object,Public,N,N);
Parameter(setAttributeEnabled,org.jhotdraw.draw.AttributeKey,);
Parameter(setAttributeEnabled,boolean,);
Parameter(isAttributeEnabled,org.jhotdraw.draw.AttributeKey,);
Parameter(setAttributes,java.util.Map,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(restoreAttributesTo,java.lang.Object,);
Parameter(set,org.jhotdraw.draw.AttributeKey,);
Parameter(set,java.lang.Object,);
Parameter(get,org.jhotdraw.draw.AttributeKey,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(drawFill,java.awt.Graphics2D,);
Parameter(drawStroke,java.awt.Graphics2D,);
Parameter(drawText,java.awt.Graphics2D,);
Parameter(writeAttributes,org.jhotdraw.xml.DOMOutput,);
Parameter(readAttributes,org.jhotdraw.xml.DOMInput,);
Parameter(getAttributeKey,java.lang.String,);
Parameter(applyAttributesTo,org.jhotdraw.draw.Figure,);
Parameter(write,org.jhotdraw.xml.DOMOutput,);
Parameter(read,org.jhotdraw.xml.DOMInput,);
Parameter(removeAttribute,org.jhotdraw.draw.AttributeKey,);
Parameter(hasAttribute,org.jhotdraw.draw.AttributeKey,);
SuperClass(org.jhotdraw.draw.AbstractFigure);
SuperClass(org.jhotdraw.beans.AbstractBean);
SubClass(org.jhotdraw.draw.RoundRectangleFigure);
SubClass(org.jhotdraw.draw.RectangleFigure);
SubClass(org.jhotdraw.draw.EllipseFigure);
SubClass(org.jhotdraw.draw.DiamondFigure);
SubClass(org.jhotdraw.draw.TriangleFigure);
SubClass(org.jhotdraw.draw.LineConnectionFigure);
SubClass(org.jhotdraw.draw.LineFigure);
SubClass(org.jhotdraw.draw.BezierFigure);
SubClass(org.jhotdraw.draw.TextAreaFigure);
SubClass(org.jhotdraw.draw.TextFigure);
SubClass(org.jhotdraw.draw.ImageFigure);
SubClass(org.jhotdraw.draw.AbstractAttributedDecoratedFigure);
Generalization(org.jhotdraw.draw.AbstractFigure);
Realization(org.jhotdraw.xml.DOMStorable);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,setAttributes --> set,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,getAttributesRestoreData --> getAttributes,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,restoreAttributesTo --> setAttributes,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,draw --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,draw --> drawFill,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,draw --> drawStroke,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,draw --> drawText,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,getStrokeMiterLimitFactor --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,getDrawingArea --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,writeAttributes --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,readAttributes --> getAttributeKey,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,readAttributes --> set,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,write --> writeAttributes,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,read --> readAttributes,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,removeAttribute --> hasAttribute,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,removeAttribute --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,clone$2 --> clone,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,clone$3 --> clone,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,clone$4 --> clone,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,clone$5 --> clone,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,<init> --> attributes,org.jhotdraw.draw.AbstractAttributedFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,setAttributeEnabled --> forbiddenAttributes,org.jhotdraw.draw.AbstractAttributedFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,setAttributeEnabled --> forbiddenAttributes,org.jhotdraw.draw.AbstractAttributedFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,isAttributeEnabled --> forbiddenAttributes,org.jhotdraw.draw.AbstractAttributedFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,getAttributes --> attributes,org.jhotdraw.draw.AbstractAttributedFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,restoreAttributesTo --> attributes,org.jhotdraw.draw.AbstractAttributedFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,set --> forbiddenAttributes,org.jhotdraw.draw.AbstractAttributedFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,set --> attributes,org.jhotdraw.draw.AbstractAttributedFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,get --> attributes,org.jhotdraw.draw.AbstractAttributedFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,clone --> attributes,org.jhotdraw.draw.AbstractAttributedFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,clone --> forbiddenAttributes,org.jhotdraw.draw.AbstractAttributedFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,clone --> attributes,org.jhotdraw.draw.AbstractAttributedFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,clone --> forbiddenAttributes,org.jhotdraw.draw.AbstractAttributedFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,writeAttributes --> attributes,org.jhotdraw.draw.AbstractAttributedFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,writeAttributes --> forbiddenAttributes,org.jhotdraw.draw.AbstractAttributedFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,readAttributes --> forbiddenAttributes,org.jhotdraw.draw.AbstractAttributedFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,applyAttributesTo --> attributes,org.jhotdraw.draw.AbstractAttributedFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,removeAttribute --> attributes,org.jhotdraw.draw.AbstractAttributedFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,hasAttribute --> attributes,org.jhotdraw.draw.AbstractAttributedFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,draw --> FILL_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,draw --> STROKE_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,draw --> STROKE_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,draw --> TEXT_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,draw --> TEXT_SHADOW_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,draw --> TEXT_SHADOW_OFFSET,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,draw --> width,org.jhotdraw.geom.Dimension2DDouble,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,draw --> height,org.jhotdraw.geom.Dimension2DDouble,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,getStrokeMiterLimitFactor --> STROKE_MITER_LIMIT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,getDrawingArea --> STROKE_JOIN,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,getDrawingArea --> STROKE_MITER_LIMIT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,getDrawingArea --> STROKE_CAP,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedFigure,getAttributeKey --> supportedAttributeMap,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,<init> --> <init>,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,set --> put,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,set --> fireAttributeChanged,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,get --> get$2,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,draw --> getStroke,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,getStroke --> getStroke,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,getDrawingArea --> getStrokeTotalWidth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,getDrawingArea --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,getDrawingArea --> grow,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,clone --> clone,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,writeAttributes --> getPrototype,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,writeAttributes --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,writeAttributes --> openElement,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,writeAttributes --> getKey,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,writeAttributes --> writeObject,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,writeAttributes --> closeElement,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,readAttributes --> getElementCount$2,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,readAttributes --> openElement$2,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,readAttributes --> getElementCount,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,readAttributes --> openElement,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,readAttributes --> getTagName,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,readAttributes --> readObject,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,readAttributes --> isAssignable,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,readAttributes --> closeElement,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,applyAttributesTo --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,write --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,write --> addAttribute$9,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,read --> getAttribute$3,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,read --> setBounds$2,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,removeAttribute --> getDefaultValue,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedFigure,removeAttribute --> fireAttributeChanged,org.jhotdraw.draw.AbstractFigure,);
EndClass 39
StartClass 40
Class(org.jhotdraw.draw.RoundRectangleFigure,N,N,Public);
Attribute(ARC_WIDTH_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(ARC_HEIGHT_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(roundrect,java.awt.geom.RoundRectangle2D$Double,Protected,N,N,);
Attribute(DEFAULT_ARC,double,Protected,Y,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(drawFill,void,Protected,N,N);
Method(drawStroke,void,Protected,N,N);
Method(getBounds,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(getDrawingArea,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(getArcWidth,double,Public,N,N);
Method(getArcHeight,double,Public,N,N);
Method(setArcWidth,void,Public,N,N);
Method(setArcHeight,void,Public,N,N);
Method(setArc,void,Public,N,N);
Method(contains,boolean,Public,N,N);
Method(setBounds,void,Public,N,N);
Method(transform,void,Public,N,N);
Method(createHandles,java.util.Collection,Public,N,N);
Method(restoreTransformTo,void,Public,N,N);
Method(getTransformRestoreData,java.lang.Object,Public,N,N);
Method(findConnector,org.jhotdraw.draw.connector.Connector,Public,N,N);
Method(findCompatibleConnector,org.jhotdraw.draw.connector.Connector,Public,N,N);
Method(clone,org.jhotdraw.draw.RoundRectangleFigure,Public,N,N);
Method(read,void,Public,N,N);
Method(write,void,Public,N,N);
Method(clone$2,org.jhotdraw.draw.AbstractAttributedFigure,Public,N,N);
Method(clone$3,org.jhotdraw.draw.AbstractFigure,Public,N,N);
Method(clone$4,org.jhotdraw.draw.Figure,Public,N,N);
Method(clone$5,org.jhotdraw.beans.AbstractBean,Public,N,N);
Method(clone$6,java.lang.Object,Public,N,N);
Parameter(<init>$2,double,);
Parameter(<init>$2,double,);
Parameter(<init>$2,double,);
Parameter(<init>$2,double,);
Parameter(drawFill,java.awt.Graphics2D,);
Parameter(drawStroke,java.awt.Graphics2D,);
Parameter(setArcWidth,double,);
Parameter(setArcHeight,double,);
Parameter(setArc,double,);
Parameter(setArc,double,);
Parameter(contains,java.awt.geom.Point2D$Double,);
Parameter(setBounds,java.awt.geom.Point2D$Double,);
Parameter(setBounds,java.awt.geom.Point2D$Double,);
Parameter(transform,java.awt.geom.AffineTransform,);
Parameter(createHandles,int,org.jhotdraw.draw.handle.Handle);
Parameter(restoreTransformTo,java.lang.Object,);
Parameter(findConnector,java.awt.geom.Point2D$Double,);
Parameter(findConnector,org.jhotdraw.draw.ConnectionFigure,);
Parameter(findCompatibleConnector,org.jhotdraw.draw.connector.Connector,);
Parameter(findCompatibleConnector,boolean,);
Parameter(read,org.jhotdraw.xml.DOMInput,);
Parameter(write,org.jhotdraw.xml.DOMOutput,);
SuperClass(org.jhotdraw.draw.AbstractAttributedFigure);
SuperClass(org.jhotdraw.draw.AbstractFigure);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.draw.AbstractAttributedFigure);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,<init> --> <init>$2,org.jhotdraw.draw.RoundRectangleFigure,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,setArc --> setArcWidth,org.jhotdraw.draw.RoundRectangleFigure,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,setArc --> setArcHeight,org.jhotdraw.draw.RoundRectangleFigure,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,transform --> setBounds,org.jhotdraw.draw.RoundRectangleFigure,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,clone$2 --> clone,org.jhotdraw.draw.RoundRectangleFigure,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,clone$3 --> clone,org.jhotdraw.draw.RoundRectangleFigure,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,clone$4 --> clone,org.jhotdraw.draw.RoundRectangleFigure,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,clone$5 --> clone,org.jhotdraw.draw.RoundRectangleFigure,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,clone$6 --> clone,org.jhotdraw.draw.RoundRectangleFigure,);
Call(ATTRIBUTE,org.jhotdraw.draw.RoundRectangleFigure,<init>$2 --> roundrect,org.jhotdraw.draw.RoundRectangleFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.RoundRectangleFigure,drawFill --> roundrect,org.jhotdraw.draw.RoundRectangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RoundRectangleFigure,drawStroke --> roundrect,org.jhotdraw.draw.RoundRectangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RoundRectangleFigure,getBounds --> roundrect,org.jhotdraw.draw.RoundRectangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RoundRectangleFigure,getDrawingArea --> roundrect,org.jhotdraw.draw.RoundRectangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RoundRectangleFigure,getArcWidth --> roundrect,org.jhotdraw.draw.RoundRectangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RoundRectangleFigure,getArcHeight --> roundrect,org.jhotdraw.draw.RoundRectangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RoundRectangleFigure,setArcWidth --> roundrect,org.jhotdraw.draw.RoundRectangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RoundRectangleFigure,setArcHeight --> roundrect,org.jhotdraw.draw.RoundRectangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RoundRectangleFigure,contains --> roundrect,org.jhotdraw.draw.RoundRectangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RoundRectangleFigure,setBounds --> roundrect,org.jhotdraw.draw.RoundRectangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RoundRectangleFigure,restoreTransformTo --> roundrect,org.jhotdraw.draw.RoundRectangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RoundRectangleFigure,getTransformRestoreData --> roundrect,org.jhotdraw.draw.RoundRectangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RoundRectangleFigure,clone --> roundrect,org.jhotdraw.draw.RoundRectangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RoundRectangleFigure,clone --> roundrect,org.jhotdraw.draw.RoundRectangleFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.RoundRectangleFigure,read --> roundrect,org.jhotdraw.draw.RoundRectangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RoundRectangleFigure,write --> roundrect,org.jhotdraw.draw.RoundRectangleFigure,READ);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,<init>$2 --> <init>,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,drawFill --> getPerpendicularFillGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,drawStroke --> getPerpendicularDrawGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,getDrawingArea --> getPerpendicularHitGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,getDrawingArea --> grow,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,setArcWidth --> firePropertyChange$3,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,setArcHeight --> firePropertyChange$3,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,contains --> getPerpendicularHitGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,transform --> getStartPoint,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,transform --> getEndPoint,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,createHandles --> createHandles,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,createHandles --> <init>,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,findConnector --> <init>$2,org.jhotdraw.draw.connector.ChopRoundRectangleConnector,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,findCompatibleConnector --> <init>$2,org.jhotdraw.draw.connector.ChopRoundRectangleConnector,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,clone --> clone,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,read --> read,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,read --> getAttribute$3,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,write --> write,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.RoundRectangleFigure,write --> addAttribute$9,org.jhotdraw.xml.DOMOutput,);
EndClass 40
StartClass 41
Class(org.jhotdraw.draw.decoration.ArrowTip,N,N,Public);
Attribute(angle,double,Private,N,N,);
Attribute(outerRadius,double,Private,N,N,);
Attribute(innerRadius,double,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(getDecoratorPath,java.awt.geom.Path2D$Double,Protected,N,N);
Method(getDecoratorPathRadius,double,Protected,N,N);
Method(read,void,Public,N,N);
Method(write,void,Public,N,N);
Parameter(<init>$2,double,);
Parameter(<init>$2,double,);
Parameter(<init>$2,double,);
Parameter(<init>$3,double,);
Parameter(<init>$3,double,);
Parameter(<init>$3,double,);
Parameter(<init>$3,boolean,);
Parameter(<init>$3,boolean,);
Parameter(<init>$3,boolean,);
Parameter(getDecoratorPath,org.jhotdraw.draw.Figure,);
Parameter(getDecoratorPathRadius,org.jhotdraw.draw.Figure,);
Parameter(read,org.jhotdraw.xml.DOMInput,);
Parameter(write,org.jhotdraw.xml.DOMOutput,);
SuperClass(org.jhotdraw.draw.decoration.AbstractLineDecoration);
Generalization(org.jhotdraw.draw.decoration.AbstractLineDecoration);
Realization(org.jhotdraw.xml.DOMStorable);
Call(METHOD,org.jhotdraw.draw.decoration.ArrowTip,<init> --> <init>$2,org.jhotdraw.draw.decoration.ArrowTip,);
Call(METHOD,org.jhotdraw.draw.decoration.ArrowTip,<init>$2 --> <init>$3,org.jhotdraw.draw.decoration.ArrowTip,);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.ArrowTip,<init>$3 --> angle,org.jhotdraw.draw.decoration.ArrowTip,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.ArrowTip,<init>$3 --> outerRadius,org.jhotdraw.draw.decoration.ArrowTip,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.ArrowTip,<init>$3 --> innerRadius,org.jhotdraw.draw.decoration.ArrowTip,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.ArrowTip,getDecoratorPath --> outerRadius,org.jhotdraw.draw.decoration.ArrowTip,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.ArrowTip,getDecoratorPath --> angle,org.jhotdraw.draw.decoration.ArrowTip,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.ArrowTip,getDecoratorPath --> innerRadius,org.jhotdraw.draw.decoration.ArrowTip,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.ArrowTip,getDecoratorPathRadius --> innerRadius,org.jhotdraw.draw.decoration.ArrowTip,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.ArrowTip,read --> angle,org.jhotdraw.draw.decoration.ArrowTip,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.ArrowTip,read --> innerRadius,org.jhotdraw.draw.decoration.ArrowTip,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.ArrowTip,read --> outerRadius,org.jhotdraw.draw.decoration.ArrowTip,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.ArrowTip,write --> angle,org.jhotdraw.draw.decoration.ArrowTip,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.ArrowTip,write --> innerRadius,org.jhotdraw.draw.decoration.ArrowTip,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.ArrowTip,write --> outerRadius,org.jhotdraw.draw.decoration.ArrowTip,READ);
Call(METHOD,org.jhotdraw.draw.decoration.ArrowTip,<init>$3 --> <init>,org.jhotdraw.draw.decoration.AbstractLineDecoration,);
Call(METHOD,org.jhotdraw.draw.decoration.ArrowTip,getDecoratorPath --> isStroked,org.jhotdraw.draw.decoration.AbstractLineDecoration,);
Call(METHOD,org.jhotdraw.draw.decoration.ArrowTip,getDecoratorPathRadius --> isStroked,org.jhotdraw.draw.decoration.AbstractLineDecoration,);
Call(METHOD,org.jhotdraw.draw.decoration.ArrowTip,read --> getAttribute$3,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.decoration.ArrowTip,read --> getAttribute$4,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.decoration.ArrowTip,read --> setFilled,org.jhotdraw.draw.decoration.AbstractLineDecoration,);
Call(METHOD,org.jhotdraw.draw.decoration.ArrowTip,read --> setStroked,org.jhotdraw.draw.decoration.AbstractLineDecoration,);
Call(METHOD,org.jhotdraw.draw.decoration.ArrowTip,read --> setSolid,org.jhotdraw.draw.decoration.AbstractLineDecoration,);
Call(METHOD,org.jhotdraw.draw.decoration.ArrowTip,write --> addAttribute$9,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.decoration.ArrowTip,write --> isFilled,org.jhotdraw.draw.decoration.AbstractLineDecoration,);
Call(METHOD,org.jhotdraw.draw.decoration.ArrowTip,write --> addAttribute$5,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.decoration.ArrowTip,write --> isStroked,org.jhotdraw.draw.decoration.AbstractLineDecoration,);
Call(METHOD,org.jhotdraw.draw.decoration.ArrowTip,write --> isSolid,org.jhotdraw.draw.decoration.AbstractLineDecoration,);
EndClass 41
StartClass 42
Class(org.jhotdraw.draw.AttributeKeys,N,N,Public);
Attribute(labels,org.jhotdraw.util.ResourceBundleUtil,Private,Y,Y,);
Attribute(CANVAS_FILL_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(CANVAS_FILL_OPACITY,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.lang.Double);
Attribute(CANVAS_WIDTH,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.lang.Double);
Attribute(CANVAS_HEIGHT,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.lang.Double);
Attribute(FILL_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(PATH_CLOSED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.lang.Boolean);
Attribute(UNCLOSED_PATH_FILLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.lang.Boolean);
Attribute(WINDING_RULE,org.jhotdraw.draw.AttributeKey,Public,Y,Y,org.jhotdraw.draw.AttributeKeys$WindingRule);
Attribute(FILL_UNDER_STROKE,org.jhotdraw.draw.AttributeKey,Public,Y,Y,org.jhotdraw.draw.AttributeKeys$Underfill);
Attribute(STROKE_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(STROKE_WIDTH,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.lang.Double);
Attribute(STROKE_INNER_WIDTH_FACTOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.lang.Double);
Attribute(STROKE_JOIN,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.lang.Integer);
Attribute(STROKE_CAP,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.lang.Integer);
Attribute(STROKE_MITER_LIMIT,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.lang.Double);
Attribute(IS_STROKE_MITER_LIMIT_FACTOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.lang.Boolean);
Attribute(STROKE_DASHES,org.jhotdraw.draw.AttributeKey,Public,Y,Y,);
Attribute(STROKE_DASH_PHASE,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.lang.Double);
Attribute(IS_STROKE_DASH_FACTOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.lang.Boolean);
Attribute(STROKE_TYPE,org.jhotdraw.draw.AttributeKey,Public,Y,Y,org.jhotdraw.draw.AttributeKeys$StrokeType);
Attribute(STROKE_PLACEMENT,org.jhotdraw.draw.AttributeKey,Public,Y,Y,org.jhotdraw.draw.AttributeKeys$StrokePlacement);
Attribute(TEXT,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.lang.String);
Attribute(TEXT_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(TEXT_SHADOW_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(TEXT_SHADOW_OFFSET,org.jhotdraw.draw.AttributeKey,Public,Y,Y,org.jhotdraw.geom.Dimension2DDouble);
Attribute(TEXT_ALIGNMENT,org.jhotdraw.draw.AttributeKey,Public,Y,Y,org.jhotdraw.draw.AttributeKeys$Alignment);
Attribute(FONT_FACE,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Font);
Attribute(FONT_SIZE,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.lang.Double);
Attribute(FONT_BOLD,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.lang.Boolean);
Attribute(FONT_ITALIC,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.lang.Boolean);
Attribute(FONT_UNDERLINE,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.lang.Boolean);
Attribute(BEZIER_PATH_LAYOUTER,org.jhotdraw.draw.AttributeKey,Public,Y,Y,org.jhotdraw.draw.liner.Liner);
Attribute(END_DECORATION,org.jhotdraw.draw.AttributeKey,Public,Y,Y,org.jhotdraw.draw.decoration.LineDecoration);
Attribute(START_DECORATION,org.jhotdraw.draw.AttributeKey,Public,Y,Y,org.jhotdraw.draw.decoration.LineDecoration);
Attribute(DECORATOR_INSETS,org.jhotdraw.draw.AttributeKey,Public,Y,Y,org.jhotdraw.geom.Insets2D$Double);
Attribute(LAYOUT_INSETS,org.jhotdraw.draw.AttributeKey,Public,Y,Y,org.jhotdraw.geom.Insets2D$Double);
Attribute(COMPOSITE_ALIGNMENT,org.jhotdraw.draw.AttributeKey,Public,Y,Y,org.jhotdraw.draw.AttributeKeys$Alignment);
Attribute(CHILD_ALIGNMENT,org.jhotdraw.draw.AttributeKey,Public,Y,Y,org.jhotdraw.draw.AttributeKeys$Alignment);
Attribute(TRANSFORM,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.geom.AffineTransform);
Attribute(ORIENTATION,org.jhotdraw.draw.AttributeKey,Public,Y,Y,org.jhotdraw.draw.AttributeKeys$Orientation);
Attribute(supportedAttributes,java.util.Set,Public,Y,Y,org.jhotdraw.draw.AttributeKey);
Attribute(supportedAttributeMap,java.util.Map,Public,Y,Y,java.lang.String;org.jhotdraw.draw.AttributeKey);
Method(<init>,void,Public,N,N);
Method(getStrokeTotalWidth,double,Public,Y,N);
Method(getStrokeTotalMiterLimit,double,Public,Y,N);
Method(getStroke,java.awt.Stroke,Public,Y,N);
Method(getHitStroke,java.awt.Stroke,Public,Y,N);
Method(getFont,java.awt.Font,Public,Y,N);
Method(getFontStyle,int,Public,Y,N);
Method(getPerpendicularFillGrowth,double,Public,Y,N);
Method(getPerpendicularDrawGrowth,double,Public,Y,N);
Method(getPerpendicularHitGrowth,double,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(getStrokeTotalWidth,org.jhotdraw.draw.Figure,);
Parameter(getStrokeTotalMiterLimit,org.jhotdraw.draw.Figure,);
Parameter(getStroke,org.jhotdraw.draw.Figure,);
Parameter(getHitStroke,org.jhotdraw.draw.Figure,);
Parameter(getFont,org.jhotdraw.draw.Figure,);
Parameter(getFontStyle,org.jhotdraw.draw.Figure,);
Parameter(getPerpendicularFillGrowth,org.jhotdraw.draw.Figure,);
Parameter(getPerpendicularDrawGrowth,org.jhotdraw.draw.Figure,);
Parameter(getPerpendicularHitGrowth,org.jhotdraw.draw.Figure,);
Composition(org.jhotdraw.util.ResourceBundleUtil);
Composition(org.jhotdraw.draw.AttributeKey);
Call(METHOD,org.jhotdraw.draw.AttributeKeys,getStroke --> getStrokeTotalMiterLimit,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.AttributeKeys,getHitStroke --> getStrokeTotalMiterLimit,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.AttributeKeys,getFont --> getFontStyle,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.AttributeKeys,getPerpendicularFillGrowth --> getStrokeTotalWidth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.AttributeKeys,getPerpendicularDrawGrowth --> getStrokeTotalWidth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.AttributeKeys,getPerpendicularHitGrowth --> getPerpendicularFillGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.AttributeKeys,getPerpendicularHitGrowth --> getStrokeTotalWidth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.AttributeKeys,getPerpendicularHitGrowth --> getPerpendicularDrawGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getStrokeTotalWidth --> STROKE_TYPE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getStrokeTotalWidth --> STROKE_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getStrokeTotalWidth --> STROKE_INNER_WIDTH_FACTOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getStrokeTotalMiterLimit --> IS_STROKE_MITER_LIMIT_FACTOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getStrokeTotalMiterLimit --> STROKE_MITER_LIMIT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getStrokeTotalMiterLimit --> STROKE_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getStroke --> STROKE_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getStroke --> IS_STROKE_DASH_FACTOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getStroke --> STROKE_DASH_PHASE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getStroke --> STROKE_DASHES,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getStroke --> STROKE_TYPE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getStroke --> STROKE_CAP,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getStroke --> STROKE_JOIN,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getStroke --> STROKE_INNER_WIDTH_FACTOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getHitStroke --> STROKE_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getHitStroke --> IS_STROKE_DASH_FACTOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getHitStroke --> STROKE_TYPE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getHitStroke --> STROKE_CAP,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getHitStroke --> STROKE_JOIN,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getHitStroke --> STROKE_DASH_PHASE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getHitStroke --> STROKE_INNER_WIDTH_FACTOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getFont --> FONT_FACE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getFont --> FONT_SIZE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getFontStyle --> FONT_BOLD,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getFontStyle --> FONT_ITALIC,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getPerpendicularFillGrowth --> STROKE_PLACEMENT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getPerpendicularFillGrowth --> FILL_UNDER_STROKE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getPerpendicularDrawGrowth --> STROKE_PLACEMENT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getPerpendicularHitGrowth --> STROKE_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> labels,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> FILL_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> FILL_UNDER_STROKE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> STROKE_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> STROKE_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> STROKE_INNER_WIDTH_FACTOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> STROKE_JOIN,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> STROKE_CAP,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> STROKE_MITER_LIMIT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> STROKE_DASHES,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> STROKE_DASH_PHASE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> STROKE_TYPE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> STROKE_PLACEMENT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> TEXT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> TEXT_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> TEXT_SHADOW_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> TEXT_SHADOW_OFFSET,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> TRANSFORM,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> FONT_FACE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> FONT_SIZE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> FONT_BOLD,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> FONT_ITALIC,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> FONT_UNDERLINE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> BEZIER_PATH_LAYOUTER,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> END_DECORATION,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> START_DECORATION,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> DECORATOR_INSETS,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> ORIENTATION,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> WINDING_RULE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> labels,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> CANVAS_FILL_COLOR,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> CANVAS_FILL_OPACITY,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> CANVAS_WIDTH,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> CANVAS_HEIGHT,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> FILL_COLOR,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> PATH_CLOSED,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> UNCLOSED_PATH_FILLED,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> WINDING_RULE,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> FILL_UNDER_STROKE,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> STROKE_COLOR,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> STROKE_WIDTH,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> STROKE_INNER_WIDTH_FACTOR,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> STROKE_JOIN,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> STROKE_CAP,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> STROKE_MITER_LIMIT,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> IS_STROKE_MITER_LIMIT_FACTOR,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> STROKE_DASHES,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> STROKE_DASH_PHASE,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> IS_STROKE_DASH_FACTOR,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> STROKE_TYPE,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> STROKE_PLACEMENT,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> TEXT,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> TEXT_COLOR,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> TEXT_SHADOW_COLOR,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> TEXT_SHADOW_OFFSET,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> TEXT_ALIGNMENT,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> FONT_FACE,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> FONT_SIZE,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> FONT_BOLD,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> FONT_ITALIC,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> FONT_UNDERLINE,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> BEZIER_PATH_LAYOUTER,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> END_DECORATION,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> START_DECORATION,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> DECORATOR_INSETS,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> LAYOUT_INSETS,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> COMPOSITE_ALIGNMENT,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> CHILD_ALIGNMENT,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> TRANSFORM,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> ORIENTATION,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> supportedAttributes,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> supportedAttributeMap,org.jhotdraw.draw.AttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getStrokeTotalWidth --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokeType,org.jhotdraw.draw.AttributeKeys$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getStroke --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokeType,org.jhotdraw.draw.AttributeKeys$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getHitStroke --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokeType,org.jhotdraw.draw.AttributeKeys$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getPerpendicularFillGrowth --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$Underfill,org.jhotdraw.draw.AttributeKeys$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getPerpendicularFillGrowth --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,org.jhotdraw.draw.AttributeKeys$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,getPerpendicularDrawGrowth --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,org.jhotdraw.draw.AttributeKeys$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> EVEN_ODD,org.jhotdraw.draw.AttributeKeys$WindingRule,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> CENTER,org.jhotdraw.draw.AttributeKeys$Underfill,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> BASIC,org.jhotdraw.draw.AttributeKeys$StrokeType,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> CENTER,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> LEADING,org.jhotdraw.draw.AttributeKeys$Alignment,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> BLOCK,org.jhotdraw.draw.AttributeKeys$Alignment,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys,<clinit> --> NORTH,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(METHOD,org.jhotdraw.draw.AttributeKeys,getStrokeTotalWidth --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AttributeKeys,getStrokeTotalMiterLimit --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AttributeKeys,getStroke --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AttributeKeys,getStroke --> <init>$2,org.jhotdraw.geom.DoubleStroke,);
Call(METHOD,org.jhotdraw.draw.AttributeKeys,getHitStroke --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AttributeKeys,getHitStroke --> <init>$2,org.jhotdraw.geom.DoubleStroke,);
Call(METHOD,org.jhotdraw.draw.AttributeKeys,getFont --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AttributeKeys,getFontStyle --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AttributeKeys,getPerpendicularFillGrowth --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AttributeKeys,getPerpendicularDrawGrowth --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AttributeKeys,getPerpendicularHitGrowth --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AttributeKeys,<clinit> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.AttributeKeys,<clinit> --> <init>$4,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.AttributeKeys,<clinit> --> <init>$3,org.jhotdraw.geom.Dimension2DDouble,);
Call(METHOD,org.jhotdraw.draw.AttributeKeys,<clinit> --> <init>,org.jhotdraw.geom.Insets2D$Double,);
Call(METHOD,org.jhotdraw.draw.AttributeKeys,<clinit> --> getKey,org.jhotdraw.draw.AttributeKey,);
EndClass 42
StartClass 43
Class(org.jhotdraw.draw.TextHolderFigure,Y,Y,Public);
Method(isEditable,boolean,Public,N,Y);
Method(getFont,java.awt.Font,Public,N,Y);
Method(getTextColor,java.awt.Color,Public,N,Y);
Method(getFillColor,java.awt.Color,Public,N,Y);
Method(getLabelFor,org.jhotdraw.draw.TextHolderFigure,Public,N,Y);
Method(getTabSize,int,Public,N,Y);
Method(getText,java.lang.String,Public,N,Y);
Method(setText,void,Public,N,Y);
Method(getTextColumns,int,Public,N,Y);
Method(setFontSize,void,Public,N,Y);
Method(getFontSize,float,Public,N,Y);
Method(getBaseline,double,Public,N,Y);
Method(getInsets,org.jhotdraw.geom.Insets2D$Double,Public,N,Y);
Method(isTextOverflow,boolean,Public,N,Y);
Parameter(setText,java.lang.String,);
Parameter(setFontSize,float,);
Realization(org.jhotdraw.draw.Figure);
EndClass 43
StartClass 44
Class(org.jhotdraw.draw.RectangleFigure,N,N,Public);
Attribute(rectangle,java.awt.geom.Rectangle2D$Double,Protected,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(drawFill,void,Protected,N,N);
Method(drawStroke,void,Protected,N,N);
Method(getBounds,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(getDrawingArea,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(contains,boolean,Public,N,N);
Method(setBounds,void,Public,N,N);
Method(transform,void,Public,N,N);
Method(restoreTransformTo,void,Public,N,N);
Method(getTransformRestoreData,java.lang.Object,Public,N,N);
Method(clone,org.jhotdraw.draw.RectangleFigure,Public,N,N);
Method(clone$2,org.jhotdraw.draw.AbstractAttributedFigure,Public,N,N);
Method(clone$3,org.jhotdraw.draw.AbstractFigure,Public,N,N);
Method(clone$4,org.jhotdraw.draw.Figure,Public,N,N);
Method(clone$5,org.jhotdraw.beans.AbstractBean,Public,N,N);
Method(clone$6,java.lang.Object,Public,N,N);
Parameter(<init>$2,double,);
Parameter(<init>$2,double,);
Parameter(<init>$2,double,);
Parameter(<init>$2,double,);
Parameter(drawFill,java.awt.Graphics2D,);
Parameter(drawStroke,java.awt.Graphics2D,);
Parameter(contains,java.awt.geom.Point2D$Double,);
Parameter(setBounds,java.awt.geom.Point2D$Double,);
Parameter(setBounds,java.awt.geom.Point2D$Double,);
Parameter(transform,java.awt.geom.AffineTransform,);
Parameter(restoreTransformTo,java.lang.Object,);
SuperClass(org.jhotdraw.draw.AbstractAttributedFigure);
SuperClass(org.jhotdraw.draw.AbstractFigure);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.draw.AbstractAttributedFigure);
Call(METHOD,org.jhotdraw.draw.RectangleFigure,<init> --> <init>$2,org.jhotdraw.draw.RectangleFigure,);
Call(METHOD,org.jhotdraw.draw.RectangleFigure,transform --> setBounds,org.jhotdraw.draw.RectangleFigure,);
Call(METHOD,org.jhotdraw.draw.RectangleFigure,clone$2 --> clone,org.jhotdraw.draw.RectangleFigure,);
Call(METHOD,org.jhotdraw.draw.RectangleFigure,clone$3 --> clone,org.jhotdraw.draw.RectangleFigure,);
Call(METHOD,org.jhotdraw.draw.RectangleFigure,clone$4 --> clone,org.jhotdraw.draw.RectangleFigure,);
Call(METHOD,org.jhotdraw.draw.RectangleFigure,clone$5 --> clone,org.jhotdraw.draw.RectangleFigure,);
Call(METHOD,org.jhotdraw.draw.RectangleFigure,clone$6 --> clone,org.jhotdraw.draw.RectangleFigure,);
Call(ATTRIBUTE,org.jhotdraw.draw.RectangleFigure,<init>$2 --> rectangle,org.jhotdraw.draw.RectangleFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.RectangleFigure,drawFill --> rectangle,org.jhotdraw.draw.RectangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RectangleFigure,drawStroke --> rectangle,org.jhotdraw.draw.RectangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RectangleFigure,getBounds --> rectangle,org.jhotdraw.draw.RectangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RectangleFigure,getDrawingArea --> rectangle,org.jhotdraw.draw.RectangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RectangleFigure,contains --> rectangle,org.jhotdraw.draw.RectangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RectangleFigure,setBounds --> rectangle,org.jhotdraw.draw.RectangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RectangleFigure,restoreTransformTo --> rectangle,org.jhotdraw.draw.RectangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RectangleFigure,getTransformRestoreData --> rectangle,org.jhotdraw.draw.RectangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RectangleFigure,clone --> rectangle,org.jhotdraw.draw.RectangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RectangleFigure,clone --> rectangle,org.jhotdraw.draw.RectangleFigure,WRITE);
Call(METHOD,org.jhotdraw.draw.RectangleFigure,<init>$2 --> <init>,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.RectangleFigure,drawFill --> getPerpendicularFillGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.RectangleFigure,drawFill --> grow,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.RectangleFigure,drawStroke --> getPerpendicularDrawGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.RectangleFigure,drawStroke --> grow,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.RectangleFigure,getDrawingArea --> getPerpendicularHitGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.RectangleFigure,getDrawingArea --> grow,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.RectangleFigure,contains --> getPerpendicularHitGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.RectangleFigure,contains --> grow,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.RectangleFigure,transform --> getStartPoint,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.RectangleFigure,transform --> getEndPoint,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.RectangleFigure,clone --> clone,org.jhotdraw.draw.AbstractAttributedFigure,);
EndClass 44
StartClass 45
Class(org.jhotdraw.draw.liner.Liner,Y,Y,Public);
Method(lineout,void,Public,N,Y);
Method(createHandles,java.util.Collection,Public,N,Y);
Method(clone,org.jhotdraw.draw.liner.Liner,Public,N,Y);
Parameter(lineout,org.jhotdraw.draw.ConnectionFigure,);
Parameter(createHandles,org.jhotdraw.geom.BezierPath,org.jhotdraw.draw.handle.Handle);
EndClass 45
StartClass 46
Class(org.jhotdraw.draw.ImageHolderFigure,Y,Y,Public);
Method(loadImage,void,Public,N,Y);
Method(loadImage$2,void,Public,N,Y);
Method(getBufferedImage,java.awt.image.BufferedImage,Public,N,Y);
Method(setBufferedImage,void,Public,N,Y);
Method(setImage,void,Public,N,Y);
Method(getImageData,byte[],Public,N,Y);
Parameter(loadImage,java.io.File,);
Parameter(loadImage$2,java.io.InputStream,);
Parameter(setBufferedImage,java.awt.image.BufferedImage,);
Parameter(setImage,byte[],);
Parameter(setImage,java.awt.image.BufferedImage,);
Realization(org.jhotdraw.draw.Figure);
EndClass 46
StartClass 47
Class(org.jhotdraw.draw.tool.TextAreaCreationTool,N,N,Public);
Attribute(textArea,org.jhotdraw.draw.text.FloatingTextArea,Private,N,N,);
Attribute(typingTarget,org.jhotdraw.draw.TextHolderFigure,Private,N,N,);
Attribute(rubberbandColor,java.awt.Color,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(setRubberbandColor,void,Public,N,N);
Method(deactivate,void,Public,N,N);
Method(mousePressed,void,Public,N,N);
Method(creationFinished,void,Protected,N,N);
Method(draw,void,Public,N,N);
Method(beginEdit,void,Protected,N,N);
Method(getFieldBounds,java.awt.geom.Rectangle2D$Double,Private,N,N);
Method(endEdit,void,Protected,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.TextHolderFigure,);
Parameter(<init>$2,org.jhotdraw.draw.TextHolderFigure,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(<init>$2,java.util.Map,);
Parameter(setRubberbandColor,java.awt.Color,);
Parameter(deactivate,org.jhotdraw.draw.DrawingEditor,);
Parameter(mousePressed,java.awt.event.MouseEvent,);
Parameter(creationFinished,org.jhotdraw.draw.Figure,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(beginEdit,org.jhotdraw.draw.TextHolderFigure,);
Parameter(getFieldBounds,org.jhotdraw.draw.TextHolderFigure,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
SuperClass(org.jhotdraw.draw.tool.CreationTool);
SuperClass(org.jhotdraw.draw.tool.AbstractTool);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.draw.tool.CreationTool);
Composition(org.jhotdraw.draw.text.FloatingTextArea);
Composition(org.jhotdraw.draw.TextHolderFigure);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,deactivate --> endEdit,org.jhotdraw.draw.tool.TextAreaCreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,mousePressed --> endEdit,org.jhotdraw.draw.tool.TextAreaCreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,creationFinished --> beginEdit,org.jhotdraw.draw.tool.TextAreaCreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,beginEdit --> endEdit,org.jhotdraw.draw.tool.TextAreaCreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,beginEdit --> getFieldBounds,org.jhotdraw.draw.tool.TextAreaCreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,actionPerformed --> endEdit,org.jhotdraw.draw.tool.TextAreaCreationTool,);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaCreationTool,<init> --> rubberbandColor,org.jhotdraw.draw.tool.TextAreaCreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaCreationTool,<init>$2 --> rubberbandColor,org.jhotdraw.draw.tool.TextAreaCreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaCreationTool,setRubberbandColor --> rubberbandColor,org.jhotdraw.draw.tool.TextAreaCreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaCreationTool,mousePressed --> typingTarget,org.jhotdraw.draw.tool.TextAreaCreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaCreationTool,draw --> rubberbandColor,org.jhotdraw.draw.tool.TextAreaCreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaCreationTool,beginEdit --> textArea,org.jhotdraw.draw.tool.TextAreaCreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaCreationTool,beginEdit --> typingTarget,org.jhotdraw.draw.tool.TextAreaCreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaCreationTool,beginEdit --> textArea,org.jhotdraw.draw.tool.TextAreaCreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaCreationTool,beginEdit --> typingTarget,org.jhotdraw.draw.tool.TextAreaCreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaCreationTool,endEdit --> typingTarget,org.jhotdraw.draw.tool.TextAreaCreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaCreationTool,endEdit --> textArea,org.jhotdraw.draw.tool.TextAreaCreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaCreationTool,endEdit --> typingTarget,org.jhotdraw.draw.tool.TextAreaCreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaCreationTool,draw --> createdFigure,org.jhotdraw.draw.tool.CreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaCreationTool,endEdit --> createdFigure,org.jhotdraw.draw.tool.CreationTool,READ);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,<init> --> <init>$4,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,<init>$2 --> <init>$5,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,deactivate --> deactivate,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,mousePressed --> isToolDoneAfterCreation,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,mousePressed --> fireToolDone,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,mousePressed --> mousePressed,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,creationFinished --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,creationFinished --> clearSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,creationFinished --> addToSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,draw --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,draw --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,draw --> drawingToView$2,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,beginEdit --> <init>,org.jhotdraw.draw.text.FloatingTextArea,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,beginEdit --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,beginEdit --> createOverlay$2,org.jhotdraw.draw.text.FloatingTextArea,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,beginEdit --> getText,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,beginEdit --> setBounds,org.jhotdraw.draw.text.FloatingTextArea,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,beginEdit --> requestFocus,org.jhotdraw.draw.text.FloatingTextArea,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,getFieldBounds --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,getFieldBounds --> getInsets,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,getFieldBounds --> subtractTo,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,endEdit --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,endEdit --> getText,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,endEdit --> getText,org.jhotdraw.draw.text.FloatingTextArea,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,endEdit --> setText,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,endEdit --> getDrawing,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,endEdit --> getAddedFigure,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,endEdit --> remove,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,endEdit --> <init>,org.jhotdraw.draw.tool.TextAreaCreationTool$1,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,endEdit --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,endEdit --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,endEdit --> endOverlay,org.jhotdraw.draw.text.FloatingTextArea,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,actionPerformed --> isToolDoneAfterCreation,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool,actionPerformed --> fireToolDone,org.jhotdraw.draw.tool.AbstractTool,);
EndClass 47
StartClass 48
Class(org.jhotdraw.draw.liner.CurvedLiner,N,N,Public);
Attribute(shoulderSize,double,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(createHandles,java.util.Collection,Public,N,N);
Method(lineout,void,Public,N,N);
Method(read,void,Public,N,N);
Method(write,void,Public,N,N);
Method(clone,org.jhotdraw.draw.liner.Liner,Public,N,N);
Method(clone$2,java.lang.Object,Public,N,N);
Parameter(<init>$2,double,);
Parameter(createHandles,org.jhotdraw.geom.BezierPath,org.jhotdraw.draw.handle.Handle);
Parameter(lineout,org.jhotdraw.draw.ConnectionFigure,);
Parameter(read,org.jhotdraw.xml.DOMInput,);
Parameter(write,org.jhotdraw.xml.DOMOutput,);
Realization(org.jhotdraw.draw.liner.Liner);
Realization(org.jhotdraw.xml.DOMStorable);
Call(METHOD,org.jhotdraw.draw.liner.CurvedLiner,<init> --> <init>$2,org.jhotdraw.draw.liner.CurvedLiner,);
Call(METHOD,org.jhotdraw.draw.liner.CurvedLiner,clone$2 --> clone,org.jhotdraw.draw.liner.CurvedLiner,);
Call(ATTRIBUTE,org.jhotdraw.draw.liner.CurvedLiner,<init>$2 --> shoulderSize,org.jhotdraw.draw.liner.CurvedLiner,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.liner.CurvedLiner,lineout --> shoulderSize,org.jhotdraw.draw.liner.CurvedLiner,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.liner.CurvedLiner,lineout --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.liner.CurvedLiner,lineout --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.liner.CurvedLiner,lineout --> mask,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(METHOD,org.jhotdraw.draw.liner.CurvedLiner,lineout --> getBezierPath,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.liner.CurvedLiner,lineout --> getStartConnector,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.liner.CurvedLiner,lineout --> getEndConnector,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.liner.CurvedLiner,lineout --> getStartFigure,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.liner.CurvedLiner,lineout --> getEndFigure,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.liner.CurvedLiner,lineout --> <init>$5,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.liner.CurvedLiner,lineout --> findStart,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.liner.CurvedLiner,lineout --> findEnd,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.liner.CurvedLiner,lineout --> getBounds,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.liner.CurvedLiner,lineout --> outcode$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.liner.CurvedLiner,lineout --> moveTo,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.liner.CurvedLiner,lineout --> moveTo$2,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.liner.CurvedLiner,lineout --> <init>$6,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.liner.CurvedLiner,lineout --> invalidatePath,org.jhotdraw.geom.BezierPath,);
EndClass 48
StartClass 49
Class(org.jhotdraw.draw.liner.ElbowLiner,N,N,Public);
Attribute(shoulderSize,double,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(createHandles,java.util.Collection,Public,N,N);
Method(lineout,void,Public,N,N);
Method(read,void,Public,N,N);
Method(write,void,Public,N,N);
Method(clone,org.jhotdraw.draw.liner.Liner,Public,N,N);
Method(clone$2,java.lang.Object,Public,N,N);
Parameter(<init>$2,double,);
Parameter(createHandles,org.jhotdraw.geom.BezierPath,org.jhotdraw.draw.handle.Handle);
Parameter(lineout,org.jhotdraw.draw.ConnectionFigure,);
Parameter(read,org.jhotdraw.xml.DOMInput,);
Parameter(write,org.jhotdraw.xml.DOMOutput,);
Realization(org.jhotdraw.draw.liner.Liner);
Realization(org.jhotdraw.xml.DOMStorable);
Call(METHOD,org.jhotdraw.draw.liner.ElbowLiner,<init> --> <init>$2,org.jhotdraw.draw.liner.ElbowLiner,);
Call(METHOD,org.jhotdraw.draw.liner.ElbowLiner,clone$2 --> clone,org.jhotdraw.draw.liner.ElbowLiner,);
Call(ATTRIBUTE,org.jhotdraw.draw.liner.ElbowLiner,<init>$2 --> shoulderSize,org.jhotdraw.draw.liner.ElbowLiner,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.liner.ElbowLiner,lineout --> shoulderSize,org.jhotdraw.draw.liner.ElbowLiner,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.liner.ElbowLiner,lineout --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.liner.ElbowLiner,lineout --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(METHOD,org.jhotdraw.draw.liner.ElbowLiner,lineout --> getBezierPath,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.liner.ElbowLiner,lineout --> getStartConnector,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.liner.ElbowLiner,lineout --> getEndConnector,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.liner.ElbowLiner,lineout --> getStartFigure,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.liner.ElbowLiner,lineout --> getEndFigure,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.liner.ElbowLiner,lineout --> <init>$5,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.liner.ElbowLiner,lineout --> findStart,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.liner.ElbowLiner,lineout --> findEnd,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.liner.ElbowLiner,lineout --> getBounds,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.liner.ElbowLiner,lineout --> outcode$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.liner.ElbowLiner,lineout --> moveTo,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.liner.ElbowLiner,lineout --> moveTo$2,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.liner.ElbowLiner,lineout --> setMask,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.liner.ElbowLiner,lineout --> invalidatePath,org.jhotdraw.geom.BezierPath,);
EndClass 49
StartClass 50
Class(org.jhotdraw.samples.draw.DrawView,N,N,Public);
Attribute(undo,org.jhotdraw.undo.UndoRedoManager,Private,N,N,);
Attribute(editor,org.jhotdraw.draw.DrawingEditor,Private,N,N,);
Attribute(scrollPane,javax.swing.JScrollPane,Private,N,N,);
Attribute(view,org.jhotdraw.draw.DefaultDrawingView,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(createDrawing,org.jhotdraw.draw.Drawing,Protected,N,N);
Method(createPageable,java.awt.print.Pageable,Public,N,N);
Method(initActions,void,Private,N,N);
Method(setHasUnsavedChanges,void,Protected,N,N);
Method(write,void,Public,N,N);
Method(read,void,Public,N,N);
Method(setEditor,void,Public,N,N);
Method(getEditor,org.jhotdraw.draw.DrawingEditor,Public,N,N);
Method(clear,void,Public,N,N);
Method(canSaveTo,boolean,Public,N,N);
Method(initComponents,void,Private,N,N);
Method(access$000,org.jhotdraw.undo.UndoRedoManager,Public,Y,N);
Method(access$100,org.jhotdraw.draw.DefaultDrawingView,Public,Y,N);
Parameter(setHasUnsavedChanges,boolean,);
Parameter(write,java.net.URI,);
Parameter(write,org.jhotdraw.gui.URIChooser,);
Parameter(read,java.net.URI,);
Parameter(read,org.jhotdraw.gui.URIChooser,);
Parameter(setEditor,org.jhotdraw.draw.DrawingEditor,);
Parameter(canSaveTo,java.net.URI,);
Parameter(access$000,org.jhotdraw.samples.draw.DrawView,);
Parameter(access$100,org.jhotdraw.samples.draw.DrawView,);
SuperClass(org.jhotdraw.app.AbstractView);
Generalization(org.jhotdraw.app.AbstractView);
Composition(org.jhotdraw.undo.UndoRedoManager);
Composition(org.jhotdraw.draw.DrawingEditor);
Composition(org.jhotdraw.draw.DefaultDrawingView);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,<init> --> initComponents,org.jhotdraw.samples.draw.DrawView,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,<init> --> setEditor,org.jhotdraw.samples.draw.DrawView,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,<init> --> createDrawing,org.jhotdraw.samples.draw.DrawView,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,<init> --> initActions,org.jhotdraw.samples.draw.DrawView,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,read --> createDrawing,org.jhotdraw.samples.draw.DrawView,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,clear --> createDrawing,org.jhotdraw.samples.draw.DrawView,);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView,<init> --> scrollPane,org.jhotdraw.samples.draw.DrawView,READ);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView,<init> --> view,org.jhotdraw.samples.draw.DrawView,READ);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView,<init> --> undo,org.jhotdraw.samples.draw.DrawView,READ);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView,<init> --> undo,org.jhotdraw.samples.draw.DrawView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView,createPageable --> view,org.jhotdraw.samples.draw.DrawView,READ);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView,initActions --> undo,org.jhotdraw.samples.draw.DrawView,READ);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView,setHasUnsavedChanges --> undo,org.jhotdraw.samples.draw.DrawView,READ);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView,write --> view,org.jhotdraw.samples.draw.DrawView,READ);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView,setEditor --> editor,org.jhotdraw.samples.draw.DrawView,READ);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView,setEditor --> view,org.jhotdraw.samples.draw.DrawView,READ);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView,setEditor --> editor,org.jhotdraw.samples.draw.DrawView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView,getEditor --> editor,org.jhotdraw.samples.draw.DrawView,READ);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView,initComponents --> scrollPane,org.jhotdraw.samples.draw.DrawView,READ);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView,initComponents --> view,org.jhotdraw.samples.draw.DrawView,READ);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView,initComponents --> scrollPane,org.jhotdraw.samples.draw.DrawView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView,initComponents --> view,org.jhotdraw.samples.draw.DrawView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView,access$000 --> undo,org.jhotdraw.samples.draw.DrawView,READ);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView,access$100 --> view,org.jhotdraw.samples.draw.DrawView,READ);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,<init> --> <init>,org.jhotdraw.app.AbstractView,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,<init> --> <init>,org.jhotdraw.gui.PlacardScrollPaneLayout,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,<init> --> <init>,org.jhotdraw.draw.DefaultDrawingEditor,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,<init> --> <init>,org.jhotdraw.undo.UndoRedoManager,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,<init> --> setDrawing,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,<init> --> getDrawing,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,<init> --> addUndoableEditListener,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,<init> --> <init>,org.jhotdraw.samples.draw.DrawView$1,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,<init> --> addPropertyChangeListener,org.jhotdraw.undo.UndoRedoManager,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,<init> --> createZoomButton$2,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,<init> --> createToggleGridButton,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,<init> --> configureToolBarButton,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,createDrawing --> <init>,org.jhotdraw.draw.QuadTreeDrawing,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,createDrawing --> <init>,org.jhotdraw.samples.draw.DrawFigureFactory,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,createDrawing --> <init>,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,createDrawing --> addInputFormat,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,createDrawing --> <init>,org.jhotdraw.draw.ImageFigure,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,createDrawing --> <init>,org.jhotdraw.draw.io.ImageInputFormat,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,createDrawing --> <init>,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,createDrawing --> <init>,org.jhotdraw.draw.io.TextInputFormat,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,createDrawing --> <init>,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,createDrawing --> setBounds,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,createDrawing --> addOutputFormat,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,createDrawing --> <init>,org.jhotdraw.draw.io.ImageOutputFormat,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,createPageable --> getDrawing,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,createPageable --> <init>,org.jhotdraw.draw.print.DrawingPageable,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,initActions --> getUndoAction,org.jhotdraw.undo.UndoRedoManager,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,initActions --> getRedoAction,org.jhotdraw.undo.UndoRedoManager,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,setHasUnsavedChanges --> setHasUnsavedChanges,org.jhotdraw.app.AbstractView,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,setHasUnsavedChanges --> setHasSignificantEdits,org.jhotdraw.undo.UndoRedoManager,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,write --> getDrawing,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,write --> getOutputFormats,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,write --> write,org.jhotdraw.draw.io.OutputFormat,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,read --> getInputFormats,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,read --> read$2,org.jhotdraw.draw.io.InputFormat,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,read --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,read --> getName,org.jhotdraw.net.URIUtil,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,read --> getFormatted,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,read --> <init>,org.jhotdraw.samples.draw.DrawView$2,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,setEditor --> remove,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,setEditor --> add,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,clear --> <init>,org.jhotdraw.samples.draw.DrawView$3,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView,initComponents --> <init>,org.jhotdraw.draw.DefaultDrawingView,);
EndClass 50
StartClass 51
Class(org.jhotdraw.draw.tool.ImageTool,N,N,Public);
Attribute(fileDialog,java.awt.FileDialog,Protected,N,N,);
Attribute(fileChooser,javax.swing.JFileChooser,Protected,N,N,);
Attribute(useFileDialog,boolean,Protected,N,N,);
Attribute(workerThread,java.lang.Thread,Protected,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(setUseFileDialog,void,Public,N,N);
Method(isUseFileDialog,boolean,Public,N,N);
Method(activate,void,Public,N,N);
Method(getFileChooser,javax.swing.JFileChooser,Private,N,N);
Method(getFileDialog,java.awt.FileDialog,Private,N,N);
Parameter(<init>,org.jhotdraw.draw.ImageHolderFigure,);
Parameter(<init>$2,org.jhotdraw.draw.ImageHolderFigure,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(<init>$2,java.util.Map,);
Parameter(setUseFileDialog,boolean,);
Parameter(activate,org.jhotdraw.draw.DrawingEditor,);
SuperClass(org.jhotdraw.draw.tool.CreationTool);
SuperClass(org.jhotdraw.draw.tool.AbstractTool);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.draw.tool.CreationTool);
Call(METHOD,org.jhotdraw.draw.tool.ImageTool,activate --> getFileDialog,org.jhotdraw.draw.tool.ImageTool,);
Call(METHOD,org.jhotdraw.draw.tool.ImageTool,activate --> getFileChooser,org.jhotdraw.draw.tool.ImageTool,);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ImageTool,setUseFileDialog --> useFileDialog,org.jhotdraw.draw.tool.ImageTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ImageTool,setUseFileDialog --> useFileDialog,org.jhotdraw.draw.tool.ImageTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ImageTool,setUseFileDialog --> fileChooser,org.jhotdraw.draw.tool.ImageTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ImageTool,setUseFileDialog --> fileDialog,org.jhotdraw.draw.tool.ImageTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ImageTool,isUseFileDialog --> useFileDialog,org.jhotdraw.draw.tool.ImageTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ImageTool,activate --> workerThread,org.jhotdraw.draw.tool.ImageTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ImageTool,activate --> useFileDialog,org.jhotdraw.draw.tool.ImageTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ImageTool,activate --> workerThread,org.jhotdraw.draw.tool.ImageTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ImageTool,getFileChooser --> fileChooser,org.jhotdraw.draw.tool.ImageTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ImageTool,getFileChooser --> fileChooser,org.jhotdraw.draw.tool.ImageTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ImageTool,getFileDialog --> fileDialog,org.jhotdraw.draw.tool.ImageTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ImageTool,getFileDialog --> fileDialog,org.jhotdraw.draw.tool.ImageTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ImageTool,activate --> prototype,org.jhotdraw.draw.tool.CreationTool,READ);
Call(METHOD,org.jhotdraw.draw.tool.ImageTool,<init> --> <init>$4,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.ImageTool,<init>$2 --> <init>$5,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.ImageTool,activate --> activate,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.ImageTool,activate --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ImageTool,activate --> getComponent,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.ImageTool,activate --> clone,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.ImageTool,activate --> <init>,org.jhotdraw.draw.tool.ImageTool$1,);
Call(METHOD,org.jhotdraw.draw.tool.ImageTool,activate --> isToolDoneAfterCreation,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.ImageTool,activate --> fireToolDone,org.jhotdraw.draw.tool.AbstractTool,);
EndClass 51
StartClass 52
Class(org.jhotdraw.draw.tool.ConnectionTool,N,N,Public);
Attribute(ANCHOR_WIDTH,int,Private,Y,Y,);
Attribute(prototypeAttributes,java.util.Map,Private,N,N,org.jhotdraw.draw.AttributeKey;java.lang.Object,);
Attribute(startConnector,org.jhotdraw.draw.connector.Connector,Protected,N,N,);
Attribute(endConnector,org.jhotdraw.draw.connector.Connector,Protected,N,N,);
Attribute(createdFigure,org.jhotdraw.draw.ConnectionFigure,Protected,N,N,);
Attribute(prototype,org.jhotdraw.draw.ConnectionFigure,Protected,N,N,);
Attribute(targetFigure,org.jhotdraw.draw.Figure,Protected,N,N,);
Attribute(connectors,java.util.Collection,Protected,N,N,org.jhotdraw.draw.connector.Connector);
Attribute(presentationName,java.lang.String,Private,N,N,);
Attribute(isToolDoneAfterCreation,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(<init>$5,void,Public,N,N);
Method(getPrototype,org.jhotdraw.draw.ConnectionFigure,Public,N,N);
Method(getAnchorWidth,int,Protected,N,N);
Method(canConnect,boolean,Protected,N,N);
Method(canConnect$2,boolean,Protected,N,N);
Method(mouseMoved,void,Public,N,N);
Method(repaintConnectors,void,Public,N,N);
Method(mousePressed,void,Public,N,N);
Method(mouseDragged,void,Public,N,N);
Method(mouseReleased,void,Public,N,N);
Method(activate,void,Public,N,N);
Method(deactivate,void,Public,N,N);
Method(createFigure,org.jhotdraw.draw.ConnectionFigure,Protected,N,N);
Method(draw,void,Public,N,N);
Method(creationFinished,void,Protected,N,N);
Method(setToolDoneAfterCreation,void,Public,N,N);
Method(isToolDoneAfterCreation,boolean,Public,N,N);
Method(access$000,java.lang.String,Public,Y,N);
Parameter(<init>,org.jhotdraw.draw.ConnectionFigure,);
Parameter(<init>$2,org.jhotdraw.draw.ConnectionFigure,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(<init>$2,java.util.Map,);
Parameter(<init>$3,org.jhotdraw.draw.ConnectionFigure,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(<init>$3,java.util.Map,);
Parameter(<init>$3,java.lang.String,);
Parameter(<init>$4,java.lang.String,);
Parameter(<init>$5,java.lang.String,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(<init>$5,java.util.Map,);
Parameter(<init>$5,java.lang.String,);
Parameter(canConnect,org.jhotdraw.draw.ConnectionFigure,);
Parameter(canConnect,org.jhotdraw.draw.connector.Connector,);
Parameter(canConnect$2,org.jhotdraw.draw.ConnectionFigure,);
Parameter(canConnect$2,org.jhotdraw.draw.connector.Connector,);
Parameter(canConnect$2,org.jhotdraw.draw.connector.Connector,);
Parameter(mouseMoved,java.awt.event.MouseEvent,);
Parameter(repaintConnectors,java.awt.event.MouseEvent,);
Parameter(mousePressed,java.awt.event.MouseEvent,);
Parameter(mouseDragged,java.awt.event.MouseEvent,);
Parameter(mouseReleased,java.awt.event.MouseEvent,);
Parameter(activate,org.jhotdraw.draw.DrawingEditor,);
Parameter(deactivate,org.jhotdraw.draw.DrawingEditor,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(creationFinished,org.jhotdraw.draw.Figure,);
Parameter(setToolDoneAfterCreation,boolean,);
Parameter(access$000,org.jhotdraw.draw.tool.ConnectionTool,);
SuperClass(org.jhotdraw.draw.tool.AbstractTool);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.draw.tool.AbstractTool);
Composition(org.jhotdraw.draw.connector.Connector);
Composition(org.jhotdraw.draw.ConnectionFigure);
Composition(org.jhotdraw.draw.Figure);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,<init> --> <init>$3,org.jhotdraw.draw.tool.ConnectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,<init>$2 --> <init>$3,org.jhotdraw.draw.tool.ConnectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,<init>$4 --> <init>$5,org.jhotdraw.draw.tool.ConnectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseMoved --> repaintConnectors,org.jhotdraw.draw.tool.ConnectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,repaintConnectors --> getPrototype,org.jhotdraw.draw.tool.ConnectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mousePressed --> canConnect,org.jhotdraw.draw.tool.ConnectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mousePressed --> createFigure,org.jhotdraw.draw.tool.ConnectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseDragged --> repaintConnectors,org.jhotdraw.draw.tool.ConnectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseDragged --> canConnect$2,org.jhotdraw.draw.tool.ConnectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseReleased --> creationFinished,org.jhotdraw.draw.tool.ConnectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseReleased --> isToolDoneAfterCreation,org.jhotdraw.draw.tool.ConnectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,draw --> getPrototype,org.jhotdraw.draw.tool.ConnectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,creationFinished --> isToolDoneAfterCreation,org.jhotdraw.draw.tool.ConnectionTool,);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,<init>$3 --> connectors,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,<init>$3 --> isToolDoneAfterCreation,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,<init>$3 --> prototype,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,<init>$3 --> prototypeAttributes,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,<init>$3 --> presentationName,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,<init>$5 --> connectors,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,<init>$5 --> isToolDoneAfterCreation,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,<init>$5 --> prototype,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,<init>$5 --> prototypeAttributes,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,<init>$5 --> presentationName,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,getPrototype --> prototype,org.jhotdraw.draw.tool.ConnectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,repaintConnectors --> createdFigure,org.jhotdraw.draw.tool.ConnectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,repaintConnectors --> targetFigure,org.jhotdraw.draw.tool.ConnectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,repaintConnectors --> connectors,org.jhotdraw.draw.tool.ConnectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,repaintConnectors --> targetFigure,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,repaintConnectors --> connectors,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,mousePressed --> prototype,org.jhotdraw.draw.tool.ConnectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,mousePressed --> startConnector,org.jhotdraw.draw.tool.ConnectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,mousePressed --> createdFigure,org.jhotdraw.draw.tool.ConnectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,mousePressed --> startConnector,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,mousePressed --> createdFigure,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,mousePressed --> endConnector,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,mouseDragged --> createdFigure,org.jhotdraw.draw.tool.ConnectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,mouseDragged --> prototype,org.jhotdraw.draw.tool.ConnectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,mouseDragged --> endConnector,org.jhotdraw.draw.tool.ConnectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,mouseDragged --> startConnector,org.jhotdraw.draw.tool.ConnectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,mouseDragged --> endConnector,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,mouseReleased --> createdFigure,org.jhotdraw.draw.tool.ConnectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,mouseReleased --> startConnector,org.jhotdraw.draw.tool.ConnectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,mouseReleased --> endConnector,org.jhotdraw.draw.tool.ConnectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,mouseReleased --> targetFigure,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,mouseReleased --> endConnector,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,mouseReleased --> startConnector,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,mouseReleased --> createdFigure,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,deactivate --> createdFigure,org.jhotdraw.draw.tool.ConnectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,deactivate --> createdFigure,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,deactivate --> targetFigure,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,deactivate --> endConnector,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,deactivate --> startConnector,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,createFigure --> prototype,org.jhotdraw.draw.tool.ConnectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,createFigure --> prototypeAttributes,org.jhotdraw.draw.tool.ConnectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,draw --> targetFigure,org.jhotdraw.draw.tool.ConnectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,draw --> createdFigure,org.jhotdraw.draw.tool.ConnectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,setToolDoneAfterCreation --> isToolDoneAfterCreation,org.jhotdraw.draw.tool.ConnectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,setToolDoneAfterCreation --> isToolDoneAfterCreation,org.jhotdraw.draw.tool.ConnectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,isToolDoneAfterCreation --> isToolDoneAfterCreation,org.jhotdraw.draw.tool.ConnectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,access$000 --> presentationName,org.jhotdraw.draw.tool.ConnectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool,mousePressed --> anchor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,<init>$3 --> <init>,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,<init>$3 --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,<init>$3 --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,<init>$5 --> <init>,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,<init>$5 --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,<init>$5 --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,canConnect --> canConnect$2,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,canConnect$2 --> canConnect,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,repaintConnectors --> viewToDrawing,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,repaintConnectors --> getDrawing,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,repaintConnectors --> findFigureExcept,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,repaintConnectors --> isConnectable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,repaintConnectors --> getDrawingArea,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,repaintConnectors --> getConnectors,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,repaintConnectors --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,repaintConnectors --> getComponent,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,repaintConnectors --> drawingToView$2,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mousePressed --> mousePressed,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mousePressed --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mousePressed --> clearSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mousePressed --> viewToDrawing,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mousePressed --> getDrawing,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mousePressed --> findFigure,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mousePressed --> findConnector,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mousePressed --> getAnchor,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mousePressed --> setStartPoint,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mousePressed --> setEndPoint,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mousePressed --> add,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mousePressed --> drawingToView,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mousePressed --> fireAreaInvalidated$2,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseDragged --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseDragged --> viewToDrawing,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseDragged --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseDragged --> getConstrainer,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseDragged --> constrainPoint,org.jhotdraw.draw.Constrainer,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseDragged --> getDrawing,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseDragged --> findFigureExcept,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseDragged --> findConnector,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseDragged --> getAnchor,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseDragged --> getEndPoint,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseDragged --> drawingToView,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseDragged --> setEndPoint,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseDragged --> getComponent,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseDragged --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseReleased --> canConnect,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseReleased --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseReleased --> setStartConnector,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseReleased --> setEndConnector,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseReleased --> updateConnection,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseReleased --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseReleased --> getDrawing,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseReleased --> <init>,org.jhotdraw.draw.tool.ConnectionTool$1,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseReleased --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseReleased --> getAnchor,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseReleased --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseReleased --> drawingToView,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseReleased --> fireAreaInvalidated$2,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,mouseReleased --> fireToolDone,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,activate --> activate,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,deactivate --> getDrawing,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,deactivate --> remove,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,deactivate --> deactivate,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,createFigure --> clone,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,createFigure --> getEditor,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,createFigure --> applyDefaultAttributesTo,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,createFigure --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,draw --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,draw --> getDrawingToViewTransform,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,draw --> getConnectors,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,draw --> draw,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,draw --> draw,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,draw --> getStartPoint,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,draw --> drawingToView,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,draw --> getEndPoint,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool,creationFinished --> fireToolDone,org.jhotdraw.draw.tool.AbstractTool,);
EndClass 52
StartClass 53
Class(org.jhotdraw.draw.tool.Tool,Y,Y,Public);
Method(activate,void,Public,N,Y);
Method(deactivate,void,Public,N,Y);
Method(addToolListener,void,Public,N,Y);
Method(removeToolListener,void,Public,N,Y);
Method(draw,void,Public,N,Y);
Method(editDelete,void,Public,N,Y);
Method(editCut,void,Public,N,Y);
Method(editCopy,void,Public,N,Y);
Method(editDuplicate,void,Public,N,Y);
Method(editPaste,void,Public,N,Y);
Method(getToolTipText,java.lang.String,Public,N,Y);
Method(supportsHandleInteraction,boolean,Public,N,Y);
Parameter(activate,org.jhotdraw.draw.DrawingEditor,);
Parameter(deactivate,org.jhotdraw.draw.DrawingEditor,);
Parameter(addToolListener,org.jhotdraw.draw.event.ToolListener,);
Parameter(removeToolListener,org.jhotdraw.draw.event.ToolListener,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(getToolTipText,org.jhotdraw.draw.DrawingView,);
Parameter(getToolTipText,java.awt.event.MouseEvent,);
EndClass 53
StartClass 54
Class(org.jhotdraw.draw.EllipseFigure,N,N,Public);
Attribute(ellipse,java.awt.geom.Ellipse2D$Double,Protected,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(findConnector,org.jhotdraw.draw.connector.Connector,Public,N,N);
Method(findCompatibleConnector,org.jhotdraw.draw.connector.Connector,Public,N,N);
Method(getBounds,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(getDrawingArea,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(drawFill,void,Protected,N,N);
Method(drawStroke,void,Protected,N,N);
Method(contains,boolean,Public,N,N);
Method(setBounds,void,Public,N,N);
Method(transform,void,Public,N,N);
Method(clone,org.jhotdraw.draw.EllipseFigure,Public,N,N);
Method(restoreTransformTo,void,Public,N,N);
Method(getTransformRestoreData,java.lang.Object,Public,N,N);
Method(clone$2,org.jhotdraw.draw.AbstractAttributedFigure,Public,N,N);
Method(clone$3,org.jhotdraw.draw.AbstractFigure,Public,N,N);
Method(clone$4,org.jhotdraw.draw.Figure,Public,N,N);
Method(clone$5,org.jhotdraw.beans.AbstractBean,Public,N,N);
Method(clone$6,java.lang.Object,Public,N,N);
Parameter(<init>$2,double,);
Parameter(<init>$2,double,);
Parameter(<init>$2,double,);
Parameter(<init>$2,double,);
Parameter(findConnector,java.awt.geom.Point2D$Double,);
Parameter(findConnector,org.jhotdraw.draw.ConnectionFigure,);
Parameter(findCompatibleConnector,org.jhotdraw.draw.connector.Connector,);
Parameter(findCompatibleConnector,boolean,);
Parameter(drawFill,java.awt.Graphics2D,);
Parameter(drawStroke,java.awt.Graphics2D,);
Parameter(contains,java.awt.geom.Point2D$Double,);
Parameter(setBounds,java.awt.geom.Point2D$Double,);
Parameter(setBounds,java.awt.geom.Point2D$Double,);
Parameter(transform,java.awt.geom.AffineTransform,);
Parameter(restoreTransformTo,java.lang.Object,);
SuperClass(org.jhotdraw.draw.AbstractAttributedFigure);
SuperClass(org.jhotdraw.draw.AbstractFigure);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.draw.AbstractAttributedFigure);
Call(METHOD,org.jhotdraw.draw.EllipseFigure,<init> --> <init>$2,org.jhotdraw.draw.EllipseFigure,);
Call(METHOD,org.jhotdraw.draw.EllipseFigure,transform --> setBounds,org.jhotdraw.draw.EllipseFigure,);
Call(METHOD,org.jhotdraw.draw.EllipseFigure,clone$2 --> clone,org.jhotdraw.draw.EllipseFigure,);
Call(METHOD,org.jhotdraw.draw.EllipseFigure,clone$3 --> clone,org.jhotdraw.draw.EllipseFigure,);
Call(METHOD,org.jhotdraw.draw.EllipseFigure,clone$4 --> clone,org.jhotdraw.draw.EllipseFigure,);
Call(METHOD,org.jhotdraw.draw.EllipseFigure,clone$5 --> clone,org.jhotdraw.draw.EllipseFigure,);
Call(METHOD,org.jhotdraw.draw.EllipseFigure,clone$6 --> clone,org.jhotdraw.draw.EllipseFigure,);
Call(ATTRIBUTE,org.jhotdraw.draw.EllipseFigure,<init>$2 --> ellipse,org.jhotdraw.draw.EllipseFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.EllipseFigure,getBounds --> ellipse,org.jhotdraw.draw.EllipseFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.EllipseFigure,getDrawingArea --> ellipse,org.jhotdraw.draw.EllipseFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.EllipseFigure,drawFill --> ellipse,org.jhotdraw.draw.EllipseFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.EllipseFigure,drawStroke --> ellipse,org.jhotdraw.draw.EllipseFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.EllipseFigure,contains --> ellipse,org.jhotdraw.draw.EllipseFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.EllipseFigure,setBounds --> ellipse,org.jhotdraw.draw.EllipseFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.EllipseFigure,clone --> ellipse,org.jhotdraw.draw.EllipseFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.EllipseFigure,clone --> ellipse,org.jhotdraw.draw.EllipseFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.EllipseFigure,restoreTransformTo --> ellipse,org.jhotdraw.draw.EllipseFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.EllipseFigure,getTransformRestoreData --> ellipse,org.jhotdraw.draw.EllipseFigure,READ);
Call(METHOD,org.jhotdraw.draw.EllipseFigure,<init>$2 --> <init>,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.EllipseFigure,findConnector --> <init>$2,org.jhotdraw.draw.connector.ChopEllipseConnector,);
Call(METHOD,org.jhotdraw.draw.EllipseFigure,findCompatibleConnector --> <init>$2,org.jhotdraw.draw.connector.ChopEllipseConnector,);
Call(METHOD,org.jhotdraw.draw.EllipseFigure,getDrawingArea --> getPerpendicularHitGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.EllipseFigure,getDrawingArea --> grow,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.EllipseFigure,drawFill --> getPerpendicularFillGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.EllipseFigure,drawStroke --> getPerpendicularDrawGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.EllipseFigure,contains --> getPerpendicularHitGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.EllipseFigure,transform --> getStartPoint,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.EllipseFigure,transform --> getEndPoint,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.EllipseFigure,clone --> clone,org.jhotdraw.draw.AbstractAttributedFigure,);
EndClass 54
StartClass 55
Class(org.jhotdraw.draw.TextAreaFigure,N,N,Public);
Attribute(bounds,java.awt.geom.Rectangle2D$Double,Protected,N,N,);
Attribute(editable,boolean,Protected,N,N,);
Attribute(dashes,java.awt.BasicStroke,Private,Y,Y,);
Attribute(isTextOverflow,java.lang.Boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(drawText,void,Protected,N,N);
Method(drawParagraph,java.awt.geom.Rectangle2D$Double,Private,N,N);
Method(drawFill,void,Protected,N,N);
Method(drawStroke,void,Protected,N,N);
Method(setBounds,void,Public,N,N);
Method(transform,void,Public,N,N);
Method(figureContains,boolean,Public,N,N);
Method(getBounds,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(restoreTransformTo,void,Public,N,N);
Method(getTransformRestoreData,java.lang.Object,Public,N,N);
Method(getText,java.lang.String,Public,N,N);
Method(getInsets,org.jhotdraw.geom.Insets2D$Double,Public,N,N);
Method(getBaseline,double,Public,N,N);
Method(getTabSize,int,Public,N,N);
Method(setText,void,Public,N,N);
Method(getTextColumns,int,Public,N,N);
Method(getFont,java.awt.Font,Public,N,N);
Method(getTextColor,java.awt.Color,Public,N,N);
Method(getFillColor,java.awt.Color,Public,N,N);
Method(setFontSize,void,Public,N,N);
Method(getFontSize,float,Public,N,N);
Method(isEditable,boolean,Public,N,N);
Method(setEditable,void,Public,N,N);
Method(getTool,org.jhotdraw.draw.tool.Tool,Public,N,N);
Method(getLabelFor,org.jhotdraw.draw.TextHolderFigure,Public,N,N);
Method(clone,org.jhotdraw.draw.TextAreaFigure,Public,N,N);
Method(createHandles,java.util.Collection,Public,N,N);
Method(readBounds,void,Protected,N,N);
Method(writeBounds,void,Protected,N,N);
Method(read,void,Public,N,N);
Method(write,void,Public,N,N);
Method(invalidate,void,Public,N,N);
Method(isTextOverflow,boolean,Public,N,N);
Method(getPreferredTextSize,org.jhotdraw.geom.Dimension2DDouble,Public,N,N);
Method(clone$2,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,Public,N,N);
Method(clone$3,org.jhotdraw.draw.Figure,Public,N,N);
Method(clone$4,org.jhotdraw.draw.AbstractAttributedFigure,Public,N,N);
Method(clone$5,org.jhotdraw.draw.AbstractFigure,Public,N,N);
Method(clone$6,org.jhotdraw.beans.AbstractBean,Public,N,N);
Method(clone$7,java.lang.Object,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>$2,java.lang.String,);
Parameter(drawText,java.awt.Graphics2D,);
Parameter(drawParagraph,java.awt.Graphics2D,);
Parameter(drawParagraph,java.text.AttributedCharacterIterator,);
Parameter(drawParagraph,float,);
Parameter(drawParagraph,float,);
Parameter(drawParagraph,float,);
Parameter(drawParagraph,float,);
Parameter(drawParagraph,float[],);
Parameter(drawParagraph,int,);
Parameter(drawFill,java.awt.Graphics2D,);
Parameter(drawStroke,java.awt.Graphics2D,);
Parameter(setBounds,java.awt.geom.Point2D$Double,);
Parameter(setBounds,java.awt.geom.Point2D$Double,);
Parameter(transform,java.awt.geom.AffineTransform,);
Parameter(figureContains,java.awt.geom.Point2D$Double,);
Parameter(restoreTransformTo,java.lang.Object,);
Parameter(setText,java.lang.String,);
Parameter(setFontSize,float,);
Parameter(setEditable,boolean,);
Parameter(getTool,java.awt.geom.Point2D$Double,);
Parameter(createHandles,int,org.jhotdraw.draw.handle.Handle);
Parameter(readBounds,org.jhotdraw.xml.DOMInput,);
Parameter(writeBounds,org.jhotdraw.xml.DOMOutput,);
Parameter(read,org.jhotdraw.xml.DOMInput,);
Parameter(write,org.jhotdraw.xml.DOMOutput,);
Parameter(getPreferredTextSize,double,);
SuperClass(org.jhotdraw.draw.AbstractAttributedDecoratedFigure);
SuperClass(org.jhotdraw.draw.AbstractAttributedFigure);
SuperClass(org.jhotdraw.draw.AbstractFigure);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.draw.AbstractAttributedDecoratedFigure);
Realization(org.jhotdraw.draw.TextHolderFigure);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,<init> --> <init>$2,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,<init>$2 --> setText,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,drawText --> getText,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,drawText --> isEditable,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,drawText --> getFont,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,drawText --> getInsets,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,drawText --> getTabSize,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,drawText --> drawParagraph,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,transform --> setBounds,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,getBaseline --> getFont,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,getBaseline --> getText,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,getBaseline --> getInsets,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,getTextColumns --> getText,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,getTool --> isEditable,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,read --> readBounds,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,write --> writeBounds,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,isTextOverflow --> getInsets,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,isTextOverflow --> getBounds,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,isTextOverflow --> getPreferredTextSize,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,getPreferredTextSize --> getText,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,getPreferredTextSize --> getFont,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,getPreferredTextSize --> getTabSize,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,getPreferredTextSize --> drawParagraph,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,clone$2 --> clone,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,clone$3 --> clone,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,clone$4 --> clone,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,clone$5 --> clone,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,clone$6 --> clone,org.jhotdraw.draw.TextAreaFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,clone$7 --> clone,org.jhotdraw.draw.TextAreaFigure,);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,<init>$2 --> bounds,org.jhotdraw.draw.TextAreaFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,<init>$2 --> editable,org.jhotdraw.draw.TextAreaFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,drawText --> bounds,org.jhotdraw.draw.TextAreaFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,drawFill --> bounds,org.jhotdraw.draw.TextAreaFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,drawStroke --> bounds,org.jhotdraw.draw.TextAreaFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,setBounds --> bounds,org.jhotdraw.draw.TextAreaFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,figureContains --> bounds,org.jhotdraw.draw.TextAreaFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,getBounds --> bounds,org.jhotdraw.draw.TextAreaFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,restoreTransformTo --> bounds,org.jhotdraw.draw.TextAreaFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,getTransformRestoreData --> bounds,org.jhotdraw.draw.TextAreaFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,isEditable --> editable,org.jhotdraw.draw.TextAreaFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,setEditable --> editable,org.jhotdraw.draw.TextAreaFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,clone --> bounds,org.jhotdraw.draw.TextAreaFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,clone --> bounds,org.jhotdraw.draw.TextAreaFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,readBounds --> bounds,org.jhotdraw.draw.TextAreaFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,writeBounds --> bounds,org.jhotdraw.draw.TextAreaFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,invalidate --> isTextOverflow,org.jhotdraw.draw.TextAreaFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,isTextOverflow --> isTextOverflow,org.jhotdraw.draw.TextAreaFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,isTextOverflow --> isTextOverflow,org.jhotdraw.draw.TextAreaFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,<clinit> --> dashes,org.jhotdraw.draw.TextAreaFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,drawText --> FONT_UNDERLINE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,drawText --> left,org.jhotdraw.geom.Insets2D$Double,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,drawText --> top,org.jhotdraw.geom.Insets2D$Double,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,drawText --> right,org.jhotdraw.geom.Insets2D$Double,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,drawText --> bottom,org.jhotdraw.geom.Insets2D$Double,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,drawParagraph --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$Alignment,org.jhotdraw.draw.TextAreaFigure$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,drawParagraph --> TEXT_ALIGNMENT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,getText --> TEXT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,getInsets --> STROKE_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,getInsets --> top,org.jhotdraw.geom.Insets2D$Double,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,getInsets --> left,org.jhotdraw.geom.Insets2D$Double,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,getInsets --> bottom,org.jhotdraw.geom.Insets2D$Double,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,getInsets --> right,org.jhotdraw.geom.Insets2D$Double,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,getBaseline --> top,org.jhotdraw.geom.Insets2D$Double,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,setText --> TEXT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,getTextColor --> TEXT_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,getFillColor --> FILL_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,setFontSize --> FONT_SIZE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,getFontSize --> FONT_SIZE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,isTextOverflow --> left,org.jhotdraw.geom.Insets2D$Double,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,isTextOverflow --> right,org.jhotdraw.geom.Insets2D$Double,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,isTextOverflow --> height,org.jhotdraw.geom.Dimension2DDouble,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,isTextOverflow --> top,org.jhotdraw.geom.Insets2D$Double,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,isTextOverflow --> bottom,org.jhotdraw.geom.Insets2D$Double,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure,getPreferredTextSize --> FONT_UNDERLINE,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,<init> --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,<init>$2 --> <init>,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,drawText --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,drawText --> getFontRenderContext,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,drawParagraph --> getFontRenderContext,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,drawParagraph --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,transform --> getStartPoint,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,transform --> getEndPoint,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,getText --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,getInsets --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,getInsets --> <init>$2,org.jhotdraw.geom.Insets2D$Double,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,getBaseline --> getFontRenderContext,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,setText --> set,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,getFont --> getFont,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,getTextColor --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,getFillColor --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,setFontSize --> set,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,getFontSize --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,getTool --> contains,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,getTool --> <init>,org.jhotdraw.draw.tool.TextAreaEditingTool,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,clone --> clone,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,createHandles --> createHandles,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,createHandles --> <init>,org.jhotdraw.draw.handle.FontSizeHandle,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,createHandles --> <init>,org.jhotdraw.draw.handle.TextOverflowHandle,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,readBounds --> getAttribute$3,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,writeBounds --> addAttribute$9,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,read --> readAttributes,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,write --> writeAttributes,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,invalidate --> invalidate,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,getPreferredTextSize --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,getPreferredTextSize --> getFontRenderContext,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure,getPreferredTextSize --> <init>$3,org.jhotdraw.geom.Dimension2DDouble,);
EndClass 55
StartClass 56
Class(org.jhotdraw.draw.tool.BezierTool,N,N,Public);
Attribute(DEBUG,boolean,Private,Y,Y,);
Attribute(finishWhenMouseReleased,java.lang.Boolean,Private,N,N,);
Attribute(attributes,java.util.Map,Protected,N,N,org.jhotdraw.draw.AttributeKey;java.lang.Object,);
Attribute(isToolDoneAfterCreation,boolean,Private,N,N,);
Attribute(prototype,org.jhotdraw.draw.BezierFigure,Private,N,N,);
Attribute(createdFigure,org.jhotdraw.draw.BezierFigure,Protected,N,N,);
Attribute(nodeCountBeforeDrag,int,Private,N,N,);
Attribute(presentationName,java.lang.String,Private,N,N,);
Attribute(mouseLocation,java.awt.Point,Private,N,N,);
Attribute(creationView,org.jhotdraw.draw.DrawingView,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(activate,void,Public,N,N);
Method(deactivate,void,Public,N,N);
Method(mousePressed,void,Public,N,N);
Method(createFigure,org.jhotdraw.draw.BezierFigure,Protected,N,N);
Method(getCreatedFigure,org.jhotdraw.draw.Figure,Protected,N,N);
Method(getAddedFigure,org.jhotdraw.draw.Figure,Protected,N,N);
Method(addPointToFigure,void,Protected,N,N);
Method(mouseClicked,void,Public,N,N);
Method(fireUndoEvent,void,Protected,N,N);
Method(mouseReleased,void,Public,N,N);
Method(finishCreation,void,Protected,N,N);
Method(mouseDragged,void,Public,N,N);
Method(draw,void,Public,N,N);
Method(mouseMoved,void,Public,N,N);
Method(calculateFittedCurve,org.jhotdraw.geom.BezierPath,Protected,N,N);
Method(setToolDoneAfterCreation,void,Public,N,N);
Method(isToolDoneAfterCreation,boolean,Public,N,N);
Method(access$000,java.lang.String,Public,Y,N);
Parameter(<init>,org.jhotdraw.draw.BezierFigure,);
Parameter(<init>$2,org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(<init>$2,java.util.Map,);
Parameter(<init>$3,org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(<init>$3,java.util.Map,);
Parameter(<init>$3,java.lang.String,);
Parameter(activate,org.jhotdraw.draw.DrawingEditor,);
Parameter(deactivate,org.jhotdraw.draw.DrawingEditor,);
Parameter(mousePressed,java.awt.event.MouseEvent,);
Parameter(addPointToFigure,java.awt.geom.Point2D$Double,);
Parameter(mouseClicked,java.awt.event.MouseEvent,);
Parameter(fireUndoEvent,org.jhotdraw.draw.Figure,);
Parameter(fireUndoEvent,org.jhotdraw.draw.DrawingView,);
Parameter(mouseReleased,java.awt.event.MouseEvent,);
Parameter(finishCreation,org.jhotdraw.draw.BezierFigure,);
Parameter(finishCreation,org.jhotdraw.draw.DrawingView,);
Parameter(mouseDragged,java.awt.event.MouseEvent,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(mouseMoved,java.awt.event.MouseEvent,);
Parameter(calculateFittedCurve,org.jhotdraw.geom.BezierPath,);
Parameter(setToolDoneAfterCreation,boolean,);
Parameter(access$000,org.jhotdraw.draw.tool.BezierTool,);
SuperClass(org.jhotdraw.draw.tool.AbstractTool);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.draw.tool.AbstractTool);
Composition(org.jhotdraw.draw.BezierFigure);
Composition(org.jhotdraw.draw.DrawingView);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,<init> --> <init>$2,org.jhotdraw.draw.tool.BezierTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,<init>$2 --> <init>$3,org.jhotdraw.draw.tool.BezierTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,deactivate --> finishCreation,org.jhotdraw.draw.tool.BezierTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mousePressed --> finishCreation,org.jhotdraw.draw.tool.BezierTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mousePressed --> createFigure,org.jhotdraw.draw.tool.BezierTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mousePressed --> addPointToFigure,org.jhotdraw.draw.tool.BezierTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseClicked --> finishCreation,org.jhotdraw.draw.tool.BezierTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseReleased --> calculateFittedCurve,org.jhotdraw.draw.tool.BezierTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseReleased --> finishCreation,org.jhotdraw.draw.tool.BezierTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,finishCreation --> fireUndoEvent,org.jhotdraw.draw.tool.BezierTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseDragged --> addPointToFigure,org.jhotdraw.draw.tool.BezierTool,);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,<init>$3 --> prototype,org.jhotdraw.draw.tool.BezierTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,<init>$3 --> attributes,org.jhotdraw.draw.tool.BezierTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,<init>$3 --> presentationName,org.jhotdraw.draw.tool.BezierTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,getPresentationName --> presentationName,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,deactivate --> createdFigure,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,deactivate --> mouseLocation,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,deactivate --> creationView,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,deactivate --> createdFigure,org.jhotdraw.draw.tool.BezierTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mousePressed --> mouseLocation,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mousePressed --> createdFigure,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mousePressed --> creationView,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mousePressed --> mouseLocation,org.jhotdraw.draw.tool.BezierTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mousePressed --> createdFigure,org.jhotdraw.draw.tool.BezierTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mousePressed --> creationView,org.jhotdraw.draw.tool.BezierTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mousePressed --> finishWhenMouseReleased,org.jhotdraw.draw.tool.BezierTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mousePressed --> nodeCountBeforeDrag,org.jhotdraw.draw.tool.BezierTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,createFigure --> prototype,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,createFigure --> attributes,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,getCreatedFigure --> createdFigure,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,getAddedFigure --> createdFigure,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,addPointToFigure --> createdFigure,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mouseClicked --> createdFigure,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mouseClicked --> creationView,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mouseClicked --> isToolDoneAfterCreation,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mouseClicked --> createdFigure,org.jhotdraw.draw.tool.BezierTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mouseClicked --> finishWhenMouseReleased,org.jhotdraw.draw.tool.BezierTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mouseReleased --> createdFigure,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mouseReleased --> nodeCountBeforeDrag,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mouseReleased --> finishWhenMouseReleased,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mouseReleased --> creationView,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mouseReleased --> mouseLocation,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mouseReleased --> nodeCountBeforeDrag,org.jhotdraw.draw.tool.BezierTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mouseReleased --> createdFigure,org.jhotdraw.draw.tool.BezierTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mouseReleased --> finishWhenMouseReleased,org.jhotdraw.draw.tool.BezierTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mouseReleased --> mouseLocation,org.jhotdraw.draw.tool.BezierTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,finishCreation --> isToolDoneAfterCreation,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mouseDragged --> finishWhenMouseReleased,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mouseDragged --> finishWhenMouseReleased,org.jhotdraw.draw.tool.BezierTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,draw --> createdFigure,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,draw --> mouseLocation,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,draw --> creationView,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mouseMoved --> createdFigure,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mouseMoved --> mouseLocation,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mouseMoved --> creationView,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mouseMoved --> mouseLocation,org.jhotdraw.draw.tool.BezierTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,setToolDoneAfterCreation --> isToolDoneAfterCreation,org.jhotdraw.draw.tool.BezierTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,isToolDoneAfterCreation --> isToolDoneAfterCreation,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,access$000 --> presentationName,org.jhotdraw.draw.tool.BezierTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,deactivate --> anchor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mousePressed --> anchor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mouseReleased --> anchor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mouseReleased --> isWorking,org.jhotdraw.draw.tool.AbstractTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,draw --> anchor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,draw --> isWorking,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool,mouseMoved --> anchor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,<init>$3 --> <init>,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,<init>$3 --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,<init>$3 --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,activate --> activate,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,activate --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,activate --> setCursor,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,deactivate --> deactivate,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,deactivate --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,deactivate --> setCursor,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,deactivate --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,deactivate --> isClosed,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,deactivate --> getStartPoint,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,deactivate --> drawingToView,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,deactivate --> fireAreaInvalidated$2,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mousePressed --> fireAreaInvalidated$2,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mousePressed --> mousePressed,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mousePressed --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mousePressed --> clearSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mousePressed --> getConstrainer,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mousePressed --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mousePressed --> constrainPoint,org.jhotdraw.draw.Constrainer,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mousePressed --> <init>$3,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mousePressed --> addNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mousePressed --> getDrawing,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mousePressed --> add,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mousePressed --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,createFigure --> clone,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,createFigure --> getEditor,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,createFigure --> applyDefaultAttributesTo,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,createFigure --> set,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,addPointToFigure --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,addPointToFigure --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,addPointToFigure --> <init>$3,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,addPointToFigure --> addNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,addPointToFigure --> getEndPoint,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,addPointToFigure --> getPoint$2,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,addPointToFigure --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,addPointToFigure --> getScaleFactor,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,addPointToFigure --> lineContainsPoint$3,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,addPointToFigure --> setPoint$2,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,addPointToFigure --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseClicked --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseClicked --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseClicked --> getStartPoint,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseClicked --> drawingToView,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseClicked --> setClosed,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseClicked --> fireToolDone,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,fireUndoEvent --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,fireUndoEvent --> getDrawing,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,fireUndoEvent --> <init>,org.jhotdraw.draw.tool.BezierTool$1,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,fireUndoEvent --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseReleased --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseReleased --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseReleased --> getBezierPath,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseReleased --> <init>,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseReleased --> setBezierPath,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseReleased --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseReleased --> maybeFireBoundsInvalidated,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseReleased --> fireAreaInvalidated$2,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,finishCreation --> addToSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,finishCreation --> fireToolDone,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseDragged --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseDragged --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,draw --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,draw --> isClosed,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,draw --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,draw --> getStartPoint,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,draw --> drawingToView,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseMoved --> isClosed,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseMoved --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseMoved --> getStartPoint,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseMoved --> drawingToView,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,mouseMoved --> fireAreaInvalidated$2,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,calculateFittedCurve --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,calculateFittedCurve --> getScaleFactor,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool,calculateFittedCurve --> fitBezierPath$3,org.jhotdraw.geom.Bezier,);
EndClass 56
StartClass 57
Class(org.jhotdraw.draw.tool.TextCreationTool,N,N,Public);
Attribute(textField,org.jhotdraw.draw.text.FloatingTextField,Private,N,N,);
Attribute(typingTarget,org.jhotdraw.draw.TextHolderFigure,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(deactivate,void,Public,N,N);
Method(mousePressed,void,Public,N,N);
Method(mouseDragged,void,Public,N,N);
Method(beginEdit,void,Protected,N,N);
Method(mouseReleased,void,Public,N,N);
Method(endEdit,void,Protected,N,N);
Method(keyReleased,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(creationFinished,void,Protected,N,N);
Method(isEditing,boolean,Public,N,N);
Method(updateCursor,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.TextHolderFigure,);
Parameter(<init>$2,org.jhotdraw.draw.TextHolderFigure,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(<init>$2,java.util.Map,);
Parameter(deactivate,org.jhotdraw.draw.DrawingEditor,);
Parameter(mousePressed,java.awt.event.MouseEvent,);
Parameter(mouseDragged,java.awt.event.MouseEvent,);
Parameter(beginEdit,org.jhotdraw.draw.TextHolderFigure,);
Parameter(mouseReleased,java.awt.event.MouseEvent,);
Parameter(keyReleased,java.awt.event.KeyEvent,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(creationFinished,org.jhotdraw.draw.Figure,);
Parameter(updateCursor,org.jhotdraw.draw.DrawingView,);
Parameter(updateCursor,java.awt.Point,);
SuperClass(org.jhotdraw.draw.tool.CreationTool);
SuperClass(org.jhotdraw.draw.tool.AbstractTool);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.draw.tool.CreationTool);
Composition(org.jhotdraw.draw.text.FloatingTextField);
Composition(org.jhotdraw.draw.TextHolderFigure);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,deactivate --> endEdit,org.jhotdraw.draw.tool.TextCreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,mousePressed --> endEdit,org.jhotdraw.draw.tool.TextCreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,mousePressed --> beginEdit,org.jhotdraw.draw.tool.TextCreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,mousePressed --> updateCursor,org.jhotdraw.draw.tool.TextCreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,beginEdit --> endEdit,org.jhotdraw.draw.tool.TextCreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,actionPerformed --> endEdit,org.jhotdraw.draw.tool.TextCreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,creationFinished --> beginEdit,org.jhotdraw.draw.tool.TextCreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,creationFinished --> updateCursor,org.jhotdraw.draw.tool.TextCreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,updateCursor --> isEditing,org.jhotdraw.draw.tool.TextCreationTool,);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextCreationTool,mousePressed --> typingTarget,org.jhotdraw.draw.tool.TextCreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextCreationTool,beginEdit --> textField,org.jhotdraw.draw.tool.TextCreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextCreationTool,beginEdit --> typingTarget,org.jhotdraw.draw.tool.TextCreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextCreationTool,beginEdit --> textField,org.jhotdraw.draw.tool.TextCreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextCreationTool,beginEdit --> typingTarget,org.jhotdraw.draw.tool.TextCreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextCreationTool,endEdit --> typingTarget,org.jhotdraw.draw.tool.TextCreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextCreationTool,endEdit --> textField,org.jhotdraw.draw.tool.TextCreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextCreationTool,endEdit --> typingTarget,org.jhotdraw.draw.tool.TextCreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextCreationTool,isEditing --> typingTarget,org.jhotdraw.draw.tool.TextCreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextCreationTool,endEdit --> createdFigure,org.jhotdraw.draw.tool.CreationTool,READ);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,<init> --> <init>$4,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,<init>$2 --> <init>$5,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,deactivate --> deactivate,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,mousePressed --> isToolDoneAfterCreation,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,mousePressed --> fireToolDone,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,mousePressed --> mousePressed,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,mousePressed --> getCreatedFigure,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,mousePressed --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,mousePressed --> clearSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,mousePressed --> addToSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,beginEdit --> <init>,org.jhotdraw.draw.text.FloatingTextField,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,beginEdit --> addActionListener,org.jhotdraw.draw.text.FloatingTextField,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,beginEdit --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,beginEdit --> createOverlay,org.jhotdraw.draw.text.FloatingTextField,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,beginEdit --> requestFocus,org.jhotdraw.draw.text.FloatingTextField,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,endEdit --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,endEdit --> getText,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,endEdit --> getText,org.jhotdraw.draw.text.FloatingTextField,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,endEdit --> setText,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,endEdit --> getDrawing,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,endEdit --> getAddedFigure,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,endEdit --> remove,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,endEdit --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,endEdit --> <init>,org.jhotdraw.draw.tool.TextCreationTool$1,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,endEdit --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,endEdit --> endOverlay,org.jhotdraw.draw.text.FloatingTextField,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,keyReleased --> isToolDoneAfterCreation,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,keyReleased --> fireToolDone,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,actionPerformed --> isToolDoneAfterCreation,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,actionPerformed --> fireToolDone,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,creationFinished --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,updateCursor --> isEnabled,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool,updateCursor --> setCursor,org.jhotdraw.draw.DrawingView,);
EndClass 57
StartClass 58
Class(org.jhotdraw.draw.DiamondFigure,N,N,Public);
Attribute(IS_QUADRATIC,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.lang.Boolean);
Attribute(rectangle,java.awt.geom.Rectangle2D$Double,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(drawFill,void,Protected,N,N);
Method(drawStroke,void,Protected,N,N);
Method(getBounds,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(getDrawingArea,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(contains,boolean,Public,N,N);
Method(setBounds,void,Public,N,N);
Method(transform,void,Public,N,N);
Method(restoreTransformTo,void,Public,N,N);
Method(getTransformRestoreData,java.lang.Object,Public,N,N);
Method(findConnector,org.jhotdraw.draw.connector.Connector,Public,N,N);
Method(findCompatibleConnector,org.jhotdraw.draw.connector.Connector,Public,N,N);
Method(clone,org.jhotdraw.draw.DiamondFigure,Public,N,N);
Method(clone$2,org.jhotdraw.draw.AbstractAttributedFigure,Public,N,N);
Method(clone$3,org.jhotdraw.draw.AbstractFigure,Public,N,N);
Method(clone$4,org.jhotdraw.draw.Figure,Public,N,N);
Method(clone$5,org.jhotdraw.beans.AbstractBean,Public,N,N);
Method(clone$6,java.lang.Object,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>$2,double,);
Parameter(<init>$2,double,);
Parameter(<init>$2,double,);
Parameter(<init>$2,double,);
Parameter(drawFill,java.awt.Graphics2D,);
Parameter(drawStroke,java.awt.Graphics2D,);
Parameter(contains,java.awt.geom.Point2D$Double,);
Parameter(setBounds,java.awt.geom.Point2D$Double,);
Parameter(setBounds,java.awt.geom.Point2D$Double,);
Parameter(transform,java.awt.geom.AffineTransform,);
Parameter(restoreTransformTo,java.lang.Object,);
Parameter(findConnector,java.awt.geom.Point2D$Double,);
Parameter(findConnector,org.jhotdraw.draw.ConnectionFigure,);
Parameter(findCompatibleConnector,org.jhotdraw.draw.connector.Connector,);
Parameter(findCompatibleConnector,boolean,);
SuperClass(org.jhotdraw.draw.AbstractAttributedFigure);
SuperClass(org.jhotdraw.draw.AbstractFigure);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.draw.AbstractAttributedFigure);
Composition(org.jhotdraw.draw.AttributeKey);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,<init> --> <init>$2,org.jhotdraw.draw.DiamondFigure,);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,transform --> setBounds,org.jhotdraw.draw.DiamondFigure,);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,clone$2 --> clone,org.jhotdraw.draw.DiamondFigure,);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,clone$3 --> clone,org.jhotdraw.draw.DiamondFigure,);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,clone$4 --> clone,org.jhotdraw.draw.DiamondFigure,);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,clone$5 --> clone,org.jhotdraw.draw.DiamondFigure,);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,clone$6 --> clone,org.jhotdraw.draw.DiamondFigure,);
Call(ATTRIBUTE,org.jhotdraw.draw.DiamondFigure,<init>$2 --> rectangle,org.jhotdraw.draw.DiamondFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DiamondFigure,drawFill --> rectangle,org.jhotdraw.draw.DiamondFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DiamondFigure,drawFill --> IS_QUADRATIC,org.jhotdraw.draw.DiamondFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DiamondFigure,drawStroke --> rectangle,org.jhotdraw.draw.DiamondFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DiamondFigure,drawStroke --> IS_QUADRATIC,org.jhotdraw.draw.DiamondFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DiamondFigure,getBounds --> rectangle,org.jhotdraw.draw.DiamondFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DiamondFigure,getDrawingArea --> rectangle,org.jhotdraw.draw.DiamondFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DiamondFigure,getDrawingArea --> IS_QUADRATIC,org.jhotdraw.draw.DiamondFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DiamondFigure,contains --> rectangle,org.jhotdraw.draw.DiamondFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DiamondFigure,contains --> IS_QUADRATIC,org.jhotdraw.draw.DiamondFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DiamondFigure,setBounds --> rectangle,org.jhotdraw.draw.DiamondFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DiamondFigure,restoreTransformTo --> rectangle,org.jhotdraw.draw.DiamondFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DiamondFigure,getTransformRestoreData --> rectangle,org.jhotdraw.draw.DiamondFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DiamondFigure,clone --> rectangle,org.jhotdraw.draw.DiamondFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DiamondFigure,clone --> rectangle,org.jhotdraw.draw.DiamondFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DiamondFigure,<clinit> --> IS_QUADRATIC,org.jhotdraw.draw.DiamondFigure,WRITE);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,<init>$2 --> <init>,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,drawFill --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,drawFill --> getPerpendicularFillGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,drawFill --> grow,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,drawStroke --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,drawStroke --> getPerpendicularDrawGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,drawStroke --> grow,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,getDrawingArea --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,getDrawingArea --> getPerpendicularHitGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,getDrawingArea --> grow,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,contains --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,contains --> getPerpendicularFillGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,contains --> grow,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,transform --> getStartPoint,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,transform --> getEndPoint,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,findConnector --> <init>$2,org.jhotdraw.draw.connector.ChopDiamondConnector,);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,findCompatibleConnector --> <init>$2,org.jhotdraw.draw.connector.ChopDiamondConnector,);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,clone --> clone,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.DiamondFigure,<clinit> --> <init>$2,org.jhotdraw.draw.AttributeKey,);
EndClass 58
StartClass 59
Class(org.jhotdraw.draw.LineConnectionFigure,N,N,Public);
Attribute(LINER_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(startConnector,org.jhotdraw.draw.connector.Connector,Private,N,N,);
Attribute(endConnector,org.jhotdraw.draw.connector.Connector,Private,N,N,);
Attribute(liner,org.jhotdraw.draw.liner.Liner,Private,N,N,);
Attribute(connectionHandler,org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(transform,void,Public,N,N);
Method(createHandles,java.util.Collection,Public,N,N);
Method(setConnectable,void,Public,N,N);
Method(updateConnection,void,Public,N,N);
Method(validate,void,Public,N,N);
Method(canConnect,boolean,Public,N,N);
Method(getEndConnector,org.jhotdraw.draw.connector.Connector,Public,N,N);
Method(getEndFigure,org.jhotdraw.draw.Figure,Public,N,N);
Method(getStartConnector,org.jhotdraw.draw.connector.Connector,Public,N,N);
Method(getStartFigure,org.jhotdraw.draw.Figure,Public,N,N);
Method(setEndConnector,void,Public,N,N);
Method(setStartConnector,void,Public,N,N);
Method(addNotify,void,Public,N,N);
Method(removeNotify,void,Public,N,N);
Method(handleDisconnect,void,Protected,N,N);
Method(handleConnect,void,Protected,N,N);
Method(clone,org.jhotdraw.draw.LineConnectionFigure,Public,N,N);
Method(remap,void,Public,N,N);
Method(canConnect$2,boolean,Public,N,N);
Method(handleMouseClick,boolean,Public,N,N);
Method(readPoints,void,Protected,N,N);
Method(read,void,Public,N,N);
Method(readLiner,void,Protected,N,N);
Method(write,void,Public,N,N);
Method(writeLiner,void,Protected,N,N);
Method(writePoints,void,Protected,N,N);
Method(setLiner,void,Public,N,N);
Method(setNode,void,Public,N,N);
Method(lineout,void,Public,N,N);
Method(getBezierPath,org.jhotdraw.geom.BezierPath,Public,N,N);
Method(getLiner,org.jhotdraw.draw.liner.Liner,Public,N,N);
Method(setStartPoint,void,Public,N,N);
Method(setPoint,void,Public,N,N);
Method(setEndPoint,void,Public,N,N);
Method(reverseConnection,void,Public,N,N);
Method(clone$2,org.jhotdraw.draw.BezierFigure,Public,N,N);
Method(clone$3,org.jhotdraw.draw.AbstractAttributedFigure,Public,N,N);
Method(clone$4,org.jhotdraw.draw.AbstractFigure,Public,N,N);
Method(clone$5,org.jhotdraw.draw.Figure,Public,N,N);
Method(clone$6,org.jhotdraw.beans.AbstractBean,Public,N,N);
Method(clone$7,java.lang.Object,Public,N,N);
Parameter(transform,java.awt.geom.AffineTransform,);
Parameter(createHandles,int,org.jhotdraw.draw.handle.Handle);
Parameter(setConnectable,boolean,);
Parameter(canConnect,org.jhotdraw.draw.connector.Connector,);
Parameter(canConnect,org.jhotdraw.draw.connector.Connector,);
Parameter(setEndConnector,org.jhotdraw.draw.connector.Connector,);
Parameter(setStartConnector,org.jhotdraw.draw.connector.Connector,);
Parameter(addNotify,org.jhotdraw.draw.Drawing,);
Parameter(removeNotify,org.jhotdraw.draw.Drawing,);
Parameter(handleDisconnect,org.jhotdraw.draw.connector.Connector,);
Parameter(handleDisconnect,org.jhotdraw.draw.connector.Connector,);
Parameter(handleConnect,org.jhotdraw.draw.connector.Connector,);
Parameter(handleConnect,org.jhotdraw.draw.connector.Connector,);
Parameter(remap,java.util.Map,org.jhotdraw.draw.Figure;org.jhotdraw.draw.Figure);
Parameter(remap,boolean,);
Parameter(canConnect$2,org.jhotdraw.draw.connector.Connector,);
Parameter(handleMouseClick,java.awt.geom.Point2D$Double,);
Parameter(handleMouseClick,java.awt.event.MouseEvent,);
Parameter(handleMouseClick,org.jhotdraw.draw.DrawingView,);
Parameter(readPoints,org.jhotdraw.xml.DOMInput,);
Parameter(read,org.jhotdraw.xml.DOMInput,);
Parameter(readLiner,org.jhotdraw.xml.DOMInput,);
Parameter(write,org.jhotdraw.xml.DOMOutput,);
Parameter(writeLiner,org.jhotdraw.xml.DOMOutput,);
Parameter(writePoints,org.jhotdraw.xml.DOMOutput,);
Parameter(setLiner,org.jhotdraw.draw.liner.Liner,);
Parameter(setNode,int,);
Parameter(setNode,org.jhotdraw.geom.BezierPath$Node,);
Parameter(setStartPoint,java.awt.geom.Point2D$Double,);
Parameter(setPoint,int,);
Parameter(setPoint,java.awt.geom.Point2D$Double,);
Parameter(setEndPoint,java.awt.geom.Point2D$Double,);
SuperClass(org.jhotdraw.draw.LineFigure);
SuperClass(org.jhotdraw.draw.BezierFigure);
SuperClass(org.jhotdraw.draw.AbstractAttributedFigure);
SuperClass(org.jhotdraw.draw.AbstractFigure);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.draw.LineFigure);
Realization(org.jhotdraw.draw.ConnectionFigure);
Composition(org.jhotdraw.draw.connector.Connector);
Composition(org.jhotdraw.draw.liner.Liner);
Composition(org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,transform --> updateConnection,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,createHandles --> getLiner,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,updateConnection --> getStartConnector,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,updateConnection --> setStartPoint,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,updateConnection --> getEndConnector,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,updateConnection --> setEndPoint,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,validate --> lineout,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setEndConnector --> getEndFigure,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setEndConnector --> getStartFigure,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setEndConnector --> getStartConnector,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setEndConnector --> getEndConnector,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setEndConnector --> handleDisconnect,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setEndConnector --> handleConnect,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setEndConnector --> updateConnection,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setStartConnector --> getStartFigure,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setStartConnector --> getEndFigure,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setStartConnector --> getStartConnector,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setStartConnector --> getEndConnector,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setStartConnector --> handleDisconnect,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setStartConnector --> handleConnect,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setStartConnector --> updateConnection,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,addNotify --> getStartConnector,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,addNotify --> getEndConnector,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,addNotify --> handleConnect,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,addNotify --> updateConnection,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,removeNotify --> getStartConnector,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,removeNotify --> getEndConnector,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,removeNotify --> handleDisconnect,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,clone --> getStartFigure,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,clone --> getEndFigure,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,clone --> updateConnection,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,remap --> getStartFigure,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,remap --> getEndFigure,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,remap --> getStartConnector,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,remap --> setStartConnector,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,remap --> getEndConnector,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,remap --> setEndConnector,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,remap --> updateConnection,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,handleMouseClick --> getLiner,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,readPoints --> setStartConnector,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,readPoints --> setEndConnector,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,read --> readLiner,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,read --> readPoints,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,write --> writePoints,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,write --> writeLiner,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,writePoints --> getStartConnector,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,writePoints --> getEndConnector,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setNode --> getStartConnector,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setNode --> setStartPoint,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setNode --> getEndConnector,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setNode --> setEndPoint,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setStartPoint --> setPoint,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setEndPoint --> setPoint,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,reverseConnection --> handleDisconnect,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,reverseConnection --> setStartPoint,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,reverseConnection --> setEndPoint,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,reverseConnection --> handleConnect,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,reverseConnection --> updateConnection,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,clone$2 --> clone,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,clone$3 --> clone,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,clone$4 --> clone,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,clone$5 --> clone,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,clone$6 --> clone,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,clone$7 --> clone,org.jhotdraw.draw.LineConnectionFigure,);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,<init> --> connectionHandler,org.jhotdraw.draw.LineConnectionFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,getEndConnector --> endConnector,org.jhotdraw.draw.LineConnectionFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,getEndFigure --> endConnector,org.jhotdraw.draw.LineConnectionFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,getStartConnector --> startConnector,org.jhotdraw.draw.LineConnectionFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,getStartFigure --> startConnector,org.jhotdraw.draw.LineConnectionFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,setEndConnector --> endConnector,org.jhotdraw.draw.LineConnectionFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,setEndConnector --> connectionHandler,org.jhotdraw.draw.LineConnectionFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,setEndConnector --> endConnector,org.jhotdraw.draw.LineConnectionFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,setStartConnector --> startConnector,org.jhotdraw.draw.LineConnectionFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,setStartConnector --> connectionHandler,org.jhotdraw.draw.LineConnectionFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,setStartConnector --> startConnector,org.jhotdraw.draw.LineConnectionFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,clone --> liner,org.jhotdraw.draw.LineConnectionFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,clone --> startConnector,org.jhotdraw.draw.LineConnectionFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,clone --> connectionHandler,org.jhotdraw.draw.LineConnectionFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,clone --> endConnector,org.jhotdraw.draw.LineConnectionFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,clone --> connectionHandler,org.jhotdraw.draw.LineConnectionFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,clone --> liner,org.jhotdraw.draw.LineConnectionFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,clone --> startConnector,org.jhotdraw.draw.LineConnectionFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,clone --> endConnector,org.jhotdraw.draw.LineConnectionFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,readLiner --> liner,org.jhotdraw.draw.LineConnectionFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,writeLiner --> liner,org.jhotdraw.draw.LineConnectionFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,setLiner --> liner,org.jhotdraw.draw.LineConnectionFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,setLiner --> liner,org.jhotdraw.draw.LineConnectionFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,lineout --> liner,org.jhotdraw.draw.LineConnectionFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,getLiner --> liner,org.jhotdraw.draw.LineConnectionFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,reverseConnection --> startConnector,org.jhotdraw.draw.LineConnectionFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,reverseConnection --> endConnector,org.jhotdraw.draw.LineConnectionFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,reverseConnection --> startConnector,org.jhotdraw.draw.LineConnectionFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,reverseConnection --> endConnector,org.jhotdraw.draw.LineConnectionFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure,getBezierPath --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,<init> --> <init>,org.jhotdraw.draw.LineFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,<init> --> <init>$2,org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,transform --> transform,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,createHandles --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,createHandles --> <init>$2,org.jhotdraw.draw.handle.BezierOutlineHandle,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,createHandles --> <init>,org.jhotdraw.draw.handle.BezierOutlineHandle,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,createHandles --> <init>,org.jhotdraw.draw.handle.BezierNodeHandle,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,createHandles --> <init>,org.jhotdraw.draw.handle.ConnectionStartHandle,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,createHandles --> <init>,org.jhotdraw.draw.handle.ConnectionEndHandle,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setConnectable --> setConnectable,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,updateConnection --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,updateConnection --> findStart,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,updateConnection --> findEnd,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,updateConnection --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,validate --> validate,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,canConnect --> getOwner,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,canConnect --> isConnectable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,getEndFigure --> getOwner,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,getStartFigure --> getOwner,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setEndConnector --> removeFigureListener,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setEndConnector --> getDrawing,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setEndConnector --> addFigureListener,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setStartConnector --> removeFigureListener,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setStartConnector --> addFigureListener,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,addNotify --> addNotify,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,removeNotify --> removeNotify,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,clone --> clone,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,clone --> <init>$2,org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,clone --> clone,org.jhotdraw.draw.liner.Liner,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,clone --> clone,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,clone --> addFigureListener,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,remap --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,remap --> remap,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,remap --> findCompatibleConnector,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,remap --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,canConnect$2 --> getOwner,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,canConnect$2 --> isConnectable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,handleMouseClick --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,handleMouseClick --> getScaleFactor,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,handleMouseClick --> splitSegment$2,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,handleMouseClick --> getNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,handleMouseClick --> <init>,org.jhotdraw.draw.LineConnectionFigure$1,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,handleMouseClick --> fireUndoableEditHappened,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,handleMouseClick --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,readPoints --> readPoints,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,readPoints --> openElement$2,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,readPoints --> readObject,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,readPoints --> closeElement,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,read --> readAttributes,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,readLiner --> getElementCount$2,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,readLiner --> openElement$2,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,readLiner --> readObject,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,readLiner --> closeElement,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,write --> writeAttributes,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,writeLiner --> openElement,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,writeLiner --> writeObject,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,writeLiner --> closeElement,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,writePoints --> writePoints,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,writePoints --> openElement,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,writePoints --> writeObject,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,writePoints --> closeElement,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setLiner --> firePropertyChange$3,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setNode --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setNode --> findStart,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setNode --> findEnd,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setNode --> setNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,lineout --> lineout,org.jhotdraw.draw.liner.Liner,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setPoint --> setPoint$2,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,setEndPoint --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,reverseConnection --> getStartPoint,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure,reverseConnection --> getEndPoint,org.jhotdraw.draw.BezierFigure,);
EndClass 59
StartClass 60
Class(org.jhotdraw.draw.TextFigure,N,N,Public);
Attribute(origin,java.awt.geom.Point2D$Double,Protected,N,N,);
Attribute(editable,boolean,Protected,N,N,);
Attribute(textLayout,java.awt.font.TextLayout,Protected,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(drawStroke,void,Protected,N,N);
Method(drawFill,void,Protected,N,N);
Method(drawText,void,Protected,N,N);
Method(transform,void,Public,N,N);
Method(setBounds,void,Public,N,N);
Method(figureContains,boolean,Public,N,N);
Method(getTextLayout,java.awt.font.TextLayout,Protected,N,N);
Method(getBounds,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(getPreferredSize,org.jhotdraw.geom.Dimension2DDouble,Public,N,N);
Method(getBaseline,double,Public,N,N);
Method(getFigureDrawingArea,java.awt.geom.Rectangle2D$Double,Protected,N,N);
Method(restoreTransformTo,void,Public,N,N);
Method(getTransformRestoreData,java.lang.Object,Public,N,N);
Method(getText,java.lang.String,Public,N,N);
Method(setText,void,Public,N,N);
Method(getTextColumns,int,Public,N,N);
Method(getTabSize,int,Public,N,N);
Method(getLabelFor,org.jhotdraw.draw.TextHolderFigure,Public,N,N);
Method(getInsets,org.jhotdraw.geom.Insets2D$Double,Public,N,N);
Method(getFont,java.awt.Font,Public,N,N);
Method(getTextColor,java.awt.Color,Public,N,N);
Method(getFillColor,java.awt.Color,Public,N,N);
Method(setFontSize,void,Public,N,N);
Method(getFontSize,float,Public,N,N);
Method(isEditable,boolean,Public,N,N);
Method(setEditable,void,Public,N,N);
Method(createHandles,java.util.Collection,Public,N,N);
Method(getTool,org.jhotdraw.draw.tool.Tool,Public,N,N);
Method(invalidate,void,Public,N,N);
Method(validate,void,Protected,N,N);
Method(read,void,Public,N,N);
Method(write,void,Public,N,N);
Method(clone,org.jhotdraw.draw.TextFigure,Public,N,N);
Method(isTextOverflow,boolean,Public,N,N);
Method(clone$2,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,Public,N,N);
Method(clone$3,org.jhotdraw.draw.Figure,Public,N,N);
Method(clone$4,org.jhotdraw.draw.AbstractAttributedFigure,Public,N,N);
Method(clone$5,org.jhotdraw.draw.AbstractFigure,Public,N,N);
Method(clone$6,org.jhotdraw.beans.AbstractBean,Public,N,N);
Method(clone$7,java.lang.Object,Public,N,N);
Parameter(<init>$2,java.lang.String,);
Parameter(drawStroke,java.awt.Graphics2D,);
Parameter(drawFill,java.awt.Graphics2D,);
Parameter(drawText,java.awt.Graphics2D,);
Parameter(transform,java.awt.geom.AffineTransform,);
Parameter(setBounds,java.awt.geom.Point2D$Double,);
Parameter(setBounds,java.awt.geom.Point2D$Double,);
Parameter(figureContains,java.awt.geom.Point2D$Double,);
Parameter(restoreTransformTo,java.lang.Object,);
Parameter(setText,java.lang.String,);
Parameter(setFontSize,float,);
Parameter(setEditable,boolean,);
Parameter(createHandles,int,org.jhotdraw.draw.handle.Handle);
Parameter(getTool,java.awt.geom.Point2D$Double,);
Parameter(read,org.jhotdraw.xml.DOMInput,);
Parameter(write,org.jhotdraw.xml.DOMOutput,);
SuperClass(org.jhotdraw.draw.AbstractAttributedDecoratedFigure);
SuperClass(org.jhotdraw.draw.AbstractAttributedFigure);
SuperClass(org.jhotdraw.draw.AbstractFigure);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.draw.AbstractAttributedDecoratedFigure);
Realization(org.jhotdraw.draw.TextHolderFigure);
Call(METHOD,org.jhotdraw.draw.TextFigure,<init> --> <init>$2,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,<init>$2 --> setText,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,drawText --> getText,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,drawText --> isEditable,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,drawText --> getTextLayout,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,figureContains --> getBounds,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,getTextLayout --> getText,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,getTextLayout --> getFont,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,getBounds --> getTextLayout,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,getPreferredSize --> getBounds,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,getBaseline --> getTextLayout,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,getBaseline --> getBounds,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,getFigureDrawingArea --> getText,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,getFigureDrawingArea --> getBounds,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,getFigureDrawingArea --> getTextLayout,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,getTool --> isEditable,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,read --> setBounds,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,read --> invalidate,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,write --> getBounds,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,clone$2 --> clone,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,clone$3 --> clone,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,clone$4 --> clone,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,clone$5 --> clone,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,clone$6 --> clone,org.jhotdraw.draw.TextFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,clone$7 --> clone,org.jhotdraw.draw.TextFigure,);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,<init>$2 --> origin,org.jhotdraw.draw.TextFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,<init>$2 --> editable,org.jhotdraw.draw.TextFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,drawText --> origin,org.jhotdraw.draw.TextFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,transform --> origin,org.jhotdraw.draw.TextFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,setBounds --> origin,org.jhotdraw.draw.TextFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,getTextLayout --> textLayout,org.jhotdraw.draw.TextFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,getTextLayout --> textLayout,org.jhotdraw.draw.TextFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,getBounds --> origin,org.jhotdraw.draw.TextFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,getBaseline --> origin,org.jhotdraw.draw.TextFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,getFigureDrawingArea --> origin,org.jhotdraw.draw.TextFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,restoreTransformTo --> origin,org.jhotdraw.draw.TextFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,getTransformRestoreData --> origin,org.jhotdraw.draw.TextFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,isEditable --> editable,org.jhotdraw.draw.TextFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,setEditable --> editable,org.jhotdraw.draw.TextFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,invalidate --> textLayout,org.jhotdraw.draw.TextFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,validate --> textLayout,org.jhotdraw.draw.TextFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,clone --> origin,org.jhotdraw.draw.TextFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,clone --> origin,org.jhotdraw.draw.TextFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,clone --> textLayout,org.jhotdraw.draw.TextFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,getTextLayout --> FONT_UNDERLINE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,getText --> TEXT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,setText --> TEXT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,getTextColor --> TEXT_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,getFillColor --> FILL_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,setFontSize --> FONT_SIZE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextFigure,getFontSize --> FONT_SIZE,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.TextFigure,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.TextFigure,<init> --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.TextFigure,<init>$2 --> <init>,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,getTextLayout --> getFontRenderContext,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,getTextLayout --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,getPreferredSize --> <init>$3,org.jhotdraw.geom.Dimension2DDouble,);
Call(METHOD,org.jhotdraw.draw.TextFigure,getFigureDrawingArea --> grow,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.TextFigure,getText --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,setText --> set,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,getInsets --> <init>,org.jhotdraw.geom.Insets2D$Double,);
Call(METHOD,org.jhotdraw.draw.TextFigure,getFont --> getFont,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.TextFigure,getTextColor --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,getFillColor --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,setFontSize --> set,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,getFontSize --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,createHandles --> <init>$2,org.jhotdraw.draw.handle.BoundsOutlineHandle,);
Call(METHOD,org.jhotdraw.draw.TextFigure,createHandles --> <init>,org.jhotdraw.draw.handle.BoundsOutlineHandle,);
Call(METHOD,org.jhotdraw.draw.TextFigure,createHandles --> northWest,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.TextFigure,createHandles --> <init>,org.jhotdraw.draw.handle.MoveHandle,);
Call(METHOD,org.jhotdraw.draw.TextFigure,createHandles --> northEast,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.TextFigure,createHandles --> southWest,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.TextFigure,createHandles --> southEast,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.TextFigure,createHandles --> <init>,org.jhotdraw.draw.handle.FontSizeHandle,);
Call(METHOD,org.jhotdraw.draw.TextFigure,getTool --> contains,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,getTool --> <init>,org.jhotdraw.draw.tool.TextEditingTool,);
Call(METHOD,org.jhotdraw.draw.TextFigure,invalidate --> invalidate,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,validate --> validate,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,read --> getAttribute$3,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.TextFigure,read --> readAttributes,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,read --> readDecorator,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,write --> addAttribute$9,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.TextFigure,write --> writeAttributes,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,write --> writeDecorator,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.TextFigure,clone --> clone,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
EndClass 60
StartClass 61
Class(org.jhotdraw.draw.TriangleFigure,N,N,Public);
Attribute(rectangle,java.awt.geom.Rectangle2D$Double,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(findConnector,org.jhotdraw.draw.connector.Connector,Public,N,N);
Method(findCompatibleConnector,org.jhotdraw.draw.connector.Connector,Public,N,N);
Method(getBounds,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(drawFill,void,Protected,N,N);
Method(drawStroke,void,Protected,N,N);
Method(createHandles,java.util.Collection,Public,N,N);
Method(getBezierPath,org.jhotdraw.geom.BezierPath,Public,N,N);
Method(contains,boolean,Public,N,N);
Method(setBounds,void,Public,N,N);
Method(getDrawingArea,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(chop,java.awt.geom.Point2D$Double,Public,N,N);
Method(transform,void,Public,N,N);
Method(clone,org.jhotdraw.draw.TriangleFigure,Public,N,N);
Method(restoreTransformTo,void,Public,N,N);
Method(getTransformRestoreData,java.lang.Object,Public,N,N);
Method(clone$2,org.jhotdraw.draw.AbstractAttributedFigure,Public,N,N);
Method(clone$3,org.jhotdraw.draw.AbstractFigure,Public,N,N);
Method(clone$4,org.jhotdraw.draw.Figure,Public,N,N);
Method(clone$5,org.jhotdraw.beans.AbstractBean,Public,N,N);
Method(clone$6,java.lang.Object,Public,N,N);
Parameter(<init>$2,org.jhotdraw.draw.AttributeKeys$Orientation,);
Parameter(<init>$3,double,);
Parameter(<init>$3,double,);
Parameter(<init>$3,double,);
Parameter(<init>$3,double,);
Parameter(<init>$4,double,);
Parameter(<init>$4,double,);
Parameter(<init>$4,double,);
Parameter(<init>$4,double,);
Parameter(<init>$4,org.jhotdraw.draw.AttributeKeys$Orientation,);
Parameter(findConnector,java.awt.geom.Point2D$Double,);
Parameter(findConnector,org.jhotdraw.draw.ConnectionFigure,);
Parameter(findCompatibleConnector,org.jhotdraw.draw.connector.Connector,);
Parameter(findCompatibleConnector,boolean,);
Parameter(drawFill,java.awt.Graphics2D,);
Parameter(drawStroke,java.awt.Graphics2D,);
Parameter(createHandles,int,org.jhotdraw.draw.handle.Handle);
Parameter(contains,java.awt.geom.Point2D$Double,);
Parameter(setBounds,java.awt.geom.Point2D$Double,);
Parameter(setBounds,java.awt.geom.Point2D$Double,);
Parameter(chop,java.awt.geom.Point2D$Double,);
Parameter(transform,java.awt.geom.AffineTransform,);
Parameter(restoreTransformTo,java.lang.Object,);
SuperClass(org.jhotdraw.draw.AbstractAttributedFigure);
SuperClass(org.jhotdraw.draw.AbstractFigure);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.draw.AbstractAttributedFigure);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,<init> --> <init>$3,org.jhotdraw.draw.TriangleFigure,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,<init>$2 --> <init>$4,org.jhotdraw.draw.TriangleFigure,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,<init>$3 --> <init>$4,org.jhotdraw.draw.TriangleFigure,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,drawFill --> getBezierPath,org.jhotdraw.draw.TriangleFigure,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,drawStroke --> getBezierPath,org.jhotdraw.draw.TriangleFigure,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,contains --> getBezierPath,org.jhotdraw.draw.TriangleFigure,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,getDrawingArea --> getBounds,org.jhotdraw.draw.TriangleFigure,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,chop --> getBezierPath,org.jhotdraw.draw.TriangleFigure,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,transform --> setBounds,org.jhotdraw.draw.TriangleFigure,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,clone$2 --> clone,org.jhotdraw.draw.TriangleFigure,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,clone$3 --> clone,org.jhotdraw.draw.TriangleFigure,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,clone$4 --> clone,org.jhotdraw.draw.TriangleFigure,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,clone$5 --> clone,org.jhotdraw.draw.TriangleFigure,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,clone$6 --> clone,org.jhotdraw.draw.TriangleFigure,);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure,<init>$4 --> rectangle,org.jhotdraw.draw.TriangleFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure,getBounds --> rectangle,org.jhotdraw.draw.TriangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure,getBezierPath --> rectangle,org.jhotdraw.draw.TriangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure,setBounds --> rectangle,org.jhotdraw.draw.TriangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure,clone --> rectangle,org.jhotdraw.draw.TriangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure,clone --> rectangle,org.jhotdraw.draw.TriangleFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure,restoreTransformTo --> rectangle,org.jhotdraw.draw.TriangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure,getTransformRestoreData --> rectangle,org.jhotdraw.draw.TriangleFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure,<init>$3 --> NORTH,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure,<init>$4 --> ORIENTATION,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure,drawFill --> STROKE_MITER_LIMIT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure,drawStroke --> STROKE_MITER_LIMIT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure,getBezierPath --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$Orientation,org.jhotdraw.draw.TriangleFigure$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure,getBezierPath --> ORIENTATION,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure,contains --> STROKE_MITER_LIMIT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure,getDrawingArea --> STROKE_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure,getDrawingArea --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,org.jhotdraw.draw.TriangleFigure$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure,getDrawingArea --> STROKE_PLACEMENT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure,getDrawingArea --> STROKE_JOIN,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure,getDrawingArea --> STROKE_MITER_LIMIT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure,chop --> STROKE_MITER_LIMIT,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,<init>$4 --> <init>,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,<init>$4 --> set,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,findConnector --> <init>$2,org.jhotdraw.draw.connector.ChopTriangleConnector,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,findCompatibleConnector --> <init>$2,org.jhotdraw.draw.connector.ChopTriangleConnector,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,drawFill --> getPerpendicularFillGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,drawFill --> getStrokeTotalWidth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,drawFill --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,drawFill --> <init>,org.jhotdraw.geom.GrowStroke,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,drawFill --> createStrokedShape,org.jhotdraw.geom.GrowStroke,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,drawStroke --> getPerpendicularDrawGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,drawStroke --> getStrokeTotalWidth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,drawStroke --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,drawStroke --> <init>,org.jhotdraw.geom.GrowStroke,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,drawStroke --> createStrokedShape,org.jhotdraw.geom.GrowStroke,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,createHandles --> createHandles,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,createHandles --> <init>,org.jhotdraw.draw.handle.OrientationHandle,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,getBezierPath --> <init>,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,getBezierPath --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,getBezierPath --> moveTo,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,getBezierPath --> lineTo,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,getBezierPath --> setClosed,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,contains --> getPerpendicularHitGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,contains --> getStrokeTotalWidth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,contains --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,contains --> <init>,org.jhotdraw.geom.GrowStroke,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,contains --> createStrokedShape,org.jhotdraw.geom.GrowStroke,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,getDrawingArea --> getStrokeTotalWidth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,getDrawingArea --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,getDrawingArea --> grow,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,chop --> getPerpendicularHitGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,chop --> getStrokeTotalWidth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,chop --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,chop --> <init>,org.jhotdraw.geom.GrowStroke,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,chop --> createStrokedShape,org.jhotdraw.geom.GrowStroke,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,chop --> chop,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,transform --> getStartPoint,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,transform --> getEndPoint,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure,clone --> clone,org.jhotdraw.draw.AbstractAttributedFigure,);
EndClass 61
StartClass 62
Class(org.jhotdraw.draw.Figure,Y,Y,Public);
Attribute(CONNECTABLE_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(REMOVABLE_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(SELECTABLE_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(TRANSFORMABLE_PROPERTY,java.lang.String,Public,Y,Y,);
Method(draw,void,Public,N,Y);
Method(getLayer,int,Public,N,Y);
Method(isVisible,boolean,Public,N,Y);
Method(setBounds,void,Public,N,Y);
Method(getStartPoint,java.awt.geom.Point2D$Double,Public,N,Y);
Method(getEndPoint,java.awt.geom.Point2D$Double,Public,N,Y);
Method(getBounds,java.awt.geom.Rectangle2D$Double,Public,N,Y);
Method(getDrawingArea,java.awt.geom.Rectangle2D$Double,Public,N,Y);
Method(getPreferredSize,org.jhotdraw.geom.Dimension2DDouble,Public,N,Y);
Method(contains,boolean,Public,N,Y);
Method(getTransformRestoreData,java.lang.Object,Public,N,Y);
Method(restoreTransformTo,void,Public,N,Y);
Method(transform,void,Public,N,Y);
Method(set,void,Public,N,Y);
Method(get,java.lang.Object,Public,N,Y);
Method(getAttributes,java.util.Map,Public,N,Y);
Method(getAttributesRestoreData,java.lang.Object,Public,N,Y);
Method(restoreAttributesTo,void,Public,N,Y);
Method(isSelectable,boolean,Public,N,Y);
Method(isRemovable,boolean,Public,N,Y);
Method(isTransformable,boolean,Public,N,Y);
Method(createHandles,java.util.Collection,Public,N,Y);
Method(getCursor,java.awt.Cursor,Public,N,Y);
Method(getActions,java.util.Collection,Public,N,Y);
Method(getTool,org.jhotdraw.draw.tool.Tool,Public,N,Y);
Method(getToolTipText,java.lang.String,Public,N,Y);
Method(isConnectable,boolean,Public,N,Y);
Method(findConnector,org.jhotdraw.draw.connector.Connector,Public,N,Y);
Method(findCompatibleConnector,org.jhotdraw.draw.connector.Connector,Public,N,Y);
Method(getConnectors,java.util.Collection,Public,N,Y);
Method(includes,boolean,Public,N,Y);
Method(findFigureInside,org.jhotdraw.draw.Figure,Public,N,Y);
Method(getDecomposition,java.util.Collection,Public,N,Y);
Method(clone,org.jhotdraw.draw.Figure,Public,N,Y);
Method(remap,void,Public,N,Y);
Method(addNotify,void,Public,N,Y);
Method(removeNotify,void,Public,N,Y);
Method(willChange,void,Public,N,Y);
Method(changed,void,Public,N,Y);
Method(requestRemove,void,Public,N,Y);
Method(handleDrop,boolean,Public,N,Y);
Method(handleMouseClick,boolean,Public,N,Y);
Method(addFigureListener,void,Public,N,Y);
Method(removeFigureListener,void,Public,N,Y);
Method(addPropertyChangeListener,void,Public,N,Y);
Method(removePropertyChangeListener,void,Public,N,Y);
Parameter(draw,java.awt.Graphics2D,);
Parameter(setBounds,java.awt.geom.Point2D$Double,);
Parameter(setBounds,java.awt.geom.Point2D$Double,);
Parameter(contains,java.awt.geom.Point2D$Double,);
Parameter(restoreTransformTo,java.lang.Object,);
Parameter(transform,java.awt.geom.AffineTransform,);
Parameter(set,org.jhotdraw.draw.AttributeKey,);
Parameter(set,java.lang.Object,);
Parameter(get,org.jhotdraw.draw.AttributeKey,);
Parameter(restoreAttributesTo,java.lang.Object,);
Parameter(createHandles,int,org.jhotdraw.draw.handle.Handle);
Parameter(getCursor,java.awt.geom.Point2D$Double,);
Parameter(getActions,java.awt.geom.Point2D$Double,javax.swing.Action);
Parameter(getTool,java.awt.geom.Point2D$Double,);
Parameter(getToolTipText,java.awt.geom.Point2D$Double,);
Parameter(findConnector,java.awt.geom.Point2D$Double,);
Parameter(findConnector,org.jhotdraw.draw.ConnectionFigure,);
Parameter(findCompatibleConnector,org.jhotdraw.draw.connector.Connector,);
Parameter(findCompatibleConnector,boolean,);
Parameter(getConnectors,org.jhotdraw.draw.ConnectionFigure,org.jhotdraw.draw.connector.Connector);
Parameter(includes,org.jhotdraw.draw.Figure,);
Parameter(findFigureInside,java.awt.geom.Point2D$Double,);
Parameter(remap,java.util.Map,org.jhotdraw.draw.Figure;org.jhotdraw.draw.Figure);
Parameter(remap,boolean,);
Parameter(addNotify,org.jhotdraw.draw.Drawing,);
Parameter(removeNotify,org.jhotdraw.draw.Drawing,);
Parameter(handleDrop,java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure);
Parameter(handleDrop,java.util.Collection,);
Parameter(handleDrop,org.jhotdraw.draw.DrawingView,);
Parameter(handleMouseClick,java.awt.geom.Point2D$Double,);
Parameter(handleMouseClick,java.awt.event.MouseEvent,);
Parameter(handleMouseClick,org.jhotdraw.draw.DrawingView,);
Parameter(addFigureListener,org.jhotdraw.draw.event.FigureListener,);
Parameter(removeFigureListener,org.jhotdraw.draw.event.FigureListener,);
Parameter(addPropertyChangeListener,java.beans.PropertyChangeListener,);
Parameter(removePropertyChangeListener,java.beans.PropertyChangeListener,);
EndClass 62
StartClass 63
Class(org.jhotdraw.draw.LineFigure,N,N,Public);
Method(<init>,void,Public,N,N);
Method(createHandles,java.util.Collection,Public,N,N);
Method(handleMouseClick,boolean,Public,N,N);
Parameter(createHandles,int,org.jhotdraw.draw.handle.Handle);
Parameter(handleMouseClick,java.awt.geom.Point2D$Double,);
Parameter(handleMouseClick,java.awt.event.MouseEvent,);
Parameter(handleMouseClick,org.jhotdraw.draw.DrawingView,);
SuperClass(org.jhotdraw.draw.BezierFigure);
SuperClass(org.jhotdraw.draw.AbstractAttributedFigure);
SuperClass(org.jhotdraw.draw.AbstractFigure);
SuperClass(org.jhotdraw.beans.AbstractBean);
SubClass(org.jhotdraw.draw.LineConnectionFigure);
Generalization(org.jhotdraw.draw.BezierFigure);
Call(ATTRIBUTE,org.jhotdraw.draw.LineFigure,createHandles --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(METHOD,org.jhotdraw.draw.LineFigure,<init> --> <init>,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.LineFigure,<init> --> <init>$3,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.LineFigure,<init> --> addNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.LineFigure,<init> --> setConnectable,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.LineFigure,createHandles --> <init>$2,org.jhotdraw.draw.handle.BezierOutlineHandle,);
Call(METHOD,org.jhotdraw.draw.LineFigure,createHandles --> <init>,org.jhotdraw.draw.handle.BezierOutlineHandle,);
Call(METHOD,org.jhotdraw.draw.LineFigure,createHandles --> <init>,org.jhotdraw.draw.handle.BezierNodeHandle,);
Call(METHOD,org.jhotdraw.draw.LineFigure,handleMouseClick --> getHandleDetailLevel,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.LineFigure,handleMouseClick --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.LineFigure,handleMouseClick --> getScaleFactor,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.LineFigure,handleMouseClick --> splitSegment$2,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.LineFigure,handleMouseClick --> getNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.LineFigure,handleMouseClick --> <init>,org.jhotdraw.draw.LineFigure$1,);
Call(METHOD,org.jhotdraw.draw.LineFigure,handleMouseClick --> fireUndoableEditHappened,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.LineFigure,handleMouseClick --> changed,org.jhotdraw.draw.AbstractFigure,);
EndClass 63
StartClass 64
Class(org.jhotdraw.gui.JFileURIChooser,N,N,Public);
Method(<init>,void,Public,N,N);
Method(setSelectedURI,void,Public,N,N);
Method(getSelectedURI,java.net.URI,Public,N,N);
Method(getComponent,javax.swing.JComponent,Public,N,N);
Parameter(setSelectedURI,java.net.URI,);
Realization(org.jhotdraw.gui.URIChooser);
EndClass 64
StartClass 65
Class(org.jhotdraw.draw.BezierFigure,N,N,Public);
Attribute(path,org.jhotdraw.geom.BezierPath,Protected,N,N,);
Attribute(cappedPath,org.jhotdraw.geom.BezierPath,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(findConnector,org.jhotdraw.draw.connector.Connector,Public,N,N);
Method(findCompatibleConnector,org.jhotdraw.draw.connector.Connector,Public,N,N);
Method(drawStroke,void,Protected,N,N);
Method(drawCaps,void,Protected,N,N);
Method(drawFill,void,Protected,N,N);
Method(contains,boolean,Public,N,N);
Method(createHandles,java.util.Collection,Public,N,N);
Method(getBounds,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(getDrawingArea,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(validate,void,Protected,N,N);
Method(getBezierPath,org.jhotdraw.geom.BezierPath,Public,N,N);
Method(setBezierPath,void,Public,N,N);
Method(getPointOnPath,java.awt.geom.Point2D$Double,Public,N,N);
Method(isClosed,boolean,Public,N,N);
Method(setClosed,void,Public,N,N);
Method(set,void,Public,N,N);
Method(setBounds,void,Public,N,N);
Method(transform,void,Public,N,N);
Method(invalidate,void,Public,N,N);
Method(getCappedPath,org.jhotdraw.geom.BezierPath,Protected,N,N);
Method(layout,void,Public,N,N);
Method(addNode,void,Public,N,N);
Method(addNode$2,void,Public,N,N);
Method(setNode,void,Public,N,N);
Method(getNode,org.jhotdraw.geom.BezierPath$Node,Public,N,N);
Method(getPoint,java.awt.geom.Point2D$Double,Public,N,N);
Method(getPoint$2,java.awt.geom.Point2D$Double,Public,N,N);
Method(setPoint,void,Public,N,N);
Method(setPoint$2,void,Public,N,N);
Method(setStartPoint,void,Public,N,N);
Method(setEndPoint,void,Public,N,N);
Method(getStartPoint,java.awt.geom.Point2D$Double,Public,N,N);
Method(getEndPoint,java.awt.geom.Point2D$Double,Public,N,N);
Method(findNode,int,Public,N,N);
Method(findSegment,int,Public,N,N);
Method(joinSegments,boolean,Public,N,N);
Method(splitSegment,int,Public,N,N);
Method(removeNode,org.jhotdraw.geom.BezierPath$Node,Public,N,N);
Method(removeAllNodes,void,Protected,N,N);
Method(getNodeCount,int,Public,N,N);
Method(clone,org.jhotdraw.draw.BezierFigure,Public,N,N);
Method(restoreTransformTo,void,Public,N,N);
Method(getTransformRestoreData,java.lang.Object,Public,N,N);
Method(chop,java.awt.geom.Point2D$Double,Public,N,N);
Method(getCenter,java.awt.geom.Point2D$Double,Public,N,N);
Method(getOutermostPoint,java.awt.geom.Point2D$Double,Public,N,N);
Method(joinSegments$2,int,Public,N,N);
Method(splitSegment$2,int,Public,N,N);
Method(handleMouseClick,boolean,Public,N,N);
Method(write,void,Public,N,N);
Method(writePoints,void,Protected,N,N);
Method(read,void,Public,N,N);
Method(readPoints,void,Protected,N,N);
Method(clone$2,org.jhotdraw.draw.AbstractAttributedFigure,Public,N,N);
Method(clone$3,org.jhotdraw.draw.AbstractFigure,Public,N,N);
Method(clone$4,org.jhotdraw.draw.Figure,Public,N,N);
Method(clone$5,org.jhotdraw.beans.AbstractBean,Public,N,N);
Method(clone$6,java.lang.Object,Public,N,N);
Parameter(<init>$2,boolean,);
Parameter(findConnector,java.awt.geom.Point2D$Double,);
Parameter(findConnector,org.jhotdraw.draw.ConnectionFigure,);
Parameter(findCompatibleConnector,org.jhotdraw.draw.connector.Connector,);
Parameter(findCompatibleConnector,boolean,);
Parameter(drawStroke,java.awt.Graphics2D,);
Parameter(drawCaps,java.awt.Graphics2D,);
Parameter(drawFill,java.awt.Graphics2D,);
Parameter(contains,java.awt.geom.Point2D$Double,);
Parameter(createHandles,int,org.jhotdraw.draw.handle.Handle);
Parameter(setBezierPath,org.jhotdraw.geom.BezierPath,);
Parameter(getPointOnPath,float,);
Parameter(getPointOnPath,double,);
Parameter(setClosed,boolean,);
Parameter(set,org.jhotdraw.draw.AttributeKey,);
Parameter(set,java.lang.Object,);
Parameter(setBounds,java.awt.geom.Point2D$Double,);
Parameter(setBounds,java.awt.geom.Point2D$Double,);
Parameter(transform,java.awt.geom.AffineTransform,);
Parameter(addNode,org.jhotdraw.geom.BezierPath$Node,);
Parameter(addNode$2,int,);
Parameter(addNode$2,org.jhotdraw.geom.BezierPath$Node,);
Parameter(setNode,int,);
Parameter(setNode,org.jhotdraw.geom.BezierPath$Node,);
Parameter(getNode,int,);
Parameter(getPoint,int,);
Parameter(getPoint$2,int,);
Parameter(getPoint$2,int,);
Parameter(setPoint,int,);
Parameter(setPoint,java.awt.geom.Point2D$Double,);
Parameter(setPoint$2,int,);
Parameter(setPoint$2,int,);
Parameter(setPoint$2,java.awt.geom.Point2D$Double,);
Parameter(setStartPoint,java.awt.geom.Point2D$Double,);
Parameter(setEndPoint,java.awt.geom.Point2D$Double,);
Parameter(findNode,java.awt.geom.Point2D$Double,);
Parameter(findSegment,java.awt.geom.Point2D$Double,);
Parameter(findSegment,double,);
Parameter(joinSegments,java.awt.geom.Point2D$Double,);
Parameter(joinSegments,double,);
Parameter(splitSegment,java.awt.geom.Point2D$Double,);
Parameter(splitSegment,double,);
Parameter(removeNode,int,);
Parameter(restoreTransformTo,java.lang.Object,);
Parameter(chop,java.awt.geom.Point2D$Double,);
Parameter(joinSegments$2,java.awt.geom.Point2D$Double,);
Parameter(joinSegments$2,float,);
Parameter(splitSegment$2,java.awt.geom.Point2D$Double,);
Parameter(splitSegment$2,float,);
Parameter(handleMouseClick,java.awt.geom.Point2D$Double,);
Parameter(handleMouseClick,java.awt.event.MouseEvent,);
Parameter(handleMouseClick,org.jhotdraw.draw.DrawingView,);
Parameter(write,org.jhotdraw.xml.DOMOutput,);
Parameter(writePoints,org.jhotdraw.xml.DOMOutput,);
Parameter(read,org.jhotdraw.xml.DOMInput,);
Parameter(readPoints,org.jhotdraw.xml.DOMInput,);
SuperClass(org.jhotdraw.draw.AbstractAttributedFigure);
SuperClass(org.jhotdraw.draw.AbstractFigure);
SuperClass(org.jhotdraw.beans.AbstractBean);
SubClass(org.jhotdraw.draw.LineConnectionFigure);
SubClass(org.jhotdraw.draw.LineFigure);
Generalization(org.jhotdraw.draw.AbstractAttributedFigure);
Composition(org.jhotdraw.geom.BezierPath);
Call(METHOD,org.jhotdraw.draw.BezierFigure,<init> --> <init>$2,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,<init>$2 --> set,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,drawStroke --> isClosed,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,drawStroke --> getCappedPath,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,drawStroke --> drawCaps,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,drawCaps --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,drawCaps --> getCappedPath,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,drawFill --> isClosed,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,contains --> isClosed,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,contains --> getCappedPath,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getDrawingArea --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getDrawingArea --> getPoint$2,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,setBezierPath --> setClosed,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,setClosed --> set,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,set --> invalidate,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,setBounds --> setStartPoint,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,setBounds --> setEndPoint,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,setBounds --> invalidate,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,transform --> invalidate,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getCappedPath --> isClosed,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,addNode --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,addNode --> addNode$2,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,addNode$2 --> invalidate,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,setNode --> invalidate,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,setPoint --> invalidate,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,setPoint$2 --> setNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,setStartPoint --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,setStartPoint --> addNode$2,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,setStartPoint --> setPoint,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,setEndPoint --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,setEndPoint --> addNode$2,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,setEndPoint --> setPoint,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getStartPoint --> getPoint$2,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getEndPoint --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getEndPoint --> getPoint$2,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,findSegment --> getBezierPath,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,joinSegments --> findSegment,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,joinSegments --> removeNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,splitSegment --> findSegment,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,splitSegment --> addNode$2,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,clone --> invalidate,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,chop --> isClosed,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,handleMouseClick --> splitSegment,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,handleMouseClick --> getNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,write --> writePoints,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,writePoints --> isClosed,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,writePoints --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,writePoints --> getNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,read --> readPoints,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,readPoints --> setClosed,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,clone$2 --> clone,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,clone$3 --> clone,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,clone$4 --> clone,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,clone$5 --> clone,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,clone$6 --> clone,org.jhotdraw.draw.BezierFigure,);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,<init>$2 --> path,org.jhotdraw.draw.BezierFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,drawStroke --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,drawCaps --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,drawFill --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,contains --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,createHandles --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,getBounds --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,validate --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,validate --> cappedPath,org.jhotdraw.draw.BezierFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,getBezierPath --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,setBezierPath --> path,org.jhotdraw.draw.BezierFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,getPointOnPath --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,set --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,transform --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,invalidate --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,invalidate --> cappedPath,org.jhotdraw.draw.BezierFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,getCappedPath --> cappedPath,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,getCappedPath --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,getCappedPath --> cappedPath,org.jhotdraw.draw.BezierFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,addNode$2 --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,setNode --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,getNode --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,getPoint --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,getPoint$2 --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,setPoint --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,setPoint$2 --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,findNode --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,removeNode --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,removeAllNodes --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,getNodeCount --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,clone --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,clone --> path,org.jhotdraw.draw.BezierFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,restoreTransformTo --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,getTransformRestoreData --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,chop --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,getCenter --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,getOutermostPoint --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,joinSegments$2 --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,splitSegment$2 --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,readPoints --> path,org.jhotdraw.draw.BezierFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,<init>$2 --> PATH_CLOSED,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,drawStroke --> STROKE_MITER_LIMIT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,drawCaps --> START_DECORATION,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,drawCaps --> END_DECORATION,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,drawFill --> UNCLOSED_PATH_FILLED,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,drawFill --> STROKE_MITER_LIMIT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,contains --> FILL_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,contains --> UNCLOSED_PATH_FILLED,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,contains --> STROKE_MITER_LIMIT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,contains --> START_DECORATION,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,contains --> END_DECORATION,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,getDrawingArea --> START_DECORATION,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,getDrawingArea --> END_DECORATION,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,isClosed --> PATH_CLOSED,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,setClosed --> PATH_CLOSED,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,set --> PATH_CLOSED,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,set --> WINDING_RULE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,set --> EVEN_ODD,org.jhotdraw.draw.AttributeKeys$WindingRule,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,getCappedPath --> START_DECORATION,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,getCappedPath --> END_DECORATION,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,setPoint --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,setPoint --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,findNode --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,findNode --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,chop --> STROKE_MITER_LIMIT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,writePoints --> mask,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,writePoints --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,writePoints --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure,readPoints --> keepColinear,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(METHOD,org.jhotdraw.draw.BezierFigure,<init>$2 --> <init>,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,<init>$2 --> <init>,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,findConnector --> <init>$2,org.jhotdraw.draw.connector.ChopBezierConnector,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,findCompatibleConnector --> <init>$2,org.jhotdraw.draw.connector.ChopBezierConnector,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,drawStroke --> getPerpendicularDrawGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,drawStroke --> getStrokeTotalWidth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,drawStroke --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,drawStroke --> <init>,org.jhotdraw.geom.GrowStroke,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,drawStroke --> createStrokedShape,org.jhotdraw.geom.GrowStroke,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,drawCaps --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,drawCaps --> get,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,drawCaps --> draw,org.jhotdraw.draw.decoration.LineDecoration,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,drawFill --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,drawFill --> getPerpendicularFillGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,drawFill --> getStrokeTotalWidth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,drawFill --> <init>,org.jhotdraw.geom.GrowStroke,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,drawFill --> createStrokedShape,org.jhotdraw.geom.GrowStroke,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,contains --> getStrokeTotalWidth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,contains --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,contains --> contains,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,contains --> getPerpendicularHitGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,contains --> <init>,org.jhotdraw.geom.GrowStroke,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,contains --> createStrokedShape,org.jhotdraw.geom.GrowStroke,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,contains --> outlineContains,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,contains --> get,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,contains --> lineContainsPoint$3,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,createHandles --> <init>$2,org.jhotdraw.draw.handle.BezierOutlineHandle,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,createHandles --> <init>,org.jhotdraw.draw.handle.BezierOutlineHandle,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,createHandles --> <init>,org.jhotdraw.draw.handle.BezierNodeHandle,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,createHandles --> addTransformHandles,org.jhotdraw.draw.handle.TransformHandleKit,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,createHandles --> <init>,org.jhotdraw.draw.handle.BezierScaleHandle,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getBounds --> getBounds2D,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getDrawingArea --> getDrawingArea,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getDrawingArea --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getDrawingArea --> getDrawingArea,org.jhotdraw.draw.decoration.LineDecoration,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,validate --> validate,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,validate --> invalidatePath,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getBezierPath --> clone,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,setBezierPath --> clone,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,setBezierPath --> isClosed,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getPointOnPath --> getPointOnPath,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,isClosed --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,setClosed --> setConnectable,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,set --> setClosed,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,set --> setWindingRule,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,set --> set,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,transform --> transform,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,invalidate --> invalidate,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,invalidate --> invalidatePath,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getCappedPath --> clone,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getCappedPath --> setClosed,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getCappedPath --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getCappedPath --> getMask,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getCappedPath --> getControlPoint,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getCappedPath --> getDecorationRadius,org.jhotdraw.draw.decoration.LineDecoration,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getCappedPath --> length$3,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getCappedPath --> cap,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getCappedPath --> set,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getCappedPath --> invalidatePath,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getNode --> clone,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getPoint --> getControlPoint,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getPoint$2 --> getControlPoint,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,setPoint$2 --> <init>$2,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,setPoint$2 --> setControlPoint,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,setStartPoint --> <init>$5,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,setEndPoint --> <init>$5,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,findSegment --> findSegment,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,splitSegment --> <init>$3,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,clone --> clone,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,clone --> clone,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,restoreTransformTo --> setTo,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getTransformRestoreData --> clone,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,chop --> getPerpendicularHitGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,chop --> chop,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,chop --> getStrokeTotalWidth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,chop --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,chop --> <init>,org.jhotdraw.geom.GrowStroke,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,chop --> createStrokedShape,org.jhotdraw.geom.GrowStroke,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,chop --> chop,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getCenter --> getCenter,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getOutermostPoint --> indexOfOutermostNode,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,getOutermostPoint --> getControlPoint,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,joinSegments$2 --> joinSegments,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,splitSegment$2 --> splitSegment,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,handleMouseClick --> getHandleDetailLevel,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,handleMouseClick --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,handleMouseClick --> getScaleFactor,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,handleMouseClick --> <init>,org.jhotdraw.draw.BezierFigure$1,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,handleMouseClick --> fireUndoableEditHappened,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,handleMouseClick --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,write --> writeAttributes,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,writePoints --> openElement,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,writePoints --> addAttribute$5,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,writePoints --> addAttribute$4,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,writePoints --> addAttribute$9,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,writePoints --> addAttribute$10,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,writePoints --> closeElement,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,read --> readAttributes,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,readPoints --> openElement$2,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,readPoints --> getAttribute$4,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,readPoints --> getElementCount$2,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,readPoints --> openElement$3,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,readPoints --> getAttribute$2,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,readPoints --> getAttribute$3,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,readPoints --> <init>$6,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,readPoints --> invalidatePath,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.draw.BezierFigure,readPoints --> closeElement,org.jhotdraw.xml.DOMInput,);
EndClass 65
StartClass 66
Class(org.jhotdraw.draw.ConnectionFigure,Y,Y,Public);
Method(setStartConnector,void,Public,N,Y);
Method(getStartConnector,org.jhotdraw.draw.connector.Connector,Public,N,Y);
Method(setEndConnector,void,Public,N,Y);
Method(getEndConnector,org.jhotdraw.draw.connector.Connector,Public,N,Y);
Method(updateConnection,void,Public,N,Y);
Method(canConnect,boolean,Public,N,Y);
Method(canConnect$2,boolean,Public,N,Y);
Method(setStartPoint,void,Public,N,Y);
Method(setEndPoint,void,Public,N,Y);
Method(setPoint,void,Public,N,Y);
Method(getNodeCount,int,Public,N,Y);
Method(getPoint,java.awt.geom.Point2D$Double,Public,N,Y);
Method(getNode,org.jhotdraw.geom.BezierPath$Node,Public,N,Y);
Method(setNode,void,Public,N,Y);
Method(getStartPoint,java.awt.geom.Point2D$Double,Public,N,Y);
Method(getEndPoint,java.awt.geom.Point2D$Double,Public,N,Y);
Method(getStartFigure,org.jhotdraw.draw.Figure,Public,N,Y);
Method(getEndFigure,org.jhotdraw.draw.Figure,Public,N,Y);
Method(getLiner,org.jhotdraw.draw.liner.Liner,Public,N,Y);
Method(setLiner,void,Public,N,Y);
Method(lineout,void,Public,N,Y);
Parameter(setStartConnector,org.jhotdraw.draw.connector.Connector,);
Parameter(setEndConnector,org.jhotdraw.draw.connector.Connector,);
Parameter(canConnect,org.jhotdraw.draw.connector.Connector,);
Parameter(canConnect,org.jhotdraw.draw.connector.Connector,);
Parameter(canConnect$2,org.jhotdraw.draw.connector.Connector,);
Parameter(setStartPoint,java.awt.geom.Point2D$Double,);
Parameter(setEndPoint,java.awt.geom.Point2D$Double,);
Parameter(setPoint,int,);
Parameter(setPoint,java.awt.geom.Point2D$Double,);
Parameter(getPoint,int,);
Parameter(getNode,int,);
Parameter(setNode,int,);
Parameter(setNode,org.jhotdraw.geom.BezierPath$Node,);
Parameter(setLiner,org.jhotdraw.draw.liner.Liner,);
Realization(org.jhotdraw.draw.Figure);
EndClass 66
StartClass 67
Class(org.jhotdraw.gui.filechooser.ExtensionFileFilter,N,N,Public);
Attribute(description,java.lang.String,Private,N,N,);
Attribute(extensions,java.util.HashSet,Private,N,N,java.lang.String);
Attribute(defaultExtension,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getExtensions,java.util.Set,Public,N,N);
Method(accept,boolean,Public,N,N);
Method(makeAcceptable,java.io.File,Public,N,N);
Method(getDescription,java.lang.String,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.String,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,java.lang.String[],);
Parameter(accept,java.io.File,);
Parameter(makeAcceptable,java.io.File,);
Call(METHOD,org.jhotdraw.gui.filechooser.ExtensionFileFilter,makeAcceptable --> accept,org.jhotdraw.gui.filechooser.ExtensionFileFilter,);
Call(ATTRIBUTE,org.jhotdraw.gui.filechooser.ExtensionFileFilter,<init> --> extensions,org.jhotdraw.gui.filechooser.ExtensionFileFilter,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.filechooser.ExtensionFileFilter,<init> --> description,org.jhotdraw.gui.filechooser.ExtensionFileFilter,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.filechooser.ExtensionFileFilter,<init> --> extensions,org.jhotdraw.gui.filechooser.ExtensionFileFilter,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.filechooser.ExtensionFileFilter,<init> --> defaultExtension,org.jhotdraw.gui.filechooser.ExtensionFileFilter,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.filechooser.ExtensionFileFilter,<init>$2 --> extensions,org.jhotdraw.gui.filechooser.ExtensionFileFilter,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.filechooser.ExtensionFileFilter,<init>$2 --> description,org.jhotdraw.gui.filechooser.ExtensionFileFilter,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.filechooser.ExtensionFileFilter,<init>$2 --> extensions,org.jhotdraw.gui.filechooser.ExtensionFileFilter,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.filechooser.ExtensionFileFilter,<init>$2 --> defaultExtension,org.jhotdraw.gui.filechooser.ExtensionFileFilter,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.filechooser.ExtensionFileFilter,getExtensions --> extensions,org.jhotdraw.gui.filechooser.ExtensionFileFilter,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.filechooser.ExtensionFileFilter,accept --> extensions,org.jhotdraw.gui.filechooser.ExtensionFileFilter,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.filechooser.ExtensionFileFilter,makeAcceptable --> defaultExtension,org.jhotdraw.gui.filechooser.ExtensionFileFilter,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.filechooser.ExtensionFileFilter,getDescription --> description,org.jhotdraw.gui.filechooser.ExtensionFileFilter,READ);
EndClass 67
StartClass 68
Class(org.jhotdraw.draw.ImageFigure,N,N,Public);
Attribute(rectangle,java.awt.geom.Rectangle2D$Double,Private,N,N,);
Attribute(imageData,byte[],Private,N,N,);
Attribute(bufferedImage,java.awt.image.BufferedImage,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(drawFigure,void,Protected,N,N);
Method(drawFill,void,Protected,N,N);
Method(drawImage,void,Protected,N,N);
Method(drawStroke,void,Protected,N,N);
Method(getBounds,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(getFigureDrawingArea,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(figureContains,boolean,Public,N,N);
Method(setBounds,void,Public,N,N);
Method(transform,void,Public,N,N);
Method(restoreTransformTo,void,Public,N,N);
Method(getTransformRestoreData,java.lang.Object,Public,N,N);
Method(getActions,java.util.Collection,Public,N,N);
Method(findConnector,org.jhotdraw.draw.connector.Connector,Public,N,N);
Method(findCompatibleConnector,org.jhotdraw.draw.connector.Connector,Public,N,N);
Method(clone,org.jhotdraw.draw.ImageFigure,Public,N,N);
Method(read,void,Public,N,N);
Method(write,void,Public,N,N);
Method(setImage,void,Public,N,N);
Method(setImageData,void,Public,N,N);
Method(setBufferedImage,void,Public,N,N);
Method(getBufferedImage,java.awt.image.BufferedImage,Public,N,N);
Method(getImageData,byte[],Public,N,N);
Method(loadImage,void,Public,N,N);
Method(loadImage$2,void,Public,N,N);
Method(writeObject,void,Private,N,N);
Method(clone$2,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,Public,N,N);
Method(clone$3,org.jhotdraw.draw.Figure,Public,N,N);
Method(clone$4,org.jhotdraw.draw.AbstractAttributedFigure,Public,N,N);
Method(clone$5,org.jhotdraw.draw.AbstractFigure,Public,N,N);
Method(clone$6,org.jhotdraw.beans.AbstractBean,Public,N,N);
Method(clone$7,java.lang.Object,Public,N,N);
Parameter(<init>$2,double,);
Parameter(<init>$2,double,);
Parameter(<init>$2,double,);
Parameter(<init>$2,double,);
Parameter(drawFigure,java.awt.Graphics2D,);
Parameter(drawFill,java.awt.Graphics2D,);
Parameter(drawImage,java.awt.Graphics2D,);
Parameter(drawStroke,java.awt.Graphics2D,);
Parameter(figureContains,java.awt.geom.Point2D$Double,);
Parameter(setBounds,java.awt.geom.Point2D$Double,);
Parameter(setBounds,java.awt.geom.Point2D$Double,);
Parameter(transform,java.awt.geom.AffineTransform,);
Parameter(restoreTransformTo,java.lang.Object,);
Parameter(getActions,java.awt.geom.Point2D$Double,javax.swing.Action);
Parameter(findConnector,java.awt.geom.Point2D$Double,);
Parameter(findConnector,org.jhotdraw.draw.ConnectionFigure,);
Parameter(findCompatibleConnector,org.jhotdraw.draw.connector.Connector,);
Parameter(findCompatibleConnector,boolean,);
Parameter(read,org.jhotdraw.xml.DOMInput,);
Parameter(write,org.jhotdraw.xml.DOMOutput,);
Parameter(setImage,byte[],);
Parameter(setImage,java.awt.image.BufferedImage,);
Parameter(setImageData,byte[],);
Parameter(setBufferedImage,java.awt.image.BufferedImage,);
Parameter(loadImage,java.io.File,);
Parameter(loadImage$2,java.io.InputStream,);
Parameter(writeObject,java.io.ObjectOutputStream,);
SuperClass(org.jhotdraw.draw.AbstractAttributedDecoratedFigure);
SuperClass(org.jhotdraw.draw.AbstractAttributedFigure);
SuperClass(org.jhotdraw.draw.AbstractFigure);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.draw.AbstractAttributedDecoratedFigure);
Realization(org.jhotdraw.draw.ImageHolderFigure);
Call(METHOD,org.jhotdraw.draw.ImageFigure,<init> --> <init>$2,org.jhotdraw.draw.ImageFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,drawFigure --> drawFill,org.jhotdraw.draw.ImageFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,drawFigure --> drawImage,org.jhotdraw.draw.ImageFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,drawFigure --> drawStroke,org.jhotdraw.draw.ImageFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,drawImage --> getBufferedImage,org.jhotdraw.draw.ImageFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,transform --> setBounds,org.jhotdraw.draw.ImageFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,read --> setImageData,org.jhotdraw.draw.ImageFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,write --> getImageData,org.jhotdraw.draw.ImageFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,loadImage --> loadImage$2,org.jhotdraw.draw.ImageFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,writeObject --> getImageData,org.jhotdraw.draw.ImageFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,clone$2 --> clone,org.jhotdraw.draw.ImageFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,clone$3 --> clone,org.jhotdraw.draw.ImageFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,clone$4 --> clone,org.jhotdraw.draw.ImageFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,clone$5 --> clone,org.jhotdraw.draw.ImageFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,clone$6 --> clone,org.jhotdraw.draw.ImageFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,clone$7 --> clone,org.jhotdraw.draw.ImageFigure,);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,<init>$2 --> rectangle,org.jhotdraw.draw.ImageFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,drawFill --> rectangle,org.jhotdraw.draw.ImageFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,drawImage --> rectangle,org.jhotdraw.draw.ImageFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,drawStroke --> rectangle,org.jhotdraw.draw.ImageFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,getBounds --> rectangle,org.jhotdraw.draw.ImageFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,getFigureDrawingArea --> rectangle,org.jhotdraw.draw.ImageFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,figureContains --> rectangle,org.jhotdraw.draw.ImageFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,setBounds --> rectangle,org.jhotdraw.draw.ImageFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,restoreTransformTo --> rectangle,org.jhotdraw.draw.ImageFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,getTransformRestoreData --> rectangle,org.jhotdraw.draw.ImageFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,clone --> rectangle,org.jhotdraw.draw.ImageFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,clone --> rectangle,org.jhotdraw.draw.ImageFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,setImage --> imageData,org.jhotdraw.draw.ImageFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,setImage --> bufferedImage,org.jhotdraw.draw.ImageFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,setImageData --> imageData,org.jhotdraw.draw.ImageFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,setImageData --> bufferedImage,org.jhotdraw.draw.ImageFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,setBufferedImage --> imageData,org.jhotdraw.draw.ImageFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,setBufferedImage --> bufferedImage,org.jhotdraw.draw.ImageFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,getBufferedImage --> bufferedImage,org.jhotdraw.draw.ImageFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,getBufferedImage --> imageData,org.jhotdraw.draw.ImageFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,getBufferedImage --> bufferedImage,org.jhotdraw.draw.ImageFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,getBufferedImage --> imageData,org.jhotdraw.draw.ImageFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,getImageData --> bufferedImage,org.jhotdraw.draw.ImageFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,getImageData --> imageData,org.jhotdraw.draw.ImageFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,getImageData --> imageData,org.jhotdraw.draw.ImageFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,getImageData --> bufferedImage,org.jhotdraw.draw.ImageFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,loadImage$2 --> imageData,org.jhotdraw.draw.ImageFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,loadImage$2 --> bufferedImage,org.jhotdraw.draw.ImageFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,drawFigure --> FILL_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,drawFigure --> STROKE_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,drawFigure --> STROKE_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,drawFigure --> TEXT_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,drawFigure --> TEXT_SHADOW_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,drawFigure --> TEXT_SHADOW_OFFSET,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,drawFigure --> width,org.jhotdraw.geom.Dimension2DDouble,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.ImageFigure,drawFigure --> height,org.jhotdraw.geom.Dimension2DDouble,READ);
Call(METHOD,org.jhotdraw.draw.ImageFigure,<init>$2 --> <init>,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,drawFigure --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,drawFigure --> getStroke,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,drawFigure --> drawText,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,drawFill --> getPerpendicularFillGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,drawFill --> grow,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,drawStroke --> getPerpendicularDrawGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,drawStroke --> grow,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,getFigureDrawingArea --> getPerpendicularHitGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,getFigureDrawingArea --> grow,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,figureContains --> getPerpendicularHitGrowth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,figureContains --> grow,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,transform --> getStartPoint,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,transform --> getEndPoint,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,findConnector --> <init>$2,org.jhotdraw.draw.connector.ChopRectangleConnector,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,findCompatibleConnector --> <init>$2,org.jhotdraw.draw.connector.ChopRectangleConnector,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,clone --> clone,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,read --> read,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,read --> getElementCount$2,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,read --> openElement$2,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,read --> getText,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,read --> decode$2,org.jhotdraw.io.Base64,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,read --> closeElement,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,write --> write,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,write --> openElement,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,write --> encodeBytes,org.jhotdraw.io.Base64,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,write --> addText,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,write --> closeElement,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,setImage --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,setImage --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,setImageData --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,setImageData --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,setBufferedImage --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,setBufferedImage --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,loadImage --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,loadImage --> getFormatted,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,loadImage$2 --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.ImageFigure,loadImage$2 --> getFormatted,org.jhotdraw.util.ResourceBundleUtil,);
EndClass 68
StartClass 69
Class(org.jhotdraw.draw.AttributeKey,N,N,Public);
Attribute(key,java.lang.String,Private,N,N,);
Attribute(defaultValue,java.lang.Object,Private,N,N,,);
Attribute(isNullValueAllowed,boolean,Private,N,N,);
Attribute(labels,org.jhotdraw.util.ResourceBundleUtil,Private,N,N,);
Attribute(clazz,java.lang.Class,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(getKey,java.lang.String,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(getDefaultValue,java.lang.Object,Public,N,N);
Method(getClone,java.lang.Object,Public,N,N);
Method(get,java.lang.Object,Public,N,N);
Method(get$2,java.lang.Object,Public,N,N);
Method(set,void,Public,N,N);
Method(setUndoable,javax.swing.undo.UndoableEdit,Public,N,N);
Method(setClone,void,Public,N,N);
Method(putClone,void,Public,N,N);
Method(put,java.lang.Object,Public,N,N);
Method(isNullValueAllowed,boolean,Public,N,N);
Method(isAssignable,boolean,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(equals,boolean,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.Class,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,java.lang.Class,);
Parameter(<init>$2,java.lang.Object,);
Parameter(<init>$3,java.lang.String,);
Parameter(<init>$3,java.lang.Class,);
Parameter(<init>$3,java.lang.Object,);
Parameter(<init>$3,boolean,);
Parameter(<init>$4,java.lang.String,);
Parameter(<init>$4,java.lang.Class,);
Parameter(<init>$4,java.lang.Object,);
Parameter(<init>$4,boolean,);
Parameter(<init>$4,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(getClone,org.jhotdraw.draw.Figure,);
Parameter(get,org.jhotdraw.draw.Figure,);
Parameter(get$2,java.util.Map,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(set,org.jhotdraw.draw.Figure,);
Parameter(set,java.lang.Object,);
Parameter(setUndoable,org.jhotdraw.draw.Figure,);
Parameter(setUndoable,java.lang.Object,);
Parameter(setClone,org.jhotdraw.draw.Figure,);
Parameter(setClone,java.lang.Object,);
Parameter(putClone,java.util.Map,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(putClone,java.lang.Object,);
Parameter(put,java.util.Map,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(put,java.lang.Object,);
Parameter(isAssignable,java.lang.Object,);
Parameter(equals,java.lang.Object,);
Composition(org.jhotdraw.util.ResourceBundleUtil);
Call(METHOD,org.jhotdraw.draw.AttributeKey,<init> --> <init>$3,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.AttributeKey,<init>$2 --> <init>$3,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.AttributeKey,<init>$3 --> <init>$4,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.AttributeKey,putClone --> put,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.AttributeKey,isAssignable --> isNullValueAllowed,org.jhotdraw.draw.AttributeKey,);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey,<init>$4 --> key,org.jhotdraw.draw.AttributeKey,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey,<init>$4 --> clazz,org.jhotdraw.draw.AttributeKey,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey,<init>$4 --> defaultValue,org.jhotdraw.draw.AttributeKey,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey,<init>$4 --> isNullValueAllowed,org.jhotdraw.draw.AttributeKey,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey,<init>$4 --> labels,org.jhotdraw.draw.AttributeKey,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey,getKey --> key,org.jhotdraw.draw.AttributeKey,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey,getPresentationName --> labels,org.jhotdraw.draw.AttributeKey,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey,getPresentationName --> key,org.jhotdraw.draw.AttributeKey,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey,getDefaultValue --> defaultValue,org.jhotdraw.draw.AttributeKey,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey,getClone --> clazz,org.jhotdraw.draw.AttributeKey,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey,get$2 --> defaultValue,org.jhotdraw.draw.AttributeKey,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey,set --> isNullValueAllowed,org.jhotdraw.draw.AttributeKey,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey,set --> key,org.jhotdraw.draw.AttributeKey,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey,setUndoable --> isNullValueAllowed,org.jhotdraw.draw.AttributeKey,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey,setUndoable --> key,org.jhotdraw.draw.AttributeKey,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey,setClone --> clazz,org.jhotdraw.draw.AttributeKey,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey,putClone --> clazz,org.jhotdraw.draw.AttributeKey,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey,put --> isNullValueAllowed,org.jhotdraw.draw.AttributeKey,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey,put --> key,org.jhotdraw.draw.AttributeKey,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey,isNullValueAllowed --> isNullValueAllowed,org.jhotdraw.draw.AttributeKey,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey,isAssignable --> clazz,org.jhotdraw.draw.AttributeKey,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey,toString --> key,org.jhotdraw.draw.AttributeKey,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey,hashCode --> key,org.jhotdraw.draw.AttributeKey,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey,equals --> key,org.jhotdraw.draw.AttributeKey,READ);
Call(METHOD,org.jhotdraw.draw.AttributeKey,<init>$4 --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.AttributeKey,getPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.AttributeKey,getClone --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AttributeKey,getClone --> invoke,org.jhotdraw.util.Methods,);
Call(METHOD,org.jhotdraw.draw.AttributeKey,get --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AttributeKey,set --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AttributeKey,setUndoable --> getAttributesRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AttributeKey,setUndoable --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AttributeKey,setUndoable --> <init>,org.jhotdraw.draw.AttributeKey$1,);
Call(METHOD,org.jhotdraw.draw.AttributeKey,setClone --> invoke,org.jhotdraw.util.Methods,);
Call(METHOD,org.jhotdraw.draw.AttributeKey,setClone --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AttributeKey,putClone --> invoke,org.jhotdraw.util.Methods,);
EndClass 69
StartClass 70
Class(org.jhotdraw.draw.action.ButtonFactory,N,N,Public);
Attribute(DEFAULT_COLORS,java.util.List,Public,Y,Y,org.jhotdraw.draw.action.ColorIcon);
Attribute(DEFAULT_COLORS_COLUMN_COUNT,int,Public,Y,Y,);
Attribute(WEBSAVE_COLORS,java.util.List,Public,Y,Y,org.jhotdraw.draw.action.ColorIcon);
Attribute(WEBSAVE_COLORS_COLUMN_COUNT,int,Public,Y,Y,);
Attribute(HSB_COLORS,java.util.List,Public,Y,Y,org.jhotdraw.draw.action.ColorIcon);
Attribute(HSB_COLORS_COLUMN_COUNT,int,Public,Y,Y,);
Attribute(HSB_COLORS_AS_RGB,java.util.List,Public,Y,Y,org.jhotdraw.draw.action.ColorIcon);
Attribute(HSB_COLORS_AS_RGB_COLUMN_COUNT,int,Public,Y,Y,);
Method(<init>,void,Private,N,N);
Method(createDrawingActions,java.util.Collection,Public,Y,N);
Method(createDrawingActions$2,java.util.Collection,Public,Y,N);
Method(createSelectionActions,java.util.Collection,Public,Y,N);
Method(addSelectionToolTo,javax.swing.JToggleButton,Public,Y,N);
Method(addSelectionToolTo$2,javax.swing.JToggleButton,Public,Y,N);
Method(addSelectionToolTo$3,javax.swing.JToggleButton,Public,Y,N);
Method(addToolTo,javax.swing.JToggleButton,Public,Y,N);
Method(addZoomButtonsTo,void,Public,Y,N);
Method(createZoomButton,javax.swing.AbstractButton,Public,Y,N);
Method(createZoomButton$2,javax.swing.AbstractButton,Public,Y,N);
Method(createZoomButton$3,javax.swing.AbstractButton,Public,Y,N);
Method(addAttributesButtonsTo,void,Public,Y,N);
Method(addColorButtonsTo,void,Public,Y,N);
Method(addColorButtonsTo$2,void,Public,Y,N);
Method(createEditorColorButton,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createEditorColorButton$2,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createEditorColorButton$3,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createSelectionColorButton,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createSelectionColorButton$2,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createSelectionColorButton$3,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createSelectionColorButton$4,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createSelectionColorChooserButton,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createSelectionColorChooserButton$2,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createDrawingColorButton,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createDrawingColorButton$2,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createDrawingColorButton$3,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createDrawingColorButton$4,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createDrawingColorChooserButton,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createDrawingColorChooserButton$2,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(addStrokeButtonsTo,void,Public,Y,N);
Method(createStrokeWidthButton,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createStrokeWidthButton$2,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createStrokeWidthButton$3,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createStrokeWidthButton$4,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createStrokeDecorationButton,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createStrokeDashesButton,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createStrokeDashesButton$2,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createStrokeDashesButton$3,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createStrokeDashesButton$4,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createStrokeDashesButton$5,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createStrokeTypeButton,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createStrokePlacementButton,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(addFontButtonsTo,void,Public,Y,N);
Method(createFontButton,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createFontButton$2,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createFontButton$3,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createFontButton$4,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createFontStyleBoldButton,javax.swing.JButton,Public,Y,N);
Method(createFontStyleBoldButton$2,javax.swing.JButton,Public,Y,N);
Method(createFontStyleBoldButton$3,javax.swing.JButton,Public,Y,N);
Method(createFontStyleItalicButton,javax.swing.JButton,Public,Y,N);
Method(createFontStyleItalicButton$2,javax.swing.JButton,Public,Y,N);
Method(createFontStyleItalicButton$3,javax.swing.JButton,Public,Y,N);
Method(createFontStyleUnderlineButton,javax.swing.JButton,Public,Y,N);
Method(createFontStyleUnderlineButton$2,javax.swing.JButton,Public,Y,N);
Method(createFontStyleUnderlineButton$3,javax.swing.JButton,Public,Y,N);
Method(addAlignmentButtonsTo,void,Public,Y,N);
Method(addAlignmentButtonsTo$2,void,Public,Y,N);
Method(createToggleGridButton,javax.swing.AbstractButton,Public,Y,N);
Method(createStrokeCapButton,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createStrokeCapButton$2,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createStrokeCapButton$3,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createStrokeJoinButton,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createStrokeJoinButton$2,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createStrokeJoinButton$3,org.jhotdraw.gui.JPopupButton,Public,Y,N);
Method(createPickAttributesButton,javax.swing.JButton,Public,Y,N);
Method(createPickAttributesButton$2,javax.swing.JButton,Public,Y,N);
Method(createApplyAttributesButton,javax.swing.JButton,Public,Y,N);
Method(createApplyAttributesButton$2,javax.swing.JButton,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(createDrawingActions,org.jhotdraw.draw.DrawingEditor,javax.swing.Action);
Parameter(createDrawingActions$2,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.app.Disposable;>;)Ljava.util.Collection<Ljavax.swing.Action);
Parameter(createDrawingActions$2,java.util.List,);
Parameter(createSelectionActions,org.jhotdraw.draw.DrawingEditor,javax.swing.Action);
Parameter(addSelectionToolTo,javax.swing.JToolBar,);
Parameter(addSelectionToolTo,org.jhotdraw.draw.DrawingEditor,);
Parameter(addSelectionToolTo$2,javax.swing.JToolBar,javax.swing.Action);
Parameter(addSelectionToolTo$2,org.jhotdraw.draw.DrawingEditor,javax.swing.Action);
Parameter(addSelectionToolTo$2,java.util.Collection,);
Parameter(addSelectionToolTo$2,java.util.Collection,);
Parameter(addSelectionToolTo$3,javax.swing.JToolBar,);
Parameter(addSelectionToolTo$3,org.jhotdraw.draw.DrawingEditor,);
Parameter(addSelectionToolTo$3,org.jhotdraw.draw.tool.Tool,);
Parameter(addToolTo,javax.swing.JToolBar,);
Parameter(addToolTo,org.jhotdraw.draw.DrawingEditor,);
Parameter(addToolTo,org.jhotdraw.draw.tool.Tool,);
Parameter(addToolTo,java.lang.String,);
Parameter(addToolTo,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(addZoomButtonsTo,javax.swing.JToolBar,);
Parameter(addZoomButtonsTo,org.jhotdraw.draw.DrawingEditor,);
Parameter(createZoomButton,org.jhotdraw.draw.DrawingEditor,);
Parameter(createZoomButton$2,org.jhotdraw.draw.DrawingView,);
Parameter(createZoomButton$3,org.jhotdraw.draw.DrawingView,);
Parameter(createZoomButton$3,double[],);
Parameter(addAttributesButtonsTo,javax.swing.JToolBar,);
Parameter(addAttributesButtonsTo,org.jhotdraw.draw.DrawingEditor,);
Parameter(addColorButtonsTo,javax.swing.JToolBar,);
Parameter(addColorButtonsTo,org.jhotdraw.draw.DrawingEditor,);
Parameter(addColorButtonsTo$2,javax.swing.JToolBar,org.jhotdraw.draw.action.ColorIcon);
Parameter(addColorButtonsTo$2,org.jhotdraw.draw.DrawingEditor,);
Parameter(addColorButtonsTo$2,java.util.List,);
Parameter(addColorButtonsTo$2,int,);
Parameter(createEditorColorButton,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(createEditorColorButton,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.action.ColorIcon);
Parameter(createEditorColorButton,java.util.List,);
Parameter(createEditorColorButton,int,);
Parameter(createEditorColorButton,java.lang.String,);
Parameter(createEditorColorButton,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createEditorColorButton$2,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(createEditorColorButton$2,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.action.ColorIcon;>;ILjava.lang.String;org.jhotdraw.util.ResourceBundleUtil;java.util.Map<Lorg.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(createEditorColorButton$2,java.util.List,);
Parameter(createEditorColorButton$2,int,);
Parameter(createEditorColorButton$2,java.lang.String,);
Parameter(createEditorColorButton$2,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createEditorColorButton$2,java.util.Map,);
Parameter(createEditorColorButton$3,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(createEditorColorButton$3,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.action.ColorIcon;>;ILjava.lang.String;org.jhotdraw.util.ResourceBundleUtil;java.util.Map<Lorg.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(createEditorColorButton$3,java.util.List,);
Parameter(createEditorColorButton$3,int,);
Parameter(createEditorColorButton$3,java.lang.String,);
Parameter(createEditorColorButton$3,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createEditorColorButton$3,java.util.Map,);
Parameter(createEditorColorButton$3,java.awt.Shape,);
Parameter(createSelectionColorButton,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(createSelectionColorButton,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.action.ColorIcon);
Parameter(createSelectionColorButton,java.util.List,);
Parameter(createSelectionColorButton,int,);
Parameter(createSelectionColorButton,java.lang.String,);
Parameter(createSelectionColorButton,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createSelectionColorButton$2,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(createSelectionColorButton$2,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.action.ColorIcon;>;ILjava.lang.String;org.jhotdraw.util.ResourceBundleUtil;java.util.Map<Lorg.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(createSelectionColorButton$2,java.util.List,);
Parameter(createSelectionColorButton$2,int,);
Parameter(createSelectionColorButton$2,java.lang.String,);
Parameter(createSelectionColorButton$2,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createSelectionColorButton$2,java.util.Map,);
Parameter(createSelectionColorButton$3,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(createSelectionColorButton$3,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.action.ColorIcon;>;ILjava.lang.String;org.jhotdraw.util.ResourceBundleUtil;java.util.Map<Lorg.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(createSelectionColorButton$3,java.util.List,);
Parameter(createSelectionColorButton$3,int,);
Parameter(createSelectionColorButton$3,java.lang.String,);
Parameter(createSelectionColorButton$3,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createSelectionColorButton$3,java.util.Map,);
Parameter(createSelectionColorButton$3,java.awt.Shape,);
Parameter(createSelectionColorButton$4,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(createSelectionColorButton$4,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.action.ColorIcon;>;ILjava.lang.String;org.jhotdraw.util.ResourceBundleUtil;java.util.Map<Lorg.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(createSelectionColorButton$4,java.util.List,org.jhotdraw.app.Disposable);
Parameter(createSelectionColorButton$4,int,);
Parameter(createSelectionColorButton$4,java.lang.String,);
Parameter(createSelectionColorButton$4,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createSelectionColorButton$4,java.util.Map,);
Parameter(createSelectionColorButton$4,java.awt.Shape,);
Parameter(createSelectionColorButton$4,java.util.List,);
Parameter(createSelectionColorChooserButton,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(createSelectionColorChooserButton,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(createSelectionColorChooserButton,java.lang.String,org.jhotdraw.app.Disposable);
Parameter(createSelectionColorChooserButton,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createSelectionColorChooserButton,java.util.Map,);
Parameter(createSelectionColorChooserButton,java.awt.Shape,);
Parameter(createSelectionColorChooserButton,java.util.List,);
Parameter(createSelectionColorChooserButton$2,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(createSelectionColorChooserButton$2,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(createSelectionColorChooserButton$2,java.lang.String,org.jhotdraw.app.Disposable);
Parameter(createSelectionColorChooserButton$2,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createSelectionColorChooserButton$2,java.util.Map,);
Parameter(createSelectionColorChooserButton$2,java.awt.Shape,);
Parameter(createSelectionColorChooserButton$2,java.lang.Class,);
Parameter(createSelectionColorChooserButton$2,java.util.List,);
Parameter(createDrawingColorButton,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(createDrawingColorButton,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.action.ColorIcon);
Parameter(createDrawingColorButton,java.util.List,);
Parameter(createDrawingColorButton,int,);
Parameter(createDrawingColorButton,java.lang.String,);
Parameter(createDrawingColorButton,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createDrawingColorButton$2,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(createDrawingColorButton$2,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.action.ColorIcon;>;ILjava.lang.String;org.jhotdraw.util.ResourceBundleUtil;java.util.Map<Lorg.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(createDrawingColorButton$2,java.util.List,);
Parameter(createDrawingColorButton$2,int,);
Parameter(createDrawingColorButton$2,java.lang.String,);
Parameter(createDrawingColorButton$2,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createDrawingColorButton$2,java.util.Map,);
Parameter(createDrawingColorButton$3,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(createDrawingColorButton$3,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.action.ColorIcon;>;ILjava.lang.String;org.jhotdraw.util.ResourceBundleUtil;java.util.Map<Lorg.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(createDrawingColorButton$3,java.util.List,);
Parameter(createDrawingColorButton$3,int,);
Parameter(createDrawingColorButton$3,java.lang.String,);
Parameter(createDrawingColorButton$3,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createDrawingColorButton$3,java.util.Map,);
Parameter(createDrawingColorButton$3,java.awt.Shape,);
Parameter(createDrawingColorButton$4,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(createDrawingColorButton$4,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.action.ColorIcon;>;ILjava.lang.String;org.jhotdraw.util.ResourceBundleUtil;java.util.Map<Lorg.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(createDrawingColorButton$4,java.util.List,org.jhotdraw.app.Disposable);
Parameter(createDrawingColorButton$4,int,);
Parameter(createDrawingColorButton$4,java.lang.String,);
Parameter(createDrawingColorButton$4,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createDrawingColorButton$4,java.util.Map,);
Parameter(createDrawingColorButton$4,java.awt.Shape,);
Parameter(createDrawingColorButton$4,java.util.List,);
Parameter(createDrawingColorChooserButton,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(createDrawingColorChooserButton,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(createDrawingColorChooserButton,java.lang.String,org.jhotdraw.app.Disposable);
Parameter(createDrawingColorChooserButton,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createDrawingColorChooserButton,java.util.Map,);
Parameter(createDrawingColorChooserButton,java.awt.Shape,);
Parameter(createDrawingColorChooserButton,java.util.List,);
Parameter(createDrawingColorChooserButton$2,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(createDrawingColorChooserButton$2,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(createDrawingColorChooserButton$2,java.lang.String,org.jhotdraw.app.Disposable);
Parameter(createDrawingColorChooserButton$2,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createDrawingColorChooserButton$2,java.util.Map,);
Parameter(createDrawingColorChooserButton$2,java.awt.Shape,);
Parameter(createDrawingColorChooserButton$2,java.lang.Class,);
Parameter(createDrawingColorChooserButton$2,java.util.List,);
Parameter(addStrokeButtonsTo,javax.swing.JToolBar,);
Parameter(addStrokeButtonsTo,org.jhotdraw.draw.DrawingEditor,);
Parameter(createStrokeWidthButton,org.jhotdraw.draw.DrawingEditor,);
Parameter(createStrokeWidthButton$2,org.jhotdraw.draw.DrawingEditor,);
Parameter(createStrokeWidthButton$2,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createStrokeWidthButton$3,org.jhotdraw.draw.DrawingEditor,);
Parameter(createStrokeWidthButton$3,double[],);
Parameter(createStrokeWidthButton$4,org.jhotdraw.draw.DrawingEditor,);
Parameter(createStrokeWidthButton$4,double[],);
Parameter(createStrokeWidthButton$4,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createStrokeDecorationButton,org.jhotdraw.draw.DrawingEditor,);
Parameter(createStrokeDashesButton,org.jhotdraw.draw.DrawingEditor,);
Parameter(createStrokeDashesButton$2,org.jhotdraw.draw.DrawingEditor,);
Parameter(createStrokeDashesButton$2,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createStrokeDashesButton$3,org.jhotdraw.draw.DrawingEditor,);
Parameter(createStrokeDashesButton$3,double[][],);
Parameter(createStrokeDashesButton$4,org.jhotdraw.draw.DrawingEditor,);
Parameter(createStrokeDashesButton$4,double[][],);
Parameter(createStrokeDashesButton$4,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createStrokeDashesButton$5,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.app.Disposable);
Parameter(createStrokeDashesButton$5,double[][],);
Parameter(createStrokeDashesButton$5,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createStrokeDashesButton$5,java.util.List,);
Parameter(createStrokeTypeButton,org.jhotdraw.draw.DrawingEditor,);
Parameter(createStrokePlacementButton,org.jhotdraw.draw.DrawingEditor,);
Parameter(addFontButtonsTo,javax.swing.JToolBar,);
Parameter(addFontButtonsTo,org.jhotdraw.draw.DrawingEditor,);
Parameter(createFontButton,org.jhotdraw.draw.DrawingEditor,);
Parameter(createFontButton$2,org.jhotdraw.draw.DrawingEditor,);
Parameter(createFontButton$2,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createFontButton$3,org.jhotdraw.draw.DrawingEditor,java.awt.Font);
Parameter(createFontButton$3,org.jhotdraw.draw.AttributeKey,);
Parameter(createFontButton$3,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createFontButton$4,org.jhotdraw.draw.DrawingEditor,java.awt.Font);
Parameter(createFontButton$4,org.jhotdraw.draw.AttributeKey,org.jhotdraw.app.Disposable);
Parameter(createFontButton$4,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createFontButton$4,java.util.List,);
Parameter(createFontStyleBoldButton,org.jhotdraw.draw.DrawingEditor,);
Parameter(createFontStyleBoldButton$2,org.jhotdraw.draw.DrawingEditor,);
Parameter(createFontStyleBoldButton$2,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createFontStyleBoldButton$3,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.app.Disposable);
Parameter(createFontStyleBoldButton$3,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createFontStyleBoldButton$3,java.util.List,);
Parameter(createFontStyleItalicButton,org.jhotdraw.draw.DrawingEditor,);
Parameter(createFontStyleItalicButton$2,org.jhotdraw.draw.DrawingEditor,);
Parameter(createFontStyleItalicButton$2,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createFontStyleItalicButton$3,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.app.Disposable);
Parameter(createFontStyleItalicButton$3,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createFontStyleItalicButton$3,java.util.List,);
Parameter(createFontStyleUnderlineButton,org.jhotdraw.draw.DrawingEditor,);
Parameter(createFontStyleUnderlineButton$2,org.jhotdraw.draw.DrawingEditor,);
Parameter(createFontStyleUnderlineButton$2,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createFontStyleUnderlineButton$3,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.app.Disposable);
Parameter(createFontStyleUnderlineButton$3,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createFontStyleUnderlineButton$3,java.util.List,);
Parameter(addAlignmentButtonsTo,javax.swing.JToolBar,);
Parameter(addAlignmentButtonsTo,org.jhotdraw.draw.DrawingEditor,);
Parameter(addAlignmentButtonsTo$2,javax.swing.JToolBar,org.jhotdraw.app.Disposable);
Parameter(addAlignmentButtonsTo$2,org.jhotdraw.draw.DrawingEditor,);
Parameter(addAlignmentButtonsTo$2,java.util.List,);
Parameter(createToggleGridButton,org.jhotdraw.draw.DrawingView,);
Parameter(createStrokeCapButton,org.jhotdraw.draw.DrawingEditor,);
Parameter(createStrokeCapButton$2,org.jhotdraw.draw.DrawingEditor,);
Parameter(createStrokeCapButton$2,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createStrokeCapButton$3,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.app.Disposable);
Parameter(createStrokeCapButton$3,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createStrokeCapButton$3,java.util.List,);
Parameter(createStrokeJoinButton,org.jhotdraw.draw.DrawingEditor,);
Parameter(createStrokeJoinButton$2,org.jhotdraw.draw.DrawingEditor,);
Parameter(createStrokeJoinButton$2,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createStrokeJoinButton$3,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.app.Disposable);
Parameter(createStrokeJoinButton$3,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(createStrokeJoinButton$3,java.util.List,);
Parameter(createPickAttributesButton,org.jhotdraw.draw.DrawingEditor,);
Parameter(createPickAttributesButton$2,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.app.Disposable);
Parameter(createPickAttributesButton$2,java.util.List,);
Parameter(createApplyAttributesButton,org.jhotdraw.draw.DrawingEditor,);
Parameter(createApplyAttributesButton$2,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.app.Disposable);
Parameter(createApplyAttributesButton$2,java.util.List,);
Composition(org.jhotdraw.draw.action.ColorIcon);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingActions --> createDrawingActions$2,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addSelectionToolTo --> createDrawingActions,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addSelectionToolTo --> createSelectionActions,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addSelectionToolTo --> addSelectionToolTo$2,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addSelectionToolTo$2 --> addSelectionToolTo$3,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addZoomButtonsTo --> createZoomButton,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createZoomButton$2 --> createZoomButton$3,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addAttributesButtonsTo --> addColorButtonsTo,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addAttributesButtonsTo --> addStrokeButtonsTo,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addAttributesButtonsTo --> addFontButtonsTo,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addColorButtonsTo --> addColorButtonsTo$2,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addColorButtonsTo$2 --> createEditorColorButton$2,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createEditorColorButton --> createEditorColorButton$2,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createEditorColorButton$2 --> createEditorColorButton$3,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorButton --> createSelectionColorButton$2,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorButton$2 --> createSelectionColorButton$3,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorButton$3 --> createSelectionColorButton$4,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorChooserButton --> createSelectionColorChooserButton$2,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorButton --> createDrawingColorButton$2,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorButton$2 --> createDrawingColorButton$3,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorButton$3 --> createDrawingColorButton$4,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorChooserButton --> createSelectionColorChooserButton$2,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addStrokeButtonsTo --> createStrokeDecorationButton,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addStrokeButtonsTo --> createStrokeWidthButton,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addStrokeButtonsTo --> createStrokeDashesButton,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addStrokeButtonsTo --> createStrokeTypeButton,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addStrokeButtonsTo --> createStrokePlacementButton,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addStrokeButtonsTo --> createStrokeCapButton,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addStrokeButtonsTo --> createStrokeJoinButton,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeWidthButton --> createStrokeWidthButton$4,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeWidthButton$2 --> createStrokeWidthButton$4,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeWidthButton$3 --> createStrokeWidthButton$4,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeDashesButton --> createStrokeDashesButton$2,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeDashesButton$2 --> createStrokeDashesButton$4,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeDashesButton$3 --> createStrokeDashesButton$4,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeDashesButton$4 --> createStrokeDashesButton$5,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addFontButtonsTo --> createFontButton,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addFontButtonsTo --> createFontStyleBoldButton,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addFontButtonsTo --> createFontStyleItalicButton,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addFontButtonsTo --> createFontStyleUnderlineButton,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontButton --> createFontButton$2,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontButton$2 --> createFontButton$3,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontButton$3 --> createFontButton$4,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontStyleBoldButton --> createFontStyleBoldButton$2,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontStyleBoldButton$2 --> createFontStyleBoldButton$3,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontStyleItalicButton --> createFontStyleItalicButton$2,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontStyleItalicButton$2 --> createFontStyleItalicButton$3,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontStyleUnderlineButton --> createFontStyleUnderlineButton$2,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontStyleUnderlineButton$2 --> createFontStyleUnderlineButton$3,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addAlignmentButtonsTo --> addAlignmentButtonsTo$2,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeCapButton --> createStrokeCapButton$2,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeCapButton$2 --> createStrokeCapButton$3,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeJoinButton --> createStrokeJoinButton$2,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeJoinButton$2 --> createStrokeJoinButton$3,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createPickAttributesButton --> createPickAttributesButton$2,org.jhotdraw.draw.action.ButtonFactory,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createApplyAttributesButton --> createApplyAttributesButton$2,org.jhotdraw.draw.action.ButtonFactory,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,addColorButtonsTo --> DEFAULT_COLORS,org.jhotdraw.draw.action.ButtonFactory,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,<clinit> --> HSB_COLORS,org.jhotdraw.draw.action.ButtonFactory,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,<clinit> --> DEFAULT_COLORS,org.jhotdraw.draw.action.ButtonFactory,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,<clinit> --> WEBSAVE_COLORS,org.jhotdraw.draw.action.ButtonFactory,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,<clinit> --> HSB_COLORS,org.jhotdraw.draw.action.ButtonFactory,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,<clinit> --> HSB_COLORS_AS_RGB,org.jhotdraw.draw.action.ButtonFactory,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,addColorButtonsTo$2 --> STROKE_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,addColorButtonsTo$2 --> FILL_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,addColorButtonsTo$2 --> TEXT_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,createStrokeWidthButton$4 --> STROKE_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,createStrokeDecorationButton --> START_DECORATION,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,createStrokeDecorationButton --> END_DECORATION,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,createStrokeDashesButton$5 --> STROKE_DASHES,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,createStrokeTypeButton --> STROKE_TYPE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,createStrokeTypeButton --> BASIC,org.jhotdraw.draw.AttributeKeys$StrokeType,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,createStrokeTypeButton --> DOUBLE,org.jhotdraw.draw.AttributeKeys$StrokeType,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,createStrokeTypeButton --> STROKE_INNER_WIDTH_FACTOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,createStrokePlacementButton --> STROKE_PLACEMENT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,createStrokePlacementButton --> CENTER,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,createStrokePlacementButton --> FILL_UNDER_STROKE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,createStrokePlacementButton --> CENTER,org.jhotdraw.draw.AttributeKeys$Underfill,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,createStrokePlacementButton --> INSIDE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,createStrokePlacementButton --> OUTSIDE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,createStrokePlacementButton --> FULL,org.jhotdraw.draw.AttributeKeys$Underfill,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,createStrokePlacementButton --> NONE,org.jhotdraw.draw.AttributeKeys$Underfill,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,createFontButton$2 --> FONT_FACE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,createFontStyleBoldButton$3 --> FONT_BOLD,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,createFontStyleItalicButton$3 --> FONT_ITALIC,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,createFontStyleUnderlineButton$3 --> FONT_UNDERLINE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,createStrokeCapButton$3 --> STROKE_CAP,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory,createStrokeJoinButton$3 --> STROKE_JOIN,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingActions$2 --> <init>,org.jhotdraw.app.action.edit.CutAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingActions$2 --> <init>,org.jhotdraw.app.action.edit.CopyAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingActions$2 --> <init>,org.jhotdraw.app.action.edit.PasteAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingActions$2 --> <init>,org.jhotdraw.draw.action.SelectSameAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionActions --> <init>,org.jhotdraw.app.action.edit.DuplicateAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionActions --> <init>,org.jhotdraw.draw.action.GroupAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionActions --> <init>,org.jhotdraw.draw.action.UngroupAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionActions --> <init>,org.jhotdraw.draw.action.BringToFrontAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionActions --> <init>,org.jhotdraw.draw.action.SendToBackAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addSelectionToolTo$2 --> <init>$2,org.jhotdraw.draw.tool.DelegationSelectionTool,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addSelectionToolTo$3 --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addSelectionToolTo$3 --> setTool,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addSelectionToolTo$3 --> <init>,org.jhotdraw.draw.action.ButtonFactory$1,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addSelectionToolTo$3 --> configureToolBarButton,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addSelectionToolTo$3 --> <init>,org.jhotdraw.draw.action.ButtonFactory$ToolButtonListener,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addToolTo --> configureToolBarButton,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addToolTo --> <init>,org.jhotdraw.draw.action.ButtonFactory$ToolButtonListener,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addToolTo --> addToolListener,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createZoomButton --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createZoomButton --> <init>,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createZoomButton --> configureToolBarButton,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createZoomButton --> getDrawingViews,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createZoomButton --> getScaleFactor,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createZoomButton --> <init>,org.jhotdraw.draw.action.ButtonFactory$2,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createZoomButton --> addPropertyChangeListener,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createZoomButton --> <init>,org.jhotdraw.draw.action.ButtonFactory$3,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createZoomButton --> add,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createZoomButton$3 --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createZoomButton$3 --> <init>,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createZoomButton$3 --> configureToolBarButton,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createZoomButton$3 --> getScaleFactor,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createZoomButton$3 --> <init>,org.jhotdraw.draw.action.ButtonFactory$4,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createZoomButton$3 --> addPropertyChangeListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createZoomButton$3 --> <init>,org.jhotdraw.draw.action.ButtonFactory$5,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createZoomButton$3 --> add,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addAttributesButtonsTo --> <init>,org.jhotdraw.draw.action.PickAttributesAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addAttributesButtonsTo --> <init>,org.jhotdraw.draw.action.ApplyAttributesAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addColorButtonsTo$2 --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createEditorColorButton$3 --> <init>,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createEditorColorButton$3 --> setPopupAlpha,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createEditorColorButton$3 --> <init>$2,org.jhotdraw.draw.action.DefaultAttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createEditorColorButton$3 --> setAction,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createEditorColorButton$3 --> setColumnCount,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createEditorColorButton$3 --> getColor,org.jhotdraw.draw.action.ColorIcon,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createEditorColorButton$3 --> getToolTipTextProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createEditorColorButton$3 --> <init>$6,org.jhotdraw.draw.action.AttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createEditorColorButton$3 --> add,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createEditorColorButton$3 --> getName,org.jhotdraw.draw.action.ColorIcon,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createEditorColorButton$3 --> setUpdateEnabledState,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createEditorColorButton$3 --> getIconWidth,org.jhotdraw.draw.action.ColorIcon,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createEditorColorButton$3 --> getIconHeight,org.jhotdraw.draw.action.ColorIcon,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createEditorColorButton$3 --> <init>$5,org.jhotdraw.draw.action.ColorIcon,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createEditorColorButton$3 --> createImage,org.jhotdraw.util.Images,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createEditorColorButton$3 --> <init>$5,org.jhotdraw.draw.action.EditorColorChooserAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createEditorColorButton$3 --> configureToolBarButton,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createEditorColorButton$3 --> getIconProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createEditorColorButton$3 --> <init>$2,org.jhotdraw.draw.action.EditorColorIcon,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createEditorColorButton$3 --> <init>,org.jhotdraw.draw.action.ButtonFactory$6,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createEditorColorButton$3 --> addPropertyChangeListener,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorButton$4 --> <init>,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorButton$4 --> setPopupAlpha,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorButton$4 --> setColumnCount,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorButton$4 --> getColor,org.jhotdraw.draw.action.ColorIcon,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorButton$4 --> getToolTipTextProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorButton$4 --> <init>$6,org.jhotdraw.draw.action.AttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorButton$4 --> add,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorButton$4 --> getName,org.jhotdraw.draw.action.ColorIcon,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorButton$4 --> setUpdateEnabledState,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorButton$4 --> add$3,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorButton$4 --> <init>$4,org.jhotdraw.draw.action.ColorIcon,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorButton$4 --> createImage,org.jhotdraw.util.Images,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorButton$4 --> <init>$5,org.jhotdraw.draw.action.SelectionColorChooserAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorButton$4 --> configureToolBarButton,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorButton$4 --> getIconProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorButton$4 --> <init>$2,org.jhotdraw.draw.action.SelectionColorIcon,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorButton$4 --> <init>,org.jhotdraw.draw.event.SelectionComponentRepainter,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorChooserButton$2 --> <init>,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorChooserButton$2 --> configureToolBarButton,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorChooserButton$2 --> <init>,org.jhotdraw.draw.action.ButtonFactory$7,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorChooserButton$2 --> setPopupMenu,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorChooserButton$2 --> setPopupAlpha,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorChooserButton$2 --> getIconProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorChooserButton$2 --> <init>$2,org.jhotdraw.draw.action.SelectionColorIcon,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createSelectionColorChooserButton$2 --> <init>,org.jhotdraw.draw.event.SelectionComponentRepainter,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorButton$4 --> <init>,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorButton$4 --> setPopupAlpha,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorButton$4 --> setColumnCount,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorButton$4 --> getColor,org.jhotdraw.draw.action.ColorIcon,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorButton$4 --> getToolTipTextProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorButton$4 --> <init>$6,org.jhotdraw.draw.action.DrawingAttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorButton$4 --> add,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorButton$4 --> getName,org.jhotdraw.draw.action.ColorIcon,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorButton$4 --> setUpdateEnabledState,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorButton$4 --> add$3,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorButton$4 --> <init>$4,org.jhotdraw.draw.action.ColorIcon,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorButton$4 --> createImage,org.jhotdraw.util.Images,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorButton$4 --> <init>$5,org.jhotdraw.draw.action.DrawingColorChooserAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorButton$4 --> configureToolBarButton,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorButton$4 --> getIconProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorButton$4 --> <init>$2,org.jhotdraw.draw.action.DrawingColorIcon,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorButton$4 --> <init>,org.jhotdraw.draw.event.SelectionComponentRepainter,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorChooserButton$2 --> <init>,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorChooserButton$2 --> configureToolBarButton,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorChooserButton$2 --> <init>,org.jhotdraw.draw.action.ButtonFactory$8,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorChooserButton$2 --> setPopupMenu,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorChooserButton$2 --> setPopupAlpha,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorChooserButton$2 --> getIconProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorChooserButton$2 --> <init>$2,org.jhotdraw.draw.action.DrawingColorIcon,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createDrawingColorChooserButton$2 --> <init>,org.jhotdraw.draw.event.SelectionComponentRepainter,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeWidthButton --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeWidthButton$3 --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeWidthButton$4 --> <init>,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeWidthButton$4 --> configureToolBarButton,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeWidthButton$4 --> <init>,org.jhotdraw.draw.action.StrokeIcon,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeWidthButton$4 --> <init>$4,org.jhotdraw.draw.action.AttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeWidthButton$4 --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeWidthButton$4 --> add,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeDecorationButton --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeDecorationButton --> <init>,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeDecorationButton --> configureToolBarButton,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeDecorationButton --> setColumnCount,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeDecorationButton --> <init>$2,org.jhotdraw.draw.decoration.ArrowTip,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeDecorationButton --> <init>$3,org.jhotdraw.draw.decoration.ArrowTip,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeDecorationButton --> <init>,org.jhotdraw.draw.action.LineDecorationIcon,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeDecorationButton --> <init>$4,org.jhotdraw.draw.action.AttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeDecorationButton --> add,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeDashesButton --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeDashesButton$3 --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeDashesButton$5 --> <init>,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeDashesButton$5 --> configureToolBarButton,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeDashesButton$5 --> <init>,org.jhotdraw.draw.action.StrokeIcon,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeDashesButton$5 --> <init>$4,org.jhotdraw.draw.action.AttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeDashesButton$5 --> add,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeTypeButton --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeTypeButton --> <init>,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeTypeButton --> configureToolBarButton,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeTypeButton --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeTypeButton --> <init>,org.jhotdraw.draw.action.StrokeIcon,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeTypeButton --> <init>$4,org.jhotdraw.draw.action.AttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeTypeButton --> add,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeTypeButton --> <init>,org.jhotdraw.geom.DoubleStroke,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeTypeButton --> <init>$6,org.jhotdraw.draw.action.AttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokePlacementButton --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokePlacementButton --> <init>,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokePlacementButton --> configureToolBarButton,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokePlacementButton --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokePlacementButton --> <init>$6,org.jhotdraw.draw.action.AttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokePlacementButton --> add,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontButton --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontButton$4 --> <init>,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontButton$4 --> configureToolBarButton,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontButton$4 --> <init>,org.jhotdraw.gui.JComponentPopup,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontButton$4 --> <init>,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontButton$4 --> <init>,org.jhotdraw.draw.action.FontChooserHandler,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontButton$4 --> setPopupMenu,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontStyleBoldButton --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontStyleBoldButton$3 --> configureToolBarButton,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontStyleBoldButton$3 --> <init>$2,org.jhotdraw.draw.action.AttributeToggler,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontStyleBoldButton$3 --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontStyleItalicButton --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontStyleItalicButton$3 --> configureToolBarButton,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontStyleItalicButton$3 --> <init>$2,org.jhotdraw.draw.action.AttributeToggler,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontStyleItalicButton$3 --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontStyleUnderlineButton --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontStyleUnderlineButton$3 --> configureToolBarButton,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontStyleUnderlineButton$3 --> <init>$2,org.jhotdraw.draw.action.AttributeToggler,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createFontStyleUnderlineButton$3 --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addAlignmentButtonsTo$2 --> <init>,org.jhotdraw.draw.action.AlignAction$West,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addAlignmentButtonsTo$2 --> <init>,org.jhotdraw.draw.action.AlignAction$East,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addAlignmentButtonsTo$2 --> <init>,org.jhotdraw.draw.action.AlignAction$Horizontal,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addAlignmentButtonsTo$2 --> <init>,org.jhotdraw.draw.action.AlignAction$North,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addAlignmentButtonsTo$2 --> <init>,org.jhotdraw.draw.action.AlignAction$South,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addAlignmentButtonsTo$2 --> <init>,org.jhotdraw.draw.action.AlignAction$Vertical,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addAlignmentButtonsTo$2 --> <init>,org.jhotdraw.draw.action.MoveAction$West,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addAlignmentButtonsTo$2 --> <init>,org.jhotdraw.draw.action.MoveAction$East,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addAlignmentButtonsTo$2 --> <init>,org.jhotdraw.draw.action.MoveAction$North,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addAlignmentButtonsTo$2 --> <init>,org.jhotdraw.draw.action.MoveAction$South,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addAlignmentButtonsTo$2 --> <init>,org.jhotdraw.draw.action.BringToFrontAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,addAlignmentButtonsTo$2 --> <init>,org.jhotdraw.draw.action.SendToBackAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createToggleGridButton --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createToggleGridButton --> configureToolBarButton,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createToggleGridButton --> <init>,org.jhotdraw.draw.action.ButtonFactory$9,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createToggleGridButton --> <init>,org.jhotdraw.draw.action.ButtonFactory$10,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createToggleGridButton --> addPropertyChangeListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeCapButton --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeCapButton$3 --> <init>,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeCapButton$3 --> configureToolBarButton,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeCapButton$3 --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeCapButton$3 --> <init>$6,org.jhotdraw.draw.action.AttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeCapButton$3 --> add,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeJoinButton --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeJoinButton$3 --> <init>,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeJoinButton$3 --> configureToolBarButton,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeJoinButton$3 --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeJoinButton$3 --> <init>$6,org.jhotdraw.draw.action.AttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createStrokeJoinButton$3 --> add,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createPickAttributesButton$2 --> <init>,org.jhotdraw.draw.action.PickAttributesAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,createApplyAttributesButton$2 --> <init>,org.jhotdraw.draw.action.ApplyAttributesAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,<clinit> --> <init>$3,org.jhotdraw.draw.action.ColorIcon,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,<clinit> --> <init>,org.jhotdraw.draw.action.ColorIcon,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,<clinit> --> getInstance,org.jhotdraw.color.HSBColorSpace,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,<clinit> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,<clinit> --> getToolTipTextProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,<clinit> --> <init>$4,org.jhotdraw.draw.action.ColorIcon,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,<clinit> --> getFormatted,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory,<clinit> --> getColor,org.jhotdraw.draw.action.ColorIcon,);
EndClass 70
StartClass 71
Class(org.jhotdraw.draw.tool.CreationTool,N,N,Public);
Attribute(prototypeAttributes,java.util.Map,Protected,N,N,org.jhotdraw.draw.AttributeKey;java.lang.Object,);
Attribute(presentationName,java.lang.String,Protected,N,N,);
Attribute(minimalSizeTreshold,java.awt.Dimension,Protected,N,N,);
Attribute(minimalSize,java.awt.Dimension,Protected,N,N,);
Attribute(prototype,org.jhotdraw.draw.Figure,Protected,N,N,);
Attribute(createdFigure,org.jhotdraw.draw.Figure,Protected,N,N,);
Attribute(isToolDoneAfterCreation,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(<init>$5,void,Public,N,N);
Method(<init>$6,void,Public,N,N);
Method(getPrototype,org.jhotdraw.draw.Figure,Public,N,N);
Method(activate,void,Public,N,N);
Method(deactivate,void,Public,N,N);
Method(mousePressed,void,Public,N,N);
Method(mouseDragged,void,Public,N,N);
Method(mouseReleased,void,Public,N,N);
Method(createFigure,org.jhotdraw.draw.Figure,Protected,N,N);
Method(getCreatedFigure,org.jhotdraw.draw.Figure,Protected,N,N);
Method(getAddedFigure,org.jhotdraw.draw.Figure,Protected,N,N);
Method(creationFinished,void,Protected,N,N);
Method(setToolDoneAfterCreation,void,Public,N,N);
Method(isToolDoneAfterCreation,boolean,Public,N,N);
Method(updateCursor,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>$2,java.lang.String,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(<init>$2,java.util.Map,);
Parameter(<init>$3,java.lang.String,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(<init>$3,java.util.Map,);
Parameter(<init>$3,java.lang.String,);
Parameter(<init>$4,org.jhotdraw.draw.Figure,);
Parameter(<init>$5,org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(<init>$5,java.util.Map,);
Parameter(<init>$6,org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(<init>$6,java.util.Map,);
Parameter(<init>$6,java.lang.String,);
Parameter(activate,org.jhotdraw.draw.DrawingEditor,);
Parameter(deactivate,org.jhotdraw.draw.DrawingEditor,);
Parameter(mousePressed,java.awt.event.MouseEvent,);
Parameter(mouseDragged,java.awt.event.MouseEvent,);
Parameter(mouseReleased,java.awt.event.MouseEvent,);
Parameter(creationFinished,org.jhotdraw.draw.Figure,);
Parameter(setToolDoneAfterCreation,boolean,);
Parameter(updateCursor,org.jhotdraw.draw.DrawingView,);
Parameter(updateCursor,java.awt.Point,);
SuperClass(org.jhotdraw.draw.tool.AbstractTool);
SuperClass(org.jhotdraw.beans.AbstractBean);
SubClass(org.jhotdraw.draw.tool.TextAreaCreationTool);
SubClass(org.jhotdraw.draw.tool.ImageTool);
SubClass(org.jhotdraw.draw.tool.TextCreationTool);
Generalization(org.jhotdraw.draw.tool.AbstractTool);
Composition(org.jhotdraw.draw.Figure);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,<init> --> <init>$3,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,<init>$2 --> <init>$3,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,<init>$4 --> <init>$6,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,<init>$5 --> <init>$6,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mousePressed --> createFigure,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mouseReleased --> isToolDoneAfterCreation,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mouseReleased --> creationFinished,org.jhotdraw.draw.tool.CreationTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,creationFinished --> isToolDoneAfterCreation,org.jhotdraw.draw.tool.CreationTool,);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,<init>$3 --> minimalSizeTreshold,org.jhotdraw.draw.tool.CreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,<init>$3 --> minimalSize,org.jhotdraw.draw.tool.CreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,<init>$3 --> isToolDoneAfterCreation,org.jhotdraw.draw.tool.CreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,<init>$3 --> prototype,org.jhotdraw.draw.tool.CreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,<init>$3 --> prototypeAttributes,org.jhotdraw.draw.tool.CreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,<init>$3 --> presentationName,org.jhotdraw.draw.tool.CreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,<init>$6 --> minimalSizeTreshold,org.jhotdraw.draw.tool.CreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,<init>$6 --> minimalSize,org.jhotdraw.draw.tool.CreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,<init>$6 --> isToolDoneAfterCreation,org.jhotdraw.draw.tool.CreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,<init>$6 --> prototype,org.jhotdraw.draw.tool.CreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,<init>$6 --> prototypeAttributes,org.jhotdraw.draw.tool.CreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,<init>$6 --> presentationName,org.jhotdraw.draw.tool.CreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,getPrototype --> prototype,org.jhotdraw.draw.tool.CreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,deactivate --> createdFigure,org.jhotdraw.draw.tool.CreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,deactivate --> createdFigure,org.jhotdraw.draw.tool.CreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,mousePressed --> createdFigure,org.jhotdraw.draw.tool.CreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,mousePressed --> createdFigure,org.jhotdraw.draw.tool.CreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,mouseDragged --> createdFigure,org.jhotdraw.draw.tool.CreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,mouseReleased --> createdFigure,org.jhotdraw.draw.tool.CreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,mouseReleased --> minimalSizeTreshold,org.jhotdraw.draw.tool.CreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,mouseReleased --> minimalSize,org.jhotdraw.draw.tool.CreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,mouseReleased --> createdFigure,org.jhotdraw.draw.tool.CreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,createFigure --> prototype,org.jhotdraw.draw.tool.CreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,createFigure --> prototypeAttributes,org.jhotdraw.draw.tool.CreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,getCreatedFigure --> createdFigure,org.jhotdraw.draw.tool.CreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,getAddedFigure --> createdFigure,org.jhotdraw.draw.tool.CreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,setToolDoneAfterCreation --> isToolDoneAfterCreation,org.jhotdraw.draw.tool.CreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,setToolDoneAfterCreation --> isToolDoneAfterCreation,org.jhotdraw.draw.tool.CreationTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,isToolDoneAfterCreation --> isToolDoneAfterCreation,org.jhotdraw.draw.tool.CreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,mousePressed --> anchor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,mouseDragged --> anchor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool,mouseReleased --> anchor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,<init>$3 --> <init>,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,<init>$3 --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,<init>$3 --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,<init>$6 --> <init>,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,<init>$6 --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,<init>$6 --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,activate --> activate,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,activate --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,activate --> setCursor,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,deactivate --> deactivate,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,deactivate --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,deactivate --> setCursor,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,deactivate --> layout,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mousePressed --> mousePressed,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mousePressed --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mousePressed --> clearSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mousePressed --> viewToDrawing,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mousePressed --> constrainPoint$2,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mousePressed --> setBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mousePressed --> getDrawing,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mousePressed --> add,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mouseDragged --> constrainPoint,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mouseDragged --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mouseDragged --> setBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mouseDragged --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mouseReleased --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mouseReleased --> getDrawing,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mouseReleased --> remove,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mouseReleased --> fireToolDone,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mouseReleased --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mouseReleased --> constrainPoint,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mouseReleased --> setBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mouseReleased --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mouseReleased --> layout,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mouseReleased --> <init>,org.jhotdraw.draw.tool.CreationTool$1,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mouseReleased --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,mouseReleased --> maybeFireBoundsInvalidated,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,createFigure --> clone,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,createFigure --> getEditor,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,createFigure --> applyDefaultAttributesTo,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,createFigure --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,creationFinished --> isSelectable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,creationFinished --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,creationFinished --> addToSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,creationFinished --> fireToolDone,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,updateCursor --> isEnabled,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool,updateCursor --> setCursor,org.jhotdraw.draw.DrawingView,);
EndClass 71
StartClass 72
Class(org.jhotdraw.beans.AbstractBean,N,N,Public);
Attribute(propertySupport,java.beans.PropertyChangeSupport,Protected,N,N,);
Method(<init>,void,Public,N,N);
Method(addPropertyChangeListener,void,Public,N,N);
Method(addPropertyChangeListener$2,void,Public,N,N);
Method(removePropertyChangeListener,void,Public,N,N);
Method(removePropertyChangeListener$2,void,Public,N,N);
Method(firePropertyChange,void,Protected,N,N);
Method(firePropertyChange$2,void,Protected,N,N);
Method(firePropertyChange$3,void,Protected,N,N);
Method(clone,org.jhotdraw.beans.AbstractBean,Public,N,N);
Method(getPropertyChangeListeners,java.beans.PropertyChangeListener[],Public,N,N);
Method(clone$2,java.lang.Object,Public,N,N);
Parameter(addPropertyChangeListener,java.beans.PropertyChangeListener,);
Parameter(addPropertyChangeListener$2,java.lang.String,);
Parameter(addPropertyChangeListener$2,java.beans.PropertyChangeListener,);
Parameter(removePropertyChangeListener,java.beans.PropertyChangeListener,);
Parameter(removePropertyChangeListener$2,java.lang.String,);
Parameter(removePropertyChangeListener$2,java.beans.PropertyChangeListener,);
Parameter(firePropertyChange,java.lang.String,);
Parameter(firePropertyChange,boolean,);
Parameter(firePropertyChange,boolean,);
Parameter(firePropertyChange$2,java.lang.String,);
Parameter(firePropertyChange$2,int,);
Parameter(firePropertyChange$2,int,);
Parameter(firePropertyChange$3,java.lang.String,);
Parameter(firePropertyChange$3,java.lang.Object,);
Parameter(firePropertyChange$3,java.lang.Object,);
SubClass(org.jhotdraw.app.SDIApplication);
SubClass(org.jhotdraw.app.OSXApplication);
SubClass(org.jhotdraw.app.AbstractApplication);
SubClass(org.jhotdraw.draw.DefaultDrawingEditor);
SubClass(org.jhotdraw.samples.draw.DrawApplicationModel);
SubClass(org.jhotdraw.app.DefaultApplicationModel);
SubClass(org.jhotdraw.app.AbstractApplicationModel);
SubClass(org.jhotdraw.draw.RoundRectangleFigure);
SubClass(org.jhotdraw.draw.RectangleFigure);
SubClass(org.jhotdraw.draw.EllipseFigure);
SubClass(org.jhotdraw.draw.DiamondFigure);
SubClass(org.jhotdraw.draw.TriangleFigure);
SubClass(org.jhotdraw.draw.LineConnectionFigure);
SubClass(org.jhotdraw.draw.LineFigure);
SubClass(org.jhotdraw.draw.BezierFigure);
SubClass(org.jhotdraw.draw.TextAreaFigure);
SubClass(org.jhotdraw.draw.TextFigure);
SubClass(org.jhotdraw.draw.ImageFigure);
SubClass(org.jhotdraw.draw.AbstractAttributedDecoratedFigure);
SubClass(org.jhotdraw.draw.AbstractAttributedFigure);
SubClass(org.jhotdraw.draw.QuadTreeDrawing);
SubClass(org.jhotdraw.draw.DefaultDrawing);
SubClass(org.jhotdraw.draw.AbstractDrawing);
SubClass(org.jhotdraw.draw.AbstractAttributedCompositeFigure);
SubClass(org.jhotdraw.draw.GroupFigure);
SubClass(org.jhotdraw.draw.AbstractCompositeFigure);
SubClass(org.jhotdraw.draw.AbstractFigure);
SubClass(org.jhotdraw.draw.tool.ConnectionTool);
SubClass(org.jhotdraw.draw.tool.BezierTool);
SubClass(org.jhotdraw.draw.tool.TextAreaCreationTool);
SubClass(org.jhotdraw.draw.tool.ImageTool);
SubClass(org.jhotdraw.draw.tool.TextCreationTool);
SubClass(org.jhotdraw.draw.tool.CreationTool);
SubClass(org.jhotdraw.draw.tool.TextAreaEditingTool);
SubClass(org.jhotdraw.draw.tool.TextEditingTool);
SubClass(org.jhotdraw.draw.tool.DelegationSelectionTool);
SubClass(org.jhotdraw.draw.tool.SelectionTool);
SubClass(org.jhotdraw.draw.tool.DefaultHandleTracker);
SubClass(org.jhotdraw.draw.tool.DefaultDragTracker);
SubClass(org.jhotdraw.draw.tool.DefaultSelectAreaTracker);
SubClass(org.jhotdraw.draw.tool.AbstractTool);
SubClass(org.jhotdraw.draw.DrawingEditorProxy);
SubClass(org.jhotdraw.draw.GridConstrainer);
SubClass(org.jhotdraw.draw.AbstractConstrainer);
Call(METHOD,org.jhotdraw.beans.AbstractBean,clone$2 --> clone,org.jhotdraw.beans.AbstractBean,);
Call(ATTRIBUTE,org.jhotdraw.beans.AbstractBean,<init> --> propertySupport,org.jhotdraw.beans.AbstractBean,WRITE);
Call(ATTRIBUTE,org.jhotdraw.beans.AbstractBean,addPropertyChangeListener --> propertySupport,org.jhotdraw.beans.AbstractBean,READ);
Call(ATTRIBUTE,org.jhotdraw.beans.AbstractBean,addPropertyChangeListener$2 --> propertySupport,org.jhotdraw.beans.AbstractBean,READ);
Call(ATTRIBUTE,org.jhotdraw.beans.AbstractBean,removePropertyChangeListener --> propertySupport,org.jhotdraw.beans.AbstractBean,READ);
Call(ATTRIBUTE,org.jhotdraw.beans.AbstractBean,removePropertyChangeListener$2 --> propertySupport,org.jhotdraw.beans.AbstractBean,READ);
Call(ATTRIBUTE,org.jhotdraw.beans.AbstractBean,firePropertyChange --> propertySupport,org.jhotdraw.beans.AbstractBean,READ);
Call(ATTRIBUTE,org.jhotdraw.beans.AbstractBean,firePropertyChange$2 --> propertySupport,org.jhotdraw.beans.AbstractBean,READ);
Call(ATTRIBUTE,org.jhotdraw.beans.AbstractBean,firePropertyChange$3 --> propertySupport,org.jhotdraw.beans.AbstractBean,READ);
Call(ATTRIBUTE,org.jhotdraw.beans.AbstractBean,clone --> propertySupport,org.jhotdraw.beans.AbstractBean,WRITE);
Call(ATTRIBUTE,org.jhotdraw.beans.AbstractBean,getPropertyChangeListeners --> propertySupport,org.jhotdraw.beans.AbstractBean,READ);
Call(METHOD,org.jhotdraw.beans.AbstractBean,removePropertyChangeListener --> getTarget,org.jhotdraw.beans.WeakPropertyChangeListener,);
Call(METHOD,org.jhotdraw.beans.AbstractBean,removePropertyChangeListener$2 --> getTarget,org.jhotdraw.beans.WeakPropertyChangeListener,);
EndClass 72
StartClass 73
Class(org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,N,N,NA);
Attribute(openRecentMenu,javax.swing.JMenu,Private,N,N,);
Attribute(openRecentActions,java.util.LinkedList,Private,N,N,javax.swing.Action);
Attribute(view,org.jhotdraw.app.View,Private,N,N,);
Attribute(this$0,org.jhotdraw.app.AbstractApplication,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(propertyChange,void,Public,N,N);
Method(updateOpenRecentMenu,void,Protected,N,N);
Method(dispose,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.AbstractApplication,);
Parameter(<init>,javax.swing.JMenu,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Realization(org.jhotdraw.app.Disposable);
Composition(org.jhotdraw.app.View);
Composition(org.jhotdraw.app.AbstractApplication);
Call(METHOD,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,<init> --> updateOpenRecentMenu,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,);
Call(METHOD,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,propertyChange --> updateOpenRecentMenu,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,<init> --> this$0,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,<init> --> openRecentActions,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,<init> --> openRecentMenu,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,<init> --> view,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,updateOpenRecentMenu --> openRecentMenu,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,updateOpenRecentMenu --> openRecentActions,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,updateOpenRecentMenu --> this$0,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,updateOpenRecentMenu --> view,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,dispose --> this$0,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,dispose --> openRecentActions,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,READ);
Call(METHOD,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,<init> --> addDisposable,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,<init> --> addPropertyChangeListener,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,updateOpenRecentMenu --> dispose,org.jhotdraw.app.Disposable,);
Call(METHOD,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,updateOpenRecentMenu --> getAction,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,updateOpenRecentMenu --> getRecentURIs,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,updateOpenRecentMenu --> <init>,org.jhotdraw.app.action.file.LoadRecentFileAction,);
Call(METHOD,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,updateOpenRecentMenu --> <init>,org.jhotdraw.app.action.file.OpenRecentFileAction,);
Call(METHOD,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,dispose --> removePropertyChangeListener,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.app.AbstractApplication$OpenRecentMenuHandler,dispose --> dispose,org.jhotdraw.app.Disposable,);
EndClass 73
StartClass 74
Class(org.jhotdraw.app.AbstractApplication$1,N,N,NA);
Attribute(val$v,org.jhotdraw.app.View,Public,N,Y,);
Attribute(this$0,org.jhotdraw.app.AbstractApplication,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(construct,java.lang.Object,Public,N,N);
Method(finished,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.AbstractApplication,);
Parameter(<init>,org.jhotdraw.app.View,);
SuperClass(org.jhotdraw.gui.Worker);
Generalization(org.jhotdraw.gui.Worker);
Composition(org.jhotdraw.app.View);
Composition(org.jhotdraw.app.AbstractApplication);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$1,<init> --> this$0,org.jhotdraw.app.AbstractApplication$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$1,<init> --> val$v,org.jhotdraw.app.AbstractApplication$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$1,construct --> val$v,org.jhotdraw.app.AbstractApplication$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$1,finished --> val$v,org.jhotdraw.app.AbstractApplication$1,READ);
Call(METHOD,org.jhotdraw.app.AbstractApplication$1,<init> --> <init>,org.jhotdraw.gui.Worker,);
Call(METHOD,org.jhotdraw.app.AbstractApplication$1,construct --> clear,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.AbstractApplication$1,finished --> setEnabled,org.jhotdraw.app.View,);
EndClass 74
StartClass 75
Class(org.jhotdraw.app.AbstractApplication$2,N,N,NA);
Attribute(val$v,org.jhotdraw.app.View,Public,N,Y,);
Attribute(val$uri,java.net.URI,Public,N,Y,);
Attribute(this$0,org.jhotdraw.app.AbstractApplication,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(construct,java.lang.Object,Public,N,N);
Method(finished,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.AbstractApplication,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(<init>,java.net.URI,);
SuperClass(org.jhotdraw.gui.Worker);
Generalization(org.jhotdraw.gui.Worker);
Composition(org.jhotdraw.app.View);
Composition(org.jhotdraw.app.AbstractApplication);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$2,<init> --> this$0,org.jhotdraw.app.AbstractApplication$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$2,<init> --> val$v,org.jhotdraw.app.AbstractApplication$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$2,<init> --> val$uri,org.jhotdraw.app.AbstractApplication$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$2,construct --> val$v,org.jhotdraw.app.AbstractApplication$2,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$2,construct --> val$uri,org.jhotdraw.app.AbstractApplication$2,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$2,finished --> val$v,org.jhotdraw.app.AbstractApplication$2,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$2,finished --> val$uri,org.jhotdraw.app.AbstractApplication$2,READ);
Call(METHOD,org.jhotdraw.app.AbstractApplication$2,<init> --> <init>,org.jhotdraw.gui.Worker,);
Call(METHOD,org.jhotdraw.app.AbstractApplication$2,construct --> read,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.AbstractApplication$2,finished --> setURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.AbstractApplication$2,finished --> setEnabled,org.jhotdraw.app.View,);
EndClass 75
StartClass 76
Class(org.jhotdraw.app.AbstractApplication$3,N,N,NA);
Attribute(val$uris,java.util.List,Public,N,Y,);
Attribute(this$0,org.jhotdraw.app.AbstractApplication,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(run,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.AbstractApplication,);
Parameter(<init>,java.util.List,);
Composition(org.jhotdraw.app.AbstractApplication);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$3,<init> --> this$0,org.jhotdraw.app.AbstractApplication$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$3,<init> --> val$uris,org.jhotdraw.app.AbstractApplication$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$3,run --> this$0,org.jhotdraw.app.AbstractApplication$3,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplication$3,run --> val$uris,org.jhotdraw.app.AbstractApplication$3,READ);
Call(METHOD,org.jhotdraw.app.AbstractApplication$3,run --> init,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.AbstractApplication$3,run --> start,org.jhotdraw.app.AbstractApplication,);
EndClass 76
StartClass 77
Class(org.jhotdraw.app.action.AbstractApplicationAction,N,Y,Public);
Attribute(app,org.jhotdraw.app.Application,Private,N,N,);
Attribute(applicationListener,java.beans.PropertyChangeListener,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(installApplicationListeners,void,Protected,N,N);
Method(uninstallApplicationListeners,void,Protected,N,N);
Method(createApplicationListener,java.beans.PropertyChangeListener,Private,N,N);
Method(getApplication,org.jhotdraw.app.Application,Public,N,N);
Method(updateApplicationEnabled,void,Protected,N,N);
Method(isEnabled,boolean,Public,N,N);
Method(setEnabled,void,Public,N,N);
Method(dispose,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.Application,);
Parameter(installApplicationListeners,org.jhotdraw.app.Application,);
Parameter(uninstallApplicationListeners,org.jhotdraw.app.Application,);
Parameter(setEnabled,boolean,);
SubClass(org.jhotdraw.app.action.app.AboutAction);
SubClass(org.jhotdraw.app.action.file.ClearRecentFilesMenuAction);
SubClass(org.jhotdraw.app.action.app.ReOpenApplicationAction);
SubClass(org.jhotdraw.app.action.app.OpenApplicationFileAction);
SubClass(org.jhotdraw.app.action.app.OpenApplicationAction);
SubClass(org.jhotdraw.app.action.app.ExitAction);
SubClass(org.jhotdraw.app.action.file.NewFileAction);
SubClass(org.jhotdraw.app.action.file.OpenFileAction);
SubClass(org.jhotdraw.app.action.file.OpenRecentFileAction);
Realization(org.jhotdraw.app.Disposable);
Composition(org.jhotdraw.app.Application);
Call(METHOD,org.jhotdraw.app.action.AbstractApplicationAction,<init> --> installApplicationListeners,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.AbstractApplicationAction,<init> --> updateApplicationEnabled,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.AbstractApplicationAction,installApplicationListeners --> createApplicationListener,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.AbstractApplicationAction,updateApplicationEnabled --> isEnabled,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.AbstractApplicationAction,dispose --> uninstallApplicationListeners,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractApplicationAction,<init> --> app,org.jhotdraw.app.action.AbstractApplicationAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractApplicationAction,installApplicationListeners --> applicationListener,org.jhotdraw.app.action.AbstractApplicationAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractApplicationAction,installApplicationListeners --> applicationListener,org.jhotdraw.app.action.AbstractApplicationAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractApplicationAction,uninstallApplicationListeners --> applicationListener,org.jhotdraw.app.action.AbstractApplicationAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractApplicationAction,getApplication --> app,org.jhotdraw.app.action.AbstractApplicationAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractApplicationAction,isEnabled --> app,org.jhotdraw.app.action.AbstractApplicationAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractApplicationAction,setEnabled --> app,org.jhotdraw.app.action.AbstractApplicationAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractApplicationAction,dispose --> app,org.jhotdraw.app.action.AbstractApplicationAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractApplicationAction,dispose --> app,org.jhotdraw.app.action.AbstractApplicationAction,WRITE);
Call(METHOD,org.jhotdraw.app.action.AbstractApplicationAction,installApplicationListeners --> <init>,org.jhotdraw.beans.WeakPropertyChangeListener,);
Call(METHOD,org.jhotdraw.app.action.AbstractApplicationAction,installApplicationListeners --> addPropertyChangeListener,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.AbstractApplicationAction,uninstallApplicationListeners --> removePropertyChangeListener,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.AbstractApplicationAction,createApplicationListener --> <init>,org.jhotdraw.app.action.AbstractApplicationAction$1,);
Call(METHOD,org.jhotdraw.app.action.AbstractApplicationAction,isEnabled --> isEnabled,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.AbstractApplicationAction,setEnabled --> isEnabled,org.jhotdraw.app.Application,);
EndClass 77
StartClass 78
Class(org.jhotdraw.app.action.window.ToggleVisibleAction$1,N,N,NA);
Attribute(this$0,org.jhotdraw.app.action.window.ToggleVisibleAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(componentShown,void,Public,N,N);
Method(componentHidden,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.window.ToggleVisibleAction,);
Parameter(componentShown,java.awt.event.ComponentEvent,);
Parameter(componentHidden,java.awt.event.ComponentEvent,);
Composition(org.jhotdraw.app.action.window.ToggleVisibleAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.ToggleVisibleAction$1,<init> --> this$0,org.jhotdraw.app.action.window.ToggleVisibleAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.ToggleVisibleAction$1,componentShown --> this$0,org.jhotdraw.app.action.window.ToggleVisibleAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.ToggleVisibleAction$1,componentHidden --> this$0,org.jhotdraw.app.action.window.ToggleVisibleAction$1,READ);
Call(METHOD,org.jhotdraw.app.action.window.ToggleVisibleAction$1,componentShown --> access$000,org.jhotdraw.app.action.window.ToggleVisibleAction,);
Call(METHOD,org.jhotdraw.app.action.window.ToggleVisibleAction$1,componentHidden --> access$000,org.jhotdraw.app.action.window.ToggleVisibleAction,);
EndClass 78
StartClass 79
Class(org.jhotdraw.app.action.file.ClearRecentFilesMenuAction$1,N,N,NA);
Attribute(this$0,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(propertyChange,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Composition(org.jhotdraw.app.action.file.ClearRecentFilesMenuAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction$1,<init> --> this$0,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction$1,propertyChange --> this$0,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction$1,READ);
Call(METHOD,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction$1,propertyChange --> access$000,org.jhotdraw.app.action.file.ClearRecentFilesMenuAction,);
EndClass 79
StartClass 80
Class(org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,N,Y,Public);
Attribute(oldFocusOwner,java.awt.Component,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(getChooser,org.jhotdraw.gui.URIChooser,Protected,N,N);
Method(saveView,void,Protected,N,N);
Method(saveViewToURI,void,Protected,N,N);
Method(doIt,void,Protected,N,Y);
Method(access$000,java.awt.Component,Public,Y,N);
Parameter(<init>,org.jhotdraw.app.Application,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(getChooser,org.jhotdraw.app.View,);
Parameter(saveView,org.jhotdraw.app.View,);
Parameter(saveViewToURI,org.jhotdraw.app.View,);
Parameter(saveViewToURI,java.net.URI,);
Parameter(saveViewToURI,org.jhotdraw.gui.URIChooser,);
Parameter(doIt,org.jhotdraw.app.View,);
Parameter(access$000,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,);
SuperClass(org.jhotdraw.app.action.AbstractViewAction);
SubClass(org.jhotdraw.app.action.file.CloseFileAction);
SubClass(org.jhotdraw.app.action.file.LoadRecentFileAction);
Generalization(org.jhotdraw.app.action.AbstractViewAction);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,actionPerformed --> doIt,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,saveView --> getChooser,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,saveView --> saveViewToURI,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,actionPerformed --> oldFocusOwner,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,actionPerformed --> oldFocusOwner,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,access$000 --> oldFocusOwner,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,READ);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,<init> --> <init>,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,actionPerformed --> getActiveView,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,actionPerformed --> isEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,actionPerformed --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,actionPerformed --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,actionPerformed --> setEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,actionPerformed --> hasUnsavedChanges,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,actionPerformed --> getURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,actionPerformed --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,actionPerformed --> getName,org.jhotdraw.net.URIUtil,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,actionPerformed --> getFormatted,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,actionPerformed --> <init>,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$1,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,actionPerformed --> showSheet,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,getChooser --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,getChooser --> getApplication,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,getChooser --> getModel,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,getChooser --> createSaveChooser,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,saveView --> getURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,saveView --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,saveView --> <init>,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$2,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,saveView --> showSaveSheet$2,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,saveViewToURI --> <init>,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,saveViewToURI --> execute,org.jhotdraw.app.View,);
EndClass 80
StartClass 81
Class(org.jhotdraw.util.prefs.ToolBarPrefsHandler,N,N,Public);
Attribute(toolbar,javax.swing.JToolBar,Private,N,N,);
Attribute(prefsPrefix,java.lang.String,Private,N,N,);
Attribute(prefs,java.util.prefs.Preferences,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(componentHidden,void,Public,N,N);
Method(componentMoved,void,Public,N,N);
Method(locationChanged,void,Private,N,N);
Method(componentResized,void,Public,N,N);
Method(componentShown,void,Public,N,N);
Method(ancestorAdded,void,Public,N,N);
Method(ancestorMoved,void,Public,N,N);
Method(ancestorRemoved,void,Public,N,N);
Parameter(<init>,javax.swing.JToolBar,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.util.prefs.Preferences,);
Parameter(componentHidden,java.awt.event.ComponentEvent,);
Parameter(componentMoved,java.awt.event.ComponentEvent,);
Parameter(componentResized,java.awt.event.ComponentEvent,);
Parameter(componentShown,java.awt.event.ComponentEvent,);
Parameter(ancestorAdded,javax.swing.event.AncestorEvent,);
Parameter(ancestorMoved,javax.swing.event.AncestorEvent,);
Parameter(ancestorRemoved,javax.swing.event.AncestorEvent,);
Call(METHOD,org.jhotdraw.util.prefs.ToolBarPrefsHandler,componentMoved --> locationChanged,org.jhotdraw.util.prefs.ToolBarPrefsHandler,);
Call(METHOD,org.jhotdraw.util.prefs.ToolBarPrefsHandler,componentResized --> locationChanged,org.jhotdraw.util.prefs.ToolBarPrefsHandler,);
Call(METHOD,org.jhotdraw.util.prefs.ToolBarPrefsHandler,ancestorAdded --> locationChanged,org.jhotdraw.util.prefs.ToolBarPrefsHandler,);
Call(METHOD,org.jhotdraw.util.prefs.ToolBarPrefsHandler,ancestorMoved --> locationChanged,org.jhotdraw.util.prefs.ToolBarPrefsHandler,);
Call(METHOD,org.jhotdraw.util.prefs.ToolBarPrefsHandler,ancestorRemoved --> locationChanged,org.jhotdraw.util.prefs.ToolBarPrefsHandler,);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.ToolBarPrefsHandler,<init> --> toolbar,org.jhotdraw.util.prefs.ToolBarPrefsHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.ToolBarPrefsHandler,<init> --> prefsPrefix,org.jhotdraw.util.prefs.ToolBarPrefsHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.ToolBarPrefsHandler,<init> --> prefs,org.jhotdraw.util.prefs.ToolBarPrefsHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.ToolBarPrefsHandler,componentHidden --> prefs,org.jhotdraw.util.prefs.ToolBarPrefsHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.ToolBarPrefsHandler,componentHidden --> prefsPrefix,org.jhotdraw.util.prefs.ToolBarPrefsHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.ToolBarPrefsHandler,locationChanged --> toolbar,org.jhotdraw.util.prefs.ToolBarPrefsHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.ToolBarPrefsHandler,locationChanged --> prefs,org.jhotdraw.util.prefs.ToolBarPrefsHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.ToolBarPrefsHandler,locationChanged --> prefsPrefix,org.jhotdraw.util.prefs.ToolBarPrefsHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.ToolBarPrefsHandler,componentShown --> prefs,org.jhotdraw.util.prefs.ToolBarPrefsHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.ToolBarPrefsHandler,componentShown --> prefsPrefix,org.jhotdraw.util.prefs.ToolBarPrefsHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.ToolBarPrefsHandler,ancestorMoved --> toolbar,org.jhotdraw.util.prefs.ToolBarPrefsHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.ToolBarPrefsHandler,ancestorRemoved --> toolbar,org.jhotdraw.util.prefs.ToolBarPrefsHandler,READ);
EndClass 81
StartClass 82
Class(org.jhotdraw.util.prefs.PreferencesUtil$3,N,N,NA);
Attribute(val$prefs,java.util.prefs.Preferences,Public,N,Y,);
Attribute(val$name,java.lang.String,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(windowClosing,void,Public,N,N);
Method(windowOpened,void,Public,N,N);
Parameter(<init>,java.util.prefs.Preferences,);
Parameter(<init>,java.lang.String,);
Parameter(windowClosing,java.awt.event.WindowEvent,);
Parameter(windowOpened,java.awt.event.WindowEvent,);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$3,<init> --> val$prefs,org.jhotdraw.util.prefs.PreferencesUtil$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$3,<init> --> val$name,org.jhotdraw.util.prefs.PreferencesUtil$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$3,windowClosing --> val$prefs,org.jhotdraw.util.prefs.PreferencesUtil$3,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$3,windowClosing --> val$name,org.jhotdraw.util.prefs.PreferencesUtil$3,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$3,windowOpened --> val$prefs,org.jhotdraw.util.prefs.PreferencesUtil$3,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$3,windowOpened --> val$name,org.jhotdraw.util.prefs.PreferencesUtil$3,READ);
EndClass 82
StartClass 83
Class(org.jhotdraw.util.prefs.PreferencesUtil$4,N,N,NA);
Attribute(val$prefs,java.util.prefs.Preferences,Public,N,Y,);
Attribute(val$name,java.lang.String,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(componentMoved,void,Public,N,N);
Method(componentResized,void,Public,N,N);
Parameter(<init>,java.util.prefs.Preferences,);
Parameter(<init>,java.lang.String,);
Parameter(componentMoved,java.awt.event.ComponentEvent,);
Parameter(componentResized,java.awt.event.ComponentEvent,);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$4,<init> --> val$prefs,org.jhotdraw.util.prefs.PreferencesUtil$4,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$4,<init> --> val$name,org.jhotdraw.util.prefs.PreferencesUtil$4,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$4,componentMoved --> val$prefs,org.jhotdraw.util.prefs.PreferencesUtil$4,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$4,componentMoved --> val$name,org.jhotdraw.util.prefs.PreferencesUtil$4,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$4,componentResized --> val$prefs,org.jhotdraw.util.prefs.PreferencesUtil$4,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$4,componentResized --> val$name,org.jhotdraw.util.prefs.PreferencesUtil$4,READ);
EndClass 83
StartClass 84
Class(org.jhotdraw.util.prefs.PreferencesUtil$5,N,N,NA);
Attribute(val$prefs,java.util.prefs.Preferences,Public,N,Y,);
Attribute(val$name,java.lang.String,Public,N,Y,);
Attribute(val$tabbedPane,javax.swing.JTabbedPane,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(stateChanged,void,Public,N,N);
Parameter(<init>,java.util.prefs.Preferences,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,javax.swing.JTabbedPane,);
Parameter(stateChanged,javax.swing.event.ChangeEvent,);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$5,<init> --> val$prefs,org.jhotdraw.util.prefs.PreferencesUtil$5,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$5,<init> --> val$name,org.jhotdraw.util.prefs.PreferencesUtil$5,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$5,<init> --> val$tabbedPane,org.jhotdraw.util.prefs.PreferencesUtil$5,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$5,stateChanged --> val$prefs,org.jhotdraw.util.prefs.PreferencesUtil$5,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$5,stateChanged --> val$name,org.jhotdraw.util.prefs.PreferencesUtil$5,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$5,stateChanged --> val$tabbedPane,org.jhotdraw.util.prefs.PreferencesUtil$5,READ);
EndClass 84
StartClass 85
Class(org.jhotdraw.util.prefs.PreferencesUtil$1,N,N,NA);
Attribute(val$prefs,java.util.prefs.Preferences,Public,N,Y,);
Attribute(val$name,java.lang.String,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(componentMoved,void,Public,N,N);
Method(componentResized,void,Public,N,N);
Parameter(<init>,java.util.prefs.Preferences,);
Parameter(<init>,java.lang.String,);
Parameter(componentMoved,java.awt.event.ComponentEvent,);
Parameter(componentResized,java.awt.event.ComponentEvent,);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$1,<init> --> val$prefs,org.jhotdraw.util.prefs.PreferencesUtil$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$1,<init> --> val$name,org.jhotdraw.util.prefs.PreferencesUtil$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$1,componentMoved --> val$prefs,org.jhotdraw.util.prefs.PreferencesUtil$1,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$1,componentMoved --> val$name,org.jhotdraw.util.prefs.PreferencesUtil$1,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$1,componentResized --> val$prefs,org.jhotdraw.util.prefs.PreferencesUtil$1,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$1,componentResized --> val$name,org.jhotdraw.util.prefs.PreferencesUtil$1,READ);
EndClass 85
StartClass 86
Class(org.jhotdraw.util.prefs.PreferencesUtil$2,N,N,NA);
Attribute(val$prefs,java.util.prefs.Preferences,Public,N,Y,);
Attribute(val$name,java.lang.String,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(componentMoved,void,Public,N,N);
Parameter(<init>,java.util.prefs.Preferences,);
Parameter(<init>,java.lang.String,);
Parameter(componentMoved,java.awt.event.ComponentEvent,);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$2,<init> --> val$prefs,org.jhotdraw.util.prefs.PreferencesUtil$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$2,<init> --> val$name,org.jhotdraw.util.prefs.PreferencesUtil$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$2,componentMoved --> val$prefs,org.jhotdraw.util.prefs.PreferencesUtil$2,READ);
Call(ATTRIBUTE,org.jhotdraw.util.prefs.PreferencesUtil$2,componentMoved --> val$name,org.jhotdraw.util.prefs.PreferencesUtil$2,READ);
EndClass 86
StartClass 87
Class(org.jhotdraw.app.Disposable,Y,Y,Public);
Method(dispose,void,Public,N,Y);
EndClass 87
StartClass 88
Class(org.jhotdraw.app.action.app.OpenApplicationFileAction$1,N,N,NA);
Attribute(val$uri,java.net.URI,Public,N,Y,);
Attribute(val$view,org.jhotdraw.app.View,Public,N,Y,);
Attribute(this$0,org.jhotdraw.app.action.app.OpenApplicationFileAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(construct,java.lang.Object,Protected,N,N);
Method(done,void,Protected,N,N);
Method(failed,void,Protected,N,N);
Parameter(<init>,org.jhotdraw.app.action.app.OpenApplicationFileAction,);
Parameter(<init>,java.net.URI,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(done,java.lang.Object,);
Parameter(failed,java.lang.Throwable,);
SuperClass(org.jhotdraw.gui.Worker);
Generalization(org.jhotdraw.gui.Worker);
Composition(org.jhotdraw.app.View);
Composition(org.jhotdraw.app.action.app.OpenApplicationFileAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,<init> --> this$0,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,<init> --> val$uri,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,<init> --> val$view,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,construct --> val$uri,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,construct --> val$view,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,done --> val$view,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,done --> val$uri,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,failed --> val$view,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,failed --> val$uri,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,READ);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,<init> --> <init>,org.jhotdraw.gui.Worker,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,construct --> read,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,construct --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,construct --> getName,org.jhotdraw.net.URIUtil,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,construct --> getFormatted,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,done --> setURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,done --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,done --> setEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,failed --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,failed --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,failed --> getName,org.jhotdraw.net.URIUtil,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,failed --> getFormatted,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,failed --> <init>,org.jhotdraw.app.action.app.OpenApplicationFileAction$1$1,);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,failed --> showMessageSheet$4,org.jhotdraw.gui.JSheet,);
EndClass 88
StartClass 89
Class(org.jhotdraw.app.action.AbstractViewAction,N,Y,Public);
Attribute(app,org.jhotdraw.app.Application,Private,N,N,);
Attribute(view,org.jhotdraw.app.View,Private,N,N,);
Attribute(propertyName,java.lang.String,Private,N,N,);
Attribute(VIEW_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(ENABLED_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(applicationListener,java.beans.PropertyChangeListener,Private,N,N,);
Attribute(viewListener,java.beans.PropertyChangeListener,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(updateView,void,Protected,N,N);
Method(setPropertyName,void,Protected,N,N);
Method(getPropertyName,java.lang.String,Protected,N,N);
Method(updateView$2,void,Protected,N,N);
Method(installViewListeners,void,Protected,N,N);
Method(uninstallViewListeners,void,Protected,N,N);
Method(updateEnabled,void,Protected,N,N);
Method(getApplication,org.jhotdraw.app.Application,Public,N,N);
Method(getActiveView,org.jhotdraw.app.View,Public,N,N);
Method(isEnabled,boolean,Public,N,N);
Method(setEnabled,void,Public,N,N);
Method(access$000,java.lang.String,Public,Y,N);
Parameter(<init>,org.jhotdraw.app.Application,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(updateView,org.jhotdraw.app.View,);
Parameter(updateView,org.jhotdraw.app.View,);
Parameter(setPropertyName,java.lang.String,);
Parameter(installViewListeners,org.jhotdraw.app.View,);
Parameter(uninstallViewListeners,org.jhotdraw.app.View,);
Parameter(updateEnabled,boolean,);
Parameter(updateEnabled,boolean,);
Parameter(setEnabled,boolean,);
Parameter(access$000,org.jhotdraw.app.action.AbstractViewAction,);
SubClass(org.jhotdraw.app.action.window.MaximizeWindowAction);
SubClass(org.jhotdraw.app.action.window.MinimizeWindowAction);
SubClass(org.jhotdraw.app.action.file.CloseFileAction);
SubClass(org.jhotdraw.app.action.file.LoadRecentFileAction);
SubClass(org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction);
SubClass(org.jhotdraw.app.action.edit.UndoAction);
SubClass(org.jhotdraw.app.action.edit.RedoAction);
SubClass(org.jhotdraw.app.action.file.SaveFileAsAction);
SubClass(org.jhotdraw.app.action.file.SaveFileAction);
Composition(org.jhotdraw.app.Application);
Composition(org.jhotdraw.app.View);
Call(METHOD,org.jhotdraw.app.action.AbstractViewAction,updateView --> uninstallViewListeners,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.AbstractViewAction,updateView --> installViewListeners,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.AbstractViewAction,updateView --> updateEnabled,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.AbstractViewAction,updateView --> updateView$2,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.AbstractViewAction,setPropertyName --> updateView$2,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.AbstractViewAction,updateEnabled --> isEnabled,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.AbstractViewAction,isEnabled --> getApplication,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.AbstractViewAction,isEnabled --> getActiveView,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.AbstractViewAction,setEnabled --> getActiveView,org.jhotdraw.app.action.AbstractViewAction,);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractViewAction,<init> --> applicationListener,org.jhotdraw.app.action.AbstractViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractViewAction,<init> --> viewListener,org.jhotdraw.app.action.AbstractViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractViewAction,<init> --> applicationListener,org.jhotdraw.app.action.AbstractViewAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractViewAction,<init> --> viewListener,org.jhotdraw.app.action.AbstractViewAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractViewAction,<init> --> app,org.jhotdraw.app.action.AbstractViewAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractViewAction,<init> --> view,org.jhotdraw.app.action.AbstractViewAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractViewAction,updateView --> view,org.jhotdraw.app.action.AbstractViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractViewAction,setPropertyName --> propertyName,org.jhotdraw.app.action.AbstractViewAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractViewAction,getPropertyName --> propertyName,org.jhotdraw.app.action.AbstractViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractViewAction,installViewListeners --> viewListener,org.jhotdraw.app.action.AbstractViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractViewAction,uninstallViewListeners --> viewListener,org.jhotdraw.app.action.AbstractViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractViewAction,getApplication --> app,org.jhotdraw.app.action.AbstractViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractViewAction,getActiveView --> view,org.jhotdraw.app.action.AbstractViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractViewAction,getActiveView --> app,org.jhotdraw.app.action.AbstractViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractViewAction,access$000 --> propertyName,org.jhotdraw.app.action.AbstractViewAction,READ);
Call(METHOD,org.jhotdraw.app.action.AbstractViewAction,<init> --> <init>,org.jhotdraw.app.action.AbstractViewAction$1,);
Call(METHOD,org.jhotdraw.app.action.AbstractViewAction,<init> --> <init>,org.jhotdraw.app.action.AbstractViewAction$2,);
Call(METHOD,org.jhotdraw.app.action.AbstractViewAction,<init> --> addPropertyChangeListener,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.AbstractViewAction,<init> --> addPropertyChangeListener,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.AbstractViewAction,updateView --> isEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.AbstractViewAction,installViewListeners --> addPropertyChangeListener,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.AbstractViewAction,uninstallViewListeners --> removePropertyChangeListener,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.AbstractViewAction,getActiveView --> getActiveView,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.AbstractViewAction,isEnabled --> isEnabled,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.AbstractViewAction,isEnabled --> isEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.AbstractViewAction,setEnabled --> isEnabled,org.jhotdraw.app.View,);
EndClass 89
StartClass 90
Class(org.jhotdraw.app.osx.OSXAdapter$3,N,N,NA);
Method(<init>,void,Public,N,N);
Method(callTarget,boolean,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.awt.event.ActionListener,);
Parameter(callTarget,java.lang.Object,);
SuperClass(org.jhotdraw.app.osx.OSXAdapter);
Generalization(org.jhotdraw.app.osx.OSXAdapter);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXAdapter$3,callTarget --> targetAction,org.jhotdraw.app.osx.OSXAdapter,READ);
Call(METHOD,org.jhotdraw.app.osx.OSXAdapter$3,<init> --> <init>$2,org.jhotdraw.app.osx.OSXAdapter,);
EndClass 90
StartClass 91
Class(org.jhotdraw.app.osx.OSXAdapter$1,N,N,NA);
Method(<init>,void,Public,N,N);
Method(callTarget,boolean,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.awt.event.ActionListener,);
Parameter(callTarget,java.lang.Object,);
SuperClass(org.jhotdraw.app.osx.OSXAdapter);
Generalization(org.jhotdraw.app.osx.OSXAdapter);
Call(METHOD,org.jhotdraw.app.osx.OSXAdapter$1,<init> --> <init>$2,org.jhotdraw.app.osx.OSXAdapter,);
Call(METHOD,org.jhotdraw.app.osx.OSXAdapter$1,callTarget --> callTarget,org.jhotdraw.app.osx.OSXAdapter,);
EndClass 91
StartClass 92
Class(org.jhotdraw.app.osx.OSXAdapter$2,N,N,NA);
Method(<init>,void,Public,N,N);
Method(callTarget,boolean,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.awt.event.ActionListener,);
Parameter(callTarget,java.lang.Object,);
SuperClass(org.jhotdraw.app.osx.OSXAdapter);
Generalization(org.jhotdraw.app.osx.OSXAdapter);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXAdapter$2,callTarget --> targetAction,org.jhotdraw.app.osx.OSXAdapter,READ);
Call(METHOD,org.jhotdraw.app.osx.OSXAdapter$2,<init> --> <init>$2,org.jhotdraw.app.osx.OSXAdapter,);
EndClass 92
StartClass 93
Class(org.jhotdraw.app.action.window.FocusWindowAction$1,N,N,NA);
Attribute(this$0,org.jhotdraw.app.action.window.FocusWindowAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(propertyChange,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.window.FocusWindowAction,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Composition(org.jhotdraw.app.action.window.FocusWindowAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.FocusWindowAction$1,<init> --> this$0,org.jhotdraw.app.action.window.FocusWindowAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.FocusWindowAction$1,propertyChange --> this$0,org.jhotdraw.app.action.window.FocusWindowAction$1,READ);
EndClass 93
StartClass 94
Class(org.jhotdraw.app.osx.OSXPaletteHandler$2,N,N,NA);
Attribute(this$0,org.jhotdraw.app.osx.OSXPaletteHandler,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.osx.OSXPaletteHandler,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Composition(org.jhotdraw.app.osx.OSXPaletteHandler);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler$2,<init> --> this$0,org.jhotdraw.app.osx.OSXPaletteHandler$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler$2,actionPerformed --> this$0,org.jhotdraw.app.osx.OSXPaletteHandler$2,READ);
Call(METHOD,org.jhotdraw.app.osx.OSXPaletteHandler$2,actionPerformed --> access$400,org.jhotdraw.app.osx.OSXPaletteHandler,);
EndClass 94
StartClass 95
Class(org.jhotdraw.app.osx.OSXPaletteHandler$1,N,N,NA);
Attribute(this$0,org.jhotdraw.app.osx.OSXPaletteHandler,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(windowGainedFocus,void,Public,N,N);
Method(windowLostFocus,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.osx.OSXPaletteHandler,);
Parameter(windowGainedFocus,java.awt.event.WindowEvent,);
Parameter(windowLostFocus,java.awt.event.WindowEvent,);
Composition(org.jhotdraw.app.osx.OSXPaletteHandler);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler$1,<init> --> this$0,org.jhotdraw.app.osx.OSXPaletteHandler$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler$1,windowGainedFocus --> this$0,org.jhotdraw.app.osx.OSXPaletteHandler$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.osx.OSXPaletteHandler$1,windowLostFocus --> this$0,org.jhotdraw.app.osx.OSXPaletteHandler$1,READ);
Call(METHOD,org.jhotdraw.app.osx.OSXPaletteHandler$1,windowGainedFocus --> access$000,org.jhotdraw.app.osx.OSXPaletteHandler,);
Call(METHOD,org.jhotdraw.app.osx.OSXPaletteHandler$1,windowGainedFocus --> access$100,org.jhotdraw.app.osx.OSXPaletteHandler,);
Call(METHOD,org.jhotdraw.app.osx.OSXPaletteHandler$1,windowGainedFocus --> access$200,org.jhotdraw.app.osx.OSXPaletteHandler,);
Call(METHOD,org.jhotdraw.app.osx.OSXPaletteHandler$1,windowGainedFocus --> setActiveView,org.jhotdraw.app.AbstractApplication,);
Call(METHOD,org.jhotdraw.app.osx.OSXPaletteHandler$1,windowGainedFocus --> access$300,org.jhotdraw.app.osx.OSXPaletteHandler,);
Call(METHOD,org.jhotdraw.app.osx.OSXPaletteHandler$1,windowLostFocus --> access$000,org.jhotdraw.app.osx.OSXPaletteHandler,);
EndClass 95
StartClass 96
Class(org.jhotdraw.gui.event.SheetListener,Y,Y,Public);
Method(optionSelected,void,Public,N,Y);
Parameter(optionSelected,org.jhotdraw.gui.event.SheetEvent,);
EndClass 96
StartClass 97
Class(org.jhotdraw.app.action.app.ExitAction$4,N,N,NA);
Attribute(val$v,org.jhotdraw.app.View,Public,N,Y,);
Attribute(this$0,org.jhotdraw.app.action.app.ExitAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(optionSelected,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.app.ExitAction,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(optionSelected,org.jhotdraw.gui.event.SheetEvent,);
Realization(org.jhotdraw.gui.event.SheetListener);
Composition(org.jhotdraw.app.View);
Composition(org.jhotdraw.app.action.app.ExitAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$4,<init> --> this$0,org.jhotdraw.app.action.app.ExitAction$4,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$4,<init> --> val$v,org.jhotdraw.app.action.app.ExitAction$4,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$4,optionSelected --> this$0,org.jhotdraw.app.action.app.ExitAction$4,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$4,optionSelected --> val$v,org.jhotdraw.app.action.app.ExitAction$4,READ);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$4,optionSelected --> getOption,org.jhotdraw.gui.event.SheetEvent,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$4,optionSelected --> getChooser,org.jhotdraw.gui.event.SheetEvent,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$4,optionSelected --> getSelectedURI,org.jhotdraw.gui.URIChooser,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$4,optionSelected --> saveToFileAndReviewNext,org.jhotdraw.app.action.app.ExitAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$4,optionSelected --> setEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$4,optionSelected --> access$100,org.jhotdraw.app.action.app.ExitAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$4,optionSelected --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$4,optionSelected --> setEnabled,org.jhotdraw.app.Application,);
EndClass 97
StartClass 98
Class(org.jhotdraw.app.action.app.ExitAction$3,N,N,NA);
Attribute(val$labels,org.jhotdraw.util.ResourceBundleUtil,Public,N,Y,);
Attribute(this$0,org.jhotdraw.app.action.app.ExitAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(optionSelected,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.app.ExitAction,);
Parameter(<init>,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(optionSelected,org.jhotdraw.gui.event.SheetEvent,);
Realization(org.jhotdraw.gui.event.SheetListener);
Composition(org.jhotdraw.util.ResourceBundleUtil);
Composition(org.jhotdraw.app.action.app.ExitAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$3,<init> --> this$0,org.jhotdraw.app.action.app.ExitAction$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$3,<init> --> val$labels,org.jhotdraw.app.action.app.ExitAction$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$3,optionSelected --> val$labels,org.jhotdraw.app.action.app.ExitAction$3,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$3,optionSelected --> this$0,org.jhotdraw.app.action.app.ExitAction$3,READ);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$3,optionSelected --> getValue,org.jhotdraw.gui.event.SheetEvent,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$3,optionSelected --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$3,optionSelected --> access$000,org.jhotdraw.app.action.app.ExitAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$3,optionSelected --> setEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$3,optionSelected --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$3,optionSelected --> setEnabled,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$3,optionSelected --> dispose,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$3,optionSelected --> reviewNext,org.jhotdraw.app.action.app.ExitAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$3,optionSelected --> saveChangesAndReviewNext,org.jhotdraw.app.action.app.ExitAction,);
EndClass 98
StartClass 99
Class(org.jhotdraw.app.action.app.ExitAction$2,N,N,NA);
Attribute(this$0,org.jhotdraw.app.action.app.ExitAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(optionSelected,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.app.ExitAction,);
Parameter(optionSelected,org.jhotdraw.gui.event.SheetEvent,);
Realization(org.jhotdraw.gui.event.SheetListener);
Composition(org.jhotdraw.app.action.app.ExitAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$2,<init> --> this$0,org.jhotdraw.app.action.app.ExitAction$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$2,optionSelected --> this$0,org.jhotdraw.app.action.app.ExitAction$2,READ);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$2,optionSelected --> getOption,org.jhotdraw.gui.event.SheetEvent,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$2,optionSelected --> getChooser,org.jhotdraw.gui.event.SheetEvent,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$2,optionSelected --> getSelectedURI,org.jhotdraw.gui.URIChooser,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$2,optionSelected --> saveToFile,org.jhotdraw.app.action.app.ExitAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$2,optionSelected --> access$000,org.jhotdraw.app.action.app.ExitAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$2,optionSelected --> setEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$2,optionSelected --> access$100,org.jhotdraw.app.action.app.ExitAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$2,optionSelected --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$2,optionSelected --> setEnabled,org.jhotdraw.app.Application,);
EndClass 99
StartClass 100
Class(org.jhotdraw.app.action.app.ExitAction$1,N,N,NA);
Attribute(val$labels,org.jhotdraw.util.ResourceBundleUtil,Public,N,Y,);
Attribute(val$app,org.jhotdraw.app.Application,Public,N,Y,);
Attribute(this$0,org.jhotdraw.app.action.app.ExitAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(optionSelected,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.app.ExitAction,);
Parameter(<init>,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(<init>,org.jhotdraw.app.Application,);
Parameter(optionSelected,org.jhotdraw.gui.event.SheetEvent,);
Realization(org.jhotdraw.gui.event.SheetListener);
Composition(org.jhotdraw.util.ResourceBundleUtil);
Composition(org.jhotdraw.app.Application);
Composition(org.jhotdraw.app.action.app.ExitAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$1,<init> --> this$0,org.jhotdraw.app.action.app.ExitAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$1,<init> --> val$labels,org.jhotdraw.app.action.app.ExitAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$1,<init> --> val$app,org.jhotdraw.app.action.app.ExitAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$1,optionSelected --> val$labels,org.jhotdraw.app.action.app.ExitAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$1,optionSelected --> this$0,org.jhotdraw.app.action.app.ExitAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$1,optionSelected --> val$app,org.jhotdraw.app.action.app.ExitAction$1,READ);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$1,optionSelected --> getValue,org.jhotdraw.gui.event.SheetEvent,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$1,optionSelected --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$1,optionSelected --> access$000,org.jhotdraw.app.action.app.ExitAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$1,optionSelected --> setEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$1,optionSelected --> setEnabled,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$1,optionSelected --> doExit,org.jhotdraw.app.action.app.ExitAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$1,optionSelected --> saveChanges,org.jhotdraw.app.action.app.ExitAction,);
EndClass 100
StartClass 101
Class(org.jhotdraw.app.action.app.ExitAction$6,N,N,NA);
Attribute(val$v,org.jhotdraw.app.View,Public,N,Y,);
Attribute(val$uri,java.net.URI,Public,N,Y,);
Attribute(val$chooser,org.jhotdraw.gui.URIChooser,Public,N,Y,);
Attribute(this$0,org.jhotdraw.app.action.app.ExitAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(construct,java.lang.Object,Protected,N,N);
Method(done,void,Protected,N,N);
Method(failed,void,Protected,N,N);
Parameter(<init>,org.jhotdraw.app.action.app.ExitAction,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(<init>,java.net.URI,);
Parameter(<init>,org.jhotdraw.gui.URIChooser,);
Parameter(done,java.lang.Object,);
Parameter(failed,java.lang.Throwable,);
SuperClass(org.jhotdraw.gui.Worker);
Generalization(org.jhotdraw.gui.Worker);
Composition(org.jhotdraw.app.View);
Composition(org.jhotdraw.gui.URIChooser);
Composition(org.jhotdraw.app.action.app.ExitAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$6,<init> --> this$0,org.jhotdraw.app.action.app.ExitAction$6,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$6,<init> --> val$v,org.jhotdraw.app.action.app.ExitAction$6,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$6,<init> --> val$uri,org.jhotdraw.app.action.app.ExitAction$6,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$6,<init> --> val$chooser,org.jhotdraw.app.action.app.ExitAction$6,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$6,construct --> val$v,org.jhotdraw.app.action.app.ExitAction$6,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$6,construct --> val$uri,org.jhotdraw.app.action.app.ExitAction$6,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$6,construct --> val$chooser,org.jhotdraw.app.action.app.ExitAction$6,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$6,done --> val$v,org.jhotdraw.app.action.app.ExitAction$6,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$6,done --> val$uri,org.jhotdraw.app.action.app.ExitAction$6,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$6,done --> this$0,org.jhotdraw.app.action.app.ExitAction$6,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$6,failed --> val$v,org.jhotdraw.app.action.app.ExitAction$6,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$6,failed --> val$uri,org.jhotdraw.app.action.app.ExitAction$6,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$6,failed --> this$0,org.jhotdraw.app.action.app.ExitAction$6,READ);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$6,<init> --> <init>,org.jhotdraw.gui.Worker,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$6,construct --> write,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$6,done --> setURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$6,done --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$6,done --> access$000,org.jhotdraw.app.action.app.ExitAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$6,done --> dispose,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$6,done --> reviewNext,org.jhotdraw.app.action.app.ExitAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$6,failed --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$6,failed --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$6,failed --> format,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$6,failed --> showMessageSheet$3,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$6,failed --> setEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$6,failed --> access$100,org.jhotdraw.app.action.app.ExitAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$6,failed --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$6,failed --> setEnabled,org.jhotdraw.app.Application,);
EndClass 101
StartClass 102
Class(org.jhotdraw.app.action.app.ExitAction$5,N,N,NA);
Attribute(val$v,org.jhotdraw.app.View,Public,N,Y,);
Attribute(val$uri,java.net.URI,Public,N,Y,);
Attribute(val$chooser,org.jhotdraw.gui.URIChooser,Public,N,Y,);
Attribute(this$0,org.jhotdraw.app.action.app.ExitAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(construct,java.lang.Object,Protected,N,N);
Method(done,void,Protected,N,N);
Method(failed,void,Protected,N,N);
Method(finished,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.app.ExitAction,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(<init>,java.net.URI,);
Parameter(<init>,org.jhotdraw.gui.URIChooser,);
Parameter(done,java.lang.Object,);
Parameter(failed,java.lang.Throwable,);
SuperClass(org.jhotdraw.gui.Worker);
Generalization(org.jhotdraw.gui.Worker);
Composition(org.jhotdraw.app.View);
Composition(org.jhotdraw.gui.URIChooser);
Composition(org.jhotdraw.app.action.app.ExitAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$5,<init> --> this$0,org.jhotdraw.app.action.app.ExitAction$5,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$5,<init> --> val$v,org.jhotdraw.app.action.app.ExitAction$5,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$5,<init> --> val$uri,org.jhotdraw.app.action.app.ExitAction$5,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$5,<init> --> val$chooser,org.jhotdraw.app.action.app.ExitAction$5,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$5,construct --> val$v,org.jhotdraw.app.action.app.ExitAction$5,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$5,construct --> val$uri,org.jhotdraw.app.action.app.ExitAction$5,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$5,construct --> val$chooser,org.jhotdraw.app.action.app.ExitAction$5,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$5,done --> val$v,org.jhotdraw.app.action.app.ExitAction$5,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$5,done --> val$uri,org.jhotdraw.app.action.app.ExitAction$5,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$5,done --> this$0,org.jhotdraw.app.action.app.ExitAction$5,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$5,failed --> val$v,org.jhotdraw.app.action.app.ExitAction$5,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$5,failed --> val$uri,org.jhotdraw.app.action.app.ExitAction$5,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$5,finished --> val$v,org.jhotdraw.app.action.app.ExitAction$5,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.ExitAction$5,finished --> this$0,org.jhotdraw.app.action.app.ExitAction$5,READ);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$5,<init> --> <init>,org.jhotdraw.gui.Worker,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$5,construct --> write,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$5,done --> setURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$5,done --> doExit,org.jhotdraw.app.action.app.ExitAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$5,failed --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$5,failed --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$5,failed --> getName,org.jhotdraw.net.URIUtil,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$5,failed --> format,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$5,failed --> showMessageSheet$3,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$5,finished --> setEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$5,finished --> access$100,org.jhotdraw.app.action.app.ExitAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$5,finished --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.app.ExitAction$5,finished --> setEnabled,org.jhotdraw.app.Application,);
EndClass 102
StartClass 103
Class(org.jhotdraw.gui.JSheet,N,N,Public);
Attribute(listenerList,javax.swing.event.EventListenerList,Protected,N,N,);
Attribute(ownerMovementHandler,java.awt.event.ComponentListener,Private,N,N,);
Attribute(shiftBackLocation,java.awt.Point,Private,N,N,);
Attribute(oldLocation,java.awt.Point,Private,N,N,);
Attribute(oldFocusOwner,java.awt.Component,Private,N,N,);
Attribute(isInstalled,boolean,Private,N,N,);
Attribute(isAnimated,boolean,Private,N,N,);
Attribute(isNativeSheetSupported,boolean,Private,Y,Y,);
Attribute(isDocumentModalitySupported,boolean,Private,Y,Y,);
Attribute(ownersGlassPane,java.awt.Component,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(init,void,Private,N,N);
Method(isShowAsSheet,boolean,Protected,N,N);
Method(installSheet,void,Protected,N,N);
Method(uninstallSheet,void,Protected,N,N);
Method(addNotify,void,Public,N,N);
Method(setAnimated,void,Public,N,N);
Method(isAnimated,boolean,Public,N,N);
Method(isNativeSheetSupported,boolean,Private,Y,N);
Method(isDocumentModalitySupported,boolean,Private,Y,N);
Method(dispose,void,Public,N,N);
Method(hide0,void,Protected,N,N);
Method(show0,void,Protected,N,N);
Method(hide,void,Public,N,N);
Method(show,void,Public,N,N);
Method(requestUserAttention,void,Public,Y,N);
Method(addSheetListener,void,Public,N,N);
Method(removeSheetListener,void,Public,N,N);
Method(fireOptionSelected,void,Protected,N,N);
Method(fireOptionSelected$2,void,Protected,N,N);
Method(fireOptionSelected$3,void,Protected,N,N);
Method(fireOptionSelected$4,void,Protected,N,N);
Method(showSheet,void,Public,Y,N);
Method(showConfirmSheet,void,Public,Y,N);
Method(showConfirmSheet$2,void,Public,Y,N);
Method(showConfirmSheet$3,void,Public,Y,N);
Method(showConfirmSheet$4,void,Public,Y,N);
Method(showInputSheet,void,Public,Y,N);
Method(showInputSheet$2,void,Public,Y,N);
Method(showInputSheet$3,void,Public,Y,N);
Method(showInputSheet$4,void,Public,Y,N);
Method(showMessageSheet,void,Public,Y,N);
Method(showMessageSheet$2,void,Public,Y,N);
Method(showMessageSheet$3,void,Public,Y,N);
Method(showMessageSheet$4,void,Public,Y,N);
Method(showMessageSheet$5,void,Public,Y,N);
Method(showOptionSheet,void,Public,Y,N);
Method(styleFromMessageType,int,Private,Y,N);
Method(createSheet,org.jhotdraw.gui.JSheet,Private,Y,N);
Method(getWindowForComponent,java.awt.Window,Public,Y,N);
Method(showSaveSheet,void,Public,Y,N);
Method(showOpenSheet,void,Public,Y,N);
Method(showSaveSheet$2,void,Public,Y,N);
Method(showOpenSheet$2,void,Public,Y,N);
Method(showSheet$2,void,Public,Y,N);
Method(showSheet$3,void,Public,Y,N);
Method(access$000,java.awt.Point,Public,Y,N);
Method(access$102,java.awt.Point,Public,Y,N);
Method(access$002,java.awt.Point,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,java.awt.Frame,);
Parameter(<init>$2,java.awt.Dialog,);
Parameter(setAnimated,boolean,);
Parameter(requestUserAttention,boolean,);
Parameter(addSheetListener,org.jhotdraw.gui.event.SheetListener,);
Parameter(removeSheetListener,org.jhotdraw.gui.event.SheetListener,);
Parameter(fireOptionSelected,javax.swing.JOptionPane,);
Parameter(fireOptionSelected$2,javax.swing.JOptionPane,);
Parameter(fireOptionSelected$2,int,);
Parameter(fireOptionSelected$2,java.lang.Object,);
Parameter(fireOptionSelected$2,java.lang.Object,);
Parameter(fireOptionSelected$3,javax.swing.JFileChooser,);
Parameter(fireOptionSelected$3,int,);
Parameter(fireOptionSelected$4,org.jhotdraw.gui.URIChooser,);
Parameter(fireOptionSelected$4,int,);
Parameter(showSheet,javax.swing.JOptionPane,);
Parameter(showSheet,java.awt.Component,);
Parameter(showSheet,org.jhotdraw.gui.event.SheetListener,);
Parameter(showConfirmSheet,java.awt.Component,);
Parameter(showConfirmSheet,java.lang.Object,);
Parameter(showConfirmSheet,org.jhotdraw.gui.event.SheetListener,);
Parameter(showConfirmSheet$2,java.awt.Component,);
Parameter(showConfirmSheet$2,java.lang.Object,);
Parameter(showConfirmSheet$2,int,);
Parameter(showConfirmSheet$2,org.jhotdraw.gui.event.SheetListener,);
Parameter(showConfirmSheet$3,java.awt.Component,);
Parameter(showConfirmSheet$3,java.lang.Object,);
Parameter(showConfirmSheet$3,int,);
Parameter(showConfirmSheet$3,int,);
Parameter(showConfirmSheet$3,org.jhotdraw.gui.event.SheetListener,);
Parameter(showConfirmSheet$4,java.awt.Component,);
Parameter(showConfirmSheet$4,java.lang.Object,);
Parameter(showConfirmSheet$4,int,);
Parameter(showConfirmSheet$4,int,);
Parameter(showConfirmSheet$4,javax.swing.Icon,);
Parameter(showConfirmSheet$4,org.jhotdraw.gui.event.SheetListener,);
Parameter(showInputSheet,java.awt.Component,);
Parameter(showInputSheet,java.lang.Object,);
Parameter(showInputSheet,org.jhotdraw.gui.event.SheetListener,);
Parameter(showInputSheet$2,java.awt.Component,);
Parameter(showInputSheet$2,java.lang.Object,);
Parameter(showInputSheet$2,java.lang.Object,);
Parameter(showInputSheet$2,org.jhotdraw.gui.event.SheetListener,);
Parameter(showInputSheet$3,java.awt.Component,);
Parameter(showInputSheet$3,java.lang.Object,);
Parameter(showInputSheet$3,int,);
Parameter(showInputSheet$3,org.jhotdraw.gui.event.SheetListener,);
Parameter(showInputSheet$4,java.awt.Component,);
Parameter(showInputSheet$4,java.lang.Object,);
Parameter(showInputSheet$4,int,);
Parameter(showInputSheet$4,javax.swing.Icon,);
Parameter(showInputSheet$4,java.lang.Object[],);
Parameter(showInputSheet$4,java.lang.Object,);
Parameter(showInputSheet$4,org.jhotdraw.gui.event.SheetListener,);
Parameter(showMessageSheet,java.awt.Component,);
Parameter(showMessageSheet,java.lang.Object,);
Parameter(showMessageSheet$2,java.awt.Component,);
Parameter(showMessageSheet$2,java.lang.Object,);
Parameter(showMessageSheet$2,org.jhotdraw.gui.event.SheetListener,);
Parameter(showMessageSheet$3,java.awt.Component,);
Parameter(showMessageSheet$3,java.lang.Object,);
Parameter(showMessageSheet$3,int,);
Parameter(showMessageSheet$4,java.awt.Component,);
Parameter(showMessageSheet$4,java.lang.Object,);
Parameter(showMessageSheet$4,int,);
Parameter(showMessageSheet$4,org.jhotdraw.gui.event.SheetListener,);
Parameter(showMessageSheet$5,java.awt.Component,);
Parameter(showMessageSheet$5,java.lang.Object,);
Parameter(showMessageSheet$5,int,);
Parameter(showMessageSheet$5,javax.swing.Icon,);
Parameter(showMessageSheet$5,org.jhotdraw.gui.event.SheetListener,);
Parameter(showOptionSheet,java.awt.Component,);
Parameter(showOptionSheet,java.lang.Object,);
Parameter(showOptionSheet,int,);
Parameter(showOptionSheet,int,);
Parameter(showOptionSheet,javax.swing.Icon,);
Parameter(showOptionSheet,java.lang.Object[],);
Parameter(showOptionSheet,java.lang.Object,);
Parameter(showOptionSheet,org.jhotdraw.gui.event.SheetListener,);
Parameter(styleFromMessageType,int,);
Parameter(createSheet,javax.swing.JOptionPane,);
Parameter(createSheet,java.awt.Component,);
Parameter(createSheet,int,);
Parameter(getWindowForComponent,java.awt.Component,);
Parameter(showSaveSheet,javax.swing.JFileChooser,);
Parameter(showSaveSheet,java.awt.Component,);
Parameter(showSaveSheet,org.jhotdraw.gui.event.SheetListener,);
Parameter(showOpenSheet,javax.swing.JFileChooser,);
Parameter(showOpenSheet,java.awt.Component,);
Parameter(showOpenSheet,org.jhotdraw.gui.event.SheetListener,);
Parameter(showSaveSheet$2,org.jhotdraw.gui.URIChooser,);
Parameter(showSaveSheet$2,java.awt.Component,);
Parameter(showSaveSheet$2,org.jhotdraw.gui.event.SheetListener,);
Parameter(showOpenSheet$2,org.jhotdraw.gui.URIChooser,);
Parameter(showOpenSheet$2,java.awt.Component,);
Parameter(showOpenSheet$2,org.jhotdraw.gui.event.SheetListener,);
Parameter(showSheet$2,javax.swing.JFileChooser,);
Parameter(showSheet$2,java.awt.Component,);
Parameter(showSheet$2,java.lang.String,);
Parameter(showSheet$2,org.jhotdraw.gui.event.SheetListener,);
Parameter(showSheet$3,org.jhotdraw.gui.URIChooser,);
Parameter(showSheet$3,java.awt.Component,);
Parameter(showSheet$3,java.lang.String,);
Parameter(showSheet$3,org.jhotdraw.gui.event.SheetListener,);
Parameter(access$000,org.jhotdraw.gui.JSheet,);
Parameter(access$102,org.jhotdraw.gui.JSheet,);
Parameter(access$102,java.awt.Point,);
Parameter(access$002,org.jhotdraw.gui.JSheet,);
Parameter(access$002,java.awt.Point,);
Call(METHOD,org.jhotdraw.gui.JSheet,<init> --> init,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,<init>$2 --> init,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,init --> isShowAsSheet,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,init --> isNativeSheetSupported,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,init --> isDocumentModalitySupported,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,installSheet --> isNativeSheetSupported,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,installSheet --> isShowAsSheet,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,dispose --> uninstallSheet,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,hide0 --> isDocumentModalitySupported,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,show0 --> isDocumentModalitySupported,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,hide --> isAnimated,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,hide --> isShowAsSheet,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,hide --> isNativeSheetSupported,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,hide --> hide0,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,hide --> uninstallSheet,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,show --> isAnimated,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,show --> isShowAsSheet,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,show --> isNativeSheetSupported,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,show --> installSheet,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,show --> isDocumentModalitySupported,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,show --> show0,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,show --> requestUserAttention,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,fireOptionSelected --> fireOptionSelected$2,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showSheet --> styleFromMessageType,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showSheet --> createSheet,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showSheet --> addSheetListener,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showSheet --> show,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showConfirmSheet --> showConfirmSheet$2,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showConfirmSheet$2 --> showConfirmSheet$3,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showConfirmSheet$3 --> showConfirmSheet$4,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showConfirmSheet$4 --> showOptionSheet,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showInputSheet --> showInputSheet$3,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showInputSheet$2 --> showInputSheet$4,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showInputSheet$3 --> showInputSheet$4,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showInputSheet$4 --> styleFromMessageType,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showInputSheet$4 --> createSheet,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showInputSheet$4 --> addSheetListener,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showInputSheet$4 --> show,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showMessageSheet --> showMessageSheet$3,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showMessageSheet$2 --> showMessageSheet$4,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showMessageSheet$3 --> showMessageSheet$5,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showMessageSheet$4 --> showMessageSheet$5,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showMessageSheet$5 --> showOptionSheet,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showOptionSheet --> styleFromMessageType,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showOptionSheet --> createSheet,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showOptionSheet --> addSheetListener,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showOptionSheet --> show,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,createSheet --> getWindowForComponent,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,createSheet --> <init>,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,createSheet --> <init>$2,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,createSheet --> isNativeSheetSupported,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,getWindowForComponent --> getWindowForComponent,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showSaveSheet --> showSheet$2,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showOpenSheet --> showSheet$2,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showSaveSheet$2 --> showSheet$3,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showOpenSheet$2 --> showSheet$3,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showSheet$2 --> <init>,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showSheet$2 --> addSheetListener,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showSheet$2 --> show,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showSheet$3 --> <init>,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showSheet$3 --> addSheetListener,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet,showSheet$3 --> show,org.jhotdraw.gui.JSheet,);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,<init> --> listenerList,org.jhotdraw.gui.JSheet,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,<init> --> isAnimated,org.jhotdraw.gui.JSheet,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,<init>$2 --> listenerList,org.jhotdraw.gui.JSheet,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,<init>$2 --> isAnimated,org.jhotdraw.gui.JSheet,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,init --> ownerMovementHandler,org.jhotdraw.gui.JSheet,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,installSheet --> isInstalled,org.jhotdraw.gui.JSheet,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,installSheet --> ownerMovementHandler,org.jhotdraw.gui.JSheet,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,installSheet --> shiftBackLocation,org.jhotdraw.gui.JSheet,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,installSheet --> oldLocation,org.jhotdraw.gui.JSheet,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,installSheet --> oldFocusOwner,org.jhotdraw.gui.JSheet,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,installSheet --> isInstalled,org.jhotdraw.gui.JSheet,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,uninstallSheet --> isInstalled,org.jhotdraw.gui.JSheet,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,uninstallSheet --> ownerMovementHandler,org.jhotdraw.gui.JSheet,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,uninstallSheet --> shiftBackLocation,org.jhotdraw.gui.JSheet,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,uninstallSheet --> oldFocusOwner,org.jhotdraw.gui.JSheet,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,uninstallSheet --> isInstalled,org.jhotdraw.gui.JSheet,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,setAnimated --> isAnimated,org.jhotdraw.gui.JSheet,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,setAnimated --> isAnimated,org.jhotdraw.gui.JSheet,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,isAnimated --> isAnimated,org.jhotdraw.gui.JSheet,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,isNativeSheetSupported --> isNativeSheetSupported,org.jhotdraw.gui.JSheet,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,isDocumentModalitySupported --> isDocumentModalitySupported,org.jhotdraw.gui.JSheet,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,hide0 --> ownersGlassPane,org.jhotdraw.gui.JSheet,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,hide0 --> ownersGlassPane,org.jhotdraw.gui.JSheet,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,show0 --> ownersGlassPane,org.jhotdraw.gui.JSheet,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,addSheetListener --> listenerList,org.jhotdraw.gui.JSheet,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,removeSheetListener --> listenerList,org.jhotdraw.gui.JSheet,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,fireOptionSelected$2 --> listenerList,org.jhotdraw.gui.JSheet,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,fireOptionSelected$3 --> listenerList,org.jhotdraw.gui.JSheet,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,fireOptionSelected$4 --> listenerList,org.jhotdraw.gui.JSheet,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,access$000 --> oldLocation,org.jhotdraw.gui.JSheet,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,access$102 --> shiftBackLocation,org.jhotdraw.gui.JSheet,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,access$002 --> oldLocation,org.jhotdraw.gui.JSheet,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,<clinit> --> isDocumentModalitySupported,org.jhotdraw.gui.JSheet,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet,<clinit> --> isNativeSheetSupported,org.jhotdraw.gui.JSheet,WRITE);
Call(METHOD,org.jhotdraw.gui.JSheet,init --> invokeIfExistsWithEnum,org.jhotdraw.util.Methods,);
Call(METHOD,org.jhotdraw.gui.JSheet,init --> <init>,org.jhotdraw.gui.JSheet$1,);
Call(METHOD,org.jhotdraw.gui.JSheet,hide --> <init>,org.jhotdraw.gui.JSheet$2,);
Call(METHOD,org.jhotdraw.gui.JSheet,show --> <init>,org.jhotdraw.gui.JSheet$3,);
Call(METHOD,org.jhotdraw.gui.JSheet,fireOptionSelected$2 --> <init>$4,org.jhotdraw.gui.event.SheetEvent,);
Call(METHOD,org.jhotdraw.gui.JSheet,fireOptionSelected$2 --> optionSelected,org.jhotdraw.gui.event.SheetListener,);
Call(METHOD,org.jhotdraw.gui.JSheet,fireOptionSelected$3 --> <init>$2,org.jhotdraw.gui.event.SheetEvent,);
Call(METHOD,org.jhotdraw.gui.JSheet,fireOptionSelected$3 --> optionSelected,org.jhotdraw.gui.event.SheetListener,);
Call(METHOD,org.jhotdraw.gui.JSheet,fireOptionSelected$4 --> <init>$3,org.jhotdraw.gui.event.SheetEvent,);
Call(METHOD,org.jhotdraw.gui.JSheet,fireOptionSelected$4 --> optionSelected,org.jhotdraw.gui.event.SheetListener,);
Call(METHOD,org.jhotdraw.gui.JSheet,showMessageSheet$3 --> <init>,org.jhotdraw.gui.JSheet$4,);
Call(METHOD,org.jhotdraw.gui.JSheet,createSheet --> <init>,org.jhotdraw.gui.JSheet$5,);
Call(METHOD,org.jhotdraw.gui.JSheet,createSheet --> <init>,org.jhotdraw.gui.JSheet$6,);
Call(METHOD,org.jhotdraw.gui.JSheet,createSheet --> <init>,org.jhotdraw.gui.JSheet$7,);
Call(METHOD,org.jhotdraw.gui.JSheet,showSaveSheet$2 --> setDialogType,org.jhotdraw.gui.URIChooser,);
Call(METHOD,org.jhotdraw.gui.JSheet,showOpenSheet$2 --> setDialogType,org.jhotdraw.gui.URIChooser,);
Call(METHOD,org.jhotdraw.gui.JSheet,showSheet$2 --> <init>,org.jhotdraw.gui.JSheet$8,);
Call(METHOD,org.jhotdraw.gui.JSheet,showSheet$2 --> <init>,org.jhotdraw.gui.JSheet$9,);
Call(METHOD,org.jhotdraw.gui.JSheet,showSheet$3 --> setApproveButtonText,org.jhotdraw.gui.URIChooser,);
Call(METHOD,org.jhotdraw.gui.JSheet,showSheet$3 --> setDialogType,org.jhotdraw.gui.URIChooser,);
Call(METHOD,org.jhotdraw.gui.JSheet,showSheet$3 --> getComponent,org.jhotdraw.gui.URIChooser,);
Call(METHOD,org.jhotdraw.gui.JSheet,showSheet$3 --> <init>,org.jhotdraw.gui.JSheet$10,);
Call(METHOD,org.jhotdraw.gui.JSheet,showSheet$3 --> addActionListener,org.jhotdraw.gui.URIChooser,);
Call(METHOD,org.jhotdraw.gui.JSheet,showSheet$3 --> <init>,org.jhotdraw.gui.JSheet$11,);
Call(METHOD,org.jhotdraw.gui.JSheet,showSheet$3 --> rescanCurrentDirectory,org.jhotdraw.gui.URIChooser,);
EndClass 103
StartClass 104
Class(org.jhotdraw.gui.Worker,N,Y,Public);
Attribute(value,java.lang.Object,Private,N,N,);
Attribute(error,java.lang.Throwable,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(run,void,Public,N,N);
Method(construct,java.lang.Object,Protected,N,Y);
Method(done,void,Protected,N,N);
Method(failed,void,Protected,N,N);
Method(finished,void,Protected,N,N);
Method(getValue,java.lang.Object,Protected,N,N);
Method(setValue,void,Private,N,N);
Method(getError,java.lang.Throwable,Protected,N,N);
Method(setError,void,Private,N,N);
Method(start,void,Public,N,N);
Parameter(done,java.lang.Object,);
Parameter(failed,java.lang.Throwable,);
Parameter(setValue,java.lang.Object,);
Parameter(setError,java.lang.Throwable,);
SubClass(org.jhotdraw.app.OSXApplication$1);
SubClass(org.jhotdraw.app.AbstractApplication$1);
SubClass(org.jhotdraw.app.AbstractApplication$2);
SubClass(org.jhotdraw.app.action.app.OpenApplicationFileAction$1);
SubClass(org.jhotdraw.app.action.app.ExitAction$6);
SubClass(org.jhotdraw.app.action.app.ExitAction$5);
SubClass(org.jhotdraw.draw.tool.ImageTool$1);
SubClass(org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3);
SubClass(org.jhotdraw.app.action.file.OpenFileAction$1);
SubClass(org.jhotdraw.app.action.file.SaveFileAction$2);
SubClass(org.jhotdraw.app.action.file.LoadRecentFileAction$1);
SubClass(org.jhotdraw.app.action.file.OpenRecentFileAction$1);
SubClass(org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3);
Call(METHOD,org.jhotdraw.gui.Worker,run --> construct,org.jhotdraw.gui.Worker,);
Call(METHOD,org.jhotdraw.gui.Worker,run --> setValue,org.jhotdraw.gui.Worker,);
Call(METHOD,org.jhotdraw.gui.Worker,run --> setError,org.jhotdraw.gui.Worker,);
Call(ATTRIBUTE,org.jhotdraw.gui.Worker,getValue --> value,org.jhotdraw.gui.Worker,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.Worker,setValue --> value,org.jhotdraw.gui.Worker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.Worker,getError --> error,org.jhotdraw.gui.Worker,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.Worker,setError --> error,org.jhotdraw.gui.Worker,WRITE);
Call(METHOD,org.jhotdraw.gui.Worker,run --> <init>,org.jhotdraw.gui.Worker$1,);
Call(METHOD,org.jhotdraw.gui.Worker,run --> <init>,org.jhotdraw.gui.Worker$2,);
EndClass 104
StartClass 105
Class(org.jhotdraw.app.action.window.TogglePaletteAction,N,N,Public);
Attribute(palette,java.awt.Window,Private,N,N,);
Attribute(app,org.jhotdraw.app.OSXApplication,Private,N,N,);
Attribute(windowHandler,java.awt.event.WindowListener,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(putValue,void,Public,N,N);
Method(setPalette,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.OSXApplication,);
Parameter(<init>,java.awt.Window,);
Parameter(<init>,java.lang.String,);
Parameter(putValue,java.lang.String,);
Parameter(putValue,java.lang.Object,);
Parameter(setPalette,java.awt.Window,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Composition(org.jhotdraw.app.OSXApplication);
Call(METHOD,org.jhotdraw.app.action.window.TogglePaletteAction,<init> --> putValue,org.jhotdraw.app.action.window.TogglePaletteAction,);
Call(METHOD,org.jhotdraw.app.action.window.TogglePaletteAction,<init> --> setPalette,org.jhotdraw.app.action.window.TogglePaletteAction,);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.TogglePaletteAction,<init> --> app,org.jhotdraw.app.action.window.TogglePaletteAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.TogglePaletteAction,<init> --> windowHandler,org.jhotdraw.app.action.window.TogglePaletteAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.TogglePaletteAction,setPalette --> palette,org.jhotdraw.app.action.window.TogglePaletteAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.TogglePaletteAction,setPalette --> windowHandler,org.jhotdraw.app.action.window.TogglePaletteAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.TogglePaletteAction,setPalette --> app,org.jhotdraw.app.action.window.TogglePaletteAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.TogglePaletteAction,setPalette --> palette,org.jhotdraw.app.action.window.TogglePaletteAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.TogglePaletteAction,actionPerformed --> palette,org.jhotdraw.app.action.window.TogglePaletteAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.TogglePaletteAction,actionPerformed --> app,org.jhotdraw.app.action.window.TogglePaletteAction,READ);
Call(METHOD,org.jhotdraw.app.action.window.TogglePaletteAction,<init> --> <init>,org.jhotdraw.app.action.window.TogglePaletteAction$1,);
Call(METHOD,org.jhotdraw.app.action.window.TogglePaletteAction,setPalette --> addPalette,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.app.action.window.TogglePaletteAction,setPalette --> removePalette,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.app.action.window.TogglePaletteAction,actionPerformed --> addPalette,org.jhotdraw.app.OSXApplication,);
Call(METHOD,org.jhotdraw.app.action.window.TogglePaletteAction,actionPerformed --> removePalette,org.jhotdraw.app.OSXApplication,);
EndClass 105
StartClass 106
Class(org.jhotdraw.app.AbstractApplicationModel,N,Y,Public);
Attribute(name,java.lang.String,Protected,N,N,);
Attribute(version,java.lang.String,Protected,N,N,);
Attribute(copyright,java.lang.String,Protected,N,N,);
Attribute(viewClass,java.lang.Class,Protected,N,N,);
Attribute(viewClassName,java.lang.String,Protected,N,N,);
Attribute(NAME_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(VERSION_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(COPYRIGHT_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(VIEW_CLASS_NAME_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(VIEW_CLASS_PROPERTY,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(setName,void,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(setVersion,void,Public,N,N);
Method(getVersion,java.lang.String,Public,N,N);
Method(setCopyright,void,Public,N,N);
Method(getCopyright,java.lang.String,Public,N,N);
Method(setViewClassName,void,Public,N,N);
Method(setViewClass,void,Public,N,N);
Method(getViewClass,java.lang.Class,Public,N,N);
Method(createView,org.jhotdraw.app.View,Public,N,N);
Method(createToolBars,java.util.List,Public,N,Y);
Method(initView,void,Public,N,N);
Method(destroyView,void,Public,N,N);
Method(initApplication,void,Public,N,N);
Method(destroyApplication,void,Public,N,N);
Method(createOpenChooser,org.jhotdraw.gui.URIChooser,Public,N,N);
Method(createOpenDirectoryChooser,org.jhotdraw.gui.URIChooser,Public,N,N);
Method(createSaveChooser,org.jhotdraw.gui.URIChooser,Public,N,N);
Method(createImportChooser,org.jhotdraw.gui.URIChooser,Public,N,N);
Method(createExportChooser,org.jhotdraw.gui.URIChooser,Public,N,N);
Parameter(setName,java.lang.String,);
Parameter(setVersion,java.lang.String,);
Parameter(setCopyright,java.lang.String,);
Parameter(setViewClassName,java.lang.String,);
Parameter(setViewClass,java.lang.Class,);
Parameter(createToolBars,org.jhotdraw.app.Application,javax.swing.JToolBar);
Parameter(createToolBars,org.jhotdraw.app.View,);
Parameter(initView,org.jhotdraw.app.Application,);
Parameter(initView,org.jhotdraw.app.View,);
Parameter(destroyView,org.jhotdraw.app.Application,);
Parameter(destroyView,org.jhotdraw.app.View,);
Parameter(initApplication,org.jhotdraw.app.Application,);
Parameter(destroyApplication,org.jhotdraw.app.Application,);
Parameter(createOpenChooser,org.jhotdraw.app.Application,);
Parameter(createOpenChooser,org.jhotdraw.app.View,);
Parameter(createOpenDirectoryChooser,org.jhotdraw.app.Application,);
Parameter(createOpenDirectoryChooser,org.jhotdraw.app.View,);
Parameter(createSaveChooser,org.jhotdraw.app.Application,);
Parameter(createSaveChooser,org.jhotdraw.app.View,);
Parameter(createImportChooser,org.jhotdraw.app.Application,);
Parameter(createImportChooser,org.jhotdraw.app.View,);
Parameter(createExportChooser,org.jhotdraw.app.Application,);
Parameter(createExportChooser,org.jhotdraw.app.View,);
SuperClass(org.jhotdraw.beans.AbstractBean);
SubClass(org.jhotdraw.samples.draw.DrawApplicationModel);
SubClass(org.jhotdraw.app.DefaultApplicationModel);
Generalization(org.jhotdraw.beans.AbstractBean);
Realization(org.jhotdraw.app.ApplicationModel);
Call(METHOD,org.jhotdraw.app.AbstractApplicationModel,createView --> getViewClass,org.jhotdraw.app.AbstractApplicationModel,);
Call(METHOD,org.jhotdraw.app.AbstractApplicationModel,createImportChooser --> createOpenChooser,org.jhotdraw.app.AbstractApplicationModel,);
Call(METHOD,org.jhotdraw.app.AbstractApplicationModel,createExportChooser --> createSaveChooser,org.jhotdraw.app.AbstractApplicationModel,);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplicationModel,setName --> name,org.jhotdraw.app.AbstractApplicationModel,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplicationModel,setName --> name,org.jhotdraw.app.AbstractApplicationModel,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplicationModel,getName --> name,org.jhotdraw.app.AbstractApplicationModel,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplicationModel,setVersion --> version,org.jhotdraw.app.AbstractApplicationModel,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplicationModel,setVersion --> version,org.jhotdraw.app.AbstractApplicationModel,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplicationModel,getVersion --> version,org.jhotdraw.app.AbstractApplicationModel,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplicationModel,setCopyright --> copyright,org.jhotdraw.app.AbstractApplicationModel,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplicationModel,setCopyright --> copyright,org.jhotdraw.app.AbstractApplicationModel,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplicationModel,getCopyright --> copyright,org.jhotdraw.app.AbstractApplicationModel,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplicationModel,setViewClassName --> viewClassName,org.jhotdraw.app.AbstractApplicationModel,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplicationModel,setViewClassName --> viewClassName,org.jhotdraw.app.AbstractApplicationModel,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplicationModel,setViewClass --> viewClass,org.jhotdraw.app.AbstractApplicationModel,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplicationModel,setViewClass --> viewClass,org.jhotdraw.app.AbstractApplicationModel,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplicationModel,getViewClass --> viewClass,org.jhotdraw.app.AbstractApplicationModel,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplicationModel,getViewClass --> viewClassName,org.jhotdraw.app.AbstractApplicationModel,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractApplicationModel,getViewClass --> viewClass,org.jhotdraw.app.AbstractApplicationModel,WRITE);
Call(METHOD,org.jhotdraw.app.AbstractApplicationModel,<init> --> <init>,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.app.AbstractApplicationModel,setName --> firePropertyChange$3,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.app.AbstractApplicationModel,setVersion --> firePropertyChange$3,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.app.AbstractApplicationModel,setCopyright --> firePropertyChange$3,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.app.AbstractApplicationModel,setViewClassName --> firePropertyChange$3,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.app.AbstractApplicationModel,setViewClass --> firePropertyChange$3,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.app.AbstractApplicationModel,createOpenChooser --> <init>,org.jhotdraw.gui.JFileURIChooser,);
Call(METHOD,org.jhotdraw.app.AbstractApplicationModel,createOpenDirectoryChooser --> <init>,org.jhotdraw.gui.JFileURIChooser,);
Call(METHOD,org.jhotdraw.app.AbstractApplicationModel,createSaveChooser --> <init>,org.jhotdraw.gui.JFileURIChooser,);
EndClass 106
StartClass 107
Class(org.jhotdraw.app.action.edit.UndoAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Attribute(labels,org.jhotdraw.util.ResourceBundleUtil,Private,N,N,);
Attribute(redoActionPropertyListener,java.beans.PropertyChangeListener,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(updateEnabledState,void,Protected,N,N);
Method(updateView,void,Protected,N,N);
Method(installViewListeners,void,Protected,N,N);
Method(uninstallViewListeners,void,Protected,N,N);
Method(actionPerformed,void,Public,N,N);
Method(getRealUndoAction,javax.swing.Action,Private,N,N);
Parameter(<init>,org.jhotdraw.app.Application,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(updateView,org.jhotdraw.app.View,);
Parameter(updateView,org.jhotdraw.app.View,);
Parameter(installViewListeners,org.jhotdraw.app.View,);
Parameter(uninstallViewListeners,org.jhotdraw.app.View,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
SuperClass(org.jhotdraw.app.action.AbstractViewAction);
Generalization(org.jhotdraw.app.action.AbstractViewAction);
Composition(org.jhotdraw.util.ResourceBundleUtil);
Call(METHOD,org.jhotdraw.app.action.edit.UndoAction,updateEnabledState --> getRealUndoAction,org.jhotdraw.app.action.edit.UndoAction,);
Call(METHOD,org.jhotdraw.app.action.edit.UndoAction,updateView --> updateEnabledState,org.jhotdraw.app.action.edit.UndoAction,);
Call(METHOD,org.jhotdraw.app.action.edit.UndoAction,actionPerformed --> getRealUndoAction,org.jhotdraw.app.action.edit.UndoAction,);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.UndoAction,<init> --> labels,org.jhotdraw.app.action.edit.UndoAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.UndoAction,<init> --> labels,org.jhotdraw.app.action.edit.UndoAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.UndoAction,<init> --> redoActionPropertyListener,org.jhotdraw.app.action.edit.UndoAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.UndoAction,installViewListeners --> redoActionPropertyListener,org.jhotdraw.app.action.edit.UndoAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.UndoAction,uninstallViewListeners --> redoActionPropertyListener,org.jhotdraw.app.action.edit.UndoAction,READ);
Call(METHOD,org.jhotdraw.app.action.edit.UndoAction,<init> --> <init>,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.edit.UndoAction,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.edit.UndoAction,<init> --> <init>,org.jhotdraw.app.action.edit.UndoAction$1,);
Call(METHOD,org.jhotdraw.app.action.edit.UndoAction,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.edit.UndoAction,updateEnabledState --> setEnabled,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.edit.UndoAction,updateView --> updateView,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.edit.UndoAction,updateView --> getActionMap,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.edit.UndoAction,installViewListeners --> installViewListeners,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.edit.UndoAction,installViewListeners --> getActionMap,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.edit.UndoAction,uninstallViewListeners --> uninstallViewListeners,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.edit.UndoAction,uninstallViewListeners --> getActionMap,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.edit.UndoAction,getRealUndoAction --> getActiveView,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.edit.UndoAction,getRealUndoAction --> getActionMap,org.jhotdraw.app.View,);
EndClass 107
StartClass 108
Class(org.jhotdraw.app.action.file.NewFileAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.Application,);
Parameter(<init>$2,org.jhotdraw.app.Application,);
Parameter(<init>$2,java.lang.String,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
SuperClass(org.jhotdraw.app.action.AbstractApplicationAction);
Generalization(org.jhotdraw.app.action.AbstractApplicationAction);
Call(METHOD,org.jhotdraw.app.action.file.NewFileAction,<init> --> <init>$2,org.jhotdraw.app.action.file.NewFileAction,);
Call(METHOD,org.jhotdraw.app.action.file.NewFileAction,<init>$2 --> <init>,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.file.NewFileAction,<init>$2 --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.NewFileAction,<init>$2 --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.NewFileAction,actionPerformed --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.file.NewFileAction,actionPerformed --> createView,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.NewFileAction,actionPerformed --> views,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.NewFileAction,actionPerformed --> getURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.NewFileAction,actionPerformed --> getMultipleOpenId,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.NewFileAction,actionPerformed --> setMultipleOpenId,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.NewFileAction,actionPerformed --> add,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.NewFileAction,actionPerformed --> <init>,org.jhotdraw.app.action.file.NewFileAction$1,);
Call(METHOD,org.jhotdraw.app.action.file.NewFileAction,actionPerformed --> execute,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.NewFileAction,actionPerformed --> show,org.jhotdraw.app.Application,);
EndClass 108
StartClass 109
Class(org.jhotdraw.app.action.edit.RedoAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Attribute(labels,org.jhotdraw.util.ResourceBundleUtil,Private,N,N,);
Attribute(redoActionPropertyListener,java.beans.PropertyChangeListener,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(updateEnabledState,void,Protected,N,N);
Method(updateView,void,Protected,N,N);
Method(installViewListeners,void,Protected,N,N);
Method(uninstallViewListeners,void,Protected,N,N);
Method(actionPerformed,void,Public,N,N);
Method(getRealRedoAction,javax.swing.Action,Private,N,N);
Parameter(<init>,org.jhotdraw.app.Application,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(updateView,org.jhotdraw.app.View,);
Parameter(updateView,org.jhotdraw.app.View,);
Parameter(installViewListeners,org.jhotdraw.app.View,);
Parameter(uninstallViewListeners,org.jhotdraw.app.View,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
SuperClass(org.jhotdraw.app.action.AbstractViewAction);
Generalization(org.jhotdraw.app.action.AbstractViewAction);
Composition(org.jhotdraw.util.ResourceBundleUtil);
Call(METHOD,org.jhotdraw.app.action.edit.RedoAction,updateEnabledState --> getRealRedoAction,org.jhotdraw.app.action.edit.RedoAction,);
Call(METHOD,org.jhotdraw.app.action.edit.RedoAction,updateView --> updateEnabledState,org.jhotdraw.app.action.edit.RedoAction,);
Call(METHOD,org.jhotdraw.app.action.edit.RedoAction,actionPerformed --> getRealRedoAction,org.jhotdraw.app.action.edit.RedoAction,);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.RedoAction,<init> --> labels,org.jhotdraw.app.action.edit.RedoAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.RedoAction,<init> --> labels,org.jhotdraw.app.action.edit.RedoAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.RedoAction,<init> --> redoActionPropertyListener,org.jhotdraw.app.action.edit.RedoAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.RedoAction,installViewListeners --> redoActionPropertyListener,org.jhotdraw.app.action.edit.RedoAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.RedoAction,uninstallViewListeners --> redoActionPropertyListener,org.jhotdraw.app.action.edit.RedoAction,READ);
Call(METHOD,org.jhotdraw.app.action.edit.RedoAction,<init> --> <init>,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.edit.RedoAction,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.edit.RedoAction,<init> --> <init>,org.jhotdraw.app.action.edit.RedoAction$1,);
Call(METHOD,org.jhotdraw.app.action.edit.RedoAction,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.edit.RedoAction,updateEnabledState --> setEnabled,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.edit.RedoAction,updateView --> updateView,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.edit.RedoAction,updateView --> getActionMap,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.edit.RedoAction,installViewListeners --> installViewListeners,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.edit.RedoAction,installViewListeners --> getActionMap,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.edit.RedoAction,uninstallViewListeners --> uninstallViewListeners,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.edit.RedoAction,uninstallViewListeners --> getActionMap,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.edit.RedoAction,getRealRedoAction --> getActiveView,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.edit.RedoAction,getRealRedoAction --> getActionMap,org.jhotdraw.app.View,);
EndClass 109
StartClass 110
Class(org.jhotdraw.app.DefaultMenuBuilder,N,N,Public);
Method(<init>,void,Public,N,N);
Method(addPreferencesItems,void,Public,N,N);
Method(addExitItems,void,Public,N,N);
Method(addClearFileItems,void,Public,N,N);
Method(addNewWindowItems,void,Public,N,N);
Method(addNewFileItems,void,Public,N,N);
Method(addLoadFileItems,void,Public,N,N);
Method(addOpenFileItems,void,Public,N,N);
Method(addCloseFileItems,void,Public,N,N);
Method(addSaveFileItems,void,Public,N,N);
Method(addExportFileItems,void,Public,N,N);
Method(addPrintFileItems,void,Public,N,N);
Method(addOtherFileItems,void,Public,N,N);
Method(addUndoItems,void,Public,N,N);
Method(addClipboardItems,void,Public,N,N);
Method(addSelectionItems,void,Public,N,N);
Method(addFindItems,void,Public,N,N);
Method(addOtherEditItems,void,Public,N,N);
Method(addOtherViewItems,void,Public,N,N);
Method(addOtherMenus,void,Public,N,N);
Method(addOtherWindowItems,void,Public,N,N);
Method(addHelpItems,void,Public,N,N);
Method(addAboutItems,void,Public,N,N);
Parameter(addPreferencesItems,javax.swing.JMenu,);
Parameter(addPreferencesItems,org.jhotdraw.app.Application,);
Parameter(addPreferencesItems,org.jhotdraw.app.View,);
Parameter(addExitItems,javax.swing.JMenu,);
Parameter(addExitItems,org.jhotdraw.app.Application,);
Parameter(addExitItems,org.jhotdraw.app.View,);
Parameter(addClearFileItems,javax.swing.JMenu,);
Parameter(addClearFileItems,org.jhotdraw.app.Application,);
Parameter(addClearFileItems,org.jhotdraw.app.View,);
Parameter(addNewWindowItems,javax.swing.JMenu,);
Parameter(addNewWindowItems,org.jhotdraw.app.Application,);
Parameter(addNewWindowItems,org.jhotdraw.app.View,);
Parameter(addNewFileItems,javax.swing.JMenu,);
Parameter(addNewFileItems,org.jhotdraw.app.Application,);
Parameter(addNewFileItems,org.jhotdraw.app.View,);
Parameter(addLoadFileItems,javax.swing.JMenu,);
Parameter(addLoadFileItems,org.jhotdraw.app.Application,);
Parameter(addLoadFileItems,org.jhotdraw.app.View,);
Parameter(addOpenFileItems,javax.swing.JMenu,);
Parameter(addOpenFileItems,org.jhotdraw.app.Application,);
Parameter(addOpenFileItems,org.jhotdraw.app.View,);
Parameter(addCloseFileItems,javax.swing.JMenu,);
Parameter(addCloseFileItems,org.jhotdraw.app.Application,);
Parameter(addCloseFileItems,org.jhotdraw.app.View,);
Parameter(addSaveFileItems,javax.swing.JMenu,);
Parameter(addSaveFileItems,org.jhotdraw.app.Application,);
Parameter(addSaveFileItems,org.jhotdraw.app.View,);
Parameter(addExportFileItems,javax.swing.JMenu,);
Parameter(addExportFileItems,org.jhotdraw.app.Application,);
Parameter(addExportFileItems,org.jhotdraw.app.View,);
Parameter(addPrintFileItems,javax.swing.JMenu,);
Parameter(addPrintFileItems,org.jhotdraw.app.Application,);
Parameter(addPrintFileItems,org.jhotdraw.app.View,);
Parameter(addOtherFileItems,javax.swing.JMenu,);
Parameter(addOtherFileItems,org.jhotdraw.app.Application,);
Parameter(addOtherFileItems,org.jhotdraw.app.View,);
Parameter(addUndoItems,javax.swing.JMenu,);
Parameter(addUndoItems,org.jhotdraw.app.Application,);
Parameter(addUndoItems,org.jhotdraw.app.View,);
Parameter(addClipboardItems,javax.swing.JMenu,);
Parameter(addClipboardItems,org.jhotdraw.app.Application,);
Parameter(addClipboardItems,org.jhotdraw.app.View,);
Parameter(addSelectionItems,javax.swing.JMenu,);
Parameter(addSelectionItems,org.jhotdraw.app.Application,);
Parameter(addSelectionItems,org.jhotdraw.app.View,);
Parameter(addFindItems,javax.swing.JMenu,);
Parameter(addFindItems,org.jhotdraw.app.Application,);
Parameter(addFindItems,org.jhotdraw.app.View,);
Parameter(addOtherEditItems,javax.swing.JMenu,);
Parameter(addOtherEditItems,org.jhotdraw.app.Application,);
Parameter(addOtherEditItems,org.jhotdraw.app.View,);
Parameter(addOtherViewItems,javax.swing.JMenu,);
Parameter(addOtherViewItems,org.jhotdraw.app.Application,);
Parameter(addOtherViewItems,org.jhotdraw.app.View,);
Parameter(addOtherMenus,java.util.List,javax.swing.JMenu);
Parameter(addOtherMenus,org.jhotdraw.app.Application,);
Parameter(addOtherMenus,org.jhotdraw.app.View,);
Parameter(addOtherWindowItems,javax.swing.JMenu,);
Parameter(addOtherWindowItems,org.jhotdraw.app.Application,);
Parameter(addOtherWindowItems,org.jhotdraw.app.View,);
Parameter(addHelpItems,javax.swing.JMenu,);
Parameter(addHelpItems,org.jhotdraw.app.Application,);
Parameter(addHelpItems,org.jhotdraw.app.View,);
Parameter(addAboutItems,javax.swing.JMenu,);
Parameter(addAboutItems,org.jhotdraw.app.Application,);
Parameter(addAboutItems,org.jhotdraw.app.View,);
Realization(org.jhotdraw.app.MenuBuilder);
Call(METHOD,org.jhotdraw.app.DefaultMenuBuilder,addPreferencesItems --> getActionMap,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.DefaultMenuBuilder,addExitItems --> getActionMap,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.DefaultMenuBuilder,addClearFileItems --> getActionMap,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.DefaultMenuBuilder,addNewWindowItems --> getActionMap,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.DefaultMenuBuilder,addNewFileItems --> getActionMap,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.DefaultMenuBuilder,addLoadFileItems --> getActionMap,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.DefaultMenuBuilder,addOpenFileItems --> getActionMap,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.DefaultMenuBuilder,addCloseFileItems --> getActionMap,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.DefaultMenuBuilder,addSaveFileItems --> getActionMap,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.DefaultMenuBuilder,addExportFileItems --> getActionMap,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.DefaultMenuBuilder,addPrintFileItems --> getActionMap,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.DefaultMenuBuilder,addUndoItems --> getActionMap,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.DefaultMenuBuilder,addClipboardItems --> getActionMap,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.DefaultMenuBuilder,addSelectionItems --> getActionMap,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.DefaultMenuBuilder,addFindItems --> getActionMap,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.DefaultMenuBuilder,addAboutItems --> getActionMap,org.jhotdraw.app.Application,);
EndClass 110
StartClass 111
Class(org.jhotdraw.app.action.edit.DuplicateAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>$2,javax.swing.JComponent,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
SuperClass(org.jhotdraw.app.action.edit.AbstractSelectionAction);
Generalization(org.jhotdraw.app.action.edit.AbstractSelectionAction);
Call(METHOD,org.jhotdraw.app.action.edit.DuplicateAction,<init> --> <init>$2,org.jhotdraw.app.action.edit.DuplicateAction,);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.DuplicateAction,actionPerformed --> target,org.jhotdraw.app.action.edit.AbstractSelectionAction,READ);
Call(METHOD,org.jhotdraw.app.action.edit.DuplicateAction,<init>$2 --> <init>,org.jhotdraw.app.action.edit.AbstractSelectionAction,);
Call(METHOD,org.jhotdraw.app.action.edit.DuplicateAction,<init>$2 --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.edit.DuplicateAction,<init>$2 --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.edit.DuplicateAction,actionPerformed --> duplicate,org.jhotdraw.gui.EditableComponent,);
EndClass 111
StartClass 112
Class(org.jhotdraw.app.action.edit.SelectAllAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(updateEnabled,void,Protected,N,N);
Parameter(<init>$2,javax.swing.JComponent,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
SuperClass(org.jhotdraw.app.action.edit.AbstractSelectionAction);
Generalization(org.jhotdraw.app.action.edit.AbstractSelectionAction);
Call(METHOD,org.jhotdraw.app.action.edit.SelectAllAction,<init> --> <init>$2,org.jhotdraw.app.action.edit.SelectAllAction,);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.SelectAllAction,actionPerformed --> target,org.jhotdraw.app.action.edit.AbstractSelectionAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.SelectAllAction,updateEnabled --> target,org.jhotdraw.app.action.edit.AbstractSelectionAction,READ);
Call(METHOD,org.jhotdraw.app.action.edit.SelectAllAction,<init>$2 --> <init>,org.jhotdraw.app.action.edit.AbstractSelectionAction,);
Call(METHOD,org.jhotdraw.app.action.edit.SelectAllAction,<init>$2 --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.edit.SelectAllAction,<init>$2 --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.edit.SelectAllAction,actionPerformed --> selectAll,org.jhotdraw.gui.EditableComponent,);
EndClass 112
StartClass 113
Class(org.jhotdraw.app.action.edit.CutAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>$2,javax.swing.JComponent,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
SuperClass(org.jhotdraw.app.action.edit.AbstractSelectionAction);
Generalization(org.jhotdraw.app.action.edit.AbstractSelectionAction);
Call(METHOD,org.jhotdraw.app.action.edit.CutAction,<init> --> <init>$2,org.jhotdraw.app.action.edit.CutAction,);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.CutAction,actionPerformed --> target,org.jhotdraw.app.action.edit.AbstractSelectionAction,READ);
Call(METHOD,org.jhotdraw.app.action.edit.CutAction,<init>$2 --> <init>,org.jhotdraw.app.action.edit.AbstractSelectionAction,);
Call(METHOD,org.jhotdraw.app.action.edit.CutAction,<init>$2 --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.edit.CutAction,<init>$2 --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.edit.CutAction,actionPerformed --> getClipboard,org.jhotdraw.gui.datatransfer.ClipboardUtil,);
EndClass 113
StartClass 114
Class(org.jhotdraw.app.action.edit.PasteAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(updateEnabled,void,Protected,N,N);
Parameter(<init>$2,javax.swing.JComponent,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
SuperClass(org.jhotdraw.app.action.edit.AbstractSelectionAction);
Generalization(org.jhotdraw.app.action.edit.AbstractSelectionAction);
Call(METHOD,org.jhotdraw.app.action.edit.PasteAction,<init> --> <init>$2,org.jhotdraw.app.action.edit.PasteAction,);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.PasteAction,actionPerformed --> target,org.jhotdraw.app.action.edit.AbstractSelectionAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.PasteAction,updateEnabled --> target,org.jhotdraw.app.action.edit.AbstractSelectionAction,READ);
Call(METHOD,org.jhotdraw.app.action.edit.PasteAction,<init>$2 --> <init>,org.jhotdraw.app.action.edit.AbstractSelectionAction,);
Call(METHOD,org.jhotdraw.app.action.edit.PasteAction,<init>$2 --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.edit.PasteAction,<init>$2 --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.edit.PasteAction,actionPerformed --> getClipboard,org.jhotdraw.gui.datatransfer.ClipboardUtil,);
EndClass 114
StartClass 115
Class(org.jhotdraw.app.action.file.OpenFileAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(getChooser,org.jhotdraw.gui.URIChooser,Protected,N,N);
Method(actionPerformed,void,Public,N,N);
Method(openViewFromURI,void,Protected,N,N);
Method(showDialog,int,Public,N,N);
Method(createDialog,javax.swing.JDialog,Protected,N,N);
Parameter(<init>,org.jhotdraw.app.Application,);
Parameter(getChooser,org.jhotdraw.app.View,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(openViewFromURI,org.jhotdraw.app.View,);
Parameter(openViewFromURI,java.net.URI,);
Parameter(openViewFromURI,org.jhotdraw.gui.URIChooser,);
Parameter(showDialog,org.jhotdraw.gui.URIChooser,);
Parameter(showDialog,java.awt.Component,);
Parameter(createDialog,org.jhotdraw.gui.URIChooser,);
Parameter(createDialog,java.awt.Component,);
SuperClass(org.jhotdraw.app.action.AbstractApplicationAction);
Generalization(org.jhotdraw.app.action.AbstractApplicationAction);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,actionPerformed --> getChooser,org.jhotdraw.app.action.file.OpenFileAction,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,actionPerformed --> showDialog,org.jhotdraw.app.action.file.OpenFileAction,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,actionPerformed --> openViewFromURI,org.jhotdraw.app.action.file.OpenFileAction,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,showDialog --> createDialog,org.jhotdraw.app.action.file.OpenFileAction,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,<init> --> <init>,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,getChooser --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,getChooser --> getOpenChooser,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,actionPerformed --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,actionPerformed --> isEnabled,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,actionPerformed --> setEnabled,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,actionPerformed --> getActiveView,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,actionPerformed --> isEmpty,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,actionPerformed --> isEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,actionPerformed --> createView,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,actionPerformed --> add,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,actionPerformed --> setDialogType,org.jhotdraw.gui.URIChooser,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,actionPerformed --> getComponent,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,actionPerformed --> show,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,actionPerformed --> getSelectedURI,org.jhotdraw.gui.URIChooser,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,actionPerformed --> dispose,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,openViewFromURI --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,openViewFromURI --> setEnabled,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,openViewFromURI --> setEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,openViewFromURI --> views,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,openViewFromURI --> isEmpty,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,openViewFromURI --> getMultipleOpenId,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,openViewFromURI --> setMultipleOpenId,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,openViewFromURI --> <init>,org.jhotdraw.app.action.file.OpenFileAction$1,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,openViewFromURI --> execute,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,showDialog --> <init>,org.jhotdraw.app.action.file.OpenFileAction$2,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,showDialog --> <init>,org.jhotdraw.app.action.file.OpenFileAction$3,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,showDialog --> addActionListener,org.jhotdraw.gui.URIChooser,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,showDialog --> rescanCurrentDirectory,org.jhotdraw.gui.URIChooser,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,createDialog --> getDialogTitle,org.jhotdraw.gui.URIChooser,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,createDialog --> getComponent,org.jhotdraw.gui.URIChooser,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,createDialog --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,createDialog --> getModel,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,createDialog --> userNodeForPackage,org.jhotdraw.util.prefs.PreferencesUtil,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction,createDialog --> installFramePrefsHandler,org.jhotdraw.util.prefs.PreferencesUtil,);
EndClass 115
StartClass 116
Class(org.jhotdraw.app.action.file.SaveFileAsAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.Application,);
Parameter(<init>,org.jhotdraw.app.View,);
SuperClass(org.jhotdraw.app.action.file.SaveFileAction);
SuperClass(org.jhotdraw.app.action.AbstractViewAction);
Generalization(org.jhotdraw.app.action.file.SaveFileAction);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAsAction,<init> --> <init>$2,org.jhotdraw.app.action.file.SaveFileAction,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAsAction,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAsAction,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
EndClass 116
StartClass 117
Class(org.jhotdraw.app.action.edit.CopyAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>$2,javax.swing.JComponent,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
SuperClass(org.jhotdraw.app.action.edit.AbstractSelectionAction);
Generalization(org.jhotdraw.app.action.edit.AbstractSelectionAction);
Call(METHOD,org.jhotdraw.app.action.edit.CopyAction,<init> --> <init>$2,org.jhotdraw.app.action.edit.CopyAction,);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.CopyAction,actionPerformed --> target,org.jhotdraw.app.action.edit.AbstractSelectionAction,READ);
Call(METHOD,org.jhotdraw.app.action.edit.CopyAction,<init>$2 --> <init>,org.jhotdraw.app.action.edit.AbstractSelectionAction,);
Call(METHOD,org.jhotdraw.app.action.edit.CopyAction,<init>$2 --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.edit.CopyAction,<init>$2 --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.edit.CopyAction,actionPerformed --> getClipboard,org.jhotdraw.gui.datatransfer.ClipboardUtil,);
EndClass 117
StartClass 118
Class(org.jhotdraw.app.action.edit.DeleteAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Attribute(target,javax.swing.JComponent,Private,N,N,);
Attribute(propertyHandler,java.beans.PropertyChangeListener,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(deleteNextChar,void,Public,N,N);
Parameter(<init>$2,javax.swing.JComponent,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(deleteNextChar,java.awt.event.ActionEvent,);
Call(METHOD,org.jhotdraw.app.action.edit.DeleteAction,<init> --> <init>$2,org.jhotdraw.app.action.edit.DeleteAction,);
Call(METHOD,org.jhotdraw.app.action.edit.DeleteAction,actionPerformed --> deleteNextChar,org.jhotdraw.app.action.edit.DeleteAction,);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.DeleteAction,<init>$2 --> propertyHandler,org.jhotdraw.app.action.edit.DeleteAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.DeleteAction,<init>$2 --> target,org.jhotdraw.app.action.edit.DeleteAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.DeleteAction,<init>$2 --> propertyHandler,org.jhotdraw.app.action.edit.DeleteAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.DeleteAction,actionPerformed --> target,org.jhotdraw.app.action.edit.DeleteAction,READ);
Call(METHOD,org.jhotdraw.app.action.edit.DeleteAction,<init>$2 --> <init>,org.jhotdraw.app.action.edit.DeleteAction$1,);
Call(METHOD,org.jhotdraw.app.action.edit.DeleteAction,<init>$2 --> <init>,org.jhotdraw.beans.WeakPropertyChangeListener,);
Call(METHOD,org.jhotdraw.app.action.edit.DeleteAction,<init>$2 --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.edit.DeleteAction,<init>$2 --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.edit.DeleteAction,actionPerformed --> delete,org.jhotdraw.gui.EditableComponent,);
EndClass 118
StartClass 119
Class(org.jhotdraw.app.action.edit.ClearSelectionAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(updateEnabled,void,Protected,N,N);
Parameter(<init>$2,javax.swing.JComponent,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
SuperClass(org.jhotdraw.app.action.edit.AbstractSelectionAction);
Generalization(org.jhotdraw.app.action.edit.AbstractSelectionAction);
Call(METHOD,org.jhotdraw.app.action.edit.ClearSelectionAction,<init> --> <init>$2,org.jhotdraw.app.action.edit.ClearSelectionAction,);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.ClearSelectionAction,actionPerformed --> target,org.jhotdraw.app.action.edit.AbstractSelectionAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.ClearSelectionAction,updateEnabled --> target,org.jhotdraw.app.action.edit.AbstractSelectionAction,READ);
Call(METHOD,org.jhotdraw.app.action.edit.ClearSelectionAction,<init>$2 --> <init>,org.jhotdraw.app.action.edit.AbstractSelectionAction,);
Call(METHOD,org.jhotdraw.app.action.edit.ClearSelectionAction,<init>$2 --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.edit.ClearSelectionAction,<init>$2 --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.edit.ClearSelectionAction,actionPerformed --> clearSelection,org.jhotdraw.gui.EditableComponent,);
EndClass 119
StartClass 120
Class(org.jhotdraw.app.action.file.SaveFileAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Attribute(saveAs,boolean,Private,N,N,);
Attribute(oldFocusOwner,java.awt.Component,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getChooser,org.jhotdraw.gui.URIChooser,Protected,N,N);
Method(actionPerformed,void,Public,N,N);
Method(saveViewToURI,void,Protected,N,N);
Method(access$000,java.awt.Component,Public,Y,N);
Parameter(<init>,org.jhotdraw.app.Application,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(<init>$2,org.jhotdraw.app.Application,);
Parameter(<init>$2,org.jhotdraw.app.View,);
Parameter(<init>$2,boolean,);
Parameter(getChooser,org.jhotdraw.app.View,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(saveViewToURI,org.jhotdraw.app.View,);
Parameter(saveViewToURI,java.net.URI,);
Parameter(saveViewToURI,org.jhotdraw.gui.URIChooser,);
Parameter(access$000,org.jhotdraw.app.action.file.SaveFileAction,);
SuperClass(org.jhotdraw.app.action.AbstractViewAction);
SubClass(org.jhotdraw.app.action.file.SaveFileAsAction);
Generalization(org.jhotdraw.app.action.AbstractViewAction);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction,<init> --> <init>$2,org.jhotdraw.app.action.file.SaveFileAction,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction,actionPerformed --> saveViewToURI,org.jhotdraw.app.action.file.SaveFileAction,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction,actionPerformed --> getChooser,org.jhotdraw.app.action.file.SaveFileAction,);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.SaveFileAction,<init>$2 --> saveAs,org.jhotdraw.app.action.file.SaveFileAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.SaveFileAction,actionPerformed --> saveAs,org.jhotdraw.app.action.file.SaveFileAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.SaveFileAction,actionPerformed --> oldFocusOwner,org.jhotdraw.app.action.file.SaveFileAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.SaveFileAction,access$000 --> oldFocusOwner,org.jhotdraw.app.action.file.SaveFileAction,READ);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction,<init>$2 --> <init>,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction,<init>$2 --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction,<init>$2 --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction,getChooser --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction,getChooser --> getApplication,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction,getChooser --> getModel,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction,getChooser --> createSaveChooser,org.jhotdraw.app.ApplicationModel,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction,actionPerformed --> getActiveView,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction,actionPerformed --> isEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction,actionPerformed --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction,actionPerformed --> setEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction,actionPerformed --> getURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction,actionPerformed --> canSaveTo,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction,actionPerformed --> <init>,org.jhotdraw.app.action.file.SaveFileAction$1,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction,actionPerformed --> showSaveSheet$2,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction,saveViewToURI --> <init>,org.jhotdraw.app.action.file.SaveFileAction$2,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction,saveViewToURI --> execute,org.jhotdraw.app.View,);
EndClass 120
StartClass 121
Class(org.jhotdraw.draw.AbstractFigure,N,Y,Public);
Attribute(listenerList,javax.swing.event.EventListenerList,Protected,N,N,);
Attribute(drawing,org.jhotdraw.draw.Drawing,Private,N,N,);
Attribute(isSelectable,boolean,Private,N,N,);
Attribute(isRemovable,boolean,Private,N,N,);
Attribute(isVisible,boolean,Private,N,N,);
Attribute(isTransformable,boolean,Private,N,N,);
Attribute(isConnectable,boolean,Private,N,N,);
Attribute(changingDepth,int,Protected,N,N,);
Method(<init>,void,Public,N,N);
Method(addFigureListener,void,Public,N,N);
Method(removeFigureListener,void,Public,N,N);
Method(addNotify,void,Public,N,N);
Method(removeNotify,void,Public,N,N);
Method(getDrawing,org.jhotdraw.draw.Drawing,Protected,N,N);
Method(getLock,java.lang.Object,Protected,N,N);
Method(fireAreaInvalidated,void,Public,N,N);
Method(fireAreaInvalidated$2,void,Protected,N,N);
Method(fireAreaInvalidated$3,void,Protected,N,N);
Method(fireFigureRequestRemove,void,Protected,N,N);
Method(fireFigureAdded,void,Protected,N,N);
Method(fireFigureRemoved,void,Protected,N,N);
Method(fireFigureChanged,void,Public,N,N);
Method(fireFigureChanged$2,void,Protected,N,N);
Method(fireFigureChanged$3,void,Protected,N,N);
Method(fireAttributeChanged,void,Protected,N,N);
Method(fireFigureHandlesChanged,void,Protected,N,N);
Method(fireUndoableEditHappened,void,Protected,N,N);
Method(clone,org.jhotdraw.draw.AbstractFigure,Public,N,N);
Method(remap,void,Public,N,N);
Method(createHandles,java.util.Collection,Public,N,N);
Method(getCursor,java.awt.Cursor,Public,N,N);
Method(setBounds,void,Public,N,N);
Method(setBounds$2,void,Public,N,N);
Method(invalidate,void,Protected,N,N);
Method(isChanging,boolean,Protected,N,N);
Method(getChangingDepth,int,Protected,N,N);
Method(willChange,void,Public,N,N);
Method(validate,void,Protected,N,N);
Method(changed,void,Public,N,N);
Method(findConnector,org.jhotdraw.draw.connector.Connector,Public,N,N);
Method(includes,boolean,Public,N,N);
Method(findFigureInside,org.jhotdraw.draw.Figure,Public,N,N);
Method(findCompatibleConnector,org.jhotdraw.draw.connector.Connector,Public,N,N);
Method(getActions,java.util.Collection,Public,N,N);
Method(getTool,org.jhotdraw.draw.tool.Tool,Public,N,N);
Method(handleMouseClick,boolean,Public,N,N);
Method(handleDrop,boolean,Public,N,N);
Method(getEndPoint,java.awt.geom.Point2D$Double,Public,N,N);
Method(getStartPoint,java.awt.geom.Point2D$Double,Public,N,N);
Method(getPreferredSize,org.jhotdraw.geom.Dimension2DDouble,Public,N,N);
Method(isConnectable,boolean,Public,N,N);
Method(setConnectable,void,Public,N,N);
Method(isSelectable,boolean,Public,N,N);
Method(setSelectable,void,Public,N,N);
Method(isRemovable,boolean,Public,N,N);
Method(setRemovable,void,Public,N,N);
Method(isTransformable,boolean,Public,N,N);
Method(setTransformable,void,Public,N,N);
Method(isVisible,boolean,Public,N,N);
Method(setVisible,void,Public,N,N);
Method(getDecomposition,java.util.Collection,Public,N,N);
Method(getFontRenderContext,java.awt.font.FontRenderContext,Protected,N,N);
Method(requestRemove,void,Public,N,N);
Method(getLayer,int,Public,N,N);
Method(getToolTipText,java.lang.String,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(getConnectors,java.util.Collection,Public,N,N);
Method(clone$2,org.jhotdraw.beans.AbstractBean,Public,N,N);
Method(clone$3,java.lang.Object,Public,N,N);
Method(clone$4,org.jhotdraw.draw.Figure,Public,N,N);
Parameter(addFigureListener,org.jhotdraw.draw.event.FigureListener,);
Parameter(removeFigureListener,org.jhotdraw.draw.event.FigureListener,);
Parameter(addNotify,org.jhotdraw.draw.Drawing,);
Parameter(removeNotify,org.jhotdraw.draw.Drawing,);
Parameter(fireAreaInvalidated$2,java.awt.geom.Rectangle2D$Double,);
Parameter(fireAreaInvalidated$3,org.jhotdraw.draw.event.FigureEvent,);
Parameter(fireFigureChanged$2,java.awt.geom.Rectangle2D$Double,);
Parameter(fireFigureChanged$3,org.jhotdraw.draw.event.FigureEvent,);
Parameter(fireAttributeChanged,org.jhotdraw.draw.AttributeKey,);
Parameter(fireAttributeChanged,java.lang.Object,);
Parameter(fireAttributeChanged,java.lang.Object,);
Parameter(fireUndoableEditHappened,javax.swing.undo.UndoableEdit,);
Parameter(remap,java.util.Map,org.jhotdraw.draw.Figure;org.jhotdraw.draw.Figure);
Parameter(remap,boolean,);
Parameter(createHandles,int,org.jhotdraw.draw.handle.Handle);
Parameter(getCursor,java.awt.geom.Point2D$Double,);
Parameter(setBounds,java.awt.geom.Rectangle2D$Double,);
Parameter(setBounds$2,java.awt.geom.Point2D$Double,);
Parameter(setBounds$2,java.awt.geom.Point2D$Double,);
Parameter(findConnector,java.awt.geom.Point2D$Double,);
Parameter(findConnector,org.jhotdraw.draw.ConnectionFigure,);
Parameter(includes,org.jhotdraw.draw.Figure,);
Parameter(findFigureInside,java.awt.geom.Point2D$Double,);
Parameter(findCompatibleConnector,org.jhotdraw.draw.connector.Connector,);
Parameter(findCompatibleConnector,boolean,);
Parameter(getActions,java.awt.geom.Point2D$Double,javax.swing.Action);
Parameter(getTool,java.awt.geom.Point2D$Double,);
Parameter(handleMouseClick,java.awt.geom.Point2D$Double,);
Parameter(handleMouseClick,java.awt.event.MouseEvent,);
Parameter(handleMouseClick,org.jhotdraw.draw.DrawingView,);
Parameter(handleDrop,java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure);
Parameter(handleDrop,java.util.Collection,);
Parameter(handleDrop,org.jhotdraw.draw.DrawingView,);
Parameter(setConnectable,boolean,);
Parameter(setSelectable,boolean,);
Parameter(setRemovable,boolean,);
Parameter(setTransformable,boolean,);
Parameter(setVisible,boolean,);
Parameter(getToolTipText,java.awt.geom.Point2D$Double,);
Parameter(getConnectors,org.jhotdraw.draw.ConnectionFigure,org.jhotdraw.draw.connector.Connector);
SuperClass(org.jhotdraw.beans.AbstractBean);
SubClass(org.jhotdraw.draw.RoundRectangleFigure);
SubClass(org.jhotdraw.draw.RectangleFigure);
SubClass(org.jhotdraw.draw.EllipseFigure);
SubClass(org.jhotdraw.draw.DiamondFigure);
SubClass(org.jhotdraw.draw.TriangleFigure);
SubClass(org.jhotdraw.draw.LineConnectionFigure);
SubClass(org.jhotdraw.draw.LineFigure);
SubClass(org.jhotdraw.draw.BezierFigure);
SubClass(org.jhotdraw.draw.TextAreaFigure);
SubClass(org.jhotdraw.draw.TextFigure);
SubClass(org.jhotdraw.draw.ImageFigure);
SubClass(org.jhotdraw.draw.AbstractAttributedDecoratedFigure);
SubClass(org.jhotdraw.draw.AbstractAttributedFigure);
SubClass(org.jhotdraw.draw.QuadTreeDrawing);
SubClass(org.jhotdraw.draw.DefaultDrawing);
SubClass(org.jhotdraw.draw.AbstractDrawing);
SubClass(org.jhotdraw.draw.AbstractAttributedCompositeFigure);
SubClass(org.jhotdraw.draw.GroupFigure);
SubClass(org.jhotdraw.draw.AbstractCompositeFigure);
Generalization(org.jhotdraw.beans.AbstractBean);
Realization(org.jhotdraw.draw.Figure);
Composition(org.jhotdraw.draw.Drawing);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,addNotify --> fireFigureAdded,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,removeNotify --> fireFigureRemoved,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,getLock --> getDrawing,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireAreaInvalidated --> fireAreaInvalidated$2,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireFigureChanged --> fireFigureChanged$2,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireUndoableEditHappened --> getDrawing,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,setBounds --> setBounds$2,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,setBounds$2 --> getStartPoint,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,setBounds$2 --> getEndPoint,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,setBounds$2 --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,setBounds$2 --> setBounds$2,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,setBounds$2 --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,setBounds$2 --> fireUndoableEditHappened,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,willChange --> fireAreaInvalidated,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,willChange --> invalidate,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,changed --> validate,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,changed --> fireFigureChanged$2,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,setVisible --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,setVisible --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,requestRemove --> fireFigureRequestRemove,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,clone$2 --> clone,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,clone$3 --> clone,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,clone$4 --> clone,org.jhotdraw.draw.AbstractFigure,);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,<init> --> listenerList,org.jhotdraw.draw.AbstractFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,<init> --> isSelectable,org.jhotdraw.draw.AbstractFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,<init> --> isRemovable,org.jhotdraw.draw.AbstractFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,<init> --> isVisible,org.jhotdraw.draw.AbstractFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,<init> --> isTransformable,org.jhotdraw.draw.AbstractFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,<init> --> isConnectable,org.jhotdraw.draw.AbstractFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,<init> --> changingDepth,org.jhotdraw.draw.AbstractFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,addFigureListener --> listenerList,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,removeFigureListener --> listenerList,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,addNotify --> drawing,org.jhotdraw.draw.AbstractFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,removeNotify --> drawing,org.jhotdraw.draw.AbstractFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,getDrawing --> drawing,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,fireAreaInvalidated$2 --> listenerList,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,fireAreaInvalidated$3 --> listenerList,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,fireFigureRequestRemove --> listenerList,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,fireFigureAdded --> listenerList,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,fireFigureRemoved --> listenerList,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,fireFigureChanged$2 --> listenerList,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,fireFigureChanged$3 --> listenerList,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,fireAttributeChanged --> listenerList,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,fireFigureHandlesChanged --> listenerList,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,clone --> listenerList,org.jhotdraw.draw.AbstractFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,clone --> drawing,org.jhotdraw.draw.AbstractFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,isChanging --> changingDepth,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,getChangingDepth --> changingDepth,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,willChange --> changingDepth,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,willChange --> changingDepth,org.jhotdraw.draw.AbstractFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,changed --> changingDepth,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,changed --> changingDepth,org.jhotdraw.draw.AbstractFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,isConnectable --> isConnectable,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,setConnectable --> isConnectable,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,setConnectable --> isConnectable,org.jhotdraw.draw.AbstractFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,isSelectable --> isSelectable,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,setSelectable --> isSelectable,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,setSelectable --> isSelectable,org.jhotdraw.draw.AbstractFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,isRemovable --> isRemovable,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,setRemovable --> isRemovable,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,setRemovable --> isRemovable,org.jhotdraw.draw.AbstractFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,isTransformable --> isTransformable,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,setTransformable --> isTransformable,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,setTransformable --> isTransformable,org.jhotdraw.draw.AbstractFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,isVisible --> isVisible,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,setVisible --> isVisible,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractFigure,setVisible --> isVisible,org.jhotdraw.draw.AbstractFigure,WRITE);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,<init> --> <init>,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,getLock --> getLock,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireAreaInvalidated --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireAreaInvalidated$2 --> <init>,org.jhotdraw.draw.event.FigureEvent,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireAreaInvalidated$2 --> areaInvalidated,org.jhotdraw.draw.event.FigureListener,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireAreaInvalidated$3 --> areaInvalidated,org.jhotdraw.draw.event.FigureListener,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireFigureRequestRemove --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireFigureRequestRemove --> <init>,org.jhotdraw.draw.event.FigureEvent,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireFigureRequestRemove --> figureRequestRemove,org.jhotdraw.draw.event.FigureListener,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireFigureAdded --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireFigureAdded --> <init>,org.jhotdraw.draw.event.FigureEvent,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireFigureAdded --> figureAdded,org.jhotdraw.draw.event.FigureListener,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireFigureRemoved --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireFigureRemoved --> <init>,org.jhotdraw.draw.event.FigureEvent,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireFigureRemoved --> figureRemoved,org.jhotdraw.draw.event.FigureListener,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireFigureChanged --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireFigureChanged$2 --> <init>,org.jhotdraw.draw.event.FigureEvent,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireFigureChanged$2 --> figureChanged,org.jhotdraw.draw.event.FigureListener,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireFigureChanged$3 --> figureChanged,org.jhotdraw.draw.event.FigureListener,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireAttributeChanged --> <init>$2,org.jhotdraw.draw.event.FigureEvent,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireAttributeChanged --> attributeChanged,org.jhotdraw.draw.event.FigureListener,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireFigureHandlesChanged --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireFigureHandlesChanged --> <init>,org.jhotdraw.draw.event.FigureEvent,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireFigureHandlesChanged --> figureHandlesChanged,org.jhotdraw.draw.event.FigureListener,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,fireUndoableEditHappened --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,clone --> clone,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,createHandles --> <init>$2,org.jhotdraw.draw.handle.BoundsOutlineHandle,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,createHandles --> addResizeHandles,org.jhotdraw.draw.handle.ResizeHandleKit,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,getCursor --> contains,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,setBounds$2 --> <init>,org.jhotdraw.draw.event.SetBoundsEdit,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,changed --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,findConnector --> <init>$2,org.jhotdraw.draw.connector.ChopRectangleConnector,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,findFigureInside --> contains,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,findCompatibleConnector --> <init>$2,org.jhotdraw.draw.connector.ChopRectangleConnector,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,getEndPoint --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,getStartPoint --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,getPreferredSize --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,getPreferredSize --> <init>$3,org.jhotdraw.geom.Dimension2DDouble,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,setConnectable --> firePropertyChange,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,setSelectable --> firePropertyChange,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,setRemovable --> firePropertyChange,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,setTransformable --> firePropertyChange,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.AbstractFigure,getConnectors --> <init>$2,org.jhotdraw.draw.connector.ChopRectangleConnector,);
EndClass 121
StartClass 122
Class(org.jhotdraw.xml.DOMStorable,Y,Y,Public);
Method(write,void,Public,N,Y);
Method(read,void,Public,N,Y);
Parameter(write,org.jhotdraw.xml.DOMOutput,);
Parameter(read,org.jhotdraw.xml.DOMInput,);
EndClass 122
StartClass 123
Class(org.jhotdraw.xml.DOMOutput,Y,Y,Public);
Method(setDoctype,void,Public,N,Y);
Method(openElement,void,Public,N,Y);
Method(closeElement,void,Public,N,Y);
Method(addComment,void,Public,N,Y);
Method(addText,void,Public,N,Y);
Method(addAttribute,void,Public,N,Y);
Method(addAttribute$2,void,Public,N,Y);
Method(addAttribute$3,void,Public,N,Y);
Method(addAttribute$4,void,Public,N,Y);
Method(addAttribute$5,void,Public,N,Y);
Method(addAttribute$6,void,Public,N,Y);
Method(addAttribute$7,void,Public,N,Y);
Method(addAttribute$8,void,Public,N,Y);
Method(addAttribute$9,void,Public,N,Y);
Method(addAttribute$10,void,Public,N,Y);
Method(writeObject,void,Public,N,Y);
Method(getPrototype,java.lang.Object,Public,N,Y);
Parameter(setDoctype,java.lang.String,);
Parameter(openElement,java.lang.String,);
Parameter(addComment,java.lang.String,);
Parameter(addText,java.lang.String,);
Parameter(addAttribute,java.lang.String,);
Parameter(addAttribute,java.lang.String,);
Parameter(addAttribute$2,java.lang.String,);
Parameter(addAttribute$2,java.lang.String,);
Parameter(addAttribute$2,java.lang.String,);
Parameter(addAttribute$3,java.lang.String,);
Parameter(addAttribute$3,int,);
Parameter(addAttribute$4,java.lang.String,);
Parameter(addAttribute$4,int,);
Parameter(addAttribute$4,int,);
Parameter(addAttribute$5,java.lang.String,);
Parameter(addAttribute$5,boolean,);
Parameter(addAttribute$6,java.lang.String,);
Parameter(addAttribute$6,boolean,);
Parameter(addAttribute$6,boolean,);
Parameter(addAttribute$7,java.lang.String,);
Parameter(addAttribute$7,float,);
Parameter(addAttribute$8,java.lang.String,);
Parameter(addAttribute$8,float,);
Parameter(addAttribute$8,float,);
Parameter(addAttribute$9,java.lang.String,);
Parameter(addAttribute$9,double,);
Parameter(addAttribute$10,java.lang.String,);
Parameter(addAttribute$10,double,);
Parameter(addAttribute$10,double,);
Parameter(writeObject,java.lang.Object,);
EndClass 123
StartClass 124
Class(org.jhotdraw.xml.DOMInput,Y,Y,Public);
Method(getTagName,java.lang.String,Public,N,Y);
Method(getAttribute,java.lang.String,Public,N,Y);
Method(getText,java.lang.String,Public,N,Y);
Method(getText$2,java.lang.String,Public,N,Y);
Method(getAttribute$2,int,Public,N,Y);
Method(getAttribute$3,double,Public,N,Y);
Method(getAttribute$4,boolean,Public,N,Y);
Method(getInheritedAttribute,java.util.List,Public,N,Y);
Method(getElementCount,int,Public,N,Y);
Method(getElementCount$2,int,Public,N,Y);
Method(openElement,void,Public,N,Y);
Method(openElement$2,void,Public,N,Y);
Method(openElement$3,void,Public,N,Y);
Method(closeElement,void,Public,N,Y);
Method(readObject,java.lang.Object,Public,N,Y);
Method(readObject$2,java.lang.Object,Public,N,Y);
Parameter(getAttribute,java.lang.String,);
Parameter(getAttribute,java.lang.String,);
Parameter(getText$2,java.lang.String,);
Parameter(getAttribute$2,java.lang.String,);
Parameter(getAttribute$2,int,);
Parameter(getAttribute$3,java.lang.String,);
Parameter(getAttribute$3,double,);
Parameter(getAttribute$4,java.lang.String,);
Parameter(getAttribute$4,boolean,);
Parameter(getInheritedAttribute,java.lang.String,java.lang.String);
Parameter(getElementCount$2,java.lang.String,);
Parameter(openElement,int,);
Parameter(openElement$2,java.lang.String,);
Parameter(openElement$3,java.lang.String,);
Parameter(openElement$3,int,);
Parameter(readObject$2,int,);
EndClass 124
StartClass 125
Class(org.jhotdraw.geom.Geom,N,N,Public);
Attribute(OUT_TOP,int,Public,Y,Y,);
Attribute(OUT_BOTTOM,int,Public,Y,Y,);
Attribute(OUT_LEFT,int,Public,Y,Y,);
Attribute(OUT_RIGHT,int,Public,Y,Y,);
Method(<init>,void,Private,N,N);
Method(lineContainsPoint,boolean,Public,Y,N);
Method(lineContainsPoint$2,boolean,Public,Y,N);
Method(lineContainsPoint$3,boolean,Public,Y,N);
Method(direction,int,Public,Y,N);
Method(direction$2,int,Public,Y,N);
Method(outcode,int,Public,Y,N);
Method(outcode$2,int,Public,Y,N);
Method(south,java.awt.Point,Public,Y,N);
Method(south$2,java.awt.geom.Point2D$Double,Public,Y,N);
Method(center,java.awt.Point,Public,Y,N);
Method(center$2,java.awt.geom.Point2D$Double,Public,Y,N);
Method(chop,java.awt.geom.Point2D$Double,Public,Y,N);
Method(west,java.awt.Point,Public,Y,N);
Method(west$2,java.awt.geom.Point2D$Double,Public,Y,N);
Method(east,java.awt.Point,Public,Y,N);
Method(east$2,java.awt.geom.Point2D$Double,Public,Y,N);
Method(north,java.awt.Point,Public,Y,N);
Method(north$2,java.awt.geom.Point2D$Double,Public,Y,N);
Method(range,int,Public,Y,N);
Method(range$2,double,Public,Y,N);
Method(length2,long,Public,Y,N);
Method(length,long,Public,Y,N);
Method(length2$2,double,Public,Y,N);
Method(length$2,double,Public,Y,N);
Method(length$3,double,Public,Y,N);
Method(cap,java.awt.geom.Point2D$Double,Public,Y,N);
Method(pointToAngle,double,Public,Y,N);
Method(pointToAngle$2,double,Public,Y,N);
Method(angle,double,Public,Y,N);
Method(angleToPoint,java.awt.Point,Public,Y,N);
Method(angleToPoint$2,java.awt.geom.Point2D$Double,Public,Y,N);
Method(polarToPoint,java.awt.Point,Public,Y,N);
Method(polarToPoint2D,java.awt.geom.Point2D$Double,Public,Y,N);
Method(ovalAngleToPoint,java.awt.Point,Public,Y,N);
Method(ovalAngleToPoint$2,java.awt.geom.Point2D$Double,Public,Y,N);
Method(intersect,java.awt.Point,Public,Y,N);
Method(intersect$2,java.awt.geom.Point2D$Double,Public,Y,N);
Method(intersect$3,java.awt.geom.Point2D$Double,Public,Y,N);
Method(distanceFromLine,double,Public,Y,N);
Method(grow,void,Public,Y,N);
Method(contains,boolean,Public,Y,N);
Method(contains$2,boolean,Public,Y,N);
Parameter(lineContainsPoint,int,);
Parameter(lineContainsPoint,int,);
Parameter(lineContainsPoint,int,);
Parameter(lineContainsPoint,int,);
Parameter(lineContainsPoint,int,);
Parameter(lineContainsPoint,int,);
Parameter(lineContainsPoint$2,int,);
Parameter(lineContainsPoint$2,int,);
Parameter(lineContainsPoint$2,int,);
Parameter(lineContainsPoint$2,int,);
Parameter(lineContainsPoint$2,int,);
Parameter(lineContainsPoint$2,int,);
Parameter(lineContainsPoint$2,double,);
Parameter(lineContainsPoint$3,double,);
Parameter(lineContainsPoint$3,double,);
Parameter(lineContainsPoint$3,double,);
Parameter(lineContainsPoint$3,double,);
Parameter(lineContainsPoint$3,double,);
Parameter(lineContainsPoint$3,double,);
Parameter(lineContainsPoint$3,double,);
Parameter(direction,int,);
Parameter(direction,int,);
Parameter(direction,int,);
Parameter(direction,int,);
Parameter(direction$2,double,);
Parameter(direction$2,double,);
Parameter(direction$2,double,);
Parameter(direction$2,double,);
Parameter(outcode,java.awt.Rectangle,);
Parameter(outcode,java.awt.Rectangle,);
Parameter(outcode$2,java.awt.geom.Rectangle2D$Double,);
Parameter(outcode$2,java.awt.geom.Rectangle2D$Double,);
Parameter(south,java.awt.Rectangle,);
Parameter(south$2,java.awt.geom.Rectangle2D$Double,);
Parameter(center,java.awt.Rectangle,);
Parameter(center$2,java.awt.geom.Rectangle2D$Double,);
Parameter(chop,java.awt.Shape,);
Parameter(chop,java.awt.geom.Point2D$Double,);
Parameter(west,java.awt.Rectangle,);
Parameter(west$2,java.awt.geom.Rectangle2D$Double,);
Parameter(east,java.awt.Rectangle,);
Parameter(east$2,java.awt.geom.Rectangle2D$Double,);
Parameter(north,java.awt.Rectangle,);
Parameter(north$2,java.awt.geom.Rectangle2D$Double,);
Parameter(range,int,);
Parameter(range,int,);
Parameter(range,int,);
Parameter(range$2,double,);
Parameter(range$2,double,);
Parameter(range$2,double,);
Parameter(length2,int,);
Parameter(length2,int,);
Parameter(length2,int,);
Parameter(length2,int,);
Parameter(length,int,);
Parameter(length,int,);
Parameter(length,int,);
Parameter(length,int,);
Parameter(length2$2,double,);
Parameter(length2$2,double,);
Parameter(length2$2,double,);
Parameter(length2$2,double,);
Parameter(length$2,double,);
Parameter(length$2,double,);
Parameter(length$2,double,);
Parameter(length$2,double,);
Parameter(length$3,java.awt.geom.Point2D$Double,);
Parameter(length$3,java.awt.geom.Point2D$Double,);
Parameter(cap,java.awt.geom.Point2D$Double,);
Parameter(cap,java.awt.geom.Point2D$Double,);
Parameter(cap,double,);
Parameter(pointToAngle,java.awt.Rectangle,);
Parameter(pointToAngle,java.awt.Point,);
Parameter(pointToAngle$2,java.awt.geom.Rectangle2D$Double,);
Parameter(pointToAngle$2,java.awt.geom.Point2D$Double,);
Parameter(angle,double,);
Parameter(angle,double,);
Parameter(angle,double,);
Parameter(angle,double,);
Parameter(angleToPoint,java.awt.Rectangle,);
Parameter(angleToPoint,double,);
Parameter(angleToPoint$2,java.awt.geom.Rectangle2D$Double,);
Parameter(angleToPoint$2,double,);
Parameter(polarToPoint,double,);
Parameter(polarToPoint,double,);
Parameter(polarToPoint,double,);
Parameter(polarToPoint2D,double,);
Parameter(polarToPoint2D,double,);
Parameter(polarToPoint2D,double,);
Parameter(ovalAngleToPoint,java.awt.Rectangle,);
Parameter(ovalAngleToPoint,double,);
Parameter(ovalAngleToPoint$2,java.awt.geom.Rectangle2D$Double,);
Parameter(ovalAngleToPoint$2,double,);
Parameter(intersect,int,);
Parameter(intersect,int,);
Parameter(intersect,int,);
Parameter(intersect,int,);
Parameter(intersect,int,);
Parameter(intersect,int,);
Parameter(intersect,int,);
Parameter(intersect,int,);
Parameter(intersect$2,double,);
Parameter(intersect$2,double,);
Parameter(intersect$2,double,);
Parameter(intersect$2,double,);
Parameter(intersect$2,double,);
Parameter(intersect$2,double,);
Parameter(intersect$2,double,);
Parameter(intersect$2,double,);
Parameter(intersect$3,double,);
Parameter(intersect$3,double,);
Parameter(intersect$3,double,);
Parameter(intersect$3,double,);
Parameter(intersect$3,double,);
Parameter(intersect$3,double,);
Parameter(intersect$3,double,);
Parameter(intersect$3,double,);
Parameter(intersect$3,double,);
Parameter(distanceFromLine,int,);
Parameter(distanceFromLine,int,);
Parameter(distanceFromLine,int,);
Parameter(distanceFromLine,int,);
Parameter(distanceFromLine,int,);
Parameter(distanceFromLine,int,);
Parameter(grow,java.awt.geom.Rectangle2D$Double,);
Parameter(grow,double,);
Parameter(grow,double,);
Parameter(contains,java.awt.geom.Rectangle2D$Double,);
Parameter(contains,java.awt.geom.Rectangle2D$Double,);
Parameter(contains$2,java.awt.geom.Rectangle2D,);
Parameter(contains$2,java.awt.geom.Rectangle2D,);
Call(METHOD,org.jhotdraw.geom.Geom,lineContainsPoint --> lineContainsPoint$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.geom.Geom,chop --> intersect$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.geom.Geom,chop --> length2$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.geom.Geom,length --> length2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.geom.Geom,length$2 --> length2$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.geom.Geom,length$3 --> length2$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.geom.Geom,angleToPoint --> range,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.geom.Geom,angleToPoint$2 --> range$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.geom.Geom,ovalAngleToPoint --> center,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.geom.Geom,ovalAngleToPoint --> polarToPoint,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.geom.Geom,ovalAngleToPoint$2 --> center$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.geom.Geom,ovalAngleToPoint$2 --> polarToPoint2D,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.geom.Geom,intersect$3 --> length$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.geom.Geom,distanceFromLine --> length,org.jhotdraw.geom.Geom,);
EndClass 125
StartClass 126
Class(org.jhotdraw.geom.Dimension2DDouble,N,N,Public);
Attribute(width,double,Public,N,N,);
Attribute(height,double,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(getWidth,double,Public,N,N);
Method(getHeight,double,Public,N,N);
Method(setSize,void,Public,N,N);
Method(getSize,org.jhotdraw.geom.Dimension2DDouble,Public,N,N);
Method(setSize$2,void,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Parameter(<init>$2,org.jhotdraw.geom.Dimension2DDouble,);
Parameter(<init>$3,double,);
Parameter(<init>$3,double,);
Parameter(setSize,double,);
Parameter(setSize,double,);
Parameter(setSize$2,org.jhotdraw.geom.Dimension2DDouble,);
Parameter(equals,java.lang.Object,);
Call(METHOD,org.jhotdraw.geom.Dimension2DDouble,<init> --> <init>$3,org.jhotdraw.geom.Dimension2DDouble,);
Call(METHOD,org.jhotdraw.geom.Dimension2DDouble,<init>$2 --> <init>$3,org.jhotdraw.geom.Dimension2DDouble,);
Call(METHOD,org.jhotdraw.geom.Dimension2DDouble,getSize --> <init>$3,org.jhotdraw.geom.Dimension2DDouble,);
Call(METHOD,org.jhotdraw.geom.Dimension2DDouble,setSize$2 --> setSize,org.jhotdraw.geom.Dimension2DDouble,);
Call(ATTRIBUTE,org.jhotdraw.geom.Dimension2DDouble,<init>$2 --> width,org.jhotdraw.geom.Dimension2DDouble,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.Dimension2DDouble,<init>$2 --> height,org.jhotdraw.geom.Dimension2DDouble,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.Dimension2DDouble,<init>$3 --> width,org.jhotdraw.geom.Dimension2DDouble,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.Dimension2DDouble,<init>$3 --> height,org.jhotdraw.geom.Dimension2DDouble,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.Dimension2DDouble,getWidth --> width,org.jhotdraw.geom.Dimension2DDouble,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.Dimension2DDouble,getHeight --> height,org.jhotdraw.geom.Dimension2DDouble,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.Dimension2DDouble,setSize --> width,org.jhotdraw.geom.Dimension2DDouble,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.Dimension2DDouble,setSize --> height,org.jhotdraw.geom.Dimension2DDouble,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.Dimension2DDouble,getSize --> width,org.jhotdraw.geom.Dimension2DDouble,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.Dimension2DDouble,getSize --> height,org.jhotdraw.geom.Dimension2DDouble,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.Dimension2DDouble,setSize$2 --> width,org.jhotdraw.geom.Dimension2DDouble,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.Dimension2DDouble,setSize$2 --> height,org.jhotdraw.geom.Dimension2DDouble,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.Dimension2DDouble,equals --> width,org.jhotdraw.geom.Dimension2DDouble,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.Dimension2DDouble,equals --> height,org.jhotdraw.geom.Dimension2DDouble,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.Dimension2DDouble,hashCode --> width,org.jhotdraw.geom.Dimension2DDouble,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.Dimension2DDouble,hashCode --> height,org.jhotdraw.geom.Dimension2DDouble,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.Dimension2DDouble,toString --> width,org.jhotdraw.geom.Dimension2DDouble,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.Dimension2DDouble,toString --> height,org.jhotdraw.geom.Dimension2DDouble,READ);
EndClass 126
StartClass 127
Class(org.jhotdraw.draw.connector.Connector,Y,Y,Public);
Method(findStart,java.awt.geom.Point2D$Double,Public,N,Y);
Method(findEnd,java.awt.geom.Point2D$Double,Public,N,Y);
Method(getOwner,org.jhotdraw.draw.Figure,Public,N,Y);
Method(getAnchor,java.awt.geom.Point2D$Double,Public,N,Y);
Method(getBounds,java.awt.geom.Rectangle2D$Double,Public,N,Y);
Method(updateAnchor,void,Public,N,Y);
Method(contains,boolean,Public,N,Y);
Method(clone,java.lang.Object,Public,N,Y);
Method(getDrawingArea,java.awt.geom.Rectangle2D$Double,Public,N,Y);
Method(draw,void,Public,N,Y);
Parameter(findStart,org.jhotdraw.draw.ConnectionFigure,);
Parameter(findEnd,org.jhotdraw.draw.ConnectionFigure,);
Parameter(updateAnchor,java.awt.geom.Point2D$Double,);
Parameter(contains,java.awt.geom.Point2D$Double,);
Parameter(draw,java.awt.Graphics2D,);
EndClass 127
StartClass 128
Class(org.jhotdraw.draw.connector.ChopRoundRectangleConnector,N,N,Public);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(chop,java.awt.geom.Point2D$Double,Protected,N,N);
Parameter(<init>$2,org.jhotdraw.draw.Figure,);
Parameter(chop,org.jhotdraw.draw.Figure,);
Parameter(chop,java.awt.geom.Point2D$Double,);
SuperClass(org.jhotdraw.draw.connector.ChopRectangleConnector);
SuperClass(org.jhotdraw.draw.connector.AbstractConnector);
Generalization(org.jhotdraw.draw.connector.ChopRectangleConnector);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopRoundRectangleConnector,chop --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,org.jhotdraw.draw.connector.ChopRoundRectangleConnector$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopRoundRectangleConnector,chop --> STROKE_PLACEMENT,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.connector.ChopRoundRectangleConnector,<init> --> <init>,org.jhotdraw.draw.connector.ChopRectangleConnector,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRoundRectangleConnector,<init>$2 --> <init>$2,org.jhotdraw.draw.connector.ChopRectangleConnector,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRoundRectangleConnector,chop --> getConnectorTarget,org.jhotdraw.draw.connector.AbstractConnector,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRoundRectangleConnector,chop --> getBounds,org.jhotdraw.draw.RoundRectangleFigure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRoundRectangleConnector,chop --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRoundRectangleConnector,chop --> getStrokeTotalWidth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRoundRectangleConnector,chop --> grow,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRoundRectangleConnector,chop --> getArcWidth,org.jhotdraw.draw.RoundRectangleFigure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRoundRectangleConnector,chop --> getArcHeight,org.jhotdraw.draw.RoundRectangleFigure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRoundRectangleConnector,chop --> pointToAngle$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRoundRectangleConnector,chop --> angleToPoint$2,org.jhotdraw.geom.Geom,);
EndClass 128
StartClass 129
Class(org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,N,N,Public);
Attribute(OFFSET,int,Private,Y,Y,);
Attribute(originalArc,java.awt.Point,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(draw,void,Public,N,N);
Method(basicGetBounds,java.awt.Rectangle,Protected,N,N);
Method(locate,java.awt.Point,Private,N,N);
Method(trackStart,void,Public,N,N);
Method(trackStep,void,Public,N,N);
Method(trackEnd,void,Public,N,N);
Method(keyPressed,void,Public,N,N);
Method(getToolTipText,java.lang.String,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(trackStart,java.awt.Point,);
Parameter(trackStart,int,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,int,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,int,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
Parameter(getToolTipText,java.awt.Point,);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.AbstractHandle);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,basicGetBounds --> locate,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackStart --> originalArc,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackStep --> originalArc,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackEnd --> originalArc,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,draw --> ATTRIBUTE_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,draw --> ATTRIBUTE_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,draw --> ATTRIBUTE_HANDLE_FILL_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,draw --> ATTRIBUTE_HANDLE_STROKE_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,locate --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackStart --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackStep --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackEnd --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,<init> --> <init>,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,draw --> getEditor,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,draw --> getTool,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,draw --> supportsHandleInteraction,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,draw --> getHandleAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,draw --> drawDiamond,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,basicGetBounds --> getHandlesize,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,locate --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,locate --> getBounds,org.jhotdraw.draw.RoundRectangleFigure,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,locate --> drawingToView$2,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,locate --> getArcWidth,org.jhotdraw.draw.RoundRectangleFigure,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,locate --> getArcHeight,org.jhotdraw.draw.RoundRectangleFigure,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,locate --> drawingToView,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackStart --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackStart --> getArcWidth,org.jhotdraw.draw.RoundRectangleFigure,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackStart --> getArcHeight,org.jhotdraw.draw.RoundRectangleFigure,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackStart --> drawingToView,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackStep --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackStep --> getBounds,org.jhotdraw.draw.RoundRectangleFigure,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackStep --> drawingToView$2,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackStep --> range,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackStep --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackStep --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackStep --> setArc,org.jhotdraw.draw.RoundRectangleFigure,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackStep --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackEnd --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackEnd --> getBounds,org.jhotdraw.draw.RoundRectangleFigure,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackEnd --> drawingToView$2,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackEnd --> range,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackEnd --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackEnd --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackEnd --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackEnd --> <init>$3,org.jhotdraw.draw.event.CompositeFigureEdit,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackEnd --> fireUndoableEditHappened,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,trackEnd --> <init>$6,org.jhotdraw.beans.PropertyChangeEdit,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,keyPressed --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,keyPressed --> getArcWidth,org.jhotdraw.draw.RoundRectangleFigure,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,keyPressed --> getArcHeight,org.jhotdraw.draw.RoundRectangleFigure,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,keyPressed --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,keyPressed --> setArcWidth,org.jhotdraw.draw.RoundRectangleFigure,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,keyPressed --> setArcHeight,org.jhotdraw.draw.RoundRectangleFigure,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,keyPressed --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,keyPressed --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,keyPressed --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,keyPressed --> <init>$3,org.jhotdraw.draw.event.CompositeFigureEdit,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,keyPressed --> fireUndoableEditHappened,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,keyPressed --> <init>$6,org.jhotdraw.beans.PropertyChangeEdit,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,getToolTipText --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.RoundRectangleRadiusHandle,getToolTipText --> getString,org.jhotdraw.util.ResourceBundleUtil,);
EndClass 129
StartClass 130
Class(org.jhotdraw.draw.decoration.AbstractLineDecoration,N,Y,Public);
Attribute(isFilled,boolean,Private,N,N,);
Attribute(isStroked,boolean,Private,N,N,);
Attribute(isSolid,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(isFilled,boolean,Protected,N,N);
Method(isStroked,boolean,Protected,N,N);
Method(isSolid,boolean,Protected,N,N);
Method(draw,void,Public,N,N);
Method(getDrawingArea,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(getDecorationRadius,double,Public,N,N);
Method(getTransformedDecoratorPath,java.awt.geom.Path2D$Double,Private,N,N);
Method(setFilled,void,Protected,N,N);
Method(setStroked,void,Protected,N,N);
Method(setSolid,void,Protected,N,N);
Method(getDecoratorPath,java.awt.geom.Path2D$Double,Protected,N,Y);
Method(getDecoratorPathRadius,double,Protected,N,Y);
Parameter(<init>,boolean,);
Parameter(<init>,boolean,);
Parameter(<init>,boolean,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(draw,org.jhotdraw.draw.Figure,);
Parameter(draw,java.awt.geom.Point2D$Double,);
Parameter(draw,java.awt.geom.Point2D$Double,);
Parameter(getDrawingArea,org.jhotdraw.draw.Figure,);
Parameter(getDrawingArea,java.awt.geom.Point2D$Double,);
Parameter(getDrawingArea,java.awt.geom.Point2D$Double,);
Parameter(getDecorationRadius,org.jhotdraw.draw.Figure,);
Parameter(getTransformedDecoratorPath,org.jhotdraw.draw.Figure,);
Parameter(getTransformedDecoratorPath,java.awt.geom.Point2D$Double,);
Parameter(getTransformedDecoratorPath,java.awt.geom.Point2D$Double,);
Parameter(setFilled,boolean,);
Parameter(setStroked,boolean,);
Parameter(setSolid,boolean,);
Parameter(getDecoratorPath,org.jhotdraw.draw.Figure,);
Parameter(getDecoratorPathRadius,org.jhotdraw.draw.Figure,);
SubClass(org.jhotdraw.draw.decoration.ArrowTip);
Realization(org.jhotdraw.draw.decoration.LineDecoration);
Call(METHOD,org.jhotdraw.draw.decoration.AbstractLineDecoration,draw --> getTransformedDecoratorPath,org.jhotdraw.draw.decoration.AbstractLineDecoration,);
Call(METHOD,org.jhotdraw.draw.decoration.AbstractLineDecoration,getDrawingArea --> getTransformedDecoratorPath,org.jhotdraw.draw.decoration.AbstractLineDecoration,);
Call(METHOD,org.jhotdraw.draw.decoration.AbstractLineDecoration,getDecorationRadius --> getDecoratorPathRadius,org.jhotdraw.draw.decoration.AbstractLineDecoration,);
Call(METHOD,org.jhotdraw.draw.decoration.AbstractLineDecoration,getTransformedDecoratorPath --> getDecoratorPath,org.jhotdraw.draw.decoration.AbstractLineDecoration,);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.AbstractLineDecoration,<init> --> isFilled,org.jhotdraw.draw.decoration.AbstractLineDecoration,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.AbstractLineDecoration,<init> --> isStroked,org.jhotdraw.draw.decoration.AbstractLineDecoration,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.AbstractLineDecoration,<init> --> isSolid,org.jhotdraw.draw.decoration.AbstractLineDecoration,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.AbstractLineDecoration,isFilled --> isFilled,org.jhotdraw.draw.decoration.AbstractLineDecoration,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.AbstractLineDecoration,isStroked --> isStroked,org.jhotdraw.draw.decoration.AbstractLineDecoration,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.AbstractLineDecoration,isSolid --> isSolid,org.jhotdraw.draw.decoration.AbstractLineDecoration,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.AbstractLineDecoration,draw --> isFilled,org.jhotdraw.draw.decoration.AbstractLineDecoration,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.AbstractLineDecoration,draw --> isSolid,org.jhotdraw.draw.decoration.AbstractLineDecoration,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.AbstractLineDecoration,draw --> isStroked,org.jhotdraw.draw.decoration.AbstractLineDecoration,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.AbstractLineDecoration,getDrawingArea --> isStroked,org.jhotdraw.draw.decoration.AbstractLineDecoration,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.AbstractLineDecoration,setFilled --> isFilled,org.jhotdraw.draw.decoration.AbstractLineDecoration,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.AbstractLineDecoration,setStroked --> isStroked,org.jhotdraw.draw.decoration.AbstractLineDecoration,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.AbstractLineDecoration,setSolid --> isSolid,org.jhotdraw.draw.decoration.AbstractLineDecoration,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.AbstractLineDecoration,draw --> STROKE_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.AbstractLineDecoration,draw --> FILL_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.AbstractLineDecoration,getDrawingArea --> STROKE_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.AbstractLineDecoration,getDrawingArea --> STROKE_JOIN,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.AbstractLineDecoration,getDrawingArea --> STROKE_MITER_LIMIT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.AbstractLineDecoration,getDecorationRadius --> STROKE_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.decoration.AbstractLineDecoration,getTransformedDecoratorPath --> STROKE_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.decoration.AbstractLineDecoration,draw --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.decoration.AbstractLineDecoration,draw --> getStroke,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.decoration.AbstractLineDecoration,getDrawingArea --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.decoration.AbstractLineDecoration,getDrawingArea --> grow,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.decoration.AbstractLineDecoration,getDecorationRadius --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.decoration.AbstractLineDecoration,getTransformedDecoratorPath --> get,org.jhotdraw.draw.Figure,);
EndClass 130
StartClass 131
Class(org.jhotdraw.draw.AttributeKeys$Orientation,N,N,Public);
Attribute(NORTH,org.jhotdraw.draw.AttributeKeys$Orientation,Public,Y,Y,);
Attribute(NORTH_EAST,org.jhotdraw.draw.AttributeKeys$Orientation,Public,Y,Y,);
Attribute(EAST,org.jhotdraw.draw.AttributeKeys$Orientation,Public,Y,Y,);
Attribute(SOUTH_EAST,org.jhotdraw.draw.AttributeKeys$Orientation,Public,Y,Y,);
Attribute(SOUTH,org.jhotdraw.draw.AttributeKeys$Orientation,Public,Y,Y,);
Attribute(SOUTH_WEST,org.jhotdraw.draw.AttributeKeys$Orientation,Public,Y,Y,);
Attribute(WEST,org.jhotdraw.draw.AttributeKeys$Orientation,Public,Y,Y,);
Attribute(NORTH_WEST,org.jhotdraw.draw.AttributeKeys$Orientation,Public,Y,Y,);
Attribute($VALUES,org.jhotdraw.draw.AttributeKeys$Orientation[],Private,Y,Y,);
Method(values,org.jhotdraw.draw.AttributeKeys$Orientation[],Public,Y,N);
Method(valueOf,org.jhotdraw.draw.AttributeKeys$Orientation,Public,Y,N);
Method(<init>,void,Private,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(valueOf,java.lang.String,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,int,);
Composition(org.jhotdraw.draw.AttributeKeys$Orientation);
Call(METHOD,org.jhotdraw.draw.AttributeKeys$Orientation,<clinit> --> <init>,org.jhotdraw.draw.AttributeKeys$Orientation,);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Orientation,values --> $VALUES,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Orientation,<clinit> --> NORTH,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Orientation,<clinit> --> NORTH_EAST,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Orientation,<clinit> --> EAST,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Orientation,<clinit> --> SOUTH_EAST,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Orientation,<clinit> --> SOUTH,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Orientation,<clinit> --> SOUTH_WEST,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Orientation,<clinit> --> WEST,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Orientation,<clinit> --> NORTH_WEST,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Orientation,<clinit> --> NORTH,org.jhotdraw.draw.AttributeKeys$Orientation,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Orientation,<clinit> --> NORTH_EAST,org.jhotdraw.draw.AttributeKeys$Orientation,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Orientation,<clinit> --> EAST,org.jhotdraw.draw.AttributeKeys$Orientation,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Orientation,<clinit> --> SOUTH_EAST,org.jhotdraw.draw.AttributeKeys$Orientation,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Orientation,<clinit> --> SOUTH,org.jhotdraw.draw.AttributeKeys$Orientation,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Orientation,<clinit> --> SOUTH_WEST,org.jhotdraw.draw.AttributeKeys$Orientation,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Orientation,<clinit> --> WEST,org.jhotdraw.draw.AttributeKeys$Orientation,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Orientation,<clinit> --> NORTH_WEST,org.jhotdraw.draw.AttributeKeys$Orientation,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Orientation,<clinit> --> $VALUES,org.jhotdraw.draw.AttributeKeys$Orientation,WRITE);
EndClass 131
StartClass 132
Class(org.jhotdraw.draw.AttributeKeys$Alignment,N,N,Public);
Attribute(LEADING,org.jhotdraw.draw.AttributeKeys$Alignment,Public,Y,Y,);
Attribute(TRAILING,org.jhotdraw.draw.AttributeKeys$Alignment,Public,Y,Y,);
Attribute(CENTER,org.jhotdraw.draw.AttributeKeys$Alignment,Public,Y,Y,);
Attribute(BLOCK,org.jhotdraw.draw.AttributeKeys$Alignment,Public,Y,Y,);
Attribute($VALUES,org.jhotdraw.draw.AttributeKeys$Alignment[],Private,Y,Y,);
Method(values,org.jhotdraw.draw.AttributeKeys$Alignment[],Public,Y,N);
Method(valueOf,org.jhotdraw.draw.AttributeKeys$Alignment,Public,Y,N);
Method(<init>,void,Private,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(valueOf,java.lang.String,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,int,);
Composition(org.jhotdraw.draw.AttributeKeys$Alignment);
Call(METHOD,org.jhotdraw.draw.AttributeKeys$Alignment,<clinit> --> <init>,org.jhotdraw.draw.AttributeKeys$Alignment,);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Alignment,values --> $VALUES,org.jhotdraw.draw.AttributeKeys$Alignment,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Alignment,<clinit> --> LEADING,org.jhotdraw.draw.AttributeKeys$Alignment,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Alignment,<clinit> --> TRAILING,org.jhotdraw.draw.AttributeKeys$Alignment,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Alignment,<clinit> --> CENTER,org.jhotdraw.draw.AttributeKeys$Alignment,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Alignment,<clinit> --> BLOCK,org.jhotdraw.draw.AttributeKeys$Alignment,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Alignment,<clinit> --> LEADING,org.jhotdraw.draw.AttributeKeys$Alignment,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Alignment,<clinit> --> TRAILING,org.jhotdraw.draw.AttributeKeys$Alignment,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Alignment,<clinit> --> CENTER,org.jhotdraw.draw.AttributeKeys$Alignment,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Alignment,<clinit> --> BLOCK,org.jhotdraw.draw.AttributeKeys$Alignment,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Alignment,<clinit> --> $VALUES,org.jhotdraw.draw.AttributeKeys$Alignment,WRITE);
EndClass 132
StartClass 133
Class(org.jhotdraw.geom.DoubleStroke,N,N,Public);
Attribute(outlineStroke,java.awt.BasicStroke,Private,N,N,);
Attribute(innerWidth,double,Private,N,N,);
Attribute(outlineWidth,double,Private,N,N,);
Attribute(miterLimit,double,Private,N,N,);
Attribute(dashes,float[],Private,N,N,);
Attribute(dashPhase,float,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(createStrokedShape,java.awt.Shape,Public,N,N);
Method(traceStroke,void,Protected,N,N);
Method(computeThickLine,double[],Private,N,N);
Method(computeThickLine$2,double[],Private,N,N);
Parameter(<init>,double,);
Parameter(<init>,double,);
Parameter(<init>$2,double,);
Parameter(<init>$2,double,);
Parameter(<init>$2,int,);
Parameter(<init>$2,int,);
Parameter(<init>$2,double,);
Parameter(<init>$2,float[],);
Parameter(<init>$2,float,);
Parameter(createStrokedShape,java.awt.Shape,);
Parameter(traceStroke,org.jhotdraw.geom.BezierPath,);
Parameter(traceStroke,java.awt.geom.Path2D$Double,);
Parameter(traceStroke,java.awt.geom.Path2D$Double,);
Parameter(computeThickLine,double[],);
Parameter(computeThickLine,int,);
Parameter(computeThickLine,double[],);
Parameter(computeThickLine$2,double,);
Parameter(computeThickLine$2,double,);
Parameter(computeThickLine$2,double,);
Parameter(computeThickLine$2,double,);
Parameter(computeThickLine$2,double,);
Parameter(computeThickLine$2,double[],);
SubClass(org.jhotdraw.geom.GrowStroke);
Call(METHOD,org.jhotdraw.geom.DoubleStroke,<init> --> <init>$2,org.jhotdraw.geom.DoubleStroke,);
Call(METHOD,org.jhotdraw.geom.DoubleStroke,createStrokedShape --> traceStroke,org.jhotdraw.geom.DoubleStroke,);
Call(METHOD,org.jhotdraw.geom.DoubleStroke,traceStroke --> computeThickLine$2,org.jhotdraw.geom.DoubleStroke,);
Call(METHOD,org.jhotdraw.geom.DoubleStroke,computeThickLine --> computeThickLine$2,org.jhotdraw.geom.DoubleStroke,);
Call(ATTRIBUTE,org.jhotdraw.geom.DoubleStroke,<init>$2 --> innerWidth,org.jhotdraw.geom.DoubleStroke,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.DoubleStroke,<init>$2 --> outlineWidth,org.jhotdraw.geom.DoubleStroke,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.DoubleStroke,<init>$2 --> miterLimit,org.jhotdraw.geom.DoubleStroke,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.DoubleStroke,<init>$2 --> outlineStroke,org.jhotdraw.geom.DoubleStroke,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.DoubleStroke,createStrokedShape --> outlineStroke,org.jhotdraw.geom.DoubleStroke,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.DoubleStroke,traceStroke --> innerWidth,org.jhotdraw.geom.DoubleStroke,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.DoubleStroke,traceStroke --> miterLimit,org.jhotdraw.geom.DoubleStroke,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.DoubleStroke,computeThickLine --> innerWidth,org.jhotdraw.geom.DoubleStroke,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.DoubleStroke,createStrokedShape --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.DoubleStroke,createStrokedShape --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.DoubleStroke,traceStroke --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.DoubleStroke,traceStroke --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(METHOD,org.jhotdraw.geom.DoubleStroke,createStrokedShape --> <init>,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.DoubleStroke,createStrokedShape --> setClosed,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.DoubleStroke,createStrokedShape --> moveTo,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.DoubleStroke,createStrokedShape --> lineTo,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.DoubleStroke,createStrokedShape --> quadTo,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.DoubleStroke,createStrokedShape --> curveTo,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.DoubleStroke,traceStroke --> isClosed,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.DoubleStroke,traceStroke --> intersect$3,org.jhotdraw.geom.Geom,);
EndClass 133
StartClass 134
Class(org.jhotdraw.draw.AttributeKeys$Underfill,N,N,Public);
Attribute(NONE,org.jhotdraw.draw.AttributeKeys$Underfill,Public,Y,Y,);
Attribute(CENTER,org.jhotdraw.draw.AttributeKeys$Underfill,Public,Y,Y,);
Attribute(FULL,org.jhotdraw.draw.AttributeKeys$Underfill,Public,Y,Y,);
Attribute($VALUES,org.jhotdraw.draw.AttributeKeys$Underfill[],Private,Y,Y,);
Method(values,org.jhotdraw.draw.AttributeKeys$Underfill[],Public,Y,N);
Method(valueOf,org.jhotdraw.draw.AttributeKeys$Underfill,Public,Y,N);
Method(<init>,void,Private,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(valueOf,java.lang.String,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,int,);
Composition(org.jhotdraw.draw.AttributeKeys$Underfill);
Call(METHOD,org.jhotdraw.draw.AttributeKeys$Underfill,<clinit> --> <init>,org.jhotdraw.draw.AttributeKeys$Underfill,);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Underfill,values --> $VALUES,org.jhotdraw.draw.AttributeKeys$Underfill,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Underfill,<clinit> --> NONE,org.jhotdraw.draw.AttributeKeys$Underfill,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Underfill,<clinit> --> CENTER,org.jhotdraw.draw.AttributeKeys$Underfill,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Underfill,<clinit> --> FULL,org.jhotdraw.draw.AttributeKeys$Underfill,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Underfill,<clinit> --> NONE,org.jhotdraw.draw.AttributeKeys$Underfill,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Underfill,<clinit> --> CENTER,org.jhotdraw.draw.AttributeKeys$Underfill,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Underfill,<clinit> --> FULL,org.jhotdraw.draw.AttributeKeys$Underfill,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$Underfill,<clinit> --> $VALUES,org.jhotdraw.draw.AttributeKeys$Underfill,WRITE);
EndClass 134
StartClass 135
Class(org.jhotdraw.draw.AttributeKeys$StrokeType,N,N,Public);
Attribute(BASIC,org.jhotdraw.draw.AttributeKeys$StrokeType,Public,Y,Y,);
Attribute(DOUBLE,org.jhotdraw.draw.AttributeKeys$StrokeType,Public,Y,Y,);
Attribute($VALUES,org.jhotdraw.draw.AttributeKeys$StrokeType[],Private,Y,Y,);
Method(values,org.jhotdraw.draw.AttributeKeys$StrokeType[],Public,Y,N);
Method(valueOf,org.jhotdraw.draw.AttributeKeys$StrokeType,Public,Y,N);
Method(<init>,void,Private,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(valueOf,java.lang.String,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,int,);
Composition(org.jhotdraw.draw.AttributeKeys$StrokeType);
Call(METHOD,org.jhotdraw.draw.AttributeKeys$StrokeType,<clinit> --> <init>,org.jhotdraw.draw.AttributeKeys$StrokeType,);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$StrokeType,values --> $VALUES,org.jhotdraw.draw.AttributeKeys$StrokeType,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$StrokeType,<clinit> --> BASIC,org.jhotdraw.draw.AttributeKeys$StrokeType,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$StrokeType,<clinit> --> DOUBLE,org.jhotdraw.draw.AttributeKeys$StrokeType,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$StrokeType,<clinit> --> BASIC,org.jhotdraw.draw.AttributeKeys$StrokeType,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$StrokeType,<clinit> --> DOUBLE,org.jhotdraw.draw.AttributeKeys$StrokeType,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$StrokeType,<clinit> --> $VALUES,org.jhotdraw.draw.AttributeKeys$StrokeType,WRITE);
EndClass 135
StartClass 136
Class(org.jhotdraw.draw.AttributeKeys$WindingRule,N,N,Public);
Attribute(EVEN_ODD,org.jhotdraw.draw.AttributeKeys$WindingRule,Public,Y,Y,);
Attribute(NON_ZERO,org.jhotdraw.draw.AttributeKeys$WindingRule,Public,Y,Y,);
Attribute($VALUES,org.jhotdraw.draw.AttributeKeys$WindingRule[],Private,Y,Y,);
Method(values,org.jhotdraw.draw.AttributeKeys$WindingRule[],Public,Y,N);
Method(valueOf,org.jhotdraw.draw.AttributeKeys$WindingRule,Public,Y,N);
Method(<init>,void,Private,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(valueOf,java.lang.String,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,int,);
Composition(org.jhotdraw.draw.AttributeKeys$WindingRule);
Call(METHOD,org.jhotdraw.draw.AttributeKeys$WindingRule,<clinit> --> <init>,org.jhotdraw.draw.AttributeKeys$WindingRule,);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$WindingRule,values --> $VALUES,org.jhotdraw.draw.AttributeKeys$WindingRule,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$WindingRule,<clinit> --> EVEN_ODD,org.jhotdraw.draw.AttributeKeys$WindingRule,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$WindingRule,<clinit> --> NON_ZERO,org.jhotdraw.draw.AttributeKeys$WindingRule,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$WindingRule,<clinit> --> EVEN_ODD,org.jhotdraw.draw.AttributeKeys$WindingRule,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$WindingRule,<clinit> --> NON_ZERO,org.jhotdraw.draw.AttributeKeys$WindingRule,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$WindingRule,<clinit> --> $VALUES,org.jhotdraw.draw.AttributeKeys$WindingRule,WRITE);
EndClass 136
StartClass 137
Class(org.jhotdraw.draw.AttributeKeys$StrokePlacement,N,N,Public);
Attribute(CENTER,org.jhotdraw.draw.AttributeKeys$StrokePlacement,Public,Y,Y,);
Attribute(INSIDE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,Public,Y,Y,);
Attribute(OUTSIDE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,Public,Y,Y,);
Attribute($VALUES,org.jhotdraw.draw.AttributeKeys$StrokePlacement[],Private,Y,Y,);
Method(values,org.jhotdraw.draw.AttributeKeys$StrokePlacement[],Public,Y,N);
Method(valueOf,org.jhotdraw.draw.AttributeKeys$StrokePlacement,Public,Y,N);
Method(<init>,void,Private,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(valueOf,java.lang.String,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,int,);
Composition(org.jhotdraw.draw.AttributeKeys$StrokePlacement);
Call(METHOD,org.jhotdraw.draw.AttributeKeys$StrokePlacement,<clinit> --> <init>,org.jhotdraw.draw.AttributeKeys$StrokePlacement,);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,values --> $VALUES,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,<clinit> --> CENTER,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,<clinit> --> INSIDE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,<clinit> --> OUTSIDE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,<clinit> --> CENTER,org.jhotdraw.draw.AttributeKeys$StrokePlacement,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,<clinit> --> INSIDE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,<clinit> --> OUTSIDE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,<clinit> --> $VALUES,org.jhotdraw.draw.AttributeKeys$StrokePlacement,WRITE);
EndClass 137
StartClass 138
Class(org.jhotdraw.draw.AttributeKeys$1,N,N,NA);
Attribute($SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokeType,int[],Public,Y,Y,);
Attribute($SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,int[],Public,Y,Y,);
Attribute($SwitchMap$org$jhotdraw$draw$AttributeKeys$Underfill,int[],Public,Y,Y,);
Method(<clinit>,void,Public,Y,N);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$Underfill,org.jhotdraw.draw.AttributeKeys$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,org.jhotdraw.draw.AttributeKeys$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokeType,org.jhotdraw.draw.AttributeKeys$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$Underfill,org.jhotdraw.draw.AttributeKeys$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,org.jhotdraw.draw.AttributeKeys$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokeType,org.jhotdraw.draw.AttributeKeys$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$1,<clinit> --> FULL,org.jhotdraw.draw.AttributeKeys$Underfill,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$1,<clinit> --> NONE,org.jhotdraw.draw.AttributeKeys$Underfill,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$1,<clinit> --> CENTER,org.jhotdraw.draw.AttributeKeys$Underfill,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$1,<clinit> --> INSIDE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$1,<clinit> --> OUTSIDE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$1,<clinit> --> CENTER,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$1,<clinit> --> BASIC,org.jhotdraw.draw.AttributeKeys$StrokeType,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKeys$1,<clinit> --> DOUBLE,org.jhotdraw.draw.AttributeKeys$StrokeType,READ);
Call(METHOD,org.jhotdraw.draw.AttributeKeys$1,<clinit> --> values,org.jhotdraw.draw.AttributeKeys$Underfill,);
Call(METHOD,org.jhotdraw.draw.AttributeKeys$1,<clinit> --> values,org.jhotdraw.draw.AttributeKeys$StrokePlacement,);
Call(METHOD,org.jhotdraw.draw.AttributeKeys$1,<clinit> --> values,org.jhotdraw.draw.AttributeKeys$StrokeType,);
EndClass 138
StartClass 139
Class(org.jhotdraw.geom.Insets2D$Double,N,N,Public);
Attribute(top,double,Public,N,N,);
Attribute(left,double,Public,N,N,);
Attribute(bottom,double,Public,N,N,);
Attribute(right,double,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getTop,double,Public,N,N);
Method(getLeft,double,Public,N,N);
Method(getBottom,double,Public,N,N);
Method(getRight,double,Public,N,N);
Method(set,void,Public,N,N);
Parameter(<init>$2,double,);
Parameter(<init>$2,double,);
Parameter(<init>$2,double,);
Parameter(<init>$2,double,);
Parameter(set,double,);
Parameter(set,double,);
Parameter(set,double,);
Parameter(set,double,);
SuperClass(org.jhotdraw.geom.Insets2D);
Generalization(org.jhotdraw.geom.Insets2D);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Double,<init>$2 --> top,org.jhotdraw.geom.Insets2D$Double,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Double,<init>$2 --> left,org.jhotdraw.geom.Insets2D$Double,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Double,<init>$2 --> bottom,org.jhotdraw.geom.Insets2D$Double,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Double,<init>$2 --> right,org.jhotdraw.geom.Insets2D$Double,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Double,getTop --> top,org.jhotdraw.geom.Insets2D$Double,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Double,getLeft --> left,org.jhotdraw.geom.Insets2D$Double,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Double,getBottom --> bottom,org.jhotdraw.geom.Insets2D$Double,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Double,getRight --> right,org.jhotdraw.geom.Insets2D$Double,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Double,set --> top,org.jhotdraw.geom.Insets2D$Double,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Double,set --> left,org.jhotdraw.geom.Insets2D$Double,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Double,set --> bottom,org.jhotdraw.geom.Insets2D$Double,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Double,set --> right,org.jhotdraw.geom.Insets2D$Double,WRITE);
Call(METHOD,org.jhotdraw.geom.Insets2D$Double,<init> --> <init>,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D$Double,<init>$2 --> <init>,org.jhotdraw.geom.Insets2D,);
EndClass 139
StartClass 140
Class(org.jhotdraw.geom.Insets2D,N,Y,Public);
Method(<init>,void,Protected,N,N);
Method(getTop,double,Public,N,Y);
Method(getLeft,double,Public,N,Y);
Method(getBottom,double,Public,N,Y);
Method(getRight,double,Public,N,Y);
Method(set,void,Public,N,Y);
Method(set$2,void,Public,N,N);
Method(add,void,Public,N,N);
Method(add$2,void,Public,N,N);
Method(addTo,void,Public,N,N);
Method(subtract,void,Public,N,N);
Method(subtract$2,void,Public,N,N);
Method(subtractTo,void,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(clone,java.lang.Object,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Parameter(set,double,);
Parameter(set,double,);
Parameter(set,double,);
Parameter(set,double,);
Parameter(set$2,org.jhotdraw.geom.Insets2D,);
Parameter(add,double,);
Parameter(add,double,);
Parameter(add,double,);
Parameter(add,double,);
Parameter(add$2,org.jhotdraw.geom.Insets2D,);
Parameter(addTo,java.awt.geom.Rectangle2D,);
Parameter(subtract,double,);
Parameter(subtract,double,);
Parameter(subtract,double,);
Parameter(subtract,double,);
Parameter(subtract$2,org.jhotdraw.geom.Insets2D,);
Parameter(subtractTo,java.awt.geom.Rectangle2D,);
Parameter(equals,java.lang.Object,);
SubClass(org.jhotdraw.geom.Insets2D$Double);
SubClass(org.jhotdraw.geom.Insets2D$Float);
Call(METHOD,org.jhotdraw.geom.Insets2D,set$2 --> getTop,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,set$2 --> getLeft,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,set$2 --> getBottom,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,set$2 --> getRight,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,set$2 --> set,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,add --> getTop,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,add --> getLeft,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,add --> getBottom,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,add --> getRight,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,add --> set,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,add$2 --> getTop,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,add$2 --> getLeft,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,add$2 --> getBottom,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,add$2 --> getRight,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,add$2 --> set,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,addTo --> getLeft,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,addTo --> getTop,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,addTo --> getRight,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,addTo --> getBottom,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,subtract --> getTop,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,subtract --> getLeft,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,subtract --> getBottom,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,subtract --> getRight,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,subtract --> set,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,subtract$2 --> getTop,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,subtract$2 --> getLeft,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,subtract$2 --> getBottom,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,subtract$2 --> getRight,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,subtract$2 --> set,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,subtractTo --> getLeft,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,subtractTo --> getTop,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,subtractTo --> getRight,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,subtractTo --> getBottom,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,equals --> getTop,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,equals --> getLeft,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,equals --> getBottom,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,equals --> getRight,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,hashCode --> getLeft,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,hashCode --> getBottom,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,hashCode --> getRight,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,hashCode --> getTop,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,toString --> getTop,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,toString --> getLeft,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,toString --> getBottom,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D,toString --> getRight,org.jhotdraw.geom.Insets2D,);
EndClass 140
StartClass 141
Class(org.jhotdraw.draw.decoration.LineDecoration,Y,Y,Public);
Method(draw,void,Public,N,Y);
Method(getDecorationRadius,double,Public,N,Y);
Method(getDrawingArea,java.awt.geom.Rectangle2D$Double,Public,N,Y);
Parameter(draw,java.awt.Graphics2D,);
Parameter(draw,org.jhotdraw.draw.Figure,);
Parameter(draw,java.awt.geom.Point2D$Double,);
Parameter(draw,java.awt.geom.Point2D$Double,);
Parameter(getDecorationRadius,org.jhotdraw.draw.Figure,);
Parameter(getDrawingArea,org.jhotdraw.draw.Figure,);
Parameter(getDrawingArea,java.awt.geom.Point2D$Double,);
Parameter(getDrawingArea,java.awt.geom.Point2D$Double,);
EndClass 141
StartClass 142
Class(org.jhotdraw.geom.BezierPath,N,N,Public);
Attribute(C0_MASK,int,Public,Y,Y,);
Attribute(C1_MASK,int,Public,Y,Y,);
Attribute(C2_MASK,int,Public,Y,Y,);
Attribute(C1C2_MASK,int,Public,Y,Y,);
Attribute(generalPath,java.awt.geom.Path2D$Double,Private,N,N,);
Attribute(bounds,java.awt.geom.Rectangle2D$Double,Private,N,N,);
Attribute(outer,int,Private,N,N,);
Attribute(isClosed,boolean,Private,N,N,);
Attribute(windingRule,int,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(add,void,Public,N,N);
Method(add$2,void,Public,N,N);
Method(add$3,void,Public,N,N);
Method(addPolyline,void,Public,N,N);
Method(set,void,Public,N,N);
Method(get,java.awt.geom.Point2D$Double,Public,N,N);
Method(invalidatePath,void,Public,N,N);
Method(validatePath,void,Public,N,N);
Method(toGeneralPath,java.awt.geom.Path2D$Double,Public,N,N);
Method(contains,boolean,Public,N,N);
Method(outlineContains,boolean,Public,N,N);
Method(intersects,boolean,Public,N,N);
Method(getPathIterator,java.awt.geom.PathIterator,Public,N,N);
Method(getPathIterator$2,java.awt.geom.PathIterator,Public,N,N);
Method(contains$2,boolean,Public,N,N);
Method(intersects$2,boolean,Public,N,N);
Method(getBounds2D,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(getBounds,java.awt.Rectangle,Public,N,N);
Method(contains$3,boolean,Public,N,N);
Method(contains$4,boolean,Public,N,N);
Method(setClosed,void,Public,N,N);
Method(isClosed,boolean,Public,N,N);
Method(clone,org.jhotdraw.geom.BezierPath,Public,N,N);
Method(transform,void,Public,N,N);
Method(setTo,void,Public,N,N);
Method(getCenter,java.awt.geom.Point2D$Double,Public,N,N);
Method(chop,java.awt.geom.Point2D$Double,Public,N,N);
Method(indexOfOutermostNode,int,Public,N,N);
Method(getPointOnPath,java.awt.geom.Point2D$Double,Public,N,N);
Method(getLengthOfPath,double,Public,N,N);
Method(getRelativePositionOnPath,double,Public,N,N);
Method(findSegment,int,Public,N,N);
Method(joinSegments,int,Public,N,N);
Method(splitSegment,int,Public,N,N);
Method(moveTo,void,Public,N,N);
Method(lineTo,void,Public,N,N);
Method(quadTo,void,Public,N,N);
Method(curveTo,void,Public,N,N);
Method(arcTo,void,Public,N,N);
Method(toPolygonArray,java.awt.geom.Point2D$Double[],Public,N,N);
Method(setWindingRule,void,Public,N,N);
Method(getWindingRule,int,Public,N,N);
Method(clone$2,java.lang.Object,Public,N,N);
Method(getBounds2D$2,java.awt.geom.Rectangle2D,Public,N,N);
Parameter(add,java.awt.geom.Point2D$Double,);
Parameter(add$2,double,);
Parameter(add$2,double,);
Parameter(add$3,int,);
Parameter(add$3,java.awt.geom.Point2D$Double,);
Parameter(add$3,java.awt.geom.Point2D$Double,);
Parameter(add$3,java.awt.geom.Point2D$Double,);
Parameter(addPolyline,java.util.Collection,java.awt.geom.Point2D$Double);
Parameter(set,int,);
Parameter(set,int,);
Parameter(set,java.awt.geom.Point2D$Double,);
Parameter(get,int,);
Parameter(get,int,);
Parameter(contains,java.awt.geom.Point2D,);
Parameter(outlineContains,java.awt.geom.Point2D$Double,);
Parameter(outlineContains,double,);
Parameter(intersects,java.awt.geom.Rectangle2D,);
Parameter(getPathIterator,java.awt.geom.AffineTransform,);
Parameter(getPathIterator$2,java.awt.geom.AffineTransform,);
Parameter(getPathIterator$2,double,);
Parameter(contains$2,java.awt.geom.Rectangle2D,);
Parameter(intersects$2,double,);
Parameter(intersects$2,double,);
Parameter(intersects$2,double,);
Parameter(intersects$2,double,);
Parameter(contains$3,double,);
Parameter(contains$3,double,);
Parameter(contains$3,double,);
Parameter(contains$3,double,);
Parameter(contains$4,double,);
Parameter(contains$4,double,);
Parameter(setClosed,boolean,);
Parameter(transform,java.awt.geom.AffineTransform,);
Parameter(setTo,org.jhotdraw.geom.BezierPath,);
Parameter(chop,java.awt.geom.Point2D$Double,);
Parameter(getPointOnPath,double,);
Parameter(getPointOnPath,double,);
Parameter(getLengthOfPath,double,);
Parameter(getRelativePositionOnPath,java.awt.geom.Point2D$Double,);
Parameter(getRelativePositionOnPath,double,);
Parameter(findSegment,java.awt.geom.Point2D$Double,);
Parameter(findSegment,double,);
Parameter(joinSegments,java.awt.geom.Point2D$Double,);
Parameter(joinSegments,double,);
Parameter(splitSegment,java.awt.geom.Point2D$Double,);
Parameter(splitSegment,double,);
Parameter(moveTo,double,);
Parameter(moveTo,double,);
Parameter(lineTo,double,);
Parameter(lineTo,double,);
Parameter(quadTo,double,);
Parameter(quadTo,double,);
Parameter(quadTo,double,);
Parameter(quadTo,double,);
Parameter(curveTo,double,);
Parameter(curveTo,double,);
Parameter(curveTo,double,);
Parameter(curveTo,double,);
Parameter(curveTo,double,);
Parameter(curveTo,double,);
Parameter(arcTo,double,);
Parameter(arcTo,double,);
Parameter(arcTo,double,);
Parameter(arcTo,boolean,);
Parameter(arcTo,boolean,);
Parameter(arcTo,double,);
Parameter(arcTo,double,);
Parameter(setWindingRule,int,);
Call(METHOD,org.jhotdraw.geom.BezierPath,validatePath --> toGeneralPath,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,contains --> validatePath,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,intersects --> validatePath,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,contains$2 --> validatePath,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,intersects$2 --> validatePath,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,getBounds --> getBounds2D,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,contains$3 --> validatePath,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,contains$4 --> validatePath,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,setClosed --> invalidatePath,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,transform --> invalidatePath,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,indexOfOutermostNode --> getCenter,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,getPointOnPath --> validatePath,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,getPointOnPath --> getLengthOfPath,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,getRelativePositionOnPath --> getLengthOfPath,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,getRelativePositionOnPath --> <init>,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,getRelativePositionOnPath --> invalidatePath,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,getRelativePositionOnPath --> outlineContains,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,findSegment --> <init>,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,findSegment --> invalidatePath,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,findSegment --> outlineContains,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,splitSegment --> findSegment,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,arcTo --> lineTo,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,arcTo --> curveTo,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,arcTo --> quadTo,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,setWindingRule --> invalidatePath,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,clone$2 --> clone,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPath,getBounds2D$2 --> getBounds2D,org.jhotdraw.geom.BezierPath,);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,<init> --> outer,org.jhotdraw.geom.BezierPath,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,<init> --> windingRule,org.jhotdraw.geom.BezierPath,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,invalidatePath --> generalPath,org.jhotdraw.geom.BezierPath,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,invalidatePath --> bounds,org.jhotdraw.geom.BezierPath,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,invalidatePath --> outer,org.jhotdraw.geom.BezierPath,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,validatePath --> generalPath,org.jhotdraw.geom.BezierPath,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,validatePath --> generalPath,org.jhotdraw.geom.BezierPath,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,toGeneralPath --> windingRule,org.jhotdraw.geom.BezierPath,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,toGeneralPath --> isClosed,org.jhotdraw.geom.BezierPath,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,contains --> generalPath,org.jhotdraw.geom.BezierPath,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,intersects --> generalPath,org.jhotdraw.geom.BezierPath,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,contains$2 --> generalPath,org.jhotdraw.geom.BezierPath,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,intersects$2 --> generalPath,org.jhotdraw.geom.BezierPath,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,getBounds2D --> bounds,org.jhotdraw.geom.BezierPath,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,getBounds2D --> isClosed,org.jhotdraw.geom.BezierPath,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,getBounds2D --> bounds,org.jhotdraw.geom.BezierPath,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,contains$3 --> generalPath,org.jhotdraw.geom.BezierPath,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,contains$4 --> generalPath,org.jhotdraw.geom.BezierPath,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,setClosed --> isClosed,org.jhotdraw.geom.BezierPath,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,setClosed --> isClosed,org.jhotdraw.geom.BezierPath,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,isClosed --> isClosed,org.jhotdraw.geom.BezierPath,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,indexOfOutermostNode --> outer,org.jhotdraw.geom.BezierPath,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,indexOfOutermostNode --> outer,org.jhotdraw.geom.BezierPath,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,getPointOnPath --> generalPath,org.jhotdraw.geom.BezierPath,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,getLengthOfPath --> generalPath,org.jhotdraw.geom.BezierPath,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,getRelativePositionOnPath --> isClosed,org.jhotdraw.geom.BezierPath,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,findSegment --> isClosed,org.jhotdraw.geom.BezierPath,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,setWindingRule --> windingRule,org.jhotdraw.geom.BezierPath,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,setWindingRule --> windingRule,org.jhotdraw.geom.BezierPath,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,getWindingRule --> windingRule,org.jhotdraw.geom.BezierPath,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,set --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,set --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,get --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,get --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,toGeneralPath --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,toGeneralPath --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,toGeneralPath --> mask,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,getBounds2D --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,getBounds2D --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,getBounds2D --> mask,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,transform --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,transform --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,getCenter --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,getCenter --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,indexOfOutermostNode --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,indexOfOutermostNode --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,getRelativePositionOnPath --> mask,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,getRelativePositionOnPath --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,getRelativePositionOnPath --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,findSegment --> mask,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,findSegment --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,findSegment --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,joinSegments --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,joinSegments --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,splitSegment --> mask,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,moveTo --> keepColinear,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,lineTo --> keepColinear,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,curveTo --> mask,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,curveTo --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,curveTo --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,curveTo --> mask,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,curveTo --> keepColinear,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,arcTo --> mask,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,arcTo --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,arcTo --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,toPolygonArray --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath,toPolygonArray --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(METHOD,org.jhotdraw.geom.BezierPath,add --> <init>$4,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.geom.BezierPath,add$2 --> <init>$6,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.geom.BezierPath,add$3 --> <init>$4,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.geom.BezierPath,addPolyline --> <init>$4,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.geom.BezierPath,outlineContains --> outlineContains,org.jhotdraw.geom.Shapes,);
Call(METHOD,org.jhotdraw.geom.BezierPath,getPathIterator --> <init>$2,org.jhotdraw.geom.BezierPathIterator,);
Call(METHOD,org.jhotdraw.geom.BezierPath,getPathIterator$2 --> <init>$2,org.jhotdraw.geom.BezierPathIterator,);
Call(METHOD,org.jhotdraw.geom.BezierPath,clone --> clone,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.geom.BezierPath,setTo --> setTo,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.geom.BezierPath,setTo --> clone,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.geom.BezierPath,chop --> chop,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.geom.BezierPath,indexOfOutermostNode --> length2$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.geom.BezierPath,getPointOnPath --> getControlPoint,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.geom.BezierPath,getPointOnPath --> length$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.geom.BezierPath,getLengthOfPath --> length$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.geom.BezierPath,getRelativePositionOnPath --> <init>,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.geom.BezierPath,getRelativePositionOnPath --> lineContainsPoint$3,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.geom.BezierPath,getRelativePositionOnPath --> length$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.geom.BezierPath,getRelativePositionOnPath --> setTo,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.geom.BezierPath,findSegment --> <init>,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.geom.BezierPath,findSegment --> lineContainsPoint$3,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.geom.BezierPath,findSegment --> setTo,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.geom.BezierPath,joinSegments --> length$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.geom.BezierPath,splitSegment --> <init>$4,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.geom.BezierPath,splitSegment --> <init>$3,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.geom.BezierPath,moveTo --> <init>$5,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.geom.BezierPath,lineTo --> <init>$5,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.geom.BezierPath,quadTo --> <init>$6,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.geom.BezierPath,curveTo --> angle,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.geom.BezierPath,curveTo --> <init>$6,org.jhotdraw.geom.BezierPath$Node,);
EndClass 142
StartClass 143
Class(org.jhotdraw.draw.text.FloatingTextArea,N,N,Public);
Attribute(editScrollContainer,javax.swing.JScrollPane,Protected,N,N,);
Attribute(textArea,javax.swing.JTextArea,Protected,N,N,);
Attribute(view,org.jhotdraw.draw.DrawingView,Protected,N,N,);
Attribute(editedFigure,org.jhotdraw.draw.TextHolderFigure,Private,N,N,);
Attribute(figureHandler,org.jhotdraw.draw.event.FigureListener,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(createOverlay,void,Public,N,N);
Method(requestFocus,void,Public,N,N);
Method(createOverlay$2,void,Public,N,N);
Method(updateWidget,void,Protected,N,N);
Method(setBounds,void,Public,N,N);
Method(getText,java.lang.String,Public,N,N);
Method(getPreferredSize,java.awt.Dimension,Public,N,N);
Method(endOverlay,void,Public,N,N);
Parameter(createOverlay,org.jhotdraw.draw.DrawingView,);
Parameter(createOverlay$2,org.jhotdraw.draw.DrawingView,);
Parameter(createOverlay$2,org.jhotdraw.draw.TextHolderFigure,);
Parameter(setBounds,java.awt.geom.Rectangle2D$Double,);
Parameter(setBounds,java.lang.String,);
Parameter(getPreferredSize,int,);
Composition(org.jhotdraw.draw.DrawingView);
Composition(org.jhotdraw.draw.TextHolderFigure);
Composition(org.jhotdraw.draw.event.FigureListener);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextArea,createOverlay --> createOverlay$2,org.jhotdraw.draw.text.FloatingTextArea,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextArea,createOverlay$2 --> updateWidget,org.jhotdraw.draw.text.FloatingTextArea,);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea,<init> --> textArea,org.jhotdraw.draw.text.FloatingTextArea,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea,<init> --> editScrollContainer,org.jhotdraw.draw.text.FloatingTextArea,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea,<init> --> figureHandler,org.jhotdraw.draw.text.FloatingTextArea,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea,<init> --> textArea,org.jhotdraw.draw.text.FloatingTextArea,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea,<init> --> editScrollContainer,org.jhotdraw.draw.text.FloatingTextArea,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea,requestFocus --> textArea,org.jhotdraw.draw.text.FloatingTextArea,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea,createOverlay$2 --> editScrollContainer,org.jhotdraw.draw.text.FloatingTextArea,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea,createOverlay$2 --> editedFigure,org.jhotdraw.draw.text.FloatingTextArea,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea,createOverlay$2 --> figureHandler,org.jhotdraw.draw.text.FloatingTextArea,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea,createOverlay$2 --> editedFigure,org.jhotdraw.draw.text.FloatingTextArea,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea,createOverlay$2 --> view,org.jhotdraw.draw.text.FloatingTextArea,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea,updateWidget --> editedFigure,org.jhotdraw.draw.text.FloatingTextArea,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea,updateWidget --> view,org.jhotdraw.draw.text.FloatingTextArea,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea,updateWidget --> textArea,org.jhotdraw.draw.text.FloatingTextArea,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea,setBounds --> textArea,org.jhotdraw.draw.text.FloatingTextArea,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea,setBounds --> editScrollContainer,org.jhotdraw.draw.text.FloatingTextArea,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea,setBounds --> view,org.jhotdraw.draw.text.FloatingTextArea,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea,getText --> textArea,org.jhotdraw.draw.text.FloatingTextArea,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea,getPreferredSize --> textArea,org.jhotdraw.draw.text.FloatingTextArea,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea,endOverlay --> view,org.jhotdraw.draw.text.FloatingTextArea,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea,endOverlay --> editScrollContainer,org.jhotdraw.draw.text.FloatingTextArea,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea,endOverlay --> editedFigure,org.jhotdraw.draw.text.FloatingTextArea,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea,endOverlay --> figureHandler,org.jhotdraw.draw.text.FloatingTextArea,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea,endOverlay --> editedFigure,org.jhotdraw.draw.text.FloatingTextArea,WRITE);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextArea,<init> --> <init>,org.jhotdraw.draw.text.FloatingTextArea$1,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextArea,createOverlay$2 --> getComponent,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextArea,createOverlay$2 --> addFigureListener,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextArea,updateWidget --> getFont,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextArea,updateWidget --> getFontSize,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextArea,updateWidget --> getScaleFactor,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextArea,updateWidget --> getTextColor,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextArea,updateWidget --> getFillColor,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextArea,setBounds --> drawingToView$2,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextArea,endOverlay --> getComponent,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextArea,endOverlay --> removeFigureListener,org.jhotdraw.draw.Figure,);
EndClass 143
StartClass 144
Class(org.jhotdraw.draw.DrawingView,Y,Y,Public);
Attribute(DRAWING_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(CURSOR_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(CONSTRAINER_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(VISIBLE_CONSTRAINER_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(INVISIBLE_CONSTRAINER_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(CONSTRAINER_VISIBLE_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(SCALE_FACTOR_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(HANDLE_DETAIL_LEVEL_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(ENABLED_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(ACTIVE_HANDLE_PROPERTY,java.lang.String,Public,Y,Y,);
Method(getDrawing,org.jhotdraw.draw.Drawing,Public,N,Y);
Method(setDrawing,void,Public,N,Y);
Method(setCursor,void,Public,N,Y);
Method(isFigureSelected,boolean,Public,N,Y);
Method(addToSelection,void,Public,N,Y);
Method(addToSelection$2,void,Public,N,Y);
Method(removeFromSelection,void,Public,N,Y);
Method(toggleSelection,void,Public,N,Y);
Method(clearSelection,void,Public,N,Y);
Method(selectAll,void,Public,N,Y);
Method(getSelectedFigures,java.util.Set,Public,N,Y);
Method(getSelectionCount,int,Public,N,Y);
Method(findHandle,org.jhotdraw.draw.handle.Handle,Public,N,Y);
Method(getCompatibleHandles,java.util.Collection,Public,N,Y);
Method(setActiveHandle,void,Public,N,Y);
Method(getActiveHandle,org.jhotdraw.draw.handle.Handle,Public,N,Y);
Method(findFigure,org.jhotdraw.draw.Figure,Public,N,Y);
Method(findFigures,java.util.Collection,Public,N,Y);
Method(findFiguresWithin,java.util.Collection,Public,N,Y);
Method(addNotify,void,Public,N,Y);
Method(removeNotify,void,Public,N,Y);
Method(getEditor,org.jhotdraw.draw.DrawingEditor,Public,N,Y);
Method(addFigureSelectionListener,void,Public,N,Y);
Method(removeFigureSelectionListener,void,Public,N,Y);
Method(requestFocus,void,Public,N,Y);
Method(drawingToView,java.awt.Point,Public,N,Y);
Method(viewToDrawing,java.awt.geom.Point2D$Double,Public,N,Y);
Method(drawingToView$2,java.awt.Rectangle,Public,N,Y);
Method(viewToDrawing$2,java.awt.geom.Rectangle2D$Double,Public,N,Y);
Method(getConstrainer,org.jhotdraw.draw.Constrainer,Public,N,Y);
Method(setVisibleConstrainer,void,Public,N,Y);
Method(getVisibleConstrainer,org.jhotdraw.draw.Constrainer,Public,N,Y);
Method(setInvisibleConstrainer,void,Public,N,Y);
Method(getInvisibleConstrainer,org.jhotdraw.draw.Constrainer,Public,N,Y);
Method(setConstrainerVisible,void,Public,N,Y);
Method(isConstrainerVisible,boolean,Public,N,Y);
Method(getComponent,javax.swing.JComponent,Public,N,Y);
Method(getDrawingToViewTransform,java.awt.geom.AffineTransform,Public,N,Y);
Method(getScaleFactor,double,Public,N,Y);
Method(setScaleFactor,void,Public,N,Y);
Method(setHandleDetailLevel,void,Public,N,Y);
Method(getHandleDetailLevel,int,Public,N,Y);
Method(setEnabled,void,Public,N,Y);
Method(isEnabled,boolean,Public,N,Y);
Method(repaintHandles,void,Public,N,Y);
Method(addPropertyChangeListener,void,Public,N,Y);
Method(removePropertyChangeListener,void,Public,N,Y);
Method(addMouseListener,void,Public,N,Y);
Method(removeMouseListener,void,Public,N,Y);
Method(addKeyListener,void,Public,N,Y);
Method(removeKeyListener,void,Public,N,Y);
Method(addMouseMotionListener,void,Public,N,Y);
Method(removeMouseMotionListener,void,Public,N,Y);
Parameter(setDrawing,org.jhotdraw.draw.Drawing,);
Parameter(setCursor,java.awt.Cursor,);
Parameter(isFigureSelected,org.jhotdraw.draw.Figure,);
Parameter(addToSelection,org.jhotdraw.draw.Figure,);
Parameter(addToSelection$2,java.util.Collection,org.jhotdraw.draw.Figure);
Parameter(removeFromSelection,org.jhotdraw.draw.Figure,);
Parameter(toggleSelection,org.jhotdraw.draw.Figure,);
Parameter(findHandle,java.awt.Point,);
Parameter(getCompatibleHandles,org.jhotdraw.draw.handle.Handle,org.jhotdraw.draw.handle.Handle);
Parameter(setActiveHandle,org.jhotdraw.draw.handle.Handle,);
Parameter(findFigure,java.awt.Point,);
Parameter(findFigures,java.awt.Rectangle,org.jhotdraw.draw.Figure);
Parameter(findFiguresWithin,java.awt.Rectangle,org.jhotdraw.draw.Figure);
Parameter(addNotify,org.jhotdraw.draw.DrawingEditor,);
Parameter(removeNotify,org.jhotdraw.draw.DrawingEditor,);
Parameter(addFigureSelectionListener,org.jhotdraw.draw.event.FigureSelectionListener,);
Parameter(removeFigureSelectionListener,org.jhotdraw.draw.event.FigureSelectionListener,);
Parameter(drawingToView,java.awt.geom.Point2D$Double,);
Parameter(viewToDrawing,java.awt.Point,);
Parameter(drawingToView$2,java.awt.geom.Rectangle2D$Double,);
Parameter(viewToDrawing$2,java.awt.Rectangle,);
Parameter(setVisibleConstrainer,org.jhotdraw.draw.Constrainer,);
Parameter(setInvisibleConstrainer,org.jhotdraw.draw.Constrainer,);
Parameter(setConstrainerVisible,boolean,);
Parameter(setScaleFactor,double,);
Parameter(setHandleDetailLevel,int,);
Parameter(setEnabled,boolean,);
Parameter(addPropertyChangeListener,java.beans.PropertyChangeListener,);
Parameter(removePropertyChangeListener,java.beans.PropertyChangeListener,);
Parameter(addMouseListener,java.awt.event.MouseListener,);
Parameter(removeMouseListener,java.awt.event.MouseListener,);
Parameter(addKeyListener,java.awt.event.KeyListener,);
Parameter(removeKeyListener,java.awt.event.KeyListener,);
Parameter(addMouseMotionListener,java.awt.event.MouseMotionListener,);
Parameter(removeMouseMotionListener,java.awt.event.MouseMotionListener,);
EndClass 144
StartClass 145
Class(org.jhotdraw.draw.tool.TextAreaCreationTool$1,N,N,NA);
Attribute(val$editedFigure,org.jhotdraw.draw.TextHolderFigure,Public,N,Y,);
Attribute(val$oldText,java.lang.String,Public,N,Y,);
Attribute(val$newText,java.lang.String,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.tool.TextAreaCreationTool,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.tool.TextAreaCreationTool,);
Parameter(<init>,org.jhotdraw.draw.TextHolderFigure,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.String,);
Composition(org.jhotdraw.draw.TextHolderFigure);
Composition(org.jhotdraw.draw.tool.TextAreaCreationTool);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaCreationTool$1,<init> --> this$0,org.jhotdraw.draw.tool.TextAreaCreationTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaCreationTool$1,<init> --> val$editedFigure,org.jhotdraw.draw.tool.TextAreaCreationTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaCreationTool$1,<init> --> val$oldText,org.jhotdraw.draw.tool.TextAreaCreationTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaCreationTool$1,<init> --> val$newText,org.jhotdraw.draw.tool.TextAreaCreationTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaCreationTool$1,undo --> val$editedFigure,org.jhotdraw.draw.tool.TextAreaCreationTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaCreationTool$1,undo --> val$oldText,org.jhotdraw.draw.tool.TextAreaCreationTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaCreationTool$1,redo --> val$editedFigure,org.jhotdraw.draw.tool.TextAreaCreationTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaCreationTool$1,redo --> val$newText,org.jhotdraw.draw.tool.TextAreaCreationTool$1,READ);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool$1,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool$1,getPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool$1,undo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool$1,undo --> setText,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool$1,undo --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool$1,redo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool$1,redo --> setText,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaCreationTool$1,redo --> changed,org.jhotdraw.draw.Figure,);
EndClass 145
StartClass 146
Class(org.jhotdraw.draw.Drawing,Y,Y,Public);
Method(drawCanvas,void,Public,N,Y);
Method(add,boolean,Public,N,Y);
Method(add$2,void,Public,N,Y);
Method(addAll,void,Public,N,Y);
Method(addAll$2,void,Public,N,Y);
Method(remove,boolean,Public,N,Y);
Method(removeAll,void,Public,N,Y);
Method(basicRemove,int,Public,N,Y);
Method(basicRemoveAll,void,Public,N,Y);
Method(basicAdd,void,Public,N,Y);
Method(basicAdd$2,void,Public,N,Y);
Method(basicAddAll,void,Public,N,Y);
Method(findFigures,java.util.List,Public,N,Y);
Method(findFiguresWithin,java.util.List,Public,N,Y);
Method(findFigure,org.jhotdraw.draw.Figure,Public,N,Y);
Method(findFigureExcept,org.jhotdraw.draw.Figure,Public,N,Y);
Method(findFigureExcept$2,org.jhotdraw.draw.Figure,Public,N,Y);
Method(findFigureBehind,org.jhotdraw.draw.Figure,Public,N,Y);
Method(findFigureBehind$2,org.jhotdraw.draw.Figure,Public,N,Y);
Method(getFiguresFrontToBack,java.util.List,Public,N,Y);
Method(findFigureInside,org.jhotdraw.draw.Figure,Public,N,Y);
Method(sendToBack,void,Public,N,Y);
Method(bringToFront,void,Public,N,Y);
Method(sort,java.util.List,Public,N,Y);
Method(addUndoableEditListener,void,Public,N,Y);
Method(removeUndoableEditListener,void,Public,N,Y);
Method(fireUndoableEditHappened,void,Public,N,Y);
Method(getFontRenderContext,java.awt.font.FontRenderContext,Public,N,Y);
Method(setFontRenderContext,void,Public,N,Y);
Method(getLock,java.lang.Object,Public,N,Y);
Method(addInputFormat,void,Public,N,Y);
Method(addOutputFormat,void,Public,N,Y);
Method(setInputFormats,void,Public,N,Y);
Method(getInputFormats,java.util.List,Public,N,Y);
Method(setOutputFormats,void,Public,N,Y);
Method(getOutputFormats,java.util.List,Public,N,Y);
Parameter(drawCanvas,java.awt.Graphics2D,);
Parameter(add,org.jhotdraw.draw.Figure,);
Parameter(add$2,int,);
Parameter(add$2,org.jhotdraw.draw.Figure,);
Parameter(addAll,java.util.Collection,);
Parameter(addAll$2,int,);
Parameter(addAll$2,java.util.Collection,);
Parameter(remove,org.jhotdraw.draw.Figure,);
Parameter(removeAll,java.util.Collection,);
Parameter(basicRemove,org.jhotdraw.draw.Figure,);
Parameter(basicRemoveAll,java.util.Collection,);
Parameter(basicAdd,org.jhotdraw.draw.Figure,);
Parameter(basicAdd$2,int,);
Parameter(basicAdd$2,org.jhotdraw.draw.Figure,);
Parameter(basicAddAll,int,);
Parameter(basicAddAll,java.util.Collection,);
Parameter(findFigures,java.awt.geom.Rectangle2D$Double,org.jhotdraw.draw.Figure);
Parameter(findFiguresWithin,java.awt.geom.Rectangle2D$Double,org.jhotdraw.draw.Figure);
Parameter(findFigure,java.awt.geom.Point2D$Double,);
Parameter(findFigureExcept,java.awt.geom.Point2D$Double,);
Parameter(findFigureExcept,org.jhotdraw.draw.Figure,);
Parameter(findFigureExcept$2,java.awt.geom.Point2D$Double,);
Parameter(findFigureExcept$2,java.util.Collection,);
Parameter(findFigureBehind,java.awt.geom.Point2D$Double,);
Parameter(findFigureBehind,org.jhotdraw.draw.Figure,);
Parameter(findFigureBehind$2,java.awt.geom.Point2D$Double,);
Parameter(findFigureBehind$2,java.util.Collection,);
Parameter(findFigureInside,java.awt.geom.Point2D$Double,);
Parameter(sendToBack,org.jhotdraw.draw.Figure,);
Parameter(bringToFront,org.jhotdraw.draw.Figure,);
Parameter(sort,java.util.Collection,org.jhotdraw.draw.Figure);
Parameter(addUndoableEditListener,javax.swing.event.UndoableEditListener,);
Parameter(removeUndoableEditListener,javax.swing.event.UndoableEditListener,);
Parameter(fireUndoableEditHappened,javax.swing.undo.UndoableEdit,);
Parameter(setFontRenderContext,java.awt.font.FontRenderContext,);
Parameter(addInputFormat,org.jhotdraw.draw.io.InputFormat,);
Parameter(addOutputFormat,org.jhotdraw.draw.io.OutputFormat,);
Parameter(setInputFormats,java.util.List,org.jhotdraw.draw.io.InputFormat);
Parameter(setOutputFormats,java.util.List,org.jhotdraw.draw.io.OutputFormat);
Realization(org.jhotdraw.draw.CompositeFigure);
Realization(org.jhotdraw.xml.DOMStorable);
EndClass 146
StartClass 147
Class(org.jhotdraw.draw.DefaultDrawingEditor$ToolHandler,N,N,NA);
Attribute(this$0,org.jhotdraw.draw.DefaultDrawingEditor,Public,N,Y,);
Method(<init>,void,Private,N,N);
Method(areaInvalidated,void,Public,N,N);
Method(toolStarted,void,Public,N,N);
Method(boundsInvalidated,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DefaultDrawingEditor,);
Parameter(areaInvalidated,org.jhotdraw.draw.event.ToolEvent,);
Parameter(toolStarted,org.jhotdraw.draw.event.ToolEvent,);
Parameter(boundsInvalidated,org.jhotdraw.draw.event.ToolEvent,);
Parameter(<init>$2,org.jhotdraw.draw.DefaultDrawingEditor,);
Parameter(<init>$2,org.jhotdraw.draw.DefaultDrawingEditor$1,);
SuperClass(org.jhotdraw.draw.event.ToolAdapter);
Generalization(org.jhotdraw.draw.event.ToolAdapter);
Composition(org.jhotdraw.draw.DefaultDrawingEditor);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor$ToolHandler,<init>$2 --> <init>,org.jhotdraw.draw.DefaultDrawingEditor$ToolHandler,);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor$ToolHandler,<init> --> this$0,org.jhotdraw.draw.DefaultDrawingEditor$ToolHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor$ToolHandler,toolStarted --> this$0,org.jhotdraw.draw.DefaultDrawingEditor$ToolHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor$ToolHandler,boundsInvalidated --> this$0,org.jhotdraw.draw.DefaultDrawingEditor$ToolHandler,READ);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor$ToolHandler,<init> --> <init>,org.jhotdraw.draw.event.ToolAdapter,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor$ToolHandler,areaInvalidated --> getInvalidatedArea,org.jhotdraw.draw.event.ToolEvent,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor$ToolHandler,areaInvalidated --> getView,org.jhotdraw.draw.event.ToolEvent,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor$ToolHandler,areaInvalidated --> getComponent,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor$ToolHandler,toolStarted --> getView,org.jhotdraw.draw.event.ToolEvent,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor$ToolHandler,toolStarted --> setActiveView,org.jhotdraw.draw.DefaultDrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor$ToolHandler,boundsInvalidated --> getView,org.jhotdraw.draw.event.ToolEvent,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor$ToolHandler,boundsInvalidated --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor$ToolHandler,boundsInvalidated --> access$000,org.jhotdraw.draw.DefaultDrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor$ToolHandler,boundsInvalidated --> getComponent,org.jhotdraw.draw.DrawingView,);
EndClass 147
StartClass 148
Class(org.jhotdraw.draw.action.MoveAction$South,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
SuperClass(org.jhotdraw.draw.action.MoveAction);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.MoveAction);
Call(METHOD,org.jhotdraw.draw.action.MoveAction$South,<init> --> <init>,org.jhotdraw.draw.action.MoveAction,);
Call(METHOD,org.jhotdraw.draw.action.MoveAction$South,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.MoveAction$South,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
EndClass 148
StartClass 149
Class(org.jhotdraw.draw.action.MoveConstrainedAction,N,Y,Public);
Attribute(dir,org.jhotdraw.draw.TranslationDirection,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>,org.jhotdraw.draw.TranslationDirection,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
SubClass(org.jhotdraw.draw.action.MoveConstrainedAction$South);
SubClass(org.jhotdraw.draw.action.MoveConstrainedAction$West);
SubClass(org.jhotdraw.draw.action.MoveConstrainedAction$East);
SubClass(org.jhotdraw.draw.action.MoveConstrainedAction$North);
Generalization(org.jhotdraw.draw.action.AbstractSelectedAction);
Composition(org.jhotdraw.draw.TranslationDirection);
Call(ATTRIBUTE,org.jhotdraw.draw.action.MoveConstrainedAction,<init> --> dir,org.jhotdraw.draw.action.MoveConstrainedAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.MoveConstrainedAction,actionPerformed --> dir,org.jhotdraw.draw.action.MoveConstrainedAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.MoveConstrainedAction,actionPerformed --> $SwitchMap$org$jhotdraw$draw$TranslationDirection,org.jhotdraw.draw.action.MoveConstrainedAction$1,READ);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction,<init> --> <init>,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction,<init> --> updateEnabledState,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction,actionPerformed --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction,actionPerformed --> getSelectionCount,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction,actionPerformed --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction,actionPerformed --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction,actionPerformed --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction,actionPerformed --> getConstrainer,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction,actionPerformed --> translateRectangle,org.jhotdraw.draw.Constrainer,);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction,actionPerformed --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction,actionPerformed --> transform,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction,actionPerformed --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction,actionPerformed --> <init>$2,org.jhotdraw.draw.event.TransformEdit,);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction,actionPerformed --> fireUndoableEditHappened,org.jhotdraw.draw.action.AbstractSelectedAction,);
EndClass 149
StartClass 150
Class(org.jhotdraw.draw.action.MoveAction$West,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
SuperClass(org.jhotdraw.draw.action.MoveAction);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.MoveAction);
Call(METHOD,org.jhotdraw.draw.action.MoveAction$West,<init> --> <init>,org.jhotdraw.draw.action.MoveAction,);
Call(METHOD,org.jhotdraw.draw.action.MoveAction$West,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.MoveAction$West,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
EndClass 150
StartClass 151
Class(org.jhotdraw.draw.action.MoveConstrainedAction$South,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
SuperClass(org.jhotdraw.draw.action.MoveConstrainedAction);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.MoveConstrainedAction);
Call(ATTRIBUTE,org.jhotdraw.draw.action.MoveConstrainedAction$South,<init> --> SOUTH,org.jhotdraw.draw.TranslationDirection,READ);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction$South,<init> --> <init>,org.jhotdraw.draw.action.MoveConstrainedAction,);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction$South,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction$South,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
EndClass 151
StartClass 152
Class(org.jhotdraw.draw.action.MoveConstrainedAction$West,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
SuperClass(org.jhotdraw.draw.action.MoveConstrainedAction);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.MoveConstrainedAction);
Call(ATTRIBUTE,org.jhotdraw.draw.action.MoveConstrainedAction$West,<init> --> WEST,org.jhotdraw.draw.TranslationDirection,READ);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction$West,<init> --> <init>,org.jhotdraw.draw.action.MoveConstrainedAction,);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction$West,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction$West,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
EndClass 152
StartClass 153
Class(org.jhotdraw.draw.action.MoveConstrainedAction$East,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
SuperClass(org.jhotdraw.draw.action.MoveConstrainedAction);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.MoveConstrainedAction);
Call(ATTRIBUTE,org.jhotdraw.draw.action.MoveConstrainedAction$East,<init> --> EAST,org.jhotdraw.draw.TranslationDirection,READ);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction$East,<init> --> <init>,org.jhotdraw.draw.action.MoveConstrainedAction,);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction$East,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction$East,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
EndClass 153
StartClass 154
Class(org.jhotdraw.draw.action.MoveAction$North,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
SuperClass(org.jhotdraw.draw.action.MoveAction);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.MoveAction);
Call(METHOD,org.jhotdraw.draw.action.MoveAction$North,<init> --> <init>,org.jhotdraw.draw.action.MoveAction,);
Call(METHOD,org.jhotdraw.draw.action.MoveAction$North,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.MoveAction$North,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
EndClass 154
StartClass 155
Class(org.jhotdraw.draw.action.MoveAction$East,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
SuperClass(org.jhotdraw.draw.action.MoveAction);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.MoveAction);
Call(METHOD,org.jhotdraw.draw.action.MoveAction$East,<init> --> <init>,org.jhotdraw.draw.action.MoveAction,);
Call(METHOD,org.jhotdraw.draw.action.MoveAction$East,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.MoveAction$East,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
EndClass 155
StartClass 156
Class(org.jhotdraw.draw.action.MoveConstrainedAction$North,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
SuperClass(org.jhotdraw.draw.action.MoveConstrainedAction);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.MoveConstrainedAction);
Call(ATTRIBUTE,org.jhotdraw.draw.action.MoveConstrainedAction$North,<init> --> NORTH,org.jhotdraw.draw.TranslationDirection,READ);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction$North,<init> --> <init>,org.jhotdraw.draw.action.MoveConstrainedAction,);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction$North,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction$North,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
EndClass 156
StartClass 157
Class(org.jhotdraw.draw.action.MoveAction,N,Y,Public);
Attribute(dx,int,Private,N,N,);
Attribute(dy,int,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>,int,);
Parameter(<init>,int,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
SubClass(org.jhotdraw.draw.action.MoveAction$South);
SubClass(org.jhotdraw.draw.action.MoveAction$West);
SubClass(org.jhotdraw.draw.action.MoveAction$North);
SubClass(org.jhotdraw.draw.action.MoveAction$East);
Generalization(org.jhotdraw.draw.action.AbstractSelectedAction);
Call(ATTRIBUTE,org.jhotdraw.draw.action.MoveAction,<init> --> dx,org.jhotdraw.draw.action.MoveAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.MoveAction,<init> --> dy,org.jhotdraw.draw.action.MoveAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.MoveAction,actionPerformed --> dx,org.jhotdraw.draw.action.MoveAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.MoveAction,actionPerformed --> dy,org.jhotdraw.draw.action.MoveAction,READ);
Call(METHOD,org.jhotdraw.draw.action.MoveAction,<init> --> <init>,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.MoveAction,<init> --> updateEnabledState,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.MoveAction,actionPerformed --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.MoveAction,actionPerformed --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.MoveAction,actionPerformed --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.MoveAction,actionPerformed --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.MoveAction,actionPerformed --> transform,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.MoveAction,actionPerformed --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.MoveAction,actionPerformed --> <init>$2,org.jhotdraw.draw.event.TransformEdit,);
Call(METHOD,org.jhotdraw.draw.action.MoveAction,actionPerformed --> fireUndoableEditHappened,org.jhotdraw.draw.action.AbstractSelectedAction,);
EndClass 157
StartClass 158
Class(org.jhotdraw.draw.action.IncreaseHandleDetailLevelAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(increaseHandleDetaiLevel,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.AbstractSelectedAction);
Call(METHOD,org.jhotdraw.draw.action.IncreaseHandleDetailLevelAction,actionPerformed --> increaseHandleDetaiLevel,org.jhotdraw.draw.action.IncreaseHandleDetailLevelAction,);
Call(METHOD,org.jhotdraw.draw.action.IncreaseHandleDetailLevelAction,<init> --> <init>,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.IncreaseHandleDetailLevelAction,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.IncreaseHandleDetailLevelAction,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.IncreaseHandleDetailLevelAction,<init> --> updateEnabledState,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.IncreaseHandleDetailLevelAction,increaseHandleDetaiLevel --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.IncreaseHandleDetailLevelAction,increaseHandleDetaiLevel --> getHandleDetailLevel,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.IncreaseHandleDetailLevelAction,increaseHandleDetaiLevel --> setHandleDetailLevel,org.jhotdraw.draw.DrawingView,);
EndClass 158
StartClass 159
Class(org.jhotdraw.draw.event.ToolListener,Y,Y,Public);
Method(toolStarted,void,Public,N,Y);
Method(toolDone,void,Public,N,Y);
Method(areaInvalidated,void,Public,N,Y);
Method(boundsInvalidated,void,Public,N,Y);
Parameter(toolStarted,org.jhotdraw.draw.event.ToolEvent,);
Parameter(toolDone,org.jhotdraw.draw.event.ToolEvent,);
Parameter(areaInvalidated,org.jhotdraw.draw.event.ToolEvent,);
Parameter(boundsInvalidated,org.jhotdraw.draw.event.ToolEvent,);
EndClass 159
StartClass 160
Class(org.jhotdraw.draw.DefaultDrawingEditor$1,N,N,NA);
Attribute(this$0,org.jhotdraw.draw.DefaultDrawingEditor,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(focusGained,void,Public,N,N);
Method(focusLost,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DefaultDrawingEditor,);
Parameter(focusGained,java.awt.event.FocusEvent,);
Parameter(focusLost,java.awt.event.FocusEvent,);
Composition(org.jhotdraw.draw.DefaultDrawingEditor);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor$1,<init> --> this$0,org.jhotdraw.draw.DefaultDrawingEditor$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingEditor$1,focusGained --> this$0,org.jhotdraw.draw.DefaultDrawingEditor$1,READ);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor$1,focusGained --> findView,org.jhotdraw.draw.DefaultDrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingEditor$1,focusGained --> setActiveView,org.jhotdraw.draw.DefaultDrawingEditor,);
EndClass 160
StartClass 161
Class(org.jhotdraw.geom.BezierPath$Node,N,N,Public);
Attribute(mask,int,Public,N,N,);
Attribute(x,double[],Public,N,N,);
Attribute(y,double[],Public,N,N,);
Attribute(keepColinear,boolean,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(setTo,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(<init>$5,void,Public,N,N);
Method(<init>$6,void,Public,N,N);
Method(getMask,int,Public,N,N);
Method(setMask,void,Public,N,N);
Method(setControlPoint,void,Public,N,N);
Method(getControlPoint,java.awt.geom.Point2D$Double,Public,N,N);
Method(moveTo,void,Public,N,N);
Method(moveTo$2,void,Public,N,N);
Method(moveBy,void,Public,N,N);
Method(clone,java.lang.Object,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(equals,boolean,Public,N,N);
Parameter(<init>$2,org.jhotdraw.geom.BezierPath$Node,);
Parameter(setTo,org.jhotdraw.geom.BezierPath$Node,);
Parameter(<init>$3,java.awt.geom.Point2D$Double,);
Parameter(<init>$4,int,);
Parameter(<init>$4,java.awt.geom.Point2D$Double,);
Parameter(<init>$4,java.awt.geom.Point2D$Double,);
Parameter(<init>$4,java.awt.geom.Point2D$Double,);
Parameter(<init>$5,double,);
Parameter(<init>$5,double,);
Parameter(<init>$6,int,);
Parameter(<init>$6,double,);
Parameter(<init>$6,double,);
Parameter(<init>$6,double,);
Parameter(<init>$6,double,);
Parameter(<init>$6,double,);
Parameter(<init>$6,double,);
Parameter(setMask,int,);
Parameter(setControlPoint,int,);
Parameter(setControlPoint,java.awt.geom.Point2D$Double,);
Parameter(getControlPoint,int,);
Parameter(moveTo,java.awt.geom.Point2D$Double,);
Parameter(moveTo$2,double,);
Parameter(moveTo$2,double,);
Parameter(moveBy,double,);
Parameter(moveBy,double,);
Parameter(equals,java.lang.Object,);
Call(METHOD,org.jhotdraw.geom.BezierPath$Node,<init>$2 --> setTo,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.geom.BezierPath$Node,moveTo --> moveBy,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.geom.BezierPath$Node,moveTo$2 --> moveBy,org.jhotdraw.geom.BezierPath$Node,);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init> --> mask,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init> --> x,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init> --> y,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init> --> keepColinear,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$2 --> mask,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$2 --> x,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$2 --> y,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$2 --> keepColinear,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,setTo --> mask,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,setTo --> keepColinear,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,setTo --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,setTo --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,setTo --> mask,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,setTo --> keepColinear,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$3 --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$3 --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$3 --> mask,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$3 --> x,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$3 --> y,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$3 --> keepColinear,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$4 --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$4 --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$4 --> mask,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$4 --> x,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$4 --> y,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$4 --> keepColinear,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$5 --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$5 --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$5 --> mask,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$5 --> x,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$5 --> y,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$5 --> keepColinear,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$6 --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$6 --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$6 --> mask,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$6 --> x,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$6 --> y,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,<init>$6 --> keepColinear,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,getMask --> mask,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,setMask --> mask,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,setControlPoint --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,setControlPoint --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,getControlPoint --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,getControlPoint --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,moveTo --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,moveTo --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,moveTo$2 --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,moveTo$2 --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,moveBy --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,moveBy --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,clone --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,clone --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,clone --> x,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,clone --> y,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,toString --> mask,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,toString --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,toString --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,hashCode --> mask,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,hashCode --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,hashCode --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,equals --> mask,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,equals --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPath$Node,equals --> y,org.jhotdraw.geom.BezierPath$Node,READ);
EndClass 161
StartClass 162
Class(org.jhotdraw.app.AbstractView,N,Y,Public);
Attribute(application,org.jhotdraw.app.Application,Private,N,N,);
Attribute(executor,java.util.concurrent.ExecutorService,Protected,N,N,);
Attribute(hasUnsavedChanges,boolean,Private,N,N,);
Attribute(preferences,java.util.prefs.Preferences,Protected,N,N,);
Attribute(multipleOpenId,int,Private,N,N,);
Attribute(isShowing,boolean,Private,N,N,);
Attribute(title,java.lang.String,Private,N,N,);
Attribute(disposables,java.util.LinkedList,Private,N,N,org.jhotdraw.app.Disposable,);
Attribute(uri,java.net.URI,Protected,N,N,);
Method(<init>,void,Public,N,N);
Method(init,void,Public,N,N);
Method(start,void,Public,N,N);
Method(activate,void,Public,N,N);
Method(deactivate,void,Public,N,N);
Method(stop,void,Public,N,N);
Method(dispose,void,Public,N,N);
Method(canSaveTo,boolean,Public,N,N);
Method(getURI,java.net.URI,Public,N,N);
Method(setURI,void,Public,N,N);
Method(initComponents,void,Private,N,N);
Method(setApplication,void,Public,N,N);
Method(getApplication,org.jhotdraw.app.Application,Public,N,N);
Method(getComponent,javax.swing.JComponent,Public,N,N);
Method(isEmpty,boolean,Public,N,N);
Method(hasUnsavedChanges,boolean,Public,N,N);
Method(setHasUnsavedChanges,void,Protected,N,N);
Method(execute,void,Public,N,N);
Method(setMultipleOpenId,void,Public,N,N);
Method(getMultipleOpenId,int,Public,N,N);
Method(setShowing,void,Public,N,N);
Method(isShowing,boolean,Public,N,N);
Method(markChangesAsSaved,void,Public,N,N);
Method(setTitle,void,Public,N,N);
Method(getTitle,java.lang.String,Public,N,N);
Method(addDisposable,void,Public,N,N);
Method(removeDisposable,void,Public,N,N);
Parameter(canSaveTo,java.net.URI,);
Parameter(setURI,java.net.URI,);
Parameter(setApplication,org.jhotdraw.app.Application,);
Parameter(setHasUnsavedChanges,boolean,);
Parameter(execute,java.lang.Runnable,);
Parameter(setMultipleOpenId,int,);
Parameter(setShowing,boolean,);
Parameter(setTitle,java.lang.String,);
Parameter(addDisposable,org.jhotdraw.app.Disposable,);
Parameter(removeDisposable,org.jhotdraw.app.Disposable,);
SubClass(org.jhotdraw.samples.draw.DrawView);
Realization(org.jhotdraw.app.View);
Composition(org.jhotdraw.app.Application);
Call(METHOD,org.jhotdraw.app.AbstractView,isEmpty --> getURI,org.jhotdraw.app.AbstractView,);
Call(METHOD,org.jhotdraw.app.AbstractView,isEmpty --> hasUnsavedChanges,org.jhotdraw.app.AbstractView,);
Call(METHOD,org.jhotdraw.app.AbstractView,markChangesAsSaved --> setHasUnsavedChanges,org.jhotdraw.app.AbstractView,);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,<init> --> multipleOpenId,org.jhotdraw.app.AbstractView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,<init> --> preferences,org.jhotdraw.app.AbstractView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,dispose --> executor,org.jhotdraw.app.AbstractView,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,dispose --> disposables,org.jhotdraw.app.AbstractView,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,dispose --> executor,org.jhotdraw.app.AbstractView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,dispose --> disposables,org.jhotdraw.app.AbstractView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,getURI --> uri,org.jhotdraw.app.AbstractView,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,setURI --> uri,org.jhotdraw.app.AbstractView,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,setURI --> preferences,org.jhotdraw.app.AbstractView,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,setURI --> uri,org.jhotdraw.app.AbstractView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,setApplication --> application,org.jhotdraw.app.AbstractView,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,setApplication --> application,org.jhotdraw.app.AbstractView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,getApplication --> application,org.jhotdraw.app.AbstractView,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,hasUnsavedChanges --> hasUnsavedChanges,org.jhotdraw.app.AbstractView,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,setHasUnsavedChanges --> hasUnsavedChanges,org.jhotdraw.app.AbstractView,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,setHasUnsavedChanges --> hasUnsavedChanges,org.jhotdraw.app.AbstractView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,execute --> executor,org.jhotdraw.app.AbstractView,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,execute --> executor,org.jhotdraw.app.AbstractView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,setMultipleOpenId --> multipleOpenId,org.jhotdraw.app.AbstractView,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,setMultipleOpenId --> multipleOpenId,org.jhotdraw.app.AbstractView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,getMultipleOpenId --> multipleOpenId,org.jhotdraw.app.AbstractView,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,setShowing --> isShowing,org.jhotdraw.app.AbstractView,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,setShowing --> isShowing,org.jhotdraw.app.AbstractView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,isShowing --> isShowing,org.jhotdraw.app.AbstractView,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,setTitle --> title,org.jhotdraw.app.AbstractView,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,setTitle --> title,org.jhotdraw.app.AbstractView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,getTitle --> title,org.jhotdraw.app.AbstractView,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,addDisposable --> disposables,org.jhotdraw.app.AbstractView,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,addDisposable --> disposables,org.jhotdraw.app.AbstractView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,removeDisposable --> disposables,org.jhotdraw.app.AbstractView,READ);
Call(ATTRIBUTE,org.jhotdraw.app.AbstractView,removeDisposable --> disposables,org.jhotdraw.app.AbstractView,WRITE);
Call(METHOD,org.jhotdraw.app.AbstractView,<init> --> userNodeForPackage,org.jhotdraw.util.prefs.PreferencesUtil,);
Call(METHOD,org.jhotdraw.app.AbstractView,dispose --> dispose,org.jhotdraw.app.Disposable,);
EndClass 162
StartClass 163
Class(org.jhotdraw.undo.UndoRedoManager,N,N,Public);
Attribute(propertySupport,java.beans.PropertyChangeSupport,Protected,N,N,);
Attribute(DEBUG,boolean,Private,Y,Y,);
Attribute(labels,org.jhotdraw.util.ResourceBundleUtil,Private,Y,N,);
Attribute(hasSignificantEdits,boolean,Private,N,N,);
Attribute(undoOrRedoInProgress,boolean,Private,N,N,);
Attribute(DISCARD_ALL_EDITS,javax.swing.undo.UndoableEdit,Public,Y,Y,);
Attribute(undoAction,org.jhotdraw.undo.UndoRedoManager$UndoAction,Private,N,N,);
Attribute(redoAction,org.jhotdraw.undo.UndoRedoManager$RedoAction,Private,N,N,);
Method(getLabels,org.jhotdraw.util.ResourceBundleUtil,Public,Y,N);
Method(<init>,void,Public,N,N);
Method(setLocale,void,Public,N,N);
Method(discardAllEdits,void,Public,N,N);
Method(setHasSignificantEdits,void,Public,N,N);
Method(hasSignificantEdits,boolean,Public,N,N);
Method(addEdit,boolean,Public,N,N);
Method(getUndoAction,javax.swing.Action,Public,N,N);
Method(getRedoAction,javax.swing.Action,Public,N,N);
Method(updateActions,void,Private,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Method(undoOrRedo,void,Public,N,N);
Method(addPropertyChangeListener,void,Public,N,N);
Method(addPropertyChangeListener$2,void,Public,N,N);
Method(removePropertyChangeListener,void,Public,N,N);
Method(removePropertyChangeListener$2,void,Public,N,N);
Method(firePropertyChange,void,Protected,N,N);
Method(firePropertyChange$2,void,Protected,N,N);
Method(firePropertyChange$3,void,Protected,N,N);
Method(access$000,org.jhotdraw.util.ResourceBundleUtil,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(setLocale,java.util.Locale,);
Parameter(setHasSignificantEdits,boolean,);
Parameter(addEdit,javax.swing.undo.UndoableEdit,);
Parameter(addPropertyChangeListener,java.beans.PropertyChangeListener,);
Parameter(addPropertyChangeListener$2,java.lang.String,);
Parameter(addPropertyChangeListener$2,java.beans.PropertyChangeListener,);
Parameter(removePropertyChangeListener,java.beans.PropertyChangeListener,);
Parameter(removePropertyChangeListener$2,java.lang.String,);
Parameter(removePropertyChangeListener$2,java.beans.PropertyChangeListener,);
Parameter(firePropertyChange,java.lang.String,);
Parameter(firePropertyChange,boolean,);
Parameter(firePropertyChange,boolean,);
Parameter(firePropertyChange$2,java.lang.String,);
Parameter(firePropertyChange$2,int,);
Parameter(firePropertyChange$2,int,);
Parameter(firePropertyChange$3,java.lang.String,);
Parameter(firePropertyChange$3,java.lang.Object,);
Parameter(firePropertyChange$3,java.lang.Object,);
Composition(org.jhotdraw.util.ResourceBundleUtil);
Composition(org.jhotdraw.undo.UndoRedoManager$UndoAction);
Composition(org.jhotdraw.undo.UndoRedoManager$RedoAction);
Call(METHOD,org.jhotdraw.undo.UndoRedoManager,<init> --> getLabels,org.jhotdraw.undo.UndoRedoManager,);
Call(METHOD,org.jhotdraw.undo.UndoRedoManager,discardAllEdits --> updateActions,org.jhotdraw.undo.UndoRedoManager,);
Call(METHOD,org.jhotdraw.undo.UndoRedoManager,discardAllEdits --> setHasSignificantEdits,org.jhotdraw.undo.UndoRedoManager,);
Call(METHOD,org.jhotdraw.undo.UndoRedoManager,setHasSignificantEdits --> firePropertyChange,org.jhotdraw.undo.UndoRedoManager,);
Call(METHOD,org.jhotdraw.undo.UndoRedoManager,addEdit --> updateActions,org.jhotdraw.undo.UndoRedoManager,);
Call(METHOD,org.jhotdraw.undo.UndoRedoManager,addEdit --> setHasSignificantEdits,org.jhotdraw.undo.UndoRedoManager,);
Call(METHOD,org.jhotdraw.undo.UndoRedoManager,undo --> updateActions,org.jhotdraw.undo.UndoRedoManager,);
Call(METHOD,org.jhotdraw.undo.UndoRedoManager,redo --> updateActions,org.jhotdraw.undo.UndoRedoManager,);
Call(METHOD,org.jhotdraw.undo.UndoRedoManager,undoOrRedo --> updateActions,org.jhotdraw.undo.UndoRedoManager,);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,getLabels --> labels,org.jhotdraw.undo.UndoRedoManager,READ);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,getLabels --> labels,org.jhotdraw.undo.UndoRedoManager,WRITE);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,<init> --> propertySupport,org.jhotdraw.undo.UndoRedoManager,WRITE);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,<init> --> hasSignificantEdits,org.jhotdraw.undo.UndoRedoManager,WRITE);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,<init> --> undoAction,org.jhotdraw.undo.UndoRedoManager,WRITE);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,<init> --> redoAction,org.jhotdraw.undo.UndoRedoManager,WRITE);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,setLocale --> labels,org.jhotdraw.undo.UndoRedoManager,WRITE);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,setHasSignificantEdits --> hasSignificantEdits,org.jhotdraw.undo.UndoRedoManager,READ);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,setHasSignificantEdits --> hasSignificantEdits,org.jhotdraw.undo.UndoRedoManager,WRITE);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,hasSignificantEdits --> hasSignificantEdits,org.jhotdraw.undo.UndoRedoManager,READ);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,addEdit --> undoOrRedoInProgress,org.jhotdraw.undo.UndoRedoManager,READ);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,getUndoAction --> undoAction,org.jhotdraw.undo.UndoRedoManager,READ);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,getRedoAction --> redoAction,org.jhotdraw.undo.UndoRedoManager,READ);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,updateActions --> undoAction,org.jhotdraw.undo.UndoRedoManager,READ);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,updateActions --> labels,org.jhotdraw.undo.UndoRedoManager,READ);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,updateActions --> redoAction,org.jhotdraw.undo.UndoRedoManager,READ);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,undo --> undoOrRedoInProgress,org.jhotdraw.undo.UndoRedoManager,WRITE);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,redo --> undoOrRedoInProgress,org.jhotdraw.undo.UndoRedoManager,WRITE);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,undoOrRedo --> undoOrRedoInProgress,org.jhotdraw.undo.UndoRedoManager,WRITE);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,addPropertyChangeListener --> propertySupport,org.jhotdraw.undo.UndoRedoManager,READ);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,addPropertyChangeListener$2 --> propertySupport,org.jhotdraw.undo.UndoRedoManager,READ);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,removePropertyChangeListener --> propertySupport,org.jhotdraw.undo.UndoRedoManager,READ);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,removePropertyChangeListener$2 --> propertySupport,org.jhotdraw.undo.UndoRedoManager,READ);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,firePropertyChange --> propertySupport,org.jhotdraw.undo.UndoRedoManager,READ);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,firePropertyChange$2 --> propertySupport,org.jhotdraw.undo.UndoRedoManager,READ);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,firePropertyChange$3 --> propertySupport,org.jhotdraw.undo.UndoRedoManager,READ);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,access$000 --> labels,org.jhotdraw.undo.UndoRedoManager,READ);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager,<clinit> --> DISCARD_ALL_EDITS,org.jhotdraw.undo.UndoRedoManager,WRITE);
Call(METHOD,org.jhotdraw.undo.UndoRedoManager,getLabels --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.undo.UndoRedoManager,<init> --> <init>,org.jhotdraw.undo.UndoRedoManager$UndoAction,);
Call(METHOD,org.jhotdraw.undo.UndoRedoManager,<init> --> <init>,org.jhotdraw.undo.UndoRedoManager$RedoAction,);
Call(METHOD,org.jhotdraw.undo.UndoRedoManager,setLocale --> getBundle$2,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.undo.UndoRedoManager,updateActions --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.undo.UndoRedoManager,<clinit> --> <init>,org.jhotdraw.undo.UndoRedoManager$1,);
EndClass 163
StartClass 164
Class(org.jhotdraw.draw.DefaultDrawingView,N,N,Public);
Attribute(DEBUG,boolean,Private,Y,Y,);
Attribute(drawing,org.jhotdraw.draw.Drawing,Private,N,N,);
Attribute(selectedFigures,java.util.Set,Private,N,N,org.jhotdraw.draw.Figure);
Attribute(selectionHandles,java.util.LinkedList,Private,N,N,org.jhotdraw.draw.handle.Handle);
Attribute(isConstrainerVisible,boolean,Private,N,N,);
Attribute(visibleConstrainer,org.jhotdraw.draw.Constrainer,Private,N,N,);
Attribute(invisibleConstrainer,org.jhotdraw.draw.Constrainer,Private,N,N,);
Attribute(secondaryHandleOwner,org.jhotdraw.draw.handle.Handle,Private,N,N,);
Attribute(activeHandle,org.jhotdraw.draw.handle.Handle,Private,N,N,);
Attribute(secondaryHandles,java.util.LinkedList,Private,N,N,org.jhotdraw.draw.handle.Handle);
Attribute(handlesAreValid,boolean,Private,N,N,);
Attribute(cachedPreferredSize,java.awt.Dimension,Private,N,N,);
Attribute(scaleFactor,double,Private,N,N,);
Attribute(translation,java.awt.Point,Private,N,N,);
Attribute(detailLevel,int,Private,N,N,);
Attribute(editor,org.jhotdraw.draw.DrawingEditor,Private,N,N,);
Attribute(emptyDrawingLabel,javax.swing.JLabel,Private,N,N,);
Attribute(backgroundTile,java.awt.image.BufferedImage,Protected,N,N,);
Attribute(handleInvalidator,org.jhotdraw.draw.event.FigureListener,Private,N,N,);
Attribute(cachedDrawingArea,java.awt.geom.Rectangle2D$Double,Private,N,N,);
Attribute(DRAWING_DOUBLE_BUFFERED_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(isDrawingDoubleBuffered,boolean,Private,N,N,);
Attribute(drawingBufferV,java.awt.image.VolatileImage,Private,N,N,);
Attribute(drawingBufferNV,java.awt.image.BufferedImage,Private,N,N,);
Attribute(bufferedArea,java.awt.Rectangle,Private,N,N,);
Attribute(dirtyArea,java.awt.Rectangle,Private,N,N,);
Attribute(paintEnabled,boolean,Private,N,N,);
Attribute(isWindows,boolean,Private,Y,Y,);
Attribute(eventHandler,org.jhotdraw.draw.DefaultDrawingView$EventHandler,Private,N,N,);
Method(repaintHandles,void,Public,N,N);
Method(drawBackground,void,Protected,N,N);
Method(isSelectionEmpty,boolean,Public,N,N);
Method(<init>,void,Public,N,N);
Method(createEventHandler,org.jhotdraw.draw.DefaultDrawingView$EventHandler,Protected,N,N);
Method(initComponents,void,Private,N,N);
Method(getDrawing,org.jhotdraw.draw.Drawing,Public,N,N);
Method(getToolTipText,java.lang.String,Public,N,N);
Method(setEmptyDrawingMessage,void,Public,N,N);
Method(getEmptyDrawingMessage,java.lang.String,Public,N,N);
Method(paintComponent,void,Public,N,N);
Method(drawDrawingVolatileBuffered,void,Protected,N,N);
Method(drawDrawingNonvolatileBuffered,void,Protected,N,N);
Method(printComponent,void,Public,N,N);
Method(setViewRenderingHints,void,Protected,N,N);
Method(getCanvasViewBounds,java.awt.Rectangle,Protected,N,N);
Method(drawCanvas,void,Protected,N,N);
Method(drawConstrainer,void,Protected,N,N);
Method(drawDrawing,void,Protected,N,N);
Method(drawHandles,void,Protected,N,N);
Method(drawTool,void,Protected,N,N);
Method(setDrawing,void,Public,N,N);
Method(paint,void,Public,N,N);
Method(repaintDrawingArea,void,Protected,N,N);
Method(invalidate,void,Public,N,N);
Method(removeNotify,void,Public,N,N);
Method(addToSelection,void,Public,N,N);
Method(addToSelection$2,void,Public,N,N);
Method(removeFromSelection,void,Public,N,N);
Method(toggleSelection,void,Public,N,N);
Method(setEnabled,void,Public,N,N);
Method(selectAll,void,Public,N,N);
Method(clearSelection,void,Public,N,N);
Method(isFigureSelected,boolean,Public,N,N);
Method(getSelectedFigures,java.util.Set,Public,N,N);
Method(getSelectionCount,int,Public,N,N);
Method(getSelectionHandles,java.util.List,Private,N,N);
Method(getSecondaryHandles,java.util.List,Private,N,N);
Method(invalidateHandles,void,Private,N,N);
Method(validateHandles,void,Private,N,N);
Method(findHandle,org.jhotdraw.draw.handle.Handle,Public,N,N);
Method(getCompatibleHandles,java.util.Collection,Public,N,N);
Method(findFigure,org.jhotdraw.draw.Figure,Public,N,N);
Method(findFigures,java.util.Collection,Public,N,N);
Method(findFiguresWithin,java.util.Collection,Public,N,N);
Method(addFigureSelectionListener,void,Public,N,N);
Method(removeFigureSelectionListener,void,Public,N,N);
Method(fireSelectionChanged,void,Protected,N,N);
Method(invalidateDimension,void,Protected,N,N);
Method(getConstrainer,org.jhotdraw.draw.Constrainer,Public,N,N);
Method(getPreferredSize,java.awt.Dimension,Public,N,N);
Method(getDrawingArea,java.awt.geom.Rectangle2D$Double,Protected,N,N);
Method(setBounds,void,Public,N,N);
Method(validateViewTranslation,void,Private,N,N);
Method(drawingToView,java.awt.Point,Public,N,N);
Method(drawingToView$2,java.awt.Rectangle,Public,N,N);
Method(viewToDrawing,java.awt.geom.Point2D$Double,Public,N,N);
Method(viewToDrawing$2,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(getComponent,javax.swing.JComponent,Public,N,N);
Method(getScaleFactor,double,Public,N,N);
Method(setScaleFactor,void,Public,N,N);
Method(fireViewTransformChanged,void,Protected,N,N);
Method(setHandleDetailLevel,void,Public,N,N);
Method(getHandleDetailLevel,int,Public,N,N);
Method(getDrawingToViewTransform,java.awt.geom.AffineTransform,Public,N,N);
Method(delete,void,Public,N,N);
Method(duplicate,void,Public,N,N);
Method(removeNotify$2,void,Public,N,N);
Method(addNotify,void,Public,N,N);
Method(setVisibleConstrainer,void,Public,N,N);
Method(getVisibleConstrainer,org.jhotdraw.draw.Constrainer,Public,N,N);
Method(setInvisibleConstrainer,void,Public,N,N);
Method(getInvisibleConstrainer,org.jhotdraw.draw.Constrainer,Public,N,N);
Method(setConstrainerVisible,void,Public,N,N);
Method(isConstrainerVisible,boolean,Public,N,N);
Method(setDrawingDoubleBuffered,void,Public,N,N);
Method(isDrawingDoubleBuffered,boolean,Public,N,N);
Method(getBackgroundPaint,java.awt.Paint,Protected,N,N);
Method(getEditor,org.jhotdraw.draw.DrawingEditor,Public,N,N);
Method(setActiveHandle,void,Public,N,N);
Method(getActiveHandle,org.jhotdraw.draw.handle.Handle,Public,N,N);
Method(access$000,void,Public,Y,N);
Method(access$100,org.jhotdraw.draw.Drawing,Public,Y,N);
Method(access$202,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Method(access$300,java.util.LinkedList,Public,Y,N);
Method(access$200,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Method(access$400,org.jhotdraw.draw.DefaultDrawingView$EventHandler,Public,Y,N);
Method(access$500,org.jhotdraw.draw.DrawingEditor,Public,Y,N);
Method(access$600,java.util.LinkedList,Public,Y,N);
Method(access$700,void,Public,Y,N);
Method(access$902,boolean,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(drawBackground,java.awt.Graphics2D,);
Parameter(getToolTipText,java.awt.event.MouseEvent,);
Parameter(setEmptyDrawingMessage,java.lang.String,);
Parameter(paintComponent,java.awt.Graphics,);
Parameter(drawDrawingVolatileBuffered,java.awt.Graphics2D,);
Parameter(drawDrawingNonvolatileBuffered,java.awt.Graphics2D,);
Parameter(printComponent,java.awt.Graphics,);
Parameter(setViewRenderingHints,java.awt.Graphics2D,);
Parameter(drawCanvas,java.awt.Graphics2D,);
Parameter(drawConstrainer,java.awt.Graphics2D,);
Parameter(drawDrawing,java.awt.Graphics2D,);
Parameter(drawHandles,java.awt.Graphics2D,);
Parameter(drawTool,java.awt.Graphics2D,);
Parameter(setDrawing,org.jhotdraw.draw.Drawing,);
Parameter(paint,java.awt.Graphics,);
Parameter(repaintDrawingArea,java.awt.geom.Rectangle2D$Double,);
Parameter(addToSelection,org.jhotdraw.draw.Figure,);
Parameter(addToSelection$2,java.util.Collection,org.jhotdraw.draw.Figure);
Parameter(removeFromSelection,org.jhotdraw.draw.Figure,);
Parameter(toggleSelection,org.jhotdraw.draw.Figure,);
Parameter(setEnabled,boolean,);
Parameter(isFigureSelected,org.jhotdraw.draw.Figure,);
Parameter(findHandle,java.awt.Point,);
Parameter(getCompatibleHandles,org.jhotdraw.draw.handle.Handle,org.jhotdraw.draw.handle.Handle);
Parameter(findFigure,java.awt.Point,);
Parameter(findFigures,java.awt.Rectangle,org.jhotdraw.draw.Figure);
Parameter(findFiguresWithin,java.awt.Rectangle,org.jhotdraw.draw.Figure);
Parameter(addFigureSelectionListener,org.jhotdraw.draw.event.FigureSelectionListener,);
Parameter(removeFigureSelectionListener,org.jhotdraw.draw.event.FigureSelectionListener,);
Parameter(fireSelectionChanged,java.util.Set,org.jhotdraw.draw.Figure);
Parameter(fireSelectionChanged,java.util.Set,org.jhotdraw.draw.Figure);
Parameter(setBounds,int,);
Parameter(setBounds,int,);
Parameter(setBounds,int,);
Parameter(setBounds,int,);
Parameter(drawingToView,java.awt.geom.Point2D$Double,);
Parameter(drawingToView$2,java.awt.geom.Rectangle2D$Double,);
Parameter(viewToDrawing,java.awt.Point,);
Parameter(viewToDrawing$2,java.awt.Rectangle,);
Parameter(setScaleFactor,double,);
Parameter(setHandleDetailLevel,int,);
Parameter(removeNotify$2,org.jhotdraw.draw.DrawingEditor,);
Parameter(addNotify,org.jhotdraw.draw.DrawingEditor,);
Parameter(setVisibleConstrainer,org.jhotdraw.draw.Constrainer,);
Parameter(setInvisibleConstrainer,org.jhotdraw.draw.Constrainer,);
Parameter(setConstrainerVisible,boolean,);
Parameter(setDrawingDoubleBuffered,boolean,);
Parameter(getBackgroundPaint,int,);
Parameter(getBackgroundPaint,int,);
Parameter(setActiveHandle,org.jhotdraw.draw.handle.Handle,);
Parameter(access$000,org.jhotdraw.draw.DefaultDrawingView,);
Parameter(access$100,org.jhotdraw.draw.DefaultDrawingView,);
Parameter(access$202,org.jhotdraw.draw.DefaultDrawingView,);
Parameter(access$202,org.jhotdraw.draw.handle.Handle,);
Parameter(access$300,org.jhotdraw.draw.DefaultDrawingView,);
Parameter(access$200,org.jhotdraw.draw.DefaultDrawingView,);
Parameter(access$400,org.jhotdraw.draw.DefaultDrawingView,);
Parameter(access$500,org.jhotdraw.draw.DefaultDrawingView,);
Parameter(access$600,org.jhotdraw.draw.DefaultDrawingView,);
Parameter(access$700,org.jhotdraw.draw.DefaultDrawingView,);
Parameter(access$902,org.jhotdraw.draw.DefaultDrawingView,);
Parameter(access$902,boolean,);
Realization(org.jhotdraw.draw.DrawingView);
Realization(org.jhotdraw.gui.EditableComponent);
Composition(org.jhotdraw.draw.Drawing);
Composition(org.jhotdraw.draw.Constrainer);
Composition(org.jhotdraw.draw.handle.Handle);
Composition(org.jhotdraw.draw.DrawingEditor);
Composition(org.jhotdraw.draw.event.FigureListener);
Composition(org.jhotdraw.draw.DefaultDrawingView$EventHandler);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,repaintHandles --> validateHandles,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,repaintHandles --> getSelectionHandles,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,repaintHandles --> getSecondaryHandles,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,drawBackground --> drawingToView,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,drawBackground --> getBackgroundPaint,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,drawBackground --> drawingToView$2,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,<init> --> initComponents,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,<init> --> createEventHandler,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,getToolTipText --> getEditor,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,paintComponent --> setViewRenderingHints,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,paintComponent --> drawBackground,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,paintComponent --> drawCanvas,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,paintComponent --> drawConstrainer,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,paintComponent --> isDrawingDoubleBuffered,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,paintComponent --> drawDrawingNonvolatileBuffered,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,paintComponent --> drawDrawingVolatileBuffered,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,paintComponent --> drawDrawing,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,paintComponent --> drawHandles,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,paintComponent --> drawTool,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,drawDrawingVolatileBuffered --> drawDrawing,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,drawDrawingVolatileBuffered --> setViewRenderingHints,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,drawDrawingNonvolatileBuffered --> drawDrawing,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,drawDrawingNonvolatileBuffered --> setViewRenderingHints,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,printComponent --> drawDrawing,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,getCanvasViewBounds --> getDrawing,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,getCanvasViewBounds --> drawingToView,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,drawConstrainer --> getCanvasViewBounds,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,drawConstrainer --> getConstrainer,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,drawHandles --> validateHandles,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,drawHandles --> getSelectionHandles,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,drawHandles --> getSecondaryHandles,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,setDrawing --> clearSelection,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,setDrawing --> validateViewTranslation,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,repaintDrawingArea --> drawingToView$2,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,invalidate --> invalidateDimension,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,addToSelection --> getEditor,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,addToSelection --> fireSelectionChanged,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,addToSelection$2 --> getEditor,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,addToSelection$2 --> fireSelectionChanged,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,removeFromSelection --> invalidateHandles,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,removeFromSelection --> fireSelectionChanged,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,toggleSelection --> removeFromSelection,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,toggleSelection --> addToSelection,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,selectAll --> invalidateHandles,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,selectAll --> fireSelectionChanged,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,clearSelection --> getSelectionCount,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,clearSelection --> invalidateHandles,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,clearSelection --> fireSelectionChanged,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,getSelectionHandles --> validateHandles,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,getSecondaryHandles --> validateHandles,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,invalidateHandles --> setActiveHandle,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,validateHandles --> getEditor,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,validateHandles --> getSelectedFigures,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,findHandle --> validateHandles,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,findHandle --> getSecondaryHandles,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,findHandle --> getSelectionHandles,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,getCompatibleHandles --> validateHandles,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,getCompatibleHandles --> getSelectionHandles,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,findFigure --> getDrawing,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,findFigure --> viewToDrawing,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,findFigures --> getDrawing,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,findFigures --> viewToDrawing$2,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,findFiguresWithin --> getDrawing,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,findFiguresWithin --> viewToDrawing$2,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,getConstrainer --> isConstrainerVisible,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,getPreferredSize --> getDrawingArea,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,getPreferredSize --> getDrawing,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,setBounds --> validateViewTranslation,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,validateViewTranslation --> getDrawing,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,validateViewTranslation --> getDrawingArea,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,validateViewTranslation --> fireViewTransformChanged,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,setScaleFactor --> validateViewTranslation,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,setScaleFactor --> invalidateHandles,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,setHandleDetailLevel --> invalidateHandles,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,setHandleDetailLevel --> validateHandles,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,delete --> getSelectedFigures,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,delete --> clearSelection,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,delete --> getDrawing,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,duplicate --> getDrawing,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,duplicate --> getSelectedFigures,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,duplicate --> clearSelection,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,duplicate --> addToSelection$2,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,addNotify --> invalidateHandles,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,access$000 --> invalidateHandles,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,access$700 --> validateViewTranslation,org.jhotdraw.draw.DefaultDrawingView,);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawBackground --> drawing,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,isSelectionEmpty --> selectedFigures,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,<init> --> eventHandler,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,<init> --> selectedFigures,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,<init> --> selectionHandles,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,<init> --> isConstrainerVisible,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,<init> --> visibleConstrainer,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,<init> --> invisibleConstrainer,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,<init> --> secondaryHandles,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,<init> --> handlesAreValid,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,<init> --> scaleFactor,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,<init> --> translation,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,<init> --> handleInvalidator,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,<init> --> isDrawingDoubleBuffered,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,<init> --> bufferedArea,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,<init> --> dirtyArea,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,<init> --> paintEnabled,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,<init> --> eventHandler,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getDrawing --> drawing,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setEmptyDrawingMessage --> emptyDrawingLabel,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setEmptyDrawingMessage --> emptyDrawingLabel,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getEmptyDrawingMessage --> emptyDrawingLabel,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,paintComponent --> isWindows,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawDrawingVolatileBuffered --> bufferedArea,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawDrawingVolatileBuffered --> dirtyArea,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawDrawingVolatileBuffered --> drawingBufferV,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawDrawingVolatileBuffered --> drawingBufferV,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawDrawingNonvolatileBuffered --> bufferedArea,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawDrawingNonvolatileBuffered --> dirtyArea,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawDrawingNonvolatileBuffered --> drawingBufferNV,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawDrawingNonvolatileBuffered --> drawingBufferNV,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getCanvasViewBounds --> translation,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawCanvas --> drawing,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawCanvas --> translation,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawCanvas --> scaleFactor,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawDrawing --> drawing,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawDrawing --> emptyDrawingLabel,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawDrawing --> translation,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawDrawing --> scaleFactor,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawHandles --> editor,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawTool --> editor,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setDrawing --> drawing,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setDrawing --> eventHandler,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setDrawing --> dirtyArea,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setDrawing --> bufferedArea,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setDrawing --> drawing,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setDrawing --> paintEnabled,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,paint --> paintEnabled,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,repaintDrawingArea --> dirtyArea,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,removeNotify --> drawingBufferNV,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,removeNotify --> drawingBufferV,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,removeNotify --> drawingBufferNV,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,removeNotify --> drawingBufferV,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,addToSelection --> selectedFigures,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,addToSelection --> handleInvalidator,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,addToSelection --> handlesAreValid,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,addToSelection --> detailLevel,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,addToSelection --> selectionHandles,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,addToSelection --> eventHandler,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,addToSelection$2 --> selectedFigures,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,addToSelection$2 --> handleInvalidator,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,addToSelection$2 --> handlesAreValid,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,addToSelection$2 --> detailLevel,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,addToSelection$2 --> selectionHandles,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,addToSelection$2 --> eventHandler,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,removeFromSelection --> selectedFigures,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,removeFromSelection --> handleInvalidator,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,toggleSelection --> selectedFigures,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,selectAll --> selectedFigures,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,selectAll --> drawing,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,clearSelection --> selectedFigures,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,isFigureSelected --> selectedFigures,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getSelectedFigures --> selectedFigures,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getSelectionCount --> selectedFigures,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getSelectionHandles --> selectionHandles,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getSecondaryHandles --> secondaryHandles,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,invalidateHandles --> handlesAreValid,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,invalidateHandles --> selectionHandles,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,invalidateHandles --> eventHandler,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,invalidateHandles --> secondaryHandles,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,invalidateHandles --> handlesAreValid,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,validateHandles --> handlesAreValid,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,validateHandles --> selectionHandles,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,validateHandles --> detailLevel,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,validateHandles --> eventHandler,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,validateHandles --> handlesAreValid,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,validateHandles --> detailLevel,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,invalidateDimension --> cachedPreferredSize,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,invalidateDimension --> cachedDrawingArea,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getConstrainer --> visibleConstrainer,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getConstrainer --> invisibleConstrainer,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getPreferredSize --> cachedPreferredSize,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getPreferredSize --> scaleFactor,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getPreferredSize --> cachedPreferredSize,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getDrawingArea --> cachedDrawingArea,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getDrawingArea --> drawing,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getDrawingArea --> cachedDrawingArea,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,validateViewTranslation --> translation,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,validateViewTranslation --> scaleFactor,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,validateViewTranslation --> bufferedArea,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawingToView --> scaleFactor,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawingToView --> translation,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawingToView$2 --> scaleFactor,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawingToView$2 --> translation,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,viewToDrawing --> translation,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,viewToDrawing --> scaleFactor,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,viewToDrawing$2 --> translation,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,viewToDrawing$2 --> scaleFactor,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getScaleFactor --> scaleFactor,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setScaleFactor --> scaleFactor,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setScaleFactor --> dirtyArea,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setScaleFactor --> bufferedArea,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setScaleFactor --> scaleFactor,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,fireViewTransformChanged --> selectionHandles,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,fireViewTransformChanged --> secondaryHandles,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setHandleDetailLevel --> detailLevel,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setHandleDetailLevel --> detailLevel,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getHandleDetailLevel --> detailLevel,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getDrawingToViewTransform --> translation,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getDrawingToViewTransform --> scaleFactor,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,delete --> drawing,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,duplicate --> drawing,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,removeNotify$2 --> editor,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,addNotify --> editor,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setVisibleConstrainer --> visibleConstrainer,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setVisibleConstrainer --> visibleConstrainer,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getVisibleConstrainer --> visibleConstrainer,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setInvisibleConstrainer --> invisibleConstrainer,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setInvisibleConstrainer --> invisibleConstrainer,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getInvisibleConstrainer --> invisibleConstrainer,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setConstrainerVisible --> isConstrainerVisible,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setConstrainerVisible --> isConstrainerVisible,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,isConstrainerVisible --> isConstrainerVisible,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setDrawingDoubleBuffered --> isDrawingDoubleBuffered,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setDrawingDoubleBuffered --> drawingBufferV,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setDrawingDoubleBuffered --> drawingBufferNV,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setDrawingDoubleBuffered --> isDrawingDoubleBuffered,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setDrawingDoubleBuffered --> drawingBufferV,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setDrawingDoubleBuffered --> drawingBufferNV,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,isDrawingDoubleBuffered --> isDrawingDoubleBuffered,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getBackgroundPaint --> backgroundTile,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getBackgroundPaint --> backgroundTile,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getEditor --> editor,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setActiveHandle --> activeHandle,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,setActiveHandle --> activeHandle,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getActiveHandle --> activeHandle,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,access$100 --> drawing,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,access$202 --> secondaryHandleOwner,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,access$300 --> secondaryHandles,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,access$200 --> secondaryHandleOwner,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,access$400 --> eventHandler,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,access$500 --> editor,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,access$600 --> selectionHandles,org.jhotdraw.draw.DefaultDrawingView,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,access$902 --> paintEnabled,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,<clinit> --> isWindows,org.jhotdraw.draw.DefaultDrawingView,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawBackground --> CANVAS_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawBackground --> CANVAS_HEIGHT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawBackground --> CANVAS_FILL_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,drawBackground --> CANVAS_FILL_OPACITY,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getCanvasViewBounds --> CANVAS_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getCanvasViewBounds --> CANVAS_HEIGHT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getPreferredSize --> CANVAS_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,getPreferredSize --> CANVAS_HEIGHT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,validateViewTranslation --> CANVAS_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView,validateViewTranslation --> CANVAS_HEIGHT,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,repaintHandles --> getDrawingArea,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,drawBackground --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,<init> --> <init>$2,org.jhotdraw.draw.GridConstrainer,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,<init> --> <init>,org.jhotdraw.draw.GridConstrainer,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,<init> --> <init>,org.jhotdraw.draw.DefaultDrawingView$1,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,<init> --> <init>,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,createEventHandler --> <init>$2,org.jhotdraw.draw.DefaultDrawingView$EventHandler,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,getToolTipText --> getTool,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,getToolTipText --> getToolTipText,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,getCanvasViewBounds --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,drawCanvas --> setFontRenderContext,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,drawCanvas --> drawCanvas,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,drawConstrainer --> draw,org.jhotdraw.draw.Constrainer,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,drawDrawing --> getChildCount,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,drawDrawing --> setFontRenderContext,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,drawDrawing --> draw,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,drawHandles --> getActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,drawHandles --> draw,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,drawTool --> getActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,drawTool --> getTool,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,drawTool --> draw,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,setDrawing --> removeCompositeFigureListener,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,setDrawing --> removeFigureListener,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,setDrawing --> addCompositeFigureListener,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,setDrawing --> addFigureListener,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,setDrawing --> <init>,org.jhotdraw.draw.DefaultDrawingView$2,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,addToSelection --> addFigureListener,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,addToSelection --> createHandles,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,addToSelection --> setView,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,addToSelection --> addHandleListener,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,addToSelection --> getDrawingArea,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,addToSelection$2 --> addFigureListener,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,addToSelection$2 --> createHandles,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,addToSelection$2 --> setView,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,addToSelection$2 --> addHandleListener,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,addToSelection$2 --> getDrawingArea,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,removeFromSelection --> removeFigureListener,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,selectAll --> getChildren,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,selectAll --> isSelectable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,invalidateHandles --> removeHandleListener,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,invalidateHandles --> getDrawingArea,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,invalidateHandles --> dispose,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,validateHandles --> createHandles,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,validateHandles --> setView,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,validateHandles --> addHandleListener,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,validateHandles --> getDrawingArea,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,findHandle --> <init>,org.jhotdraw.util.ReversedList,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,findHandle --> contains,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,getCompatibleHandles --> getOwner,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,getCompatibleHandles --> isCombinableWith,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,findFigure --> findFigure,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,findFigures --> findFigures,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,findFiguresWithin --> findFiguresWithin,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,fireSelectionChanged --> <init>,org.jhotdraw.draw.event.FigureSelectionEvent,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,fireSelectionChanged --> selectionChanged,org.jhotdraw.draw.event.FigureSelectionListener,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,getPreferredSize --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,getDrawingArea --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,validateViewTranslation --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,fireViewTransformChanged --> viewTransformChanged,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,delete --> sort,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,delete --> isRemovable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,delete --> indexOf,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,delete --> removeAll,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,delete --> <init>,org.jhotdraw.draw.DefaultDrawingView$3,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,delete --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,duplicate --> sort,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,duplicate --> clone,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,duplicate --> transform,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,duplicate --> add,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,duplicate --> remap,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,duplicate --> <init>,org.jhotdraw.draw.DefaultDrawingView$4,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,duplicate --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView,setActiveHandle --> getDrawingArea,org.jhotdraw.draw.handle.Handle,);
EndClass 164
StartClass 165
Class(org.jhotdraw.xml.DOMFactory,Y,Y,Public);
Method(getName,java.lang.String,Public,N,Y);
Method(create,java.lang.Object,Public,N,Y);
Method(write,void,Public,N,Y);
Method(read,java.lang.Object,Public,N,Y);
Parameter(getName,java.lang.Object,);
Parameter(create,java.lang.String,);
Parameter(write,org.jhotdraw.xml.DOMOutput,);
Parameter(write,java.lang.Object,);
Parameter(read,org.jhotdraw.xml.DOMInput,);
EndClass 165
StartClass 166
Class(org.jhotdraw.draw.io.InputFormat,Y,Y,Public);
Method(getFileFilter,javax.swing.filechooser.FileFilter,Public,N,Y);
Method(getInputFormatAccessory,javax.swing.JComponent,Public,N,Y);
Method(read,void,Public,N,Y);
Method(read$2,void,Public,N,Y);
Method(read$3,void,Public,N,Y);
Method(isDataFlavorSupported,boolean,Public,N,Y);
Method(read$4,void,Public,N,Y);
Parameter(read,java.net.URI,);
Parameter(read,org.jhotdraw.draw.Drawing,);
Parameter(read$2,java.net.URI,);
Parameter(read$2,org.jhotdraw.draw.Drawing,);
Parameter(read$2,boolean,);
Parameter(read$3,java.io.InputStream,);
Parameter(read$3,org.jhotdraw.draw.Drawing,);
Parameter(read$3,boolean,);
Parameter(isDataFlavorSupported,java.awt.datatransfer.DataFlavor,);
Parameter(read$4,java.awt.datatransfer.Transferable,);
Parameter(read$4,org.jhotdraw.draw.Drawing,);
Parameter(read$4,boolean,);
EndClass 166
StartClass 167
Class(org.jhotdraw.draw.io.TextInputFormat,N,N,Public);
Attribute(prototype,org.jhotdraw.draw.TextHolderFigure,Private,N,N,);
Attribute(description,java.lang.String,Private,N,N,);
Attribute(fileExtension,java.lang.String,Private,N,N,);
Attribute(formatName,java.lang.String,Private,N,N,);
Attribute(isMultiline,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getFileFilter,javax.swing.filechooser.FileFilter,Public,N,N);
Method(getFileExtension,java.lang.String,Public,N,N);
Method(getInputFormatAccessory,javax.swing.JComponent,Public,N,N);
Method(read,void,Public,N,N);
Method(read$2,void,Public,N,N);
Method(read$3,void,Public,N,N);
Method(read$4,void,Public,N,N);
Method(read$5,void,Public,N,N);
Method(createTextHolderFigures,java.util.LinkedList,Public,N,N);
Method(isDataFlavorSupported,boolean,Public,N,N);
Method(read$6,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.TextHolderFigure,);
Parameter(<init>$2,org.jhotdraw.draw.TextHolderFigure,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,boolean,);
Parameter(read,java.net.URI,);
Parameter(read,org.jhotdraw.draw.Drawing,);
Parameter(read$2,java.net.URI,);
Parameter(read$2,org.jhotdraw.draw.Drawing,);
Parameter(read$2,boolean,);
Parameter(read$3,java.io.File,);
Parameter(read$3,org.jhotdraw.draw.Drawing,);
Parameter(read$4,java.io.File,);
Parameter(read$4,org.jhotdraw.draw.Drawing,);
Parameter(read$4,boolean,);
Parameter(read$5,java.io.InputStream,);
Parameter(read$5,org.jhotdraw.draw.Drawing,);
Parameter(read$5,boolean,);
Parameter(createTextHolderFigures,java.io.InputStream,org.jhotdraw.draw.Figure);
Parameter(isDataFlavorSupported,java.awt.datatransfer.DataFlavor,);
Parameter(read$6,java.awt.datatransfer.Transferable,);
Parameter(read$6,org.jhotdraw.draw.Drawing,);
Parameter(read$6,boolean,);
Realization(org.jhotdraw.draw.io.InputFormat);
Composition(org.jhotdraw.draw.TextHolderFigure);
Call(METHOD,org.jhotdraw.draw.io.TextInputFormat,<init> --> <init>$2,org.jhotdraw.draw.io.TextInputFormat,);
Call(METHOD,org.jhotdraw.draw.io.TextInputFormat,read --> read$3,org.jhotdraw.draw.io.TextInputFormat,);
Call(METHOD,org.jhotdraw.draw.io.TextInputFormat,read$2 --> read$4,org.jhotdraw.draw.io.TextInputFormat,);
Call(METHOD,org.jhotdraw.draw.io.TextInputFormat,read$3 --> read$4,org.jhotdraw.draw.io.TextInputFormat,);
Call(METHOD,org.jhotdraw.draw.io.TextInputFormat,read$4 --> read$5,org.jhotdraw.draw.io.TextInputFormat,);
Call(METHOD,org.jhotdraw.draw.io.TextInputFormat,read$5 --> createTextHolderFigures,org.jhotdraw.draw.io.TextInputFormat,);
Call(ATTRIBUTE,org.jhotdraw.draw.io.TextInputFormat,<init>$2 --> prototype,org.jhotdraw.draw.io.TextInputFormat,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.io.TextInputFormat,<init>$2 --> formatName,org.jhotdraw.draw.io.TextInputFormat,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.io.TextInputFormat,<init>$2 --> description,org.jhotdraw.draw.io.TextInputFormat,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.io.TextInputFormat,<init>$2 --> fileExtension,org.jhotdraw.draw.io.TextInputFormat,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.io.TextInputFormat,<init>$2 --> isMultiline,org.jhotdraw.draw.io.TextInputFormat,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.io.TextInputFormat,getFileFilter --> description,org.jhotdraw.draw.io.TextInputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.TextInputFormat,getFileFilter --> fileExtension,org.jhotdraw.draw.io.TextInputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.TextInputFormat,getFileExtension --> fileExtension,org.jhotdraw.draw.io.TextInputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.TextInputFormat,createTextHolderFigures --> isMultiline,org.jhotdraw.draw.io.TextInputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.TextInputFormat,createTextHolderFigures --> prototype,org.jhotdraw.draw.io.TextInputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.TextInputFormat,read$6 --> isMultiline,org.jhotdraw.draw.io.TextInputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.TextInputFormat,read$6 --> prototype,org.jhotdraw.draw.io.TextInputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.TextInputFormat,createTextHolderFigures --> width,org.jhotdraw.geom.Dimension2DDouble,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.TextInputFormat,createTextHolderFigures --> height,org.jhotdraw.geom.Dimension2DDouble,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.TextInputFormat,read$6 --> width,org.jhotdraw.geom.Dimension2DDouble,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.TextInputFormat,read$6 --> height,org.jhotdraw.geom.Dimension2DDouble,READ);
Call(METHOD,org.jhotdraw.draw.io.TextInputFormat,getFileFilter --> <init>,org.jhotdraw.gui.filechooser.ExtensionFileFilter,);
Call(METHOD,org.jhotdraw.draw.io.TextInputFormat,read$5 --> removeAllChildren,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.io.TextInputFormat,read$5 --> basicAddAll,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.io.TextInputFormat,createTextHolderFigures --> clone,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.io.TextInputFormat,createTextHolderFigures --> setText,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.io.TextInputFormat,createTextHolderFigures --> getPreferredSize,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.io.TextInputFormat,createTextHolderFigures --> setBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.io.TextInputFormat,read$6 --> clone,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.io.TextInputFormat,read$6 --> setText,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.io.TextInputFormat,read$6 --> getPreferredSize,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.io.TextInputFormat,read$6 --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.io.TextInputFormat,read$6 --> setBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.io.TextInputFormat,read$6 --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.io.TextInputFormat,read$6 --> removeAllChildren,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.io.TextInputFormat,read$6 --> addAll,org.jhotdraw.draw.Drawing,);
EndClass 167
StartClass 168
Class(org.jhotdraw.samples.draw.DrawView$1,N,N,NA);
Attribute(this$0,org.jhotdraw.samples.draw.DrawView,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(propertyChange,void,Public,N,N);
Parameter(<init>,org.jhotdraw.samples.draw.DrawView,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Composition(org.jhotdraw.samples.draw.DrawView);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView$1,<init> --> this$0,org.jhotdraw.samples.draw.DrawView$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView$1,propertyChange --> this$0,org.jhotdraw.samples.draw.DrawView$1,READ);
Call(METHOD,org.jhotdraw.samples.draw.DrawView$1,propertyChange --> access$000,org.jhotdraw.samples.draw.DrawView,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView$1,propertyChange --> hasSignificantEdits,org.jhotdraw.undo.UndoRedoManager,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView$1,propertyChange --> setHasUnsavedChanges,org.jhotdraw.samples.draw.DrawView,);
EndClass 168
StartClass 169
Class(org.jhotdraw.samples.draw.DrawView$2,N,N,NA);
Attribute(val$drawing,org.jhotdraw.draw.Drawing,Public,N,Y,);
Attribute(this$0,org.jhotdraw.samples.draw.DrawView,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(run,void,Public,N,N);
Parameter(<init>,org.jhotdraw.samples.draw.DrawView,);
Parameter(<init>,org.jhotdraw.draw.Drawing,);
Composition(org.jhotdraw.draw.Drawing);
Composition(org.jhotdraw.samples.draw.DrawView);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView$2,<init> --> this$0,org.jhotdraw.samples.draw.DrawView$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView$2,<init> --> val$drawing,org.jhotdraw.samples.draw.DrawView$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView$2,run --> this$0,org.jhotdraw.samples.draw.DrawView$2,READ);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView$2,run --> val$drawing,org.jhotdraw.samples.draw.DrawView$2,READ);
Call(METHOD,org.jhotdraw.samples.draw.DrawView$2,run --> access$100,org.jhotdraw.samples.draw.DrawView,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView$2,run --> getDrawing,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView$2,run --> access$000,org.jhotdraw.samples.draw.DrawView,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView$2,run --> removeUndoableEditListener,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView$2,run --> setDrawing,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView$2,run --> addUndoableEditListener,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView$2,run --> discardAllEdits,org.jhotdraw.undo.UndoRedoManager,);
EndClass 169
StartClass 170
Class(org.jhotdraw.draw.io.ImageInputFormat,N,N,Public);
Attribute(prototype,org.jhotdraw.draw.ImageHolderFigure,Private,N,N,);
Attribute(description,java.lang.String,Private,N,N,);
Attribute(fileExtensions,java.lang.String[],Private,N,N,);
Attribute(formatName,java.lang.String,Private,N,N,);
Attribute(mimeTypes,java.lang.String[],Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(getFileFilter,javax.swing.filechooser.FileFilter,Public,N,N);
Method(getFileExtensions,java.lang.String[],Public,N,N);
Method(getInputFormatAccessory,javax.swing.JComponent,Public,N,N);
Method(read,void,Public,N,N);
Method(read$2,void,Public,N,N);
Method(read$3,void,Public,N,N);
Method(read$4,void,Public,N,N);
Method(read$5,void,Public,N,N);
Method(createImageHolder,org.jhotdraw.draw.ImageHolderFigure,Public,N,N);
Method(isDataFlavorSupported,boolean,Public,N,N);
Method(read$6,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.ImageHolderFigure,);
Parameter(<init>$2,org.jhotdraw.draw.ImageHolderFigure,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$3,org.jhotdraw.draw.ImageHolderFigure,);
Parameter(<init>$3,java.lang.String,);
Parameter(<init>$3,java.lang.String,);
Parameter(<init>$3,java.lang.String[],);
Parameter(<init>$3,java.lang.String[],);
Parameter(read,java.net.URI,);
Parameter(read,org.jhotdraw.draw.Drawing,);
Parameter(read$2,java.net.URI,);
Parameter(read$2,org.jhotdraw.draw.Drawing,);
Parameter(read$2,boolean,);
Parameter(read$3,java.io.File,);
Parameter(read$3,org.jhotdraw.draw.Drawing,);
Parameter(read$3,boolean,);
Parameter(read$4,java.io.File,);
Parameter(read$4,org.jhotdraw.draw.Drawing,);
Parameter(read$5,java.io.InputStream,);
Parameter(read$5,org.jhotdraw.draw.Drawing,);
Parameter(read$5,boolean,);
Parameter(createImageHolder,java.io.InputStream,);
Parameter(isDataFlavorSupported,java.awt.datatransfer.DataFlavor,);
Parameter(read$6,java.awt.datatransfer.Transferable,);
Parameter(read$6,org.jhotdraw.draw.Drawing,);
Parameter(read$6,boolean,);
Realization(org.jhotdraw.draw.io.InputFormat);
Composition(org.jhotdraw.draw.ImageHolderFigure);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,<init> --> <init>$3,org.jhotdraw.draw.io.ImageInputFormat,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,<init>$2 --> <init>$3,org.jhotdraw.draw.io.ImageInputFormat,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read --> read$4,org.jhotdraw.draw.io.ImageInputFormat,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read$2 --> read$3,org.jhotdraw.draw.io.ImageInputFormat,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read$4 --> read$3,org.jhotdraw.draw.io.ImageInputFormat,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read$5 --> createImageHolder,org.jhotdraw.draw.io.ImageInputFormat,);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageInputFormat,<init>$3 --> prototype,org.jhotdraw.draw.io.ImageInputFormat,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageInputFormat,<init>$3 --> formatName,org.jhotdraw.draw.io.ImageInputFormat,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageInputFormat,<init>$3 --> description,org.jhotdraw.draw.io.ImageInputFormat,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageInputFormat,<init>$3 --> fileExtensions,org.jhotdraw.draw.io.ImageInputFormat,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageInputFormat,<init>$3 --> mimeTypes,org.jhotdraw.draw.io.ImageInputFormat,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageInputFormat,getFileFilter --> description,org.jhotdraw.draw.io.ImageInputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageInputFormat,getFileFilter --> fileExtensions,org.jhotdraw.draw.io.ImageInputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageInputFormat,getFileExtensions --> fileExtensions,org.jhotdraw.draw.io.ImageInputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageInputFormat,read$3 --> prototype,org.jhotdraw.draw.io.ImageInputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageInputFormat,createImageHolder --> prototype,org.jhotdraw.draw.io.ImageInputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageInputFormat,isDataFlavorSupported --> mimeTypes,org.jhotdraw.draw.io.ImageInputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageInputFormat,read$6 --> mimeTypes,org.jhotdraw.draw.io.ImageInputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageInputFormat,read$6 --> prototype,org.jhotdraw.draw.io.ImageInputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageInputFormat,read$3 --> CANVAS_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageInputFormat,read$3 --> CANVAS_HEIGHT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageInputFormat,read$5 --> CANVAS_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageInputFormat,read$5 --> CANVAS_HEIGHT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageInputFormat,read$6 --> CANVAS_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageInputFormat,read$6 --> CANVAS_HEIGHT,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,getFileFilter --> <init>$2,org.jhotdraw.gui.filechooser.ExtensionFileFilter,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read$3 --> clone,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read$3 --> loadImage,org.jhotdraw.draw.ImageHolderFigure,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read$3 --> getBufferedImage,org.jhotdraw.draw.ImageHolderFigure,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read$3 --> setBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read$3 --> removeAllChildren,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read$3 --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read$3 --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read$3 --> basicAdd,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read$5 --> removeAllChildren,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read$5 --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read$5 --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read$5 --> basicAdd,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,createImageHolder --> clone,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,createImageHolder --> loadImage$2,org.jhotdraw.draw.ImageHolderFigure,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,createImageHolder --> getBufferedImage,org.jhotdraw.draw.ImageHolderFigure,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,createImageHolder --> setBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read$6 --> clone,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read$6 --> toBufferedImage$2,org.jhotdraw.util.Images,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read$6 --> setBufferedImage,org.jhotdraw.draw.ImageHolderFigure,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read$6 --> getBufferedImage,org.jhotdraw.draw.ImageHolderFigure,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read$6 --> setBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read$6 --> removeAllChildren,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read$6 --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read$6 --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.io.ImageInputFormat,read$6 --> addAll,org.jhotdraw.draw.Drawing,);
EndClass 170
StartClass 171
Class(org.jhotdraw.gui.PlacardScrollPaneLayout,N,N,Public);
Method(<init>,void,Public,N,N);
Method(layoutContainer,void,Public,N,N);
Parameter(layoutContainer,java.awt.Container,);
SubClass(org.jhotdraw.gui.PlacardScrollPaneLayout$UIResource);
EndClass 171
StartClass 172
Class(org.jhotdraw.draw.io.ImageOutputFormat,N,N,Public);
Attribute(description,java.lang.String,Private,N,N,);
Attribute(fileExtension,java.lang.String,Private,N,N,);
Attribute(formatName,java.lang.String,Private,N,N,);
Attribute(imageType,int,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getFileFilter,javax.swing.filechooser.FileFilter,Public,N,N);
Method(getFileExtension,java.lang.String,Public,N,N);
Method(getOutputFormatAccessory,javax.swing.JComponent,Public,N,N);
Method(write,void,Public,N,N);
Method(write$2,void,Public,N,N);
Method(write$3,void,Public,N,N);
Method(write$4,void,Public,N,N);
Method(createTransferable,java.awt.datatransfer.Transferable,Public,N,N);
Method(write$5,void,Public,N,N);
Method(write$6,void,Public,N,N);
Method(toImage,java.awt.image.BufferedImage,Public,N,N);
Method(toImage$2,java.awt.image.BufferedImage,Public,N,N);
Method(setRenderingHints,void,Protected,N,N);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,int,);
Parameter(write,java.net.URI,);
Parameter(write,org.jhotdraw.draw.Drawing,);
Parameter(write$2,java.io.File,);
Parameter(write$2,org.jhotdraw.draw.Drawing,);
Parameter(write$3,java.io.OutputStream,);
Parameter(write$3,org.jhotdraw.draw.Drawing,);
Parameter(write$4,java.io.OutputStream,);
Parameter(write$4,org.jhotdraw.draw.Drawing,);
Parameter(write$4,java.awt.geom.AffineTransform,);
Parameter(write$4,java.awt.Dimension,);
Parameter(createTransferable,org.jhotdraw.draw.Drawing,org.jhotdraw.draw.Figure);
Parameter(createTransferable,java.util.List,);
Parameter(createTransferable,double,);
Parameter(write$5,java.io.OutputStream,org.jhotdraw.draw.Figure);
Parameter(write$5,org.jhotdraw.draw.Drawing,);
Parameter(write$5,java.util.List,);
Parameter(write$6,java.io.OutputStream,org.jhotdraw.draw.Figure);
Parameter(write$6,org.jhotdraw.draw.Drawing,);
Parameter(write$6,java.util.List,);
Parameter(write$6,java.awt.geom.AffineTransform,);
Parameter(write$6,java.awt.Dimension,);
Parameter(toImage,org.jhotdraw.draw.Drawing,org.jhotdraw.draw.Figure);
Parameter(toImage,java.util.List,);
Parameter(toImage,double,);
Parameter(toImage,boolean,);
Parameter(toImage$2,org.jhotdraw.draw.Drawing,org.jhotdraw.draw.Figure);
Parameter(toImage$2,java.util.List,);
Parameter(toImage$2,java.awt.geom.AffineTransform,);
Parameter(toImage$2,java.awt.Dimension,);
Parameter(setRenderingHints,java.awt.Graphics2D,);
Realization(org.jhotdraw.draw.io.OutputFormat);
Call(METHOD,org.jhotdraw.draw.io.ImageOutputFormat,<init> --> <init>$2,org.jhotdraw.draw.io.ImageOutputFormat,);
Call(METHOD,org.jhotdraw.draw.io.ImageOutputFormat,write --> write$2,org.jhotdraw.draw.io.ImageOutputFormat,);
Call(METHOD,org.jhotdraw.draw.io.ImageOutputFormat,write$2 --> write$3,org.jhotdraw.draw.io.ImageOutputFormat,);
Call(METHOD,org.jhotdraw.draw.io.ImageOutputFormat,write$3 --> write$6,org.jhotdraw.draw.io.ImageOutputFormat,);
Call(METHOD,org.jhotdraw.draw.io.ImageOutputFormat,write$4 --> write$6,org.jhotdraw.draw.io.ImageOutputFormat,);
Call(METHOD,org.jhotdraw.draw.io.ImageOutputFormat,createTransferable --> toImage,org.jhotdraw.draw.io.ImageOutputFormat,);
Call(METHOD,org.jhotdraw.draw.io.ImageOutputFormat,write$5 --> write$6,org.jhotdraw.draw.io.ImageOutputFormat,);
Call(METHOD,org.jhotdraw.draw.io.ImageOutputFormat,write$6 --> toImage,org.jhotdraw.draw.io.ImageOutputFormat,);
Call(METHOD,org.jhotdraw.draw.io.ImageOutputFormat,write$6 --> toImage$2,org.jhotdraw.draw.io.ImageOutputFormat,);
Call(METHOD,org.jhotdraw.draw.io.ImageOutputFormat,toImage --> toImage$2,org.jhotdraw.draw.io.ImageOutputFormat,);
Call(METHOD,org.jhotdraw.draw.io.ImageOutputFormat,toImage$2 --> setRenderingHints,org.jhotdraw.draw.io.ImageOutputFormat,);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageOutputFormat,<init>$2 --> formatName,org.jhotdraw.draw.io.ImageOutputFormat,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageOutputFormat,<init>$2 --> description,org.jhotdraw.draw.io.ImageOutputFormat,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageOutputFormat,<init>$2 --> fileExtension,org.jhotdraw.draw.io.ImageOutputFormat,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageOutputFormat,<init>$2 --> imageType,org.jhotdraw.draw.io.ImageOutputFormat,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageOutputFormat,getFileFilter --> description,org.jhotdraw.draw.io.ImageOutputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageOutputFormat,getFileFilter --> fileExtension,org.jhotdraw.draw.io.ImageOutputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageOutputFormat,getFileExtension --> fileExtension,org.jhotdraw.draw.io.ImageOutputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageOutputFormat,write$6 --> formatName,org.jhotdraw.draw.io.ImageOutputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageOutputFormat,toImage$2 --> imageType,org.jhotdraw.draw.io.ImageOutputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageOutputFormat,toImage$2 --> CANVAS_FILL_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.ImageOutputFormat,toImage$2 --> CANVAS_FILL_OPACITY,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.io.ImageOutputFormat,getFileFilter --> <init>,org.jhotdraw.gui.filechooser.ExtensionFileFilter,);
Call(METHOD,org.jhotdraw.draw.io.ImageOutputFormat,write$3 --> getChildren,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.io.ImageOutputFormat,write$4 --> getChildren,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.io.ImageOutputFormat,createTransferable --> <init>,org.jhotdraw.gui.datatransfer.ImageTransferable,);
Call(METHOD,org.jhotdraw.draw.io.ImageOutputFormat,toImage --> getChildCount,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.io.ImageOutputFormat,toImage --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.io.ImageOutputFormat,toImage$2 --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.io.ImageOutputFormat,toImage$2 --> draw,org.jhotdraw.draw.Figure,);
EndClass 172
StartClass 173
Class(org.jhotdraw.draw.print.DrawingPageable,N,N,Public);
Attribute(drawing,org.jhotdraw.draw.Drawing,Private,N,N,);
Attribute(pageFormat,java.awt.print.PageFormat,Private,N,N,);
Attribute(isAutorotate,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getNumberOfPages,int,Public,N,N);
Method(getPageFormat,java.awt.print.PageFormat,Public,N,N);
Method(getPrintable,java.awt.print.Printable,Public,N,N);
Method(printPage,int,Public,N,N);
Method(setRenderingHints,void,Protected,N,N);
Parameter(<init>,org.jhotdraw.draw.Drawing,);
Parameter(getPageFormat,int,);
Parameter(getPrintable,int,);
Parameter(printPage,java.awt.Graphics,);
Parameter(printPage,java.awt.print.PageFormat,);
Parameter(printPage,int,);
Parameter(setRenderingHints,java.awt.Graphics2D,);
Composition(org.jhotdraw.draw.Drawing);
Call(METHOD,org.jhotdraw.draw.print.DrawingPageable,getPrintable --> getNumberOfPages,org.jhotdraw.draw.print.DrawingPageable,);
Call(METHOD,org.jhotdraw.draw.print.DrawingPageable,printPage --> getNumberOfPages,org.jhotdraw.draw.print.DrawingPageable,);
Call(METHOD,org.jhotdraw.draw.print.DrawingPageable,printPage --> setRenderingHints,org.jhotdraw.draw.print.DrawingPageable,);
Call(ATTRIBUTE,org.jhotdraw.draw.print.DrawingPageable,<init> --> pageFormat,org.jhotdraw.draw.print.DrawingPageable,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.print.DrawingPageable,<init> --> isAutorotate,org.jhotdraw.draw.print.DrawingPageable,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.print.DrawingPageable,<init> --> drawing,org.jhotdraw.draw.print.DrawingPageable,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.print.DrawingPageable,<init> --> pageFormat,org.jhotdraw.draw.print.DrawingPageable,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.print.DrawingPageable,getPageFormat --> pageFormat,org.jhotdraw.draw.print.DrawingPageable,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.print.DrawingPageable,printPage --> drawing,org.jhotdraw.draw.print.DrawingPageable,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.print.DrawingPageable,printPage --> isAutorotate,org.jhotdraw.draw.print.DrawingPageable,READ);
Call(METHOD,org.jhotdraw.draw.print.DrawingPageable,getPrintable --> <init>,org.jhotdraw.draw.print.DrawingPageable$1,);
Call(METHOD,org.jhotdraw.draw.print.DrawingPageable,printPage --> getChildCount,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.print.DrawingPageable,printPage --> getChildren,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.print.DrawingPageable,printPage --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.print.DrawingPageable,printPage --> draw,org.jhotdraw.draw.Figure,);
EndClass 173
StartClass 174
Class(org.jhotdraw.samples.draw.DrawView$3,N,N,NA);
Attribute(val$newDrawing,org.jhotdraw.draw.Drawing,Public,N,Y,);
Attribute(this$0,org.jhotdraw.samples.draw.DrawView,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(run,void,Public,N,N);
Parameter(<init>,org.jhotdraw.samples.draw.DrawView,);
Parameter(<init>,org.jhotdraw.draw.Drawing,);
Composition(org.jhotdraw.draw.Drawing);
Composition(org.jhotdraw.samples.draw.DrawView);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView$3,<init> --> this$0,org.jhotdraw.samples.draw.DrawView$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView$3,<init> --> val$newDrawing,org.jhotdraw.samples.draw.DrawView$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView$3,run --> this$0,org.jhotdraw.samples.draw.DrawView$3,READ);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawView$3,run --> val$newDrawing,org.jhotdraw.samples.draw.DrawView$3,READ);
Call(METHOD,org.jhotdraw.samples.draw.DrawView$3,run --> access$100,org.jhotdraw.samples.draw.DrawView,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView$3,run --> getDrawing,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView$3,run --> access$000,org.jhotdraw.samples.draw.DrawView,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView$3,run --> removeUndoableEditListener,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView$3,run --> setDrawing,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView$3,run --> addUndoableEditListener,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.samples.draw.DrawView$3,run --> discardAllEdits,org.jhotdraw.undo.UndoRedoManager,);
EndClass 174
StartClass 175
Class(org.jhotdraw.draw.io.DOMStorableInputOutputFormat,N,N,Public);
Attribute(factory,org.jhotdraw.xml.DOMFactory,Private,N,N,);
Attribute(description,java.lang.String,Private,N,N,);
Attribute(fileExtension,java.lang.String,Private,N,N,);
Attribute(formatName,java.lang.String,Private,N,N,);
Attribute(mimeType,java.lang.String,Private,N,N,);
Attribute(dataFlavor,java.awt.datatransfer.DataFlavor,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getFileFilter,javax.swing.filechooser.FileFilter,Public,N,N);
Method(getOutputFormatAccessory,javax.swing.JComponent,Public,N,N);
Method(getInputFormatAccessory,javax.swing.JComponent,Public,N,N);
Method(read,void,Protected,N,N);
Method(getFileExtension,java.lang.String,Public,N,N);
Method(isDataFlavorSupported,boolean,Public,N,N);
Method(write,void,Public,N,N);
Method(write$2,void,Public,N,N);
Method(write$3,void,Public,N,N);
Method(read$2,void,Public,N,N);
Method(read$3,void,Public,N,N);
Method(read$4,void,Public,N,N);
Method(read$5,void,Public,N,N);
Method(read$6,void,Public,N,N);
Method(read$7,void,Public,N,N);
Method(createTransferable,java.awt.datatransfer.Transferable,Public,N,N);
Parameter(<init>,org.jhotdraw.xml.DOMFactory,);
Parameter(<init>$2,org.jhotdraw.xml.DOMFactory,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,java.lang.String,);
Parameter(read,java.net.URL,org.jhotdraw.draw.Figure);
Parameter(read,java.io.InputStream,);
Parameter(read,org.jhotdraw.draw.Drawing,);
Parameter(read,java.util.LinkedList,);
Parameter(isDataFlavorSupported,java.awt.datatransfer.DataFlavor,);
Parameter(write,java.net.URI,);
Parameter(write,org.jhotdraw.draw.Drawing,);
Parameter(write$2,java.io.File,);
Parameter(write$2,org.jhotdraw.draw.Drawing,);
Parameter(write$3,java.io.OutputStream,);
Parameter(write$3,org.jhotdraw.draw.Drawing,);
Parameter(read$2,java.net.URI,);
Parameter(read$2,org.jhotdraw.draw.Drawing,);
Parameter(read$3,java.net.URI,);
Parameter(read$3,org.jhotdraw.draw.Drawing,);
Parameter(read$3,boolean,);
Parameter(read$4,java.io.File,);
Parameter(read$4,org.jhotdraw.draw.Drawing,);
Parameter(read$5,java.io.File,);
Parameter(read$5,org.jhotdraw.draw.Drawing,);
Parameter(read$5,boolean,);
Parameter(read$6,java.io.InputStream,);
Parameter(read$6,org.jhotdraw.draw.Drawing,);
Parameter(read$6,boolean,);
Parameter(read$7,java.awt.datatransfer.Transferable,);
Parameter(read$7,org.jhotdraw.draw.Drawing,);
Parameter(read$7,boolean,);
Parameter(createTransferable,org.jhotdraw.draw.Drawing,org.jhotdraw.draw.Figure);
Parameter(createTransferable,java.util.List,);
Parameter(createTransferable,double,);
Realization(org.jhotdraw.draw.io.OutputFormat);
Realization(org.jhotdraw.draw.io.InputFormat);
Composition(org.jhotdraw.xml.DOMFactory);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,<init> --> <init>$2,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,write --> write$2,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,write$2 --> write$3,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read$2 --> read$4,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read$3 --> read$5,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read$4 --> read$5,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read$5 --> read$6,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,);
Call(ATTRIBUTE,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,<init>$2 --> factory,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,<init>$2 --> description,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,<init>$2 --> fileExtension,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,<init>$2 --> mimeType,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,<init>$2 --> dataFlavor,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,getFileFilter --> description,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,getFileFilter --> fileExtension,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read --> factory,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,getFileExtension --> fileExtension,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,isDataFlavorSupported --> dataFlavor,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,write$3 --> factory,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read$6 --> factory,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read$7 --> mimeType,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read$7 --> description,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read$7 --> factory,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,createTransferable --> factory,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,createTransferable --> mimeType,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,createTransferable --> description,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,READ);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,getFileFilter --> <init>,org.jhotdraw.gui.filechooser.ExtensionFileFilter,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read --> <init>,org.jhotdraw.xml.NanoXMLDOMInput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read --> getName,org.jhotdraw.xml.DOMFactory,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read --> openElement$2,org.jhotdraw.xml.NanoXMLDOMInput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read --> openElement$3,org.jhotdraw.xml.NanoXMLDOMInput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read --> getElementCount,org.jhotdraw.xml.NanoXMLDOMInput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read --> readObject,org.jhotdraw.xml.NanoXMLDOMInput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read --> closeElement,org.jhotdraw.xml.NanoXMLDOMInput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read --> getChildCount,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read --> basicAddAll,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,write$3 --> <init>,org.jhotdraw.xml.NanoXMLDOMOutput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,write$3 --> getName,org.jhotdraw.xml.DOMFactory,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,write$3 --> openElement,org.jhotdraw.xml.NanoXMLDOMOutput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,write$3 --> write,org.jhotdraw.xml.DOMStorable,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,write$3 --> closeElement,org.jhotdraw.xml.NanoXMLDOMOutput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,write$3 --> save,org.jhotdraw.xml.NanoXMLDOMOutput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,write$3 --> dispose,org.jhotdraw.xml.NanoXMLDOMOutput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read$6 --> <init>,org.jhotdraw.xml.NanoXMLDOMInput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read$6 --> getName,org.jhotdraw.xml.DOMFactory,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read$6 --> openElement$2,org.jhotdraw.xml.NanoXMLDOMInput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read$6 --> removeAllChildren,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read$6 --> read,org.jhotdraw.xml.DOMStorable,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read$6 --> closeElement,org.jhotdraw.xml.NanoXMLDOMInput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read$6 --> dispose,org.jhotdraw.xml.NanoXMLDOMInput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read$7 --> <init>,org.jhotdraw.xml.NanoXMLDOMInput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read$7 --> openElement$2,org.jhotdraw.xml.NanoXMLDOMInput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read$7 --> getElementCount,org.jhotdraw.xml.NanoXMLDOMInput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read$7 --> readObject$2,org.jhotdraw.xml.NanoXMLDOMInput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read$7 --> closeElement,org.jhotdraw.xml.NanoXMLDOMInput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read$7 --> removeAllChildren,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,read$7 --> addAll,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,createTransferable --> <init>,org.jhotdraw.xml.NanoXMLDOMOutput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,createTransferable --> openElement,org.jhotdraw.xml.NanoXMLDOMOutput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,createTransferable --> writeObject,org.jhotdraw.xml.NanoXMLDOMOutput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,createTransferable --> closeElement,org.jhotdraw.xml.NanoXMLDOMOutput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,createTransferable --> save,org.jhotdraw.xml.NanoXMLDOMOutput,);
Call(METHOD,org.jhotdraw.draw.io.DOMStorableInputOutputFormat,createTransferable --> <init>,org.jhotdraw.gui.datatransfer.InputStreamTransferable,);
EndClass 175
StartClass 176
Class(org.jhotdraw.draw.io.OutputFormat,Y,Y,Public);
Method(getFileFilter,javax.swing.filechooser.FileFilter,Public,N,Y);
Method(getFileExtension,java.lang.String,Public,N,Y);
Method(getOutputFormatAccessory,javax.swing.JComponent,Public,N,Y);
Method(write,void,Public,N,Y);
Method(write$2,void,Public,N,Y);
Method(createTransferable,java.awt.datatransfer.Transferable,Public,N,Y);
Parameter(write,java.net.URI,);
Parameter(write,org.jhotdraw.draw.Drawing,);
Parameter(write$2,java.io.OutputStream,);
Parameter(write$2,org.jhotdraw.draw.Drawing,);
Parameter(createTransferable,org.jhotdraw.draw.Drawing,org.jhotdraw.draw.Figure);
Parameter(createTransferable,java.util.List,);
Parameter(createTransferable,double,);
EndClass 176
StartClass 177
Class(org.jhotdraw.draw.QuadTreeDrawing,N,N,Public);
Attribute(quadTree,org.jhotdraw.geom.QuadTree,Private,N,N,org.jhotdraw.draw.Figure);
Attribute(needsSorting,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(indexOf,int,Public,N,N);
Method(basicAdd,void,Public,N,N);
Method(basicRemoveChild,org.jhotdraw.draw.Figure,Public,N,N);
Method(draw,void,Public,N,N);
Method(sort,java.util.List,Public,N,N);
Method(draw$2,void,Public,N,N);
Method(getChildren,java.util.List,Public,N,N);
Method(getChildren$2,java.util.List,Public,N,N);
Method(findFigureInside,org.jhotdraw.draw.Figure,Public,N,N);
Method(getFiguresFrontToBack,java.util.List,Public,N,N);
Method(findFigure,org.jhotdraw.draw.Figure,Public,N,N);
Method(findFigureExcept,org.jhotdraw.draw.Figure,Public,N,N);
Method(findFigureExcept$2,org.jhotdraw.draw.Figure,Public,N,N);
Method(findFigureBehind,org.jhotdraw.draw.Figure,Public,N,N);
Method(findFigureBehind$2,org.jhotdraw.draw.Figure,Public,N,N);
Method(findFigures,java.util.List,Public,N,N);
Method(findFiguresWithin,java.util.List,Public,N,N);
Method(bringToFront,void,Public,N,N);
Method(sendToBack,void,Public,N,N);
Method(contains,boolean,Public,N,N);
Method(ensureSorted,void,Private,N,N);
Method(setAttributeOnChildren,void,Protected,N,N);
Method(clone,org.jhotdraw.draw.QuadTreeDrawing,Public,N,N);
Method(createEventHandler,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,Protected,N,N);
Method(drawFill,void,Protected,N,N);
Method(drawStroke,void,Protected,N,N);
Method(drawCanvas,void,Public,N,N);
Method(clone$2,org.jhotdraw.draw.AbstractDrawing,Public,N,N);
Method(clone$3,org.jhotdraw.draw.Figure,Public,N,N);
Method(clone$4,org.jhotdraw.draw.AbstractAttributedCompositeFigure,Public,N,N);
Method(clone$5,org.jhotdraw.draw.AbstractCompositeFigure,Public,N,N);
Method(clone$6,org.jhotdraw.draw.AbstractFigure,Public,N,N);
Method(clone$7,org.jhotdraw.beans.AbstractBean,Public,N,N);
Method(clone$8,java.lang.Object,Public,N,N);
Method(access$000,org.jhotdraw.geom.QuadTree,Public,Y,N);
Method(access$102,boolean,Public,Y,N);
Parameter(indexOf,org.jhotdraw.draw.Figure,);
Parameter(basicAdd,int,);
Parameter(basicAdd,org.jhotdraw.draw.Figure,);
Parameter(basicRemoveChild,int,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(sort,java.util.Collection,org.jhotdraw.draw.Figure);
Parameter(draw$2,java.awt.Graphics2D,org.jhotdraw.draw.Figure);
Parameter(draw$2,java.util.Collection,);
Parameter(getChildren,java.awt.geom.Rectangle2D$Double,org.jhotdraw.draw.Figure);
Parameter(findFigureInside,java.awt.geom.Point2D$Double,);
Parameter(findFigure,java.awt.geom.Point2D$Double,);
Parameter(findFigureExcept,java.awt.geom.Point2D$Double,);
Parameter(findFigureExcept,org.jhotdraw.draw.Figure,);
Parameter(findFigureExcept$2,java.awt.geom.Point2D$Double,);
Parameter(findFigureExcept$2,java.util.Collection,);
Parameter(findFigureBehind,java.awt.geom.Point2D$Double,);
Parameter(findFigureBehind,org.jhotdraw.draw.Figure,);
Parameter(findFigureBehind$2,java.awt.geom.Point2D$Double,);
Parameter(findFigureBehind$2,java.util.Collection,);
Parameter(findFigures,java.awt.geom.Rectangle2D$Double,org.jhotdraw.draw.Figure);
Parameter(findFiguresWithin,java.awt.geom.Rectangle2D$Double,org.jhotdraw.draw.Figure);
Parameter(bringToFront,org.jhotdraw.draw.Figure,);
Parameter(sendToBack,org.jhotdraw.draw.Figure,);
Parameter(contains,org.jhotdraw.draw.Figure,);
Parameter(setAttributeOnChildren,org.jhotdraw.draw.AttributeKey,);
Parameter(setAttributeOnChildren,java.lang.Object,);
Parameter(drawFill,java.awt.Graphics2D,);
Parameter(drawStroke,java.awt.Graphics2D,);
Parameter(drawCanvas,java.awt.Graphics2D,);
Parameter(access$000,org.jhotdraw.draw.QuadTreeDrawing,);
Parameter(access$102,org.jhotdraw.draw.QuadTreeDrawing,);
Parameter(access$102,boolean,);
SuperClass(org.jhotdraw.draw.AbstractDrawing);
SuperClass(org.jhotdraw.draw.AbstractAttributedCompositeFigure);
SuperClass(org.jhotdraw.draw.AbstractCompositeFigure);
SuperClass(org.jhotdraw.draw.AbstractFigure);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.draw.AbstractDrawing);
Composition(org.jhotdraw.geom.QuadTree);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,draw --> sort,org.jhotdraw.draw.QuadTreeDrawing,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,draw --> draw$2,org.jhotdraw.draw.QuadTreeDrawing,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,sort --> ensureSorted,org.jhotdraw.draw.QuadTreeDrawing,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFigureInside --> getFiguresFrontToBack,org.jhotdraw.draw.QuadTreeDrawing,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,getFiguresFrontToBack --> ensureSorted,org.jhotdraw.draw.QuadTreeDrawing,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFigure --> getFiguresFrontToBack,org.jhotdraw.draw.QuadTreeDrawing,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFigureExcept --> getFiguresFrontToBack,org.jhotdraw.draw.QuadTreeDrawing,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFigureExcept$2 --> getFiguresFrontToBack,org.jhotdraw.draw.QuadTreeDrawing,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFigureBehind --> getFiguresFrontToBack,org.jhotdraw.draw.QuadTreeDrawing,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFigureBehind$2 --> getFiguresFrontToBack,org.jhotdraw.draw.QuadTreeDrawing,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFigures --> sort,org.jhotdraw.draw.QuadTreeDrawing,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,clone --> getChildren$2,org.jhotdraw.draw.QuadTreeDrawing,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,clone$2 --> clone,org.jhotdraw.draw.QuadTreeDrawing,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,clone$3 --> clone,org.jhotdraw.draw.QuadTreeDrawing,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,clone$4 --> clone,org.jhotdraw.draw.QuadTreeDrawing,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,clone$5 --> clone,org.jhotdraw.draw.QuadTreeDrawing,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,clone$6 --> clone,org.jhotdraw.draw.QuadTreeDrawing,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,clone$7 --> clone,org.jhotdraw.draw.QuadTreeDrawing,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,clone$8 --> clone,org.jhotdraw.draw.QuadTreeDrawing,);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,<init> --> quadTree,org.jhotdraw.draw.QuadTreeDrawing,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,<init> --> needsSorting,org.jhotdraw.draw.QuadTreeDrawing,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,basicAdd --> quadTree,org.jhotdraw.draw.QuadTreeDrawing,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,basicAdd --> needsSorting,org.jhotdraw.draw.QuadTreeDrawing,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,basicRemoveChild --> quadTree,org.jhotdraw.draw.QuadTreeDrawing,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,basicRemoveChild --> needsSorting,org.jhotdraw.draw.QuadTreeDrawing,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,draw --> quadTree,org.jhotdraw.draw.QuadTreeDrawing,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,getChildren --> quadTree,org.jhotdraw.draw.QuadTreeDrawing,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,findFigureInside --> quadTree,org.jhotdraw.draw.QuadTreeDrawing,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,findFigure --> quadTree,org.jhotdraw.draw.QuadTreeDrawing,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,findFigureExcept --> quadTree,org.jhotdraw.draw.QuadTreeDrawing,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,findFigureExcept$2 --> quadTree,org.jhotdraw.draw.QuadTreeDrawing,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,findFigures --> quadTree,org.jhotdraw.draw.QuadTreeDrawing,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,bringToFront --> needsSorting,org.jhotdraw.draw.QuadTreeDrawing,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,sendToBack --> needsSorting,org.jhotdraw.draw.QuadTreeDrawing,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,ensureSorted --> needsSorting,org.jhotdraw.draw.QuadTreeDrawing,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,ensureSorted --> needsSorting,org.jhotdraw.draw.QuadTreeDrawing,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,clone --> quadTree,org.jhotdraw.draw.QuadTreeDrawing,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,clone --> quadTree,org.jhotdraw.draw.QuadTreeDrawing,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,access$000 --> quadTree,org.jhotdraw.draw.QuadTreeDrawing,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,access$102 --> needsSorting,org.jhotdraw.draw.QuadTreeDrawing,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,indexOf --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,draw --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,sort --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,getChildren$2 --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,getFiguresFrontToBack --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,findFiguresWithin --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,findFiguresWithin --> TRANSFORM,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,bringToFront --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,sendToBack --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,contains --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,ensureSorted --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,ensureSorted --> INSTANCE,org.jhotdraw.draw.FigureLayerComparator,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,drawCanvas --> CANVAS_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,drawCanvas --> CANVAS_HEIGHT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,drawCanvas --> CANVAS_FILL_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing,drawCanvas --> CANVAS_FILL_OPACITY,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,<init> --> <init>,org.jhotdraw.draw.AbstractDrawing,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,<init> --> <init>,org.jhotdraw.geom.QuadTree,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,basicAdd --> basicAdd$2,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,basicAdd --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,basicAdd --> add,org.jhotdraw.geom.QuadTree,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,basicRemoveChild --> getChild,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,basicRemoveChild --> remove,org.jhotdraw.geom.QuadTree,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,basicRemoveChild --> basicRemoveChild,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,draw --> findIntersects,org.jhotdraw.geom.QuadTree,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,draw$2 --> isVisible,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,draw$2 --> draw,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,getChildren --> findInside,org.jhotdraw.geom.QuadTree,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFigureInside --> findContains,org.jhotdraw.geom.QuadTree,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFigureInside --> contains,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFigureInside --> findFigureInside,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,getFiguresFrontToBack --> <init>,org.jhotdraw.util.ReversedList,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFigure --> findContains,org.jhotdraw.geom.QuadTree,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFigure --> contains,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFigureExcept --> findContains,org.jhotdraw.geom.QuadTree,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFigureExcept --> contains,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFigureExcept$2 --> findContains,org.jhotdraw.geom.QuadTree,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFigureExcept$2 --> contains,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFigureBehind --> isVisible,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFigureBehind --> contains,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFigureBehind$2 --> isVisible,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFigureBehind$2 --> contains,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFigures --> findIntersects$2,org.jhotdraw.geom.QuadTree,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFiguresWithin --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFiguresWithin --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFiguresWithin --> isVisible,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,findFiguresWithin --> contains,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,bringToFront --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,bringToFront --> fireAreaInvalidated$2,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,sendToBack --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,sendToBack --> fireAreaInvalidated$2,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,clone --> clone,org.jhotdraw.draw.AbstractDrawing,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,clone --> <init>,org.jhotdraw.geom.QuadTree,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,clone --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,clone --> add,org.jhotdraw.geom.QuadTree,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,createEventHandler --> <init>,org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing,drawCanvas --> get,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
EndClass 177
StartClass 178
Class(org.jhotdraw.samples.draw.DrawFigureFactory,N,N,Public);
Attribute(classTagArray,java.lang.Object[][],Private,Y,Y,);
Attribute(enumTagArray,java.lang.Object[][],Private,Y,Y,);
Method(<init>,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
SuperClass(org.jhotdraw.xml.DefaultDOMFactory);
SuperClass(org.jhotdraw.xml.JavaPrimitivesDOMFactory);
Generalization(org.jhotdraw.xml.DefaultDOMFactory);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawFigureFactory,<init> --> classTagArray,org.jhotdraw.samples.draw.DrawFigureFactory,READ);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawFigureFactory,<init> --> enumTagArray,org.jhotdraw.samples.draw.DrawFigureFactory,READ);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawFigureFactory,<clinit> --> classTagArray,org.jhotdraw.samples.draw.DrawFigureFactory,WRITE);
Call(ATTRIBUTE,org.jhotdraw.samples.draw.DrawFigureFactory,<clinit> --> enumTagArray,org.jhotdraw.samples.draw.DrawFigureFactory,WRITE);
Call(METHOD,org.jhotdraw.samples.draw.DrawFigureFactory,<init> --> <init>,org.jhotdraw.xml.DefaultDOMFactory,);
Call(METHOD,org.jhotdraw.samples.draw.DrawFigureFactory,<init> --> addStorableClass,org.jhotdraw.xml.DefaultDOMFactory,);
Call(METHOD,org.jhotdraw.samples.draw.DrawFigureFactory,<init> --> addEnumClass,org.jhotdraw.xml.DefaultDOMFactory,);
EndClass 178
StartClass 179
Class(org.jhotdraw.draw.tool.ImageTool$1,N,N,NA);
Attribute(val$loaderFigure,org.jhotdraw.draw.ImageHolderFigure,Public,N,Y,);
Attribute(val$file,java.io.File,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.tool.ImageTool,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(construct,java.lang.Object,Protected,N,N);
Method(done,void,Protected,N,N);
Method(failed,void,Protected,N,N);
Parameter(<init>,org.jhotdraw.draw.tool.ImageTool,);
Parameter(<init>,org.jhotdraw.draw.ImageHolderFigure,);
Parameter(<init>,java.io.File,);
Parameter(done,java.lang.Object,);
Parameter(failed,java.lang.Throwable,);
SuperClass(org.jhotdraw.gui.Worker);
Generalization(org.jhotdraw.gui.Worker);
Composition(org.jhotdraw.draw.ImageHolderFigure);
Composition(org.jhotdraw.draw.tool.ImageTool);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ImageTool$1,<init> --> this$0,org.jhotdraw.draw.tool.ImageTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ImageTool$1,<init> --> val$loaderFigure,org.jhotdraw.draw.tool.ImageTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ImageTool$1,<init> --> val$file,org.jhotdraw.draw.tool.ImageTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ImageTool$1,construct --> val$loaderFigure,org.jhotdraw.draw.tool.ImageTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ImageTool$1,construct --> val$file,org.jhotdraw.draw.tool.ImageTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ImageTool$1,done --> this$0,org.jhotdraw.draw.tool.ImageTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ImageTool$1,done --> val$loaderFigure,org.jhotdraw.draw.tool.ImageTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ImageTool$1,failed --> this$0,org.jhotdraw.draw.tool.ImageTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ImageTool$1,done --> createdFigure,org.jhotdraw.draw.tool.CreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ImageTool$1,done --> prototype,org.jhotdraw.draw.tool.CreationTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ImageTool$1,failed --> createdFigure,org.jhotdraw.draw.tool.CreationTool,READ);
Call(METHOD,org.jhotdraw.draw.tool.ImageTool$1,<init> --> <init>,org.jhotdraw.gui.Worker,);
Call(METHOD,org.jhotdraw.draw.tool.ImageTool$1,construct --> loadImage,org.jhotdraw.draw.ImageHolderFigure,);
Call(METHOD,org.jhotdraw.draw.tool.ImageTool$1,done --> getImageData,org.jhotdraw.draw.ImageHolderFigure,);
Call(METHOD,org.jhotdraw.draw.tool.ImageTool$1,done --> getBufferedImage,org.jhotdraw.draw.ImageHolderFigure,);
Call(METHOD,org.jhotdraw.draw.tool.ImageTool$1,done --> setImage,org.jhotdraw.draw.ImageHolderFigure,);
Call(METHOD,org.jhotdraw.draw.tool.ImageTool$1,done --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ImageTool$1,done --> getComponent,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.ImageTool$1,failed --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ImageTool$1,failed --> getComponent,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.ImageTool$1,failed --> getDrawing,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.ImageTool$1,failed --> remove,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.ImageTool$1,failed --> fireToolDone,org.jhotdraw.draw.tool.AbstractTool,);
EndClass 179
StartClass 180
Class(org.jhotdraw.draw.tool.AbstractTool,N,Y,Public);
Attribute(isActive,boolean,Private,N,N,);
Attribute(isWorking,boolean,Protected,N,N,);
Attribute(editor,org.jhotdraw.draw.DrawingEditor,Protected,N,N,);
Attribute(anchor,java.awt.Point,Protected,N,N,);
Attribute(listenerList,javax.swing.event.EventListenerList,Protected,N,N,);
Attribute(editorProxy,org.jhotdraw.draw.DrawingEditorProxy,Private,N,N,);
Attribute(inputMap,javax.swing.InputMap,Private,N,N,);
Attribute(actionMap,javax.swing.ActionMap,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(addUndoableEditListener,void,Public,N,N);
Method(removeUndoableEditListener,void,Public,N,N);
Method(activate,void,Public,N,N);
Method(deactivate,void,Public,N,N);
Method(isActive,boolean,Public,N,N);
Method(getView,org.jhotdraw.draw.DrawingView,Protected,N,N);
Method(getEditor,org.jhotdraw.draw.DrawingEditor,Protected,N,N);
Method(getDrawing,org.jhotdraw.draw.Drawing,Protected,N,N);
Method(viewToDrawing,java.awt.geom.Point2D$Double,Protected,N,N);
Method(constrainPoint,java.awt.geom.Point2D$Double,Protected,N,N);
Method(constrainPoint$2,java.awt.geom.Point2D$Double,Protected,N,N);
Method(setInputMap,void,Public,N,N);
Method(getInputMap,javax.swing.InputMap,Public,N,N);
Method(setActionMap,void,Public,N,N);
Method(getActionMap,javax.swing.ActionMap,Public,N,N);
Method(editDelete,void,Public,N,N);
Method(editCut,void,Public,N,N);
Method(editCopy,void,Public,N,N);
Method(editDuplicate,void,Public,N,N);
Method(editPaste,void,Public,N,N);
Method(keyReleased,void,Public,N,N);
Method(keyTyped,void,Public,N,N);
Method(keyPressed,void,Public,N,N);
Method(createInputMap,javax.swing.InputMap,Protected,N,N);
Method(createActionMap,javax.swing.ActionMap,Protected,N,N);
Method(mouseClicked,void,Public,N,N);
Method(mouseEntered,void,Public,N,N);
Method(mouseExited,void,Public,N,N);
Method(mouseMoved,void,Public,N,N);
Method(mousePressed,void,Public,N,N);
Method(mouseReleased,void,Public,N,N);
Method(addToolListener,void,Public,N,N);
Method(removeToolListener,void,Public,N,N);
Method(fireToolStarted,void,Protected,N,N);
Method(fireToolDone,void,Protected,N,N);
Method(fireAreaInvalidated,void,Protected,N,N);
Method(fireAreaInvalidated$2,void,Protected,N,N);
Method(maybeFireBoundsInvalidated,void,Protected,N,N);
Method(fireBoundsInvalidated,void,Protected,N,N);
Method(draw,void,Public,N,N);
Method(updateCursor,void,Public,N,N);
Method(getToolTipText,java.lang.String,Public,N,N);
Method(supportsHandleInteraction,boolean,Public,N,N);
Parameter(addUndoableEditListener,javax.swing.event.UndoableEditListener,);
Parameter(removeUndoableEditListener,javax.swing.event.UndoableEditListener,);
Parameter(activate,org.jhotdraw.draw.DrawingEditor,);
Parameter(deactivate,org.jhotdraw.draw.DrawingEditor,);
Parameter(viewToDrawing,java.awt.Point,);
Parameter(constrainPoint,java.awt.Point,);
Parameter(constrainPoint$2,java.awt.geom.Point2D$Double,);
Parameter(setInputMap,javax.swing.InputMap,);
Parameter(setActionMap,javax.swing.ActionMap,);
Parameter(keyReleased,java.awt.event.KeyEvent,);
Parameter(keyTyped,java.awt.event.KeyEvent,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
Parameter(mouseClicked,java.awt.event.MouseEvent,);
Parameter(mouseEntered,java.awt.event.MouseEvent,);
Parameter(mouseExited,java.awt.event.MouseEvent,);
Parameter(mouseMoved,java.awt.event.MouseEvent,);
Parameter(mousePressed,java.awt.event.MouseEvent,);
Parameter(mouseReleased,java.awt.event.MouseEvent,);
Parameter(addToolListener,org.jhotdraw.draw.event.ToolListener,);
Parameter(removeToolListener,org.jhotdraw.draw.event.ToolListener,);
Parameter(fireToolStarted,org.jhotdraw.draw.DrawingView,);
Parameter(fireAreaInvalidated,java.awt.geom.Rectangle2D$Double,);
Parameter(fireAreaInvalidated$2,java.awt.Rectangle,);
Parameter(maybeFireBoundsInvalidated,java.awt.Rectangle,);
Parameter(fireBoundsInvalidated,java.awt.Rectangle,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(updateCursor,org.jhotdraw.draw.DrawingView,);
Parameter(updateCursor,java.awt.Point,);
Parameter(getToolTipText,org.jhotdraw.draw.DrawingView,);
Parameter(getToolTipText,java.awt.event.MouseEvent,);
SuperClass(org.jhotdraw.beans.AbstractBean);
SubClass(org.jhotdraw.draw.tool.ConnectionTool);
SubClass(org.jhotdraw.draw.tool.BezierTool);
SubClass(org.jhotdraw.draw.tool.TextAreaCreationTool);
SubClass(org.jhotdraw.draw.tool.ImageTool);
SubClass(org.jhotdraw.draw.tool.TextCreationTool);
SubClass(org.jhotdraw.draw.tool.CreationTool);
SubClass(org.jhotdraw.draw.tool.TextAreaEditingTool);
SubClass(org.jhotdraw.draw.tool.TextEditingTool);
SubClass(org.jhotdraw.draw.tool.DelegationSelectionTool);
SubClass(org.jhotdraw.draw.tool.SelectionTool);
SubClass(org.jhotdraw.draw.tool.DefaultHandleTracker);
SubClass(org.jhotdraw.draw.tool.DefaultDragTracker);
SubClass(org.jhotdraw.draw.tool.DefaultSelectAreaTracker);
Generalization(org.jhotdraw.beans.AbstractBean);
Realization(org.jhotdraw.draw.tool.Tool);
Composition(org.jhotdraw.draw.DrawingEditor);
Composition(org.jhotdraw.draw.DrawingEditorProxy);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,<init> --> createInputMap,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,<init> --> setInputMap,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,<init> --> createActionMap,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,<init> --> setActionMap,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,getDrawing --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,viewToDrawing --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,viewToDrawing --> constrainPoint$2,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,constrainPoint --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,constrainPoint --> constrainPoint$2,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,constrainPoint$2 --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,editDelete --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,keyReleased --> fireToolDone,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,keyPressed --> fireToolDone,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,mousePressed --> fireToolStarted,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,fireToolDone --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,fireAreaInvalidated --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,fireAreaInvalidated --> fireAreaInvalidated$2,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,fireAreaInvalidated$2 --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,maybeFireBoundsInvalidated --> getDrawing,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,maybeFireBoundsInvalidated --> fireBoundsInvalidated,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,fireBoundsInvalidated --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,<init> --> anchor,org.jhotdraw.draw.tool.AbstractTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,<init> --> listenerList,org.jhotdraw.draw.tool.AbstractTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,<init> --> editorProxy,org.jhotdraw.draw.tool.AbstractTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,addUndoableEditListener --> listenerList,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,removeUndoableEditListener --> listenerList,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,activate --> editorProxy,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,activate --> editor,org.jhotdraw.draw.tool.AbstractTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,activate --> isActive,org.jhotdraw.draw.tool.AbstractTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,deactivate --> editorProxy,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,deactivate --> editor,org.jhotdraw.draw.tool.AbstractTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,deactivate --> isActive,org.jhotdraw.draw.tool.AbstractTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,isActive --> isActive,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,getView --> editor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,getEditor --> editor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,setInputMap --> inputMap,org.jhotdraw.draw.tool.AbstractTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,getInputMap --> inputMap,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,setActionMap --> actionMap,org.jhotdraw.draw.tool.AbstractTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,getActionMap --> actionMap,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,keyPressed --> editor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,keyPressed --> inputMap,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,keyPressed --> actionMap,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,mousePressed --> editor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,mousePressed --> anchor,org.jhotdraw.draw.tool.AbstractTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,mousePressed --> isWorking,org.jhotdraw.draw.tool.AbstractTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,mouseReleased --> isWorking,org.jhotdraw.draw.tool.AbstractTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,addToolListener --> listenerList,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,removeToolListener --> listenerList,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,fireToolStarted --> listenerList,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,fireToolDone --> listenerList,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,fireAreaInvalidated$2 --> listenerList,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,fireBoundsInvalidated --> listenerList,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,maybeFireBoundsInvalidated --> CANVAS_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.AbstractTool,maybeFireBoundsInvalidated --> CANVAS_HEIGHT,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,<init> --> <init>,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,<init> --> <init>,org.jhotdraw.draw.DrawingEditorProxy,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,activate --> setTarget,org.jhotdraw.draw.DrawingEditorProxy,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,activate --> getDrawingViews,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,activate --> repaintHandles,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,deactivate --> setTarget,org.jhotdraw.draw.DrawingEditorProxy,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,getView --> getActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,getDrawing --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,viewToDrawing --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,constrainPoint --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,constrainPoint$2 --> getConstrainer,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,constrainPoint$2 --> constrainPoint,org.jhotdraw.draw.Constrainer,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,editDelete --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,editDelete --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,editDelete --> removeAll,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,keyPressed --> findView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,keyPressed --> setActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,keyPressed --> getInputMap,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,keyPressed --> getActionMap,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,mousePressed --> findView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,mousePressed --> requestFocus,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,fireToolStarted --> <init>,org.jhotdraw.draw.event.ToolEvent,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,fireToolStarted --> toolStarted,org.jhotdraw.draw.event.ToolListener,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,fireToolDone --> <init>,org.jhotdraw.draw.event.ToolEvent,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,fireToolDone --> toolDone,org.jhotdraw.draw.event.ToolListener,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,fireAreaInvalidated --> drawingToView,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,fireAreaInvalidated$2 --> <init>,org.jhotdraw.draw.event.ToolEvent,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,fireAreaInvalidated$2 --> areaInvalidated,org.jhotdraw.draw.event.ToolListener,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,maybeFireBoundsInvalidated --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,fireBoundsInvalidated --> <init>,org.jhotdraw.draw.event.ToolEvent,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,fireBoundsInvalidated --> boundsInvalidated,org.jhotdraw.draw.event.ToolListener,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,updateCursor --> isEnabled,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,updateCursor --> findHandle,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,updateCursor --> getCursor,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,updateCursor --> setCursor,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,updateCursor --> findFigure,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,updateCursor --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,updateCursor --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,updateCursor --> isSelectable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,updateCursor --> findFigureBehind,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.AbstractTool,updateCursor --> getCursor,org.jhotdraw.draw.Figure,);
EndClass 180
StartClass 181
Class(org.jhotdraw.draw.Constrainer,Y,Y,Public);
Method(constrainPoint,java.awt.geom.Point2D$Double,Public,N,Y);
Method(translatePoint,java.awt.geom.Point2D$Double,Public,N,Y);
Method(constrainRectangle,java.awt.geom.Rectangle2D$Double,Public,N,Y);
Method(translateRectangle,java.awt.geom.Rectangle2D$Double,Public,N,Y);
Method(constrainAngle,double,Public,N,Y);
Method(rotateAngle,double,Public,N,Y);
Method(draw,void,Public,N,Y);
Method(addChangeListener,void,Public,N,Y);
Method(removeChangeListener,void,Public,N,Y);
Parameter(constrainPoint,java.awt.geom.Point2D$Double,);
Parameter(translatePoint,java.awt.geom.Point2D$Double,);
Parameter(translatePoint,org.jhotdraw.draw.TranslationDirection,);
Parameter(constrainRectangle,java.awt.geom.Rectangle2D$Double,);
Parameter(translateRectangle,java.awt.geom.Rectangle2D$Double,);
Parameter(translateRectangle,org.jhotdraw.draw.TranslationDirection,);
Parameter(constrainAngle,double,);
Parameter(rotateAngle,double,);
Parameter(rotateAngle,org.jhotdraw.draw.RotationDirection,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(draw,org.jhotdraw.draw.DrawingView,);
Parameter(addChangeListener,javax.swing.event.ChangeListener,);
Parameter(removeChangeListener,javax.swing.event.ChangeListener,);
EndClass 181
StartClass 182
Class(org.jhotdraw.draw.tool.ConnectionTool$1,N,N,NA);
Attribute(val$addedDrawing,org.jhotdraw.draw.Drawing,Public,N,Y,);
Attribute(val$addedFigure,org.jhotdraw.draw.Figure,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.tool.ConnectionTool,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.tool.ConnectionTool,);
Parameter(<init>,org.jhotdraw.draw.Drawing,);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Composition(org.jhotdraw.draw.Drawing);
Composition(org.jhotdraw.draw.Figure);
Composition(org.jhotdraw.draw.tool.ConnectionTool);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool$1,<init> --> this$0,org.jhotdraw.draw.tool.ConnectionTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool$1,<init> --> val$addedDrawing,org.jhotdraw.draw.tool.ConnectionTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool$1,<init> --> val$addedFigure,org.jhotdraw.draw.tool.ConnectionTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool$1,getPresentationName --> this$0,org.jhotdraw.draw.tool.ConnectionTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool$1,undo --> val$addedDrawing,org.jhotdraw.draw.tool.ConnectionTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool$1,undo --> val$addedFigure,org.jhotdraw.draw.tool.ConnectionTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool$1,redo --> val$addedDrawing,org.jhotdraw.draw.tool.ConnectionTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.ConnectionTool$1,redo --> val$addedFigure,org.jhotdraw.draw.tool.ConnectionTool$1,READ);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool$1,getPresentationName --> access$000,org.jhotdraw.draw.tool.ConnectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool$1,undo --> remove,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.ConnectionTool$1,redo --> add,org.jhotdraw.draw.Drawing,);
EndClass 182
StartClass 183
Class(org.jhotdraw.draw.connector.ChopEllipseConnector,N,N,Public);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getStrokeColor,java.awt.Color,Private,N,N);
Method(getStrokeWidth,float,Private,N,N);
Method(chop,java.awt.geom.Point2D$Double,Protected,N,N);
Parameter(<init>$2,org.jhotdraw.draw.Figure,);
Parameter(getStrokeColor,org.jhotdraw.draw.Figure,);
Parameter(getStrokeWidth,org.jhotdraw.draw.Figure,);
Parameter(chop,org.jhotdraw.draw.Figure,);
Parameter(chop,java.awt.geom.Point2D$Double,);
SuperClass(org.jhotdraw.draw.connector.ChopRectangleConnector);
SuperClass(org.jhotdraw.draw.connector.AbstractConnector);
Generalization(org.jhotdraw.draw.connector.ChopRectangleConnector);
Call(METHOD,org.jhotdraw.draw.connector.ChopEllipseConnector,chop --> getStrokeColor,org.jhotdraw.draw.connector.ChopEllipseConnector,);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopEllipseConnector,getStrokeColor --> STROKE_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopEllipseConnector,getStrokeWidth --> STROKE_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopEllipseConnector,chop --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,org.jhotdraw.draw.connector.ChopEllipseConnector$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopEllipseConnector,chop --> STROKE_PLACEMENT,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.connector.ChopEllipseConnector,<init> --> <init>,org.jhotdraw.draw.connector.ChopRectangleConnector,);
Call(METHOD,org.jhotdraw.draw.connector.ChopEllipseConnector,<init>$2 --> <init>$2,org.jhotdraw.draw.connector.ChopRectangleConnector,);
Call(METHOD,org.jhotdraw.draw.connector.ChopEllipseConnector,getStrokeColor --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopEllipseConnector,getStrokeWidth --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopEllipseConnector,chop --> getConnectorTarget,org.jhotdraw.draw.connector.AbstractConnector,);
Call(METHOD,org.jhotdraw.draw.connector.ChopEllipseConnector,chop --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopEllipseConnector,chop --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopEllipseConnector,chop --> getStrokeTotalWidth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.connector.ChopEllipseConnector,chop --> grow,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.connector.ChopEllipseConnector,chop --> pointToAngle$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.connector.ChopEllipseConnector,chop --> ovalAngleToPoint$2,org.jhotdraw.geom.Geom,);
EndClass 183
StartClass 184
Class(org.jhotdraw.draw.AbstractAttributedDecoratedFigure,N,Y,Public);
Attribute(decorator,org.jhotdraw.draw.Figure,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(draw,void,Public,N,N);
Method(drawFigure,void,Protected,N,N);
Method(drawDecorator,void,Protected,N,N);
Method(getDrawingArea,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(getFigureDrawingArea,java.awt.geom.Rectangle2D$Double,Protected,N,N);
Method(setDecorator,void,Public,N,N);
Method(getDecorator,org.jhotdraw.draw.Figure,Public,N,N);
Method(updateDecoratorBounds,void,Protected,N,N);
Method(contains,boolean,Public,N,N);
Method(figureContains,boolean,Protected,N,Y);
Method(read,void,Public,N,N);
Method(write,void,Public,N,N);
Method(writeDecorator,void,Protected,N,N);
Method(readDecorator,void,Protected,N,N);
Method(clone,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,Public,N,N);
Method(clone$2,org.jhotdraw.draw.AbstractAttributedFigure,Public,N,N);
Method(clone$3,org.jhotdraw.draw.AbstractFigure,Public,N,N);
Method(clone$4,org.jhotdraw.draw.Figure,Public,N,N);
Method(clone$5,org.jhotdraw.beans.AbstractBean,Public,N,N);
Method(clone$6,java.lang.Object,Public,N,N);
Parameter(draw,java.awt.Graphics2D,);
Parameter(drawFigure,java.awt.Graphics2D,);
Parameter(drawDecorator,java.awt.Graphics2D,);
Parameter(setDecorator,org.jhotdraw.draw.Figure,);
Parameter(contains,java.awt.geom.Point2D$Double,);
Parameter(figureContains,java.awt.geom.Point2D$Double,);
Parameter(read,org.jhotdraw.xml.DOMInput,);
Parameter(write,org.jhotdraw.xml.DOMOutput,);
Parameter(writeDecorator,org.jhotdraw.xml.DOMOutput,);
Parameter(readDecorator,org.jhotdraw.xml.DOMInput,);
SuperClass(org.jhotdraw.draw.AbstractAttributedFigure);
SuperClass(org.jhotdraw.draw.AbstractFigure);
SuperClass(org.jhotdraw.beans.AbstractBean);
SubClass(org.jhotdraw.draw.TextAreaFigure);
SubClass(org.jhotdraw.draw.TextFigure);
SubClass(org.jhotdraw.draw.ImageFigure);
Generalization(org.jhotdraw.draw.AbstractAttributedFigure);
Realization(org.jhotdraw.draw.DecoratedFigure);
Realization(org.jhotdraw.xml.DOMStorable);
Composition(org.jhotdraw.draw.Figure);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,draw --> drawDecorator,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,draw --> drawFigure,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,drawDecorator --> updateDecoratorBounds,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,getDrawingArea --> getFigureDrawingArea,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,getDrawingArea --> updateDecoratorBounds,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,contains --> updateDecoratorBounds,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,contains --> figureContains,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,read --> readDecorator,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,write --> writeDecorator,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,clone$2 --> clone,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,clone$3 --> clone,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,clone$4 --> clone,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,clone$5 --> clone,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,clone$6 --> clone,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,draw --> decorator,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,drawDecorator --> decorator,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,getDrawingArea --> decorator,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,setDecorator --> decorator,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,setDecorator --> decorator,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,getDecorator --> decorator,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,updateDecoratorBounds --> decorator,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,contains --> decorator,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,writeDecorator --> decorator,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,readDecorator --> decorator,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,clone --> decorator,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,clone --> decorator,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,updateDecoratorBounds --> DECORATOR_INSETS,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,updateDecoratorBounds --> left,org.jhotdraw.geom.Insets2D$Double,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,updateDecoratorBounds --> top,org.jhotdraw.geom.Insets2D$Double,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,updateDecoratorBounds --> right,org.jhotdraw.geom.Insets2D$Double,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,updateDecoratorBounds --> bottom,org.jhotdraw.geom.Insets2D$Double,READ);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,<init> --> <init>,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,drawFigure --> draw,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,drawDecorator --> draw,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,getDrawingArea --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,getFigureDrawingArea --> getDrawingArea,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,setDecorator --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,setDecorator --> getStartPoint,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,setDecorator --> getEndPoint,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,setDecorator --> setBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,setDecorator --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,updateDecoratorBounds --> getStartPoint,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,updateDecoratorBounds --> getEndPoint,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,updateDecoratorBounds --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,updateDecoratorBounds --> setBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,contains --> contains,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,read --> read,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,write --> write,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,writeDecorator --> openElement,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,writeDecorator --> writeObject,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,writeDecorator --> closeElement,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,readDecorator --> getElementCount$2,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,readDecorator --> openElement$2,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,readDecorator --> readObject,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,readDecorator --> closeElement,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,clone --> clone,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedDecoratedFigure,clone --> clone,org.jhotdraw.draw.Figure,);
EndClass 184
StartClass 185
Class(org.jhotdraw.draw.TextAreaFigure$1,N,N,NA);
Attribute($SwitchMap$org$jhotdraw$draw$AttributeKeys$Alignment,int[],Public,Y,Y,);
Method(<clinit>,void,Public,Y,N);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$Alignment,org.jhotdraw.draw.TextAreaFigure$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$Alignment,org.jhotdraw.draw.TextAreaFigure$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure$1,<clinit> --> TRAILING,org.jhotdraw.draw.AttributeKeys$Alignment,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure$1,<clinit> --> CENTER,org.jhotdraw.draw.AttributeKeys$Alignment,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure$1,<clinit> --> BLOCK,org.jhotdraw.draw.AttributeKeys$Alignment,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TextAreaFigure$1,<clinit> --> LEADING,org.jhotdraw.draw.AttributeKeys$Alignment,READ);
Call(METHOD,org.jhotdraw.draw.TextAreaFigure$1,<clinit> --> values,org.jhotdraw.draw.AttributeKeys$Alignment,);
EndClass 185
StartClass 186
Class(org.jhotdraw.draw.handle.FontSizeHandle,N,N,Public);
Attribute(oldSize,float,Private,N,N,);
Attribute(newSize,float,Private,N,N,);
Attribute(restoreData,java.lang.Object,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(draw,void,Public,N,N);
Method(getCursor,java.awt.Cursor,Public,N,N);
Method(basicGetBounds,java.awt.Rectangle,Protected,N,N);
Method(trackStart,void,Public,N,N);
Method(trackStep,void,Public,N,N);
Method(trackEnd,void,Public,N,N);
Method(keyPressed,void,Public,N,N);
Method(getToolTipText,java.lang.String,Public,N,N);
Method(access$000,float,Public,Y,N);
Parameter(<init>,org.jhotdraw.draw.TextHolderFigure,);
Parameter(<init>$2,org.jhotdraw.draw.TextHolderFigure,);
Parameter(<init>$2,org.jhotdraw.draw.locator.Locator,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(trackStart,java.awt.Point,);
Parameter(trackStart,int,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,int,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,int,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
Parameter(getToolTipText,java.awt.Point,);
Parameter(access$000,org.jhotdraw.draw.handle.FontSizeHandle,);
SuperClass(org.jhotdraw.draw.handle.LocatorHandle);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.LocatorHandle);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle,trackStart --> newSize,org.jhotdraw.draw.handle.FontSizeHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle,trackStart --> oldSize,org.jhotdraw.draw.handle.FontSizeHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle,trackStart --> restoreData,org.jhotdraw.draw.handle.FontSizeHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle,trackStep --> oldSize,org.jhotdraw.draw.handle.FontSizeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle,trackStep --> newSize,org.jhotdraw.draw.handle.FontSizeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle,trackStep --> newSize,org.jhotdraw.draw.handle.FontSizeHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle,trackEnd --> restoreData,org.jhotdraw.draw.handle.FontSizeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle,trackEnd --> newSize,org.jhotdraw.draw.handle.FontSizeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle,keyPressed --> newSize,org.jhotdraw.draw.handle.FontSizeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle,keyPressed --> oldSize,org.jhotdraw.draw.handle.FontSizeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle,keyPressed --> restoreData,org.jhotdraw.draw.handle.FontSizeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle,keyPressed --> newSize,org.jhotdraw.draw.handle.FontSizeHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle,keyPressed --> oldSize,org.jhotdraw.draw.handle.FontSizeHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle,keyPressed --> restoreData,org.jhotdraw.draw.handle.FontSizeHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle,access$000 --> newSize,org.jhotdraw.draw.handle.FontSizeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle,draw --> ATTRIBUTE_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle,draw --> ATTRIBUTE_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle,trackStep --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle,trackStep --> TRANSFORM,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,<init> --> <init>,org.jhotdraw.draw.locator.FontSizeLocator,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,<init> --> <init>,org.jhotdraw.draw.handle.LocatorHandle,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,<init>$2 --> <init>,org.jhotdraw.draw.handle.LocatorHandle,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,draw --> getEditor,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,draw --> getHandleAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,draw --> drawDiamond,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,basicGetBounds --> getLocation,org.jhotdraw.draw.handle.LocatorHandle,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,basicGetBounds --> getHandlesize,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,trackStart --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,trackStart --> getFontSize,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,trackStart --> getAttributesRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,trackStep --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,trackStep --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,trackStep --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,trackStep --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,trackStep --> setFontSize,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,trackStep --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,trackEnd --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,trackEnd --> <init>,org.jhotdraw.draw.handle.FontSizeHandle$1,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,trackEnd --> fireUndoableEditHappened,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,keyPressed --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,keyPressed --> getFontSize,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,keyPressed --> getAttributesRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,keyPressed --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,keyPressed --> setFontSize,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,keyPressed --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,keyPressed --> <init>,org.jhotdraw.draw.handle.FontSizeHandle$2,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,keyPressed --> fireUndoableEditHappened,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,getToolTipText --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle,getToolTipText --> getString,org.jhotdraw.util.ResourceBundleUtil,);
EndClass 186
StartClass 187
Class(org.jhotdraw.draw.tool.TextAreaEditingTool,N,N,Public);
Attribute(textArea,org.jhotdraw.draw.text.FloatingTextArea,Private,N,N,);
Attribute(typingTarget,org.jhotdraw.draw.TextHolderFigure,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(deactivate,void,Public,N,N);
Method(mousePressed,void,Public,N,N);
Method(draw,void,Public,N,N);
Method(beginEdit,void,Protected,N,N);
Method(getFieldBounds,java.awt.geom.Rectangle2D$Double,Private,N,N);
Method(endEdit,void,Protected,N,N);
Method(actionPerformed,void,Public,N,N);
Method(mouseDragged,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.TextHolderFigure,);
Parameter(deactivate,org.jhotdraw.draw.DrawingEditor,);
Parameter(mousePressed,java.awt.event.MouseEvent,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(beginEdit,org.jhotdraw.draw.TextHolderFigure,);
Parameter(getFieldBounds,org.jhotdraw.draw.TextHolderFigure,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(mouseDragged,java.awt.event.MouseEvent,);
SuperClass(org.jhotdraw.draw.tool.AbstractTool);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.draw.tool.AbstractTool);
Composition(org.jhotdraw.draw.text.FloatingTextArea);
Composition(org.jhotdraw.draw.TextHolderFigure);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,deactivate --> endEdit,org.jhotdraw.draw.tool.TextAreaEditingTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,mousePressed --> beginEdit,org.jhotdraw.draw.tool.TextAreaEditingTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,beginEdit --> endEdit,org.jhotdraw.draw.tool.TextAreaEditingTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,beginEdit --> getFieldBounds,org.jhotdraw.draw.tool.TextAreaEditingTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,actionPerformed --> endEdit,org.jhotdraw.draw.tool.TextAreaEditingTool,);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaEditingTool,<init> --> typingTarget,org.jhotdraw.draw.tool.TextAreaEditingTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaEditingTool,mousePressed --> typingTarget,org.jhotdraw.draw.tool.TextAreaEditingTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaEditingTool,beginEdit --> textArea,org.jhotdraw.draw.tool.TextAreaEditingTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaEditingTool,beginEdit --> typingTarget,org.jhotdraw.draw.tool.TextAreaEditingTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaEditingTool,beginEdit --> textArea,org.jhotdraw.draw.tool.TextAreaEditingTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaEditingTool,beginEdit --> typingTarget,org.jhotdraw.draw.tool.TextAreaEditingTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaEditingTool,endEdit --> typingTarget,org.jhotdraw.draw.tool.TextAreaEditingTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaEditingTool,endEdit --> textArea,org.jhotdraw.draw.tool.TextAreaEditingTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaEditingTool,endEdit --> typingTarget,org.jhotdraw.draw.tool.TextAreaEditingTool,WRITE);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,<init> --> <init>,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,deactivate --> deactivate,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,mousePressed --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,mousePressed --> updateCursor,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,beginEdit --> <init>,org.jhotdraw.draw.text.FloatingTextArea,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,beginEdit --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,beginEdit --> createOverlay$2,org.jhotdraw.draw.text.FloatingTextArea,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,beginEdit --> getText,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,beginEdit --> setBounds,org.jhotdraw.draw.text.FloatingTextArea,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,beginEdit --> requestFocus,org.jhotdraw.draw.text.FloatingTextArea,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,getFieldBounds --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,getFieldBounds --> getInsets,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,getFieldBounds --> subtractTo,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,endEdit --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,endEdit --> getText,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,endEdit --> getText,org.jhotdraw.draw.text.FloatingTextArea,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,endEdit --> setText,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,endEdit --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,endEdit --> <init>,org.jhotdraw.draw.tool.TextAreaEditingTool$1,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,endEdit --> getDrawing,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,endEdit --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,endEdit --> endOverlay,org.jhotdraw.draw.text.FloatingTextArea,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool,actionPerformed --> fireToolDone,org.jhotdraw.draw.tool.AbstractTool,);
EndClass 187
StartClass 188
Class(org.jhotdraw.draw.handle.TextOverflowHandle,N,N,Public);
Method(<init>,void,Public,N,N);
Method(getOwner,org.jhotdraw.draw.TextHolderFigure,Public,N,N);
Method(contains,boolean,Public,N,N);
Method(draw,void,Public,N,N);
Method(basicGetBounds,java.awt.Rectangle,Protected,N,N);
Method(trackStart,void,Public,N,N);
Method(trackStep,void,Public,N,N);
Method(trackEnd,void,Public,N,N);
Method(getToolTipText,java.lang.String,Public,N,N);
Method(getOwner$2,org.jhotdraw.draw.Figure,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.TextHolderFigure,);
Parameter(contains,java.awt.Point,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(trackStart,java.awt.Point,);
Parameter(trackStart,int,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,int,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,int,);
Parameter(getToolTipText,java.awt.Point,);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.AbstractHandle);
Call(METHOD,org.jhotdraw.draw.handle.TextOverflowHandle,draw --> getOwner,org.jhotdraw.draw.handle.TextOverflowHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TextOverflowHandle,draw --> basicGetBounds,org.jhotdraw.draw.handle.TextOverflowHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TextOverflowHandle,basicGetBounds --> getOwner,org.jhotdraw.draw.handle.TextOverflowHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TextOverflowHandle,getToolTipText --> getOwner,org.jhotdraw.draw.handle.TextOverflowHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TextOverflowHandle,getOwner$2 --> getOwner,org.jhotdraw.draw.handle.TextOverflowHandle,);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TextOverflowHandle,draw --> OVERFLOW_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TextOverflowHandle,draw --> OVERFLOW_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TextOverflowHandle,basicGetBounds --> TRANSFORM,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TextOverflowHandle,basicGetBounds --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(METHOD,org.jhotdraw.draw.handle.TextOverflowHandle,<init> --> <init>,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TextOverflowHandle,getOwner --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TextOverflowHandle,draw --> isTextOverflow,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.handle.TextOverflowHandle,draw --> getEditor,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TextOverflowHandle,draw --> getHandleAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.handle.TextOverflowHandle,draw --> drawRectangle,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TextOverflowHandle,basicGetBounds --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TextOverflowHandle,basicGetBounds --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TextOverflowHandle,basicGetBounds --> drawingToView,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.TextOverflowHandle,basicGetBounds --> getHandlesize,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TextOverflowHandle,getToolTipText --> isTextOverflow,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.handle.TextOverflowHandle,getToolTipText --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.TextOverflowHandle,getToolTipText --> getString,org.jhotdraw.util.ResourceBundleUtil,);
EndClass 188
StartClass 189
Class(org.jhotdraw.geom.Bezier,N,N,Public);
Method(<init>,void,Private,N,N);
Method(main,void,Public,Y,N);
Method(fitBezierPath,org.jhotdraw.geom.BezierPath,Public,Y,N);
Method(fitBezierPath$2,org.jhotdraw.geom.BezierPath,Public,Y,N);
Method(fitBezierPath$3,org.jhotdraw.geom.BezierPath,Public,Y,N);
Method(removeClosePoints,java.util.ArrayList,Public,Y,N);
Method(removeCoincidentPoints,java.util.ArrayList,Private,Y,N);
Method(splitAtCorners,java.util.ArrayList,Public,Y,N);
Method(findCorners,java.util.ArrayList,Public,Y,N);
Method(reduceNoise,java.util.ArrayList,Public,Y,N);
Method(fitCubic,void,Private,Y,N);
Method(addCurveTo,void,Private,Y,N);
Method(computeLeftTangent,java.awt.geom.Point2D$Double,Private,Y,N);
Method(computeRightTangent,java.awt.geom.Point2D$Double,Private,Y,N);
Method(computeCenterTangent,java.awt.geom.Point2D$Double,Private,Y,N);
Method(chordLengthParameterize,double[],Private,Y,N);
Method(reparameterize,double[],Private,Y,N);
Method(newtonRaphsonRootFind,double,Private,Y,N);
Method(computeMaxError,double,Private,Y,N);
Method(generateBezier,java.awt.geom.Point2D$Double[],Private,Y,N);
Method(bezierII,java.awt.geom.Point2D$Double,Private,Y,N);
Method(v2DistanceBetween2Points,double,Private,Y,N);
Method(v2SquaredDistanceBetween2Points,double,Private,Y,N);
Method(v2Scale,java.awt.geom.Point2D$Double,Private,Y,N);
Method(v2ScaleIII,java.awt.geom.Point2D$Double,Private,Y,N);
Method(v2Length,double,Private,Y,N);
Method(v2SquaredLength,double,Private,Y,N);
Method(v2Add,java.awt.geom.Point2D$Double,Private,Y,N);
Method(v2AddII,java.awt.geom.Point2D$Double,Private,Y,N);
Method(v2Negate,java.awt.geom.Point2D$Double,Private,Y,N);
Method(v2Dot,double,Private,Y,N);
Method(v2Normalize,java.awt.geom.Point2D$Double,Private,Y,N);
Method(v2SubII,java.awt.geom.Point2D$Double,Private,Y,N);
Method(b0,double,Private,Y,N);
Method(b1,double,Private,Y,N);
Method(b2,double,Private,Y,N);
Method(b3,double,Private,Y,N);
Parameter(main,java.lang.String[],);
Parameter(fitBezierPath,java.awt.geom.Point2D$Double[],);
Parameter(fitBezierPath,double,);
Parameter(fitBezierPath$2,java.util.List,java.awt.geom.Point2D$Double);
Parameter(fitBezierPath$2,double,);
Parameter(fitBezierPath$3,org.jhotdraw.geom.BezierPath,);
Parameter(fitBezierPath$3,double,);
Parameter(removeClosePoints,java.util.List,java.awt.geom.Point2D$Double;>;D)Ljava.util.ArrayList<Ljava.awt.geom.Point2D$Double);
Parameter(removeClosePoints,double,);
Parameter(removeCoincidentPoints,java.util.List,java.awt.geom.Point2D$Double;>;)Ljava.util.ArrayList<Ljava.awt.geom.Point2D$Double);
Parameter(splitAtCorners,java.util.List,java.awt.geom.Point2D$Double;>;DD)Ljava.util.ArrayList<Ljava.util.ArrayList<Ljava.awt.geom.Point2D$Double;>);
Parameter(splitAtCorners,double,);
Parameter(splitAtCorners,double,);
Parameter(findCorners,java.util.List,java.awt.geom.Point2D$Double;>;DD)Ljava.util.ArrayList<Ljava.lang.Integer);
Parameter(findCorners,double,);
Parameter(findCorners,double,);
Parameter(reduceNoise,java.util.List,java.awt.geom.Point2D$Double;>;D)Ljava.util.ArrayList<Ljava.awt.geom.Point2D$Double);
Parameter(reduceNoise,double,);
Parameter(fitCubic,java.util.ArrayList,java.awt.geom.Point2D$Double);
Parameter(fitCubic,int,);
Parameter(fitCubic,int,);
Parameter(fitCubic,java.awt.geom.Point2D$Double,);
Parameter(fitCubic,java.awt.geom.Point2D$Double,);
Parameter(fitCubic,double,);
Parameter(fitCubic,org.jhotdraw.geom.BezierPath,);
Parameter(addCurveTo,java.awt.geom.Point2D$Double[],);
Parameter(addCurveTo,org.jhotdraw.geom.BezierPath,);
Parameter(addCurveTo,double,);
Parameter(addCurveTo,boolean,);
Parameter(computeLeftTangent,java.util.ArrayList,java.awt.geom.Point2D$Double);
Parameter(computeLeftTangent,int,);
Parameter(computeRightTangent,java.util.ArrayList,java.awt.geom.Point2D$Double);
Parameter(computeRightTangent,int,);
Parameter(computeCenterTangent,java.util.ArrayList,java.awt.geom.Point2D$Double);
Parameter(computeCenterTangent,int,);
Parameter(chordLengthParameterize,java.util.ArrayList,java.awt.geom.Point2D$Double);
Parameter(chordLengthParameterize,int,);
Parameter(chordLengthParameterize,int,);
Parameter(reparameterize,java.util.ArrayList,java.awt.geom.Point2D$Double);
Parameter(reparameterize,int,);
Parameter(reparameterize,int,);
Parameter(reparameterize,double[],);
Parameter(reparameterize,java.awt.geom.Point2D$Double[],);
Parameter(newtonRaphsonRootFind,java.awt.geom.Point2D$Double[],);
Parameter(newtonRaphsonRootFind,java.awt.geom.Point2D$Double,);
Parameter(newtonRaphsonRootFind,double,);
Parameter(computeMaxError,java.util.ArrayList,java.awt.geom.Point2D$Double);
Parameter(computeMaxError,int,);
Parameter(computeMaxError,int,);
Parameter(computeMaxError,java.awt.geom.Point2D$Double[],);
Parameter(computeMaxError,double[],);
Parameter(computeMaxError,int[],);
Parameter(generateBezier,java.util.ArrayList,java.awt.geom.Point2D$Double);
Parameter(generateBezier,int,);
Parameter(generateBezier,int,);
Parameter(generateBezier,double[],);
Parameter(generateBezier,java.awt.geom.Point2D$Double,);
Parameter(generateBezier,java.awt.geom.Point2D$Double,);
Parameter(bezierII,int,);
Parameter(bezierII,java.awt.geom.Point2D$Double[],);
Parameter(bezierII,double,);
Parameter(v2DistanceBetween2Points,java.awt.geom.Point2D$Double,);
Parameter(v2DistanceBetween2Points,java.awt.geom.Point2D$Double,);
Parameter(v2SquaredDistanceBetween2Points,java.awt.geom.Point2D$Double,);
Parameter(v2SquaredDistanceBetween2Points,java.awt.geom.Point2D$Double,);
Parameter(v2Scale,java.awt.geom.Point2D$Double,);
Parameter(v2Scale,double,);
Parameter(v2ScaleIII,java.awt.geom.Point2D$Double,);
Parameter(v2ScaleIII,double,);
Parameter(v2Length,java.awt.geom.Point2D$Double,);
Parameter(v2SquaredLength,java.awt.geom.Point2D$Double,);
Parameter(v2Add,java.awt.geom.Point2D$Double,);
Parameter(v2Add,java.awt.geom.Point2D$Double,);
Parameter(v2Add,java.awt.geom.Point2D$Double,);
Parameter(v2AddII,java.awt.geom.Point2D$Double,);
Parameter(v2AddII,java.awt.geom.Point2D$Double,);
Parameter(v2Negate,java.awt.geom.Point2D$Double,);
Parameter(v2Dot,java.awt.geom.Point2D$Double,);
Parameter(v2Dot,java.awt.geom.Point2D$Double,);
Parameter(v2Normalize,java.awt.geom.Point2D$Double,);
Parameter(v2SubII,java.awt.geom.Point2D$Double,);
Parameter(v2SubII,java.awt.geom.Point2D$Double,);
Parameter(b0,double,);
Parameter(b1,double,);
Parameter(b2,double,);
Parameter(b3,double,);
Call(METHOD,org.jhotdraw.geom.Bezier,main --> splitAtCorners,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,main --> reduceNoise,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,fitBezierPath --> fitBezierPath$2,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,fitBezierPath$2 --> splitAtCorners,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,fitBezierPath$2 --> removeClosePoints,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,fitBezierPath$2 --> reduceNoise,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,fitBezierPath$2 --> computeLeftTangent,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,fitBezierPath$2 --> computeRightTangent,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,fitBezierPath$2 --> fitCubic,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,fitBezierPath$3 --> fitBezierPath$2,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,removeClosePoints --> removeCoincidentPoints,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,removeClosePoints --> v2SquaredDistanceBetween2Points,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,splitAtCorners --> findCorners,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,findCorners --> v2SquaredDistanceBetween2Points,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,fitCubic --> v2DistanceBetween2Points,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,fitCubic --> v2Scale,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,fitCubic --> v2Add,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,fitCubic --> chordLengthParameterize,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,fitCubic --> generateBezier,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,fitCubic --> computeMaxError,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,fitCubic --> addCurveTo,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,fitCubic --> reparameterize,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,fitCubic --> computeCenterTangent,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,fitCubic --> fitCubic,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,fitCubic --> v2Negate,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,computeLeftTangent --> v2SubII,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,computeLeftTangent --> v2Normalize,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,computeRightTangent --> v2SubII,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,computeRightTangent --> v2Normalize,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,computeCenterTangent --> v2SubII,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,computeCenterTangent --> v2Normalize,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,chordLengthParameterize --> v2DistanceBetween2Points,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,reparameterize --> newtonRaphsonRootFind,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,newtonRaphsonRootFind --> bezierII,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,computeMaxError --> bezierII,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,computeMaxError --> v2SubII,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,computeMaxError --> v2SquaredLength,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,generateBezier --> v2DistanceBetween2Points,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,generateBezier --> v2Scale,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,generateBezier --> v2Add,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,v2DistanceBetween2Points --> v2SquaredDistanceBetween2Points,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,v2Scale --> v2Length,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,v2Length --> v2SquaredLength,org.jhotdraw.geom.Bezier,);
Call(METHOD,org.jhotdraw.geom.Bezier,v2Normalize --> v2Length,org.jhotdraw.geom.Bezier,);
Call(ATTRIBUTE,org.jhotdraw.geom.Bezier,fitBezierPath$3 --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.Bezier,fitBezierPath$3 --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.Bezier,addCurveTo --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.Bezier,addCurveTo --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(METHOD,org.jhotdraw.geom.Bezier,fitBezierPath$2 --> <init>,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.Bezier,fitBezierPath$2 --> <init>$3,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.geom.Bezier,fitBezierPath$2 --> lineTo,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.Bezier,fitCubic --> curveTo,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.Bezier,fitCubic --> lineTo,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.Bezier,addCurveTo --> lineContainsPoint$3,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.geom.Bezier,addCurveTo --> lineTo,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.Bezier,addCurveTo --> curveTo,org.jhotdraw.geom.BezierPath,);
EndClass 189
StartClass 190
Class(org.jhotdraw.draw.tool.BezierTool$1,N,N,NA);
Attribute(val$addedDrawing,org.jhotdraw.draw.Drawing,Public,N,Y,);
Attribute(val$addedFigure,org.jhotdraw.draw.Figure,Public,N,Y,);
Attribute(val$addedView,org.jhotdraw.draw.DrawingView,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.tool.BezierTool,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.tool.BezierTool,);
Parameter(<init>,org.jhotdraw.draw.Drawing,);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(<init>,org.jhotdraw.draw.DrawingView,);
Composition(org.jhotdraw.draw.Drawing);
Composition(org.jhotdraw.draw.Figure);
Composition(org.jhotdraw.draw.DrawingView);
Composition(org.jhotdraw.draw.tool.BezierTool);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool$1,<init> --> this$0,org.jhotdraw.draw.tool.BezierTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool$1,<init> --> val$addedDrawing,org.jhotdraw.draw.tool.BezierTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool$1,<init> --> val$addedFigure,org.jhotdraw.draw.tool.BezierTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool$1,<init> --> val$addedView,org.jhotdraw.draw.tool.BezierTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool$1,getPresentationName --> this$0,org.jhotdraw.draw.tool.BezierTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool$1,undo --> val$addedDrawing,org.jhotdraw.draw.tool.BezierTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool$1,undo --> val$addedFigure,org.jhotdraw.draw.tool.BezierTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool$1,redo --> val$addedView,org.jhotdraw.draw.tool.BezierTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool$1,redo --> val$addedDrawing,org.jhotdraw.draw.tool.BezierTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.BezierTool$1,redo --> val$addedFigure,org.jhotdraw.draw.tool.BezierTool$1,READ);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool$1,getPresentationName --> access$000,org.jhotdraw.draw.tool.BezierTool,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool$1,undo --> remove,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool$1,redo --> clearSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool$1,redo --> add,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.BezierTool$1,redo --> addToSelection,org.jhotdraw.draw.DrawingView,);
EndClass 190
StartClass 191
Class(org.jhotdraw.draw.text.FloatingTextField,N,N,Public);
Attribute(editedFigure,org.jhotdraw.draw.TextHolderFigure,Private,N,N,);
Attribute(textField,javax.swing.JTextField,Private,N,N,);
Attribute(view,org.jhotdraw.draw.DrawingView,Private,N,N,);
Attribute(figureHandler,org.jhotdraw.draw.event.FigureListener,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(requestFocus,void,Public,N,N);
Method(createOverlay,void,Public,N,N);
Method(updateWidget,void,Protected,N,N);
Method(getInsets,java.awt.Insets,Public,N,N);
Method(addActionListener,void,Public,N,N);
Method(removeActionListener,void,Public,N,N);
Method(getText,java.lang.String,Public,N,N);
Method(getPreferredSize,java.awt.Dimension,Public,N,N);
Method(endOverlay,void,Public,N,N);
Parameter(createOverlay,org.jhotdraw.draw.DrawingView,);
Parameter(createOverlay,org.jhotdraw.draw.TextHolderFigure,);
Parameter(addActionListener,java.awt.event.ActionListener,);
Parameter(removeActionListener,java.awt.event.ActionListener,);
Parameter(getPreferredSize,int,);
Composition(org.jhotdraw.draw.TextHolderFigure);
Composition(org.jhotdraw.draw.DrawingView);
Composition(org.jhotdraw.draw.event.FigureListener);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextField,createOverlay --> updateWidget,org.jhotdraw.draw.text.FloatingTextField,);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextField,<init> --> figureHandler,org.jhotdraw.draw.text.FloatingTextField,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextField,<init> --> textField,org.jhotdraw.draw.text.FloatingTextField,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextField,requestFocus --> textField,org.jhotdraw.draw.text.FloatingTextField,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextField,createOverlay --> textField,org.jhotdraw.draw.text.FloatingTextField,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextField,createOverlay --> editedFigure,org.jhotdraw.draw.text.FloatingTextField,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextField,createOverlay --> figureHandler,org.jhotdraw.draw.text.FloatingTextField,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextField,createOverlay --> editedFigure,org.jhotdraw.draw.text.FloatingTextField,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextField,createOverlay --> view,org.jhotdraw.draw.text.FloatingTextField,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextField,updateWidget --> editedFigure,org.jhotdraw.draw.text.FloatingTextField,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextField,updateWidget --> view,org.jhotdraw.draw.text.FloatingTextField,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextField,updateWidget --> textField,org.jhotdraw.draw.text.FloatingTextField,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextField,getInsets --> textField,org.jhotdraw.draw.text.FloatingTextField,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextField,addActionListener --> textField,org.jhotdraw.draw.text.FloatingTextField,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextField,removeActionListener --> textField,org.jhotdraw.draw.text.FloatingTextField,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextField,getText --> textField,org.jhotdraw.draw.text.FloatingTextField,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextField,getPreferredSize --> textField,org.jhotdraw.draw.text.FloatingTextField,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextField,endOverlay --> view,org.jhotdraw.draw.text.FloatingTextField,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextField,endOverlay --> textField,org.jhotdraw.draw.text.FloatingTextField,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextField,endOverlay --> editedFigure,org.jhotdraw.draw.text.FloatingTextField,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextField,endOverlay --> figureHandler,org.jhotdraw.draw.text.FloatingTextField,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextField,endOverlay --> editedFigure,org.jhotdraw.draw.text.FloatingTextField,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextField,updateWidget --> TRANSFORM,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextField,<init> --> <init>,org.jhotdraw.draw.text.FloatingTextField$1,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextField,createOverlay --> getComponent,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextField,createOverlay --> getText,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextField,createOverlay --> getTextColumns,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextField,createOverlay --> addFigureListener,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextField,updateWidget --> getFont,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextField,updateWidget --> getFontSize,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextField,updateWidget --> getScaleFactor,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextField,updateWidget --> getTextColor,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextField,updateWidget --> getFillColor,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextField,updateWidget --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextField,updateWidget --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextField,updateWidget --> drawingToView,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextField,updateWidget --> drawingToView$2,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextField,updateWidget --> getBaseline,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextField,endOverlay --> getComponent,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextField,endOverlay --> removeFigureListener,org.jhotdraw.draw.Figure,);
EndClass 191
StartClass 192
Class(org.jhotdraw.draw.tool.TextCreationTool$1,N,N,NA);
Attribute(val$editedFigure,org.jhotdraw.draw.TextHolderFigure,Public,N,Y,);
Attribute(val$oldText,java.lang.String,Public,N,Y,);
Attribute(val$newText,java.lang.String,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.tool.TextCreationTool,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.tool.TextCreationTool,);
Parameter(<init>,org.jhotdraw.draw.TextHolderFigure,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.String,);
Composition(org.jhotdraw.draw.TextHolderFigure);
Composition(org.jhotdraw.draw.tool.TextCreationTool);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextCreationTool$1,<init> --> this$0,org.jhotdraw.draw.tool.TextCreationTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextCreationTool$1,<init> --> val$editedFigure,org.jhotdraw.draw.tool.TextCreationTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextCreationTool$1,<init> --> val$oldText,org.jhotdraw.draw.tool.TextCreationTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextCreationTool$1,<init> --> val$newText,org.jhotdraw.draw.tool.TextCreationTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextCreationTool$1,undo --> val$editedFigure,org.jhotdraw.draw.tool.TextCreationTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextCreationTool$1,undo --> val$oldText,org.jhotdraw.draw.tool.TextCreationTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextCreationTool$1,redo --> val$editedFigure,org.jhotdraw.draw.tool.TextCreationTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextCreationTool$1,redo --> val$newText,org.jhotdraw.draw.tool.TextCreationTool$1,READ);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool$1,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool$1,getPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool$1,undo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool$1,undo --> setText,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool$1,undo --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool$1,redo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool$1,redo --> setText,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.tool.TextCreationTool$1,redo --> changed,org.jhotdraw.draw.Figure,);
EndClass 192
StartClass 193
Class(org.jhotdraw.draw.connector.ChopDiamondConnector,N,N,Public);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(chop,java.awt.geom.Point2D$Double,Protected,N,N);
Parameter(<init>$2,org.jhotdraw.draw.Figure,);
Parameter(chop,org.jhotdraw.draw.Figure,);
Parameter(chop,java.awt.geom.Point2D$Double,);
SuperClass(org.jhotdraw.draw.connector.ChopRectangleConnector);
SuperClass(org.jhotdraw.draw.connector.AbstractConnector);
Generalization(org.jhotdraw.draw.connector.ChopRectangleConnector);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopDiamondConnector,chop --> IS_QUADRATIC,org.jhotdraw.draw.DiamondFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopDiamondConnector,chop --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,org.jhotdraw.draw.connector.ChopDiamondConnector$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopDiamondConnector,chop --> STROKE_PLACEMENT,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.connector.ChopDiamondConnector,<init> --> <init>,org.jhotdraw.draw.connector.ChopRectangleConnector,);
Call(METHOD,org.jhotdraw.draw.connector.ChopDiamondConnector,<init>$2 --> <init>$2,org.jhotdraw.draw.connector.ChopRectangleConnector,);
Call(METHOD,org.jhotdraw.draw.connector.ChopDiamondConnector,chop --> getConnectorTarget,org.jhotdraw.draw.connector.AbstractConnector,);
Call(METHOD,org.jhotdraw.draw.connector.ChopDiamondConnector,chop --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopDiamondConnector,chop --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopDiamondConnector,chop --> getStrokeTotalWidth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.connector.ChopDiamondConnector,chop --> grow,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.connector.ChopDiamondConnector,chop --> pointToAngle$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.connector.ChopDiamondConnector,chop --> intersect$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.connector.ChopDiamondConnector,chop --> angleToPoint$2,org.jhotdraw.geom.Geom,);
EndClass 193
StartClass 194
Class(org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler,N,N,NA);
Attribute(owner,org.jhotdraw.draw.LineConnectionFigure,Private,N,N,);
Method(<init>,void,Private,N,N);
Method(figureRemoved,void,Public,N,N);
Method(figureChanged,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.LineConnectionFigure,);
Parameter(figureRemoved,org.jhotdraw.draw.event.FigureEvent,);
Parameter(figureChanged,org.jhotdraw.draw.event.FigureEvent,);
Parameter(<init>$2,org.jhotdraw.draw.LineConnectionFigure,);
Parameter(<init>$2,org.jhotdraw.draw.LineConnectionFigure$1,);
SuperClass(org.jhotdraw.draw.event.FigureAdapter);
Generalization(org.jhotdraw.draw.event.FigureAdapter);
Composition(org.jhotdraw.draw.LineConnectionFigure);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler,<init>$2 --> <init>,org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler,);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler,<init> --> owner,org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler,figureRemoved --> owner,org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler,figureChanged --> owner,org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler,READ);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler,<init> --> <init>,org.jhotdraw.draw.event.FigureAdapter,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler,figureRemoved --> fireFigureRequestRemove,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler,figureChanged --> isChanging,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler,figureChanged --> getStartFigure,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler,figureChanged --> getEndFigure,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler,figureChanged --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler,figureChanged --> updateConnection,org.jhotdraw.draw.LineConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler,figureChanged --> changed,org.jhotdraw.draw.AbstractFigure,);
EndClass 194
StartClass 195
Class(org.jhotdraw.draw.handle.BezierNodeHandle,N,N,Public);
Attribute(index,int,Protected,N,N,);
Attribute(edit,org.jhotdraw.undo.CompositeEdit,Private,N,N,);
Attribute(oldNode,org.jhotdraw.geom.BezierPath$Node,Private,N,N,);
Attribute(transformOwner,org.jhotdraw.draw.Figure,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(dispose,void,Public,N,N);
Method(draw,void,Public,N,N);
Method(getOwner,org.jhotdraw.draw.BezierFigure,Public,N,N);
Method(getLocation,java.awt.Point,Protected,N,N);
Method(getBezierNode,org.jhotdraw.geom.BezierPath$Node,Protected,N,N);
Method(basicGetBounds,java.awt.Rectangle,Protected,N,N);
Method(getTransformOwner,org.jhotdraw.draw.Figure,Protected,N,N);
Method(trackStart,void,Public,N,N);
Method(trackStep,void,Public,N,N);
Method(fireAreaInvalidated,void,Private,N,N);
Method(trackEnd,void,Public,N,N);
Method(isCombinableWith,boolean,Public,N,N);
Method(trackDoubleClick,void,Public,N,N);
Method(createSecondaryHandles,java.util.Collection,Public,N,N);
Method(getToolTipText,java.lang.String,Public,N,N);
Method(keyPressed,void,Public,N,N);
Method(getOwner$2,org.jhotdraw.draw.Figure,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.BezierFigure,);
Parameter(<init>,int,);
Parameter(<init>$2,org.jhotdraw.draw.BezierFigure,);
Parameter(<init>$2,int,);
Parameter(<init>$2,org.jhotdraw.draw.Figure,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(trackStart,java.awt.Point,);
Parameter(trackStart,int,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,int,);
Parameter(fireAreaInvalidated,org.jhotdraw.geom.BezierPath$Node,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,int,);
Parameter(isCombinableWith,org.jhotdraw.draw.handle.Handle,);
Parameter(trackDoubleClick,java.awt.Point,);
Parameter(trackDoubleClick,int,);
Parameter(getToolTipText,java.awt.Point,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.AbstractHandle);
Composition(org.jhotdraw.undo.CompositeEdit);
Composition(org.jhotdraw.geom.BezierPath$Node);
Composition(org.jhotdraw.draw.Figure);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,<init> --> <init>$2,org.jhotdraw.draw.handle.BezierNodeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,draw --> getOwner,org.jhotdraw.draw.handle.BezierNodeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,getLocation --> getOwner,org.jhotdraw.draw.handle.BezierNodeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,getLocation --> getTransformOwner,org.jhotdraw.draw.handle.BezierNodeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,getBezierNode --> getOwner,org.jhotdraw.draw.handle.BezierNodeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,basicGetBounds --> getLocation,org.jhotdraw.draw.handle.BezierNodeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackStart --> getOwner,org.jhotdraw.draw.handle.BezierNodeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackStep --> getOwner,org.jhotdraw.draw.handle.BezierNodeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackStep --> getTransformOwner,org.jhotdraw.draw.handle.BezierNodeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackEnd --> getOwner,org.jhotdraw.draw.handle.BezierNodeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackDoubleClick --> getOwner,org.jhotdraw.draw.handle.BezierNodeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,createSecondaryHandles --> getOwner,org.jhotdraw.draw.handle.BezierNodeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,createSecondaryHandles --> getTransformOwner,org.jhotdraw.draw.handle.BezierNodeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,getToolTipText --> getBezierNode,org.jhotdraw.draw.handle.BezierNodeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,keyPressed --> getOwner,org.jhotdraw.draw.handle.BezierNodeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,getOwner$2 --> getOwner,org.jhotdraw.draw.handle.BezierNodeHandle,);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,<init>$2 --> index,org.jhotdraw.draw.handle.BezierNodeHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,<init>$2 --> transformOwner,org.jhotdraw.draw.handle.BezierNodeHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,dispose --> transformOwner,org.jhotdraw.draw.handle.BezierNodeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,dispose --> transformOwner,org.jhotdraw.draw.handle.BezierNodeHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,draw --> index,org.jhotdraw.draw.handle.BezierNodeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,getLocation --> index,org.jhotdraw.draw.handle.BezierNodeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,getBezierNode --> index,org.jhotdraw.draw.handle.BezierNodeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,getTransformOwner --> transformOwner,org.jhotdraw.draw.handle.BezierNodeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,trackStart --> index,org.jhotdraw.draw.handle.BezierNodeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,trackStart --> edit,org.jhotdraw.draw.handle.BezierNodeHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,trackStart --> oldNode,org.jhotdraw.draw.handle.BezierNodeHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,trackStep --> index,org.jhotdraw.draw.handle.BezierNodeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,trackEnd --> oldNode,org.jhotdraw.draw.handle.BezierNodeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,trackEnd --> index,org.jhotdraw.draw.handle.BezierNodeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,trackEnd --> edit,org.jhotdraw.draw.handle.BezierNodeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,trackDoubleClick --> index,org.jhotdraw.draw.handle.BezierNodeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,createSecondaryHandles --> index,org.jhotdraw.draw.handle.BezierNodeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,keyPressed --> index,org.jhotdraw.draw.handle.BezierNodeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,keyPressed --> oldNode,org.jhotdraw.draw.handle.BezierNodeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,keyPressed --> oldNode,org.jhotdraw.draw.handle.BezierNodeHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,draw --> BEZIER_NODE_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,draw --> BEZIER_NODE_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,draw --> BEZIER_NODE_HANDLE_FILL_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,draw --> BEZIER_NODE_HANDLE_STROKE_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,draw --> mask,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,getLocation --> TRANSFORM,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,getLocation --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,trackStart --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,trackStep --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,trackStep --> TRANSFORM,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,fireAreaInvalidated --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,fireAreaInvalidated --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,fireAreaInvalidated --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,trackEnd --> mask,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,trackEnd --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,trackEnd --> mask,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,createSecondaryHandles --> mask,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,keyPressed --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,keyPressed --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle,keyPressed --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,<init>$2 --> <init>,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,<init>$2 --> addFigureListener,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,dispose --> dispose,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,dispose --> removeFigureListener,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,draw --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,draw --> isClosed,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,draw --> getEditor,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,draw --> getTool,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,draw --> supportsHandleInteraction,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,draw --> getHandleAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,draw --> getNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,draw --> drawRectangle,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,draw --> drawDiamond,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,draw --> drawCircle,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,getOwner --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,getLocation --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,getLocation --> getPoint$2,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,getLocation --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,getLocation --> drawingToView,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,getBezierNode --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,getBezierNode --> getNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,basicGetBounds --> getHandlesize,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackStart --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackStart --> <init>$3,org.jhotdraw.undo.CompositeEdit,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackStart --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackStart --> getNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackStart --> fireHandleRequestSecondaryHandles,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackStep --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackStep --> getConstrainer,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackStep --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackStep --> constrainPoint,org.jhotdraw.draw.Constrainer,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackStep --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackStep --> getNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackStep --> moveTo,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackStep --> setNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackStep --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,fireAreaInvalidated --> drawingToView$2,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,fireAreaInvalidated --> getHandlesize,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,fireAreaInvalidated --> fireAreaInvalidated,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackEnd --> clone,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackEnd --> getNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackEnd --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackEnd --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackEnd --> isClosed,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackEnd --> setNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackEnd --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackEnd --> fireHandleRequestSecondaryHandles,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackEnd --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackEnd --> <init>,org.jhotdraw.draw.handle.BezierNodeHandle$1,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackEnd --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackDoubleClick --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackDoubleClick --> getDrawingArea,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackDoubleClick --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackDoubleClick --> removeNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackDoubleClick --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackDoubleClick --> fireHandleRequestRemove,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackDoubleClick --> <init>,org.jhotdraw.draw.handle.BezierNodeHandle$2,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,trackDoubleClick --> fireUndoableEditHappened,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,createSecondaryHandles --> getNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,createSecondaryHandles --> isClosed,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,createSecondaryHandles --> <init>$2,org.jhotdraw.draw.handle.BezierControlPointHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,createSecondaryHandles --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,getToolTipText --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,getToolTipText --> getMask,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,getToolTipText --> getFormatted,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,keyPressed --> getNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,keyPressed --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,keyPressed --> setPoint,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,keyPressed --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,keyPressed --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,keyPressed --> <init>,org.jhotdraw.draw.event.BezierNodeEdit,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,keyPressed --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,keyPressed --> getDrawingArea,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,keyPressed --> removeNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,keyPressed --> fireHandleRequestRemove,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,keyPressed --> <init>,org.jhotdraw.draw.handle.BezierNodeHandle$3,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle,keyPressed --> fireUndoableEditHappened,org.jhotdraw.draw.handle.AbstractHandle,);
EndClass 195
StartClass 196
Class(org.jhotdraw.draw.LineConnectionFigure$1,N,N,NA);
Attribute(val$index,int,Public,N,Y,);
Attribute(val$newNode,org.jhotdraw.geom.BezierPath$Node,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.LineConnectionFigure,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(redo,void,Public,N,N);
Method(undo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.LineConnectionFigure,);
Parameter(<init>,int,);
Parameter(<init>,org.jhotdraw.geom.BezierPath$Node,);
Composition(org.jhotdraw.geom.BezierPath$Node);
Composition(org.jhotdraw.draw.LineConnectionFigure);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure$1,<init> --> this$0,org.jhotdraw.draw.LineConnectionFigure$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure$1,<init> --> val$index,org.jhotdraw.draw.LineConnectionFigure$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure$1,<init> --> val$newNode,org.jhotdraw.draw.LineConnectionFigure$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure$1,redo --> this$0,org.jhotdraw.draw.LineConnectionFigure$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure$1,redo --> val$index,org.jhotdraw.draw.LineConnectionFigure$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure$1,redo --> val$newNode,org.jhotdraw.draw.LineConnectionFigure$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure$1,undo --> this$0,org.jhotdraw.draw.LineConnectionFigure$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineConnectionFigure$1,undo --> val$index,org.jhotdraw.draw.LineConnectionFigure$1,READ);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure$1,redo --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure$1,redo --> addNode$2,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure$1,redo --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure$1,undo --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure$1,undo --> removeNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.LineConnectionFigure$1,undo --> changed,org.jhotdraw.draw.AbstractFigure,);
EndClass 196
StartClass 197
Class(org.jhotdraw.draw.handle.BezierOutlineHandle,N,N,Public);
Attribute(isHoverHandle,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getOwner,org.jhotdraw.draw.BezierFigure,Public,N,N);
Method(basicGetBounds,java.awt.Rectangle,Protected,N,N);
Method(contains,boolean,Public,N,N);
Method(trackStart,void,Public,N,N);
Method(trackStep,void,Public,N,N);
Method(trackEnd,void,Public,N,N);
Method(draw,void,Public,N,N);
Method(getOwner$2,org.jhotdraw.draw.Figure,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.BezierFigure,);
Parameter(<init>$2,org.jhotdraw.draw.BezierFigure,);
Parameter(<init>$2,boolean,);
Parameter(contains,java.awt.Point,);
Parameter(trackStart,java.awt.Point,);
Parameter(trackStart,int,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,int,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,int,);
Parameter(draw,java.awt.Graphics2D,);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.AbstractHandle);
Call(METHOD,org.jhotdraw.draw.handle.BezierOutlineHandle,<init> --> <init>$2,org.jhotdraw.draw.handle.BezierOutlineHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierOutlineHandle,basicGetBounds --> getOwner,org.jhotdraw.draw.handle.BezierOutlineHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierOutlineHandle,draw --> getOwner,org.jhotdraw.draw.handle.BezierOutlineHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierOutlineHandle,getOwner$2 --> getOwner,org.jhotdraw.draw.handle.BezierOutlineHandle,);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierOutlineHandle,<init>$2 --> isHoverHandle,org.jhotdraw.draw.handle.BezierOutlineHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierOutlineHandle,draw --> isHoverHandle,org.jhotdraw.draw.handle.BezierOutlineHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierOutlineHandle,basicGetBounds --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierOutlineHandle,draw --> TRANSFORM,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierOutlineHandle,draw --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierOutlineHandle,draw --> BEZIER_PATH_STROKE_1_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierOutlineHandle,draw --> BEZIER_PATH_COLOR_1_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierOutlineHandle,draw --> BEZIER_PATH_STROKE_2_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierOutlineHandle,draw --> BEZIER_PATH_COLOR_2_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierOutlineHandle,draw --> BEZIER_PATH_STROKE_1,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierOutlineHandle,draw --> BEZIER_PATH_COLOR_1,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierOutlineHandle,draw --> BEZIER_PATH_STROKE_2,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierOutlineHandle,draw --> BEZIER_PATH_COLOR_2,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierOutlineHandle,draw --> BEZIER_PATH_STROKE_1_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierOutlineHandle,draw --> BEZIER_PATH_COLOR_1_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierOutlineHandle,draw --> BEZIER_PATH_STROKE_2_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierOutlineHandle,draw --> BEZIER_PATH_COLOR_2_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.handle.BezierOutlineHandle,<init>$2 --> <init>,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierOutlineHandle,getOwner --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierOutlineHandle,basicGetBounds --> getDrawingArea,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierOutlineHandle,basicGetBounds --> drawingToView$2,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierOutlineHandle,draw --> getBezierPath,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierOutlineHandle,draw --> get,org.jhotdraw.draw.AbstractAttributedFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierOutlineHandle,draw --> getDrawingToViewTransform,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierOutlineHandle,draw --> getEditor,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierOutlineHandle,draw --> getTool,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.handle.BezierOutlineHandle,draw --> supportsHandleInteraction,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.handle.BezierOutlineHandle,draw --> getHandleAttribute,org.jhotdraw.draw.DrawingEditor,);
EndClass 197
StartClass 198
Class(org.jhotdraw.draw.event.FigureListener,Y,Y,Public);
Method(areaInvalidated,void,Public,N,Y);
Method(attributeChanged,void,Public,N,Y);
Method(figureHandlesChanged,void,Public,N,Y);
Method(figureChanged,void,Public,N,Y);
Method(figureAdded,void,Public,N,Y);
Method(figureRemoved,void,Public,N,Y);
Method(figureRequestRemove,void,Public,N,Y);
Parameter(areaInvalidated,org.jhotdraw.draw.event.FigureEvent,);
Parameter(attributeChanged,org.jhotdraw.draw.event.FigureEvent,);
Parameter(figureHandlesChanged,org.jhotdraw.draw.event.FigureEvent,);
Parameter(figureChanged,org.jhotdraw.draw.event.FigureEvent,);
Parameter(figureAdded,org.jhotdraw.draw.event.FigureEvent,);
Parameter(figureRemoved,org.jhotdraw.draw.event.FigureEvent,);
Parameter(figureRequestRemove,org.jhotdraw.draw.event.FigureEvent,);
EndClass 198
StartClass 199
Class(org.jhotdraw.draw.handle.ConnectionEndHandle,N,N,Public);
Method(<init>,void,Public,N,N);
Method(connect,void,Protected,N,N);
Method(disconnect,void,Protected,N,N);
Method(getTarget,org.jhotdraw.draw.connector.Connector,Protected,N,N);
Method(setLocation,void,Protected,N,N);
Method(getLocation,java.awt.geom.Point2D$Double,Protected,N,N);
Method(canConnect,boolean,Protected,N,N);
Method(getBezierNodeIndex,int,Protected,N,N);
Parameter(<init>,org.jhotdraw.draw.ConnectionFigure,);
Parameter(connect,org.jhotdraw.draw.connector.Connector,);
Parameter(setLocation,java.awt.geom.Point2D$Double,);
Parameter(canConnect,org.jhotdraw.draw.connector.Connector,);
Parameter(canConnect,org.jhotdraw.draw.connector.Connector,);
SuperClass(org.jhotdraw.draw.handle.AbstractConnectionHandle);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.AbstractConnectionHandle);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionEndHandle,<init> --> <init>,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionEndHandle,connect --> getOwner,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionEndHandle,connect --> setEndConnector,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionEndHandle,disconnect --> getOwner,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionEndHandle,disconnect --> setEndConnector,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionEndHandle,getTarget --> getOwner,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionEndHandle,getTarget --> getEndConnector,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionEndHandle,setLocation --> getOwner,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionEndHandle,setLocation --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionEndHandle,setLocation --> setEndPoint,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionEndHandle,setLocation --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionEndHandle,getLocation --> getOwner,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionEndHandle,getLocation --> getEndPoint,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionEndHandle,canConnect --> getOwner,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionEndHandle,canConnect --> canConnect,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionEndHandle,getBezierNodeIndex --> getBezierFigure,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionEndHandle,getBezierNodeIndex --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
EndClass 199
StartClass 200
Class(org.jhotdraw.draw.handle.ConnectionStartHandle,N,N,Public);
Method(<init>,void,Public,N,N);
Method(connect,void,Protected,N,N);
Method(disconnect,void,Protected,N,N);
Method(getTarget,org.jhotdraw.draw.connector.Connector,Protected,N,N);
Method(setLocation,void,Protected,N,N);
Method(getLocation,java.awt.geom.Point2D$Double,Protected,N,N);
Method(canConnect,boolean,Protected,N,N);
Method(getBezierNodeIndex,int,Protected,N,N);
Parameter(<init>,org.jhotdraw.draw.ConnectionFigure,);
Parameter(connect,org.jhotdraw.draw.connector.Connector,);
Parameter(setLocation,java.awt.geom.Point2D$Double,);
Parameter(canConnect,org.jhotdraw.draw.connector.Connector,);
Parameter(canConnect,org.jhotdraw.draw.connector.Connector,);
SuperClass(org.jhotdraw.draw.handle.AbstractConnectionHandle);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.AbstractConnectionHandle);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionStartHandle,<init> --> <init>,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionStartHandle,connect --> getOwner,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionStartHandle,connect --> setStartConnector,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionStartHandle,disconnect --> getOwner,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionStartHandle,disconnect --> setStartConnector,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionStartHandle,getTarget --> getOwner,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionStartHandle,getTarget --> getStartConnector,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionStartHandle,setLocation --> getOwner,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionStartHandle,setLocation --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionStartHandle,setLocation --> setStartPoint,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionStartHandle,setLocation --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionStartHandle,getLocation --> getOwner,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionStartHandle,getLocation --> getStartPoint,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionStartHandle,canConnect --> getOwner,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ConnectionStartHandle,canConnect --> canConnect,org.jhotdraw.draw.ConnectionFigure,);
EndClass 200
StartClass 201
Class(org.jhotdraw.draw.handle.BoundsOutlineHandle,N,N,Public);
Attribute(stroke1Enabled,org.jhotdraw.draw.AttributeKey,Private,N,N,java.awt.Stroke);
Attribute(stroke2Enabled,org.jhotdraw.draw.AttributeKey,Private,N,N,java.awt.Stroke);
Attribute(stroke1Disabled,org.jhotdraw.draw.AttributeKey,Private,N,N,java.awt.Stroke);
Attribute(stroke2Disabled,org.jhotdraw.draw.AttributeKey,Private,N,N,java.awt.Stroke);
Attribute(strokeColor1Enabled,org.jhotdraw.draw.AttributeKey,Private,N,N,java.awt.Color);
Attribute(strokeColor2Enabled,org.jhotdraw.draw.AttributeKey,Private,N,N,java.awt.Color);
Attribute(strokeColor1Disabled,org.jhotdraw.draw.AttributeKey,Private,N,N,java.awt.Color);
Attribute(strokeColor2Disabled,org.jhotdraw.draw.AttributeKey,Private,N,N,java.awt.Color);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(basicGetBounds,java.awt.Rectangle,Protected,N,N);
Method(contains,boolean,Public,N,N);
Method(trackStart,void,Public,N,N);
Method(trackStep,void,Public,N,N);
Method(trackEnd,void,Public,N,N);
Method(draw,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(<init>$2,org.jhotdraw.draw.Figure,);
Parameter(<init>$2,boolean,);
Parameter(<init>$2,boolean,);
Parameter(<init>$3,org.jhotdraw.draw.Figure,java.awt.Stroke);
Parameter(<init>$3,org.jhotdraw.draw.AttributeKey,java.awt.Color);
Parameter(<init>$3,org.jhotdraw.draw.AttributeKey,java.awt.Stroke);
Parameter(<init>$3,org.jhotdraw.draw.AttributeKey,java.awt.Color);
Parameter(<init>$3,org.jhotdraw.draw.AttributeKey,java.awt.Stroke);
Parameter(<init>$3,org.jhotdraw.draw.AttributeKey,java.awt.Color);
Parameter(<init>$3,org.jhotdraw.draw.AttributeKey,java.awt.Stroke);
Parameter(<init>$3,org.jhotdraw.draw.AttributeKey,java.awt.Color);
Parameter(<init>$3,org.jhotdraw.draw.AttributeKey,);
Parameter(contains,java.awt.Point,);
Parameter(trackStart,java.awt.Point,);
Parameter(trackStart,int,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,int,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,int,);
Parameter(draw,java.awt.Graphics2D,);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.AbstractHandle);
Composition(org.jhotdraw.draw.AttributeKey);
Call(METHOD,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init> --> <init>$2,org.jhotdraw.draw.handle.BoundsOutlineHandle,);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> stroke1Enabled,org.jhotdraw.draw.handle.BoundsOutlineHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> strokeColor1Enabled,org.jhotdraw.draw.handle.BoundsOutlineHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> stroke2Enabled,org.jhotdraw.draw.handle.BoundsOutlineHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> strokeColor2Enabled,org.jhotdraw.draw.handle.BoundsOutlineHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> stroke1Disabled,org.jhotdraw.draw.handle.BoundsOutlineHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> strokeColor1Disabled,org.jhotdraw.draw.handle.BoundsOutlineHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> stroke2Disabled,org.jhotdraw.draw.handle.BoundsOutlineHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> strokeColor2Disabled,org.jhotdraw.draw.handle.BoundsOutlineHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$3 --> stroke1Enabled,org.jhotdraw.draw.handle.BoundsOutlineHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$3 --> strokeColor1Enabled,org.jhotdraw.draw.handle.BoundsOutlineHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$3 --> stroke2Enabled,org.jhotdraw.draw.handle.BoundsOutlineHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$3 --> strokeColor2Enabled,org.jhotdraw.draw.handle.BoundsOutlineHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$3 --> stroke1Disabled,org.jhotdraw.draw.handle.BoundsOutlineHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$3 --> strokeColor1Disabled,org.jhotdraw.draw.handle.BoundsOutlineHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$3 --> stroke2Disabled,org.jhotdraw.draw.handle.BoundsOutlineHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$3 --> strokeColor2Disabled,org.jhotdraw.draw.handle.BoundsOutlineHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,draw --> stroke1Enabled,org.jhotdraw.draw.handle.BoundsOutlineHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,draw --> strokeColor1Enabled,org.jhotdraw.draw.handle.BoundsOutlineHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,draw --> stroke2Enabled,org.jhotdraw.draw.handle.BoundsOutlineHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,draw --> strokeColor2Enabled,org.jhotdraw.draw.handle.BoundsOutlineHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,draw --> stroke1Disabled,org.jhotdraw.draw.handle.BoundsOutlineHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,draw --> strokeColor1Disabled,org.jhotdraw.draw.handle.BoundsOutlineHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,draw --> stroke2Disabled,org.jhotdraw.draw.handle.BoundsOutlineHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,draw --> strokeColor2Disabled,org.jhotdraw.draw.handle.BoundsOutlineHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> TRANSFORM_BOUNDS_STROKE_1_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> TRANSFORM_BOUNDS_COLOR_1_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> TRANSFORM_BOUNDS_STROKE_2_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> TRANSFORM_BOUNDS_COLOR_2_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> TRANSFORM_BOUNDS_STROKE_1,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> TRANSFORM_BOUNDS_COLOR_1,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> TRANSFORM_BOUNDS_STROKE_2,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> TRANSFORM_BOUNDS_COLOR_2,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> TRANSFORM_BOUNDS_STROKE_1_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> TRANSFORM_BOUNDS_COLOR_1_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> TRANSFORM_BOUNDS_STROKE_2_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> TRANSFORM_BOUNDS_COLOR_2_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> RESIZE_BOUNDS_STROKE_1_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> RESIZE_BOUNDS_COLOR_1_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> RESIZE_BOUNDS_STROKE_2_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> RESIZE_BOUNDS_COLOR_2_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> RESIZE_BOUNDS_STROKE_1,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> RESIZE_BOUNDS_COLOR_1,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> RESIZE_BOUNDS_STROKE_2,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> RESIZE_BOUNDS_COLOR_2,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> RESIZE_BOUNDS_STROKE_1_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> RESIZE_BOUNDS_COLOR_1_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> RESIZE_BOUNDS_STROKE_2_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> RESIZE_BOUNDS_COLOR_2_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,basicGetBounds --> TRANSFORM,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,basicGetBounds --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,draw --> TRANSFORM,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BoundsOutlineHandle,draw --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(METHOD,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$2 --> <init>,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BoundsOutlineHandle,<init>$3 --> <init>,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BoundsOutlineHandle,basicGetBounds --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BoundsOutlineHandle,basicGetBounds --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.BoundsOutlineHandle,basicGetBounds --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.BoundsOutlineHandle,basicGetBounds --> getDrawingToViewTransform,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BoundsOutlineHandle,draw --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BoundsOutlineHandle,draw --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.BoundsOutlineHandle,draw --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.BoundsOutlineHandle,draw --> getDrawingToViewTransform,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BoundsOutlineHandle,draw --> getEditor,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BoundsOutlineHandle,draw --> getTool,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.handle.BoundsOutlineHandle,draw --> supportsHandleInteraction,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.handle.BoundsOutlineHandle,draw --> getHandleAttribute,org.jhotdraw.draw.DrawingEditor,);
EndClass 201
StartClass 202
Class(org.jhotdraw.draw.tool.TextEditingTool,N,N,Public);
Attribute(textField,org.jhotdraw.draw.text.FloatingTextField,Private,N,N,);
Attribute(typingTarget,org.jhotdraw.draw.TextHolderFigure,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(deactivate,void,Public,N,N);
Method(mousePressed,void,Public,N,N);
Method(beginEdit,void,Protected,N,N);
Method(mouseReleased,void,Public,N,N);
Method(endEdit,void,Protected,N,N);
Method(keyReleased,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(isEditing,boolean,Public,N,N);
Method(updateCursor,void,Public,N,N);
Method(mouseDragged,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.TextHolderFigure,);
Parameter(deactivate,org.jhotdraw.draw.DrawingEditor,);
Parameter(mousePressed,java.awt.event.MouseEvent,);
Parameter(beginEdit,org.jhotdraw.draw.TextHolderFigure,);
Parameter(mouseReleased,java.awt.event.MouseEvent,);
Parameter(keyReleased,java.awt.event.KeyEvent,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(updateCursor,org.jhotdraw.draw.DrawingView,);
Parameter(updateCursor,java.awt.Point,);
Parameter(mouseDragged,java.awt.event.MouseEvent,);
SuperClass(org.jhotdraw.draw.tool.AbstractTool);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.draw.tool.AbstractTool);
Composition(org.jhotdraw.draw.text.FloatingTextField);
Composition(org.jhotdraw.draw.TextHolderFigure);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,deactivate --> endEdit,org.jhotdraw.draw.tool.TextEditingTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,mousePressed --> beginEdit,org.jhotdraw.draw.tool.TextEditingTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,mousePressed --> updateCursor,org.jhotdraw.draw.tool.TextEditingTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,beginEdit --> endEdit,org.jhotdraw.draw.tool.TextEditingTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,actionPerformed --> endEdit,org.jhotdraw.draw.tool.TextEditingTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,updateCursor --> isEditing,org.jhotdraw.draw.tool.TextEditingTool,);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextEditingTool,<init> --> typingTarget,org.jhotdraw.draw.tool.TextEditingTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextEditingTool,mousePressed --> typingTarget,org.jhotdraw.draw.tool.TextEditingTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextEditingTool,beginEdit --> textField,org.jhotdraw.draw.tool.TextEditingTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextEditingTool,beginEdit --> typingTarget,org.jhotdraw.draw.tool.TextEditingTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextEditingTool,beginEdit --> textField,org.jhotdraw.draw.tool.TextEditingTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextEditingTool,beginEdit --> typingTarget,org.jhotdraw.draw.tool.TextEditingTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextEditingTool,endEdit --> typingTarget,org.jhotdraw.draw.tool.TextEditingTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextEditingTool,endEdit --> textField,org.jhotdraw.draw.tool.TextEditingTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextEditingTool,endEdit --> typingTarget,org.jhotdraw.draw.tool.TextEditingTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextEditingTool,isEditing --> typingTarget,org.jhotdraw.draw.tool.TextEditingTool,READ);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,<init> --> <init>,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,deactivate --> deactivate,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,mousePressed --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,beginEdit --> <init>,org.jhotdraw.draw.text.FloatingTextField,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,beginEdit --> addActionListener,org.jhotdraw.draw.text.FloatingTextField,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,beginEdit --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,beginEdit --> createOverlay,org.jhotdraw.draw.text.FloatingTextField,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,beginEdit --> requestFocus,org.jhotdraw.draw.text.FloatingTextField,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,endEdit --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,endEdit --> getText,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,endEdit --> getText,org.jhotdraw.draw.text.FloatingTextField,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,endEdit --> setText,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,endEdit --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,endEdit --> <init>,org.jhotdraw.draw.tool.TextEditingTool$1,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,endEdit --> getDrawing,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,endEdit --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,endEdit --> endOverlay,org.jhotdraw.draw.text.FloatingTextField,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,keyReleased --> fireToolDone,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,actionPerformed --> fireToolDone,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,updateCursor --> isEnabled,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool,updateCursor --> setCursor,org.jhotdraw.draw.DrawingView,);
EndClass 202
StartClass 203
Class(org.jhotdraw.draw.locator.RelativeLocator,N,N,Public);
Attribute(relativeX,double,Protected,N,N,);
Attribute(relativeY,double,Protected,N,N,);
Attribute(isTransform,boolean,Protected,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(locate,java.awt.geom.Point2D$Double,Public,N,N);
Method(east,org.jhotdraw.draw.locator.Locator,Public,Y,N);
Method(east$2,org.jhotdraw.draw.locator.Locator,Public,Y,N);
Method(north,org.jhotdraw.draw.locator.Locator,Public,Y,N);
Method(north$2,org.jhotdraw.draw.locator.Locator,Public,Y,N);
Method(west,org.jhotdraw.draw.locator.Locator,Public,Y,N);
Method(west$2,org.jhotdraw.draw.locator.Locator,Public,Y,N);
Method(northEast,org.jhotdraw.draw.locator.Locator,Public,Y,N);
Method(northEast$2,org.jhotdraw.draw.locator.Locator,Public,Y,N);
Method(northWest,org.jhotdraw.draw.locator.Locator,Public,Y,N);
Method(northWest$2,org.jhotdraw.draw.locator.Locator,Public,Y,N);
Method(south,org.jhotdraw.draw.locator.Locator,Public,Y,N);
Method(south$2,org.jhotdraw.draw.locator.Locator,Public,Y,N);
Method(southEast,org.jhotdraw.draw.locator.Locator,Public,Y,N);
Method(southEast$2,org.jhotdraw.draw.locator.Locator,Public,Y,N);
Method(southWest,org.jhotdraw.draw.locator.Locator,Public,Y,N);
Method(southWest$2,org.jhotdraw.draw.locator.Locator,Public,Y,N);
Method(center,org.jhotdraw.draw.locator.Locator,Public,Y,N);
Method(center$2,org.jhotdraw.draw.locator.Locator,Public,Y,N);
Method(write,void,Public,N,N);
Method(read,void,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(hashCode,int,Public,N,N);
Parameter(<init>$2,double,);
Parameter(<init>$2,double,);
Parameter(<init>$3,double,);
Parameter(<init>$3,double,);
Parameter(<init>$3,boolean,);
Parameter(locate,org.jhotdraw.draw.Figure,);
Parameter(east$2,boolean,);
Parameter(north$2,boolean,);
Parameter(west$2,boolean,);
Parameter(northEast$2,boolean,);
Parameter(northWest$2,boolean,);
Parameter(south$2,boolean,);
Parameter(southEast$2,boolean,);
Parameter(southWest$2,boolean,);
Parameter(center$2,boolean,);
Parameter(write,org.jhotdraw.xml.DOMOutput,);
Parameter(read,org.jhotdraw.xml.DOMInput,);
Parameter(equals,java.lang.Object,);
SuperClass(org.jhotdraw.draw.locator.AbstractLocator);
Generalization(org.jhotdraw.draw.locator.AbstractLocator);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,<init> --> <init>$3,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,<init>$2 --> <init>$3,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,east --> east$2,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,east$2 --> <init>$3,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,north --> north$2,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,north$2 --> <init>$3,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,west --> west$2,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,west$2 --> <init>$3,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,northEast --> northEast$2,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,northEast$2 --> <init>$3,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,northWest --> northWest$2,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,northWest$2 --> <init>$3,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,south --> south$2,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,south$2 --> <init>$3,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,southEast --> southEast$2,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,southEast$2 --> <init>$3,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,southWest --> southWest$2,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,southWest$2 --> <init>$3,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,center --> center$2,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,center$2 --> <init>$3,org.jhotdraw.draw.locator.RelativeLocator,);
Call(ATTRIBUTE,org.jhotdraw.draw.locator.RelativeLocator,<init>$3 --> relativeX,org.jhotdraw.draw.locator.RelativeLocator,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.locator.RelativeLocator,<init>$3 --> relativeY,org.jhotdraw.draw.locator.RelativeLocator,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.locator.RelativeLocator,<init>$3 --> isTransform,org.jhotdraw.draw.locator.RelativeLocator,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.locator.RelativeLocator,locate --> isTransform,org.jhotdraw.draw.locator.RelativeLocator,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.locator.RelativeLocator,locate --> relativeX,org.jhotdraw.draw.locator.RelativeLocator,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.locator.RelativeLocator,locate --> relativeY,org.jhotdraw.draw.locator.RelativeLocator,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.locator.RelativeLocator,write --> relativeX,org.jhotdraw.draw.locator.RelativeLocator,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.locator.RelativeLocator,write --> relativeY,org.jhotdraw.draw.locator.RelativeLocator,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.locator.RelativeLocator,read --> relativeX,org.jhotdraw.draw.locator.RelativeLocator,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.locator.RelativeLocator,read --> relativeY,org.jhotdraw.draw.locator.RelativeLocator,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.locator.RelativeLocator,equals --> relativeX,org.jhotdraw.draw.locator.RelativeLocator,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.locator.RelativeLocator,equals --> relativeY,org.jhotdraw.draw.locator.RelativeLocator,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.locator.RelativeLocator,hashCode --> relativeX,org.jhotdraw.draw.locator.RelativeLocator,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.locator.RelativeLocator,hashCode --> relativeY,org.jhotdraw.draw.locator.RelativeLocator,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.locator.RelativeLocator,locate --> DECORATOR_INSETS,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.locator.RelativeLocator,locate --> TRANSFORM,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,<init>$3 --> <init>,org.jhotdraw.draw.locator.AbstractLocator,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,locate --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,locate --> getDecorator,org.jhotdraw.draw.DecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,locate --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,locate --> addTo,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,write --> addAttribute$10,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.locator.RelativeLocator,read --> getAttribute$3,org.jhotdraw.xml.DOMInput,);
EndClass 203
StartClass 204
Class(org.jhotdraw.draw.locator.Locator,Y,Y,Public);
Method(locate,java.awt.geom.Point2D$Double,Public,N,Y);
Method(locate$2,java.awt.geom.Point2D$Double,Public,N,Y);
Parameter(locate,org.jhotdraw.draw.Figure,);
Parameter(locate$2,org.jhotdraw.draw.Figure,);
Parameter(locate$2,org.jhotdraw.draw.Figure,);
EndClass 204
StartClass 205
Class(org.jhotdraw.draw.handle.MoveHandle,N,N,Public);
Attribute(oldPoint,java.awt.geom.Point2D$Double,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(addMoveHandles,void,Public,Y,N);
Method(draw,void,Public,N,N);
Method(getCursor,java.awt.Cursor,Public,N,N);
Method(trackStart,void,Public,N,N);
Method(trackStep,void,Public,N,N);
Method(trackEnd,void,Public,N,N);
Method(keyPressed,void,Public,N,N);
Method(south,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Method(southEast,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Method(southWest,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Method(north,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Method(northEast,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Method(northWest,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Method(east,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Method(west,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(<init>,org.jhotdraw.draw.locator.Locator,);
Parameter(addMoveHandles,org.jhotdraw.draw.Figure,org.jhotdraw.draw.handle.Handle);
Parameter(addMoveHandles,java.util.Collection,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(trackStart,java.awt.Point,);
Parameter(trackStart,int,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,int,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,int,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
Parameter(south,org.jhotdraw.draw.Figure,);
Parameter(southEast,org.jhotdraw.draw.Figure,);
Parameter(southWest,org.jhotdraw.draw.Figure,);
Parameter(north,org.jhotdraw.draw.Figure,);
Parameter(northEast,org.jhotdraw.draw.Figure,);
Parameter(northWest,org.jhotdraw.draw.Figure,);
Parameter(east,org.jhotdraw.draw.Figure,);
Parameter(west,org.jhotdraw.draw.Figure,);
SuperClass(org.jhotdraw.draw.handle.LocatorHandle);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.LocatorHandle);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,addMoveHandles --> southEast,org.jhotdraw.draw.handle.MoveHandle,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,addMoveHandles --> southWest,org.jhotdraw.draw.handle.MoveHandle,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,addMoveHandles --> northEast,org.jhotdraw.draw.handle.MoveHandle,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,addMoveHandles --> northWest,org.jhotdraw.draw.handle.MoveHandle,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,south --> <init>,org.jhotdraw.draw.handle.MoveHandle,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,southEast --> <init>,org.jhotdraw.draw.handle.MoveHandle,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,southWest --> <init>,org.jhotdraw.draw.handle.MoveHandle,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,north --> <init>,org.jhotdraw.draw.handle.MoveHandle,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,northEast --> <init>,org.jhotdraw.draw.handle.MoveHandle,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,northWest --> <init>,org.jhotdraw.draw.handle.MoveHandle,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,east --> <init>,org.jhotdraw.draw.handle.MoveHandle,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,west --> <init>,org.jhotdraw.draw.handle.MoveHandle,);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.MoveHandle,trackStart --> oldPoint,org.jhotdraw.draw.handle.MoveHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.MoveHandle,trackStep --> oldPoint,org.jhotdraw.draw.handle.MoveHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.MoveHandle,trackStep --> oldPoint,org.jhotdraw.draw.handle.MoveHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.MoveHandle,draw --> MOVE_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.MoveHandle,draw --> MOVE_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.MoveHandle,draw --> NULL_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.MoveHandle,draw --> NULL_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.MoveHandle,trackStart --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.MoveHandle,trackStep --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,<init> --> <init>,org.jhotdraw.draw.handle.LocatorHandle,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,draw --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,draw --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,draw --> getEditor,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,draw --> getHandleAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,draw --> drawRectangle,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,getCursor --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,getCursor --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,trackStart --> getConstrainer,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,trackStart --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,trackStart --> constrainPoint,org.jhotdraw.draw.Constrainer,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,trackStep --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,trackStep --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,trackStep --> getConstrainer,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,trackStep --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,trackStep --> constrainPoint,org.jhotdraw.draw.Constrainer,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,trackStep --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,trackStep --> transform,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,trackStep --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,trackEnd --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,trackEnd --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,trackEnd --> <init>,org.jhotdraw.draw.event.TransformEdit,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,trackEnd --> fireUndoableEditHappened,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,keyPressed --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,keyPressed --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,keyPressed --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,keyPressed --> transform,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,keyPressed --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,keyPressed --> <init>,org.jhotdraw.draw.event.TransformEdit,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,keyPressed --> fireUndoableEditHappened,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,south --> south,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,southEast --> southEast,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,southWest --> southWest,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,north --> north,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,northEast --> northEast,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,northWest --> northWest,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,east --> east,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.handle.MoveHandle,west --> west,org.jhotdraw.draw.locator.RelativeLocator,);
EndClass 205
StartClass 206
Class(org.jhotdraw.geom.GrowStroke,N,N,Public);
Attribute(grow,double,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(createStrokedShape,java.awt.Shape,Public,N,N);
Parameter(<init>,double,);
Parameter(<init>,double,);
Parameter(createStrokedShape,java.awt.Shape,);
SuperClass(org.jhotdraw.geom.DoubleStroke);
Generalization(org.jhotdraw.geom.DoubleStroke);
Call(ATTRIBUTE,org.jhotdraw.geom.GrowStroke,<init> --> grow,org.jhotdraw.geom.GrowStroke,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.GrowStroke,createStrokedShape --> grow,org.jhotdraw.geom.GrowStroke,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.GrowStroke,createStrokedShape --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.GrowStroke,createStrokedShape --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(METHOD,org.jhotdraw.geom.GrowStroke,<init> --> <init>$2,org.jhotdraw.geom.DoubleStroke,);
Call(METHOD,org.jhotdraw.geom.GrowStroke,createStrokedShape --> <init>,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.GrowStroke,createStrokedShape --> getWindingRule,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.GrowStroke,createStrokedShape --> traceStroke,org.jhotdraw.geom.DoubleStroke,);
Call(METHOD,org.jhotdraw.geom.GrowStroke,createStrokedShape --> moveTo,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.GrowStroke,createStrokedShape --> lineTo,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.GrowStroke,createStrokedShape --> quadTo,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.GrowStroke,createStrokedShape --> curveTo,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.GrowStroke,createStrokedShape --> setClosed,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.GrowStroke,createStrokedShape --> contains$2,org.jhotdraw.geom.Geom,);
EndClass 206
StartClass 207
Class(org.jhotdraw.draw.handle.OrientationHandle,N,N,Public);
Attribute(centerBox,java.awt.Rectangle,Private,N,N,);
Attribute(oldValue,org.jhotdraw.draw.AttributeKeys$Orientation,Private,N,N,);
Attribute(newValue,org.jhotdraw.draw.AttributeKeys$Orientation,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(isCombinableWith,boolean,Public,N,N);
Method(getLocation,java.awt.geom.Point2D$Double,Private,N,N);
Method(basicGetBounds,java.awt.Rectangle,Protected,N,N);
Method(trackStart,void,Public,N,N);
Method(trackStep,void,Public,N,N);
Method(draw,void,Public,N,N);
Method(trackEnd,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.TriangleFigure,);
Parameter(isCombinableWith,org.jhotdraw.draw.handle.Handle,);
Parameter(trackStart,java.awt.Point,);
Parameter(trackStart,int,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,int,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,int,);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.AbstractHandle);
Composition(org.jhotdraw.draw.AttributeKeys$Orientation);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle,basicGetBounds --> getLocation,org.jhotdraw.draw.handle.OrientationHandle,);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,trackStart --> centerBox,org.jhotdraw.draw.handle.OrientationHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,trackStart --> oldValue,org.jhotdraw.draw.handle.OrientationHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,trackStart --> centerBox,org.jhotdraw.draw.handle.OrientationHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,trackStep --> centerBox,org.jhotdraw.draw.handle.OrientationHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,trackStep --> newValue,org.jhotdraw.draw.handle.OrientationHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,trackStep --> newValue,org.jhotdraw.draw.handle.OrientationHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,trackEnd --> newValue,org.jhotdraw.draw.handle.OrientationHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,trackEnd --> oldValue,org.jhotdraw.draw.handle.OrientationHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,getLocation --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$Orientation,org.jhotdraw.draw.handle.OrientationHandle$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,getLocation --> ORIENTATION,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,basicGetBounds --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,trackStart --> ORIENTATION,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,trackStart --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,trackStep --> NORTH,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,trackStep --> NORTH_EAST,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,trackStep --> EAST,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,trackStep --> SOUTH_EAST,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,trackStep --> SOUTH,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,trackStep --> SOUTH_WEST,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,trackStep --> WEST,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,trackStep --> NORTH_WEST,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,trackStep --> ORIENTATION,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,draw --> ATTRIBUTE_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,draw --> ATTRIBUTE_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle,trackEnd --> ORIENTATION,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle,<init> --> <init>,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle,getLocation --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle,getLocation --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle,getLocation --> getHandlesize,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle,getLocation --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle,basicGetBounds --> drawingToView,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle,basicGetBounds --> getHandlesize,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle,trackStart --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle,trackStart --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle,trackStart --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle,trackStart --> drawingToView$2,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle,trackStep --> outcode,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle,trackStep --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle,trackStep --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle,trackStep --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle,trackStep --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle,trackStep --> updateBounds,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle,draw --> getEditor,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle,draw --> getHandleAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle,draw --> drawDiamond,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle,trackEnd --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle,trackEnd --> <init>,org.jhotdraw.draw.event.AttributeChangeEdit,);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle,trackEnd --> fireUndoableEditHappened,org.jhotdraw.draw.handle.AbstractHandle,);
EndClass 207
StartClass 208
Class(org.jhotdraw.draw.TriangleFigure$1,N,N,NA);
Attribute($SwitchMap$org$jhotdraw$draw$AttributeKeys$Orientation,int[],Public,Y,Y,);
Attribute($SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,int[],Public,Y,Y,);
Method(<clinit>,void,Public,Y,N);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,org.jhotdraw.draw.TriangleFigure$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$Orientation,org.jhotdraw.draw.TriangleFigure$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,org.jhotdraw.draw.TriangleFigure$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$Orientation,org.jhotdraw.draw.TriangleFigure$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure$1,<clinit> --> INSIDE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure$1,<clinit> --> OUTSIDE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure$1,<clinit> --> CENTER,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure$1,<clinit> --> NORTH,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure$1,<clinit> --> NORTH_EAST,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure$1,<clinit> --> EAST,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure$1,<clinit> --> SOUTH_EAST,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure$1,<clinit> --> SOUTH,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure$1,<clinit> --> SOUTH_WEST,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure$1,<clinit> --> WEST,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TriangleFigure$1,<clinit> --> NORTH_WEST,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(METHOD,org.jhotdraw.draw.TriangleFigure$1,<clinit> --> values,org.jhotdraw.draw.AttributeKeys$StrokePlacement,);
Call(METHOD,org.jhotdraw.draw.TriangleFigure$1,<clinit> --> values,org.jhotdraw.draw.AttributeKeys$Orientation,);
EndClass 208
StartClass 209
Class(org.jhotdraw.draw.connector.ChopTriangleConnector,N,N,Public);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(chop,java.awt.geom.Point2D$Double,Protected,N,N);
Parameter(<init>$2,org.jhotdraw.draw.TriangleFigure,);
Parameter(chop,org.jhotdraw.draw.Figure,);
Parameter(chop,java.awt.geom.Point2D$Double,);
SuperClass(org.jhotdraw.draw.connector.ChopRectangleConnector);
SuperClass(org.jhotdraw.draw.connector.AbstractConnector);
Generalization(org.jhotdraw.draw.connector.ChopRectangleConnector);
Call(METHOD,org.jhotdraw.draw.connector.ChopTriangleConnector,<init> --> <init>,org.jhotdraw.draw.connector.ChopRectangleConnector,);
Call(METHOD,org.jhotdraw.draw.connector.ChopTriangleConnector,<init>$2 --> <init>$2,org.jhotdraw.draw.connector.ChopRectangleConnector,);
Call(METHOD,org.jhotdraw.draw.connector.ChopTriangleConnector,chop --> getConnectorTarget,org.jhotdraw.draw.connector.AbstractConnector,);
Call(METHOD,org.jhotdraw.draw.connector.ChopTriangleConnector,chop --> chop,org.jhotdraw.draw.TriangleFigure,);
EndClass 209
StartClass 210
Class(org.jhotdraw.draw.LineFigure$1,N,N,NA);
Attribute(val$index,int,Public,N,Y,);
Attribute(val$newNode,org.jhotdraw.geom.BezierPath$Node,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.LineFigure,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(redo,void,Public,N,N);
Method(undo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.LineFigure,);
Parameter(<init>,int,);
Parameter(<init>,org.jhotdraw.geom.BezierPath$Node,);
Composition(org.jhotdraw.geom.BezierPath$Node);
Composition(org.jhotdraw.draw.LineFigure);
Call(ATTRIBUTE,org.jhotdraw.draw.LineFigure$1,<init> --> this$0,org.jhotdraw.draw.LineFigure$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.LineFigure$1,<init> --> val$index,org.jhotdraw.draw.LineFigure$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.LineFigure$1,<init> --> val$newNode,org.jhotdraw.draw.LineFigure$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.LineFigure$1,redo --> this$0,org.jhotdraw.draw.LineFigure$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineFigure$1,redo --> val$index,org.jhotdraw.draw.LineFigure$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineFigure$1,redo --> val$newNode,org.jhotdraw.draw.LineFigure$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineFigure$1,undo --> this$0,org.jhotdraw.draw.LineFigure$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.LineFigure$1,undo --> val$index,org.jhotdraw.draw.LineFigure$1,READ);
Call(METHOD,org.jhotdraw.draw.LineFigure$1,redo --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.LineFigure$1,redo --> addNode$2,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.LineFigure$1,redo --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.LineFigure$1,undo --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.LineFigure$1,undo --> removeNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.LineFigure$1,undo --> changed,org.jhotdraw.draw.AbstractFigure,);
EndClass 210
StartClass 211
Class(org.jhotdraw.draw.handle.TransformHandleKit,N,N,Public);
Method(<init>,void,Public,N,N);
Method(addCornerTransformHandles,void,Public,Y,N);
Method(addEdgeTransformHandles,void,Public,Y,N);
Method(addScaleMoveTransformHandles,void,Public,Y,N);
Method(addTransformHandles,void,Public,Y,N);
Method(addGroupTransformHandles,void,Public,Y,N);
Method(addGroupHoverHandles,void,Public,Y,N);
Method(south,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Method(southEast,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Method(southWest,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Method(north,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Method(northEast,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Method(northWest,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Method(east,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Method(west,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Parameter(addCornerTransformHandles,org.jhotdraw.draw.Figure,org.jhotdraw.draw.handle.Handle);
Parameter(addCornerTransformHandles,java.util.Collection,);
Parameter(addEdgeTransformHandles,org.jhotdraw.draw.Figure,org.jhotdraw.draw.handle.Handle);
Parameter(addEdgeTransformHandles,java.util.Collection,);
Parameter(addScaleMoveTransformHandles,org.jhotdraw.draw.Figure,org.jhotdraw.draw.handle.Handle);
Parameter(addScaleMoveTransformHandles,java.util.Collection,);
Parameter(addTransformHandles,org.jhotdraw.draw.Figure,org.jhotdraw.draw.handle.Handle);
Parameter(addTransformHandles,java.util.Collection,);
Parameter(addGroupTransformHandles,org.jhotdraw.draw.Figure,org.jhotdraw.draw.handle.Handle);
Parameter(addGroupTransformHandles,java.util.Collection,);
Parameter(addGroupHoverHandles,org.jhotdraw.draw.Figure,org.jhotdraw.draw.handle.Handle);
Parameter(addGroupHoverHandles,java.util.Collection,);
Parameter(south,org.jhotdraw.draw.Figure,);
Parameter(southEast,org.jhotdraw.draw.Figure,);
Parameter(southWest,org.jhotdraw.draw.Figure,);
Parameter(north,org.jhotdraw.draw.Figure,);
Parameter(northEast,org.jhotdraw.draw.Figure,);
Parameter(northWest,org.jhotdraw.draw.Figure,);
Parameter(east,org.jhotdraw.draw.Figure,);
Parameter(west,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,addCornerTransformHandles --> southEast,org.jhotdraw.draw.handle.TransformHandleKit,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,addCornerTransformHandles --> southWest,org.jhotdraw.draw.handle.TransformHandleKit,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,addCornerTransformHandles --> northEast,org.jhotdraw.draw.handle.TransformHandleKit,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,addCornerTransformHandles --> northWest,org.jhotdraw.draw.handle.TransformHandleKit,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,addEdgeTransformHandles --> south,org.jhotdraw.draw.handle.TransformHandleKit,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,addEdgeTransformHandles --> north,org.jhotdraw.draw.handle.TransformHandleKit,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,addEdgeTransformHandles --> east,org.jhotdraw.draw.handle.TransformHandleKit,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,addEdgeTransformHandles --> west,org.jhotdraw.draw.handle.TransformHandleKit,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,addScaleMoveTransformHandles --> addCornerTransformHandles,org.jhotdraw.draw.handle.TransformHandleKit,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,addScaleMoveTransformHandles --> addEdgeTransformHandles,org.jhotdraw.draw.handle.TransformHandleKit,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,addTransformHandles --> addCornerTransformHandles,org.jhotdraw.draw.handle.TransformHandleKit,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,addTransformHandles --> addEdgeTransformHandles,org.jhotdraw.draw.handle.TransformHandleKit,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,addGroupTransformHandles --> addCornerTransformHandles,org.jhotdraw.draw.handle.TransformHandleKit,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,addGroupTransformHandles --> addEdgeTransformHandles,org.jhotdraw.draw.handle.TransformHandleKit,);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit,addGroupTransformHandles --> GROUP_BOUNDS_STROKE_1,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit,addGroupTransformHandles --> GROUP_BOUNDS_COLOR_1,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit,addGroupTransformHandles --> GROUP_BOUNDS_STROKE_2,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit,addGroupTransformHandles --> GROUP_BOUNDS_COLOR_2,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit,addGroupTransformHandles --> GROUP_BOUNDS_STROKE_1_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit,addGroupTransformHandles --> GROUP_BOUNDS_COLOR_1_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit,addGroupTransformHandles --> GROUP_BOUNDS_STROKE_2_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit,addGroupTransformHandles --> GROUP_BOUNDS_COLOR_2_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit,addGroupHoverHandles --> GROUP_BOUNDS_STROKE_1_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit,addGroupHoverHandles --> GROUP_BOUNDS_COLOR_1_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit,addGroupHoverHandles --> GROUP_BOUNDS_STROKE_2_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit,addGroupHoverHandles --> GROUP_BOUNDS_COLOR_2_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit,addGroupHoverHandles --> GROUP_BOUNDS_STROKE_1_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit,addGroupHoverHandles --> GROUP_BOUNDS_COLOR_1_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit,addGroupHoverHandles --> GROUP_BOUNDS_STROKE_2_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit,addGroupHoverHandles --> GROUP_BOUNDS_COLOR_2_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,addCornerTransformHandles --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,addEdgeTransformHandles --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,addScaleMoveTransformHandles --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,addTransformHandles --> <init>$2,org.jhotdraw.draw.handle.BoundsOutlineHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,addTransformHandles --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,addTransformHandles --> <init>,org.jhotdraw.draw.handle.RotateHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,addGroupTransformHandles --> <init>$3,org.jhotdraw.draw.handle.BoundsOutlineHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,addGroupTransformHandles --> <init>,org.jhotdraw.draw.handle.RotateHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,addGroupHoverHandles --> <init>$3,org.jhotdraw.draw.handle.BoundsOutlineHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,south --> <init>,org.jhotdraw.draw.handle.TransformHandleKit$SouthHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,southEast --> <init>,org.jhotdraw.draw.handle.TransformHandleKit$SouthEastHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,southWest --> <init>,org.jhotdraw.draw.handle.TransformHandleKit$SouthWestHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,north --> <init>,org.jhotdraw.draw.handle.TransformHandleKit$NorthHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,northEast --> <init>,org.jhotdraw.draw.handle.TransformHandleKit$NorthEastHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,northWest --> <init>,org.jhotdraw.draw.handle.TransformHandleKit$NorthWestHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,east --> <init>,org.jhotdraw.draw.handle.TransformHandleKit$EastHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit,west --> <init>,org.jhotdraw.draw.handle.TransformHandleKit$WestHandle,);
EndClass 211
StartClass 212
Class(org.jhotdraw.draw.connector.ChopBezierConnector,N,N,Public);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(chop,java.awt.geom.Point2D$Double,Protected,N,N);
Parameter(<init>$2,org.jhotdraw.draw.BezierFigure,);
Parameter(chop,org.jhotdraw.draw.Figure,);
Parameter(chop,java.awt.geom.Point2D$Double,);
SuperClass(org.jhotdraw.draw.connector.ChopRectangleConnector);
SuperClass(org.jhotdraw.draw.connector.AbstractConnector);
Generalization(org.jhotdraw.draw.connector.ChopRectangleConnector);
Call(METHOD,org.jhotdraw.draw.connector.ChopBezierConnector,<init> --> <init>,org.jhotdraw.draw.connector.ChopRectangleConnector,);
Call(METHOD,org.jhotdraw.draw.connector.ChopBezierConnector,<init>$2 --> <init>$2,org.jhotdraw.draw.connector.ChopRectangleConnector,);
Call(METHOD,org.jhotdraw.draw.connector.ChopBezierConnector,chop --> getConnectorTarget,org.jhotdraw.draw.connector.AbstractConnector,);
Call(METHOD,org.jhotdraw.draw.connector.ChopBezierConnector,chop --> chop,org.jhotdraw.draw.BezierFigure,);
EndClass 212
StartClass 213
Class(org.jhotdraw.draw.handle.BezierScaleHandle,N,N,Public);
Attribute(location,java.awt.Point,Private,N,N,);
Attribute(restoreData,java.lang.Object,Private,N,N,);
Attribute(transform,java.awt.geom.AffineTransform,Private,N,N,);
Attribute(center,java.awt.geom.Point2D$Double,Private,N,N,);
Attribute(startTheta,double,Private,N,N,);
Attribute(startLength,double,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(isCombinableWith,boolean,Public,N,N);
Method(draw,void,Public,N,N);
Method(basicGetBounds,java.awt.Rectangle,Protected,N,N);
Method(getLocation,java.awt.Point,Public,N,N);
Method(getBezierFigure,org.jhotdraw.draw.BezierFigure,Private,N,N);
Method(getOrigin,java.awt.geom.Point2D$Double,Private,N,N);
Method(trackStart,void,Public,N,N);
Method(trackStep,void,Public,N,N);
Method(trackEnd,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.BezierFigure,);
Parameter(isCombinableWith,org.jhotdraw.draw.handle.Handle,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(trackStart,java.awt.Point,);
Parameter(trackStart,int,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,int,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,int,);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.AbstractHandle);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,basicGetBounds --> getLocation,org.jhotdraw.draw.handle.BezierScaleHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,getLocation --> getOrigin,org.jhotdraw.draw.handle.BezierScaleHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,getOrigin --> getBezierFigure,org.jhotdraw.draw.handle.BezierScaleHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,trackStart --> getBezierFigure,org.jhotdraw.draw.handle.BezierScaleHandle,);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierScaleHandle,getLocation --> location,org.jhotdraw.draw.handle.BezierScaleHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierScaleHandle,trackStart --> center,org.jhotdraw.draw.handle.BezierScaleHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierScaleHandle,trackStart --> location,org.jhotdraw.draw.handle.BezierScaleHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierScaleHandle,trackStart --> restoreData,org.jhotdraw.draw.handle.BezierScaleHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierScaleHandle,trackStart --> transform,org.jhotdraw.draw.handle.BezierScaleHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierScaleHandle,trackStart --> center,org.jhotdraw.draw.handle.BezierScaleHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierScaleHandle,trackStart --> startTheta,org.jhotdraw.draw.handle.BezierScaleHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierScaleHandle,trackStart --> startLength,org.jhotdraw.draw.handle.BezierScaleHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierScaleHandle,trackStep --> center,org.jhotdraw.draw.handle.BezierScaleHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierScaleHandle,trackStep --> startLength,org.jhotdraw.draw.handle.BezierScaleHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierScaleHandle,trackStep --> transform,org.jhotdraw.draw.handle.BezierScaleHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierScaleHandle,trackStep --> startTheta,org.jhotdraw.draw.handle.BezierScaleHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierScaleHandle,trackStep --> restoreData,org.jhotdraw.draw.handle.BezierScaleHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierScaleHandle,trackStep --> location,org.jhotdraw.draw.handle.BezierScaleHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierScaleHandle,trackEnd --> restoreData,org.jhotdraw.draw.handle.BezierScaleHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierScaleHandle,trackEnd --> location,org.jhotdraw.draw.handle.BezierScaleHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierScaleHandle,draw --> SCALE_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierScaleHandle,draw --> SCALE_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierScaleHandle,getLocation --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierScaleHandle,trackStart --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierScaleHandle,trackStep --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierScaleHandle,trackEnd --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,<init> --> <init>,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,draw --> getEditor,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,draw --> getHandleAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,draw --> drawCircle,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,basicGetBounds --> getHandlesize,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,getLocation --> drawingToView,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,getBezierFigure --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,getOrigin --> getHandlesize,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,getOrigin --> getOutermostPoint,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,getOrigin --> getCenter,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,getOrigin --> length$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,trackStart --> getTransformRestoreData,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,trackStart --> getCenter,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,trackStart --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,trackStart --> angle,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,trackStart --> length$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,trackStep --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,trackStep --> angle,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,trackStep --> length$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,trackStep --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,trackStep --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,trackStep --> restoreTransformTo,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,trackStep --> transform,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,trackStep --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,trackEnd --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,trackEnd --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,trackEnd --> getTransformRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,trackEnd --> <init>,org.jhotdraw.draw.event.TransformRestoreEdit,);
Call(METHOD,org.jhotdraw.draw.handle.BezierScaleHandle,trackEnd --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
EndClass 213
StartClass 214
Class(org.jhotdraw.draw.BezierFigure$1,N,N,NA);
Attribute(val$index,int,Public,N,Y,);
Attribute(val$newNode,org.jhotdraw.geom.BezierPath$Node,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.BezierFigure,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(redo,void,Public,N,N);
Method(undo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.BezierFigure,);
Parameter(<init>,int,);
Parameter(<init>,org.jhotdraw.geom.BezierPath$Node,);
Composition(org.jhotdraw.geom.BezierPath$Node);
Composition(org.jhotdraw.draw.BezierFigure);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure$1,<init> --> this$0,org.jhotdraw.draw.BezierFigure$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure$1,<init> --> val$index,org.jhotdraw.draw.BezierFigure$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure$1,<init> --> val$newNode,org.jhotdraw.draw.BezierFigure$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure$1,redo --> this$0,org.jhotdraw.draw.BezierFigure$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure$1,redo --> val$index,org.jhotdraw.draw.BezierFigure$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure$1,redo --> val$newNode,org.jhotdraw.draw.BezierFigure$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure$1,undo --> this$0,org.jhotdraw.draw.BezierFigure$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.BezierFigure$1,undo --> val$index,org.jhotdraw.draw.BezierFigure$1,READ);
Call(METHOD,org.jhotdraw.draw.BezierFigure$1,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.BezierFigure$1,getPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.BezierFigure$1,redo --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure$1,redo --> addNode$2,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure$1,redo --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure$1,undo --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure$1,undo --> removeNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.BezierFigure$1,undo --> changed,org.jhotdraw.draw.AbstractFigure,);
EndClass 214
StartClass 215
Class(org.jhotdraw.draw.connector.ChopRectangleConnector,N,N,Public);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(findStart,java.awt.geom.Point2D$Double,Public,N,N);
Method(findEnd,java.awt.geom.Point2D$Double,Public,N,N);
Method(chop,java.awt.geom.Point2D$Double,Protected,N,N);
Parameter(<init>$2,org.jhotdraw.draw.Figure,);
Parameter(findStart,org.jhotdraw.draw.ConnectionFigure,);
Parameter(findEnd,org.jhotdraw.draw.ConnectionFigure,);
Parameter(chop,org.jhotdraw.draw.Figure,);
Parameter(chop,java.awt.geom.Point2D$Double,);
SuperClass(org.jhotdraw.draw.connector.AbstractConnector);
SubClass(org.jhotdraw.draw.connector.ChopRoundRectangleConnector);
SubClass(org.jhotdraw.draw.connector.ChopEllipseConnector);
SubClass(org.jhotdraw.draw.connector.ChopDiamondConnector);
SubClass(org.jhotdraw.draw.connector.ChopTriangleConnector);
SubClass(org.jhotdraw.draw.connector.ChopBezierConnector);
Generalization(org.jhotdraw.draw.connector.AbstractConnector);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,findStart --> chop,org.jhotdraw.draw.connector.ChopRectangleConnector,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,findEnd --> chop,org.jhotdraw.draw.connector.ChopRectangleConnector,);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopRectangleConnector,chop --> STROKE_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopRectangleConnector,chop --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,org.jhotdraw.draw.connector.ChopRectangleConnector$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopRectangleConnector,chop --> STROKE_PLACEMENT,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,<init> --> <init>,org.jhotdraw.draw.connector.AbstractConnector,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,<init>$2 --> <init>$2,org.jhotdraw.draw.connector.AbstractConnector,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,findStart --> getStartConnector,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,findStart --> getOwner,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,findStart --> getNodeCount,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,findStart --> getLiner,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,findStart --> getEndConnector,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,findStart --> getEndPoint,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,findStart --> getConnectorTarget,org.jhotdraw.draw.connector.AbstractConnector,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,findStart --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,findStart --> getPoint,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,findEnd --> getEndConnector,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,findEnd --> getOwner,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,findEnd --> getNodeCount,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,findEnd --> getStartFigure,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,findEnd --> getEndFigure,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,findEnd --> getLiner,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,findEnd --> getStartConnector,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,findEnd --> getStartPoint,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,findEnd --> getConnectorTarget,org.jhotdraw.draw.connector.AbstractConnector,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,findEnd --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,findEnd --> getPoint,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,chop --> getConnectorTarget,org.jhotdraw.draw.connector.AbstractConnector,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,chop --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,chop --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,chop --> getStrokeTotalWidth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,chop --> grow,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,chop --> pointToAngle$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector,chop --> angleToPoint$2,org.jhotdraw.geom.Geom,);
EndClass 215
StartClass 216
Class(org.jhotdraw.io.Base64,N,N,Public);
Attribute(NO_OPTIONS,int,Public,Y,Y,);
Attribute(ENCODE,int,Public,Y,Y,);
Attribute(DECODE,int,Public,Y,Y,);
Attribute(GZIP,int,Public,Y,Y,);
Attribute(DONT_BREAK_LINES,int,Public,Y,Y,);
Attribute(MAX_LINE_LENGTH,int,Private,Y,Y,);
Attribute(EQUALS_SIGN,byte,Private,Y,Y,);
Attribute(NEW_LINE,byte,Private,Y,Y,);
Attribute(PREFERRED_ENCODING,java.lang.String,Private,Y,Y,);
Attribute(ALPHABET,byte[],Private,Y,Y,);
Attribute(_NATIVE_ALPHABET,byte[],Private,Y,Y,);
Attribute(DECODABET,byte[],Private,Y,Y,);
Attribute(WHITE_SPACE_ENC,byte,Private,Y,Y,);
Attribute(EQUALS_SIGN_ENC,byte,Private,Y,Y,);
Method(<init>,void,Private,N,N);
Method(encode3to4,byte[],Private,Y,N);
Method(encode3to4$2,byte[],Private,Y,N);
Method(encodeObject,java.lang.String,Public,Y,N);
Method(encodeObject$2,java.lang.String,Public,Y,N);
Method(encodeBytes,java.lang.String,Public,Y,N);
Method(encodeBytes$2,java.lang.String,Public,Y,N);
Method(encodeBytes$3,java.lang.String,Public,Y,N);
Method(encodeBytes$4,java.lang.String,Public,Y,N);
Method(decode4to3,int,Private,Y,N);
Method(decode,byte[],Public,Y,N);
Method(decode$2,byte[],Public,Y,N);
Method(decodeToObject,java.lang.Object,Public,Y,N);
Method(encodeToFile,boolean,Public,Y,N);
Method(decodeToFile,boolean,Public,Y,N);
Method(decodeFromFile,byte[],Public,Y,N);
Method(encodeFromFile,java.lang.String,Public,Y,N);
Method(access$000,byte[],Public,Y,N);
Method(access$100,byte[],Public,Y,N);
Method(access$200,int,Public,Y,N);
Method(access$300,byte[],Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(encode3to4,byte[],);
Parameter(encode3to4,byte[],);
Parameter(encode3to4,int,);
Parameter(encode3to4$2,byte[],);
Parameter(encode3to4$2,int,);
Parameter(encode3to4$2,int,);
Parameter(encode3to4$2,byte[],);
Parameter(encode3to4$2,int,);
Parameter(encodeObject,java.io.Serializable,);
Parameter(encodeObject$2,java.io.Serializable,);
Parameter(encodeObject$2,int,);
Parameter(encodeBytes,byte[],);
Parameter(encodeBytes$2,byte[],);
Parameter(encodeBytes$2,int,);
Parameter(encodeBytes$3,byte[],);
Parameter(encodeBytes$3,int,);
Parameter(encodeBytes$3,int,);
Parameter(encodeBytes$4,byte[],);
Parameter(encodeBytes$4,int,);
Parameter(encodeBytes$4,int,);
Parameter(encodeBytes$4,int,);
Parameter(decode4to3,byte[],);
Parameter(decode4to3,int,);
Parameter(decode4to3,byte[],);
Parameter(decode4to3,int,);
Parameter(decode,byte[],);
Parameter(decode,int,);
Parameter(decode,int,);
Parameter(decode$2,java.lang.String,);
Parameter(decodeToObject,java.lang.String,);
Parameter(encodeToFile,byte[],);
Parameter(encodeToFile,java.lang.String,);
Parameter(decodeToFile,java.lang.String,);
Parameter(decodeToFile,java.lang.String,);
Parameter(decodeFromFile,java.lang.String,);
Parameter(encodeFromFile,java.lang.String,);
Parameter(access$000,byte[],);
Parameter(access$000,int,);
Parameter(access$000,int,);
Parameter(access$000,byte[],);
Parameter(access$000,int,);
Parameter(access$200,byte[],);
Parameter(access$200,int,);
Parameter(access$200,byte[],);
Parameter(access$200,int,);
Parameter(access$300,byte[],);
Parameter(access$300,byte[],);
Parameter(access$300,int,);
Call(METHOD,org.jhotdraw.io.Base64,encode3to4 --> encode3to4$2,org.jhotdraw.io.Base64,);
Call(METHOD,org.jhotdraw.io.Base64,encodeObject --> encodeObject$2,org.jhotdraw.io.Base64,);
Call(METHOD,org.jhotdraw.io.Base64,encodeBytes --> encodeBytes$4,org.jhotdraw.io.Base64,);
Call(METHOD,org.jhotdraw.io.Base64,encodeBytes$2 --> encodeBytes$4,org.jhotdraw.io.Base64,);
Call(METHOD,org.jhotdraw.io.Base64,encodeBytes$3 --> encodeBytes$4,org.jhotdraw.io.Base64,);
Call(METHOD,org.jhotdraw.io.Base64,encodeBytes$4 --> encode3to4$2,org.jhotdraw.io.Base64,);
Call(METHOD,org.jhotdraw.io.Base64,decode --> decode4to3,org.jhotdraw.io.Base64,);
Call(METHOD,org.jhotdraw.io.Base64,decode$2 --> decode,org.jhotdraw.io.Base64,);
Call(METHOD,org.jhotdraw.io.Base64,decodeToObject --> decode$2,org.jhotdraw.io.Base64,);
Call(METHOD,org.jhotdraw.io.Base64,access$000 --> encode3to4$2,org.jhotdraw.io.Base64,);
Call(METHOD,org.jhotdraw.io.Base64,access$200 --> decode4to3,org.jhotdraw.io.Base64,);
Call(METHOD,org.jhotdraw.io.Base64,access$300 --> encode3to4,org.jhotdraw.io.Base64,);
Call(ATTRIBUTE,org.jhotdraw.io.Base64,encode3to4$2 --> ALPHABET,org.jhotdraw.io.Base64,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64,decode4to3 --> DECODABET,org.jhotdraw.io.Base64,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64,decode --> DECODABET,org.jhotdraw.io.Base64,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64,access$100 --> DECODABET,org.jhotdraw.io.Base64,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64,<clinit> --> _NATIVE_ALPHABET,org.jhotdraw.io.Base64,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64,<clinit> --> _NATIVE_ALPHABET,org.jhotdraw.io.Base64,WRITE);
Call(ATTRIBUTE,org.jhotdraw.io.Base64,<clinit> --> ALPHABET,org.jhotdraw.io.Base64,WRITE);
Call(ATTRIBUTE,org.jhotdraw.io.Base64,<clinit> --> DECODABET,org.jhotdraw.io.Base64,WRITE);
Call(METHOD,org.jhotdraw.io.Base64,encodeObject$2 --> <init>$2,org.jhotdraw.io.Base64$OutputStream,);
Call(METHOD,org.jhotdraw.io.Base64,encodeBytes$4 --> <init>$2,org.jhotdraw.io.Base64$OutputStream,);
Call(METHOD,org.jhotdraw.io.Base64,encodeBytes$4 --> close,org.jhotdraw.io.Base64$OutputStream,);
Call(METHOD,org.jhotdraw.io.Base64,encodeToFile --> <init>$2,org.jhotdraw.io.Base64$OutputStream,);
Call(METHOD,org.jhotdraw.io.Base64,encodeToFile --> close,org.jhotdraw.io.Base64$OutputStream,);
Call(METHOD,org.jhotdraw.io.Base64,decodeToFile --> <init>$2,org.jhotdraw.io.Base64$OutputStream,);
Call(METHOD,org.jhotdraw.io.Base64,decodeToFile --> close,org.jhotdraw.io.Base64$OutputStream,);
Call(METHOD,org.jhotdraw.io.Base64,decodeFromFile --> <init>$2,org.jhotdraw.io.Base64$InputStream,);
Call(METHOD,org.jhotdraw.io.Base64,decodeFromFile --> read$2,org.jhotdraw.io.Base64$InputStream,);
Call(METHOD,org.jhotdraw.io.Base64,encodeFromFile --> <init>$2,org.jhotdraw.io.Base64$InputStream,);
Call(METHOD,org.jhotdraw.io.Base64,encodeFromFile --> read$2,org.jhotdraw.io.Base64$InputStream,);
EndClass 216
StartClass 217
Class(org.jhotdraw.draw.AttributeKey$1,N,N,NA);
Attribute(val$f,org.jhotdraw.draw.Figure,Public,N,Y,);
Attribute(val$restoreData,java.lang.Object,Public,N,Y,);
Attribute(val$value,java.lang.Object,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.AttributeKey,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(<init>,java.lang.Object,);
Parameter(<init>,java.lang.Object,);
Composition(org.jhotdraw.draw.Figure);
Composition(org.jhotdraw.draw.AttributeKey);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey$1,<init> --> this$0,org.jhotdraw.draw.AttributeKey$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey$1,<init> --> val$f,org.jhotdraw.draw.AttributeKey$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey$1,<init> --> val$restoreData,org.jhotdraw.draw.AttributeKey$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey$1,<init> --> val$value,org.jhotdraw.draw.AttributeKey$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey$1,getPresentationName --> this$0,org.jhotdraw.draw.AttributeKey$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey$1,undo --> val$f,org.jhotdraw.draw.AttributeKey$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey$1,undo --> val$restoreData,org.jhotdraw.draw.AttributeKey$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey$1,redo --> val$f,org.jhotdraw.draw.AttributeKey$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey$1,redo --> this$0,org.jhotdraw.draw.AttributeKey$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AttributeKey$1,redo --> val$value,org.jhotdraw.draw.AttributeKey$1,READ);
Call(METHOD,org.jhotdraw.draw.AttributeKey$1,getPresentationName --> getPresentationName,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.AttributeKey$1,undo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AttributeKey$1,undo --> restoreAttributesTo,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AttributeKey$1,undo --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AttributeKey$1,redo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AttributeKey$1,redo --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AttributeKey$1,redo --> changed,org.jhotdraw.draw.Figure,);
EndClass 217
StartClass 218
Class(org.jhotdraw.util.Methods,N,N,Public);
Method(<init>,void,Private,N,N);
Method(invoke,java.lang.Object,Public,Y,N);
Method(invoke$2,java.lang.Object,Public,Y,N);
Method(invokeStatic,java.lang.Object,Public,Y,N);
Method(invokeStatic$2,java.lang.Object,Public,Y,N);
Method(invokeStatic$3,java.lang.Object,Public,Y,N);
Method(invokeStatic$4,java.lang.Object,Public,Y,N);
Method(invokeStatic$5,java.lang.Object,Public,Y,N);
Method(invokeGetter,int,Public,Y,N);
Method(invokeGetter$2,long,Public,Y,N);
Method(invokeGetter$3,boolean,Public,Y,N);
Method(invokeGetter$4,java.lang.Object,Public,Y,N);
Method(invokeStaticGetter,boolean,Public,Y,N);
Method(invoke$3,java.lang.Object,Public,Y,N);
Method(invoke$4,java.lang.Object,Public,Y,N);
Method(invoke$5,java.lang.Object,Public,Y,N);
Method(invoke$6,java.lang.Object,Public,Y,N);
Method(invoke$7,java.lang.Object,Public,Y,N);
Method(invokeIfExists,void,Public,Y,N);
Method(invokeIfExists$2,void,Public,Y,N);
Method(invokeIfExists$3,void,Public,Y,N);
Method(invokeIfExists$4,void,Public,Y,N);
Method(invokeIfExistsWithEnum,void,Public,Y,N);
Parameter(invoke,java.lang.Object,);
Parameter(invoke,java.lang.String,);
Parameter(invoke$2,java.lang.Object,);
Parameter(invoke$2,java.lang.String,);
Parameter(invoke$2,java.lang.String,);
Parameter(invokeStatic,java.lang.Class,);
Parameter(invokeStatic,java.lang.String,);
Parameter(invokeStatic$2,java.lang.String,);
Parameter(invokeStatic$2,java.lang.String,);
Parameter(invokeStatic$3,java.lang.Class,);
Parameter(invokeStatic$3,java.lang.String,);
Parameter(invokeStatic$3,java.lang.Class[],);
Parameter(invokeStatic$3,java.lang.Object[],);
Parameter(invokeStatic$4,java.lang.String,);
Parameter(invokeStatic$4,java.lang.String,);
Parameter(invokeStatic$4,java.lang.Class[],);
Parameter(invokeStatic$4,java.lang.Object[],);
Parameter(invokeStatic$5,java.lang.String,);
Parameter(invokeStatic$5,java.lang.String,);
Parameter(invokeStatic$5,java.lang.Class[],);
Parameter(invokeStatic$5,java.lang.Object[],);
Parameter(invokeStatic$5,java.lang.Object,);
Parameter(invokeGetter,java.lang.Object,);
Parameter(invokeGetter,java.lang.String,);
Parameter(invokeGetter,int,);
Parameter(invokeGetter$2,java.lang.Object,);
Parameter(invokeGetter$2,java.lang.String,);
Parameter(invokeGetter$2,long,);
Parameter(invokeGetter$3,java.lang.Object,);
Parameter(invokeGetter$3,java.lang.String,);
Parameter(invokeGetter$3,boolean,);
Parameter(invokeGetter$4,java.lang.Object,);
Parameter(invokeGetter$4,java.lang.String,);
Parameter(invokeGetter$4,java.lang.Object,);
Parameter(invokeStaticGetter,java.lang.Class,);
Parameter(invokeStaticGetter,java.lang.String,);
Parameter(invokeStaticGetter,boolean,);
Parameter(invoke$3,java.lang.Object,);
Parameter(invoke$3,java.lang.String,);
Parameter(invoke$3,boolean,);
Parameter(invoke$4,java.lang.Object,);
Parameter(invoke$4,java.lang.String,);
Parameter(invoke$4,int,);
Parameter(invoke$5,java.lang.Object,);
Parameter(invoke$5,java.lang.String,);
Parameter(invoke$5,float,);
Parameter(invoke$6,java.lang.Object,);
Parameter(invoke$6,java.lang.String,);
Parameter(invoke$6,java.lang.Class,);
Parameter(invoke$6,java.lang.Object,);
Parameter(invoke$7,java.lang.Object,);
Parameter(invoke$7,java.lang.String,);
Parameter(invoke$7,java.lang.Class[],);
Parameter(invoke$7,java.lang.Object[],);
Parameter(invokeIfExists,java.lang.Object,);
Parameter(invokeIfExists,java.lang.String,);
Parameter(invokeIfExists$2,java.lang.Object,);
Parameter(invokeIfExists$2,java.lang.String,);
Parameter(invokeIfExists$2,float,);
Parameter(invokeIfExists$3,java.lang.Object,);
Parameter(invokeIfExists$3,java.lang.String,);
Parameter(invokeIfExists$3,boolean,);
Parameter(invokeIfExists$4,java.lang.Object,);
Parameter(invokeIfExists$4,java.lang.String,);
Parameter(invokeIfExists$4,java.lang.Class,);
Parameter(invokeIfExists$4,java.lang.Object,);
Parameter(invokeIfExistsWithEnum,java.lang.Object,);
Parameter(invokeIfExistsWithEnum,java.lang.String,);
Parameter(invokeIfExistsWithEnum,java.lang.String,);
Parameter(invokeIfExistsWithEnum,java.lang.String,);
Call(METHOD,org.jhotdraw.util.Methods,invokeStatic$2 --> invokeStatic,org.jhotdraw.util.Methods,);
Call(METHOD,org.jhotdraw.util.Methods,invokeStatic$4 --> invokeStatic$3,org.jhotdraw.util.Methods,);
Call(METHOD,org.jhotdraw.util.Methods,invokeStatic$5 --> invokeStatic$3,org.jhotdraw.util.Methods,);
Call(METHOD,org.jhotdraw.util.Methods,invokeIfExists --> invoke,org.jhotdraw.util.Methods,);
Call(METHOD,org.jhotdraw.util.Methods,invokeIfExists$2 --> invoke$5,org.jhotdraw.util.Methods,);
Call(METHOD,org.jhotdraw.util.Methods,invokeIfExists$3 --> invoke$3,org.jhotdraw.util.Methods,);
Call(METHOD,org.jhotdraw.util.Methods,invokeIfExists$4 --> invoke$6,org.jhotdraw.util.Methods,);
Call(METHOD,org.jhotdraw.util.Methods,invokeIfExistsWithEnum --> invokeStatic$4,org.jhotdraw.util.Methods,);
Call(METHOD,org.jhotdraw.util.Methods,invokeIfExistsWithEnum --> invoke$6,org.jhotdraw.util.Methods,);
EndClass 218
StartClass 219
Class(org.jhotdraw.gui.JPopupButton,N,N,Public);
Attribute(CLOSE_AUTOMATICALLY_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(COLUMN_COUNT_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(ITEM_FONT_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(popupMenu,javax.swing.JPopupMenu,Private,N,N,);
Attribute(columnCount,int,Private,N,N,);
Attribute(action,javax.swing.Action,Private,N,N,);
Attribute(actionArea,java.awt.Rectangle,Private,N,N,);
Attribute(itemFont,java.awt.Font,Private,N,N,);
Attribute(ITEM_FONT,java.awt.Font,Public,Y,Y,);
Attribute(popupAnchor,int,Private,N,N,);
Attribute(popupBecameInvisible,long,Private,N,N,);
Attribute(isCloseAutomatically,boolean,Private,N,N,);
Attribute(handler,org.jhotdraw.gui.JPopupButton$Handler,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setItemFont,void,Public,N,N);
Method(updateItemFont,void,Private,N,N);
Method(setAction,void,Public,N,N);
Method(getColumnCount,int,Public,N,N);
Method(setColumnCount,void,Public,N,N);
Method(add,javax.swing.AbstractButton,Public,N,N);
Method(add$2,void,Public,N,N);
Method(add$3,void,Public,N,N);
Method(add$4,void,Public,N,N);
Method(addSeparator,void,Public,N,N);
Method(removeAll,void,Public,N,N);
Method(setPopupMenu,void,Public,N,N);
Method(getPopupMenu,javax.swing.JPopupMenu,Public,N,N);
Method(setPopupAlpha,void,Public,N,N);
Method(getPopupAlpha,float,Public,N,N);
Method(getPopupAnchor,int,Public,N,N);
Method(setPopupAnchor,void,Public,N,N);
Method(togglePopup,void,Protected,N,N);
Method(showPopup,void,Protected,N,N);
Method(initComponents,void,Private,N,N);
Method(performAction,void,Private,N,N);
Method(handleMousePressed,void,Private,N,N);
Method(access$002,long,Public,Y,N);
Method(access$100,javax.swing.JPopupMenu,Public,Y,N);
Method(access$300,void,Public,Y,N);
Method(access$400,void,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(setItemFont,java.awt.Font,);
Parameter(updateItemFont,javax.swing.MenuElement,);
Parameter(setAction,javax.swing.Action,);
Parameter(setAction,java.awt.Rectangle,);
Parameter(setColumnCount,int,);
Parameter(setColumnCount,boolean,);
Parameter(add,javax.swing.Action,);
Parameter(add$2,javax.swing.JMenu,);
Parameter(add$3,javax.swing.JComponent,);
Parameter(add$4,javax.swing.JMenuItem,);
Parameter(setPopupMenu,javax.swing.JPopupMenu,);
Parameter(setPopupAlpha,float,);
Parameter(setPopupAnchor,int,);
Parameter(togglePopup,java.awt.event.MouseEvent,);
Parameter(showPopup,java.awt.event.MouseEvent,);
Parameter(performAction,java.awt.event.MouseEvent,);
Parameter(handleMousePressed,java.awt.event.MouseEvent,);
Parameter(access$002,org.jhotdraw.gui.JPopupButton,);
Parameter(access$002,long,);
Parameter(access$100,org.jhotdraw.gui.JPopupButton,);
Parameter(access$300,org.jhotdraw.gui.JPopupButton,);
Parameter(access$300,java.awt.event.MouseEvent,);
Parameter(access$400,org.jhotdraw.gui.JPopupButton,);
Parameter(access$400,java.awt.event.MouseEvent,);
Composition(org.jhotdraw.gui.JPopupButton$Handler);
Call(METHOD,org.jhotdraw.gui.JPopupButton,<init> --> initComponents,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.gui.JPopupButton,setItemFont --> updateItemFont,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.gui.JPopupButton,updateItemFont --> updateItemFont,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.gui.JPopupButton,setColumnCount --> getPopupMenu,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.gui.JPopupButton,setColumnCount --> getColumnCount,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.gui.JPopupButton,add --> getPopupMenu,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.gui.JPopupButton,add --> getColumnCount,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.gui.JPopupButton,add$2 --> updateItemFont,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.gui.JPopupButton,add$3 --> getPopupMenu,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.gui.JPopupButton,add$4 --> getPopupMenu,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.gui.JPopupButton,addSeparator --> getPopupMenu,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.gui.JPopupButton,removeAll --> getPopupMenu,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.gui.JPopupButton,getPopupMenu --> getColumnCount,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.gui.JPopupButton,setPopupAlpha --> getPopupAlpha,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.gui.JPopupButton,setPopupAlpha --> getPopupMenu,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.gui.JPopupButton,getPopupAlpha --> getPopupMenu,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.gui.JPopupButton,togglePopup --> showPopup,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.gui.JPopupButton,handleMousePressed --> togglePopup,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.gui.JPopupButton,access$300 --> handleMousePressed,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.gui.JPopupButton,access$400 --> performAction,org.jhotdraw.gui.JPopupButton,);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,<init> --> ITEM_FONT,org.jhotdraw.gui.JPopupButton,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,<init> --> columnCount,org.jhotdraw.gui.JPopupButton,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,<init> --> popupAnchor,org.jhotdraw.gui.JPopupButton,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,<init> --> handler,org.jhotdraw.gui.JPopupButton,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,<init> --> itemFont,org.jhotdraw.gui.JPopupButton,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,setItemFont --> itemFont,org.jhotdraw.gui.JPopupButton,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,setItemFont --> popupMenu,org.jhotdraw.gui.JPopupButton,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,setItemFont --> itemFont,org.jhotdraw.gui.JPopupButton,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,updateItemFont --> itemFont,org.jhotdraw.gui.JPopupButton,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,setAction --> action,org.jhotdraw.gui.JPopupButton,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,setAction --> handler,org.jhotdraw.gui.JPopupButton,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,setAction --> action,org.jhotdraw.gui.JPopupButton,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,setAction --> actionArea,org.jhotdraw.gui.JPopupButton,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,getColumnCount --> columnCount,org.jhotdraw.gui.JPopupButton,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,setColumnCount --> columnCount,org.jhotdraw.gui.JPopupButton,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,setColumnCount --> columnCount,org.jhotdraw.gui.JPopupButton,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,add --> itemFont,org.jhotdraw.gui.JPopupButton,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,add$4 --> itemFont,org.jhotdraw.gui.JPopupButton,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,setPopupMenu --> popupMenu,org.jhotdraw.gui.JPopupButton,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,setPopupMenu --> handler,org.jhotdraw.gui.JPopupButton,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,setPopupMenu --> popupMenu,org.jhotdraw.gui.JPopupButton,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,getPopupMenu --> popupMenu,org.jhotdraw.gui.JPopupButton,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,getPopupMenu --> handler,org.jhotdraw.gui.JPopupButton,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,getPopupMenu --> popupMenu,org.jhotdraw.gui.JPopupButton,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,getPopupAnchor --> popupAnchor,org.jhotdraw.gui.JPopupButton,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,setPopupAnchor --> popupAnchor,org.jhotdraw.gui.JPopupButton,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,togglePopup --> popupMenu,org.jhotdraw.gui.JPopupButton,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,togglePopup --> popupBecameInvisible,org.jhotdraw.gui.JPopupButton,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,showPopup --> popupMenu,org.jhotdraw.gui.JPopupButton,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,showPopup --> actionArea,org.jhotdraw.gui.JPopupButton,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,showPopup --> popupAnchor,org.jhotdraw.gui.JPopupButton,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,performAction --> actionArea,org.jhotdraw.gui.JPopupButton,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,performAction --> action,org.jhotdraw.gui.JPopupButton,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,access$002 --> popupBecameInvisible,org.jhotdraw.gui.JPopupButton,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,access$100 --> popupMenu,org.jhotdraw.gui.JPopupButton,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton,<clinit> --> ITEM_FONT,org.jhotdraw.gui.JPopupButton,WRITE);
Call(METHOD,org.jhotdraw.gui.JPopupButton,<init> --> <init>$2,org.jhotdraw.gui.JPopupButton$Handler,);
Call(METHOD,org.jhotdraw.gui.JPopupButton,setColumnCount --> <init>$3,org.jhotdraw.gui.VerticalGridLayout,);
Call(METHOD,org.jhotdraw.gui.JPopupButton,add --> <init>,org.jhotdraw.gui.plaf.palette.PaletteMenuItemUI,);
Call(METHOD,org.jhotdraw.gui.JPopupButton,getPopupMenu --> <init>$2,org.jhotdraw.gui.VerticalGridLayout,);
Call(METHOD,org.jhotdraw.gui.JPopupButton,initComponents --> <init>,org.jhotdraw.gui.JPopupButton$1,);
EndClass 219
StartClass 220
Class(org.jhotdraw.draw.tool.DelegationSelectionTool,N,N,Public);
Attribute(DEBUG,boolean,Private,Y,Y,);
Attribute(drawingActions,java.util.Collection,Private,N,N,javax.swing.Action);
Attribute(selectionActions,java.util.Collection,Private,N,N,javax.swing.Action);
Attribute(popupTimer,javax.swing.Timer,Private,N,N,);
Attribute(popupMenu,javax.swing.JPopupMenu,Private,N,N,);
Attribute(lastClickEvent,java.awt.event.MouseEvent,Private,N,N,);
Attribute(isMousePressedPopupTrigger,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(setDrawingActions,void,Public,N,N);
Method(setFigureActions,void,Public,N,N);
Method(mousePressed,void,Public,N,N);
Method(mouseReleased,void,Public,N,N);
Method(mouseDragged,void,Public,N,N);
Method(mouseClicked,void,Public,N,N);
Method(handlePopupMenu,void,Protected,N,N);
Method(showPopupMenu,void,Protected,N,N);
Method(handleDoubleClick,void,Protected,N,N);
Method(handleMultiClick,void,Protected,N,N);
Method(getToolTipText,java.lang.String,Public,N,N);
Method(access$002,javax.swing.Timer,Public,Y,N);
Parameter(<init>$2,java.util.Collection,javax.swing.Action);
Parameter(<init>$2,java.util.Collection,javax.swing.Action);
Parameter(setDrawingActions,java.util.Collection,javax.swing.Action);
Parameter(setFigureActions,java.util.Collection,javax.swing.Action);
Parameter(mousePressed,java.awt.event.MouseEvent,);
Parameter(mouseReleased,java.awt.event.MouseEvent,);
Parameter(mouseDragged,java.awt.event.MouseEvent,);
Parameter(mouseClicked,java.awt.event.MouseEvent,);
Parameter(handlePopupMenu,java.awt.event.MouseEvent,);
Parameter(showPopupMenu,org.jhotdraw.draw.Figure,);
Parameter(showPopupMenu,java.awt.Point,);
Parameter(showPopupMenu,java.awt.Component,);
Parameter(handleDoubleClick,java.awt.event.MouseEvent,);
Parameter(handleMultiClick,java.awt.event.MouseEvent,);
Parameter(getToolTipText,org.jhotdraw.draw.DrawingView,);
Parameter(getToolTipText,java.awt.event.MouseEvent,);
Parameter(access$002,org.jhotdraw.draw.tool.DelegationSelectionTool,);
Parameter(access$002,javax.swing.Timer,);
SuperClass(org.jhotdraw.draw.tool.SelectionTool);
SuperClass(org.jhotdraw.draw.tool.AbstractTool);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.draw.tool.SelectionTool);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,<init> --> <init>$2,org.jhotdraw.draw.tool.DelegationSelectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,mousePressed --> handlePopupMenu,org.jhotdraw.draw.tool.DelegationSelectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,mouseReleased --> handlePopupMenu,org.jhotdraw.draw.tool.DelegationSelectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,mouseClicked --> handleDoubleClick,org.jhotdraw.draw.tool.DelegationSelectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,mouseClicked --> handleMultiClick,org.jhotdraw.draw.tool.DelegationSelectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handlePopupMenu --> showPopupMenu,org.jhotdraw.draw.tool.DelegationSelectionTool,);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool,<init>$2 --> drawingActions,org.jhotdraw.draw.tool.DelegationSelectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool,<init>$2 --> selectionActions,org.jhotdraw.draw.tool.DelegationSelectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool,setDrawingActions --> drawingActions,org.jhotdraw.draw.tool.DelegationSelectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool,setFigureActions --> selectionActions,org.jhotdraw.draw.tool.DelegationSelectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool,mousePressed --> popupTimer,org.jhotdraw.draw.tool.DelegationSelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool,mousePressed --> isMousePressedPopupTrigger,org.jhotdraw.draw.tool.DelegationSelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool,mousePressed --> popupTimer,org.jhotdraw.draw.tool.DelegationSelectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool,mousePressed --> isMousePressedPopupTrigger,org.jhotdraw.draw.tool.DelegationSelectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool,mouseReleased --> popupTimer,org.jhotdraw.draw.tool.DelegationSelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool,mouseReleased --> isMousePressedPopupTrigger,org.jhotdraw.draw.tool.DelegationSelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool,mouseReleased --> popupTimer,org.jhotdraw.draw.tool.DelegationSelectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool,mouseReleased --> isMousePressedPopupTrigger,org.jhotdraw.draw.tool.DelegationSelectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool,mouseDragged --> popupTimer,org.jhotdraw.draw.tool.DelegationSelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool,mouseDragged --> popupMenu,org.jhotdraw.draw.tool.DelegationSelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool,mouseDragged --> popupTimer,org.jhotdraw.draw.tool.DelegationSelectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool,mouseClicked --> lastClickEvent,org.jhotdraw.draw.tool.DelegationSelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool,mouseClicked --> lastClickEvent,org.jhotdraw.draw.tool.DelegationSelectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool,handlePopupMenu --> drawingActions,org.jhotdraw.draw.tool.DelegationSelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool,handlePopupMenu --> popupMenu,org.jhotdraw.draw.tool.DelegationSelectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool,showPopupMenu --> selectionActions,org.jhotdraw.draw.tool.DelegationSelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool,showPopupMenu --> drawingActions,org.jhotdraw.draw.tool.DelegationSelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool,showPopupMenu --> popupMenu,org.jhotdraw.draw.tool.DelegationSelectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool,access$002 --> popupTimer,org.jhotdraw.draw.tool.DelegationSelectionTool,WRITE);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,<init>$2 --> <init>,org.jhotdraw.draw.tool.SelectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,mousePressed --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,mousePressed --> requestFocus,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,mousePressed --> mousePressed,org.jhotdraw.draw.tool.SelectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,mousePressed --> <init>,org.jhotdraw.draw.tool.DelegationSelectionTool$1,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,mouseReleased --> mouseReleased,org.jhotdraw.draw.tool.SelectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,mouseDragged --> mouseDragged,org.jhotdraw.draw.tool.SelectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,mouseClicked --> mouseClicked,org.jhotdraw.draw.tool.SelectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handlePopupMenu --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handlePopupMenu --> findFigure,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,showPopupMenu --> viewToDrawing,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,showPopupMenu --> getActions,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handleDoubleClick --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handleDoubleClick --> findHandle,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handleDoubleClick --> trackDoubleClick,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handleDoubleClick --> viewToDrawing,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handleDoubleClick --> isSelectBehindEnabled,org.jhotdraw.draw.tool.SelectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handleDoubleClick --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handleDoubleClick --> contains,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handleDoubleClick --> findFigure,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handleDoubleClick --> isSelectable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handleDoubleClick --> getTool,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handleDoubleClick --> getDrawing,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handleDoubleClick --> findFigureInside,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handleDoubleClick --> setTracker,org.jhotdraw.draw.tool.SelectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handleDoubleClick --> handleMouseClick,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handleDoubleClick --> clearSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handleDoubleClick --> addToSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handleDoubleClick --> getHandleDetailLevel,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handleDoubleClick --> setHandleDetailLevel,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handleMultiClick --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handleMultiClick --> findHandle,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handleMultiClick --> getHandleDetailLevel,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,handleMultiClick --> setHandleDetailLevel,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,getToolTipText --> findHandle,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,getToolTipText --> getToolTipText,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,getToolTipText --> findFigure,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,getToolTipText --> viewToDrawing,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool,getToolTipText --> getToolTipText,org.jhotdraw.draw.Figure,);
EndClass 220
StartClass 221
Class(org.jhotdraw.draw.action.AlignAction$South,N,N,Public);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(alignFigures,void,Protected,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$2,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$2,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(alignFigures,java.util.Collection,);
Parameter(alignFigures,java.awt.geom.Rectangle2D$Double,);
SuperClass(org.jhotdraw.draw.action.AlignAction);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.AlignAction);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AlignAction$South,<init> --> labels,org.jhotdraw.draw.action.AlignAction,READ);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$South,<init> --> <init>,org.jhotdraw.draw.action.AlignAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$South,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$South,<init>$2 --> <init>,org.jhotdraw.draw.action.AlignAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$South,<init>$2 --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$South,alignFigures --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$South,alignFigures --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$South,alignFigures --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$South,alignFigures --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$South,alignFigures --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$South,alignFigures --> transform,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$South,alignFigures --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$South,alignFigures --> <init>,org.jhotdraw.draw.event.TransformEdit,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$South,alignFigures --> fireUndoableEditHappened,org.jhotdraw.draw.action.AbstractSelectedAction,);
EndClass 221
StartClass 222
Class(org.jhotdraw.draw.action.AlignAction$Vertical,N,N,Public);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(alignFigures,void,Protected,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$2,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$2,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(alignFigures,java.util.Collection,);
Parameter(alignFigures,java.awt.geom.Rectangle2D$Double,);
SuperClass(org.jhotdraw.draw.action.AlignAction);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.AlignAction);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AlignAction$Vertical,<init> --> labels,org.jhotdraw.draw.action.AlignAction,READ);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Vertical,<init> --> <init>,org.jhotdraw.draw.action.AlignAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Vertical,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Vertical,<init>$2 --> <init>,org.jhotdraw.draw.action.AlignAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Vertical,<init>$2 --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Vertical,alignFigures --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Vertical,alignFigures --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Vertical,alignFigures --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Vertical,alignFigures --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Vertical,alignFigures --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Vertical,alignFigures --> transform,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Vertical,alignFigures --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Vertical,alignFigures --> <init>,org.jhotdraw.draw.event.TransformEdit,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Vertical,alignFigures --> fireUndoableEditHappened,org.jhotdraw.draw.action.AbstractSelectedAction,);
EndClass 222
StartClass 223
Class(org.jhotdraw.draw.action.SelectionColorChooserAction,N,N,Public);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(<init>$5,void,Public,N,N);
Method(getInitialColor,java.awt.Color,Protected,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(<init>,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$2,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(<init>$2,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$2,javax.swing.Icon,);
Parameter(<init>$3,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(<init>$3,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$3,java.lang.String,);
Parameter(<init>$4,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(<init>$4,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$4,java.lang.String,);
Parameter(<init>$4,javax.swing.Icon,);
Parameter(<init>$5,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(<init>$5,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(<init>$5,java.lang.String,);
Parameter(<init>$5,javax.swing.Icon,);
Parameter(<init>$5,java.util.Map,);
SuperClass(org.jhotdraw.draw.action.EditorColorChooserAction);
SuperClass(org.jhotdraw.draw.action.AttributeAction);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.EditorColorChooserAction);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserAction,<init> --> <init>$4,org.jhotdraw.draw.action.SelectionColorChooserAction,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserAction,<init>$2 --> <init>$4,org.jhotdraw.draw.action.SelectionColorChooserAction,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserAction,<init>$3 --> <init>$4,org.jhotdraw.draw.action.SelectionColorChooserAction,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserAction,<init>$4 --> <init>$5,org.jhotdraw.draw.action.SelectionColorChooserAction,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserAction,getInitialColor --> key,org.jhotdraw.draw.action.EditorColorChooserAction,READ);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserAction,<init>$5 --> <init>$5,org.jhotdraw.draw.action.EditorColorChooserAction,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserAction,getInitialColor --> getEditor,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserAction,getInitialColor --> getActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserAction,getInitialColor --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserAction,getInitialColor --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserAction,getInitialColor --> getInitialColor,org.jhotdraw.draw.action.EditorColorChooserAction,);
EndClass 223
StartClass 224
Class(org.jhotdraw.draw.action.ButtonFactory$ToolButtonListener,N,N,NA);
Attribute(tool,org.jhotdraw.draw.tool.Tool,Private,N,N,);
Attribute(editor,org.jhotdraw.draw.DrawingEditor,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(itemStateChanged,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.tool.Tool,);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(itemStateChanged,java.awt.event.ItemEvent,);
Composition(org.jhotdraw.draw.tool.Tool);
Composition(org.jhotdraw.draw.DrawingEditor);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$ToolButtonListener,<init> --> tool,org.jhotdraw.draw.action.ButtonFactory$ToolButtonListener,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$ToolButtonListener,<init> --> editor,org.jhotdraw.draw.action.ButtonFactory$ToolButtonListener,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$ToolButtonListener,itemStateChanged --> editor,org.jhotdraw.draw.action.ButtonFactory$ToolButtonListener,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$ToolButtonListener,itemStateChanged --> tool,org.jhotdraw.draw.action.ButtonFactory$ToolButtonListener,READ);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$ToolButtonListener,itemStateChanged --> setTool,org.jhotdraw.draw.DrawingEditor,);
EndClass 224
StartClass 225
Class(org.jhotdraw.draw.action.AttributeToggler,N,N,Public);
Attribute(editor,org.jhotdraw.draw.DrawingEditor,Private,N,N,);
Attribute(key,org.jhotdraw.draw.AttributeKey,Private,N,N,);
Attribute(value1,java.lang.Object,Private,N,N,);
Attribute(value2,java.lang.Object,Private,N,N,);
Attribute(compatibleTextAction,javax.swing.Action,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getView,org.jhotdraw.draw.DrawingView,Public,N,N);
Method(getEditor,org.jhotdraw.draw.DrawingEditor,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(access$000,org.jhotdraw.draw.AttributeKey,Public,Y,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>,java.lang.Object,);
Parameter(<init>,java.lang.Object,);
Parameter(<init>$2,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$2,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$2,java.lang.Object,);
Parameter(<init>$2,java.lang.Object,);
Parameter(<init>$2,javax.swing.Action,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(access$000,org.jhotdraw.draw.action.AttributeToggler,);
Composition(org.jhotdraw.draw.DrawingEditor);
Composition(org.jhotdraw.draw.AttributeKey);
Call(METHOD,org.jhotdraw.draw.action.AttributeToggler,<init> --> <init>$2,org.jhotdraw.draw.action.AttributeToggler,);
Call(METHOD,org.jhotdraw.draw.action.AttributeToggler,actionPerformed --> getView,org.jhotdraw.draw.action.AttributeToggler,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeToggler,<init>$2 --> editor,org.jhotdraw.draw.action.AttributeToggler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeToggler,<init>$2 --> key,org.jhotdraw.draw.action.AttributeToggler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeToggler,<init>$2 --> value1,org.jhotdraw.draw.action.AttributeToggler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeToggler,<init>$2 --> value2,org.jhotdraw.draw.action.AttributeToggler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeToggler,<init>$2 --> compatibleTextAction,org.jhotdraw.draw.action.AttributeToggler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeToggler,getView --> editor,org.jhotdraw.draw.action.AttributeToggler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeToggler,getEditor --> editor,org.jhotdraw.draw.action.AttributeToggler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeToggler,actionPerformed --> compatibleTextAction,org.jhotdraw.draw.action.AttributeToggler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeToggler,actionPerformed --> value1,org.jhotdraw.draw.action.AttributeToggler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeToggler,actionPerformed --> key,org.jhotdraw.draw.action.AttributeToggler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeToggler,actionPerformed --> value2,org.jhotdraw.draw.action.AttributeToggler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeToggler,access$000 --> key,org.jhotdraw.draw.action.AttributeToggler,READ);
Call(METHOD,org.jhotdraw.draw.action.AttributeToggler,getView --> getActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.AttributeToggler,actionPerformed --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AttributeToggler,actionPerformed --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AttributeToggler,actionPerformed --> getAttributesRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AttributeToggler,actionPerformed --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AttributeToggler,actionPerformed --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AttributeToggler,actionPerformed --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AttributeToggler,actionPerformed --> <init>,org.jhotdraw.draw.action.AttributeToggler$1,);
Call(METHOD,org.jhotdraw.draw.action.AttributeToggler,actionPerformed --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AttributeToggler,actionPerformed --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
EndClass 225
StartClass 226
Class(org.jhotdraw.draw.action.AbstractSelectedAction,N,Y,Public);
Attribute(editor,org.jhotdraw.draw.DrawingEditor,Private,N,N,);
Attribute(activeView,org.jhotdraw.draw.DrawingView,Private,N,N,);
Attribute(eventHandler,org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(updateEnabledState,void,Protected,N,N);
Method(dispose,void,Public,N,N);
Method(setEditor,void,Public,N,N);
Method(getEditor,org.jhotdraw.draw.DrawingEditor,Public,N,N);
Method(getView,org.jhotdraw.draw.DrawingView,Protected,N,N);
Method(getDrawing,org.jhotdraw.draw.Drawing,Protected,N,N);
Method(fireUndoableEditHappened,void,Protected,N,N);
Method(setUpdateEnabledState,void,Public,N,N);
Method(isUpdatEnabledState,boolean,Public,N,N);
Method(unregisterEventHandler,void,Private,N,N);
Method(registerEventHandler,void,Private,N,N);
Method(access$000,org.jhotdraw.draw.DrawingView,Public,Y,N);
Method(access$002,org.jhotdraw.draw.DrawingView,Public,Y,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(setEditor,org.jhotdraw.draw.DrawingEditor,);
Parameter(fireUndoableEditHappened,javax.swing.undo.UndoableEdit,);
Parameter(setUpdateEnabledState,boolean,);
Parameter(access$000,org.jhotdraw.draw.action.AbstractSelectedAction,);
Parameter(access$002,org.jhotdraw.draw.action.AbstractSelectedAction,);
Parameter(access$002,org.jhotdraw.draw.DrawingView,);
SubClass(org.jhotdraw.draw.action.MoveConstrainedAction$South);
SubClass(org.jhotdraw.draw.action.MoveConstrainedAction$West);
SubClass(org.jhotdraw.draw.action.MoveConstrainedAction$East);
SubClass(org.jhotdraw.draw.action.MoveConstrainedAction$North);
SubClass(org.jhotdraw.draw.action.MoveConstrainedAction);
SubClass(org.jhotdraw.draw.action.MoveAction$South);
SubClass(org.jhotdraw.draw.action.MoveAction$West);
SubClass(org.jhotdraw.draw.action.MoveAction$North);
SubClass(org.jhotdraw.draw.action.MoveAction$East);
SubClass(org.jhotdraw.draw.action.MoveAction);
SubClass(org.jhotdraw.draw.action.IncreaseHandleDetailLevelAction);
SubClass(org.jhotdraw.draw.action.UngroupAction);
SubClass(org.jhotdraw.draw.action.GroupAction);
SubClass(org.jhotdraw.draw.action.SelectionColorChooserAction);
SubClass(org.jhotdraw.draw.action.DrawingColorChooserAction);
SubClass(org.jhotdraw.draw.action.EditorColorChooserAction);
SubClass(org.jhotdraw.draw.action.AttributeAction);
SubClass(org.jhotdraw.draw.action.SendToBackAction);
SubClass(org.jhotdraw.draw.action.DefaultAttributeAction);
SubClass(org.jhotdraw.draw.action.AlignAction$South);
SubClass(org.jhotdraw.draw.action.AlignAction$Vertical);
SubClass(org.jhotdraw.draw.action.AlignAction$Horizontal);
SubClass(org.jhotdraw.draw.action.AlignAction$West);
SubClass(org.jhotdraw.draw.action.AlignAction$East);
SubClass(org.jhotdraw.draw.action.AlignAction$North);
SubClass(org.jhotdraw.draw.action.AlignAction);
SubClass(org.jhotdraw.draw.action.PickAttributesAction);
SubClass(org.jhotdraw.draw.action.BringToFrontAction);
SubClass(org.jhotdraw.draw.action.SelectSameAction);
SubClass(org.jhotdraw.draw.action.FontChooserHandler);
SubClass(org.jhotdraw.draw.action.ApplyAttributesAction);
SubClass(org.jhotdraw.draw.action.SelectionColorChooserHandler);
Realization(org.jhotdraw.app.Disposable);
Composition(org.jhotdraw.draw.DrawingEditor);
Composition(org.jhotdraw.draw.DrawingView);
Composition(org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,<init> --> setEditor,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,updateEnabledState --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,dispose --> setEditor,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,setEditor --> unregisterEventHandler,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,setEditor --> registerEventHandler,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,setEditor --> updateEnabledState,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,getDrawing --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,fireUndoableEditHappened --> getDrawing,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,setUpdateEnabledState --> registerEventHandler,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,setUpdateEnabledState --> unregisterEventHandler,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,setUpdateEnabledState --> updateEnabledState,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractSelectedAction,<init> --> eventHandler,org.jhotdraw.draw.action.AbstractSelectedAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractSelectedAction,setEditor --> eventHandler,org.jhotdraw.draw.action.AbstractSelectedAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractSelectedAction,setEditor --> editor,org.jhotdraw.draw.action.AbstractSelectedAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractSelectedAction,getEditor --> editor,org.jhotdraw.draw.action.AbstractSelectedAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractSelectedAction,getView --> editor,org.jhotdraw.draw.action.AbstractSelectedAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractSelectedAction,setUpdateEnabledState --> eventHandler,org.jhotdraw.draw.action.AbstractSelectedAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractSelectedAction,setUpdateEnabledState --> eventHandler,org.jhotdraw.draw.action.AbstractSelectedAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractSelectedAction,isUpdatEnabledState --> eventHandler,org.jhotdraw.draw.action.AbstractSelectedAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractSelectedAction,unregisterEventHandler --> editor,org.jhotdraw.draw.action.AbstractSelectedAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractSelectedAction,unregisterEventHandler --> eventHandler,org.jhotdraw.draw.action.AbstractSelectedAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractSelectedAction,unregisterEventHandler --> activeView,org.jhotdraw.draw.action.AbstractSelectedAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractSelectedAction,unregisterEventHandler --> activeView,org.jhotdraw.draw.action.AbstractSelectedAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractSelectedAction,registerEventHandler --> editor,org.jhotdraw.draw.action.AbstractSelectedAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractSelectedAction,registerEventHandler --> eventHandler,org.jhotdraw.draw.action.AbstractSelectedAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractSelectedAction,registerEventHandler --> activeView,org.jhotdraw.draw.action.AbstractSelectedAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractSelectedAction,registerEventHandler --> activeView,org.jhotdraw.draw.action.AbstractSelectedAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractSelectedAction,access$000 --> activeView,org.jhotdraw.draw.action.AbstractSelectedAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractSelectedAction,access$002 --> activeView,org.jhotdraw.draw.action.AbstractSelectedAction,WRITE);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,<init> --> <init>$2,org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,updateEnabledState --> isEnabled,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,updateEnabledState --> getSelectionCount,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,getView --> getActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,getDrawing --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,fireUndoableEditHappened --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,setUpdateEnabledState --> <init>$2,org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,unregisterEventHandler --> removePropertyChangeListener,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,unregisterEventHandler --> removeFigureSelectionListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,unregisterEventHandler --> removePropertyChangeListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,registerEventHandler --> <init>,org.jhotdraw.beans.WeakPropertyChangeListener,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,registerEventHandler --> addPropertyChangeListener,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,registerEventHandler --> removeFigureSelectionListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,registerEventHandler --> removePropertyChangeListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,registerEventHandler --> getActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,registerEventHandler --> addFigureSelectionListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction,registerEventHandler --> addPropertyChangeListener,org.jhotdraw.draw.DrawingView,);
EndClass 226
StartClass 227
Class(org.jhotdraw.draw.action.GroupAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Attribute(prototype,org.jhotdraw.draw.CompositeFigure,Private,N,N,);
Attribute(isGroupingAction,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(updateEnabledState,void,Protected,N,N);
Method(canGroup,boolean,Protected,N,N);
Method(canUngroup,boolean,Protected,N,N);
Method(actionPerformed,void,Public,N,N);
Method(ungroupFigures,java.util.Collection,Public,N,N);
Method(groupFigures,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$2,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$2,org.jhotdraw.draw.CompositeFigure,);
Parameter(<init>$3,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$3,org.jhotdraw.draw.CompositeFigure,);
Parameter(<init>$3,boolean,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(ungroupFigures,org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.Figure);
Parameter(ungroupFigures,org.jhotdraw.draw.CompositeFigure,);
Parameter(groupFigures,org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.Figure);
Parameter(groupFigures,org.jhotdraw.draw.CompositeFigure,);
Parameter(groupFigures,java.util.Collection,);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
SubClass(org.jhotdraw.draw.action.UngroupAction);
Generalization(org.jhotdraw.draw.action.AbstractSelectedAction);
Composition(org.jhotdraw.draw.CompositeFigure);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,<init> --> <init>$3,org.jhotdraw.draw.action.GroupAction,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,<init>$2 --> <init>$3,org.jhotdraw.draw.action.GroupAction,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,<init>$3 --> updateEnabledState,org.jhotdraw.draw.action.GroupAction,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,updateEnabledState --> canGroup,org.jhotdraw.draw.action.GroupAction,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,updateEnabledState --> canUngroup,org.jhotdraw.draw.action.GroupAction,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,actionPerformed --> canGroup,org.jhotdraw.draw.action.GroupAction,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,actionPerformed --> groupFigures,org.jhotdraw.draw.action.GroupAction,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,actionPerformed --> canUngroup,org.jhotdraw.draw.action.GroupAction,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,actionPerformed --> ungroupFigures,org.jhotdraw.draw.action.GroupAction,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction,<init>$3 --> prototype,org.jhotdraw.draw.action.GroupAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction,<init>$3 --> isGroupingAction,org.jhotdraw.draw.action.GroupAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction,updateEnabledState --> isGroupingAction,org.jhotdraw.draw.action.GroupAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction,canUngroup --> prototype,org.jhotdraw.draw.action.GroupAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction,actionPerformed --> isGroupingAction,org.jhotdraw.draw.action.GroupAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction,actionPerformed --> prototype,org.jhotdraw.draw.action.GroupAction,READ);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,<init> --> <init>,org.jhotdraw.draw.GroupFigure,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,<init>$3 --> <init>,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,<init>$3 --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,<init>$3 --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,updateEnabledState --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,canGroup --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,canGroup --> getSelectionCount,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,canUngroup --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,canUngroup --> getSelectionCount,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,canUngroup --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,actionPerformed --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,actionPerformed --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,actionPerformed --> clone,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,actionPerformed --> <init>,org.jhotdraw.draw.action.GroupAction$1,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,actionPerformed --> fireUndoableEditHappened,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,actionPerformed --> <init>,org.jhotdraw.draw.action.GroupAction$2,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,ungroupFigures --> getChildren,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,ungroupFigures --> clearSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,ungroupFigures --> basicRemoveAllChildren,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,ungroupFigures --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,ungroupFigures --> indexOf,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,ungroupFigures --> basicAddAll,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,ungroupFigures --> remove,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,ungroupFigures --> addToSelection$2,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,groupFigures --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,groupFigures --> sort,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,groupFigures --> indexOf,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,groupFigures --> basicRemoveAll,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,groupFigures --> clearSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,groupFigures --> add$2,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,groupFigures --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,groupFigures --> basicAdd,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,groupFigures --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction,groupFigures --> addToSelection,org.jhotdraw.draw.DrawingView,);
EndClass 227
StartClass 228
Class(org.jhotdraw.draw.action.UngroupAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Attribute(prototype,org.jhotdraw.draw.CompositeFigure,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$2,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$2,org.jhotdraw.draw.CompositeFigure,);
SuperClass(org.jhotdraw.draw.action.GroupAction);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.GroupAction);
Composition(org.jhotdraw.draw.CompositeFigure);
Call(METHOD,org.jhotdraw.draw.action.UngroupAction,<init> --> <init>,org.jhotdraw.draw.GroupFigure,);
Call(METHOD,org.jhotdraw.draw.action.UngroupAction,<init> --> <init>$3,org.jhotdraw.draw.action.GroupAction,);
Call(METHOD,org.jhotdraw.draw.action.UngroupAction,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.UngroupAction,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.UngroupAction,<init> --> updateEnabledState,org.jhotdraw.draw.action.GroupAction,);
Call(METHOD,org.jhotdraw.draw.action.UngroupAction,<init>$2 --> <init>$3,org.jhotdraw.draw.action.GroupAction,);
Call(METHOD,org.jhotdraw.draw.action.UngroupAction,<init>$2 --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.UngroupAction,<init>$2 --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.UngroupAction,<init>$2 --> updateEnabledState,org.jhotdraw.draw.action.GroupAction,);
EndClass 228
StartClass 229
Class(org.jhotdraw.draw.action.ButtonFactory$10,N,N,NA);
Attribute(val$toggleButton,javax.swing.JToggleButton,Public,N,Y,);
Attribute(val$view,org.jhotdraw.draw.DrawingView,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(propertyChange,void,Public,N,N);
Parameter(<init>,javax.swing.JToggleButton,);
Parameter(<init>,org.jhotdraw.draw.DrawingView,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Composition(org.jhotdraw.draw.DrawingView);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$10,<init> --> val$toggleButton,org.jhotdraw.draw.action.ButtonFactory$10,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$10,<init> --> val$view,org.jhotdraw.draw.action.ButtonFactory$10,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$10,propertyChange --> val$toggleButton,org.jhotdraw.draw.action.ButtonFactory$10,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$10,propertyChange --> val$view,org.jhotdraw.draw.action.ButtonFactory$10,READ);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$10,propertyChange --> isConstrainerVisible,org.jhotdraw.draw.DrawingView,);
EndClass 229
StartClass 230
Class(org.jhotdraw.draw.action.AlignAction$Horizontal,N,N,Public);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(alignFigures,void,Protected,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$2,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$2,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(alignFigures,java.util.Collection,);
Parameter(alignFigures,java.awt.geom.Rectangle2D$Double,);
SuperClass(org.jhotdraw.draw.action.AlignAction);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.AlignAction);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AlignAction$Horizontal,<init> --> labels,org.jhotdraw.draw.action.AlignAction,READ);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Horizontal,<init> --> <init>,org.jhotdraw.draw.action.AlignAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Horizontal,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Horizontal,<init>$2 --> <init>,org.jhotdraw.draw.action.AlignAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Horizontal,<init>$2 --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Horizontal,alignFigures --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Horizontal,alignFigures --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Horizontal,alignFigures --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Horizontal,alignFigures --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Horizontal,alignFigures --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Horizontal,alignFigures --> transform,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Horizontal,alignFigures --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Horizontal,alignFigures --> <init>,org.jhotdraw.draw.event.TransformEdit,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$Horizontal,alignFigures --> fireUndoableEditHappened,org.jhotdraw.draw.action.AbstractSelectedAction,);
EndClass 230
StartClass 231
Class(org.jhotdraw.draw.action.AttributeAction,N,N,Public);
Attribute(attributes,java.util.Map,Protected,N,N,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(<init>$5,void,Public,N,N);
Method(<init>$6,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(applyAttributesTo,void,Public,N,N);
Method(updateEnabledState,void,Protected,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>,java.lang.Object,);
Parameter(<init>$2,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$2,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$2,java.lang.Object,);
Parameter(<init>$2,javax.swing.Icon,);
Parameter(<init>$3,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$3,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$3,java.lang.Object,);
Parameter(<init>$3,java.lang.String,);
Parameter(<init>$4,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$4,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$4,java.lang.Object,);
Parameter(<init>$4,java.lang.String,);
Parameter(<init>$4,javax.swing.Icon,);
Parameter(<init>$5,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$5,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$5,java.lang.Object,);
Parameter(<init>$5,java.lang.String,);
Parameter(<init>$5,javax.swing.Icon,);
Parameter(<init>$5,javax.swing.Action,);
Parameter(<init>$6,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(<init>$6,java.util.Map,);
Parameter(<init>$6,java.lang.String,);
Parameter(<init>$6,javax.swing.Icon,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(applyAttributesTo,java.util.Map,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(applyAttributesTo,java.util.Set,org.jhotdraw.draw.Figure);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
SubClass(org.jhotdraw.draw.action.SelectionColorChooserAction);
SubClass(org.jhotdraw.draw.action.DrawingColorChooserAction);
SubClass(org.jhotdraw.draw.action.EditorColorChooserAction);
Generalization(org.jhotdraw.draw.action.AbstractSelectedAction);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction,<init> --> <init>$4,org.jhotdraw.draw.action.AttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction,<init>$2 --> <init>$4,org.jhotdraw.draw.action.AttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction,<init>$3 --> <init>$4,org.jhotdraw.draw.action.AttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction,<init>$4 --> <init>$5,org.jhotdraw.draw.action.AttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction,<init>$5 --> updateEnabledState,org.jhotdraw.draw.action.AttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction,<init>$6 --> updateEnabledState,org.jhotdraw.draw.action.AttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction,actionPerformed --> applyAttributesTo,org.jhotdraw.draw.action.AttributeAction,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeAction,<init>$5 --> attributes,org.jhotdraw.draw.action.AttributeAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeAction,<init>$5 --> attributes,org.jhotdraw.draw.action.AttributeAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeAction,<init>$6 --> attributes,org.jhotdraw.draw.action.AttributeAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeAction,actionPerformed --> attributes,org.jhotdraw.draw.action.AttributeAction,READ);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction,<init>$5 --> <init>,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction,<init>$5 --> getPresentationName,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction,<init>$6 --> <init>,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction,actionPerformed --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction,actionPerformed --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction,applyAttributesTo --> getEditor,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction,applyAttributesTo --> setDefaultAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction,applyAttributesTo --> getAttributesRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction,applyAttributesTo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction,applyAttributesTo --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction,applyAttributesTo --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction,applyAttributesTo --> <init>,org.jhotdraw.draw.action.AttributeAction$1,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction,applyAttributesTo --> getDrawing,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction,applyAttributesTo --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction,updateEnabledState --> getEditor,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction,updateEnabledState --> isEnabled,org.jhotdraw.draw.DrawingEditor,);
EndClass 231
StartClass 232
Class(org.jhotdraw.draw.action.SendToBackAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(sendToBack,void,Public,Y,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(sendToBack,org.jhotdraw.draw.DrawingView,);
Parameter(sendToBack,java.util.Collection,);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.AbstractSelectedAction);
Call(METHOD,org.jhotdraw.draw.action.SendToBackAction,actionPerformed --> sendToBack,org.jhotdraw.draw.action.SendToBackAction,);
Call(METHOD,org.jhotdraw.draw.action.SendToBackAction,<init> --> <init>,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.SendToBackAction,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.SendToBackAction,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.SendToBackAction,<init> --> updateEnabledState,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.SendToBackAction,actionPerformed --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.SendToBackAction,actionPerformed --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.SendToBackAction,actionPerformed --> <init>,org.jhotdraw.draw.action.SendToBackAction$1,);
Call(METHOD,org.jhotdraw.draw.action.SendToBackAction,actionPerformed --> fireUndoableEditHappened,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.SendToBackAction,sendToBack --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.SendToBackAction,sendToBack --> sendToBack,org.jhotdraw.draw.Drawing,);
EndClass 232
StartClass 233
Class(org.jhotdraw.draw.action.DefaultAttributeAction,N,N,Public);
Attribute(keys,org.jhotdraw.draw.AttributeKey[],Private,N,N,);
Attribute(fixedAttributes,java.util.Map,Private,N,N,org.jhotdraw.draw.AttributeKey;java.lang.Object,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(<init>$5,void,Public,N,N);
Method(<init>$6,void,Public,N,N);
Method(<init>$7,void,Public,N,N);
Method(<init>$8,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(changeAttribute,void,Public,N,N);
Method(selectionChanged,void,Public,N,N);
Method(access$000,org.jhotdraw.draw.AttributeKey[],Public,Y,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$2,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(<init>$2,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$2,java.util.Map,);
Parameter(<init>$3,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$3,org.jhotdraw.draw.AttributeKey[],);
Parameter(<init>$4,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$4,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$4,javax.swing.Icon,);
Parameter(<init>$5,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$5,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$5,java.lang.String,);
Parameter(<init>$6,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$6,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$6,java.lang.String,);
Parameter(<init>$6,javax.swing.Icon,);
Parameter(<init>$7,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$7,org.jhotdraw.draw.AttributeKey[],);
Parameter(<init>$7,java.lang.String,);
Parameter(<init>$7,javax.swing.Icon,);
Parameter(<init>$8,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(<init>$8,org.jhotdraw.draw.AttributeKey[],);
Parameter(<init>$8,java.lang.String,);
Parameter(<init>$8,javax.swing.Icon,);
Parameter(<init>$8,java.util.Map,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(selectionChanged,org.jhotdraw.draw.event.FigureSelectionEvent,);
Parameter(access$000,org.jhotdraw.draw.action.DefaultAttributeAction,);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.AbstractSelectedAction);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,<init> --> <init>$6,org.jhotdraw.draw.action.DefaultAttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,<init>$2 --> <init>$8,org.jhotdraw.draw.action.DefaultAttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,<init>$3 --> <init>$7,org.jhotdraw.draw.action.DefaultAttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,<init>$4 --> <init>$6,org.jhotdraw.draw.action.DefaultAttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,<init>$5 --> <init>$6,org.jhotdraw.draw.action.DefaultAttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,<init>$6 --> <init>$7,org.jhotdraw.draw.action.DefaultAttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,<init>$7 --> <init>$8,org.jhotdraw.draw.action.DefaultAttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,actionPerformed --> changeAttribute,org.jhotdraw.draw.action.DefaultAttributeAction,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DefaultAttributeAction,<init>$8 --> keys,org.jhotdraw.draw.action.DefaultAttributeAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DefaultAttributeAction,<init>$8 --> fixedAttributes,org.jhotdraw.draw.action.DefaultAttributeAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DefaultAttributeAction,changeAttribute --> keys,org.jhotdraw.draw.action.DefaultAttributeAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DefaultAttributeAction,changeAttribute --> fixedAttributes,org.jhotdraw.draw.action.DefaultAttributeAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DefaultAttributeAction,access$000 --> keys,org.jhotdraw.draw.action.DefaultAttributeAction,READ);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,<init>$8 --> <init>,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,<init>$8 --> <init>,org.jhotdraw.draw.action.DefaultAttributeAction$1,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,<init>$8 --> addPropertyChangeListener,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,<init>$8 --> updateEnabledState,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,actionPerformed --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,actionPerformed --> getSelectionCount,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,actionPerformed --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,actionPerformed --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,actionPerformed --> <init>$3,org.jhotdraw.undo.CompositeEdit,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,actionPerformed --> fireUndoableEditHappened,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,changeAttribute --> <init>$3,org.jhotdraw.undo.CompositeEdit,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,changeAttribute --> fireUndoableEditHappened,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,changeAttribute --> getEditor,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,changeAttribute --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,changeAttribute --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,changeAttribute --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,changeAttribute --> getDefaultAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,changeAttribute --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction,changeAttribute --> changed,org.jhotdraw.draw.Figure,);
EndClass 233
StartClass 234
Class(org.jhotdraw.draw.action.AlignAction,N,Y,Public);
Attribute(labels,org.jhotdraw.util.ResourceBundleUtil,Protected,N,N,);
Method(<init>,void,Public,N,N);
Method(updateEnabledState,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(alignFigures,void,Protected,N,Y);
Method(getSelectionBounds,java.awt.geom.Rectangle2D$Double,Protected,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(alignFigures,java.util.Collection,);
Parameter(alignFigures,java.awt.geom.Rectangle2D$Double,);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
SubClass(org.jhotdraw.draw.action.AlignAction$South);
SubClass(org.jhotdraw.draw.action.AlignAction$Vertical);
SubClass(org.jhotdraw.draw.action.AlignAction$Horizontal);
SubClass(org.jhotdraw.draw.action.AlignAction$West);
SubClass(org.jhotdraw.draw.action.AlignAction$East);
SubClass(org.jhotdraw.draw.action.AlignAction$North);
Generalization(org.jhotdraw.draw.action.AbstractSelectedAction);
Composition(org.jhotdraw.util.ResourceBundleUtil);
Call(METHOD,org.jhotdraw.draw.action.AlignAction,<init> --> updateEnabledState,org.jhotdraw.draw.action.AlignAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction,actionPerformed --> getSelectionBounds,org.jhotdraw.draw.action.AlignAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction,actionPerformed --> alignFigures,org.jhotdraw.draw.action.AlignAction,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AlignAction,<init> --> labels,org.jhotdraw.draw.action.AlignAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AlignAction,actionPerformed --> labels,org.jhotdraw.draw.action.AlignAction,READ);
Call(METHOD,org.jhotdraw.draw.action.AlignAction,<init> --> <init>,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction,updateEnabledState --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction,updateEnabledState --> isEnabled,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction,updateEnabledState --> getSelectionCount,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction,actionPerformed --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction,actionPerformed --> <init>$3,org.jhotdraw.undo.CompositeEdit,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction,actionPerformed --> fireUndoableEditHappened,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction,actionPerformed --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction,actionPerformed --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction,getSelectionBounds --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction,getSelectionBounds --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction,getSelectionBounds --> getBounds,org.jhotdraw.draw.Figure,);
EndClass 234
StartClass 235
Class(org.jhotdraw.draw.action.StrokeIcon,N,N,Public);
Attribute(stroke,java.awt.Stroke,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getIconHeight,int,Public,N,N);
Method(getIconWidth,int,Public,N,N);
Method(paintIcon,void,Public,N,N);
Parameter(<init>,java.awt.Stroke,);
Parameter(paintIcon,java.awt.Component,);
Parameter(paintIcon,java.awt.Graphics,);
Parameter(paintIcon,int,);
Parameter(paintIcon,int,);
Call(METHOD,org.jhotdraw.draw.action.StrokeIcon,paintIcon --> getIconHeight,org.jhotdraw.draw.action.StrokeIcon,);
Call(METHOD,org.jhotdraw.draw.action.StrokeIcon,paintIcon --> getIconWidth,org.jhotdraw.draw.action.StrokeIcon,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.StrokeIcon,<init> --> stroke,org.jhotdraw.draw.action.StrokeIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.StrokeIcon,paintIcon --> stroke,org.jhotdraw.draw.action.StrokeIcon,READ);
EndClass 235
StartClass 236
Class(org.jhotdraw.draw.action.PickAttributesAction,N,N,Public);
Attribute(excludedAttributes,java.util.Set,Private,N,N,org.jhotdraw.draw.AttributeKey);
Method(<init>,void,Public,N,N);
Method(setExcludedAttributes,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(pickAttributes,void,Public,N,N);
Method(selectionChanged,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(setExcludedAttributes,java.util.Set,org.jhotdraw.draw.AttributeKey);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(selectionChanged,org.jhotdraw.draw.event.FigureSelectionEvent,);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.AbstractSelectedAction);
Call(METHOD,org.jhotdraw.draw.action.PickAttributesAction,actionPerformed --> pickAttributes,org.jhotdraw.draw.action.PickAttributesAction,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.PickAttributesAction,<init> --> excludedAttributes,org.jhotdraw.draw.action.PickAttributesAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.PickAttributesAction,setExcludedAttributes --> excludedAttributes,org.jhotdraw.draw.action.PickAttributesAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.PickAttributesAction,pickAttributes --> excludedAttributes,org.jhotdraw.draw.action.PickAttributesAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.PickAttributesAction,<init> --> TRANSFORM,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.PickAttributesAction,<init> --> TEXT,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.action.PickAttributesAction,<init> --> <init>,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.PickAttributesAction,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.PickAttributesAction,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.PickAttributesAction,<init> --> updateEnabledState,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.PickAttributesAction,pickAttributes --> getEditor,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.PickAttributesAction,pickAttributes --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.PickAttributesAction,pickAttributes --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.PickAttributesAction,pickAttributes --> getAttributes,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.PickAttributesAction,pickAttributes --> setDefaultAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.PickAttributesAction,selectionChanged --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.PickAttributesAction,selectionChanged --> getSelectionCount,org.jhotdraw.draw.DrawingView,);
EndClass 236
StartClass 237
Class(org.jhotdraw.draw.action.SelectionColorIcon,N,N,Public);
Attribute(editor,org.jhotdraw.draw.DrawingEditor,Private,N,N,);
Attribute(key,org.jhotdraw.draw.AttributeKey,Private,N,N,java.awt.Color);
Attribute(colorShape,java.awt.Shape,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(paintIcon,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(<init>,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>,java.net.URL,);
Parameter(<init>,java.awt.Shape,);
Parameter(<init>$2,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(<init>$2,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$2,java.awt.Image,);
Parameter(<init>$2,java.awt.Shape,);
Parameter(paintIcon,java.awt.Component,);
Parameter(paintIcon,java.awt.Graphics,);
Parameter(paintIcon,int,);
Parameter(paintIcon,int,);
Composition(org.jhotdraw.draw.DrawingEditor);
Composition(org.jhotdraw.draw.AttributeKey);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorIcon,<init> --> editor,org.jhotdraw.draw.action.SelectionColorIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorIcon,<init> --> key,org.jhotdraw.draw.action.SelectionColorIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorIcon,<init> --> colorShape,org.jhotdraw.draw.action.SelectionColorIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorIcon,<init>$2 --> editor,org.jhotdraw.draw.action.SelectionColorIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorIcon,<init>$2 --> key,org.jhotdraw.draw.action.SelectionColorIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorIcon,<init>$2 --> colorShape,org.jhotdraw.draw.action.SelectionColorIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorIcon,paintIcon --> editor,org.jhotdraw.draw.action.SelectionColorIcon,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorIcon,paintIcon --> key,org.jhotdraw.draw.action.SelectionColorIcon,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorIcon,paintIcon --> colorShape,org.jhotdraw.draw.action.SelectionColorIcon,READ);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorIcon,paintIcon --> getActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorIcon,paintIcon --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorIcon,paintIcon --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorIcon,paintIcon --> getDefaultAttributes,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorIcon,paintIcon --> get$2,org.jhotdraw.draw.AttributeKey,);
EndClass 237
StartClass 238
Class(org.jhotdraw.draw.action.DrawingColorIcon,N,N,Public);
Attribute(editor,org.jhotdraw.draw.DrawingEditor,Private,N,N,);
Attribute(key,org.jhotdraw.draw.AttributeKey,Private,N,N,java.awt.Color);
Attribute(colorShape,java.awt.Shape,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(paintIcon,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(<init>,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>,java.net.URL,);
Parameter(<init>,java.awt.Shape,);
Parameter(<init>$2,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(<init>$2,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$2,java.awt.Image,);
Parameter(<init>$2,java.awt.Shape,);
Parameter(paintIcon,java.awt.Component,);
Parameter(paintIcon,java.awt.Graphics,);
Parameter(paintIcon,int,);
Parameter(paintIcon,int,);
Composition(org.jhotdraw.draw.DrawingEditor);
Composition(org.jhotdraw.draw.AttributeKey);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorIcon,<init> --> editor,org.jhotdraw.draw.action.DrawingColorIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorIcon,<init> --> key,org.jhotdraw.draw.action.DrawingColorIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorIcon,<init> --> colorShape,org.jhotdraw.draw.action.DrawingColorIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorIcon,<init>$2 --> editor,org.jhotdraw.draw.action.DrawingColorIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorIcon,<init>$2 --> key,org.jhotdraw.draw.action.DrawingColorIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorIcon,<init>$2 --> colorShape,org.jhotdraw.draw.action.DrawingColorIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorIcon,paintIcon --> editor,org.jhotdraw.draw.action.DrawingColorIcon,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorIcon,paintIcon --> key,org.jhotdraw.draw.action.DrawingColorIcon,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorIcon,paintIcon --> colorShape,org.jhotdraw.draw.action.DrawingColorIcon,READ);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorIcon,paintIcon --> getActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorIcon,paintIcon --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorIcon,paintIcon --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorIcon,paintIcon --> getDefaultValue,org.jhotdraw.draw.AttributeKey,);
EndClass 238
StartClass 239
Class(org.jhotdraw.draw.action.DrawingColorChooserAction,N,N,Public);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(<init>$5,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(getInitialColor,java.awt.Color,Protected,N,N);
Method(updateEnabledState,void,Protected,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(<init>,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$2,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(<init>$2,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$2,javax.swing.Icon,);
Parameter(<init>$3,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(<init>$3,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$3,java.lang.String,);
Parameter(<init>$4,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(<init>$4,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$4,java.lang.String,);
Parameter(<init>$4,javax.swing.Icon,);
Parameter(<init>$5,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(<init>$5,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(<init>$5,java.lang.String,);
Parameter(<init>$5,javax.swing.Icon,);
Parameter(<init>$5,java.util.Map,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
SuperClass(org.jhotdraw.draw.action.EditorColorChooserAction);
SuperClass(org.jhotdraw.draw.action.AttributeAction);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.EditorColorChooserAction);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserAction,<init> --> <init>$4,org.jhotdraw.draw.action.DrawingColorChooserAction,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserAction,<init>$2 --> <init>$4,org.jhotdraw.draw.action.DrawingColorChooserAction,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserAction,<init>$3 --> <init>$4,org.jhotdraw.draw.action.DrawingColorChooserAction,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserAction,<init>$4 --> <init>$5,org.jhotdraw.draw.action.DrawingColorChooserAction,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserAction,actionPerformed --> getInitialColor,org.jhotdraw.draw.action.DrawingColorChooserAction,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserAction,actionPerformed --> colorChooser,org.jhotdraw.draw.action.EditorColorChooserAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserAction,actionPerformed --> attributes,org.jhotdraw.draw.action.AttributeAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserAction,actionPerformed --> key,org.jhotdraw.draw.action.EditorColorChooserAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserAction,actionPerformed --> colorChooser,org.jhotdraw.draw.action.EditorColorChooserAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserAction,getInitialColor --> key,org.jhotdraw.draw.action.EditorColorChooserAction,READ);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserAction,<init>$5 --> <init>$5,org.jhotdraw.draw.action.EditorColorChooserAction,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserAction,actionPerformed --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserAction,actionPerformed --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserAction,actionPerformed --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserAction,actionPerformed --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserAction,actionPerformed --> applyAttributesTo,org.jhotdraw.draw.action.AttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserAction,getInitialColor --> getEditor,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserAction,getInitialColor --> getActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserAction,getInitialColor --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserAction,getInitialColor --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserAction,getInitialColor --> getInitialColor,org.jhotdraw.draw.action.EditorColorChooserAction,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserAction,updateEnabledState --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserAction,updateEnabledState --> isEnabled,org.jhotdraw.draw.DrawingView,);
EndClass 239
StartClass 240
Class(org.jhotdraw.gui.JComponentPopup,N,N,Public);
Attribute(isAWTEventListenerPermitted,boolean,Private,N,N,);
Attribute(handler,org.jhotdraw.gui.JComponentPopup$Handler,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(menuSelectionChanged,void,Public,N,N);
Method(setVisible,void,Public,N,N);
Parameter(menuSelectionChanged,boolean,);
Parameter(setVisible,boolean,);
SubClass(org.jhotdraw.draw.action.ButtonFactory$7);
SubClass(org.jhotdraw.draw.action.ButtonFactory$8);
Composition(org.jhotdraw.gui.JComponentPopup$Handler);
Call(METHOD,org.jhotdraw.gui.JComponentPopup,menuSelectionChanged --> setVisible,org.jhotdraw.gui.JComponentPopup,);
Call(ATTRIBUTE,org.jhotdraw.gui.JComponentPopup,<init> --> isAWTEventListenerPermitted,org.jhotdraw.gui.JComponentPopup,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JComponentPopup,<init> --> handler,org.jhotdraw.gui.JComponentPopup,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JComponentPopup,menuSelectionChanged --> isAWTEventListenerPermitted,org.jhotdraw.gui.JComponentPopup,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JComponentPopup,setVisible --> isAWTEventListenerPermitted,org.jhotdraw.gui.JComponentPopup,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JComponentPopup,setVisible --> handler,org.jhotdraw.gui.JComponentPopup,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JComponentPopup,setVisible --> isAWTEventListenerPermitted,org.jhotdraw.gui.JComponentPopup,WRITE);
Call(METHOD,org.jhotdraw.gui.JComponentPopup,<init> --> <init>$2,org.jhotdraw.gui.JComponentPopup$Handler,);
EndClass 240
StartClass 241
Class(org.jhotdraw.draw.action.ColorIcon,N,N,Public);
Attribute(fillColor,java.awt.Color,Private,N,N,);
Attribute(noColorImage,java.awt.image.BufferedImage,Private,Y,N,);
Attribute(width,int,Private,N,N,);
Attribute(height,int,Private,N,N,);
Attribute(name,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(<init>$5,void,Public,N,N);
Method(getColor,java.awt.Color,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(getIconWidth,int,Public,N,N);
Method(getIconHeight,int,Public,N,N);
Method(paintIcon,void,Public,N,N);
Parameter(<init>,int,);
Parameter(<init>$2,java.awt.Color,);
Parameter(<init>$3,int,);
Parameter(<init>$3,java.lang.String,);
Parameter(<init>$4,java.awt.Color,);
Parameter(<init>$4,java.lang.String,);
Parameter(<init>$5,java.awt.Color,);
Parameter(<init>$5,java.lang.String,);
Parameter(<init>$5,int,);
Parameter(<init>$5,int,);
Parameter(paintIcon,java.awt.Component,);
Parameter(paintIcon,java.awt.Graphics,);
Parameter(paintIcon,int,);
Parameter(paintIcon,int,);
Call(METHOD,org.jhotdraw.draw.action.ColorIcon,<init> --> <init>$2,org.jhotdraw.draw.action.ColorIcon,);
Call(METHOD,org.jhotdraw.draw.action.ColorIcon,<init>$2 --> <init>$5,org.jhotdraw.draw.action.ColorIcon,);
Call(METHOD,org.jhotdraw.draw.action.ColorIcon,<init>$3 --> <init>$5,org.jhotdraw.draw.action.ColorIcon,);
Call(METHOD,org.jhotdraw.draw.action.ColorIcon,<init>$4 --> <init>$5,org.jhotdraw.draw.action.ColorIcon,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ColorIcon,<init>$5 --> noColorImage,org.jhotdraw.draw.action.ColorIcon,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ColorIcon,<init>$5 --> fillColor,org.jhotdraw.draw.action.ColorIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ColorIcon,<init>$5 --> name,org.jhotdraw.draw.action.ColorIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ColorIcon,<init>$5 --> width,org.jhotdraw.draw.action.ColorIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ColorIcon,<init>$5 --> height,org.jhotdraw.draw.action.ColorIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ColorIcon,<init>$5 --> noColorImage,org.jhotdraw.draw.action.ColorIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ColorIcon,getColor --> fillColor,org.jhotdraw.draw.action.ColorIcon,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ColorIcon,getName --> name,org.jhotdraw.draw.action.ColorIcon,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ColorIcon,getIconWidth --> width,org.jhotdraw.draw.action.ColorIcon,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ColorIcon,getIconHeight --> height,org.jhotdraw.draw.action.ColorIcon,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ColorIcon,paintIcon --> fillColor,org.jhotdraw.draw.action.ColorIcon,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ColorIcon,paintIcon --> width,org.jhotdraw.draw.action.ColorIcon,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ColorIcon,paintIcon --> noColorImage,org.jhotdraw.draw.action.ColorIcon,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ColorIcon,paintIcon --> height,org.jhotdraw.draw.action.ColorIcon,READ);
Call(METHOD,org.jhotdraw.draw.action.ColorIcon,<init>$2 --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ColorIcon,<init>$2 --> getToolTipTextProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ColorIcon,<init>$5 --> createImage,org.jhotdraw.util.Images,);
Call(METHOD,org.jhotdraw.draw.action.ColorIcon,<init>$5 --> toBufferedImage$2,org.jhotdraw.util.Images,);
EndClass 241
StartClass 242
Class(org.jhotdraw.color.HSBColorSpace,N,N,Public);
Attribute(instance,org.jhotdraw.color.HSBColorSpace,Private,Y,N,);
Method(getInstance,org.jhotdraw.color.HSBColorSpace,Public,Y,N);
Method(<init>,void,Public,N,N);
Method(toRGB,float[],Public,N,N);
Method(fromRGB,float[],Public,N,N);
Method(toCIEXYZ,float[],Public,N,N);
Method(fromCIEXYZ,float[],Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(getMaxValue,float,Public,N,N);
Method(getMinValue,float,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(getName$2,java.lang.String,Public,N,N);
Parameter(toRGB,float[],);
Parameter(fromRGB,float[],);
Parameter(toCIEXYZ,float[],);
Parameter(fromCIEXYZ,float[],);
Parameter(getName,int,);
Parameter(getMaxValue,int,);
Parameter(getMinValue,int,);
Parameter(equals,java.lang.Object,);
Realization(org.jhotdraw.color.NamedColorSpace);
Composition(org.jhotdraw.color.HSBColorSpace);
Call(METHOD,org.jhotdraw.color.HSBColorSpace,getInstance --> <init>,org.jhotdraw.color.HSBColorSpace,);
Call(METHOD,org.jhotdraw.color.HSBColorSpace,toCIEXYZ --> toRGB,org.jhotdraw.color.HSBColorSpace,);
Call(METHOD,org.jhotdraw.color.HSBColorSpace,fromCIEXYZ --> fromRGB,org.jhotdraw.color.HSBColorSpace,);
Call(ATTRIBUTE,org.jhotdraw.color.HSBColorSpace,getInstance --> instance,org.jhotdraw.color.HSBColorSpace,READ);
Call(ATTRIBUTE,org.jhotdraw.color.HSBColorSpace,getInstance --> instance,org.jhotdraw.color.HSBColorSpace,WRITE);
EndClass 242
StartClass 243
Class(org.jhotdraw.draw.action.BringToFrontAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(bringToFront,void,Public,Y,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(bringToFront,org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.Figure);
Parameter(bringToFront,java.util.Collection,);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.AbstractSelectedAction);
Call(METHOD,org.jhotdraw.draw.action.BringToFrontAction,actionPerformed --> bringToFront,org.jhotdraw.draw.action.BringToFrontAction,);
Call(METHOD,org.jhotdraw.draw.action.BringToFrontAction,<init> --> <init>,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.BringToFrontAction,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.BringToFrontAction,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.BringToFrontAction,<init> --> updateEnabledState,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.BringToFrontAction,actionPerformed --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.BringToFrontAction,actionPerformed --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.BringToFrontAction,actionPerformed --> <init>,org.jhotdraw.draw.action.BringToFrontAction$1,);
Call(METHOD,org.jhotdraw.draw.action.BringToFrontAction,actionPerformed --> fireUndoableEditHappened,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.BringToFrontAction,bringToFront --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.BringToFrontAction,bringToFront --> sort,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.action.BringToFrontAction,bringToFront --> bringToFront,org.jhotdraw.draw.Drawing,);
EndClass 243
StartClass 244
Class(org.jhotdraw.draw.action.SelectSameAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(selectSame,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.AbstractSelectedAction);
Call(METHOD,org.jhotdraw.draw.action.SelectSameAction,actionPerformed --> selectSame,org.jhotdraw.draw.action.SelectSameAction,);
Call(METHOD,org.jhotdraw.draw.action.SelectSameAction,<init> --> <init>,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.SelectSameAction,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.SelectSameAction,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.SelectSameAction,<init> --> updateEnabledState,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.SelectSameAction,selectSame --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.SelectSameAction,selectSame --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.SelectSameAction,selectSame --> getDrawing,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.SelectSameAction,selectSame --> getChildren,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.action.SelectSameAction,selectSame --> addToSelection,org.jhotdraw.draw.DrawingView,);
EndClass 244
StartClass 245
Class(org.jhotdraw.draw.action.FontChooserHandler,N,N,Public);
Attribute(key,org.jhotdraw.draw.AttributeKey,Protected,N,N,java.awt.Font);
Attribute(fontChooser,org.jhotdraw.gui.JFontChooser,Protected,N,N,);
Attribute(popupMenu,javax.swing.JPopupMenu,Protected,N,N,);
Attribute(isUpdating,int,Protected,N,N,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(applySelectedFontToFigures,void,Protected,N,N);
Method(updateEnabledState,void,Protected,N,N);
Method(propertyChange,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,java.awt.Font);
Parameter(<init>,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>,org.jhotdraw.gui.JFontChooser,);
Parameter(<init>,javax.swing.JPopupMenu,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.AbstractSelectedAction);
Composition(org.jhotdraw.draw.AttributeKey);
Composition(org.jhotdraw.gui.JFontChooser);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler,<init> --> updateEnabledState,org.jhotdraw.draw.action.FontChooserHandler,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler,actionPerformed --> applySelectedFontToFigures,org.jhotdraw.draw.action.FontChooserHandler,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler,propertyChange --> applySelectedFontToFigures,org.jhotdraw.draw.action.FontChooserHandler,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.FontChooserHandler,<init> --> key,org.jhotdraw.draw.action.FontChooserHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.FontChooserHandler,<init> --> fontChooser,org.jhotdraw.draw.action.FontChooserHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.FontChooserHandler,<init> --> popupMenu,org.jhotdraw.draw.action.FontChooserHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.FontChooserHandler,actionPerformed --> popupMenu,org.jhotdraw.draw.action.FontChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.FontChooserHandler,applySelectedFontToFigures --> key,org.jhotdraw.draw.action.FontChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.FontChooserHandler,applySelectedFontToFigures --> fontChooser,org.jhotdraw.draw.action.FontChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.FontChooserHandler,updateEnabledState --> fontChooser,org.jhotdraw.draw.action.FontChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.FontChooserHandler,updateEnabledState --> popupMenu,org.jhotdraw.draw.action.FontChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.FontChooserHandler,updateEnabledState --> isUpdating,org.jhotdraw.draw.action.FontChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.FontChooserHandler,updateEnabledState --> isUpdating,org.jhotdraw.draw.action.FontChooserHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.FontChooserHandler,propertyChange --> isUpdating,org.jhotdraw.draw.action.FontChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.FontChooserHandler,propertyChange --> isUpdating,org.jhotdraw.draw.action.FontChooserHandler,WRITE);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler,<init> --> <init>,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler,<init> --> addActionListener,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler,applySelectedFontToFigures --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler,applySelectedFontToFigures --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler,applySelectedFontToFigures --> getAttributesRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler,applySelectedFontToFigures --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler,applySelectedFontToFigures --> getSelectedFont,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler,applySelectedFontToFigures --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler,applySelectedFontToFigures --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler,applySelectedFontToFigures --> getEditor,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler,applySelectedFontToFigures --> setDefaultAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler,applySelectedFontToFigures --> <init>,org.jhotdraw.draw.action.FontChooserHandler$1,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler,applySelectedFontToFigures --> fireUndoableEditHappened,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler,updateEnabledState --> getEditor,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler,updateEnabledState --> isEnabled,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler,updateEnabledState --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler,updateEnabledState --> getSelectionCount,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler,updateEnabledState --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler,updateEnabledState --> getFont,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler,updateEnabledState --> setSelectedFont,org.jhotdraw.gui.JFontChooser,);
EndClass 245
StartClass 246
Class(org.jhotdraw.draw.action.DrawingAttributeAction,N,N,Public);
Attribute(attributes,java.util.Map,Protected,N,N,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(<init>$5,void,Public,N,N);
Method(<init>$6,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>,java.lang.Object,);
Parameter(<init>$2,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$2,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$2,java.lang.Object,);
Parameter(<init>$2,javax.swing.Icon,);
Parameter(<init>$3,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$3,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$3,java.lang.Object,);
Parameter(<init>$3,java.lang.String,);
Parameter(<init>$4,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$4,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$4,java.lang.Object,);
Parameter(<init>$4,java.lang.String,);
Parameter(<init>$4,javax.swing.Icon,);
Parameter(<init>$5,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$5,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$5,java.lang.Object,);
Parameter(<init>$5,java.lang.String,);
Parameter(<init>$5,javax.swing.Icon,);
Parameter(<init>$5,javax.swing.Action,);
Parameter(<init>$6,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(<init>$6,java.util.Map,);
Parameter(<init>$6,java.lang.String,);
Parameter(<init>$6,javax.swing.Icon,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
SuperClass(org.jhotdraw.draw.action.AbstractDrawingViewAction);
Generalization(org.jhotdraw.draw.action.AbstractDrawingViewAction);
Call(METHOD,org.jhotdraw.draw.action.DrawingAttributeAction,<init> --> <init>$4,org.jhotdraw.draw.action.DrawingAttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.DrawingAttributeAction,<init>$2 --> <init>$4,org.jhotdraw.draw.action.DrawingAttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.DrawingAttributeAction,<init>$3 --> <init>$4,org.jhotdraw.draw.action.DrawingAttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.DrawingAttributeAction,<init>$4 --> <init>$5,org.jhotdraw.draw.action.DrawingAttributeAction,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingAttributeAction,<init>$5 --> attributes,org.jhotdraw.draw.action.DrawingAttributeAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingAttributeAction,<init>$5 --> attributes,org.jhotdraw.draw.action.DrawingAttributeAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingAttributeAction,<init>$6 --> attributes,org.jhotdraw.draw.action.DrawingAttributeAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingAttributeAction,actionPerformed --> attributes,org.jhotdraw.draw.action.DrawingAttributeAction,READ);
Call(METHOD,org.jhotdraw.draw.action.DrawingAttributeAction,<init>$5 --> <init>,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.DrawingAttributeAction,<init>$6 --> <init>,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.DrawingAttributeAction,<init>$6 --> updateEnabledState,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.DrawingAttributeAction,actionPerformed --> getView,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.DrawingAttributeAction,actionPerformed --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.DrawingAttributeAction,actionPerformed --> getAttributesRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.DrawingAttributeAction,actionPerformed --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.DrawingAttributeAction,actionPerformed --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.DrawingAttributeAction,actionPerformed --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.DrawingAttributeAction,actionPerformed --> <init>,org.jhotdraw.draw.action.DrawingAttributeAction$1,);
Call(METHOD,org.jhotdraw.draw.action.DrawingAttributeAction,actionPerformed --> fireUndoableEditHappened,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
EndClass 246
StartClass 247
Class(org.jhotdraw.draw.action.LineDecorationIcon,N,N,Public);
Attribute(lineFigure,org.jhotdraw.draw.LineFigure,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getIconHeight,int,Public,N,N);
Method(getIconWidth,int,Public,N,N);
Method(paintIcon,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.decoration.LineDecoration,);
Parameter(<init>,boolean,);
Parameter(paintIcon,java.awt.Component,);
Parameter(paintIcon,java.awt.Graphics,);
Parameter(paintIcon,int,);
Parameter(paintIcon,int,);
Composition(org.jhotdraw.draw.LineFigure);
Call(ATTRIBUTE,org.jhotdraw.draw.action.LineDecorationIcon,<init> --> lineFigure,org.jhotdraw.draw.action.LineDecorationIcon,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.LineDecorationIcon,<init> --> lineFigure,org.jhotdraw.draw.action.LineDecorationIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.LineDecorationIcon,paintIcon --> lineFigure,org.jhotdraw.draw.action.LineDecorationIcon,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.LineDecorationIcon,<init> --> START_DECORATION,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.LineDecorationIcon,<init> --> END_DECORATION,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.LineDecorationIcon,<init> --> STROKE_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.action.LineDecorationIcon,<init> --> <init>,org.jhotdraw.draw.LineFigure,);
Call(METHOD,org.jhotdraw.draw.action.LineDecorationIcon,<init> --> setBounds,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.action.LineDecorationIcon,<init> --> set,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.action.LineDecorationIcon,paintIcon --> draw,org.jhotdraw.draw.AbstractAttributedFigure,);
EndClass 247
StartClass 248
Class(org.jhotdraw.util.Images,N,N,Public);
Method(<init>,void,Private,N,N);
Method(createImage,java.awt.Image,Public,Y,N);
Method(createImage$2,java.awt.Image,Public,Y,N);
Method(toBufferedImage,java.awt.image.BufferedImage,Public,Y,N);
Method(toBufferedImage$2,java.awt.image.BufferedImage,Public,Y,N);
Method(hasAlpha,boolean,Public,Y,N);
Method(split,java.awt.image.BufferedImage[],Public,Y,N);
Method(getScaledInstance,java.awt.image.BufferedImage,Public,Y,N);
Parameter(createImage,java.lang.Class,);
Parameter(createImage,java.lang.String,);
Parameter(createImage$2,java.net.URL,);
Parameter(toBufferedImage,java.awt.image.RenderedImage,);
Parameter(toBufferedImage$2,java.awt.Image,);
Parameter(hasAlpha,java.awt.Image,);
Parameter(split,java.awt.Image,);
Parameter(split,int,);
Parameter(split,boolean,);
Parameter(getScaledInstance,java.awt.Image,);
Parameter(getScaledInstance,int,);
Parameter(getScaledInstance,int,);
Call(METHOD,org.jhotdraw.util.Images,toBufferedImage$2 --> hasAlpha,org.jhotdraw.util.Images,);
Call(METHOD,org.jhotdraw.util.Images,split --> toBufferedImage$2,org.jhotdraw.util.Images,);
EndClass 248
StartClass 249
Class(org.jhotdraw.draw.action.EditorColorIcon,N,N,Public);
Attribute(editor,org.jhotdraw.draw.DrawingEditor,Private,N,N,);
Attribute(key,org.jhotdraw.draw.AttributeKey,Private,N,N,java.awt.Color);
Attribute(colorShape,java.awt.Shape,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(paintIcon,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(<init>,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>,java.net.URL,);
Parameter(<init>,java.awt.Shape,);
Parameter(<init>$2,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(<init>$2,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$2,java.awt.Image,);
Parameter(<init>$2,java.awt.Shape,);
Parameter(paintIcon,java.awt.Component,);
Parameter(paintIcon,java.awt.Graphics,);
Parameter(paintIcon,int,);
Parameter(paintIcon,int,);
Composition(org.jhotdraw.draw.DrawingEditor);
Composition(org.jhotdraw.draw.AttributeKey);
Call(ATTRIBUTE,org.jhotdraw.draw.action.EditorColorIcon,<init> --> editor,org.jhotdraw.draw.action.EditorColorIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.EditorColorIcon,<init> --> key,org.jhotdraw.draw.action.EditorColorIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.EditorColorIcon,<init> --> colorShape,org.jhotdraw.draw.action.EditorColorIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.EditorColorIcon,<init>$2 --> editor,org.jhotdraw.draw.action.EditorColorIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.EditorColorIcon,<init>$2 --> key,org.jhotdraw.draw.action.EditorColorIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.EditorColorIcon,<init>$2 --> colorShape,org.jhotdraw.draw.action.EditorColorIcon,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.EditorColorIcon,paintIcon --> editor,org.jhotdraw.draw.action.EditorColorIcon,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.EditorColorIcon,paintIcon --> key,org.jhotdraw.draw.action.EditorColorIcon,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.EditorColorIcon,paintIcon --> colorShape,org.jhotdraw.draw.action.EditorColorIcon,READ);
Call(METHOD,org.jhotdraw.draw.action.EditorColorIcon,paintIcon --> getDefaultAttribute,org.jhotdraw.draw.DrawingEditor,);
EndClass 249
StartClass 250
Class(org.jhotdraw.draw.action.ButtonFactory$7,N,N,NA);
Attribute(colorChooser,javax.swing.JColorChooser,Private,N,N,);
Attribute(val$editor,org.jhotdraw.draw.DrawingEditor,Public,N,Y,);
Attribute(val$attributeKey,org.jhotdraw.draw.AttributeKey,Public,N,Y,);
Attribute(val$uiclass,java.lang.Class,Public,N,Y,);
Attribute(val$dsp,java.util.List,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(show,void,Public,N,N);
Method(initialize,void,Private,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>,java.lang.Class,);
Parameter(<init>,java.util.List,);
Parameter(show,java.awt.Component,);
Parameter(show,int,);
Parameter(show,int,);
SuperClass(org.jhotdraw.gui.JComponentPopup);
Generalization(org.jhotdraw.gui.JComponentPopup);
Composition(org.jhotdraw.draw.DrawingEditor);
Composition(org.jhotdraw.draw.AttributeKey);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$7,show --> initialize,org.jhotdraw.draw.action.ButtonFactory$7,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$7,<init> --> val$editor,org.jhotdraw.draw.action.ButtonFactory$7,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$7,<init> --> val$attributeKey,org.jhotdraw.draw.action.ButtonFactory$7,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$7,<init> --> val$uiclass,org.jhotdraw.draw.action.ButtonFactory$7,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$7,<init> --> val$dsp,org.jhotdraw.draw.action.ButtonFactory$7,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$7,show --> colorChooser,org.jhotdraw.draw.action.ButtonFactory$7,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$7,show --> val$editor,org.jhotdraw.draw.action.ButtonFactory$7,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$7,show --> val$attributeKey,org.jhotdraw.draw.action.ButtonFactory$7,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$7,initialize --> colorChooser,org.jhotdraw.draw.action.ButtonFactory$7,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$7,initialize --> val$uiclass,org.jhotdraw.draw.action.ButtonFactory$7,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$7,initialize --> val$dsp,org.jhotdraw.draw.action.ButtonFactory$7,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$7,initialize --> val$editor,org.jhotdraw.draw.action.ButtonFactory$7,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$7,initialize --> val$attributeKey,org.jhotdraw.draw.action.ButtonFactory$7,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$7,initialize --> colorChooser,org.jhotdraw.draw.action.ButtonFactory$7,WRITE);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$7,<init> --> <init>,org.jhotdraw.gui.JComponentPopup,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$7,show --> getActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$7,show --> getSelectionCount,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$7,show --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$7,show --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$7,show --> getDefaultAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$7,initialize --> invokeStatic$3,org.jhotdraw.util.Methods,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$7,initialize --> <init>,org.jhotdraw.draw.action.SelectionColorChooserHandler,);
EndClass 250
StartClass 251
Class(org.jhotdraw.draw.action.ButtonFactory$8,N,N,NA);
Attribute(colorChooser,javax.swing.JColorChooser,Private,N,N,);
Attribute(val$editor,org.jhotdraw.draw.DrawingEditor,Public,N,Y,);
Attribute(val$attributeKey,org.jhotdraw.draw.AttributeKey,Public,N,Y,);
Attribute(val$uiclass,java.lang.Class,Public,N,Y,);
Attribute(val$dsp,java.util.List,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(show,void,Public,N,N);
Method(initialize,void,Private,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>,java.lang.Class,);
Parameter(<init>,java.util.List,);
Parameter(show,java.awt.Component,);
Parameter(show,int,);
Parameter(show,int,);
SuperClass(org.jhotdraw.gui.JComponentPopup);
Generalization(org.jhotdraw.gui.JComponentPopup);
Composition(org.jhotdraw.draw.DrawingEditor);
Composition(org.jhotdraw.draw.AttributeKey);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$8,show --> initialize,org.jhotdraw.draw.action.ButtonFactory$8,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$8,<init> --> val$editor,org.jhotdraw.draw.action.ButtonFactory$8,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$8,<init> --> val$attributeKey,org.jhotdraw.draw.action.ButtonFactory$8,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$8,<init> --> val$uiclass,org.jhotdraw.draw.action.ButtonFactory$8,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$8,<init> --> val$dsp,org.jhotdraw.draw.action.ButtonFactory$8,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$8,show --> colorChooser,org.jhotdraw.draw.action.ButtonFactory$8,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$8,show --> val$editor,org.jhotdraw.draw.action.ButtonFactory$8,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$8,show --> val$attributeKey,org.jhotdraw.draw.action.ButtonFactory$8,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$8,initialize --> colorChooser,org.jhotdraw.draw.action.ButtonFactory$8,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$8,initialize --> val$uiclass,org.jhotdraw.draw.action.ButtonFactory$8,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$8,initialize --> val$dsp,org.jhotdraw.draw.action.ButtonFactory$8,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$8,initialize --> val$editor,org.jhotdraw.draw.action.ButtonFactory$8,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$8,initialize --> val$attributeKey,org.jhotdraw.draw.action.ButtonFactory$8,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$8,initialize --> colorChooser,org.jhotdraw.draw.action.ButtonFactory$8,WRITE);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$8,<init> --> <init>,org.jhotdraw.gui.JComponentPopup,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$8,show --> getActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$8,show --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$8,show --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$8,show --> getDefaultAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$8,initialize --> invokeStatic$3,org.jhotdraw.util.Methods,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$8,initialize --> <init>,org.jhotdraw.draw.action.DrawingColorChooserHandler,);
EndClass 251
StartClass 252
Class(org.jhotdraw.draw.action.ButtonFactory$9,N,N,NA);
Attribute(val$view,org.jhotdraw.draw.DrawingView,Public,N,Y,);
Attribute(val$toggleButton,javax.swing.JToggleButton,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(itemStateChanged,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingView,);
Parameter(<init>,javax.swing.JToggleButton,);
Parameter(itemStateChanged,java.awt.event.ItemEvent,);
Composition(org.jhotdraw.draw.DrawingView);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$9,<init> --> val$view,org.jhotdraw.draw.action.ButtonFactory$9,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$9,<init> --> val$toggleButton,org.jhotdraw.draw.action.ButtonFactory$9,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$9,itemStateChanged --> val$view,org.jhotdraw.draw.action.ButtonFactory$9,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$9,itemStateChanged --> val$toggleButton,org.jhotdraw.draw.action.ButtonFactory$9,READ);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$9,itemStateChanged --> setConstrainerVisible,org.jhotdraw.draw.DrawingView,);
EndClass 252
StartClass 253
Class(org.jhotdraw.draw.action.AlignAction$West,N,N,Public);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(alignFigures,void,Protected,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$2,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$2,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(alignFigures,java.util.Collection,);
Parameter(alignFigures,java.awt.geom.Rectangle2D$Double,);
SuperClass(org.jhotdraw.draw.action.AlignAction);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.AlignAction);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AlignAction$West,<init> --> labels,org.jhotdraw.draw.action.AlignAction,READ);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$West,<init> --> <init>,org.jhotdraw.draw.action.AlignAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$West,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$West,<init>$2 --> <init>,org.jhotdraw.draw.action.AlignAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$West,<init>$2 --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$West,alignFigures --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$West,alignFigures --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$West,alignFigures --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$West,alignFigures --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$West,alignFigures --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$West,alignFigures --> transform,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$West,alignFigures --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$West,alignFigures --> <init>,org.jhotdraw.draw.event.TransformEdit,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$West,alignFigures --> fireUndoableEditHappened,org.jhotdraw.draw.action.AbstractSelectedAction,);
EndClass 253
StartClass 254
Class(org.jhotdraw.gui.JFontChooser,N,N,Public);
Attribute(uiClassID,java.lang.String,Private,Y,Y,);
Attribute(SELECTED_FONT_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(SELECTION_PATH_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(CANCEL_SELECTION,java.lang.String,Public,Y,Y,);
Attribute(APPROVE_SELECTION,java.lang.String,Public,Y,Y,);
Attribute(MODEL_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(selectionPath,javax.swing.tree.TreePath,Private,N,N,);
Attribute(selectedFont,java.awt.Font,Private,N,N,);
Attribute(model,org.jhotdraw.gui.fontchooser.FontChooserModel,Private,N,N,);
Attribute(CANCEL_OPTION,int,Public,Y,Y,);
Attribute(APPROVE_OPTION,int,Public,Y,Y,);
Attribute(ERROR_OPTION,int,Public,Y,Y,);
Attribute(returnValue,int,Private,N,N,);
Attribute(dialog,javax.swing.JDialog,Private,N,N,);
Attribute(future,java.util.concurrent.FutureTask,Private,Y,N,);
Attribute(modelHandler,javax.swing.event.TreeModelListener,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(updateUI,void,Public,N,N);
Method(getUI,org.jhotdraw.gui.plaf.FontChooserUI,Public,N,N);
Method(setUI,void,Public,N,N);
Method(getUIClassID,java.lang.String,Public,N,N);
Method(approveSelection,void,Public,N,N);
Method(cancelSelection,void,Public,N,N);
Method(addActionListener,void,Public,N,N);
Method(removeActionListener,void,Public,N,N);
Method(fireActionPerformed,void,Protected,N,N);
Method(getSelectionPath,javax.swing.tree.TreePath,Public,N,N);
Method(setSelectionPath,void,Public,N,N);
Method(loadAllFonts,void,Public,Y,N);
Method(getAllFonts,java.awt.Font[],Public,Y,N);
Method(getSelectedFont,java.awt.Font,Public,N,N);
Method(setSelectedFont,void,Public,N,N);
Method(updateSelectionPath,void,Protected,N,N);
Method(getModel,org.jhotdraw.gui.fontchooser.FontChooserModel,Public,N,N);
Method(setModel,void,Public,N,N);
Method(access$000,org.jhotdraw.gui.fontchooser.FontChooserModel,Public,Y,N);
Parameter(setUI,org.jhotdraw.gui.plaf.FontChooserUI,);
Parameter(addActionListener,java.awt.event.ActionListener,);
Parameter(removeActionListener,java.awt.event.ActionListener,);
Parameter(fireActionPerformed,java.lang.String,);
Parameter(setSelectionPath,javax.swing.tree.TreePath,);
Parameter(setSelectedFont,java.awt.Font,);
Parameter(updateSelectionPath,java.awt.Font,);
Parameter(setModel,org.jhotdraw.gui.fontchooser.FontChooserModel,);
Parameter(access$000,org.jhotdraw.gui.JFontChooser,);
Composition(org.jhotdraw.gui.fontchooser.FontChooserModel);
Call(METHOD,org.jhotdraw.gui.JFontChooser,<init> --> loadAllFonts,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.JFontChooser,<init> --> updateUI,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.JFontChooser,updateUI --> getUIClassID,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.JFontChooser,updateUI --> setUI,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.JFontChooser,approveSelection --> fireActionPerformed,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.JFontChooser,cancelSelection --> fireActionPerformed,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.JFontChooser,setSelectionPath --> setSelectedFont,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.JFontChooser,getAllFonts --> loadAllFonts,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.JFontChooser,setSelectedFont --> updateSelectionPath,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.JFontChooser,updateSelectionPath --> setSelectionPath,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.JFontChooser,updateSelectionPath --> getModel,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.JFontChooser,setModel --> updateSelectionPath,org.jhotdraw.gui.JFontChooser,);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,<init> --> model,org.jhotdraw.gui.JFontChooser,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,<init> --> modelHandler,org.jhotdraw.gui.JFontChooser,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,<init> --> returnValue,org.jhotdraw.gui.JFontChooser,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,<init> --> dialog,org.jhotdraw.gui.JFontChooser,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,<init> --> modelHandler,org.jhotdraw.gui.JFontChooser,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,<init> --> model,org.jhotdraw.gui.JFontChooser,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,approveSelection --> dialog,org.jhotdraw.gui.JFontChooser,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,approveSelection --> returnValue,org.jhotdraw.gui.JFontChooser,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,cancelSelection --> dialog,org.jhotdraw.gui.JFontChooser,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,cancelSelection --> returnValue,org.jhotdraw.gui.JFontChooser,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,getSelectionPath --> selectionPath,org.jhotdraw.gui.JFontChooser,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,setSelectionPath --> selectionPath,org.jhotdraw.gui.JFontChooser,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,setSelectionPath --> selectionPath,org.jhotdraw.gui.JFontChooser,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,loadAllFonts --> future,org.jhotdraw.gui.JFontChooser,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,loadAllFonts --> future,org.jhotdraw.gui.JFontChooser,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,getAllFonts --> future,org.jhotdraw.gui.JFontChooser,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,getSelectedFont --> selectedFont,org.jhotdraw.gui.JFontChooser,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,setSelectedFont --> selectedFont,org.jhotdraw.gui.JFontChooser,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,setSelectedFont --> selectedFont,org.jhotdraw.gui.JFontChooser,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,updateSelectionPath --> selectionPath,org.jhotdraw.gui.JFontChooser,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,getModel --> model,org.jhotdraw.gui.JFontChooser,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,setModel --> model,org.jhotdraw.gui.JFontChooser,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,setModel --> modelHandler,org.jhotdraw.gui.JFontChooser,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,setModel --> selectedFont,org.jhotdraw.gui.JFontChooser,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,setModel --> model,org.jhotdraw.gui.JFontChooser,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser,access$000 --> model,org.jhotdraw.gui.JFontChooser,READ);
Call(METHOD,org.jhotdraw.gui.JFontChooser,<init> --> <init>,org.jhotdraw.gui.JFontChooser$1,);
Call(METHOD,org.jhotdraw.gui.JFontChooser,<init> --> <init>,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel$UIResource,);
Call(METHOD,org.jhotdraw.gui.JFontChooser,<init> --> <init>,org.jhotdraw.gui.JFontChooser$2,);
Call(METHOD,org.jhotdraw.gui.JFontChooser,updateUI --> createUI,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.JFontChooser,setSelectionPath --> getFont,org.jhotdraw.gui.fontchooser.FontFaceNode,);
Call(METHOD,org.jhotdraw.gui.JFontChooser,loadAllFonts --> <init>,org.jhotdraw.gui.JFontChooser$3,);
Call(METHOD,org.jhotdraw.gui.JFontChooser,updateSelectionPath --> getFont,org.jhotdraw.gui.fontchooser.FontFaceNode,);
Call(METHOD,org.jhotdraw.gui.JFontChooser,updateSelectionPath --> faces,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.JFontChooser,updateSelectionPath --> families,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
EndClass 254
StartClass 255
Class(org.jhotdraw.draw.action.AlignAction$East,N,N,Public);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(alignFigures,void,Protected,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$2,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$2,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(alignFigures,java.util.Collection,);
Parameter(alignFigures,java.awt.geom.Rectangle2D$Double,);
SuperClass(org.jhotdraw.draw.action.AlignAction);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.AlignAction);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AlignAction$East,<init> --> labels,org.jhotdraw.draw.action.AlignAction,READ);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$East,<init> --> <init>,org.jhotdraw.draw.action.AlignAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$East,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$East,<init>$2 --> <init>,org.jhotdraw.draw.action.AlignAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$East,<init>$2 --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$East,alignFigures --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$East,alignFigures --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$East,alignFigures --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$East,alignFigures --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$East,alignFigures --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$East,alignFigures --> transform,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$East,alignFigures --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$East,alignFigures --> <init>,org.jhotdraw.draw.event.TransformEdit,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$East,alignFigures --> fireUndoableEditHappened,org.jhotdraw.draw.action.AbstractSelectedAction,);
EndClass 255
StartClass 256
Class(org.jhotdraw.draw.action.ApplyAttributesAction,N,N,Public);
Attribute(excludedAttributes,java.util.Set,Private,N,N,org.jhotdraw.draw.AttributeKey);
Method(<init>,void,Public,N,N);
Method(setExcludedAttributes,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(applyAttributes,void,Public,N,N);
Method(selectionChanged,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(setExcludedAttributes,java.util.Set,org.jhotdraw.draw.AttributeKey);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(selectionChanged,org.jhotdraw.draw.event.FigureSelectionEvent,);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.AbstractSelectedAction);
Call(METHOD,org.jhotdraw.draw.action.ApplyAttributesAction,actionPerformed --> applyAttributes,org.jhotdraw.draw.action.ApplyAttributesAction,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ApplyAttributesAction,<init> --> excludedAttributes,org.jhotdraw.draw.action.ApplyAttributesAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ApplyAttributesAction,setExcludedAttributes --> excludedAttributes,org.jhotdraw.draw.action.ApplyAttributesAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ApplyAttributesAction,applyAttributes --> excludedAttributes,org.jhotdraw.draw.action.ApplyAttributesAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ApplyAttributesAction,<init> --> TRANSFORM,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ApplyAttributesAction,<init> --> TEXT,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.action.ApplyAttributesAction,<init> --> <init>,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.ApplyAttributesAction,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ApplyAttributesAction,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ApplyAttributesAction,<init> --> updateEnabledState,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.ApplyAttributesAction,applyAttributes --> getEditor,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.ApplyAttributesAction,applyAttributes --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ApplyAttributesAction,applyAttributes --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.ApplyAttributesAction,applyAttributes --> <init>$3,org.jhotdraw.undo.CompositeEdit,);
Call(METHOD,org.jhotdraw.draw.action.ApplyAttributesAction,applyAttributes --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.ApplyAttributesAction,applyAttributes --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.ApplyAttributesAction,applyAttributes --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.action.ApplyAttributesAction,applyAttributes --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.ApplyAttributesAction,applyAttributes --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.ApplyAttributesAction,applyAttributes --> getDefaultAttributes,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.ApplyAttributesAction,applyAttributes --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.ApplyAttributesAction,applyAttributes --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.ApplyAttributesAction,selectionChanged --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.ApplyAttributesAction,selectionChanged --> getSelectionCount,org.jhotdraw.draw.DrawingView,);
EndClass 256
StartClass 257
Class(org.jhotdraw.draw.action.ButtonFactory$2,N,N,NA);
Attribute(val$zoomPopupButton,org.jhotdraw.gui.JPopupButton,Public,N,Y,);
Attribute(val$editor,org.jhotdraw.draw.DrawingEditor,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(propertyChange,void,Public,N,N);
Parameter(<init>,org.jhotdraw.gui.JPopupButton,);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Composition(org.jhotdraw.gui.JPopupButton);
Composition(org.jhotdraw.draw.DrawingEditor);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$2,<init> --> val$zoomPopupButton,org.jhotdraw.draw.action.ButtonFactory$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$2,<init> --> val$editor,org.jhotdraw.draw.action.ButtonFactory$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$2,propertyChange --> val$zoomPopupButton,org.jhotdraw.draw.action.ButtonFactory$2,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$2,propertyChange --> val$editor,org.jhotdraw.draw.action.ButtonFactory$2,READ);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$2,propertyChange --> getActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$2,propertyChange --> getScaleFactor,org.jhotdraw.draw.DrawingView,);
EndClass 257
StartClass 258
Class(org.jhotdraw.draw.action.ButtonFactory$1,N,N,NA);
Attribute(val$defaultToolButton,javax.swing.JToggleButton,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(toolDone,void,Public,N,N);
Parameter(<init>,javax.swing.JToggleButton,);
Parameter(toolDone,org.jhotdraw.draw.event.ToolEvent,);
SuperClass(org.jhotdraw.draw.event.ToolAdapter);
Generalization(org.jhotdraw.draw.event.ToolAdapter);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$1,<init> --> val$defaultToolButton,org.jhotdraw.draw.action.ButtonFactory$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$1,toolDone --> val$defaultToolButton,org.jhotdraw.draw.action.ButtonFactory$1,READ);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$1,<init> --> <init>,org.jhotdraw.draw.event.ToolAdapter,);
EndClass 258
StartClass 259
Class(org.jhotdraw.draw.action.EditorColorChooserAction,N,N,Public);
Attribute(key,org.jhotdraw.draw.AttributeKey,Protected,N,N,java.awt.Color);
Attribute(colorChooser,javax.swing.JColorChooser,Protected,Y,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(<init>$5,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(selectionChanged,void,Public,N,N);
Method(getInitialColor,java.awt.Color,Protected,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(<init>,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$2,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(<init>$2,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$2,javax.swing.Icon,);
Parameter(<init>$3,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(<init>$3,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$3,java.lang.String,);
Parameter(<init>$4,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(<init>$4,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$4,java.lang.String,);
Parameter(<init>$4,javax.swing.Icon,);
Parameter(<init>$5,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(<init>$5,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(<init>$5,java.lang.String,);
Parameter(<init>$5,javax.swing.Icon,);
Parameter(<init>$5,java.util.Map,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(selectionChanged,org.jhotdraw.draw.event.FigureSelectionEvent,);
SuperClass(org.jhotdraw.draw.action.AttributeAction);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
SubClass(org.jhotdraw.draw.action.SelectionColorChooserAction);
SubClass(org.jhotdraw.draw.action.DrawingColorChooserAction);
Generalization(org.jhotdraw.draw.action.AttributeAction);
Composition(org.jhotdraw.draw.AttributeKey);
Call(METHOD,org.jhotdraw.draw.action.EditorColorChooserAction,<init> --> <init>$4,org.jhotdraw.draw.action.EditorColorChooserAction,);
Call(METHOD,org.jhotdraw.draw.action.EditorColorChooserAction,<init>$2 --> <init>$4,org.jhotdraw.draw.action.EditorColorChooserAction,);
Call(METHOD,org.jhotdraw.draw.action.EditorColorChooserAction,<init>$3 --> <init>$4,org.jhotdraw.draw.action.EditorColorChooserAction,);
Call(METHOD,org.jhotdraw.draw.action.EditorColorChooserAction,<init>$4 --> <init>$5,org.jhotdraw.draw.action.EditorColorChooserAction,);
Call(METHOD,org.jhotdraw.draw.action.EditorColorChooserAction,actionPerformed --> getInitialColor,org.jhotdraw.draw.action.EditorColorChooserAction,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.EditorColorChooserAction,<init>$5 --> key,org.jhotdraw.draw.action.EditorColorChooserAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.EditorColorChooserAction,actionPerformed --> colorChooser,org.jhotdraw.draw.action.EditorColorChooserAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.EditorColorChooserAction,actionPerformed --> key,org.jhotdraw.draw.action.EditorColorChooserAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.EditorColorChooserAction,actionPerformed --> colorChooser,org.jhotdraw.draw.action.EditorColorChooserAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.EditorColorChooserAction,getInitialColor --> key,org.jhotdraw.draw.action.EditorColorChooserAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.EditorColorChooserAction,actionPerformed --> attributes,org.jhotdraw.draw.action.AttributeAction,READ);
Call(METHOD,org.jhotdraw.draw.action.EditorColorChooserAction,<init> --> updateEnabledState,org.jhotdraw.draw.action.AttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.EditorColorChooserAction,<init>$5 --> <init>$6,org.jhotdraw.draw.action.AttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.EditorColorChooserAction,<init>$5 --> updateEnabledState,org.jhotdraw.draw.action.AttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.EditorColorChooserAction,actionPerformed --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.EditorColorChooserAction,actionPerformed --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.EditorColorChooserAction,actionPerformed --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.EditorColorChooserAction,actionPerformed --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.EditorColorChooserAction,actionPerformed --> applyAttributesTo,org.jhotdraw.draw.action.AttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.EditorColorChooserAction,getInitialColor --> getEditor,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.EditorColorChooserAction,getInitialColor --> getDefaultAttribute,org.jhotdraw.draw.DrawingEditor,);
EndClass 259
StartClass 260
Class(org.jhotdraw.draw.action.ButtonFactory$6,N,N,NA);
Attribute(val$popupButton,org.jhotdraw.gui.JPopupButton,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(propertyChange,void,Public,N,N);
Parameter(<init>,org.jhotdraw.gui.JPopupButton,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Composition(org.jhotdraw.gui.JPopupButton);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$6,<init> --> val$popupButton,org.jhotdraw.draw.action.ButtonFactory$6,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$6,propertyChange --> val$popupButton,org.jhotdraw.draw.action.ButtonFactory$6,READ);
EndClass 260
StartClass 261
Class(org.jhotdraw.draw.action.ButtonFactory$5,N,N,NA);
Attribute(val$zoomPopupButton,org.jhotdraw.gui.JPopupButton,Public,N,Y,);
Attribute(val$view,org.jhotdraw.draw.DrawingView,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingView,);
Parameter(<init>,double,);
Parameter(<init>,javax.swing.AbstractButton,);
Parameter(<init>,org.jhotdraw.gui.JPopupButton,);
Parameter(<init>,org.jhotdraw.draw.DrawingView,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
SuperClass(org.jhotdraw.draw.action.ZoomAction);
SuperClass(org.jhotdraw.draw.action.AbstractDrawingViewAction);
Generalization(org.jhotdraw.draw.action.ZoomAction);
Composition(org.jhotdraw.gui.JPopupButton);
Composition(org.jhotdraw.draw.DrawingView);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$5,<init> --> val$zoomPopupButton,org.jhotdraw.draw.action.ButtonFactory$5,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$5,<init> --> val$view,org.jhotdraw.draw.action.ButtonFactory$5,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$5,actionPerformed --> val$zoomPopupButton,org.jhotdraw.draw.action.ButtonFactory$5,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$5,actionPerformed --> val$view,org.jhotdraw.draw.action.ButtonFactory$5,READ);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$5,<init> --> <init>$2,org.jhotdraw.draw.action.ZoomAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$5,actionPerformed --> actionPerformed,org.jhotdraw.draw.action.ZoomAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$5,actionPerformed --> getScaleFactor,org.jhotdraw.draw.DrawingView,);
EndClass 261
StartClass 262
Class(org.jhotdraw.draw.action.ButtonFactory$4,N,N,NA);
Attribute(val$zoomPopupButton,org.jhotdraw.gui.JPopupButton,Public,N,Y,);
Attribute(val$view,org.jhotdraw.draw.DrawingView,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(propertyChange,void,Public,N,N);
Parameter(<init>,org.jhotdraw.gui.JPopupButton,);
Parameter(<init>,org.jhotdraw.draw.DrawingView,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Composition(org.jhotdraw.gui.JPopupButton);
Composition(org.jhotdraw.draw.DrawingView);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$4,<init> --> val$zoomPopupButton,org.jhotdraw.draw.action.ButtonFactory$4,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$4,<init> --> val$view,org.jhotdraw.draw.action.ButtonFactory$4,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$4,propertyChange --> val$zoomPopupButton,org.jhotdraw.draw.action.ButtonFactory$4,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$4,propertyChange --> val$view,org.jhotdraw.draw.action.ButtonFactory$4,READ);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$4,propertyChange --> getScaleFactor,org.jhotdraw.draw.DrawingView,);
EndClass 262
StartClass 263
Class(org.jhotdraw.draw.action.ButtonFactory$3,N,N,NA);
Attribute(val$zoomPopupButton,org.jhotdraw.gui.JPopupButton,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>,double,);
Parameter(<init>,javax.swing.AbstractButton,);
Parameter(<init>,org.jhotdraw.gui.JPopupButton,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
SuperClass(org.jhotdraw.draw.action.ZoomEditorAction);
SuperClass(org.jhotdraw.draw.action.AbstractDrawingEditorAction);
Generalization(org.jhotdraw.draw.action.ZoomEditorAction);
Composition(org.jhotdraw.gui.JPopupButton);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$3,<init> --> val$zoomPopupButton,org.jhotdraw.draw.action.ButtonFactory$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$3,actionPerformed --> val$zoomPopupButton,org.jhotdraw.draw.action.ButtonFactory$3,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ButtonFactory$3,actionPerformed --> editor,org.jhotdraw.draw.action.AbstractDrawingEditorAction,READ);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$3,<init> --> <init>,org.jhotdraw.draw.action.ZoomEditorAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$3,actionPerformed --> actionPerformed,org.jhotdraw.draw.action.ZoomEditorAction,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$3,actionPerformed --> getActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.ButtonFactory$3,actionPerformed --> getScaleFactor,org.jhotdraw.draw.DrawingView,);
EndClass 263
StartClass 264
Class(org.jhotdraw.draw.action.AlignAction$North,N,N,Public);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(alignFigures,void,Protected,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$2,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$2,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(alignFigures,java.util.Collection,);
Parameter(alignFigures,java.awt.geom.Rectangle2D$Double,);
SuperClass(org.jhotdraw.draw.action.AlignAction);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.AlignAction);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AlignAction$North,<init> --> labels,org.jhotdraw.draw.action.AlignAction,READ);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$North,<init> --> <init>,org.jhotdraw.draw.action.AlignAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$North,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$North,<init>$2 --> <init>,org.jhotdraw.draw.action.AlignAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$North,<init>$2 --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$North,alignFigures --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$North,alignFigures --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$North,alignFigures --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$North,alignFigures --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$North,alignFigures --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$North,alignFigures --> transform,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$North,alignFigures --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$North,alignFigures --> <init>,org.jhotdraw.draw.event.TransformEdit,);
Call(METHOD,org.jhotdraw.draw.action.AlignAction$North,alignFigures --> fireUndoableEditHappened,org.jhotdraw.draw.action.AbstractSelectedAction,);
EndClass 264
StartClass 265
Class(org.jhotdraw.draw.event.SelectionComponentRepainter,N,N,Public);
Attribute(editor,org.jhotdraw.draw.DrawingEditor,Private,N,N,);
Attribute(component,javax.swing.JComponent,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(attributeChanged,void,Public,N,N);
Method(propertyChange,void,Public,N,N);
Method(selectionChanged,void,Public,N,N);
Method(dispose,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>,javax.swing.JComponent,);
Parameter(attributeChanged,org.jhotdraw.draw.event.FigureEvent,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Parameter(selectionChanged,org.jhotdraw.draw.event.FigureSelectionEvent,);
SuperClass(org.jhotdraw.draw.event.FigureAdapter);
Generalization(org.jhotdraw.draw.event.FigureAdapter);
Realization(org.jhotdraw.draw.event.FigureSelectionListener);
Realization(org.jhotdraw.app.Disposable);
Composition(org.jhotdraw.draw.DrawingEditor);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SelectionComponentRepainter,<init> --> editor,org.jhotdraw.draw.event.SelectionComponentRepainter,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SelectionComponentRepainter,<init> --> component,org.jhotdraw.draw.event.SelectionComponentRepainter,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SelectionComponentRepainter,attributeChanged --> component,org.jhotdraw.draw.event.SelectionComponentRepainter,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SelectionComponentRepainter,propertyChange --> component,org.jhotdraw.draw.event.SelectionComponentRepainter,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SelectionComponentRepainter,selectionChanged --> component,org.jhotdraw.draw.event.SelectionComponentRepainter,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SelectionComponentRepainter,dispose --> editor,org.jhotdraw.draw.event.SelectionComponentRepainter,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SelectionComponentRepainter,dispose --> editor,org.jhotdraw.draw.event.SelectionComponentRepainter,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SelectionComponentRepainter,dispose --> component,org.jhotdraw.draw.event.SelectionComponentRepainter,WRITE);
Call(METHOD,org.jhotdraw.draw.event.SelectionComponentRepainter,<init> --> <init>,org.jhotdraw.draw.event.FigureAdapter,);
Call(METHOD,org.jhotdraw.draw.event.SelectionComponentRepainter,<init> --> getActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.event.SelectionComponentRepainter,<init> --> addPropertyChangeListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.event.SelectionComponentRepainter,<init> --> addFigureSelectionListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.event.SelectionComponentRepainter,<init> --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.event.SelectionComponentRepainter,<init> --> addFigureListener,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.event.SelectionComponentRepainter,<init> --> addPropertyChangeListener,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.event.SelectionComponentRepainter,propertyChange --> removePropertyChangeListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.event.SelectionComponentRepainter,propertyChange --> removeFigureSelectionListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.event.SelectionComponentRepainter,propertyChange --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.event.SelectionComponentRepainter,propertyChange --> removeFigureListener,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.event.SelectionComponentRepainter,propertyChange --> addPropertyChangeListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.event.SelectionComponentRepainter,propertyChange --> addFigureSelectionListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.event.SelectionComponentRepainter,propertyChange --> addFigureListener,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.event.SelectionComponentRepainter,dispose --> getActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.event.SelectionComponentRepainter,dispose --> removePropertyChangeListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.event.SelectionComponentRepainter,dispose --> removeFigureSelectionListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.event.SelectionComponentRepainter,dispose --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.event.SelectionComponentRepainter,dispose --> removeFigureListener,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.event.SelectionComponentRepainter,dispose --> removePropertyChangeListener,org.jhotdraw.draw.DrawingEditor,);
EndClass 265
StartClass 266
Class(org.jhotdraw.draw.tool.CreationTool$1,N,N,NA);
Attribute(val$addedDrawing,org.jhotdraw.draw.Drawing,Public,N,Y,);
Attribute(val$addedFigure,org.jhotdraw.draw.Figure,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.tool.CreationTool,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.tool.CreationTool,);
Parameter(<init>,org.jhotdraw.draw.Drawing,);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Composition(org.jhotdraw.draw.Drawing);
Composition(org.jhotdraw.draw.Figure);
Composition(org.jhotdraw.draw.tool.CreationTool);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool$1,<init> --> this$0,org.jhotdraw.draw.tool.CreationTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool$1,<init> --> val$addedDrawing,org.jhotdraw.draw.tool.CreationTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool$1,<init> --> val$addedFigure,org.jhotdraw.draw.tool.CreationTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool$1,getPresentationName --> this$0,org.jhotdraw.draw.tool.CreationTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool$1,undo --> val$addedDrawing,org.jhotdraw.draw.tool.CreationTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool$1,undo --> val$addedFigure,org.jhotdraw.draw.tool.CreationTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool$1,redo --> val$addedDrawing,org.jhotdraw.draw.tool.CreationTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool$1,redo --> val$addedFigure,org.jhotdraw.draw.tool.CreationTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.CreationTool$1,getPresentationName --> presentationName,org.jhotdraw.draw.tool.CreationTool,READ);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool$1,undo --> remove,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.CreationTool$1,redo --> add,org.jhotdraw.draw.Drawing,);
EndClass 266
StartClass 267
Class(org.jhotdraw.draw.CompositeFigure,Y,Y,Public);
Attribute(LAYOUT_INSETS,org.jhotdraw.draw.AttributeKey,Public,Y,Y,org.jhotdraw.geom.Insets2D$Double);
Method(add,boolean,Public,N,Y);
Method(add$2,void,Public,N,Y);
Method(basicAdd,void,Public,N,Y);
Method(basicAdd$2,void,Public,N,Y);
Method(remove,boolean,Public,N,Y);
Method(removeChild,org.jhotdraw.draw.Figure,Public,N,Y);
Method(removeAllChildren,void,Public,N,Y);
Method(basicRemove,int,Public,N,Y);
Method(basicRemoveChild,org.jhotdraw.draw.Figure,Public,N,Y);
Method(basicRemoveAllChildren,void,Public,N,Y);
Method(getChildren,java.util.List,Public,N,Y);
Method(getChildCount,int,Public,N,Y);
Method(getChild,org.jhotdraw.draw.Figure,Public,N,Y);
Method(indexOf,int,Public,N,Y);
Method(contains,boolean,Public,N,Y);
Method(getLayouter,org.jhotdraw.draw.layouter.Layouter,Public,N,Y);
Method(layout,void,Public,N,Y);
Method(setLayouter,void,Public,N,Y);
Method(addCompositeFigureListener,void,Public,N,Y);
Method(removeCompositeFigureListener,void,Public,N,Y);
Method(<clinit>,void,Public,Y,N);
Parameter(add,org.jhotdraw.draw.Figure,);
Parameter(add$2,int,);
Parameter(add$2,org.jhotdraw.draw.Figure,);
Parameter(basicAdd,org.jhotdraw.draw.Figure,);
Parameter(basicAdd$2,int,);
Parameter(basicAdd$2,org.jhotdraw.draw.Figure,);
Parameter(remove,org.jhotdraw.draw.Figure,);
Parameter(removeChild,int,);
Parameter(basicRemove,org.jhotdraw.draw.Figure,);
Parameter(basicRemoveChild,int,);
Parameter(getChild,int,);
Parameter(indexOf,org.jhotdraw.draw.Figure,);
Parameter(contains,org.jhotdraw.draw.Figure,);
Parameter(setLayouter,org.jhotdraw.draw.layouter.Layouter,);
Parameter(addCompositeFigureListener,org.jhotdraw.draw.event.CompositeFigureListener,);
Parameter(removeCompositeFigureListener,org.jhotdraw.draw.event.CompositeFigureListener,);
Realization(org.jhotdraw.draw.Figure);
Composition(org.jhotdraw.draw.AttributeKey);
Call(ATTRIBUTE,org.jhotdraw.draw.CompositeFigure,<clinit> --> LAYOUT_INSETS,org.jhotdraw.draw.CompositeFigure,WRITE);
Call(METHOD,org.jhotdraw.draw.CompositeFigure,<clinit> --> <init>,org.jhotdraw.geom.Insets2D$Double,);
Call(METHOD,org.jhotdraw.draw.CompositeFigure,<clinit> --> <init>$2,org.jhotdraw.draw.AttributeKey,);
EndClass 267
StartClass 268
Class(org.jhotdraw.beans.WeakPropertyChangeListener,N,N,Public);
Attribute(weakRef,java.lang.ref.WeakReference,Private,N,N,java.beans.PropertyChangeListener);
Method(<init>,void,Public,N,N);
Method(removeFromSource,void,Protected,N,N);
Method(propertyChange,void,Public,N,N);
Method(getTarget,java.beans.PropertyChangeListener,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Parameter(<init>,java.beans.PropertyChangeListener,);
Parameter(removeFromSource,java.beans.PropertyChangeEvent,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Call(METHOD,org.jhotdraw.beans.WeakPropertyChangeListener,propertyChange --> removeFromSource,org.jhotdraw.beans.WeakPropertyChangeListener,);
Call(ATTRIBUTE,org.jhotdraw.beans.WeakPropertyChangeListener,<init> --> weakRef,org.jhotdraw.beans.WeakPropertyChangeListener,WRITE);
Call(ATTRIBUTE,org.jhotdraw.beans.WeakPropertyChangeListener,propertyChange --> weakRef,org.jhotdraw.beans.WeakPropertyChangeListener,READ);
Call(ATTRIBUTE,org.jhotdraw.beans.WeakPropertyChangeListener,getTarget --> weakRef,org.jhotdraw.beans.WeakPropertyChangeListener,READ);
Call(ATTRIBUTE,org.jhotdraw.beans.WeakPropertyChangeListener,toString --> weakRef,org.jhotdraw.beans.WeakPropertyChangeListener,READ);
EndClass 268
StartClass 269
Class(org.jhotdraw.app.action.file.LoadRecentFileAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Attribute(uri,java.net.URI,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(isEnabled,boolean,Public,N,N);
Method(doIt,void,Public,N,N);
Method(access$000,java.net.URI,Public,Y,N);
Parameter(<init>,org.jhotdraw.app.Application,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(<init>,java.net.URI,);
Parameter(doIt,org.jhotdraw.app.View,);
Parameter(access$000,org.jhotdraw.app.action.file.LoadRecentFileAction,);
SuperClass(org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction);
SuperClass(org.jhotdraw.app.action.AbstractViewAction);
Generalization(org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.LoadRecentFileAction,<init> --> uri,org.jhotdraw.app.action.file.LoadRecentFileAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.LoadRecentFileAction,doIt --> uri,org.jhotdraw.app.action.file.LoadRecentFileAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.LoadRecentFileAction,access$000 --> uri,org.jhotdraw.app.action.file.LoadRecentFileAction,READ);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction,<init> --> <init>,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction,<init> --> getName,org.jhotdraw.net.URIUtil,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction,isEnabled --> getApplication,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction,isEnabled --> isEnabled,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction,isEnabled --> getActiveView,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction,isEnabled --> isEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction,doIt --> getApplication,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction,doIt --> getActiveView,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction,doIt --> getURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction,doIt --> hasUnsavedChanges,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction,doIt --> createView,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction,doIt --> add,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction,doIt --> show,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction,doIt --> setEnabled,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction,doIt --> views,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction,doIt --> getMultipleOpenId,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction,doIt --> setMultipleOpenId,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction,doIt --> <init>,org.jhotdraw.app.action.file.LoadRecentFileAction$1,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction,doIt --> execute,org.jhotdraw.app.View,);
EndClass 269
StartClass 270
Class(org.jhotdraw.app.action.file.OpenRecentFileAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Attribute(uri,java.net.URI,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(openView,void,Protected,N,N);
Method(access$000,java.net.URI,Public,Y,N);
Parameter(<init>,org.jhotdraw.app.Application,);
Parameter(<init>,java.net.URI,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(openView,org.jhotdraw.app.View,);
Parameter(access$000,org.jhotdraw.app.action.file.OpenRecentFileAction,);
SuperClass(org.jhotdraw.app.action.AbstractApplicationAction);
Generalization(org.jhotdraw.app.action.AbstractApplicationAction);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction,actionPerformed --> openView,org.jhotdraw.app.action.file.OpenRecentFileAction,);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenRecentFileAction,<init> --> uri,org.jhotdraw.app.action.file.OpenRecentFileAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenRecentFileAction,access$000 --> uri,org.jhotdraw.app.action.file.OpenRecentFileAction,READ);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction,<init> --> <init>,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction,<init> --> getName,org.jhotdraw.net.URIUtil,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction,actionPerformed --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction,actionPerformed --> isEnabled,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction,actionPerformed --> setEnabled,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction,actionPerformed --> getActiveView,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction,actionPerformed --> isEmpty,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction,actionPerformed --> isEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction,actionPerformed --> createView,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction,actionPerformed --> add,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction,actionPerformed --> show,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction,openView --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction,openView --> setEnabled,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction,openView --> views,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction,openView --> isEmpty,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction,openView --> getMultipleOpenId,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction,openView --> setMultipleOpenId,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction,openView --> setEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction,openView --> <init>,org.jhotdraw.app.action.file.OpenRecentFileAction$1,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction,openView --> execute,org.jhotdraw.app.View,);
EndClass 270
StartClass 271
Class(org.jhotdraw.app.action.AbstractApplicationAction$1,N,N,NA);
Attribute(this$0,org.jhotdraw.app.action.AbstractApplicationAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(propertyChange,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.AbstractApplicationAction,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Composition(org.jhotdraw.app.action.AbstractApplicationAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractApplicationAction$1,<init> --> this$0,org.jhotdraw.app.action.AbstractApplicationAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractApplicationAction$1,propertyChange --> this$0,org.jhotdraw.app.action.AbstractApplicationAction$1,READ);
Call(METHOD,org.jhotdraw.app.action.AbstractApplicationAction$1,propertyChange --> updateApplicationEnabled,org.jhotdraw.app.action.AbstractApplicationAction,);
EndClass 271
StartClass 272
Class(org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$1,N,N,NA);
Attribute(val$labels,org.jhotdraw.util.ResourceBundleUtil,Public,N,Y,);
Attribute(val$v,org.jhotdraw.app.View,Public,N,Y,);
Attribute(this$0,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(optionSelected,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,);
Parameter(<init>,org.jhotdraw.util.ResourceBundleUtil,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(optionSelected,org.jhotdraw.gui.event.SheetEvent,);
Realization(org.jhotdraw.gui.event.SheetListener);
Composition(org.jhotdraw.util.ResourceBundleUtil);
Composition(org.jhotdraw.app.View);
Composition(org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$1,<init> --> this$0,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$1,<init> --> val$labels,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$1,<init> --> val$v,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$1,optionSelected --> val$labels,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$1,optionSelected --> val$v,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$1,optionSelected --> this$0,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$1,READ);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$1,optionSelected --> getValue,org.jhotdraw.gui.event.SheetEvent,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$1,optionSelected --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$1,optionSelected --> setEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$1,optionSelected --> doIt,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$1,optionSelected --> saveView,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,);
EndClass 272
StartClass 273
Class(org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$2,N,N,NA);
Attribute(val$v,org.jhotdraw.app.View,Public,N,Y,);
Attribute(this$0,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(optionSelected,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(optionSelected,org.jhotdraw.gui.event.SheetEvent,);
Realization(org.jhotdraw.gui.event.SheetListener);
Composition(org.jhotdraw.app.View);
Composition(org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$2,<init> --> this$0,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$2,<init> --> val$v,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$2,optionSelected --> this$0,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$2,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$2,optionSelected --> val$v,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$2,READ);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$2,optionSelected --> getOption,org.jhotdraw.gui.event.SheetEvent,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$2,optionSelected --> getChooser,org.jhotdraw.gui.event.SheetEvent,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$2,optionSelected --> getFileChooser,org.jhotdraw.gui.event.SheetEvent,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$2,optionSelected --> makeAcceptable,org.jhotdraw.gui.filechooser.ExtensionFileFilter,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$2,optionSelected --> getSelectedURI,org.jhotdraw.gui.URIChooser,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$2,optionSelected --> saveViewToURI,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$2,optionSelected --> setEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$2,optionSelected --> access$000,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,);
EndClass 273
StartClass 274
Class(org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,N,N,NA);
Attribute(val$v,org.jhotdraw.app.View,Public,N,Y,);
Attribute(val$uri,java.net.URI,Public,N,Y,);
Attribute(val$chooser,org.jhotdraw.gui.URIChooser,Public,N,Y,);
Attribute(this$0,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(construct,java.lang.Object,Protected,N,N);
Method(done,void,Protected,N,N);
Method(failed,void,Protected,N,N);
Method(finished,void,Protected,N,N);
Parameter(<init>,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(<init>,java.net.URI,);
Parameter(<init>,org.jhotdraw.gui.URIChooser,);
Parameter(done,java.lang.Object,);
Parameter(failed,java.lang.Throwable,);
SuperClass(org.jhotdraw.gui.Worker);
Generalization(org.jhotdraw.gui.Worker);
Composition(org.jhotdraw.app.View);
Composition(org.jhotdraw.gui.URIChooser);
Composition(org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,<init> --> this$0,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,<init> --> val$v,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,<init> --> val$uri,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,<init> --> val$chooser,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,construct --> val$v,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,construct --> val$uri,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,construct --> val$chooser,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,done --> val$v,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,done --> val$uri,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,done --> this$0,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,failed --> this$0,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,failed --> val$uri,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,finished --> val$v,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,finished --> this$0,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,READ);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,<init> --> <init>,org.jhotdraw.gui.Worker,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,construct --> write,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,done --> setURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,done --> markChangesAsSaved,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,done --> doIt,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,failed --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,failed --> getActiveView,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,failed --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,failed --> getName,org.jhotdraw.net.URIUtil,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,failed --> getFormatted,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,failed --> showMessageSheet$3,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,finished --> setEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction$3,finished --> access$000,org.jhotdraw.app.action.AbstractSaveUnsavedChangesAction,);
EndClass 274
StartClass 275
Class(org.jhotdraw.app.action.app.OpenApplicationFileAction$1$1,N,N,NA);
Attribute(this$1,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(optionSelected,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,);
Parameter(optionSelected,org.jhotdraw.gui.event.SheetEvent,);
Realization(org.jhotdraw.gui.event.SheetListener);
Composition(org.jhotdraw.app.action.app.OpenApplicationFileAction$1);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.OpenApplicationFileAction$1$1,<init> --> this$1,org.jhotdraw.app.action.app.OpenApplicationFileAction$1$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.OpenApplicationFileAction$1$1,optionSelected --> this$1,org.jhotdraw.app.action.app.OpenApplicationFileAction$1$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.app.OpenApplicationFileAction$1$1,optionSelected --> val$view,org.jhotdraw.app.action.app.OpenApplicationFileAction$1,READ);
Call(METHOD,org.jhotdraw.app.action.app.OpenApplicationFileAction$1$1,optionSelected --> setEnabled,org.jhotdraw.app.View,);
EndClass 275
StartClass 276
Class(org.jhotdraw.app.action.AbstractViewAction$1,N,N,NA);
Attribute(this$0,org.jhotdraw.app.action.AbstractViewAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(propertyChange,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.AbstractViewAction,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Composition(org.jhotdraw.app.action.AbstractViewAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractViewAction$1,<init> --> this$0,org.jhotdraw.app.action.AbstractViewAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractViewAction$1,propertyChange --> this$0,org.jhotdraw.app.action.AbstractViewAction$1,READ);
Call(METHOD,org.jhotdraw.app.action.AbstractViewAction$1,propertyChange --> updateView,org.jhotdraw.app.action.AbstractViewAction,);
EndClass 276
StartClass 277
Class(org.jhotdraw.app.action.AbstractViewAction$2,N,N,NA);
Attribute(this$0,org.jhotdraw.app.action.AbstractViewAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(propertyChange,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.AbstractViewAction,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Composition(org.jhotdraw.app.action.AbstractViewAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractViewAction$2,<init> --> this$0,org.jhotdraw.app.action.AbstractViewAction$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.AbstractViewAction$2,propertyChange --> this$0,org.jhotdraw.app.action.AbstractViewAction$2,READ);
Call(METHOD,org.jhotdraw.app.action.AbstractViewAction$2,propertyChange --> updateEnabled,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.AbstractViewAction$2,propertyChange --> access$000,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.AbstractViewAction$2,propertyChange --> updateView$2,org.jhotdraw.app.action.AbstractViewAction,);
EndClass 277
StartClass 278
Class(org.jhotdraw.gui.event.SheetEvent,N,N,Public);
Attribute(pane,java.lang.Object,Private,N,N,);
Attribute(option,int,Private,N,N,);
Attribute(value,java.lang.Object,Private,N,N,);
Attribute(inputValue,java.lang.Object,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(getPane,java.lang.Object,Public,N,N);
Method(getFileChooser,javax.swing.JFileChooser,Public,N,N);
Method(getChooser,org.jhotdraw.gui.URIChooser,Public,N,N);
Method(getOptionPane,javax.swing.JOptionPane,Public,N,N);
Method(getOption,int,Public,N,N);
Method(getValue,java.lang.Object,Public,N,N);
Method(getInputValue,java.lang.Object,Public,N,N);
Parameter(<init>,org.jhotdraw.gui.JSheet,);
Parameter(<init>$2,org.jhotdraw.gui.JSheet,);
Parameter(<init>$2,javax.swing.JFileChooser,);
Parameter(<init>$2,int,);
Parameter(<init>$2,java.lang.Object,);
Parameter(<init>$3,org.jhotdraw.gui.JSheet,);
Parameter(<init>$3,org.jhotdraw.gui.URIChooser,);
Parameter(<init>$3,int,);
Parameter(<init>$3,java.lang.Object,);
Parameter(<init>$4,org.jhotdraw.gui.JSheet,);
Parameter(<init>$4,javax.swing.JOptionPane,);
Parameter(<init>$4,int,);
Parameter(<init>$4,java.lang.Object,);
Parameter(<init>$4,java.lang.Object,);
Call(ATTRIBUTE,org.jhotdraw.gui.event.SheetEvent,<init>$2 --> pane,org.jhotdraw.gui.event.SheetEvent,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.event.SheetEvent,<init>$2 --> option,org.jhotdraw.gui.event.SheetEvent,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.event.SheetEvent,<init>$2 --> value,org.jhotdraw.gui.event.SheetEvent,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.event.SheetEvent,<init>$3 --> pane,org.jhotdraw.gui.event.SheetEvent,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.event.SheetEvent,<init>$3 --> option,org.jhotdraw.gui.event.SheetEvent,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.event.SheetEvent,<init>$3 --> value,org.jhotdraw.gui.event.SheetEvent,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.event.SheetEvent,<init>$4 --> pane,org.jhotdraw.gui.event.SheetEvent,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.event.SheetEvent,<init>$4 --> option,org.jhotdraw.gui.event.SheetEvent,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.event.SheetEvent,<init>$4 --> value,org.jhotdraw.gui.event.SheetEvent,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.event.SheetEvent,<init>$4 --> inputValue,org.jhotdraw.gui.event.SheetEvent,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.event.SheetEvent,getPane --> pane,org.jhotdraw.gui.event.SheetEvent,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.event.SheetEvent,getFileChooser --> pane,org.jhotdraw.gui.event.SheetEvent,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.event.SheetEvent,getChooser --> pane,org.jhotdraw.gui.event.SheetEvent,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.event.SheetEvent,getOptionPane --> pane,org.jhotdraw.gui.event.SheetEvent,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.event.SheetEvent,getOption --> option,org.jhotdraw.gui.event.SheetEvent,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.event.SheetEvent,getValue --> value,org.jhotdraw.gui.event.SheetEvent,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.event.SheetEvent,getInputValue --> inputValue,org.jhotdraw.gui.event.SheetEvent,READ);
EndClass 278
StartClass 279
Class(org.jhotdraw.gui.JSheet$1,N,N,NA);
Attribute(this$0,org.jhotdraw.gui.JSheet,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(componentMoved,void,Public,N,N);
Parameter(<init>,org.jhotdraw.gui.JSheet,);
Parameter(componentMoved,java.awt.event.ComponentEvent,);
Composition(org.jhotdraw.gui.JSheet);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$1,<init> --> this$0,org.jhotdraw.gui.JSheet$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$1,componentMoved --> this$0,org.jhotdraw.gui.JSheet$1,READ);
Call(METHOD,org.jhotdraw.gui.JSheet$1,componentMoved --> access$000,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet$1,componentMoved --> access$102,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet$1,componentMoved --> access$002,org.jhotdraw.gui.JSheet,);
EndClass 279
StartClass 280
Class(org.jhotdraw.gui.JSheet$2,N,N,NA);
Attribute(startTime,long,Public,N,N,);
Attribute(endTime,long,Public,N,N,);
Attribute(val$timer,javax.swing.Timer,Public,N,Y,);
Attribute(val$startBounds,java.awt.Rectangle,Public,N,Y,);
Attribute(val$endBounds,java.awt.Rectangle,Public,N,Y,);
Attribute(this$0,org.jhotdraw.gui.JSheet,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.gui.JSheet,);
Parameter(<init>,javax.swing.Timer,);
Parameter(<init>,java.awt.Rectangle,);
Parameter(<init>,java.awt.Rectangle,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Composition(org.jhotdraw.gui.JSheet);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$2,<init> --> this$0,org.jhotdraw.gui.JSheet$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$2,<init> --> val$timer,org.jhotdraw.gui.JSheet$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$2,<init> --> val$startBounds,org.jhotdraw.gui.JSheet$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$2,<init> --> val$endBounds,org.jhotdraw.gui.JSheet$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$2,actionPerformed --> startTime,org.jhotdraw.gui.JSheet$2,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$2,actionPerformed --> endTime,org.jhotdraw.gui.JSheet$2,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$2,actionPerformed --> val$timer,org.jhotdraw.gui.JSheet$2,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$2,actionPerformed --> this$0,org.jhotdraw.gui.JSheet$2,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$2,actionPerformed --> val$startBounds,org.jhotdraw.gui.JSheet$2,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$2,actionPerformed --> val$endBounds,org.jhotdraw.gui.JSheet$2,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$2,actionPerformed --> startTime,org.jhotdraw.gui.JSheet$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$2,actionPerformed --> endTime,org.jhotdraw.gui.JSheet$2,WRITE);
Call(METHOD,org.jhotdraw.gui.JSheet$2,actionPerformed --> hide0,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet$2,actionPerformed --> uninstallSheet,org.jhotdraw.gui.JSheet,);
EndClass 280
StartClass 281
Class(org.jhotdraw.gui.JSheet$5,N,N,NA);
Attribute(gotFocus,boolean,Private,N,N,);
Attribute(val$pane,javax.swing.JOptionPane,Public,N,Y,);
Attribute(val$sheet,org.jhotdraw.gui.JSheet,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(windowClosing,void,Public,N,N);
Method(windowClosed,void,Public,N,N);
Method(windowGainedFocus,void,Public,N,N);
Parameter(<init>,javax.swing.JOptionPane,);
Parameter(<init>,org.jhotdraw.gui.JSheet,);
Parameter(windowClosing,java.awt.event.WindowEvent,);
Parameter(windowClosed,java.awt.event.WindowEvent,);
Parameter(windowGainedFocus,java.awt.event.WindowEvent,);
Composition(org.jhotdraw.gui.JSheet);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$5,<init> --> val$pane,org.jhotdraw.gui.JSheet$5,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$5,<init> --> val$sheet,org.jhotdraw.gui.JSheet$5,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$5,<init> --> gotFocus,org.jhotdraw.gui.JSheet$5,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$5,windowClosing --> val$pane,org.jhotdraw.gui.JSheet$5,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$5,windowClosed --> val$pane,org.jhotdraw.gui.JSheet$5,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$5,windowClosed --> val$sheet,org.jhotdraw.gui.JSheet$5,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$5,windowGainedFocus --> gotFocus,org.jhotdraw.gui.JSheet$5,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$5,windowGainedFocus --> val$pane,org.jhotdraw.gui.JSheet$5,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$5,windowGainedFocus --> gotFocus,org.jhotdraw.gui.JSheet$5,WRITE);
Call(METHOD,org.jhotdraw.gui.JSheet$5,windowClosed --> fireOptionSelected,org.jhotdraw.gui.JSheet,);
EndClass 281
StartClass 282
Class(org.jhotdraw.gui.JSheet$6,N,N,NA);
Attribute(val$pane,javax.swing.JOptionPane,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(componentShown,void,Public,N,N);
Parameter(<init>,javax.swing.JOptionPane,);
Parameter(componentShown,java.awt.event.ComponentEvent,);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$6,<init> --> val$pane,org.jhotdraw.gui.JSheet$6,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$6,componentShown --> val$pane,org.jhotdraw.gui.JSheet$6,READ);
EndClass 282
StartClass 283
Class(org.jhotdraw.gui.JSheet$3,N,N,NA);
Attribute(startTime,long,Public,N,N,);
Attribute(endTime,long,Public,N,N,);
Attribute(val$timer,javax.swing.Timer,Public,N,Y,);
Attribute(val$endBounds,java.awt.Rectangle,Public,N,Y,);
Attribute(val$startBounds,java.awt.Rectangle,Public,N,Y,);
Attribute(this$0,org.jhotdraw.gui.JSheet,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.gui.JSheet,);
Parameter(<init>,javax.swing.Timer,);
Parameter(<init>,java.awt.Rectangle,);
Parameter(<init>,java.awt.Rectangle,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Composition(org.jhotdraw.gui.JSheet);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$3,<init> --> this$0,org.jhotdraw.gui.JSheet$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$3,<init> --> val$timer,org.jhotdraw.gui.JSheet$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$3,<init> --> val$endBounds,org.jhotdraw.gui.JSheet$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$3,<init> --> val$startBounds,org.jhotdraw.gui.JSheet$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$3,actionPerformed --> startTime,org.jhotdraw.gui.JSheet$3,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$3,actionPerformed --> endTime,org.jhotdraw.gui.JSheet$3,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$3,actionPerformed --> val$timer,org.jhotdraw.gui.JSheet$3,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$3,actionPerformed --> this$0,org.jhotdraw.gui.JSheet$3,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$3,actionPerformed --> val$endBounds,org.jhotdraw.gui.JSheet$3,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$3,actionPerformed --> val$startBounds,org.jhotdraw.gui.JSheet$3,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$3,actionPerformed --> startTime,org.jhotdraw.gui.JSheet$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$3,actionPerformed --> endTime,org.jhotdraw.gui.JSheet$3,WRITE);
EndClass 283
StartClass 284
Class(org.jhotdraw.gui.JSheet$4,N,N,NA);
Method(<init>,void,Public,N,N);
Method(optionSelected,void,Public,N,N);
Parameter(optionSelected,org.jhotdraw.gui.event.SheetEvent,);
Realization(org.jhotdraw.gui.event.SheetListener);
EndClass 284
StartClass 285
Class(org.jhotdraw.gui.JSheet$9,N,N,NA);
Attribute(val$sheet,org.jhotdraw.gui.JSheet,Public,N,Y,);
Attribute(val$chooser,javax.swing.JFileChooser,Public,N,Y,);
Attribute(val$actionListener,java.awt.event.ActionListener,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(windowClosing,void,Public,N,N);
Parameter(<init>,org.jhotdraw.gui.JSheet,);
Parameter(<init>,javax.swing.JFileChooser,);
Parameter(<init>,java.awt.event.ActionListener,);
Parameter(windowClosing,java.awt.event.WindowEvent,);
Composition(org.jhotdraw.gui.JSheet);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$9,<init> --> val$sheet,org.jhotdraw.gui.JSheet$9,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$9,<init> --> val$chooser,org.jhotdraw.gui.JSheet$9,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$9,<init> --> val$actionListener,org.jhotdraw.gui.JSheet$9,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$9,windowClosing --> val$sheet,org.jhotdraw.gui.JSheet$9,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$9,windowClosing --> val$chooser,org.jhotdraw.gui.JSheet$9,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$9,windowClosing --> val$actionListener,org.jhotdraw.gui.JSheet$9,READ);
Call(METHOD,org.jhotdraw.gui.JSheet$9,windowClosing --> fireOptionSelected$3,org.jhotdraw.gui.JSheet,);
EndClass 285
StartClass 286
Class(org.jhotdraw.gui.JSheet$7,N,N,NA);
Attribute(val$sheet,org.jhotdraw.gui.JSheet,Public,N,Y,);
Attribute(val$pane,javax.swing.JOptionPane,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(propertyChange,void,Public,N,N);
Parameter(<init>,org.jhotdraw.gui.JSheet,);
Parameter(<init>,javax.swing.JOptionPane,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Composition(org.jhotdraw.gui.JSheet);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$7,<init> --> val$sheet,org.jhotdraw.gui.JSheet$7,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$7,<init> --> val$pane,org.jhotdraw.gui.JSheet$7,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$7,propertyChange --> val$sheet,org.jhotdraw.gui.JSheet$7,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$7,propertyChange --> val$pane,org.jhotdraw.gui.JSheet$7,READ);
Call(METHOD,org.jhotdraw.gui.JSheet$7,propertyChange --> fireOptionSelected,org.jhotdraw.gui.JSheet,);
EndClass 286
StartClass 287
Class(org.jhotdraw.gui.JSheet$8,N,N,NA);
Attribute(val$sheet,org.jhotdraw.gui.JSheet,Public,N,Y,);
Attribute(val$chooser,javax.swing.JFileChooser,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.gui.JSheet,);
Parameter(<init>,javax.swing.JFileChooser,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Composition(org.jhotdraw.gui.JSheet);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$8,<init> --> val$sheet,org.jhotdraw.gui.JSheet$8,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$8,<init> --> val$chooser,org.jhotdraw.gui.JSheet$8,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$8,actionPerformed --> val$sheet,org.jhotdraw.gui.JSheet$8,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$8,actionPerformed --> val$chooser,org.jhotdraw.gui.JSheet$8,READ);
Call(METHOD,org.jhotdraw.gui.JSheet$8,actionPerformed --> hide,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet$8,actionPerformed --> fireOptionSelected$3,org.jhotdraw.gui.JSheet,);
EndClass 287
StartClass 288
Class(org.jhotdraw.gui.JSheet$11,N,N,NA);
Attribute(val$sheet,org.jhotdraw.gui.JSheet,Public,N,Y,);
Attribute(val$chooser,org.jhotdraw.gui.URIChooser,Public,N,Y,);
Attribute(val$actionListener,java.awt.event.ActionListener,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(windowClosing,void,Public,N,N);
Parameter(<init>,org.jhotdraw.gui.JSheet,);
Parameter(<init>,org.jhotdraw.gui.URIChooser,);
Parameter(<init>,java.awt.event.ActionListener,);
Parameter(windowClosing,java.awt.event.WindowEvent,);
Composition(org.jhotdraw.gui.JSheet);
Composition(org.jhotdraw.gui.URIChooser);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$11,<init> --> val$sheet,org.jhotdraw.gui.JSheet$11,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$11,<init> --> val$chooser,org.jhotdraw.gui.JSheet$11,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$11,<init> --> val$actionListener,org.jhotdraw.gui.JSheet$11,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$11,windowClosing --> val$sheet,org.jhotdraw.gui.JSheet$11,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$11,windowClosing --> val$chooser,org.jhotdraw.gui.JSheet$11,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$11,windowClosing --> val$actionListener,org.jhotdraw.gui.JSheet$11,READ);
Call(METHOD,org.jhotdraw.gui.JSheet$11,windowClosing --> fireOptionSelected$4,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet$11,windowClosing --> removeActionListener,org.jhotdraw.gui.URIChooser,);
EndClass 288
StartClass 289
Class(org.jhotdraw.gui.JSheet$10,N,N,NA);
Attribute(val$sheet,org.jhotdraw.gui.JSheet,Public,N,Y,);
Attribute(val$chooser,org.jhotdraw.gui.URIChooser,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.gui.JSheet,);
Parameter(<init>,org.jhotdraw.gui.URIChooser,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Composition(org.jhotdraw.gui.JSheet);
Composition(org.jhotdraw.gui.URIChooser);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$10,<init> --> val$sheet,org.jhotdraw.gui.JSheet$10,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$10,<init> --> val$chooser,org.jhotdraw.gui.JSheet$10,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$10,actionPerformed --> val$sheet,org.jhotdraw.gui.JSheet$10,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JSheet$10,actionPerformed --> val$chooser,org.jhotdraw.gui.JSheet$10,READ);
Call(METHOD,org.jhotdraw.gui.JSheet$10,actionPerformed --> hide,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet$10,actionPerformed --> fireOptionSelected$4,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.gui.JSheet$10,actionPerformed --> removeActionListener,org.jhotdraw.gui.URIChooser,);
EndClass 289
StartClass 290
Class(org.jhotdraw.gui.Worker$1,N,N,NA);
Attribute(this$0,org.jhotdraw.gui.Worker,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(run,void,Public,N,N);
Parameter(<init>,org.jhotdraw.gui.Worker,);
Composition(org.jhotdraw.gui.Worker);
Call(ATTRIBUTE,org.jhotdraw.gui.Worker$1,<init> --> this$0,org.jhotdraw.gui.Worker$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.Worker$1,run --> this$0,org.jhotdraw.gui.Worker$1,READ);
Call(METHOD,org.jhotdraw.gui.Worker$1,run --> getError,org.jhotdraw.gui.Worker,);
Call(METHOD,org.jhotdraw.gui.Worker$1,run --> failed,org.jhotdraw.gui.Worker,);
Call(METHOD,org.jhotdraw.gui.Worker$1,run --> finished,org.jhotdraw.gui.Worker,);
EndClass 290
StartClass 291
Class(org.jhotdraw.gui.Worker$2,N,N,NA);
Attribute(this$0,org.jhotdraw.gui.Worker,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(run,void,Public,N,N);
Parameter(<init>,org.jhotdraw.gui.Worker,);
Composition(org.jhotdraw.gui.Worker);
Call(ATTRIBUTE,org.jhotdraw.gui.Worker$2,<init> --> this$0,org.jhotdraw.gui.Worker$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.Worker$2,run --> this$0,org.jhotdraw.gui.Worker$2,READ);
Call(METHOD,org.jhotdraw.gui.Worker$2,run --> getValue,org.jhotdraw.gui.Worker,);
Call(METHOD,org.jhotdraw.gui.Worker$2,run --> done,org.jhotdraw.gui.Worker,);
Call(METHOD,org.jhotdraw.gui.Worker$2,run --> finished,org.jhotdraw.gui.Worker,);
EndClass 291
StartClass 292
Class(org.jhotdraw.app.action.window.TogglePaletteAction$1,N,N,NA);
Attribute(this$0,org.jhotdraw.app.action.window.TogglePaletteAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(windowClosing,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.window.TogglePaletteAction,);
Parameter(windowClosing,java.awt.event.WindowEvent,);
Composition(org.jhotdraw.app.action.window.TogglePaletteAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.TogglePaletteAction$1,<init> --> this$0,org.jhotdraw.app.action.window.TogglePaletteAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.window.TogglePaletteAction$1,windowClosing --> this$0,org.jhotdraw.app.action.window.TogglePaletteAction$1,READ);
Call(METHOD,org.jhotdraw.app.action.window.TogglePaletteAction$1,windowClosing --> putValue,org.jhotdraw.app.action.window.TogglePaletteAction,);
EndClass 292
StartClass 293
Class(org.jhotdraw.app.action.edit.UndoAction$1,N,N,NA);
Attribute(this$0,org.jhotdraw.app.action.edit.UndoAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(propertyChange,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.edit.UndoAction,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Composition(org.jhotdraw.app.action.edit.UndoAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.UndoAction$1,<init> --> this$0,org.jhotdraw.app.action.edit.UndoAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.UndoAction$1,propertyChange --> this$0,org.jhotdraw.app.action.edit.UndoAction$1,READ);
Call(METHOD,org.jhotdraw.app.action.edit.UndoAction$1,propertyChange --> updateEnabledState,org.jhotdraw.app.action.edit.UndoAction,);
EndClass 293
StartClass 294
Class(org.jhotdraw.app.action.file.NewFileAction$1,N,N,NA);
Attribute(val$newView,org.jhotdraw.app.View,Public,N,Y,);
Attribute(this$0,org.jhotdraw.app.action.file.NewFileAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(run,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.file.NewFileAction,);
Parameter(<init>,org.jhotdraw.app.View,);
Composition(org.jhotdraw.app.View);
Composition(org.jhotdraw.app.action.file.NewFileAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.NewFileAction$1,<init> --> this$0,org.jhotdraw.app.action.file.NewFileAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.NewFileAction$1,<init> --> val$newView,org.jhotdraw.app.action.file.NewFileAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.NewFileAction$1,run --> val$newView,org.jhotdraw.app.action.file.NewFileAction$1,READ);
Call(METHOD,org.jhotdraw.app.action.file.NewFileAction$1,run --> clear,org.jhotdraw.app.View,);
EndClass 294
StartClass 295
Class(org.jhotdraw.app.action.edit.RedoAction$1,N,N,NA);
Attribute(this$0,org.jhotdraw.app.action.edit.RedoAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(propertyChange,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.edit.RedoAction,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Composition(org.jhotdraw.app.action.edit.RedoAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.RedoAction$1,<init> --> this$0,org.jhotdraw.app.action.edit.RedoAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.RedoAction$1,propertyChange --> this$0,org.jhotdraw.app.action.edit.RedoAction$1,READ);
Call(METHOD,org.jhotdraw.app.action.edit.RedoAction$1,propertyChange --> updateEnabledState,org.jhotdraw.app.action.edit.RedoAction,);
EndClass 295
StartClass 296
Class(org.jhotdraw.app.action.edit.AbstractSelectionAction,N,Y,Public);
Attribute(target,javax.swing.JComponent,Protected,N,N,);
Attribute(propertyHandler,java.beans.PropertyChangeListener,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(updateEnabled,void,Protected,N,N);
Parameter(<init>,javax.swing.JComponent,);
SubClass(org.jhotdraw.app.action.edit.DuplicateAction);
SubClass(org.jhotdraw.app.action.edit.SelectAllAction);
SubClass(org.jhotdraw.app.action.edit.CutAction);
SubClass(org.jhotdraw.app.action.edit.PasteAction);
SubClass(org.jhotdraw.app.action.edit.CopyAction);
SubClass(org.jhotdraw.app.action.edit.ClearSelectionAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.AbstractSelectionAction,<init> --> propertyHandler,org.jhotdraw.app.action.edit.AbstractSelectionAction,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.AbstractSelectionAction,<init> --> target,org.jhotdraw.app.action.edit.AbstractSelectionAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.AbstractSelectionAction,<init> --> propertyHandler,org.jhotdraw.app.action.edit.AbstractSelectionAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.AbstractSelectionAction,updateEnabled --> target,org.jhotdraw.app.action.edit.AbstractSelectionAction,READ);
Call(METHOD,org.jhotdraw.app.action.edit.AbstractSelectionAction,<init> --> <init>,org.jhotdraw.app.action.edit.AbstractSelectionAction$1,);
Call(METHOD,org.jhotdraw.app.action.edit.AbstractSelectionAction,<init> --> <init>,org.jhotdraw.beans.WeakPropertyChangeListener,);
Call(METHOD,org.jhotdraw.app.action.edit.AbstractSelectionAction,updateEnabled --> isSelectionEmpty,org.jhotdraw.gui.EditableComponent,);
EndClass 296
StartClass 297
Class(org.jhotdraw.gui.EditableComponent,Y,Y,Public);
Attribute(SELECTION_EMPTY_PROPERTY,java.lang.String,Public,Y,Y,);
Method(delete,void,Public,N,Y);
Method(duplicate,void,Public,N,Y);
Method(selectAll,void,Public,N,Y);
Method(clearSelection,void,Public,N,Y);
Method(isSelectionEmpty,boolean,Public,N,Y);
Method(addPropertyChangeListener,void,Public,N,Y);
Method(removePropertyChangeListener,void,Public,N,Y);
Parameter(addPropertyChangeListener,java.beans.PropertyChangeListener,);
Parameter(removePropertyChangeListener,java.beans.PropertyChangeListener,);
EndClass 297
StartClass 298
Class(org.jhotdraw.gui.datatransfer.ClipboardUtil,N,N,Public);
Attribute(instance,java.awt.datatransfer.Clipboard,Private,Y,N,);
Method(<init>,void,Public,N,N);
Method(getClipboard,java.awt.datatransfer.Clipboard,Public,Y,N);
Method(setClipboard,void,Public,Y,N);
Parameter(setClipboard,java.awt.datatransfer.Clipboard,);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.ClipboardUtil,getClipboard --> instance,org.jhotdraw.gui.datatransfer.ClipboardUtil,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.ClipboardUtil,getClipboard --> instance,org.jhotdraw.gui.datatransfer.ClipboardUtil,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.ClipboardUtil,setClipboard --> instance,org.jhotdraw.gui.datatransfer.ClipboardUtil,WRITE);
Call(METHOD,org.jhotdraw.gui.datatransfer.ClipboardUtil,getClipboard --> <init>,org.jhotdraw.gui.datatransfer.OSXClipboard,);
Call(METHOD,org.jhotdraw.gui.datatransfer.ClipboardUtil,getClipboard --> <init>,org.jhotdraw.gui.datatransfer.JNLPClipboard,);
Call(METHOD,org.jhotdraw.gui.datatransfer.ClipboardUtil,getClipboard --> <init>,org.jhotdraw.gui.datatransfer.AWTClipboard,);
EndClass 298
StartClass 299
Class(org.jhotdraw.app.action.file.OpenFileAction$2,N,N,NA);
Attribute(val$returnValue,int[],Public,N,Y,);
Attribute(this$0,org.jhotdraw.app.action.file.OpenFileAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(windowClosing,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.file.OpenFileAction,);
Parameter(<init>,int[],);
Parameter(windowClosing,java.awt.event.WindowEvent,);
Composition(org.jhotdraw.app.action.file.OpenFileAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenFileAction$2,<init> --> this$0,org.jhotdraw.app.action.file.OpenFileAction$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenFileAction$2,<init> --> val$returnValue,org.jhotdraw.app.action.file.OpenFileAction$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenFileAction$2,windowClosing --> val$returnValue,org.jhotdraw.app.action.file.OpenFileAction$2,READ);
EndClass 299
StartClass 300
Class(org.jhotdraw.app.action.file.OpenFileAction$3,N,N,NA);
Attribute(val$returnValue,int[],Public,N,Y,);
Attribute(val$dialog,javax.swing.JDialog,Public,N,Y,);
Attribute(this$0,org.jhotdraw.app.action.file.OpenFileAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.file.OpenFileAction,);
Parameter(<init>,int[],);
Parameter(<init>,javax.swing.JDialog,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Composition(org.jhotdraw.app.action.file.OpenFileAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenFileAction$3,<init> --> this$0,org.jhotdraw.app.action.file.OpenFileAction$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenFileAction$3,<init> --> val$returnValue,org.jhotdraw.app.action.file.OpenFileAction$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenFileAction$3,<init> --> val$dialog,org.jhotdraw.app.action.file.OpenFileAction$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenFileAction$3,actionPerformed --> val$returnValue,org.jhotdraw.app.action.file.OpenFileAction$3,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenFileAction$3,actionPerformed --> val$dialog,org.jhotdraw.app.action.file.OpenFileAction$3,READ);
EndClass 300
StartClass 301
Class(org.jhotdraw.app.action.file.OpenFileAction$1,N,N,NA);
Attribute(val$uri,java.net.URI,Public,N,Y,);
Attribute(val$view,org.jhotdraw.app.View,Public,N,Y,);
Attribute(val$chooser,org.jhotdraw.gui.URIChooser,Public,N,Y,);
Attribute(val$app,org.jhotdraw.app.Application,Public,N,Y,);
Attribute(this$0,org.jhotdraw.app.action.file.OpenFileAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(construct,java.lang.Object,Public,N,N);
Method(done,void,Protected,N,N);
Method(failed,void,Protected,N,N);
Parameter(<init>,org.jhotdraw.app.action.file.OpenFileAction,);
Parameter(<init>,java.net.URI,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(<init>,org.jhotdraw.gui.URIChooser,);
Parameter(<init>,org.jhotdraw.app.Application,);
Parameter(done,java.lang.Object,);
Parameter(failed,java.lang.Throwable,);
SuperClass(org.jhotdraw.gui.Worker);
Generalization(org.jhotdraw.gui.Worker);
Composition(org.jhotdraw.app.View);
Composition(org.jhotdraw.gui.URIChooser);
Composition(org.jhotdraw.app.Application);
Composition(org.jhotdraw.app.action.file.OpenFileAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenFileAction$1,<init> --> this$0,org.jhotdraw.app.action.file.OpenFileAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenFileAction$1,<init> --> val$uri,org.jhotdraw.app.action.file.OpenFileAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenFileAction$1,<init> --> val$view,org.jhotdraw.app.action.file.OpenFileAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenFileAction$1,<init> --> val$chooser,org.jhotdraw.app.action.file.OpenFileAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenFileAction$1,<init> --> val$app,org.jhotdraw.app.action.file.OpenFileAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenFileAction$1,construct --> val$uri,org.jhotdraw.app.action.file.OpenFileAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenFileAction$1,construct --> val$view,org.jhotdraw.app.action.file.OpenFileAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenFileAction$1,construct --> val$chooser,org.jhotdraw.app.action.file.OpenFileAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenFileAction$1,done --> this$0,org.jhotdraw.app.action.file.OpenFileAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenFileAction$1,done --> val$view,org.jhotdraw.app.action.file.OpenFileAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenFileAction$1,done --> val$uri,org.jhotdraw.app.action.file.OpenFileAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenFileAction$1,failed --> val$view,org.jhotdraw.app.action.file.OpenFileAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenFileAction$1,failed --> val$app,org.jhotdraw.app.action.file.OpenFileAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenFileAction$1,failed --> val$uri,org.jhotdraw.app.action.file.OpenFileAction$1,READ);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction$1,<init> --> <init>,org.jhotdraw.gui.Worker,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction$1,construct --> read,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction$1,construct --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction$1,construct --> getName,org.jhotdraw.net.URIUtil,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction$1,construct --> getFormatted,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction$1,done --> getApplication,org.jhotdraw.app.action.AbstractApplicationAction,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction$1,done --> setURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction$1,done --> setEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction$1,done --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction$1,done --> addRecentURI,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction$1,done --> setEnabled,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction$1,failed --> setEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction$1,failed --> setEnabled,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction$1,failed --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction$1,failed --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction$1,failed --> getName,org.jhotdraw.net.URIUtil,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction$1,failed --> getFormatted,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.OpenFileAction$1,failed --> showMessageSheet$3,org.jhotdraw.gui.JSheet,);
EndClass 301
StartClass 302
Class(org.jhotdraw.app.action.edit.DeleteAction$1,N,N,NA);
Attribute(this$0,org.jhotdraw.app.action.edit.DeleteAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(propertyChange,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.edit.DeleteAction,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Composition(org.jhotdraw.app.action.edit.DeleteAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.DeleteAction$1,<init> --> this$0,org.jhotdraw.app.action.edit.DeleteAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.DeleteAction$1,propertyChange --> this$0,org.jhotdraw.app.action.edit.DeleteAction$1,READ);
EndClass 302
StartClass 303
Class(org.jhotdraw.app.action.file.SaveFileAction$2,N,N,NA);
Attribute(val$view,org.jhotdraw.app.View,Public,N,Y,);
Attribute(val$file,java.net.URI,Public,N,Y,);
Attribute(val$chooser,org.jhotdraw.gui.URIChooser,Public,N,Y,);
Attribute(this$0,org.jhotdraw.app.action.file.SaveFileAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(construct,java.lang.Object,Protected,N,N);
Method(done,void,Protected,N,N);
Method(failed,void,Protected,N,N);
Method(finished,void,Protected,N,N);
Parameter(<init>,org.jhotdraw.app.action.file.SaveFileAction,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(<init>,java.net.URI,);
Parameter(<init>,org.jhotdraw.gui.URIChooser,);
Parameter(done,java.lang.Object,);
Parameter(failed,java.lang.Throwable,);
SuperClass(org.jhotdraw.gui.Worker);
Generalization(org.jhotdraw.gui.Worker);
Composition(org.jhotdraw.app.View);
Composition(org.jhotdraw.gui.URIChooser);
Composition(org.jhotdraw.app.action.file.SaveFileAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.SaveFileAction$2,<init> --> this$0,org.jhotdraw.app.action.file.SaveFileAction$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.SaveFileAction$2,<init> --> val$view,org.jhotdraw.app.action.file.SaveFileAction$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.SaveFileAction$2,<init> --> val$file,org.jhotdraw.app.action.file.SaveFileAction$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.SaveFileAction$2,<init> --> val$chooser,org.jhotdraw.app.action.file.SaveFileAction$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.SaveFileAction$2,construct --> val$view,org.jhotdraw.app.action.file.SaveFileAction$2,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.SaveFileAction$2,construct --> val$file,org.jhotdraw.app.action.file.SaveFileAction$2,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.SaveFileAction$2,construct --> val$chooser,org.jhotdraw.app.action.file.SaveFileAction$2,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.SaveFileAction$2,done --> val$view,org.jhotdraw.app.action.file.SaveFileAction$2,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.SaveFileAction$2,done --> val$file,org.jhotdraw.app.action.file.SaveFileAction$2,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.SaveFileAction$2,done --> this$0,org.jhotdraw.app.action.file.SaveFileAction$2,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.SaveFileAction$2,failed --> this$0,org.jhotdraw.app.action.file.SaveFileAction$2,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.SaveFileAction$2,failed --> val$file,org.jhotdraw.app.action.file.SaveFileAction$2,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.SaveFileAction$2,finished --> val$view,org.jhotdraw.app.action.file.SaveFileAction$2,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.SaveFileAction$2,finished --> this$0,org.jhotdraw.app.action.file.SaveFileAction$2,READ);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$2,<init> --> <init>,org.jhotdraw.gui.Worker,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$2,construct --> write,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$2,done --> setURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$2,done --> markChangesAsSaved,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$2,done --> getApplication,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$2,done --> views,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$2,done --> getURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$2,done --> getMultipleOpenId,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$2,done --> getApplication,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$2,done --> addRecentURI,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$2,done --> setMultipleOpenId,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$2,failed --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$2,failed --> getActiveView,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$2,failed --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$2,failed --> getName,org.jhotdraw.net.URIUtil,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$2,failed --> getFormatted,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$2,failed --> showMessageSheet$3,org.jhotdraw.gui.JSheet,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$2,finished --> setEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$2,finished --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$2,finished --> access$000,org.jhotdraw.app.action.file.SaveFileAction,);
EndClass 303
StartClass 304
Class(org.jhotdraw.app.action.file.SaveFileAction$1,N,N,NA);
Attribute(val$view,org.jhotdraw.app.View,Public,N,Y,);
Attribute(this$0,org.jhotdraw.app.action.file.SaveFileAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(optionSelected,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.file.SaveFileAction,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(optionSelected,org.jhotdraw.gui.event.SheetEvent,);
Realization(org.jhotdraw.gui.event.SheetListener);
Composition(org.jhotdraw.app.View);
Composition(org.jhotdraw.app.action.file.SaveFileAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.SaveFileAction$1,<init> --> this$0,org.jhotdraw.app.action.file.SaveFileAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.SaveFileAction$1,<init> --> val$view,org.jhotdraw.app.action.file.SaveFileAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.SaveFileAction$1,optionSelected --> this$0,org.jhotdraw.app.action.file.SaveFileAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.SaveFileAction$1,optionSelected --> val$view,org.jhotdraw.app.action.file.SaveFileAction$1,READ);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$1,optionSelected --> getOption,org.jhotdraw.gui.event.SheetEvent,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$1,optionSelected --> getChooser,org.jhotdraw.gui.event.SheetEvent,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$1,optionSelected --> getFileChooser,org.jhotdraw.gui.event.SheetEvent,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$1,optionSelected --> makeAcceptable,org.jhotdraw.gui.filechooser.ExtensionFileFilter,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$1,optionSelected --> getSelectedURI,org.jhotdraw.gui.URIChooser,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$1,optionSelected --> saveViewToURI,org.jhotdraw.app.action.file.SaveFileAction,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$1,optionSelected --> setEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.SaveFileAction$1,optionSelected --> access$000,org.jhotdraw.app.action.file.SaveFileAction,);
EndClass 304
StartClass 305
Class(org.jhotdraw.draw.event.FigureEvent,N,N,Public);
Attribute(invalidatedArea,java.awt.geom.Rectangle2D$Double,Private,N,N,);
Attribute(attribute,org.jhotdraw.draw.AttributeKey,Private,N,N,);
Attribute(oldValue,java.lang.Object,Private,N,N,);
Attribute(newValue,java.lang.Object,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getFigure,org.jhotdraw.draw.Figure,Public,N,N);
Method(getInvalidatedArea,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(getAttribute,org.jhotdraw.draw.AttributeKey,Public,N,N);
Method(getOldValue,java.lang.Object,Public,N,N);
Method(getNewValue,java.lang.Object,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(<init>,java.awt.geom.Rectangle2D$Double,);
Parameter(<init>$2,org.jhotdraw.draw.Figure,);
Parameter(<init>$2,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>$2,java.lang.Object,);
Parameter(<init>$2,java.lang.Object,);
Composition(org.jhotdraw.draw.AttributeKey);
Call(ATTRIBUTE,org.jhotdraw.draw.event.FigureEvent,<init> --> invalidatedArea,org.jhotdraw.draw.event.FigureEvent,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.FigureEvent,<init>$2 --> attribute,org.jhotdraw.draw.event.FigureEvent,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.FigureEvent,<init>$2 --> oldValue,org.jhotdraw.draw.event.FigureEvent,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.FigureEvent,<init>$2 --> newValue,org.jhotdraw.draw.event.FigureEvent,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.FigureEvent,getInvalidatedArea --> invalidatedArea,org.jhotdraw.draw.event.FigureEvent,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.FigureEvent,getAttribute --> attribute,org.jhotdraw.draw.event.FigureEvent,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.FigureEvent,getOldValue --> oldValue,org.jhotdraw.draw.event.FigureEvent,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.FigureEvent,getNewValue --> newValue,org.jhotdraw.draw.event.FigureEvent,READ);
EndClass 305
StartClass 306
Class(org.jhotdraw.draw.handle.ResizeHandleKit,N,N,Public);
Attribute(DEBUG,boolean,Private,Y,Y,);
Method(<init>,void,Public,N,N);
Method(addCornerResizeHandles,void,Public,Y,N);
Method(addEdgeResizeHandles,void,Public,Y,N);
Method(addResizeHandles,void,Public,Y,N);
Method(south,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Method(southEast,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Method(southWest,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Method(north,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Method(northEast,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Method(northWest,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Method(east,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Method(west,org.jhotdraw.draw.handle.Handle,Public,Y,N);
Parameter(addCornerResizeHandles,org.jhotdraw.draw.Figure,org.jhotdraw.draw.handle.Handle);
Parameter(addCornerResizeHandles,java.util.Collection,);
Parameter(addEdgeResizeHandles,org.jhotdraw.draw.Figure,org.jhotdraw.draw.handle.Handle);
Parameter(addEdgeResizeHandles,java.util.Collection,);
Parameter(addResizeHandles,org.jhotdraw.draw.Figure,org.jhotdraw.draw.handle.Handle);
Parameter(addResizeHandles,java.util.Collection,);
Parameter(south,org.jhotdraw.draw.Figure,);
Parameter(southEast,org.jhotdraw.draw.Figure,);
Parameter(southWest,org.jhotdraw.draw.Figure,);
Parameter(north,org.jhotdraw.draw.Figure,);
Parameter(northEast,org.jhotdraw.draw.Figure,);
Parameter(northWest,org.jhotdraw.draw.Figure,);
Parameter(east,org.jhotdraw.draw.Figure,);
Parameter(west,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit,addCornerResizeHandles --> southEast,org.jhotdraw.draw.handle.ResizeHandleKit,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit,addCornerResizeHandles --> southWest,org.jhotdraw.draw.handle.ResizeHandleKit,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit,addCornerResizeHandles --> northEast,org.jhotdraw.draw.handle.ResizeHandleKit,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit,addCornerResizeHandles --> northWest,org.jhotdraw.draw.handle.ResizeHandleKit,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit,addEdgeResizeHandles --> south,org.jhotdraw.draw.handle.ResizeHandleKit,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit,addEdgeResizeHandles --> north,org.jhotdraw.draw.handle.ResizeHandleKit,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit,addEdgeResizeHandles --> east,org.jhotdraw.draw.handle.ResizeHandleKit,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit,addEdgeResizeHandles --> west,org.jhotdraw.draw.handle.ResizeHandleKit,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit,addResizeHandles --> addCornerResizeHandles,org.jhotdraw.draw.handle.ResizeHandleKit,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit,addResizeHandles --> addEdgeResizeHandles,org.jhotdraw.draw.handle.ResizeHandleKit,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit,addCornerResizeHandles --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit,addEdgeResizeHandles --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit,addResizeHandles --> <init>,org.jhotdraw.draw.handle.BoundsOutlineHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit,addResizeHandles --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit,south --> <init>,org.jhotdraw.draw.handle.ResizeHandleKit$SouthHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit,southEast --> <init>,org.jhotdraw.draw.handle.ResizeHandleKit$SouthEastHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit,southWest --> <init>,org.jhotdraw.draw.handle.ResizeHandleKit$SouthWestHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit,north --> <init>,org.jhotdraw.draw.handle.ResizeHandleKit$NorthHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit,northEast --> <init>,org.jhotdraw.draw.handle.ResizeHandleKit$NorthEastHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit,northWest --> <init>,org.jhotdraw.draw.handle.ResizeHandleKit$NorthWestHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit,east --> <init>,org.jhotdraw.draw.handle.ResizeHandleKit$EastHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit,west --> <init>,org.jhotdraw.draw.handle.ResizeHandleKit$WestHandle,);
EndClass 306
StartClass 307
Class(org.jhotdraw.draw.event.SetBoundsEdit,N,N,Public);
Attribute(owner,org.jhotdraw.draw.AbstractFigure,Private,N,N,);
Attribute(oldAnchor,java.awt.geom.Point2D$Double,Private,N,N,);
Attribute(oldLead,java.awt.geom.Point2D$Double,Private,N,N,);
Attribute(newAnchor,java.awt.geom.Point2D$Double,Private,N,N,);
Attribute(newLead,java.awt.geom.Point2D$Double,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(addEdit,boolean,Public,N,N);
Method(replaceEdit,boolean,Public,N,N);
Method(redo,void,Public,N,N);
Method(undo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.AbstractFigure,);
Parameter(<init>,java.awt.geom.Point2D$Double,);
Parameter(<init>,java.awt.geom.Point2D$Double,);
Parameter(<init>,java.awt.geom.Point2D$Double,);
Parameter(<init>,java.awt.geom.Point2D$Double,);
Parameter(addEdit,javax.swing.undo.UndoableEdit,);
Parameter(replaceEdit,javax.swing.undo.UndoableEdit,);
Composition(org.jhotdraw.draw.AbstractFigure);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SetBoundsEdit,<init> --> owner,org.jhotdraw.draw.event.SetBoundsEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SetBoundsEdit,<init> --> oldAnchor,org.jhotdraw.draw.event.SetBoundsEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SetBoundsEdit,<init> --> oldLead,org.jhotdraw.draw.event.SetBoundsEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SetBoundsEdit,<init> --> newAnchor,org.jhotdraw.draw.event.SetBoundsEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SetBoundsEdit,<init> --> newLead,org.jhotdraw.draw.event.SetBoundsEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SetBoundsEdit,addEdit --> owner,org.jhotdraw.draw.event.SetBoundsEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SetBoundsEdit,addEdit --> newAnchor,org.jhotdraw.draw.event.SetBoundsEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SetBoundsEdit,addEdit --> newLead,org.jhotdraw.draw.event.SetBoundsEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SetBoundsEdit,addEdit --> newAnchor,org.jhotdraw.draw.event.SetBoundsEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SetBoundsEdit,addEdit --> newLead,org.jhotdraw.draw.event.SetBoundsEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SetBoundsEdit,replaceEdit --> owner,org.jhotdraw.draw.event.SetBoundsEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SetBoundsEdit,replaceEdit --> oldAnchor,org.jhotdraw.draw.event.SetBoundsEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SetBoundsEdit,replaceEdit --> oldLead,org.jhotdraw.draw.event.SetBoundsEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SetBoundsEdit,replaceEdit --> oldAnchor,org.jhotdraw.draw.event.SetBoundsEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SetBoundsEdit,replaceEdit --> oldLead,org.jhotdraw.draw.event.SetBoundsEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SetBoundsEdit,redo --> owner,org.jhotdraw.draw.event.SetBoundsEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SetBoundsEdit,redo --> newAnchor,org.jhotdraw.draw.event.SetBoundsEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SetBoundsEdit,redo --> newLead,org.jhotdraw.draw.event.SetBoundsEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SetBoundsEdit,undo --> owner,org.jhotdraw.draw.event.SetBoundsEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SetBoundsEdit,undo --> oldAnchor,org.jhotdraw.draw.event.SetBoundsEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.SetBoundsEdit,undo --> oldLead,org.jhotdraw.draw.event.SetBoundsEdit,READ);
Call(METHOD,org.jhotdraw.draw.event.SetBoundsEdit,redo --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.event.SetBoundsEdit,redo --> setBounds$2,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.event.SetBoundsEdit,redo --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.event.SetBoundsEdit,undo --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.event.SetBoundsEdit,undo --> setBounds$2,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.event.SetBoundsEdit,undo --> changed,org.jhotdraw.draw.AbstractFigure,);
EndClass 307
StartClass 308
Class(org.jhotdraw.draw.connector.ChopRoundRectangleConnector$1,N,N,NA);
Attribute($SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,int[],Public,Y,Y,);
Method(<clinit>,void,Public,Y,N);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopRoundRectangleConnector$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,org.jhotdraw.draw.connector.ChopRoundRectangleConnector$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopRoundRectangleConnector$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,org.jhotdraw.draw.connector.ChopRoundRectangleConnector$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopRoundRectangleConnector$1,<clinit> --> CENTER,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopRoundRectangleConnector$1,<clinit> --> OUTSIDE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopRoundRectangleConnector$1,<clinit> --> INSIDE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(METHOD,org.jhotdraw.draw.connector.ChopRoundRectangleConnector$1,<clinit> --> values,org.jhotdraw.draw.AttributeKeys$StrokePlacement,);
EndClass 308
StartClass 309
Class(org.jhotdraw.draw.handle.AbstractHandle,N,Y,Public);
Attribute(owner,org.jhotdraw.draw.Figure,Private,N,Y,);
Attribute(view,org.jhotdraw.draw.DrawingView,Protected,N,N,);
Attribute(toolTipText,java.lang.String,Private,N,N,);
Attribute(listenerList,javax.swing.event.EventListenerList,Protected,N,N,);
Attribute(bounds,java.awt.Rectangle,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getHandlesize,int,Protected,N,N);
Method(addHandleListener,void,Public,N,N);
Method(removeHandleListener,void,Public,N,N);
Method(getOwner,org.jhotdraw.draw.Figure,Public,N,N);
Method(setView,void,Public,N,N);
Method(getView,org.jhotdraw.draw.DrawingView,Public,N,N);
Method(getEditor,org.jhotdraw.draw.DrawingEditor,Public,N,N);
Method(fireAreaInvalidated,void,Protected,N,N);
Method(fireUndoableEditHappened,void,Protected,N,N);
Method(fireHandleRequestRemove,void,Protected,N,N);
Method(fireHandleRequestSecondaryHandles,void,Protected,N,N);
Method(draw,void,Public,N,N);
Method(drawCircle,void,Protected,N,N);
Method(drawRectangle,void,Protected,N,N);
Method(drawDiamond,void,Protected,N,N);
Method(contains,boolean,Public,N,N);
Method(invalidate,void,Public,N,N);
Method(dispose,void,Public,N,N);
Method(areaInvalidated,void,Public,N,N);
Method(figureAdded,void,Public,N,N);
Method(figureRemoved,void,Public,N,N);
Method(figureRequestRemove,void,Public,N,N);
Method(figureChanged,void,Public,N,N);
Method(getCursor,java.awt.Cursor,Public,N,N);
Method(isCombinableWith,boolean,Public,N,N);
Method(keyTyped,void,Public,N,N);
Method(keyReleased,void,Public,N,N);
Method(keyPressed,void,Public,N,N);
Method(getBounds,java.awt.Rectangle,Public,N,N);
Method(getDrawingArea,java.awt.Rectangle,Public,N,N);
Method(basicGetBounds,java.awt.Rectangle,Protected,N,Y);
Method(updateBounds,void,Protected,N,N);
Method(trackDoubleClick,void,Public,N,N);
Method(attributeChanged,void,Public,N,N);
Method(viewTransformChanged,void,Public,N,N);
Method(createSecondaryHandles,java.util.Collection,Public,N,N);
Method(getToolTipText,java.lang.String,Public,N,N);
Method(setToolTipText,void,Public,N,N);
Method(figureHandlesChanged,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(addHandleListener,org.jhotdraw.draw.event.HandleListener,);
Parameter(removeHandleListener,org.jhotdraw.draw.event.HandleListener,);
Parameter(setView,org.jhotdraw.draw.DrawingView,);
Parameter(fireAreaInvalidated,java.awt.Rectangle,);
Parameter(fireUndoableEditHappened,javax.swing.undo.UndoableEdit,);
Parameter(fireHandleRequestRemove,java.awt.Rectangle,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(drawCircle,java.awt.Graphics2D,);
Parameter(drawCircle,java.awt.Color,);
Parameter(drawCircle,java.awt.Color,);
Parameter(drawRectangle,java.awt.Graphics2D,);
Parameter(drawRectangle,java.awt.Color,);
Parameter(drawRectangle,java.awt.Color,);
Parameter(drawDiamond,java.awt.Graphics2D,);
Parameter(drawDiamond,java.awt.Color,);
Parameter(drawDiamond,java.awt.Color,);
Parameter(contains,java.awt.Point,);
Parameter(areaInvalidated,org.jhotdraw.draw.event.FigureEvent,);
Parameter(figureAdded,org.jhotdraw.draw.event.FigureEvent,);
Parameter(figureRemoved,org.jhotdraw.draw.event.FigureEvent,);
Parameter(figureRequestRemove,org.jhotdraw.draw.event.FigureEvent,);
Parameter(figureChanged,org.jhotdraw.draw.event.FigureEvent,);
Parameter(isCombinableWith,org.jhotdraw.draw.handle.Handle,);
Parameter(keyTyped,java.awt.event.KeyEvent,);
Parameter(keyReleased,java.awt.event.KeyEvent,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
Parameter(trackDoubleClick,java.awt.Point,);
Parameter(trackDoubleClick,int,);
Parameter(attributeChanged,org.jhotdraw.draw.event.FigureEvent,);
Parameter(getToolTipText,java.awt.Point,);
Parameter(setToolTipText,java.lang.String,);
Parameter(figureHandlesChanged,org.jhotdraw.draw.event.FigureEvent,);
SubClass(org.jhotdraw.draw.handle.RoundRectangleRadiusHandle);
SubClass(org.jhotdraw.draw.handle.TextOverflowHandle);
SubClass(org.jhotdraw.draw.handle.BezierNodeHandle);
SubClass(org.jhotdraw.draw.handle.BezierOutlineHandle);
SubClass(org.jhotdraw.draw.handle.BoundsOutlineHandle);
SubClass(org.jhotdraw.draw.handle.OrientationHandle);
SubClass(org.jhotdraw.draw.handle.BezierScaleHandle);
SubClass(org.jhotdraw.draw.handle.FontSizeHandle);
SubClass(org.jhotdraw.draw.handle.MoveHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$WestHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$NorthWestHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$EastHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$NorthHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$NorthEastHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$SouthHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$SouthWestHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$SouthEastHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$WestHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$NorthEastHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$SouthEastHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$EastHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$SouthWestHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$NorthHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$SouthHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$NorthWestHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle);
SubClass(org.jhotdraw.draw.handle.LocatorHandle);
SubClass(org.jhotdraw.draw.handle.BezierControlPointHandle);
SubClass(org.jhotdraw.draw.handle.ConnectionEndHandle);
SubClass(org.jhotdraw.draw.handle.ConnectionStartHandle);
SubClass(org.jhotdraw.draw.handle.AbstractConnectionHandle);
SubClass(org.jhotdraw.draw.handle.RotateHandle);
SubClass(org.jhotdraw.draw.handle.AbstractRotateHandle);
Realization(org.jhotdraw.draw.handle.Handle);
Realization(org.jhotdraw.draw.event.FigureListener);
Composition(org.jhotdraw.draw.Figure);
Composition(org.jhotdraw.draw.DrawingView);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,getHandlesize --> getEditor,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,draw --> getEditor,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,draw --> drawCircle,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,drawCircle --> getBounds,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,drawCircle --> getView,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,drawRectangle --> getBounds,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,drawRectangle --> getView,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,drawDiamond --> getBounds,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,drawDiamond --> getView,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,contains --> getBounds,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,areaInvalidated --> updateBounds,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,figureChanged --> updateBounds,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,getBounds --> basicGetBounds,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,getDrawingArea --> getBounds,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,updateBounds --> basicGetBounds,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,updateBounds --> getDrawingArea,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,updateBounds --> fireAreaInvalidated,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,viewTransformChanged --> invalidate,org.jhotdraw.draw.handle.AbstractHandle,);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractHandle,<init> --> listenerList,org.jhotdraw.draw.handle.AbstractHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractHandle,<init> --> owner,org.jhotdraw.draw.handle.AbstractHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractHandle,addHandleListener --> listenerList,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractHandle,removeHandleListener --> listenerList,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractHandle,getOwner --> owner,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractHandle,setView --> view,org.jhotdraw.draw.handle.AbstractHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractHandle,getView --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractHandle,getEditor --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractHandle,fireAreaInvalidated --> listenerList,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractHandle,fireUndoableEditHappened --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractHandle,fireHandleRequestRemove --> listenerList,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractHandle,fireHandleRequestSecondaryHandles --> listenerList,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractHandle,invalidate --> bounds,org.jhotdraw.draw.handle.AbstractHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractHandle,dispose --> owner,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractHandle,getBounds --> bounds,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractHandle,getBounds --> bounds,org.jhotdraw.draw.handle.AbstractHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractHandle,updateBounds --> bounds,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractHandle,updateBounds --> bounds,org.jhotdraw.draw.handle.AbstractHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractHandle,getToolTipText --> toolTipText,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractHandle,setToolTipText --> toolTipText,org.jhotdraw.draw.handle.AbstractHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractHandle,getHandlesize --> HANDLE_SIZE,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractHandle,draw --> HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractHandle,draw --> HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,<init> --> addFigureListener,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,getHandlesize --> getHandleAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,getEditor --> getEditor,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,fireAreaInvalidated --> <init>,org.jhotdraw.draw.event.HandleEvent,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,fireAreaInvalidated --> areaInvalidated,org.jhotdraw.draw.event.HandleListener,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,fireUndoableEditHappened --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,fireUndoableEditHappened --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,fireHandleRequestRemove --> <init>,org.jhotdraw.draw.event.HandleEvent,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,fireHandleRequestRemove --> handleRequestRemove,org.jhotdraw.draw.event.HandleListener,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,fireHandleRequestSecondaryHandles --> <init>,org.jhotdraw.draw.event.HandleEvent,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,fireHandleRequestSecondaryHandles --> handleRequestSecondaryHandles,org.jhotdraw.draw.event.HandleListener,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,draw --> getHandleAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,drawCircle --> getActiveHandle,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,drawRectangle --> getActiveHandle,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,drawDiamond --> getActiveHandle,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractHandle,dispose --> removeFigureListener,org.jhotdraw.draw.Figure,);
EndClass 309
StartClass 310
Class(org.jhotdraw.beans.PropertyChangeEdit,N,N,Public);
Attribute(source,java.lang.Object,Private,N,N,);
Attribute(propertyName,java.lang.String,Private,N,N,);
Attribute(oldValue,java.lang.Object,Private,N,N,);
Attribute(newValue,java.lang.Object,Private,N,N,);
Attribute(type,java.lang.Class,Private,N,N,);
Attribute(presentationName,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(<init>$5,void,Public,N,N);
Method(<init>$6,void,Public,N,N);
Method(<init>$7,void,Public,N,N);
Method(<init>$8,void,Public,N,N);
Method(getSetter,java.lang.reflect.Method,Protected,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(setPresentationName,void,Public,N,N);
Method(addEdit,boolean,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Parameter(<init>,java.lang.Object,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.Class,);
Parameter(<init>,java.lang.Object,);
Parameter(<init>,java.lang.Object,);
Parameter(<init>$2,java.lang.Object,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,boolean,);
Parameter(<init>$2,boolean,);
Parameter(<init>$3,java.lang.Object,);
Parameter(<init>$3,java.lang.String,);
Parameter(<init>$3,int,);
Parameter(<init>$3,int,);
Parameter(<init>$4,java.lang.Object,);
Parameter(<init>$4,java.lang.String,);
Parameter(<init>$4,long,);
Parameter(<init>$4,long,);
Parameter(<init>$5,java.lang.Object,);
Parameter(<init>$5,java.lang.String,);
Parameter(<init>$5,float,);
Parameter(<init>$5,float,);
Parameter(<init>$6,java.lang.Object,);
Parameter(<init>$6,java.lang.String,);
Parameter(<init>$6,double,);
Parameter(<init>$6,double,);
Parameter(<init>$7,java.lang.Object,);
Parameter(<init>$7,java.lang.String,);
Parameter(<init>$7,char,);
Parameter(<init>$7,char,);
Parameter(<init>$8,java.lang.Object,);
Parameter(<init>$8,java.lang.String,);
Parameter(<init>$8,java.lang.String,);
Parameter(<init>$8,java.lang.String,);
Parameter(setPresentationName,java.lang.String,);
Parameter(addEdit,javax.swing.undo.UndoableEdit,);
Call(METHOD,org.jhotdraw.beans.PropertyChangeEdit,<init>$2 --> <init>,org.jhotdraw.beans.PropertyChangeEdit,);
Call(METHOD,org.jhotdraw.beans.PropertyChangeEdit,<init>$3 --> <init>,org.jhotdraw.beans.PropertyChangeEdit,);
Call(METHOD,org.jhotdraw.beans.PropertyChangeEdit,<init>$4 --> <init>,org.jhotdraw.beans.PropertyChangeEdit,);
Call(METHOD,org.jhotdraw.beans.PropertyChangeEdit,<init>$5 --> <init>,org.jhotdraw.beans.PropertyChangeEdit,);
Call(METHOD,org.jhotdraw.beans.PropertyChangeEdit,<init>$6 --> <init>,org.jhotdraw.beans.PropertyChangeEdit,);
Call(METHOD,org.jhotdraw.beans.PropertyChangeEdit,<init>$7 --> <init>,org.jhotdraw.beans.PropertyChangeEdit,);
Call(METHOD,org.jhotdraw.beans.PropertyChangeEdit,<init>$8 --> <init>,org.jhotdraw.beans.PropertyChangeEdit,);
Call(METHOD,org.jhotdraw.beans.PropertyChangeEdit,undo --> getSetter,org.jhotdraw.beans.PropertyChangeEdit,);
Call(METHOD,org.jhotdraw.beans.PropertyChangeEdit,redo --> getSetter,org.jhotdraw.beans.PropertyChangeEdit,);
Call(ATTRIBUTE,org.jhotdraw.beans.PropertyChangeEdit,<init> --> source,org.jhotdraw.beans.PropertyChangeEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.beans.PropertyChangeEdit,<init> --> presentationName,org.jhotdraw.beans.PropertyChangeEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.beans.PropertyChangeEdit,<init> --> propertyName,org.jhotdraw.beans.PropertyChangeEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.beans.PropertyChangeEdit,<init> --> type,org.jhotdraw.beans.PropertyChangeEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.beans.PropertyChangeEdit,<init> --> oldValue,org.jhotdraw.beans.PropertyChangeEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.beans.PropertyChangeEdit,<init> --> newValue,org.jhotdraw.beans.PropertyChangeEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.beans.PropertyChangeEdit,getSetter --> source,org.jhotdraw.beans.PropertyChangeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.beans.PropertyChangeEdit,getSetter --> propertyName,org.jhotdraw.beans.PropertyChangeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.beans.PropertyChangeEdit,getSetter --> type,org.jhotdraw.beans.PropertyChangeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.beans.PropertyChangeEdit,undo --> source,org.jhotdraw.beans.PropertyChangeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.beans.PropertyChangeEdit,undo --> oldValue,org.jhotdraw.beans.PropertyChangeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.beans.PropertyChangeEdit,undo --> propertyName,org.jhotdraw.beans.PropertyChangeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.beans.PropertyChangeEdit,redo --> source,org.jhotdraw.beans.PropertyChangeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.beans.PropertyChangeEdit,redo --> newValue,org.jhotdraw.beans.PropertyChangeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.beans.PropertyChangeEdit,redo --> propertyName,org.jhotdraw.beans.PropertyChangeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.beans.PropertyChangeEdit,getPresentationName --> presentationName,org.jhotdraw.beans.PropertyChangeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.beans.PropertyChangeEdit,setPresentationName --> presentationName,org.jhotdraw.beans.PropertyChangeEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.beans.PropertyChangeEdit,addEdit --> source,org.jhotdraw.beans.PropertyChangeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.beans.PropertyChangeEdit,addEdit --> propertyName,org.jhotdraw.beans.PropertyChangeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.beans.PropertyChangeEdit,addEdit --> newValue,org.jhotdraw.beans.PropertyChangeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.beans.PropertyChangeEdit,addEdit --> newValue,org.jhotdraw.beans.PropertyChangeEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.beans.PropertyChangeEdit,toString --> propertyName,org.jhotdraw.beans.PropertyChangeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.beans.PropertyChangeEdit,toString --> oldValue,org.jhotdraw.beans.PropertyChangeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.beans.PropertyChangeEdit,toString --> newValue,org.jhotdraw.beans.PropertyChangeEdit,READ);
EndClass 310
StartClass 311
Class(org.jhotdraw.draw.handle.HandleAttributeKeys,N,N,Public);
Attribute(FILL_COLOR_DISABLED_,java.awt.Color,Private,Y,Y,);
Attribute(STROKE_COLOR_DISABLED_,java.awt.Color,Private,Y,Y,);
Attribute(HANDLE_SIZE,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.lang.Integer);
Attribute(HANDLE_STROKE_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(HANDLE_FILL_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(HANDLE_STROKE,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(HANDLE_STROKE_COLOR_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(HANDLE_FILL_COLOR_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(ROTATE_HANDLE_STROKE_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(ROTATE_HANDLE_FILL_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(ROTATE_HANDLE_STROKE_COLOR_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(ROTATE_HANDLE_FILL_COLOR_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(BEZIER_CONTROL_POINT_HANDLE_STROKE_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(BEZIER_CONTROL_POINT_HANDLE_FILL_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(BEZIER_TANGENT_COLOR_1,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(BEZIER_TANGENT_COLOR_2,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(BEZIER_TANGENT_STROKE_1,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(BEZIER_TANGENT_STROKE_2,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(BEZIER_NODE_HANDLE_STROKE_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(BEZIER_NODE_HANDLE_FILL_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(BEZIER_PATH_COLOR_1,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(BEZIER_PATH_COLOR_2,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(BEZIER_PATH_STROKE_1,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(BEZIER_PATH_STROKE_2,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(BEZIER_PATH_COLOR_1_HOVER,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(BEZIER_PATH_COLOR_2_HOVER,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(BEZIER_PATH_STROKE_1_HOVER,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(BEZIER_PATH_STROKE_2_HOVER,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(BEZIER_CONTROL_POINT_HANDLE_STROKE_COLOR_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(BEZIER_CONTROL_POINT_HANDLE_FILL_COLOR_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(BEZIER_TANGENT_COLOR_1_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(BEZIER_TANGENT_COLOR_2_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(BEZIER_TANGENT_STROKE_1_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(BEZIER_TANGENT_STROKE_2_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(BEZIER_NODE_HANDLE_STROKE_COLOR_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(BEZIER_NODE_HANDLE_FILL_COLOR_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(BEZIER_PATH_COLOR_1_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(BEZIER_PATH_COLOR_2_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(BEZIER_PATH_STROKE_1_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(BEZIER_PATH_STROKE_2_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(SCALE_HANDLE_STROKE_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(SCALE_HANDLE_FILL_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(RESIZE_HANDLE_STROKE_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(RESIZE_HANDLE_FILL_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(RESIZE_BOUNDS_COLOR_1,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(RESIZE_BOUNDS_COLOR_2,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(RESIZE_BOUNDS_STROKE_1,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(RESIZE_BOUNDS_STROKE_2,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(RESIZE_BOUNDS_COLOR_1_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(RESIZE_BOUNDS_COLOR_2_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(RESIZE_BOUNDS_STROKE_1_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(RESIZE_BOUNDS_STROKE_2_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(RESIZE_BOUNDS_COLOR_1_HOVER,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(RESIZE_BOUNDS_COLOR_2_HOVER,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(RESIZE_BOUNDS_STROKE_1_HOVER,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(RESIZE_BOUNDS_STROKE_2_HOVER,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(TRANSFORM_HANDLE_STROKE_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(TRANSFORM_HANDLE_FILL_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(TRANSFORM_HANDLE_STROKE_COLOR_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(TRANSFORM_HANDLE_FILL_COLOR_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(TRANSFORM_BOUNDS_COLOR_1,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(TRANSFORM_BOUNDS_COLOR_2,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(TRANSFORM_BOUNDS_STROKE_1,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(TRANSFORM_BOUNDS_STROKE_2,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(TRANSFORM_BOUNDS_COLOR_1_HOVER,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(TRANSFORM_BOUNDS_COLOR_2_HOVER,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(TRANSFORM_BOUNDS_STROKE_1_HOVER,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(TRANSFORM_BOUNDS_STROKE_2_HOVER,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(TRANSFORM_BOUNDS_COLOR_1_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(TRANSFORM_BOUNDS_COLOR_2_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(TRANSFORM_BOUNDS_STROKE_1_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(TRANSFORM_BOUNDS_STROKE_2_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(GROUP_HANDLE_STROKE_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(GROUP_HANDLE_FILL_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(GROUP_HANDLE_STROKE_COLOR_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(GROUP_HANDLE_FILL_COLOR_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(GROUP_BOUNDS_COLOR_1,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(GROUP_BOUNDS_COLOR_2,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(GROUP_BOUNDS_STROKE_1,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(GROUP_BOUNDS_STROKE_2,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(GROUP_BOUNDS_COLOR_1_HOVER,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(GROUP_BOUNDS_COLOR_2_HOVER,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(GROUP_BOUNDS_STROKE_1_HOVER,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(GROUP_BOUNDS_STROKE_2_HOVER,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(GROUP_BOUNDS_COLOR_1_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(GROUP_BOUNDS_COLOR_2_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(GROUP_BOUNDS_STROKE_1_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(GROUP_BOUNDS_STROKE_2_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Stroke);
Attribute(CONNECTED_CONNECTION_HANDLE_STROKE_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(CONNECTED_CONNECTION_HANDLE_FILL_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(DISCONNECTED_CONNECTION_HANDLE_STROKE_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(DISCONNECTED_CONNECTION_HANDLE_FILL_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(CONNECTED_CONNECTOR_HANDLE_STROKE_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(CONNECTED_CONNECTOR_HANDLE_FILL_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(DISCONNECTED_CONNECTOR_HANDLE_STROKE_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(DISCONNECTED_CONNECTOR_HANDLE_FILL_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(MOVE_HANDLE_STROKE_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(MOVE_HANDLE_FILL_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(NULL_HANDLE_STROKE_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(NULL_HANDLE_FILL_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(OVERFLOW_HANDLE_STROKE_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(OVERFLOW_HANDLE_FILL_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(ATTRIBUTE_HANDLE_STROKE_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(ATTRIBUTE_HANDLE_FILL_COLOR,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(ATTRIBUTE_HANDLE_STROKE_COLOR_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Attribute(ATTRIBUTE_HANDLE_FILL_COLOR_DISABLED,org.jhotdraw.draw.AttributeKey,Public,Y,Y,java.awt.Color);
Method(<init>,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Composition(org.jhotdraw.draw.AttributeKey);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> STROKE_COLOR_DISABLED_,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> FILL_COLOR_DISABLED_,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> FILL_COLOR_DISABLED_,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> STROKE_COLOR_DISABLED_,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> HANDLE_SIZE,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> HANDLE_STROKE,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> HANDLE_STROKE_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> HANDLE_FILL_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> ROTATE_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> ROTATE_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> ROTATE_HANDLE_STROKE_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> ROTATE_HANDLE_FILL_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_CONTROL_POINT_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_CONTROL_POINT_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_TANGENT_COLOR_1,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_TANGENT_COLOR_2,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_TANGENT_STROKE_1,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_TANGENT_STROKE_2,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_NODE_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_NODE_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_PATH_COLOR_1,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_PATH_COLOR_2,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_PATH_STROKE_1,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_PATH_STROKE_2,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_PATH_COLOR_1_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_PATH_COLOR_2_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_PATH_STROKE_1_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_PATH_STROKE_2_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_CONTROL_POINT_HANDLE_STROKE_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_CONTROL_POINT_HANDLE_FILL_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_TANGENT_COLOR_1_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_TANGENT_COLOR_2_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_TANGENT_STROKE_1_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_TANGENT_STROKE_2_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_NODE_HANDLE_STROKE_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_NODE_HANDLE_FILL_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_PATH_COLOR_1_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_PATH_COLOR_2_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_PATH_STROKE_1_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> BEZIER_PATH_STROKE_2_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> SCALE_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> SCALE_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> RESIZE_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> RESIZE_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> RESIZE_BOUNDS_COLOR_1,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> RESIZE_BOUNDS_COLOR_2,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> RESIZE_BOUNDS_STROKE_1,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> RESIZE_BOUNDS_STROKE_2,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> RESIZE_BOUNDS_COLOR_1_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> RESIZE_BOUNDS_COLOR_2_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> RESIZE_BOUNDS_STROKE_1_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> RESIZE_BOUNDS_STROKE_2_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> RESIZE_BOUNDS_COLOR_1_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> RESIZE_BOUNDS_COLOR_2_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> RESIZE_BOUNDS_STROKE_1_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> RESIZE_BOUNDS_STROKE_2_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> TRANSFORM_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> TRANSFORM_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> TRANSFORM_HANDLE_STROKE_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> TRANSFORM_HANDLE_FILL_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> TRANSFORM_BOUNDS_COLOR_1,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> TRANSFORM_BOUNDS_COLOR_2,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> TRANSFORM_BOUNDS_STROKE_1,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> TRANSFORM_BOUNDS_STROKE_2,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> TRANSFORM_BOUNDS_COLOR_1_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> TRANSFORM_BOUNDS_COLOR_2_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> TRANSFORM_BOUNDS_STROKE_1_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> TRANSFORM_BOUNDS_STROKE_2_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> TRANSFORM_BOUNDS_COLOR_1_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> TRANSFORM_BOUNDS_COLOR_2_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> TRANSFORM_BOUNDS_STROKE_1_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> TRANSFORM_BOUNDS_STROKE_2_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> GROUP_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> GROUP_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> GROUP_HANDLE_STROKE_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> GROUP_HANDLE_FILL_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> GROUP_BOUNDS_COLOR_1,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> GROUP_BOUNDS_COLOR_2,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> GROUP_BOUNDS_STROKE_1,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> GROUP_BOUNDS_STROKE_2,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> GROUP_BOUNDS_COLOR_1_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> GROUP_BOUNDS_COLOR_2_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> GROUP_BOUNDS_STROKE_1_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> GROUP_BOUNDS_STROKE_2_HOVER,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> GROUP_BOUNDS_COLOR_1_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> GROUP_BOUNDS_COLOR_2_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> GROUP_BOUNDS_STROKE_1_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> GROUP_BOUNDS_STROKE_2_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> CONNECTED_CONNECTION_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> CONNECTED_CONNECTION_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> DISCONNECTED_CONNECTION_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> DISCONNECTED_CONNECTION_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> CONNECTED_CONNECTOR_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> CONNECTED_CONNECTOR_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> DISCONNECTED_CONNECTOR_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> DISCONNECTED_CONNECTOR_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> MOVE_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> MOVE_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> NULL_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> NULL_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> OVERFLOW_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> OVERFLOW_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> ATTRIBUTE_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> ATTRIBUTE_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> ATTRIBUTE_HANDLE_STROKE_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> ATTRIBUTE_HANDLE_FILL_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,WRITE);
Call(METHOD,org.jhotdraw.draw.handle.HandleAttributeKeys,<clinit> --> <init>$2,org.jhotdraw.draw.AttributeKey,);
EndClass 311
StartClass 312
Class(org.jhotdraw.draw.event.CompositeFigureEdit,N,N,Public);
Attribute(figure,org.jhotdraw.draw.Figure,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(<init>$2,org.jhotdraw.draw.Figure,);
Parameter(<init>$2,boolean,);
Parameter(<init>$3,org.jhotdraw.draw.Figure,);
Parameter(<init>$3,java.lang.String,);
Parameter(<init>$4,org.jhotdraw.draw.Figure,);
Parameter(<init>$4,java.lang.String,);
Parameter(<init>$4,boolean,);
SuperClass(org.jhotdraw.undo.CompositeEdit);
Generalization(org.jhotdraw.undo.CompositeEdit);
Composition(org.jhotdraw.draw.Figure);
Call(ATTRIBUTE,org.jhotdraw.draw.event.CompositeFigureEdit,<init> --> figure,org.jhotdraw.draw.event.CompositeFigureEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.CompositeFigureEdit,<init>$2 --> figure,org.jhotdraw.draw.event.CompositeFigureEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.CompositeFigureEdit,<init>$3 --> figure,org.jhotdraw.draw.event.CompositeFigureEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.CompositeFigureEdit,<init>$4 --> figure,org.jhotdraw.draw.event.CompositeFigureEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.CompositeFigureEdit,undo --> figure,org.jhotdraw.draw.event.CompositeFigureEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.CompositeFigureEdit,redo --> figure,org.jhotdraw.draw.event.CompositeFigureEdit,READ);
Call(METHOD,org.jhotdraw.draw.event.CompositeFigureEdit,<init> --> <init>,org.jhotdraw.undo.CompositeEdit,);
Call(METHOD,org.jhotdraw.draw.event.CompositeFigureEdit,<init>$2 --> <init>$2,org.jhotdraw.undo.CompositeEdit,);
Call(METHOD,org.jhotdraw.draw.event.CompositeFigureEdit,<init>$3 --> <init>$3,org.jhotdraw.undo.CompositeEdit,);
Call(METHOD,org.jhotdraw.draw.event.CompositeFigureEdit,<init>$4 --> <init>$4,org.jhotdraw.undo.CompositeEdit,);
Call(METHOD,org.jhotdraw.draw.event.CompositeFigureEdit,undo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.event.CompositeFigureEdit,undo --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.event.CompositeFigureEdit,redo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.event.CompositeFigureEdit,redo --> changed,org.jhotdraw.draw.Figure,);
EndClass 312
StartClass 313
Class(org.jhotdraw.geom.Insets2D$Float,N,N,Public);
Attribute(top,float,Public,N,N,);
Attribute(left,float,Public,N,N,);
Attribute(bottom,float,Public,N,N,);
Attribute(right,float,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getTop,double,Public,N,N);
Method(getLeft,double,Public,N,N);
Method(getBottom,double,Public,N,N);
Method(getRight,double,Public,N,N);
Method(set,void,Public,N,N);
Method(set$2,void,Public,N,N);
Parameter(<init>$2,float,);
Parameter(<init>$2,float,);
Parameter(<init>$2,float,);
Parameter(<init>$2,float,);
Parameter(set,double,);
Parameter(set,double,);
Parameter(set,double,);
Parameter(set,double,);
Parameter(set$2,float,);
Parameter(set$2,float,);
Parameter(set$2,float,);
Parameter(set$2,float,);
SuperClass(org.jhotdraw.geom.Insets2D);
Generalization(org.jhotdraw.geom.Insets2D);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Float,<init>$2 --> top,org.jhotdraw.geom.Insets2D$Float,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Float,<init>$2 --> left,org.jhotdraw.geom.Insets2D$Float,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Float,<init>$2 --> bottom,org.jhotdraw.geom.Insets2D$Float,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Float,<init>$2 --> right,org.jhotdraw.geom.Insets2D$Float,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Float,getTop --> top,org.jhotdraw.geom.Insets2D$Float,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Float,getLeft --> left,org.jhotdraw.geom.Insets2D$Float,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Float,getBottom --> bottom,org.jhotdraw.geom.Insets2D$Float,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Float,getRight --> right,org.jhotdraw.geom.Insets2D$Float,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Float,set --> top,org.jhotdraw.geom.Insets2D$Float,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Float,set --> left,org.jhotdraw.geom.Insets2D$Float,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Float,set --> bottom,org.jhotdraw.geom.Insets2D$Float,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Float,set --> right,org.jhotdraw.geom.Insets2D$Float,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Float,set$2 --> top,org.jhotdraw.geom.Insets2D$Float,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Float,set$2 --> left,org.jhotdraw.geom.Insets2D$Float,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Float,set$2 --> bottom,org.jhotdraw.geom.Insets2D$Float,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.Insets2D$Float,set$2 --> right,org.jhotdraw.geom.Insets2D$Float,WRITE);
Call(METHOD,org.jhotdraw.geom.Insets2D$Float,<init> --> <init>,org.jhotdraw.geom.Insets2D,);
Call(METHOD,org.jhotdraw.geom.Insets2D$Float,<init>$2 --> <init>,org.jhotdraw.geom.Insets2D,);
EndClass 313
StartClass 314
Class(org.jhotdraw.geom.BezierPathIterator,N,N,Public);
Attribute(index,int,Private,N,N,);
Attribute(path,org.jhotdraw.geom.BezierPath,Private,N,N,);
Attribute(affine,java.awt.geom.AffineTransform,Private,N,N,);
Attribute(curvesize,int[],Private,Y,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getWindingRule,int,Public,N,N);
Method(isDone,boolean,Public,N,N);
Method(next,void,Public,N,N);
Method(currentSegment,int,Public,N,N);
Method(currentSegment$2,int,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,org.jhotdraw.geom.BezierPath,);
Parameter(<init>$2,org.jhotdraw.geom.BezierPath,);
Parameter(<init>$2,java.awt.geom.AffineTransform,);
Parameter(currentSegment,float[],);
Parameter(currentSegment$2,double[],);
Composition(org.jhotdraw.geom.BezierPath);
Call(METHOD,org.jhotdraw.geom.BezierPathIterator,<init> --> <init>$2,org.jhotdraw.geom.BezierPathIterator,);
Call(METHOD,org.jhotdraw.geom.BezierPathIterator,next --> isDone,org.jhotdraw.geom.BezierPathIterator,);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPathIterator,<init>$2 --> index,org.jhotdraw.geom.BezierPathIterator,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPathIterator,<init>$2 --> path,org.jhotdraw.geom.BezierPathIterator,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPathIterator,<init>$2 --> affine,org.jhotdraw.geom.BezierPathIterator,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPathIterator,getWindingRule --> path,org.jhotdraw.geom.BezierPathIterator,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPathIterator,isDone --> index,org.jhotdraw.geom.BezierPathIterator,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPathIterator,isDone --> path,org.jhotdraw.geom.BezierPathIterator,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPathIterator,next --> index,org.jhotdraw.geom.BezierPathIterator,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPathIterator,next --> index,org.jhotdraw.geom.BezierPathIterator,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPathIterator,currentSegment --> index,org.jhotdraw.geom.BezierPathIterator,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPathIterator,currentSegment --> path,org.jhotdraw.geom.BezierPathIterator,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPathIterator,currentSegment --> affine,org.jhotdraw.geom.BezierPathIterator,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPathIterator,currentSegment$2 --> index,org.jhotdraw.geom.BezierPathIterator,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPathIterator,currentSegment$2 --> path,org.jhotdraw.geom.BezierPathIterator,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPathIterator,currentSegment$2 --> affine,org.jhotdraw.geom.BezierPathIterator,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPathIterator,<clinit> --> curvesize,org.jhotdraw.geom.BezierPathIterator,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPathIterator,currentSegment --> mask,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPathIterator,currentSegment --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPathIterator,currentSegment --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPathIterator,currentSegment$2 --> mask,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPathIterator,currentSegment$2 --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.BezierPathIterator,currentSegment$2 --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(METHOD,org.jhotdraw.geom.BezierPathIterator,getWindingRule --> getWindingRule,org.jhotdraw.geom.BezierPath,);
Call(METHOD,org.jhotdraw.geom.BezierPathIterator,isDone --> isClosed,org.jhotdraw.geom.BezierPath,);
EndClass 314
StartClass 315
Class(org.jhotdraw.geom.Shapes,N,N,Public);
Method(<init>,void,Private,N,N);
Method(outlineContains,boolean,Public,Y,N);
Parameter(outlineContains,java.awt.Shape,);
Parameter(outlineContains,java.awt.geom.Point2D$Double,);
Parameter(outlineContains,double,);
Call(METHOD,org.jhotdraw.geom.Shapes,outlineContains --> lineContainsPoint$3,org.jhotdraw.geom.Geom,);
EndClass 315
StartClass 316
Class(org.jhotdraw.draw.handle.Handle,Y,Y,Public);
Method(getOwner,org.jhotdraw.draw.Figure,Public,N,Y);
Method(setView,void,Public,N,Y);
Method(addHandleListener,void,Public,N,Y);
Method(removeHandleListener,void,Public,N,Y);
Method(getBounds,java.awt.Rectangle,Public,N,Y);
Method(getDrawingArea,java.awt.Rectangle,Public,N,Y);
Method(contains,boolean,Public,N,Y);
Method(draw,void,Public,N,Y);
Method(invalidate,void,Public,N,Y);
Method(dispose,void,Public,N,Y);
Method(getCursor,java.awt.Cursor,Public,N,Y);
Method(isCombinableWith,boolean,Public,N,Y);
Method(trackStart,void,Public,N,Y);
Method(trackStep,void,Public,N,Y);
Method(trackEnd,void,Public,N,Y);
Method(trackDoubleClick,void,Public,N,Y);
Method(viewTransformChanged,void,Public,N,Y);
Method(createSecondaryHandles,java.util.Collection,Public,N,Y);
Method(getToolTipText,java.lang.String,Public,N,Y);
Parameter(setView,org.jhotdraw.draw.DrawingView,);
Parameter(addHandleListener,org.jhotdraw.draw.event.HandleListener,);
Parameter(removeHandleListener,org.jhotdraw.draw.event.HandleListener,);
Parameter(contains,java.awt.Point,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(isCombinableWith,org.jhotdraw.draw.handle.Handle,);
Parameter(trackStart,java.awt.Point,);
Parameter(trackStart,int,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,int,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,int,);
Parameter(trackDoubleClick,java.awt.Point,);
Parameter(trackDoubleClick,int,);
Parameter(getToolTipText,java.awt.Point,);
EndClass 316
StartClass 317
Class(org.jhotdraw.draw.event.FigureSelectionListener,Y,Y,Public);
Method(selectionChanged,void,Public,N,Y);
Parameter(selectionChanged,org.jhotdraw.draw.event.FigureSelectionEvent,);
EndClass 317
StartClass 318
Class(org.jhotdraw.draw.text.FloatingTextArea$1,N,N,NA);
Attribute(this$0,org.jhotdraw.draw.text.FloatingTextArea,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(attributeChanged,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.text.FloatingTextArea,);
Parameter(attributeChanged,org.jhotdraw.draw.event.FigureEvent,);
SuperClass(org.jhotdraw.draw.event.FigureAdapter);
Generalization(org.jhotdraw.draw.event.FigureAdapter);
Composition(org.jhotdraw.draw.text.FloatingTextArea);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea$1,<init> --> this$0,org.jhotdraw.draw.text.FloatingTextArea$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextArea$1,attributeChanged --> this$0,org.jhotdraw.draw.text.FloatingTextArea$1,READ);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextArea$1,<init> --> <init>,org.jhotdraw.draw.event.FigureAdapter,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextArea$1,attributeChanged --> updateWidget,org.jhotdraw.draw.text.FloatingTextArea,);
EndClass 318
StartClass 319
Class(org.jhotdraw.draw.TranslationDirection,N,N,Public);
Attribute(NORTH,org.jhotdraw.draw.TranslationDirection,Public,Y,Y,);
Attribute(WEST,org.jhotdraw.draw.TranslationDirection,Public,Y,Y,);
Attribute(SOUTH,org.jhotdraw.draw.TranslationDirection,Public,Y,Y,);
Attribute(EAST,org.jhotdraw.draw.TranslationDirection,Public,Y,Y,);
Attribute(NORTH_WEST,org.jhotdraw.draw.TranslationDirection,Public,Y,Y,);
Attribute(SOUTH_WEST,org.jhotdraw.draw.TranslationDirection,Public,Y,Y,);
Attribute(NORTH_EAST,org.jhotdraw.draw.TranslationDirection,Public,Y,Y,);
Attribute(SOUTH_EAST,org.jhotdraw.draw.TranslationDirection,Public,Y,Y,);
Attribute($VALUES,org.jhotdraw.draw.TranslationDirection[],Private,Y,Y,);
Method(values,org.jhotdraw.draw.TranslationDirection[],Public,Y,N);
Method(valueOf,org.jhotdraw.draw.TranslationDirection,Public,Y,N);
Method(<init>,void,Private,N,N);
Method(getDirection,org.jhotdraw.draw.TranslationDirection,Public,Y,N);
Method(getDirection$2,org.jhotdraw.draw.TranslationDirection,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Parameter(valueOf,java.lang.String,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,int,);
Parameter(getDirection,java.awt.Point,);
Parameter(getDirection,java.awt.Point,);
Parameter(getDirection$2,java.awt.geom.Point2D$Double,);
Parameter(getDirection$2,java.awt.geom.Point2D$Double,);
Composition(org.jhotdraw.draw.TranslationDirection);
Call(METHOD,org.jhotdraw.draw.TranslationDirection,<clinit> --> <init>,org.jhotdraw.draw.TranslationDirection,);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,values --> $VALUES,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,getDirection --> SOUTH,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,getDirection --> NORTH,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,getDirection --> EAST,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,getDirection --> SOUTH_EAST,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,getDirection --> NORTH_EAST,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,getDirection --> WEST,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,getDirection --> SOUTH_WEST,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,getDirection --> NORTH_WEST,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,getDirection$2 --> SOUTH,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,getDirection$2 --> NORTH,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,getDirection$2 --> EAST,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,getDirection$2 --> SOUTH_EAST,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,getDirection$2 --> NORTH_EAST,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,getDirection$2 --> WEST,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,getDirection$2 --> SOUTH_WEST,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,getDirection$2 --> NORTH_WEST,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,<clinit> --> NORTH,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,<clinit> --> WEST,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,<clinit> --> SOUTH,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,<clinit> --> EAST,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,<clinit> --> NORTH_WEST,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,<clinit> --> SOUTH_WEST,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,<clinit> --> NORTH_EAST,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,<clinit> --> SOUTH_EAST,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,<clinit> --> NORTH,org.jhotdraw.draw.TranslationDirection,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,<clinit> --> WEST,org.jhotdraw.draw.TranslationDirection,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,<clinit> --> SOUTH,org.jhotdraw.draw.TranslationDirection,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,<clinit> --> EAST,org.jhotdraw.draw.TranslationDirection,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,<clinit> --> NORTH_WEST,org.jhotdraw.draw.TranslationDirection,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,<clinit> --> SOUTH_WEST,org.jhotdraw.draw.TranslationDirection,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,<clinit> --> NORTH_EAST,org.jhotdraw.draw.TranslationDirection,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,<clinit> --> SOUTH_EAST,org.jhotdraw.draw.TranslationDirection,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.TranslationDirection,<clinit> --> $VALUES,org.jhotdraw.draw.TranslationDirection,WRITE);
EndClass 319
StartClass 320
Class(org.jhotdraw.draw.action.MoveConstrainedAction$1,N,N,NA);
Attribute($SwitchMap$org$jhotdraw$draw$TranslationDirection,int[],Public,Y,Y,);
Method(<clinit>,void,Public,Y,N);
Call(ATTRIBUTE,org.jhotdraw.draw.action.MoveConstrainedAction$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$TranslationDirection,org.jhotdraw.draw.action.MoveConstrainedAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.MoveConstrainedAction$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$TranslationDirection,org.jhotdraw.draw.action.MoveConstrainedAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.MoveConstrainedAction$1,<clinit> --> NORTH,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.MoveConstrainedAction$1,<clinit> --> SOUTH,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.MoveConstrainedAction$1,<clinit> --> WEST,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.MoveConstrainedAction$1,<clinit> --> EAST,org.jhotdraw.draw.TranslationDirection,READ);
Call(METHOD,org.jhotdraw.draw.action.MoveConstrainedAction$1,<clinit> --> values,org.jhotdraw.draw.TranslationDirection,);
EndClass 320
StartClass 321
Class(org.jhotdraw.draw.event.TransformEdit,N,N,Public);
Attribute(figures,java.util.Collection,Private,N,N,org.jhotdraw.draw.Figure);
Attribute(tx,java.awt.geom.AffineTransform,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(addEdit,boolean,Public,N,N);
Method(replaceEdit,boolean,Public,N,N);
Method(redo,void,Public,N,N);
Method(undo,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(<init>,java.awt.geom.AffineTransform,);
Parameter(<init>$2,java.util.Collection,org.jhotdraw.draw.Figure);
Parameter(<init>$2,java.awt.geom.AffineTransform,);
Parameter(addEdit,javax.swing.undo.UndoableEdit,);
Parameter(replaceEdit,javax.swing.undo.UndoableEdit,);
Call(ATTRIBUTE,org.jhotdraw.draw.event.TransformEdit,<init> --> figures,org.jhotdraw.draw.event.TransformEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.TransformEdit,<init> --> figures,org.jhotdraw.draw.event.TransformEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.TransformEdit,<init> --> tx,org.jhotdraw.draw.event.TransformEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.TransformEdit,<init>$2 --> figures,org.jhotdraw.draw.event.TransformEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.TransformEdit,<init>$2 --> tx,org.jhotdraw.draw.event.TransformEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.TransformEdit,addEdit --> figures,org.jhotdraw.draw.event.TransformEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.TransformEdit,addEdit --> tx,org.jhotdraw.draw.event.TransformEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.TransformEdit,replaceEdit --> figures,org.jhotdraw.draw.event.TransformEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.TransformEdit,replaceEdit --> tx,org.jhotdraw.draw.event.TransformEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.TransformEdit,redo --> figures,org.jhotdraw.draw.event.TransformEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.TransformEdit,redo --> tx,org.jhotdraw.draw.event.TransformEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.TransformEdit,undo --> tx,org.jhotdraw.draw.event.TransformEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.TransformEdit,undo --> figures,org.jhotdraw.draw.event.TransformEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.TransformEdit,toString --> tx,org.jhotdraw.draw.event.TransformEdit,READ);
Call(METHOD,org.jhotdraw.draw.event.TransformEdit,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.event.TransformEdit,getPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.event.TransformEdit,redo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.event.TransformEdit,redo --> transform,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.event.TransformEdit,redo --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.event.TransformEdit,undo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.event.TransformEdit,undo --> transform,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.event.TransformEdit,undo --> changed,org.jhotdraw.draw.Figure,);
EndClass 321
StartClass 322
Class(org.jhotdraw.draw.event.ToolEvent,N,N,Public);
Attribute(invalidatedArea,java.awt.Rectangle,Private,N,N,);
Attribute(view,org.jhotdraw.draw.DrawingView,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getTool,org.jhotdraw.draw.tool.Tool,Public,N,N);
Method(getView,org.jhotdraw.draw.DrawingView,Public,N,N);
Method(getInvalidatedArea,java.awt.Rectangle,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.tool.Tool,);
Parameter(<init>,org.jhotdraw.draw.DrawingView,);
Parameter(<init>,java.awt.Rectangle,);
Composition(org.jhotdraw.draw.DrawingView);
Call(ATTRIBUTE,org.jhotdraw.draw.event.ToolEvent,<init> --> view,org.jhotdraw.draw.event.ToolEvent,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.ToolEvent,<init> --> invalidatedArea,org.jhotdraw.draw.event.ToolEvent,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.ToolEvent,getView --> view,org.jhotdraw.draw.event.ToolEvent,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.ToolEvent,getInvalidatedArea --> invalidatedArea,org.jhotdraw.draw.event.ToolEvent,READ);
EndClass 322
StartClass 323
Class(org.jhotdraw.draw.event.ToolAdapter,N,N,Public);
Method(<init>,void,Public,N,N);
Method(toolStarted,void,Public,N,N);
Method(toolDone,void,Public,N,N);
Method(areaInvalidated,void,Public,N,N);
Method(boundsInvalidated,void,Public,N,N);
Parameter(toolStarted,org.jhotdraw.draw.event.ToolEvent,);
Parameter(toolDone,org.jhotdraw.draw.event.ToolEvent,);
Parameter(areaInvalidated,org.jhotdraw.draw.event.ToolEvent,);
Parameter(boundsInvalidated,org.jhotdraw.draw.event.ToolEvent,);
SubClass(org.jhotdraw.draw.DefaultDrawingEditor$ToolHandler);
SubClass(org.jhotdraw.draw.action.ButtonFactory$1);
SubClass(org.jhotdraw.draw.tool.SelectionTool$TrackerHandler);
Realization(org.jhotdraw.draw.event.ToolListener);
EndClass 323
StartClass 324
Class(org.jhotdraw.draw.DefaultDrawingView$EventHandler,N,N,NA);
Attribute(this$0,org.jhotdraw.draw.DefaultDrawingView,Public,N,Y,);
Method(<init>,void,Private,N,N);
Method(figureAdded,void,Public,N,N);
Method(figureRemoved,void,Public,N,N);
Method(areaInvalidated,void,Public,N,N);
Method(areaInvalidated$2,void,Public,N,N);
Method(handleRequestSecondaryHandles,void,Public,N,N);
Method(focusGained,void,Public,N,N);
Method(focusLost,void,Public,N,N);
Method(handleRequestRemove,void,Public,N,N);
Method(attributeChanged,void,Public,N,N);
Method(figureHandlesChanged,void,Public,N,N);
Method(figureChanged,void,Public,N,N);
Method(figureAdded$2,void,Public,N,N);
Method(figureRemoved$2,void,Public,N,N);
Method(figureRequestRemove,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DefaultDrawingView,);
Parameter(figureAdded,org.jhotdraw.draw.event.CompositeFigureEvent,);
Parameter(figureRemoved,org.jhotdraw.draw.event.CompositeFigureEvent,);
Parameter(areaInvalidated,org.jhotdraw.draw.event.FigureEvent,);
Parameter(areaInvalidated$2,org.jhotdraw.draw.event.HandleEvent,);
Parameter(handleRequestSecondaryHandles,org.jhotdraw.draw.event.HandleEvent,);
Parameter(focusGained,java.awt.event.FocusEvent,);
Parameter(focusLost,java.awt.event.FocusEvent,);
Parameter(handleRequestRemove,org.jhotdraw.draw.event.HandleEvent,);
Parameter(attributeChanged,org.jhotdraw.draw.event.FigureEvent,);
Parameter(figureHandlesChanged,org.jhotdraw.draw.event.FigureEvent,);
Parameter(figureChanged,org.jhotdraw.draw.event.FigureEvent,);
Parameter(figureAdded$2,org.jhotdraw.draw.event.FigureEvent,);
Parameter(figureRemoved$2,org.jhotdraw.draw.event.FigureEvent,);
Parameter(figureRequestRemove,org.jhotdraw.draw.event.FigureEvent,);
Parameter(<init>$2,org.jhotdraw.draw.DefaultDrawingView,);
Parameter(<init>$2,org.jhotdraw.draw.DefaultDrawingView$1,);
Realization(org.jhotdraw.draw.event.FigureListener);
Realization(org.jhotdraw.draw.event.CompositeFigureListener);
Realization(org.jhotdraw.draw.event.HandleListener);
Composition(org.jhotdraw.draw.DefaultDrawingView);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,<init>$2 --> <init>,org.jhotdraw.draw.DefaultDrawingView$EventHandler,);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$EventHandler,<init> --> this$0,org.jhotdraw.draw.DefaultDrawingView$EventHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$EventHandler,figureAdded --> this$0,org.jhotdraw.draw.DefaultDrawingView$EventHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$EventHandler,figureRemoved --> this$0,org.jhotdraw.draw.DefaultDrawingView$EventHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$EventHandler,areaInvalidated --> this$0,org.jhotdraw.draw.DefaultDrawingView$EventHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$EventHandler,areaInvalidated$2 --> this$0,org.jhotdraw.draw.DefaultDrawingView$EventHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$EventHandler,handleRequestSecondaryHandles --> this$0,org.jhotdraw.draw.DefaultDrawingView$EventHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$EventHandler,focusGained --> this$0,org.jhotdraw.draw.DefaultDrawingView$EventHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$EventHandler,handleRequestRemove --> this$0,org.jhotdraw.draw.DefaultDrawingView$EventHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$EventHandler,attributeChanged --> this$0,org.jhotdraw.draw.DefaultDrawingView$EventHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$EventHandler,figureChanged --> this$0,org.jhotdraw.draw.DefaultDrawingView$EventHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$EventHandler,attributeChanged --> CANVAS_HEIGHT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$EventHandler,attributeChanged --> CANVAS_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,figureAdded --> access$100,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,figureAdded --> getChildCount,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,figureAdded --> getEmptyDrawingMessage,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,figureAdded --> getInvalidatedArea,org.jhotdraw.draw.event.CompositeFigureEvent,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,figureAdded --> repaintDrawingArea,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,figureAdded --> invalidateDimension,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,figureRemoved --> access$100,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,figureRemoved --> getChildCount,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,figureRemoved --> getEmptyDrawingMessage,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,figureRemoved --> getInvalidatedArea,org.jhotdraw.draw.event.CompositeFigureEvent,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,figureRemoved --> repaintDrawingArea,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,figureRemoved --> getChildFigure,org.jhotdraw.draw.event.CompositeFigureEvent,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,figureRemoved --> removeFromSelection,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,figureRemoved --> invalidateDimension,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,areaInvalidated --> getInvalidatedArea,org.jhotdraw.draw.event.FigureEvent,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,areaInvalidated --> repaintDrawingArea,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,areaInvalidated --> invalidateDimension,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,areaInvalidated$2 --> getInvalidatedArea,org.jhotdraw.draw.event.HandleEvent,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,areaInvalidated$2 --> invalidateDimension,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,handleRequestSecondaryHandles --> getHandle,org.jhotdraw.draw.event.HandleEvent,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,handleRequestSecondaryHandles --> access$202,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,handleRequestSecondaryHandles --> access$300,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,handleRequestSecondaryHandles --> access$200,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,handleRequestSecondaryHandles --> createSecondaryHandles,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,handleRequestSecondaryHandles --> setView,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,handleRequestSecondaryHandles --> access$400,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,handleRequestSecondaryHandles --> addHandleListener,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,focusGained --> access$500,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,focusGained --> setActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,handleRequestRemove --> access$600,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,handleRequestRemove --> getHandle,org.jhotdraw.draw.event.HandleEvent,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,handleRequestRemove --> dispose,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,handleRequestRemove --> access$000,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,handleRequestRemove --> getInvalidatedArea,org.jhotdraw.draw.event.HandleEvent,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,attributeChanged --> access$100,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,attributeChanged --> getAttribute,org.jhotdraw.draw.event.FigureEvent,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,attributeChanged --> equals,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,attributeChanged --> access$700,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,attributeChanged --> getInvalidatedArea,org.jhotdraw.draw.event.FigureEvent,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,attributeChanged --> repaintDrawingArea,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,attributeChanged --> getCanvasViewBounds,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,attributeChanged --> viewToDrawing$2,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,figureChanged --> getInvalidatedArea,org.jhotdraw.draw.event.FigureEvent,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$EventHandler,figureChanged --> repaintDrawingArea,org.jhotdraw.draw.DefaultDrawingView,);
EndClass 324
StartClass 325
Class(org.jhotdraw.draw.DefaultDrawingViewTransferHandler,N,N,Public);
Attribute(DEBUG,boolean,Private,Y,Y,);
Attribute(exportedFigures,java.util.HashSet,Private,N,N,org.jhotdraw.draw.Figure,);
Method(<init>,void,Public,N,N);
Method(importData,boolean,Public,N,N);
Method(importData$2,boolean,Public,N,N);
Method(importData$3,boolean,Protected,N,N);
Method(moveToDropPoint,void,Protected,N,N);
Method(getSourceActions,int,Public,N,N);
Method(createTransferable,java.awt.datatransfer.Transferable,Protected,N,N);
Method(createTransferable$2,java.awt.datatransfer.Transferable,Protected,N,N);
Method(exportDone,void,Protected,N,N);
Method(exportAsDrag,void,Public,N,N);
Method(getVisualRepresentation,javax.swing.Icon,Public,N,N);
Method(canImport,boolean,Public,N,N);
Method(getDrawing,void,Private,N,N);
Parameter(importData,javax.swing.JComponent,);
Parameter(importData,java.awt.datatransfer.Transferable,);
Parameter(importData$2,javax.swing.TransferHandler$TransferSupport,);
Parameter(importData$3,javax.swing.JComponent,org.jhotdraw.draw.Figure);
Parameter(importData$3,java.awt.datatransfer.Transferable,);
Parameter(importData$3,java.util.HashSet,);
Parameter(importData$3,java.awt.Point,);
Parameter(moveToDropPoint,javax.swing.JComponent,org.jhotdraw.draw.Figure);
Parameter(moveToDropPoint,java.util.HashSet,);
Parameter(moveToDropPoint,java.awt.Point,);
Parameter(getSourceActions,javax.swing.JComponent,);
Parameter(createTransferable,javax.swing.JComponent,);
Parameter(createTransferable$2,org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.Figure);
Parameter(createTransferable$2,java.util.Set,);
Parameter(exportDone,javax.swing.JComponent,);
Parameter(exportDone,java.awt.datatransfer.Transferable,);
Parameter(exportDone,int,);
Parameter(exportAsDrag,javax.swing.JComponent,);
Parameter(exportAsDrag,java.awt.event.InputEvent,);
Parameter(exportAsDrag,int,);
Parameter(getVisualRepresentation,java.awt.datatransfer.Transferable,);
Parameter(canImport,javax.swing.JComponent,);
Parameter(canImport,java.awt.datatransfer.DataFlavor[],);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,importData --> importData$3,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,importData$2 --> importData$3,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,importData$3 --> moveToDropPoint,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,createTransferable --> createTransferable$2,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,exportAsDrag --> getSourceActions,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,exportAsDrag --> createTransferable$2,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,createTransferable$2 --> exportedFigures,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,exportDone --> exportedFigures,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,exportDone --> exportedFigures,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,WRITE);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,importData$3 --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,importData$3 --> getInputFormats,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,importData$3 --> isDataFlavorSupported,org.jhotdraw.draw.io.InputFormat,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,importData$3 --> getChildren,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,importData$3 --> read$4,org.jhotdraw.draw.io.InputFormat,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,importData$3 --> clearSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,importData$3 --> addToSelection$2,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,importData$3 --> <init>,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$1,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,importData$3 --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,importData$3 --> <init>,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$2,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,importData$3 --> getEditor,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,importData$3 --> setEnabled,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,importData$3 --> <init>,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,importData$3 --> start,org.jhotdraw.gui.Worker,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,moveToDropPoint --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,moveToDropPoint --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,moveToDropPoint --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,moveToDropPoint --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,moveToDropPoint --> transform,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,getSourceActions --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,getSourceActions --> getOutputFormats,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,getSourceActions --> getSelectionCount,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,createTransferable --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,createTransferable$2 --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,createTransferable$2 --> getOutputFormats,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,createTransferable$2 --> sort,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,createTransferable$2 --> <init>,org.jhotdraw.gui.datatransfer.CompositeTransferable,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,createTransferable$2 --> getScaleFactor,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,createTransferable$2 --> createTransferable,org.jhotdraw.draw.io.OutputFormat,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,createTransferable$2 --> isDataFlavorSupported,org.jhotdraw.gui.datatransfer.CompositeTransferable,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,createTransferable$2 --> add,org.jhotdraw.gui.datatransfer.CompositeTransferable,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,exportDone --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,exportDone --> isRemovable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,exportDone --> <init>,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$4,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,exportDone --> addCompositeFigureListener,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,exportDone --> removeAll,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,exportDone --> removeCompositeFigureListener,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,exportDone --> <init>,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,exportDone --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,exportAsDrag --> findFigure,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,exportAsDrag --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,exportAsDrag --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,exportAsDrag --> drawingToView$2,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,exportAsDrag --> <init>,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,exportAsDrag --> <init>,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$SwingDragGestureRecognizer,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,exportAsDrag --> gestured,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$SwingDragGestureRecognizer,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,canImport --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,canImport --> getInputFormats,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,canImport --> isDataFlavorSupported,org.jhotdraw.draw.io.InputFormat,);
EndClass 325
StartClass 326
Class(org.jhotdraw.draw.GridConstrainer,N,N,Public);
Attribute(width,double,Private,N,N,);
Attribute(height,double,Private,N,N,);
Attribute(theta,double,Private,N,N,);
Attribute(isVisible,boolean,Private,N,N,);
Attribute(minorColor,java.awt.Color,Private,Y,N,);
Attribute(majorColor,java.awt.Color,Private,Y,N,);
Attribute(majorGridSpacing,int,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(getWidth,double,Public,N,N);
Method(getHeight,double,Public,N,N);
Method(getTheta,double,Public,N,N);
Method(setWidth,void,Public,N,N);
Method(setHeight,void,Public,N,N);
Method(setTheta,void,Public,N,N);
Method(constrainPoint,java.awt.geom.Point2D$Double,Public,N,N);
Method(constrainPoint$2,java.awt.geom.Point2D$Double,Protected,N,N);
Method(translatePoint,java.awt.geom.Point2D$Double,Public,N,N);
Method(constrainRectangle,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(constrainRectangle$2,java.awt.geom.Rectangle2D$Double,Protected,N,N);
Method(translateRectangle,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(isVisible,boolean,Public,N,N);
Method(setVisible,void,Public,N,N);
Method(getMajorGridSpacing,int,Public,N,N);
Method(setMajorGridSpacing,void,Public,N,N);
Method(draw,void,Public,N,N);
Method(constrainAngle,double,Public,N,N);
Method(rotateAngle,double,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>$2,double,);
Parameter(<init>$2,double,);
Parameter(<init>$3,double,);
Parameter(<init>$3,double,);
Parameter(<init>$3,boolean,);
Parameter(<init>$4,double,);
Parameter(<init>$4,double,);
Parameter(<init>$4,double,);
Parameter(<init>$4,boolean,);
Parameter(setWidth,double,);
Parameter(setHeight,double,);
Parameter(setTheta,double,);
Parameter(constrainPoint,java.awt.geom.Point2D$Double,);
Parameter(constrainPoint$2,java.awt.geom.Point2D$Double,);
Parameter(constrainPoint$2,org.jhotdraw.draw.TranslationDirection,);
Parameter(translatePoint,java.awt.geom.Point2D$Double,);
Parameter(translatePoint,org.jhotdraw.draw.TranslationDirection,);
Parameter(constrainRectangle,java.awt.geom.Rectangle2D$Double,);
Parameter(constrainRectangle$2,java.awt.geom.Rectangle2D$Double,);
Parameter(constrainRectangle$2,org.jhotdraw.draw.TranslationDirection,);
Parameter(translateRectangle,java.awt.geom.Rectangle2D$Double,);
Parameter(translateRectangle,org.jhotdraw.draw.TranslationDirection,);
Parameter(setVisible,boolean,);
Parameter(setMajorGridSpacing,int,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(draw,org.jhotdraw.draw.DrawingView,);
Parameter(constrainAngle,double,);
Parameter(rotateAngle,double,);
Parameter(rotateAngle,org.jhotdraw.draw.RotationDirection,);
SuperClass(org.jhotdraw.draw.AbstractConstrainer);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.draw.AbstractConstrainer);
Call(METHOD,org.jhotdraw.draw.GridConstrainer,<init> --> <init>$4,org.jhotdraw.draw.GridConstrainer,);
Call(METHOD,org.jhotdraw.draw.GridConstrainer,<init>$2 --> <init>$4,org.jhotdraw.draw.GridConstrainer,);
Call(METHOD,org.jhotdraw.draw.GridConstrainer,<init>$3 --> <init>$4,org.jhotdraw.draw.GridConstrainer,);
Call(METHOD,org.jhotdraw.draw.GridConstrainer,constrainPoint$2 --> constrainPoint,org.jhotdraw.draw.GridConstrainer,);
Call(METHOD,org.jhotdraw.draw.GridConstrainer,translatePoint --> constrainPoint,org.jhotdraw.draw.GridConstrainer,);
Call(METHOD,org.jhotdraw.draw.GridConstrainer,constrainRectangle --> constrainPoint,org.jhotdraw.draw.GridConstrainer,);
Call(METHOD,org.jhotdraw.draw.GridConstrainer,constrainRectangle$2 --> constrainPoint$2,org.jhotdraw.draw.GridConstrainer,);
Call(METHOD,org.jhotdraw.draw.GridConstrainer,translateRectangle --> constrainRectangle$2,org.jhotdraw.draw.GridConstrainer,);
Call(METHOD,org.jhotdraw.draw.GridConstrainer,draw --> constrainPoint,org.jhotdraw.draw.GridConstrainer,);
Call(METHOD,org.jhotdraw.draw.GridConstrainer,rotateAngle --> constrainAngle,org.jhotdraw.draw.GridConstrainer,);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,<init>$4 --> majorGridSpacing,org.jhotdraw.draw.GridConstrainer,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,<init>$4 --> width,org.jhotdraw.draw.GridConstrainer,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,<init>$4 --> height,org.jhotdraw.draw.GridConstrainer,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,<init>$4 --> theta,org.jhotdraw.draw.GridConstrainer,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,<init>$4 --> isVisible,org.jhotdraw.draw.GridConstrainer,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,getWidth --> width,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,getHeight --> height,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,getTheta --> theta,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,setWidth --> width,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,setWidth --> width,org.jhotdraw.draw.GridConstrainer,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,setHeight --> height,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,setHeight --> height,org.jhotdraw.draw.GridConstrainer,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,setTheta --> theta,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,setTheta --> theta,org.jhotdraw.draw.GridConstrainer,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,constrainPoint --> width,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,constrainPoint --> height,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,constrainPoint$2 --> height,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,constrainPoint$2 --> width,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,translatePoint --> height,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,translatePoint --> width,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,translateRectangle --> height,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,translateRectangle --> width,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,toString --> width,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,toString --> height,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,isVisible --> isVisible,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,setVisible --> isVisible,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,setVisible --> isVisible,org.jhotdraw.draw.GridConstrainer,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,getMajorGridSpacing --> majorGridSpacing,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,setMajorGridSpacing --> majorGridSpacing,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,setMajorGridSpacing --> majorGridSpacing,org.jhotdraw.draw.GridConstrainer,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,draw --> isVisible,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,draw --> width,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,draw --> minorColor,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,draw --> majorGridSpacing,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,draw --> majorColor,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,draw --> height,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,constrainAngle --> theta,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,rotateAngle --> theta,org.jhotdraw.draw.GridConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,<clinit> --> minorColor,org.jhotdraw.draw.GridConstrainer,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,<clinit> --> majorColor,org.jhotdraw.draw.GridConstrainer,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,constrainPoint$2 --> $SwitchMap$org$jhotdraw$draw$TranslationDirection,org.jhotdraw.draw.GridConstrainer$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,translatePoint --> $SwitchMap$org$jhotdraw$draw$TranslationDirection,org.jhotdraw.draw.GridConstrainer$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,constrainRectangle$2 --> $SwitchMap$org$jhotdraw$draw$TranslationDirection,org.jhotdraw.draw.GridConstrainer$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,translateRectangle --> $SwitchMap$org$jhotdraw$draw$TranslationDirection,org.jhotdraw.draw.GridConstrainer$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer,rotateAngle --> $SwitchMap$org$jhotdraw$draw$RotationDirection,org.jhotdraw.draw.GridConstrainer$1,READ);
Call(METHOD,org.jhotdraw.draw.GridConstrainer,<init>$4 --> <init>,org.jhotdraw.draw.AbstractConstrainer,);
Call(METHOD,org.jhotdraw.draw.GridConstrainer,setWidth --> firePropertyChange$3,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.GridConstrainer,setWidth --> fireStateChanged,org.jhotdraw.draw.AbstractConstrainer,);
Call(METHOD,org.jhotdraw.draw.GridConstrainer,setHeight --> firePropertyChange$3,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.GridConstrainer,setHeight --> fireStateChanged,org.jhotdraw.draw.AbstractConstrainer,);
Call(METHOD,org.jhotdraw.draw.GridConstrainer,setTheta --> firePropertyChange$3,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.GridConstrainer,setTheta --> fireStateChanged,org.jhotdraw.draw.AbstractConstrainer,);
Call(METHOD,org.jhotdraw.draw.GridConstrainer,setVisible --> firePropertyChange,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.GridConstrainer,setVisible --> fireStateChanged,org.jhotdraw.draw.AbstractConstrainer,);
Call(METHOD,org.jhotdraw.draw.GridConstrainer,setMajorGridSpacing --> firePropertyChange$2,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.GridConstrainer,setMajorGridSpacing --> fireStateChanged,org.jhotdraw.draw.AbstractConstrainer,);
Call(METHOD,org.jhotdraw.draw.GridConstrainer,draw --> getDrawingToViewTransform,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.GridConstrainer,draw --> viewToDrawing$2,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.GridConstrainer,draw --> getScaleFactor,org.jhotdraw.draw.DrawingView,);
EndClass 326
StartClass 327
Class(org.jhotdraw.draw.event.HandleListener,Y,Y,Public);
Method(areaInvalidated,void,Public,N,Y);
Method(handleRequestRemove,void,Public,N,Y);
Method(handleRequestSecondaryHandles,void,Public,N,Y);
Parameter(areaInvalidated,org.jhotdraw.draw.event.HandleEvent,);
Parameter(handleRequestRemove,org.jhotdraw.draw.event.HandleEvent,);
Parameter(handleRequestSecondaryHandles,org.jhotdraw.draw.event.HandleEvent,);
EndClass 327
StartClass 328
Class(org.jhotdraw.draw.event.FigureSelectionEvent,N,N,Public);
Attribute(oldValue,java.util.Set,Private,N,N,org.jhotdraw.draw.Figure);
Attribute(newValue,java.util.Set,Private,N,N,org.jhotdraw.draw.Figure);
Method(<init>,void,Public,N,N);
Method(getView,org.jhotdraw.draw.DrawingView,Public,N,N);
Method(getOldSelection,java.util.Set,Public,N,N);
Method(getNewSelection,java.util.Set,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.Figure);
Parameter(<init>,java.util.Set,org.jhotdraw.draw.Figure);
Parameter(<init>,java.util.Set,);
Call(ATTRIBUTE,org.jhotdraw.draw.event.FigureSelectionEvent,<init> --> oldValue,org.jhotdraw.draw.event.FigureSelectionEvent,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.FigureSelectionEvent,<init> --> newValue,org.jhotdraw.draw.event.FigureSelectionEvent,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.FigureSelectionEvent,getOldSelection --> oldValue,org.jhotdraw.draw.event.FigureSelectionEvent,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.FigureSelectionEvent,getNewSelection --> newValue,org.jhotdraw.draw.event.FigureSelectionEvent,READ);
EndClass 328
StartClass 329
Class(org.jhotdraw.draw.event.CompositeFigureListener,Y,Y,Public);
Method(figureAdded,void,Public,N,Y);
Method(figureRemoved,void,Public,N,Y);
Parameter(figureAdded,org.jhotdraw.draw.event.CompositeFigureEvent,);
Parameter(figureRemoved,org.jhotdraw.draw.event.CompositeFigureEvent,);
EndClass 329
StartClass 330
Class(org.jhotdraw.draw.DefaultDrawingView$3,N,N,NA);
Attribute(val$deletedFigureIndices,int[],Public,N,Y,);
Attribute(val$deletedFigures,java.util.List,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.DefaultDrawingView,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DefaultDrawingView,);
Parameter(<init>,int[],);
Parameter(<init>,java.util.List,);
Composition(org.jhotdraw.draw.DefaultDrawingView);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$3,<init> --> this$0,org.jhotdraw.draw.DefaultDrawingView$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$3,<init> --> val$deletedFigureIndices,org.jhotdraw.draw.DefaultDrawingView$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$3,<init> --> val$deletedFigures,org.jhotdraw.draw.DefaultDrawingView$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$3,undo --> this$0,org.jhotdraw.draw.DefaultDrawingView$3,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$3,undo --> val$deletedFigureIndices,org.jhotdraw.draw.DefaultDrawingView$3,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$3,undo --> val$deletedFigures,org.jhotdraw.draw.DefaultDrawingView$3,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$3,redo --> val$deletedFigureIndices,org.jhotdraw.draw.DefaultDrawingView$3,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$3,redo --> this$0,org.jhotdraw.draw.DefaultDrawingView$3,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$3,redo --> val$deletedFigures,org.jhotdraw.draw.DefaultDrawingView$3,READ);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$3,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$3,getPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$3,undo --> clearSelection,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$3,undo --> getDrawing,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$3,undo --> add$2,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$3,undo --> addToSelection$2,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$3,redo --> access$100,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$3,redo --> remove,org.jhotdraw.draw.Drawing,);
EndClass 330
StartClass 331
Class(org.jhotdraw.draw.DefaultDrawingView$4,N,N,NA);
Attribute(val$duplicates,java.util.ArrayList,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.DefaultDrawingView,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DefaultDrawingView,);
Parameter(<init>,java.util.ArrayList,);
Composition(org.jhotdraw.draw.DefaultDrawingView);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$4,<init> --> this$0,org.jhotdraw.draw.DefaultDrawingView$4,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$4,<init> --> val$duplicates,org.jhotdraw.draw.DefaultDrawingView$4,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$4,undo --> this$0,org.jhotdraw.draw.DefaultDrawingView$4,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$4,undo --> val$duplicates,org.jhotdraw.draw.DefaultDrawingView$4,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$4,redo --> this$0,org.jhotdraw.draw.DefaultDrawingView$4,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$4,redo --> val$duplicates,org.jhotdraw.draw.DefaultDrawingView$4,READ);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$4,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$4,getPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$4,undo --> getDrawing,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$4,undo --> removeAll,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$4,redo --> getDrawing,org.jhotdraw.draw.DefaultDrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$4,redo --> addAll,org.jhotdraw.draw.Drawing,);
EndClass 331
StartClass 332
Class(org.jhotdraw.draw.DefaultDrawingView$1,N,N,NA);
Attribute(this$0,org.jhotdraw.draw.DefaultDrawingView,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(figureHandlesChanged,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DefaultDrawingView,);
Parameter(figureHandlesChanged,org.jhotdraw.draw.event.FigureEvent,);
SuperClass(org.jhotdraw.draw.event.FigureAdapter);
Generalization(org.jhotdraw.draw.event.FigureAdapter);
Composition(org.jhotdraw.draw.DefaultDrawingView);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$1,<init> --> this$0,org.jhotdraw.draw.DefaultDrawingView$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$1,figureHandlesChanged --> this$0,org.jhotdraw.draw.DefaultDrawingView$1,READ);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$1,<init> --> <init>,org.jhotdraw.draw.event.FigureAdapter,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$1,figureHandlesChanged --> access$000,org.jhotdraw.draw.DefaultDrawingView,);
EndClass 332
StartClass 333
Class(org.jhotdraw.draw.DefaultDrawingView$2,N,N,NA);
Attribute(this$0,org.jhotdraw.draw.DefaultDrawingView,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DefaultDrawingView,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Composition(org.jhotdraw.draw.DefaultDrawingView);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$2,<init> --> this$0,org.jhotdraw.draw.DefaultDrawingView$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingView$2,actionPerformed --> this$0,org.jhotdraw.draw.DefaultDrawingView$2,READ);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingView$2,actionPerformed --> access$902,org.jhotdraw.draw.DefaultDrawingView,);
EndClass 333
StartClass 334
Class(org.jhotdraw.undo.UndoRedoManager$UndoAction,N,N,NA);
Attribute(this$0,org.jhotdraw.undo.UndoRedoManager,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.undo.UndoRedoManager,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Composition(org.jhotdraw.undo.UndoRedoManager);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager$UndoAction,<init> --> this$0,org.jhotdraw.undo.UndoRedoManager$UndoAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager$UndoAction,actionPerformed --> this$0,org.jhotdraw.undo.UndoRedoManager$UndoAction,READ);
Call(METHOD,org.jhotdraw.undo.UndoRedoManager$UndoAction,<init> --> access$000,org.jhotdraw.undo.UndoRedoManager,);
Call(METHOD,org.jhotdraw.undo.UndoRedoManager$UndoAction,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.undo.UndoRedoManager$UndoAction,actionPerformed --> undo,org.jhotdraw.undo.UndoRedoManager,);
EndClass 334
StartClass 335
Class(org.jhotdraw.undo.UndoRedoManager$RedoAction,N,N,NA);
Attribute(this$0,org.jhotdraw.undo.UndoRedoManager,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.undo.UndoRedoManager,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Composition(org.jhotdraw.undo.UndoRedoManager);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager$RedoAction,<init> --> this$0,org.jhotdraw.undo.UndoRedoManager$RedoAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.undo.UndoRedoManager$RedoAction,actionPerformed --> this$0,org.jhotdraw.undo.UndoRedoManager$RedoAction,READ);
Call(METHOD,org.jhotdraw.undo.UndoRedoManager$RedoAction,<init> --> access$000,org.jhotdraw.undo.UndoRedoManager,);
Call(METHOD,org.jhotdraw.undo.UndoRedoManager$RedoAction,<init> --> configureAction,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.undo.UndoRedoManager$RedoAction,actionPerformed --> redo,org.jhotdraw.undo.UndoRedoManager,);
EndClass 335
StartClass 336
Class(org.jhotdraw.undo.UndoRedoManager$1,N,N,NA);
Method(<init>,void,Public,N,N);
Method(canUndo,boolean,Public,N,N);
Method(canRedo,boolean,Public,N,N);
EndClass 336
StartClass 337
Class(org.jhotdraw.gui.PlacardScrollPaneLayout$UIResource,N,N,Public);
Method(<init>,void,Public,N,N);
SuperClass(org.jhotdraw.gui.PlacardScrollPaneLayout);
Generalization(org.jhotdraw.gui.PlacardScrollPaneLayout);
Call(METHOD,org.jhotdraw.gui.PlacardScrollPaneLayout$UIResource,<init> --> <init>,org.jhotdraw.gui.PlacardScrollPaneLayout,);
EndClass 337
StartClass 338
Class(org.jhotdraw.gui.datatransfer.ImageTransferable,N,N,Public);
Attribute(image,java.awt.Image,Private,N,N,);
Attribute(IMAGE_PNG_FLAVOR,java.awt.datatransfer.DataFlavor,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(isDataFlavorSupported,boolean,Public,N,N);
Method(getTransferData,java.lang.Object,Public,N,N);
Method(getTransferDataFlavors,java.awt.datatransfer.DataFlavor[],Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,java.awt.Image,);
Parameter(isDataFlavorSupported,java.awt.datatransfer.DataFlavor,);
Parameter(getTransferData,java.awt.datatransfer.DataFlavor,);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.ImageTransferable,<init> --> image,org.jhotdraw.gui.datatransfer.ImageTransferable,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.ImageTransferable,isDataFlavorSupported --> IMAGE_PNG_FLAVOR,org.jhotdraw.gui.datatransfer.ImageTransferable,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.ImageTransferable,getTransferData --> image,org.jhotdraw.gui.datatransfer.ImageTransferable,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.ImageTransferable,getTransferData --> IMAGE_PNG_FLAVOR,org.jhotdraw.gui.datatransfer.ImageTransferable,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.ImageTransferable,getTransferDataFlavors --> IMAGE_PNG_FLAVOR,org.jhotdraw.gui.datatransfer.ImageTransferable,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.ImageTransferable,<clinit> --> IMAGE_PNG_FLAVOR,org.jhotdraw.gui.datatransfer.ImageTransferable,WRITE);
Call(METHOD,org.jhotdraw.gui.datatransfer.ImageTransferable,getTransferData --> toBufferedImage$2,org.jhotdraw.util.Images,);
EndClass 338
StartClass 339
Class(org.jhotdraw.draw.print.DrawingPageable$1,N,N,NA);
Attribute(this$0,org.jhotdraw.draw.print.DrawingPageable,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(print,int,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.print.DrawingPageable,);
Parameter(print,java.awt.Graphics,);
Parameter(print,java.awt.print.PageFormat,);
Parameter(print,int,);
Composition(org.jhotdraw.draw.print.DrawingPageable);
Call(ATTRIBUTE,org.jhotdraw.draw.print.DrawingPageable$1,<init> --> this$0,org.jhotdraw.draw.print.DrawingPageable$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.print.DrawingPageable$1,print --> this$0,org.jhotdraw.draw.print.DrawingPageable$1,READ);
Call(METHOD,org.jhotdraw.draw.print.DrawingPageable$1,print --> printPage,org.jhotdraw.draw.print.DrawingPageable,);
EndClass 339
StartClass 340
Class(org.jhotdraw.gui.datatransfer.InputStreamTransferable,N,N,Public);
Attribute(data,byte[],Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getTransferData,java.lang.Object,Public,N,N);
Parameter(<init>,java.awt.datatransfer.DataFlavor,);
Parameter(<init>,byte[],);
Parameter(<init>$2,java.awt.datatransfer.DataFlavor[],);
Parameter(<init>$2,byte[],);
Parameter(getTransferData,java.awt.datatransfer.DataFlavor,);
SuperClass(org.jhotdraw.gui.datatransfer.AbstractTransferable);
Generalization(org.jhotdraw.gui.datatransfer.AbstractTransferable);
Call(METHOD,org.jhotdraw.gui.datatransfer.InputStreamTransferable,<init> --> <init>$2,org.jhotdraw.gui.datatransfer.InputStreamTransferable,);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.InputStreamTransferable,<init>$2 --> data,org.jhotdraw.gui.datatransfer.InputStreamTransferable,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.InputStreamTransferable,getTransferData --> data,org.jhotdraw.gui.datatransfer.InputStreamTransferable,READ);
Call(METHOD,org.jhotdraw.gui.datatransfer.InputStreamTransferable,<init>$2 --> <init>$2,org.jhotdraw.gui.datatransfer.AbstractTransferable,);
Call(METHOD,org.jhotdraw.gui.datatransfer.InputStreamTransferable,getTransferData --> isDataFlavorSupported,org.jhotdraw.gui.datatransfer.AbstractTransferable,);
EndClass 340
StartClass 341
Class(org.jhotdraw.xml.NanoXMLDOMInput,N,N,Public);
Attribute(idobjects,java.util.HashMap,Private,N,N,java.lang.String;java.lang.Object);
Attribute(document,net.n3.nanoxml.XMLElement,Private,N,N,);
Attribute(current,net.n3.nanoxml.XMLElement,Private,N,N,);
Attribute(factory,org.jhotdraw.xml.DOMFactory,Private,N,N,);
Attribute(stack,java.util.Stack,Private,N,N,net.n3.nanoxml.XMLElement);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getTagName,java.lang.String,Public,N,N);
Method(getAttribute,java.lang.String,Public,N,N);
Method(getInheritedAttribute,java.util.List,Public,N,N);
Method(getText,java.lang.String,Public,N,N);
Method(getText$2,java.lang.String,Public,N,N);
Method(getAttribute$2,int,Public,N,N);
Method(getAttribute$3,double,Public,N,N);
Method(getAttribute$4,boolean,Public,N,N);
Method(getElementCount,int,Public,N,N);
Method(getElementCount$2,int,Public,N,N);
Method(openElement,void,Public,N,N);
Method(openElement$2,void,Public,N,N);
Method(openElement$3,void,Public,N,N);
Method(closeElement,void,Public,N,N);
Method(readObject,java.lang.Object,Public,N,N);
Method(readObject$2,java.lang.Object,Public,N,N);
Method(dispose,void,Public,N,N);
Parameter(<init>,org.jhotdraw.xml.DOMFactory,);
Parameter(<init>,java.io.InputStream,);
Parameter(<init>$2,org.jhotdraw.xml.DOMFactory,);
Parameter(<init>$2,java.io.Reader,);
Parameter(getAttribute,java.lang.String,);
Parameter(getAttribute,java.lang.String,);
Parameter(getInheritedAttribute,java.lang.String,java.lang.String);
Parameter(getText$2,java.lang.String,);
Parameter(getAttribute$2,java.lang.String,);
Parameter(getAttribute$2,int,);
Parameter(getAttribute$3,java.lang.String,);
Parameter(getAttribute$3,double,);
Parameter(getAttribute$4,java.lang.String,);
Parameter(getAttribute$4,boolean,);
Parameter(getElementCount$2,java.lang.String,);
Parameter(openElement,int,);
Parameter(openElement$2,java.lang.String,);
Parameter(openElement$3,java.lang.String,);
Parameter(openElement$3,int,);
Parameter(readObject$2,int,);
Realization(org.jhotdraw.xml.DOMInput);
Realization(org.jhotdraw.app.Disposable);
Composition(net.n3.nanoxml.XMLElement);
Composition(org.jhotdraw.xml.DOMFactory);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,<init> --> <init>$2,org.jhotdraw.xml.NanoXMLDOMInput,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,getText --> getText$2,org.jhotdraw.xml.NanoXMLDOMInput,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,readObject --> readObject$2,org.jhotdraw.xml.NanoXMLDOMInput,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,readObject$2 --> openElement,org.jhotdraw.xml.NanoXMLDOMInput,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,readObject$2 --> getAttribute,org.jhotdraw.xml.NanoXMLDOMInput,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,readObject$2 --> getTagName,org.jhotdraw.xml.NanoXMLDOMInput,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,readObject$2 --> closeElement,org.jhotdraw.xml.NanoXMLDOMInput,);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,<init>$2 --> current,org.jhotdraw.xml.NanoXMLDOMInput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,<init>$2 --> document,org.jhotdraw.xml.NanoXMLDOMInput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,<init>$2 --> idobjects,org.jhotdraw.xml.NanoXMLDOMInput,WRITE);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,<init>$2 --> stack,org.jhotdraw.xml.NanoXMLDOMInput,WRITE);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,<init>$2 --> factory,org.jhotdraw.xml.NanoXMLDOMInput,WRITE);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,<init>$2 --> document,org.jhotdraw.xml.NanoXMLDOMInput,WRITE);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,<init>$2 --> current,org.jhotdraw.xml.NanoXMLDOMInput,WRITE);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,getTagName --> current,org.jhotdraw.xml.NanoXMLDOMInput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,getAttribute --> current,org.jhotdraw.xml.NanoXMLDOMInput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,getInheritedAttribute --> stack,org.jhotdraw.xml.NanoXMLDOMInput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,getInheritedAttribute --> current,org.jhotdraw.xml.NanoXMLDOMInput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,getText$2 --> current,org.jhotdraw.xml.NanoXMLDOMInput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,getAttribute$2 --> current,org.jhotdraw.xml.NanoXMLDOMInput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,getAttribute$3 --> current,org.jhotdraw.xml.NanoXMLDOMInput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,getAttribute$4 --> current,org.jhotdraw.xml.NanoXMLDOMInput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,getElementCount --> current,org.jhotdraw.xml.NanoXMLDOMInput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,getElementCount$2 --> current,org.jhotdraw.xml.NanoXMLDOMInput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,openElement --> stack,org.jhotdraw.xml.NanoXMLDOMInput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,openElement --> current,org.jhotdraw.xml.NanoXMLDOMInput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,openElement --> current,org.jhotdraw.xml.NanoXMLDOMInput,WRITE);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,openElement$2 --> current,org.jhotdraw.xml.NanoXMLDOMInput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,openElement$2 --> stack,org.jhotdraw.xml.NanoXMLDOMInput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,openElement$2 --> current,org.jhotdraw.xml.NanoXMLDOMInput,WRITE);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,openElement$3 --> current,org.jhotdraw.xml.NanoXMLDOMInput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,openElement$3 --> stack,org.jhotdraw.xml.NanoXMLDOMInput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,openElement$3 --> current,org.jhotdraw.xml.NanoXMLDOMInput,WRITE);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,closeElement --> stack,org.jhotdraw.xml.NanoXMLDOMInput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,closeElement --> current,org.jhotdraw.xml.NanoXMLDOMInput,WRITE);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,readObject$2 --> current,org.jhotdraw.xml.NanoXMLDOMInput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,readObject$2 --> idobjects,org.jhotdraw.xml.NanoXMLDOMInput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,readObject$2 --> factory,org.jhotdraw.xml.NanoXMLDOMInput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,dispose --> document,org.jhotdraw.xml.NanoXMLDOMInput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMInput,dispose --> document,org.jhotdraw.xml.NanoXMLDOMInput,WRITE);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,<init>$2 --> createDefaultXMLParser,net.n3.nanoxml.XMLParserFactory,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,<init>$2 --> <init>$2,net.n3.nanoxml.StdXMLReader,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,<init>$2 --> setReader,net.n3.nanoxml.IXMLParser,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,<init>$2 --> <init>,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,<init>$2 --> parse,net.n3.nanoxml.IXMLParser,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,<init>$2 --> addChild,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,getTagName --> getName,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,getAttribute --> getAttribute$2,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,getInheritedAttribute --> getAttribute$2,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,getText$2 --> getContent,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,getAttribute$2 --> getAttribute$2,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,getAttribute$3 --> getAttribute$2,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,getAttribute$4 --> getAttribute$2,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,getElementCount --> getChildrenCount,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,getElementCount$2 --> getChildren,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,getElementCount$2 --> getName,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,openElement --> getChildren,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,openElement$2 --> getChildren,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,openElement$2 --> getName,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,openElement$3 --> getChildren,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,openElement$3 --> getName,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,readObject$2 --> getLineNr,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,readObject$2 --> read,org.jhotdraw.xml.DOMFactory,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,readObject$2 --> read,org.jhotdraw.xml.DOMStorable,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMInput,dispose --> dispose,net.n3.nanoxml.XMLElement,);
EndClass 341
StartClass 342
Class(org.jhotdraw.xml.NanoXMLDOMOutput,N,N,Public);
Attribute(doctype,java.lang.String,Private,N,N,);
Attribute(objectids,java.util.HashMap,Private,N,N,java.lang.Object;java.lang.String);
Attribute(prototypes,java.util.HashMap,Private,N,N,java.lang.String;java.lang.Object);
Attribute(document,net.n3.nanoxml.XMLElement,Private,N,N,);
Attribute(current,net.n3.nanoxml.XMLElement,Private,N,N,);
Attribute(factory,org.jhotdraw.xml.DOMFactory,Private,N,N,);
Attribute(stack,java.util.Stack,Private,N,N,net.n3.nanoxml.XMLElement);
Method(<init>,void,Public,N,N);
Method(save,void,Public,N,N);
Method(save$2,void,Public,N,N);
Method(print,void,Public,N,N);
Method(openElement,void,Public,N,N);
Method(closeElement,void,Public,N,N);
Method(addComment,void,Public,N,N);
Method(addText,void,Public,N,N);
Method(addAttribute,void,Public,N,N);
Method(addAttribute$2,void,Public,N,N);
Method(addAttribute$3,void,Public,N,N);
Method(addAttribute$4,void,Public,N,N);
Method(addAttribute$5,void,Public,N,N);
Method(writeObject,void,Public,N,N);
Method(addAttribute$6,void,Public,N,N);
Method(addAttribute$7,void,Public,N,N);
Method(addAttribute$8,void,Public,N,N);
Method(addAttribute$9,void,Public,N,N);
Method(addAttribute$10,void,Public,N,N);
Method(getPrototype,java.lang.Object,Public,N,N);
Method(setDoctype,void,Public,N,N);
Method(dispose,void,Public,N,N);
Parameter(<init>,org.jhotdraw.xml.DOMFactory,);
Parameter(save,java.io.OutputStream,);
Parameter(save$2,java.io.Writer,);
Parameter(print,java.io.PrintWriter,);
Parameter(openElement,java.lang.String,);
Parameter(addComment,java.lang.String,);
Parameter(addText,java.lang.String,);
Parameter(addAttribute,java.lang.String,);
Parameter(addAttribute,java.lang.String,);
Parameter(addAttribute$2,java.lang.String,);
Parameter(addAttribute$2,int,);
Parameter(addAttribute$3,java.lang.String,);
Parameter(addAttribute$3,boolean,);
Parameter(addAttribute$4,java.lang.String,);
Parameter(addAttribute$4,float,);
Parameter(addAttribute$5,java.lang.String,);
Parameter(addAttribute$5,double,);
Parameter(writeObject,java.lang.Object,);
Parameter(addAttribute$6,java.lang.String,);
Parameter(addAttribute$6,float,);
Parameter(addAttribute$6,float,);
Parameter(addAttribute$7,java.lang.String,);
Parameter(addAttribute$7,int,);
Parameter(addAttribute$7,int,);
Parameter(addAttribute$8,java.lang.String,);
Parameter(addAttribute$8,double,);
Parameter(addAttribute$8,double,);
Parameter(addAttribute$9,java.lang.String,);
Parameter(addAttribute$9,boolean,);
Parameter(addAttribute$9,boolean,);
Parameter(addAttribute$10,java.lang.String,);
Parameter(addAttribute$10,java.lang.String,);
Parameter(addAttribute$10,java.lang.String,);
Parameter(setDoctype,java.lang.String,);
Realization(org.jhotdraw.xml.DOMOutput);
Realization(org.jhotdraw.app.Disposable);
Composition(net.n3.nanoxml.XMLElement);
Composition(org.jhotdraw.xml.DOMFactory);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,save --> save$2,org.jhotdraw.xml.NanoXMLDOMOutput,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,writeObject --> openElement,org.jhotdraw.xml.NanoXMLDOMOutput,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,writeObject --> addAttribute,org.jhotdraw.xml.NanoXMLDOMOutput,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,writeObject --> closeElement,org.jhotdraw.xml.NanoXMLDOMOutput,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,addAttribute$6 --> addAttribute$4,org.jhotdraw.xml.NanoXMLDOMOutput,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,addAttribute$7 --> addAttribute$2,org.jhotdraw.xml.NanoXMLDOMOutput,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,addAttribute$8 --> addAttribute$5,org.jhotdraw.xml.NanoXMLDOMOutput,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,addAttribute$9 --> addAttribute$3,org.jhotdraw.xml.NanoXMLDOMOutput,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,addAttribute$10 --> addAttribute,org.jhotdraw.xml.NanoXMLDOMOutput,);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,<init> --> document,org.jhotdraw.xml.NanoXMLDOMOutput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,<init> --> stack,org.jhotdraw.xml.NanoXMLDOMOutput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,<init> --> current,org.jhotdraw.xml.NanoXMLDOMOutput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,<init> --> factory,org.jhotdraw.xml.NanoXMLDOMOutput,WRITE);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,<init> --> objectids,org.jhotdraw.xml.NanoXMLDOMOutput,WRITE);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,<init> --> document,org.jhotdraw.xml.NanoXMLDOMOutput,WRITE);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,<init> --> current,org.jhotdraw.xml.NanoXMLDOMOutput,WRITE);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,<init> --> stack,org.jhotdraw.xml.NanoXMLDOMOutput,WRITE);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,save$2 --> doctype,org.jhotdraw.xml.NanoXMLDOMOutput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,save$2 --> document,org.jhotdraw.xml.NanoXMLDOMOutput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,print --> document,org.jhotdraw.xml.NanoXMLDOMOutput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,openElement --> current,org.jhotdraw.xml.NanoXMLDOMOutput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,openElement --> stack,org.jhotdraw.xml.NanoXMLDOMOutput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,openElement --> current,org.jhotdraw.xml.NanoXMLDOMOutput,WRITE);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,closeElement --> stack,org.jhotdraw.xml.NanoXMLDOMOutput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,closeElement --> current,org.jhotdraw.xml.NanoXMLDOMOutput,WRITE);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,addText --> current,org.jhotdraw.xml.NanoXMLDOMOutput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,addAttribute --> current,org.jhotdraw.xml.NanoXMLDOMOutput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,addAttribute$2 --> current,org.jhotdraw.xml.NanoXMLDOMOutput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,addAttribute$3 --> current,org.jhotdraw.xml.NanoXMLDOMOutput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,addAttribute$4 --> current,org.jhotdraw.xml.NanoXMLDOMOutput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,addAttribute$5 --> current,org.jhotdraw.xml.NanoXMLDOMOutput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,writeObject --> factory,org.jhotdraw.xml.NanoXMLDOMOutput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,writeObject --> current,org.jhotdraw.xml.NanoXMLDOMOutput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,writeObject --> objectids,org.jhotdraw.xml.NanoXMLDOMOutput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,getPrototype --> prototypes,org.jhotdraw.xml.NanoXMLDOMOutput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,getPrototype --> current,org.jhotdraw.xml.NanoXMLDOMOutput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,getPrototype --> factory,org.jhotdraw.xml.NanoXMLDOMOutput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,getPrototype --> prototypes,org.jhotdraw.xml.NanoXMLDOMOutput,WRITE);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,setDoctype --> doctype,org.jhotdraw.xml.NanoXMLDOMOutput,WRITE);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,dispose --> document,org.jhotdraw.xml.NanoXMLDOMOutput,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.NanoXMLDOMOutput,dispose --> document,org.jhotdraw.xml.NanoXMLDOMOutput,WRITE);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,<init> --> <init>,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,save$2 --> <init>,net.n3.nanoxml.XMLWriter,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,save$2 --> getChildren,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,save$2 --> write,net.n3.nanoxml.XMLWriter,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,print --> <init>,net.n3.nanoxml.XMLWriter,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,print --> getChildren,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,print --> write$2,net.n3.nanoxml.XMLWriter,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,openElement --> <init>,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,openElement --> setName,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,openElement --> addChild,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,addText --> getContent,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,addText --> setContent,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,addAttribute --> setAttribute,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,addAttribute$2 --> setAttribute,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,addAttribute$3 --> setAttribute,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,addAttribute$4 --> setAttribute,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,addAttribute$5 --> setAttribute,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,writeObject --> getName,org.jhotdraw.xml.DOMFactory,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,writeObject --> write,org.jhotdraw.xml.DOMFactory,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,getPrototype --> getName,net.n3.nanoxml.XMLElement,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,getPrototype --> create,org.jhotdraw.xml.DOMFactory,);
Call(METHOD,org.jhotdraw.xml.NanoXMLDOMOutput,dispose --> dispose,net.n3.nanoxml.XMLElement,);
EndClass 342
StartClass 343
Class(org.jhotdraw.draw.AbstractDrawing,N,Y,Public);
Attribute(lock,java.lang.Object,Private,Y,Y,);
Attribute(fontRenderContext,java.awt.font.FontRenderContext,Private,N,N,);
Attribute(inputFormats,java.util.LinkedList,Private,N,N,org.jhotdraw.draw.io.InputFormat);
Attribute(outputFormats,java.util.LinkedList,Private,N,N,org.jhotdraw.draw.io.OutputFormat);
Attribute(DEBUG,boolean,Private,Y,Y,);
Method(<init>,void,Public,N,N);
Method(addUndoableEditListener,void,Public,N,N);
Method(removeUndoableEditListener,void,Public,N,N);
Method(fireUndoableEditHappened,void,Public,N,N);
Method(getFontRenderContext,java.awt.font.FontRenderContext,Public,N,N);
Method(setFontRenderContext,void,Public,N,N);
Method(read,void,Public,N,N);
Method(write,void,Public,N,N);
Method(getLock,java.lang.Object,Public,N,N);
Method(addInputFormat,void,Public,N,N);
Method(addOutputFormat,void,Public,N,N);
Method(setOutputFormats,void,Public,N,N);
Method(setInputFormats,void,Public,N,N);
Method(getInputFormats,java.util.List,Public,N,N);
Method(getOutputFormats,java.util.List,Public,N,N);
Method(getDrawing,org.jhotdraw.draw.Drawing,Public,N,N);
Method(clone,org.jhotdraw.draw.AbstractDrawing,Public,N,N);
Method(clone$2,org.jhotdraw.draw.AbstractAttributedCompositeFigure,Public,N,N);
Method(clone$3,org.jhotdraw.draw.AbstractCompositeFigure,Public,N,N);
Method(clone$4,org.jhotdraw.draw.Figure,Public,N,N);
Method(clone$5,org.jhotdraw.draw.AbstractFigure,Public,N,N);
Method(clone$6,org.jhotdraw.beans.AbstractBean,Public,N,N);
Method(clone$7,java.lang.Object,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(addUndoableEditListener,javax.swing.event.UndoableEditListener,);
Parameter(removeUndoableEditListener,javax.swing.event.UndoableEditListener,);
Parameter(fireUndoableEditHappened,javax.swing.undo.UndoableEdit,);
Parameter(setFontRenderContext,java.awt.font.FontRenderContext,);
Parameter(read,org.jhotdraw.xml.DOMInput,);
Parameter(write,org.jhotdraw.xml.DOMOutput,);
Parameter(addInputFormat,org.jhotdraw.draw.io.InputFormat,);
Parameter(addOutputFormat,org.jhotdraw.draw.io.OutputFormat,);
Parameter(setOutputFormats,java.util.List,org.jhotdraw.draw.io.OutputFormat);
Parameter(setInputFormats,java.util.List,org.jhotdraw.draw.io.InputFormat);
SuperClass(org.jhotdraw.draw.AbstractAttributedCompositeFigure);
SuperClass(org.jhotdraw.draw.AbstractCompositeFigure);
SuperClass(org.jhotdraw.draw.AbstractFigure);
SuperClass(org.jhotdraw.beans.AbstractBean);
SubClass(org.jhotdraw.draw.QuadTreeDrawing);
SubClass(org.jhotdraw.draw.DefaultDrawing);
Generalization(org.jhotdraw.draw.AbstractAttributedCompositeFigure);
Realization(org.jhotdraw.draw.Drawing);
Call(METHOD,org.jhotdraw.draw.AbstractDrawing,clone$2 --> clone,org.jhotdraw.draw.AbstractDrawing,);
Call(METHOD,org.jhotdraw.draw.AbstractDrawing,clone$3 --> clone,org.jhotdraw.draw.AbstractDrawing,);
Call(METHOD,org.jhotdraw.draw.AbstractDrawing,clone$4 --> clone,org.jhotdraw.draw.AbstractDrawing,);
Call(METHOD,org.jhotdraw.draw.AbstractDrawing,clone$5 --> clone,org.jhotdraw.draw.AbstractDrawing,);
Call(METHOD,org.jhotdraw.draw.AbstractDrawing,clone$6 --> clone,org.jhotdraw.draw.AbstractDrawing,);
Call(METHOD,org.jhotdraw.draw.AbstractDrawing,clone$7 --> clone,org.jhotdraw.draw.AbstractDrawing,);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractDrawing,<init> --> inputFormats,org.jhotdraw.draw.AbstractDrawing,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractDrawing,<init> --> outputFormats,org.jhotdraw.draw.AbstractDrawing,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractDrawing,getFontRenderContext --> fontRenderContext,org.jhotdraw.draw.AbstractDrawing,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractDrawing,setFontRenderContext --> fontRenderContext,org.jhotdraw.draw.AbstractDrawing,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractDrawing,getLock --> lock,org.jhotdraw.draw.AbstractDrawing,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractDrawing,addInputFormat --> inputFormats,org.jhotdraw.draw.AbstractDrawing,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractDrawing,addOutputFormat --> outputFormats,org.jhotdraw.draw.AbstractDrawing,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractDrawing,setOutputFormats --> outputFormats,org.jhotdraw.draw.AbstractDrawing,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractDrawing,setInputFormats --> inputFormats,org.jhotdraw.draw.AbstractDrawing,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractDrawing,getInputFormats --> inputFormats,org.jhotdraw.draw.AbstractDrawing,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractDrawing,getOutputFormats --> outputFormats,org.jhotdraw.draw.AbstractDrawing,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractDrawing,clone --> inputFormats,org.jhotdraw.draw.AbstractDrawing,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractDrawing,clone --> outputFormats,org.jhotdraw.draw.AbstractDrawing,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractDrawing,clone --> inputFormats,org.jhotdraw.draw.AbstractDrawing,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractDrawing,clone --> outputFormats,org.jhotdraw.draw.AbstractDrawing,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractDrawing,<clinit> --> lock,org.jhotdraw.draw.AbstractDrawing,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractDrawing,addUndoableEditListener --> listenerList,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractDrawing,removeUndoableEditListener --> listenerList,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractDrawing,fireUndoableEditHappened --> listenerList,org.jhotdraw.draw.AbstractFigure,READ);
Call(METHOD,org.jhotdraw.draw.AbstractDrawing,<init> --> <init>,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractDrawing,read --> openElement$2,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractDrawing,read --> getElementCount,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractDrawing,read --> readObject$2,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractDrawing,read --> add,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractDrawing,read --> closeElement,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractDrawing,write --> openElement,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.AbstractDrawing,write --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractDrawing,write --> writeObject,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.AbstractDrawing,write --> closeElement,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.AbstractDrawing,clone --> clone,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
EndClass 343
StartClass 344
Class(org.jhotdraw.geom.QuadTree,N,N,Public);
Attribute(outside,java.util.HashMap,Private,N,N,);
Attribute(root,org.jhotdraw.geom.QuadTree$QuadNode,Private,N,N,);
Attribute(maxCapacity,int,Private,N,N,);
Attribute(minSize,int,Private,N,N,);
Attribute(maxOutside,int,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(add,void,Public,N,N);
Method(reorganize,void,Public,N,N);
Method(remove,void,Public,N,N);
Method(findContains,java.util.Collection,Public,N,N);
Method(findIntersects,java.util.Collection,Public,N,N);
Method(findIntersects$2,java.util.Collection,Public,N,N);
Method(findInside,java.util.Collection,Public,N,N);
Method(access$200,int,Public,Y,N);
Method(access$300,int,Public,Y,N);
Parameter(<init>$2,java.awt.geom.Rectangle2D$Double,);
Parameter(add,java.lang.Object,);
Parameter(add,java.awt.geom.Rectangle2D$Double,);
Parameter(remove,java.lang.Object,);
Parameter(findContains,java.awt.geom.Point2D$Double,);
Parameter(findIntersects,java.awt.geom.Rectangle2D,);
Parameter(findIntersects$2,java.awt.geom.Rectangle2D$Double,);
Parameter(findInside,java.awt.geom.Rectangle2D$Double,);
Parameter(access$200,org.jhotdraw.geom.QuadTree,);
Parameter(access$300,org.jhotdraw.geom.QuadTree,);
Composition(org.jhotdraw.geom.QuadTree$QuadNode);
Call(METHOD,org.jhotdraw.geom.QuadTree,add --> reorganize,org.jhotdraw.geom.QuadTree,);
Call(METHOD,org.jhotdraw.geom.QuadTree,findIntersects --> findIntersects$2,org.jhotdraw.geom.QuadTree,);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,<init> --> outside,org.jhotdraw.geom.QuadTree,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,<init> --> maxCapacity,org.jhotdraw.geom.QuadTree,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,<init> --> minSize,org.jhotdraw.geom.QuadTree,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,<init> --> maxOutside,org.jhotdraw.geom.QuadTree,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,<init> --> root,org.jhotdraw.geom.QuadTree,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,<init>$2 --> outside,org.jhotdraw.geom.QuadTree,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,<init>$2 --> maxCapacity,org.jhotdraw.geom.QuadTree,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,<init>$2 --> minSize,org.jhotdraw.geom.QuadTree,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,<init>$2 --> maxOutside,org.jhotdraw.geom.QuadTree,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,<init>$2 --> root,org.jhotdraw.geom.QuadTree,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,add --> root,org.jhotdraw.geom.QuadTree,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,add --> outside,org.jhotdraw.geom.QuadTree,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,add --> maxOutside,org.jhotdraw.geom.QuadTree,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,reorganize --> root,org.jhotdraw.geom.QuadTree,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,reorganize --> outside,org.jhotdraw.geom.QuadTree,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,remove --> outside,org.jhotdraw.geom.QuadTree,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,remove --> root,org.jhotdraw.geom.QuadTree,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,findContains --> root,org.jhotdraw.geom.QuadTree,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,findContains --> outside,org.jhotdraw.geom.QuadTree,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,findIntersects$2 --> root,org.jhotdraw.geom.QuadTree,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,findIntersects$2 --> outside,org.jhotdraw.geom.QuadTree,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,findInside --> root,org.jhotdraw.geom.QuadTree,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,findInside --> outside,org.jhotdraw.geom.QuadTree,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,access$200 --> maxCapacity,org.jhotdraw.geom.QuadTree,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree,access$300 --> minSize,org.jhotdraw.geom.QuadTree,READ);
Call(METHOD,org.jhotdraw.geom.QuadTree,<init> --> <init>,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree,<init>$2 --> <init>,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree,add --> access$000,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree,add --> add,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree,reorganize --> join,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree,reorganize --> access$100,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree,reorganize --> access$002,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree,reorganize --> add,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree,remove --> remove,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree,findContains --> findContains,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree,findIntersects$2 --> findIntersects,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree,findInside --> findInside,org.jhotdraw.geom.QuadTree$QuadNode,);
EndClass 344
StartClass 345
Class(org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,N,N,Public);
Attribute(this$0,org.jhotdraw.draw.AbstractCompositeFigure,Public,N,Y,);
Method(<init>,void,Protected,N,N);
Method(figureRequestRemove,void,Public,N,N);
Method(figureChanged,void,Public,N,N);
Method(areaInvalidated,void,Public,N,N);
Method(undoableEditHappened,void,Public,N,N);
Method(attributeChanged,void,Public,N,N);
Method(figureAdded,void,Public,N,N);
Method(figureRemoved,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.AbstractCompositeFigure,);
Parameter(figureRequestRemove,org.jhotdraw.draw.event.FigureEvent,);
Parameter(figureChanged,org.jhotdraw.draw.event.FigureEvent,);
Parameter(areaInvalidated,org.jhotdraw.draw.event.FigureEvent,);
Parameter(undoableEditHappened,javax.swing.event.UndoableEditEvent,);
Parameter(attributeChanged,org.jhotdraw.draw.event.FigureEvent,);
Parameter(figureAdded,org.jhotdraw.draw.event.FigureEvent,);
Parameter(figureRemoved,org.jhotdraw.draw.event.FigureEvent,);
SuperClass(org.jhotdraw.draw.event.FigureAdapter);
SubClass(org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler);
Generalization(org.jhotdraw.draw.event.FigureAdapter);
Composition(org.jhotdraw.draw.AbstractCompositeFigure);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,<init> --> this$0,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,figureRequestRemove --> this$0,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,figureChanged --> this$0,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,areaInvalidated --> this$0,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,undoableEditHappened --> this$0,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,attributeChanged --> this$0,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,figureAdded --> this$0,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,figureRemoved --> this$0,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,READ);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,<init> --> <init>,org.jhotdraw.draw.event.FigureAdapter,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,figureRequestRemove --> getFigure,org.jhotdraw.draw.event.FigureEvent,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,figureRequestRemove --> remove,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,figureChanged --> isChanging,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,figureChanged --> getDrawingArea,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,figureChanged --> getInvalidatedArea,org.jhotdraw.draw.event.FigureEvent,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,figureChanged --> invalidate,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,figureChanged --> validate,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,figureChanged --> fireFigureChanged$2,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,areaInvalidated --> fireAreaInvalidated$3,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,undoableEditHappened --> fireUndoableEditHappened,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,attributeChanged --> invalidate,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,figureAdded --> invalidate,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,figureRemoved --> invalidate,org.jhotdraw.draw.AbstractCompositeFigure,);
EndClass 345
StartClass 346
Class(org.jhotdraw.draw.AbstractAttributedCompositeFigure,N,Y,Public);
Attribute(attributes,java.util.HashMap,Private,N,N,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Attribute(forbiddenAttributes,java.util.HashSet,Private,N,N,org.jhotdraw.draw.AttributeKey);
Method(<init>,void,Public,N,N);
Method(setAttributeEnabled,void,Public,N,N);
Method(isAttributeEnabled,boolean,Public,N,N);
Method(setAttributes,void,Public,N,N);
Method(getAttributes,java.util.Map,Public,N,N);
Method(set,void,Public,N,N);
Method(setAttributeOnChildren,void,Protected,N,N);
Method(get,java.lang.Object,Public,N,N);
Method(getAttributesRestoreData,java.lang.Object,Public,N,N);
Method(restoreAttributesTo,void,Public,N,N);
Method(drawFigure,void,Public,N,N);
Method(drawChildren,void,Protected,N,N);
Method(getStroke,java.awt.Stroke,Public,N,N);
Method(getStrokeMiterLimitFactor,double,Public,N,N);
Method(getFigureDrawBounds,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(drawFill,void,Protected,N,Y);
Method(drawStroke,void,Protected,N,Y);
Method(drawText,void,Protected,N,N);
Method(clone,org.jhotdraw.draw.AbstractAttributedCompositeFigure,Public,N,N);
Method(writeAttributes,void,Protected,N,N);
Method(readAttributes,void,Protected,N,N);
Method(getAttributeKey,org.jhotdraw.draw.AttributeKey,Protected,N,N);
Method(applyAttributesTo,void,Protected,N,N);
Method(write,void,Public,N,N);
Method(read,void,Public,N,N);
Method(removeAttribute,void,Public,N,N);
Method(hasAttribute,boolean,Public,N,N);
Method(clone$2,org.jhotdraw.draw.AbstractCompositeFigure,Public,N,N);
Method(clone$3,org.jhotdraw.draw.Figure,Public,N,N);
Method(clone$4,org.jhotdraw.draw.AbstractFigure,Public,N,N);
Method(clone$5,org.jhotdraw.beans.AbstractBean,Public,N,N);
Method(clone$6,java.lang.Object,Public,N,N);
Parameter(setAttributeEnabled,org.jhotdraw.draw.AttributeKey,);
Parameter(setAttributeEnabled,boolean,);
Parameter(isAttributeEnabled,org.jhotdraw.draw.AttributeKey,);
Parameter(setAttributes,java.util.Map,org.jhotdraw.draw.AttributeKey;java.lang.Object);
Parameter(set,org.jhotdraw.draw.AttributeKey,);
Parameter(set,java.lang.Object,);
Parameter(setAttributeOnChildren,org.jhotdraw.draw.AttributeKey,);
Parameter(setAttributeOnChildren,java.lang.Object,);
Parameter(get,org.jhotdraw.draw.AttributeKey,);
Parameter(restoreAttributesTo,java.lang.Object,);
Parameter(drawFigure,java.awt.Graphics2D,);
Parameter(drawChildren,java.awt.Graphics2D,);
Parameter(drawFill,java.awt.Graphics2D,);
Parameter(drawStroke,java.awt.Graphics2D,);
Parameter(drawText,java.awt.Graphics2D,);
Parameter(writeAttributes,org.jhotdraw.xml.DOMOutput,);
Parameter(readAttributes,org.jhotdraw.xml.DOMInput,);
Parameter(getAttributeKey,java.lang.String,);
Parameter(applyAttributesTo,org.jhotdraw.draw.Figure,);
Parameter(write,org.jhotdraw.xml.DOMOutput,);
Parameter(read,org.jhotdraw.xml.DOMInput,);
Parameter(removeAttribute,org.jhotdraw.draw.AttributeKey,);
Parameter(hasAttribute,org.jhotdraw.draw.AttributeKey,);
SuperClass(org.jhotdraw.draw.AbstractCompositeFigure);
SuperClass(org.jhotdraw.draw.AbstractFigure);
SuperClass(org.jhotdraw.beans.AbstractBean);
SubClass(org.jhotdraw.draw.QuadTreeDrawing);
SubClass(org.jhotdraw.draw.DefaultDrawing);
SubClass(org.jhotdraw.draw.AbstractDrawing);
Generalization(org.jhotdraw.draw.AbstractCompositeFigure);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,setAttributes --> set,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,set --> setAttributeOnChildren,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,getAttributesRestoreData --> getAttributes,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,restoreAttributesTo --> setAttributes,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,drawFigure --> drawChildren,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,drawFigure --> get,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,drawFigure --> drawFill,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,drawFigure --> drawStroke,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,drawFigure --> drawText,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,getStrokeMiterLimitFactor --> get,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,getFigureDrawBounds --> get,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,writeAttributes --> get,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,readAttributes --> getAttributeKey,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,readAttributes --> set,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,write --> writeAttributes,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,read --> readAttributes,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,removeAttribute --> hasAttribute,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,removeAttribute --> get,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,clone$2 --> clone,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,clone$3 --> clone,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,clone$4 --> clone,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,clone$5 --> clone,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,clone$6 --> clone,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,<init> --> attributes,org.jhotdraw.draw.AbstractAttributedCompositeFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,setAttributeEnabled --> forbiddenAttributes,org.jhotdraw.draw.AbstractAttributedCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,setAttributeEnabled --> forbiddenAttributes,org.jhotdraw.draw.AbstractAttributedCompositeFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,isAttributeEnabled --> forbiddenAttributes,org.jhotdraw.draw.AbstractAttributedCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,getAttributes --> attributes,org.jhotdraw.draw.AbstractAttributedCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,set --> forbiddenAttributes,org.jhotdraw.draw.AbstractAttributedCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,set --> attributes,org.jhotdraw.draw.AbstractAttributedCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,get --> attributes,org.jhotdraw.draw.AbstractAttributedCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,restoreAttributesTo --> attributes,org.jhotdraw.draw.AbstractAttributedCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,clone --> attributes,org.jhotdraw.draw.AbstractAttributedCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,clone --> forbiddenAttributes,org.jhotdraw.draw.AbstractAttributedCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,clone --> attributes,org.jhotdraw.draw.AbstractAttributedCompositeFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,clone --> forbiddenAttributes,org.jhotdraw.draw.AbstractAttributedCompositeFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,writeAttributes --> attributes,org.jhotdraw.draw.AbstractAttributedCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,writeAttributes --> forbiddenAttributes,org.jhotdraw.draw.AbstractAttributedCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,readAttributes --> forbiddenAttributes,org.jhotdraw.draw.AbstractAttributedCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,applyAttributesTo --> attributes,org.jhotdraw.draw.AbstractAttributedCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,removeAttribute --> attributes,org.jhotdraw.draw.AbstractAttributedCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,hasAttribute --> attributes,org.jhotdraw.draw.AbstractAttributedCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,drawFigure --> FILL_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,drawFigure --> STROKE_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,drawFigure --> STROKE_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,drawFigure --> TEXT_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,drawFigure --> TEXT_SHADOW_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,drawFigure --> TEXT_SHADOW_OFFSET,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,drawFigure --> width,org.jhotdraw.geom.Dimension2DDouble,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,drawFigure --> height,org.jhotdraw.geom.Dimension2DDouble,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,getStrokeMiterLimitFactor --> STROKE_MITER_LIMIT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,getFigureDrawBounds --> STROKE_JOIN,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,getFigureDrawBounds --> STROKE_MITER_LIMIT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractAttributedCompositeFigure,getAttributeKey --> supportedAttributeMap,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,<init> --> <init>,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,set --> fireAttributeChanged,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,setAttributeOnChildren --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,setAttributeOnChildren --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,get --> get$2,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,getAttributesRestoreData --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,getAttributesRestoreData --> getAttributesRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,restoreAttributesTo --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,restoreAttributesTo --> restoreAttributesTo,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,drawFigure --> getStroke,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,drawChildren --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,drawChildren --> draw,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,getStroke --> getStroke,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,getFigureDrawBounds --> getStrokeTotalWidth,org.jhotdraw.draw.AttributeKeys,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,getFigureDrawBounds --> getBounds,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,getFigureDrawBounds --> grow,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,clone --> clone,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,writeAttributes --> getPrototype,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,writeAttributes --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,writeAttributes --> openElement,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,writeAttributes --> getKey,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,writeAttributes --> writeObject,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,writeAttributes --> closeElement,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,readAttributes --> getElementCount$2,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,readAttributes --> openElement$2,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,readAttributes --> getElementCount,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,readAttributes --> openElement,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,readAttributes --> getTagName,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,readAttributes --> readObject,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,readAttributes --> isAssignable,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,readAttributes --> closeElement,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,applyAttributesTo --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,write --> write,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,read --> read,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,removeAttribute --> getDefaultValue,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.AbstractAttributedCompositeFigure,removeAttribute --> fireAttributeChanged,org.jhotdraw.draw.AbstractFigure,);
EndClass 346
StartClass 347
Class(org.jhotdraw.draw.AbstractCompositeFigure,N,Y,Public);
Attribute(layouter,org.jhotdraw.draw.layouter.Layouter,Protected,N,N,);
Attribute(children,java.util.ArrayList,Protected,N,N,org.jhotdraw.draw.Figure);
Attribute(cachedDrawingArea,java.awt.geom.Rectangle2D$Double,Protected,N,N,);
Attribute(cachedBounds,java.awt.geom.Rectangle2D$Double,Protected,N,N,);
Attribute(eventHandler,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,Protected,N,N,);
Method(<init>,void,Public,N,N);
Method(createHandles,java.util.Collection,Public,N,N);
Method(createEventHandler,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,Protected,N,N);
Method(add,boolean,Public,N,N);
Method(add$2,void,Public,N,N);
Method(addAll,void,Public,N,N);
Method(addAll$2,void,Public,N,N);
Method(basicAdd,void,Public,N,N);
Method(basicAddAll,void,Public,N,N);
Method(addNotify,void,Public,N,N);
Method(removeNotify,void,Public,N,N);
Method(remove,boolean,Public,N,N);
Method(removeChild,org.jhotdraw.draw.Figure,Public,N,N);
Method(removeAll,void,Public,N,N);
Method(removeAllChildren,void,Public,N,N);
Method(basicRemoveAllChildren,void,Public,N,N);
Method(basicRemoveAll,void,Public,N,N);
Method(sendToBack,void,Public,N,N);
Method(bringToFront,void,Public,N,N);
Method(transform,void,Public,N,N);
Method(setBounds,void,Public,N,N);
Method(getChildrenFrontToBack,java.util.List,Public,N,N);
Method(set,void,Public,N,N);
Method(get,java.lang.Object,Public,N,N);
Method(getAttributes,java.util.Map,Public,N,N);
Method(getAttributesRestoreData,java.lang.Object,Public,N,N);
Method(restoreAttributesTo,void,Public,N,N);
Method(contains,boolean,Public,N,N);
Method(contains$2,boolean,Public,N,N);
Method(findFigureInside,org.jhotdraw.draw.Figure,Public,N,N);
Method(findChild,org.jhotdraw.draw.Figure,Public,N,N);
Method(findChildIndex,int,Public,N,N);
Method(getLayouter,org.jhotdraw.draw.layouter.Layouter,Public,N,N);
Method(layout,void,Public,N,N);
Method(setLayouter,void,Public,N,N);
Method(getPreferredSize,org.jhotdraw.geom.Dimension2DDouble,Public,N,N);
Method(draw,void,Public,N,N);
Method(getDecomposition,java.util.Collection,Public,N,N);
Method(read,void,Public,N,N);
Method(write,void,Public,N,N);
Method(restoreTransformTo,void,Public,N,N);
Method(getTransformRestoreData,java.lang.Object,Public,N,N);
Method(basicAdd$2,void,Public,N,N);
Method(basicRemoveChild,org.jhotdraw.draw.Figure,Public,N,N);
Method(getChildren,java.util.List,Public,N,N);
Method(getChildCount,int,Public,N,N);
Method(getChild,org.jhotdraw.draw.Figure,Public,N,N);
Method(clone,org.jhotdraw.draw.AbstractCompositeFigure,Public,N,N);
Method(validate,void,Protected,N,N);
Method(invalidate,void,Protected,N,N);
Method(willChange,void,Public,N,N);
Method(changed,void,Public,N,N);
Method(basicRemove,int,Public,N,N);
Method(indexOf,int,Public,N,N);
Method(getDrawingArea,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(getBounds,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(fireFigureAdded,void,Protected,N,N);
Method(fireFigureRemoved,void,Protected,N,N);
Method(removeCompositeFigureListener,void,Public,N,N);
Method(addCompositeFigureListener,void,Public,N,N);
Method(clone$2,org.jhotdraw.draw.AbstractFigure,Public,N,N);
Method(clone$3,org.jhotdraw.draw.Figure,Public,N,N);
Method(clone$4,org.jhotdraw.beans.AbstractBean,Public,N,N);
Method(clone$5,java.lang.Object,Public,N,N);
Parameter(createHandles,int,org.jhotdraw.draw.handle.Handle);
Parameter(add,org.jhotdraw.draw.Figure,);
Parameter(add$2,int,);
Parameter(add$2,org.jhotdraw.draw.Figure,);
Parameter(addAll,java.util.Collection,);
Parameter(addAll$2,int,);
Parameter(addAll$2,java.util.Collection,);
Parameter(basicAdd,org.jhotdraw.draw.Figure,);
Parameter(basicAddAll,int,);
Parameter(basicAddAll,java.util.Collection,);
Parameter(addNotify,org.jhotdraw.draw.Drawing,);
Parameter(removeNotify,org.jhotdraw.draw.Drawing,);
Parameter(remove,org.jhotdraw.draw.Figure,);
Parameter(removeChild,int,);
Parameter(removeAll,java.util.Collection,);
Parameter(basicRemoveAll,java.util.Collection,);
Parameter(sendToBack,org.jhotdraw.draw.Figure,);
Parameter(bringToFront,org.jhotdraw.draw.Figure,);
Parameter(transform,java.awt.geom.AffineTransform,);
Parameter(setBounds,java.awt.geom.Point2D$Double,);
Parameter(setBounds,java.awt.geom.Point2D$Double,);
Parameter(set,org.jhotdraw.draw.AttributeKey,);
Parameter(set,java.lang.Object,);
Parameter(get,org.jhotdraw.draw.AttributeKey,);
Parameter(restoreAttributesTo,java.lang.Object,);
Parameter(contains,org.jhotdraw.draw.Figure,);
Parameter(contains$2,java.awt.geom.Point2D$Double,);
Parameter(findFigureInside,java.awt.geom.Point2D$Double,);
Parameter(findChild,java.awt.geom.Point2D$Double,);
Parameter(findChildIndex,java.awt.geom.Point2D$Double,);
Parameter(setLayouter,org.jhotdraw.draw.layouter.Layouter,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(read,org.jhotdraw.xml.DOMInput,);
Parameter(write,org.jhotdraw.xml.DOMOutput,);
Parameter(restoreTransformTo,java.lang.Object,);
Parameter(basicAdd$2,int,);
Parameter(basicAdd$2,org.jhotdraw.draw.Figure,);
Parameter(basicRemoveChild,int,);
Parameter(getChild,int,);
Parameter(basicRemove,org.jhotdraw.draw.Figure,);
Parameter(indexOf,org.jhotdraw.draw.Figure,);
Parameter(fireFigureAdded,org.jhotdraw.draw.Figure,);
Parameter(fireFigureAdded,int,);
Parameter(fireFigureRemoved,org.jhotdraw.draw.Figure,);
Parameter(fireFigureRemoved,int,);
Parameter(removeCompositeFigureListener,org.jhotdraw.draw.event.CompositeFigureListener,);
Parameter(addCompositeFigureListener,org.jhotdraw.draw.event.CompositeFigureListener,);
SuperClass(org.jhotdraw.draw.AbstractFigure);
SuperClass(org.jhotdraw.beans.AbstractBean);
SubClass(org.jhotdraw.draw.QuadTreeDrawing);
SubClass(org.jhotdraw.draw.DefaultDrawing);
SubClass(org.jhotdraw.draw.AbstractDrawing);
SubClass(org.jhotdraw.draw.AbstractAttributedCompositeFigure);
SubClass(org.jhotdraw.draw.GroupFigure);
Generalization(org.jhotdraw.draw.AbstractFigure);
Realization(org.jhotdraw.draw.CompositeFigure);
Realization(org.jhotdraw.xml.DOMStorable);
Composition(org.jhotdraw.draw.layouter.Layouter);
Composition(org.jhotdraw.draw.AbstractCompositeFigure$EventHandler);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,<init> --> createEventHandler,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,add --> getChildCount,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,add --> add$2,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,add$2 --> basicAdd$2,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,add$2 --> fireFigureAdded,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,add$2 --> invalidate,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,addAll --> getChildCount,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,addAll --> addAll$2,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,addAll$2 --> basicAdd$2,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,addAll$2 --> fireFigureAdded,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,addAll$2 --> invalidate,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,basicAdd --> getChildCount,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,basicAdd --> basicAdd$2,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,basicAddAll --> basicAdd$2,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,addNotify --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,removeNotify --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,remove --> basicRemoveChild,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,remove --> fireFigureRemoved,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,removeChild --> basicRemoveChild,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,removeAll --> willChange,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,removeAll --> remove,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,removeAll --> changed,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,removeAllChildren --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,removeAllChildren --> removeAll,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,basicRemoveAllChildren --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,basicRemoveAllChildren --> basicRemove,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,basicRemoveAll --> basicRemove,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,sendToBack --> basicRemove,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,sendToBack --> basicAdd$2,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,bringToFront --> basicRemove,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,bringToFront --> basicAdd,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,transform --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,transform --> invalidate,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,setBounds --> getBounds,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,setBounds --> transform,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,getChildrenFrontToBack --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,set --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,set --> invalidate,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,getAttributesRestoreData --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,restoreAttributesTo --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,contains$2 --> getDrawingArea,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,contains$2 --> get,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,contains$2 --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,findFigureInside --> getDrawingArea,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,findFigureInside --> getChildrenFrontToBack,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,findChild --> getBounds,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,findChild --> getChildrenFrontToBack,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,findChildIndex --> findChild,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,layout --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,layout --> getLayouter,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,layout --> getBounds,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,layout --> setBounds,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,layout --> invalidate,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,draw --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,getDecomposition --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,read --> basicAdd,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,write --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,restoreTransformTo --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,restoreTransformTo --> invalidate,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,getTransformRestoreData --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,basicRemoveChild --> invalidate,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,clone --> createEventHandler,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,validate --> layout,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,basicRemove --> basicRemoveChild,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,getDrawingArea --> getChildCount,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,getBounds --> getChildCount,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,clone$2 --> clone,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,clone$3 --> clone,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,clone$4 --> clone,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,clone$5 --> clone,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,<init> --> children,org.jhotdraw.draw.AbstractCompositeFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,<init> --> eventHandler,org.jhotdraw.draw.AbstractCompositeFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,remove --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,getChildrenFrontToBack --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,contains --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,findChildIndex --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,getLayouter --> layouter,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,setLayouter --> layouter,org.jhotdraw.draw.AbstractCompositeFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,getPreferredSize --> layouter,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,basicAdd$2 --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,basicAdd$2 --> eventHandler,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,basicRemoveChild --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,basicRemoveChild --> eventHandler,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,getChildren --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,getChildCount --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,getChild --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,clone --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,clone --> eventHandler,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,clone --> children,org.jhotdraw.draw.AbstractCompositeFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,clone --> eventHandler,org.jhotdraw.draw.AbstractCompositeFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,invalidate --> cachedBounds,org.jhotdraw.draw.AbstractCompositeFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,invalidate --> cachedDrawingArea,org.jhotdraw.draw.AbstractCompositeFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,willChange --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,changed --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,basicRemove --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,indexOf --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,getDrawingArea --> cachedDrawingArea,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,getDrawingArea --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,getDrawingArea --> cachedDrawingArea,org.jhotdraw.draw.AbstractCompositeFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,getBounds --> cachedBounds,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,getBounds --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,getBounds --> cachedBounds,org.jhotdraw.draw.AbstractCompositeFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,contains$2 --> TRANSFORM,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,layout --> changingDepth,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,layout --> changingDepth,org.jhotdraw.draw.AbstractFigure,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,fireFigureAdded --> listenerList,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,fireFigureRemoved --> listenerList,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,removeCompositeFigureListener --> listenerList,org.jhotdraw.draw.AbstractFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractCompositeFigure,addCompositeFigureListener --> listenerList,org.jhotdraw.draw.AbstractFigure,READ);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,<init> --> <init>,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,createHandles --> <init>$2,org.jhotdraw.draw.handle.BoundsOutlineHandle,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,createHandles --> addScaleMoveTransformHandles,org.jhotdraw.draw.handle.TransformHandleKit,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,createEventHandler --> <init>,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,add$2 --> getDrawing,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,add$2 --> addNotify,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,addAll$2 --> getDrawing,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,addAll$2 --> addNotify,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,addNotify --> addNotify,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,addNotify --> addNotify,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,removeNotify --> removeNotify,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,removeNotify --> removeNotify,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,remove --> getDrawing,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,remove --> removeNotify,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,removeChild --> getDrawing,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,removeChild --> removeNotify,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,sendToBack --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,sendToBack --> fireAreaInvalidated$2,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,bringToFront --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,bringToFront --> fireAreaInvalidated$2,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,transform --> transform,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,getChildrenFrontToBack --> <init>,org.jhotdraw.util.ReversedList,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,set --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,getAttributesRestoreData --> getAttributesRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,restoreAttributesTo --> restoreAttributesTo,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,contains$2 --> isVisible,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,contains$2 --> contains,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,findFigureInside --> isVisible,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,findFigureInside --> findFigureInside,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,findChild --> isVisible,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,findChild --> contains,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,layout --> layout,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,layout --> layout,org.jhotdraw.draw.layouter.Layouter,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,getPreferredSize --> getStartPoint,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,getPreferredSize --> getEndPoint,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,getPreferredSize --> calculateLayout,org.jhotdraw.draw.layouter.Layouter,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,getPreferredSize --> <init>$3,org.jhotdraw.geom.Dimension2DDouble,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,getPreferredSize --> getPreferredSize,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,draw --> isVisible,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,draw --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,draw --> draw,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,read --> openElement$2,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,read --> getElementCount,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,read --> readObject$2,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,read --> closeElement,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,write --> openElement,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,write --> writeObject,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,write --> closeElement,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,restoreTransformTo --> restoreTransformTo,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,getTransformRestoreData --> getTransformRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,basicAdd$2 --> addFigureListener,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,basicRemoveChild --> removeFigureListener,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,clone --> clone,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,clone --> clone,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,clone --> addFigureListener,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,validate --> validate,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,willChange --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,willChange --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,changed --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,changed --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,getDrawingArea --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,getBounds --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,fireFigureAdded --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,fireFigureAdded --> <init>,org.jhotdraw.draw.event.CompositeFigureEvent,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,fireFigureAdded --> figureAdded,org.jhotdraw.draw.event.CompositeFigureListener,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,fireFigureRemoved --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,fireFigureRemoved --> <init>,org.jhotdraw.draw.event.CompositeFigureEvent,);
Call(METHOD,org.jhotdraw.draw.AbstractCompositeFigure,fireFigureRemoved --> figureRemoved,org.jhotdraw.draw.event.CompositeFigureListener,);
EndClass 347
StartClass 348
Class(org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler,N,N,Public);
Attribute(this$0,org.jhotdraw.draw.QuadTreeDrawing,Public,N,Y,);
Method(<init>,void,Protected,N,N);
Method(figureChanged,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.QuadTreeDrawing,);
Parameter(figureChanged,org.jhotdraw.draw.event.FigureEvent,);
SuperClass(org.jhotdraw.draw.AbstractCompositeFigure$EventHandler);
SuperClass(org.jhotdraw.draw.event.FigureAdapter);
Generalization(org.jhotdraw.draw.AbstractCompositeFigure$EventHandler);
Composition(org.jhotdraw.draw.QuadTreeDrawing);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler,<init> --> this$0,org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler,figureChanged --> this$0,org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler,READ);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler,<init> --> <init>,org.jhotdraw.draw.AbstractCompositeFigure$EventHandler,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler,figureChanged --> isChanging,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler,figureChanged --> access$000,org.jhotdraw.draw.QuadTreeDrawing,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler,figureChanged --> getFigure,org.jhotdraw.draw.event.FigureEvent,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler,figureChanged --> remove,org.jhotdraw.geom.QuadTree,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler,figureChanged --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler,figureChanged --> add,org.jhotdraw.geom.QuadTree,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler,figureChanged --> access$102,org.jhotdraw.draw.QuadTreeDrawing,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler,figureChanged --> invalidate,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler,figureChanged --> getInvalidatedArea,org.jhotdraw.draw.event.FigureEvent,);
Call(METHOD,org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler,figureChanged --> fireAreaInvalidated$2,org.jhotdraw.draw.AbstractFigure,);
EndClass 348
StartClass 349
Class(org.jhotdraw.draw.FigureLayerComparator,N,N,Public);
Attribute(INSTANCE,org.jhotdraw.draw.FigureLayerComparator,Public,Y,Y,);
Method(<init>,void,Private,N,N);
Method(compare,int,Public,N,N);
Method(compare$2,int,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(compare,org.jhotdraw.draw.Figure,);
Parameter(compare,org.jhotdraw.draw.Figure,);
Parameter(compare$2,java.lang.Object,);
Parameter(compare$2,java.lang.Object,);
Composition(org.jhotdraw.draw.FigureLayerComparator);
Call(METHOD,org.jhotdraw.draw.FigureLayerComparator,compare$2 --> compare,org.jhotdraw.draw.FigureLayerComparator,);
Call(METHOD,org.jhotdraw.draw.FigureLayerComparator,<clinit> --> <init>,org.jhotdraw.draw.FigureLayerComparator,);
Call(ATTRIBUTE,org.jhotdraw.draw.FigureLayerComparator,<clinit> --> INSTANCE,org.jhotdraw.draw.FigureLayerComparator,WRITE);
Call(METHOD,org.jhotdraw.draw.FigureLayerComparator,compare --> getLayer,org.jhotdraw.draw.Figure,);
EndClass 349
StartClass 350
Class(org.jhotdraw.xml.DefaultDOMFactory,N,N,Public);
Attribute(classToNameMap,java.util.HashMap,Private,Y,Y,java.lang.Class;java.lang.String);
Attribute(nameToPrototypeMap,java.util.HashMap,Private,Y,Y,java.lang.String;java.lang.Object);
Attribute(enumClassToNameMap,java.util.HashMap,Private,Y,Y,java.lang.Class;java.lang.String);
Attribute(nameToEnumClassMap,java.util.HashMap,Private,Y,Y,java.lang.String;java.lang.Class);
Attribute(enumToValueMap,java.util.HashMap,Private,Y,Y,java.lang.Enum;java.lang.String);
Attribute(valueToEnumMap,java.util.HashMap,Private,Y,Y,java.lang.String;java.util.Set<Ljava.lang.Enum;>);
Method(<init>,void,Public,N,N);
Method(addStorableClass,void,Public,N,N);
Method(addStorable,void,Public,N,N);
Method(addEnumClass,void,Public,N,N);
Method(addEnum,void,Public,N,N);
Method(create,java.lang.Object,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(getEnumName,java.lang.String,Protected,N,N);
Method(getEnumValue,java.lang.String,Protected,N,N);
Method(createEnum,java.lang.Enum,Protected,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(addStorableClass,java.lang.String,);
Parameter(addStorableClass,java.lang.Class,);
Parameter(addStorable,java.lang.String,);
Parameter(addStorable,org.jhotdraw.xml.DOMStorable,);
Parameter(addEnumClass,java.lang.String,);
Parameter(addEnumClass,java.lang.Class,);
Parameter(addEnum,java.lang.String,);
Parameter(addEnum,java.lang.Enum,);
Parameter(create,java.lang.String,);
Parameter(getName,java.lang.Object,);
Parameter(getEnumName,java.lang.Enum,);
Parameter(getEnumValue,java.lang.Enum,);
Parameter(createEnum,java.lang.String,);
Parameter(createEnum,java.lang.String,);
SuperClass(org.jhotdraw.xml.JavaPrimitivesDOMFactory);
SubClass(org.jhotdraw.samples.draw.DrawFigureFactory);
Generalization(org.jhotdraw.xml.JavaPrimitivesDOMFactory);
Call(ATTRIBUTE,org.jhotdraw.xml.DefaultDOMFactory,addStorableClass --> nameToPrototypeMap,org.jhotdraw.xml.DefaultDOMFactory,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.DefaultDOMFactory,addStorableClass --> classToNameMap,org.jhotdraw.xml.DefaultDOMFactory,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.DefaultDOMFactory,addStorable --> nameToPrototypeMap,org.jhotdraw.xml.DefaultDOMFactory,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.DefaultDOMFactory,addStorable --> classToNameMap,org.jhotdraw.xml.DefaultDOMFactory,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.DefaultDOMFactory,addEnumClass --> enumClassToNameMap,org.jhotdraw.xml.DefaultDOMFactory,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.DefaultDOMFactory,addEnumClass --> nameToEnumClassMap,org.jhotdraw.xml.DefaultDOMFactory,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.DefaultDOMFactory,addEnum --> enumToValueMap,org.jhotdraw.xml.DefaultDOMFactory,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.DefaultDOMFactory,addEnum --> valueToEnumMap,org.jhotdraw.xml.DefaultDOMFactory,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.DefaultDOMFactory,create --> nameToPrototypeMap,org.jhotdraw.xml.DefaultDOMFactory,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.DefaultDOMFactory,getName --> classToNameMap,org.jhotdraw.xml.DefaultDOMFactory,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.DefaultDOMFactory,getEnumName --> enumClassToNameMap,org.jhotdraw.xml.DefaultDOMFactory,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.DefaultDOMFactory,getEnumValue --> enumToValueMap,org.jhotdraw.xml.DefaultDOMFactory,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.DefaultDOMFactory,createEnum --> nameToEnumClassMap,org.jhotdraw.xml.DefaultDOMFactory,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.DefaultDOMFactory,createEnum --> valueToEnumMap,org.jhotdraw.xml.DefaultDOMFactory,READ);
Call(ATTRIBUTE,org.jhotdraw.xml.DefaultDOMFactory,<clinit> --> classToNameMap,org.jhotdraw.xml.DefaultDOMFactory,WRITE);
Call(ATTRIBUTE,org.jhotdraw.xml.DefaultDOMFactory,<clinit> --> nameToPrototypeMap,org.jhotdraw.xml.DefaultDOMFactory,WRITE);
Call(ATTRIBUTE,org.jhotdraw.xml.DefaultDOMFactory,<clinit> --> enumClassToNameMap,org.jhotdraw.xml.DefaultDOMFactory,WRITE);
Call(ATTRIBUTE,org.jhotdraw.xml.DefaultDOMFactory,<clinit> --> nameToEnumClassMap,org.jhotdraw.xml.DefaultDOMFactory,WRITE);
Call(ATTRIBUTE,org.jhotdraw.xml.DefaultDOMFactory,<clinit> --> enumToValueMap,org.jhotdraw.xml.DefaultDOMFactory,WRITE);
Call(ATTRIBUTE,org.jhotdraw.xml.DefaultDOMFactory,<clinit> --> valueToEnumMap,org.jhotdraw.xml.DefaultDOMFactory,WRITE);
Call(METHOD,org.jhotdraw.xml.DefaultDOMFactory,<init> --> <init>,org.jhotdraw.xml.JavaPrimitivesDOMFactory,);
Call(METHOD,org.jhotdraw.xml.DefaultDOMFactory,getName --> getName,org.jhotdraw.xml.JavaPrimitivesDOMFactory,);
EndClass 350
StartClass 351
Class(org.jhotdraw.draw.GroupFigure,N,N,Public);
Method(<init>,void,Public,N,N);
Method(chop,java.awt.geom.Point2D$Double,Public,N,N);
Method(isTransformable,boolean,Public,N,N);
Parameter(chop,java.awt.geom.Point2D$Double,);
SuperClass(org.jhotdraw.draw.AbstractCompositeFigure);
SuperClass(org.jhotdraw.draw.AbstractFigure);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.draw.AbstractCompositeFigure);
Call(ATTRIBUTE,org.jhotdraw.draw.GroupFigure,isTransformable --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(METHOD,org.jhotdraw.draw.GroupFigure,<init> --> <init>,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.GroupFigure,<init> --> setConnectable,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.GroupFigure,chop --> getBounds,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.GroupFigure,chop --> pointToAngle$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.GroupFigure,chop --> angleToPoint$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.GroupFigure,isTransformable --> isTransformable,org.jhotdraw.draw.Figure,);
EndClass 351
StartClass 352
Class(org.jhotdraw.draw.DefaultDrawing,N,N,Public);
Attribute(needsSorting,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(basicAdd,void,Public,N,N);
Method(draw,void,Public,N,N);
Method(draw$2,void,Public,N,N);
Method(sort,java.util.List,Public,N,N);
Method(findFigure,org.jhotdraw.draw.Figure,Public,N,N);
Method(findFigureExcept,org.jhotdraw.draw.Figure,Public,N,N);
Method(findFigureBehind,org.jhotdraw.draw.Figure,Public,N,N);
Method(findFigureBehind$2,org.jhotdraw.draw.Figure,Public,N,N);
Method(findFigureExcept$2,org.jhotdraw.draw.Figure,Public,N,N);
Method(findFigures,java.util.List,Public,N,N);
Method(findFiguresWithin,java.util.List,Public,N,N);
Method(findFigureInside,org.jhotdraw.draw.Figure,Public,N,N);
Method(getFiguresFrontToBack,java.util.List,Public,N,N);
Method(invalidateSortOrder,void,Private,N,N);
Method(ensureSorted,void,Private,N,N);
Method(setAttributeOnChildren,void,Protected,N,N);
Method(indexOf,int,Public,N,N);
Method(drawFill,void,Protected,N,N);
Method(drawStroke,void,Protected,N,N);
Method(drawCanvas,void,Public,N,N);
Parameter(basicAdd,int,);
Parameter(basicAdd,org.jhotdraw.draw.Figure,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(draw$2,java.awt.Graphics2D,org.jhotdraw.draw.Figure);
Parameter(draw$2,java.util.Collection,);
Parameter(sort,java.util.Collection,org.jhotdraw.draw.Figure);
Parameter(findFigure,java.awt.geom.Point2D$Double,);
Parameter(findFigureExcept,java.awt.geom.Point2D$Double,);
Parameter(findFigureExcept,org.jhotdraw.draw.Figure,);
Parameter(findFigureBehind,java.awt.geom.Point2D$Double,);
Parameter(findFigureBehind,org.jhotdraw.draw.Figure,);
Parameter(findFigureBehind$2,java.awt.geom.Point2D$Double,);
Parameter(findFigureBehind$2,java.util.Collection,);
Parameter(findFigureExcept$2,java.awt.geom.Point2D$Double,);
Parameter(findFigureExcept$2,java.util.Collection,);
Parameter(findFigures,java.awt.geom.Rectangle2D$Double,org.jhotdraw.draw.Figure);
Parameter(findFiguresWithin,java.awt.geom.Rectangle2D$Double,org.jhotdraw.draw.Figure);
Parameter(findFigureInside,java.awt.geom.Point2D$Double,);
Parameter(setAttributeOnChildren,org.jhotdraw.draw.AttributeKey,);
Parameter(setAttributeOnChildren,java.lang.Object,);
Parameter(indexOf,org.jhotdraw.draw.Figure,);
Parameter(drawFill,java.awt.Graphics2D,);
Parameter(drawStroke,java.awt.Graphics2D,);
Parameter(drawCanvas,java.awt.Graphics2D,);
SuperClass(org.jhotdraw.draw.AbstractDrawing);
SuperClass(org.jhotdraw.draw.AbstractAttributedCompositeFigure);
SuperClass(org.jhotdraw.draw.AbstractCompositeFigure);
SuperClass(org.jhotdraw.draw.AbstractFigure);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.draw.AbstractDrawing);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,basicAdd --> invalidateSortOrder,org.jhotdraw.draw.DefaultDrawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,draw --> ensureSorted,org.jhotdraw.draw.DefaultDrawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,draw --> draw$2,org.jhotdraw.draw.DefaultDrawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFigure --> getFiguresFrontToBack,org.jhotdraw.draw.DefaultDrawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFigureExcept --> getFiguresFrontToBack,org.jhotdraw.draw.DefaultDrawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFigureBehind --> getFiguresFrontToBack,org.jhotdraw.draw.DefaultDrawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFigureBehind$2 --> getFiguresFrontToBack,org.jhotdraw.draw.DefaultDrawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFigureExcept$2 --> getFiguresFrontToBack,org.jhotdraw.draw.DefaultDrawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFigureInside --> findFigure,org.jhotdraw.draw.DefaultDrawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,getFiguresFrontToBack --> ensureSorted,org.jhotdraw.draw.DefaultDrawing,);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawing,<init> --> needsSorting,org.jhotdraw.draw.DefaultDrawing,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawing,invalidateSortOrder --> needsSorting,org.jhotdraw.draw.DefaultDrawing,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawing,ensureSorted --> needsSorting,org.jhotdraw.draw.DefaultDrawing,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawing,ensureSorted --> needsSorting,org.jhotdraw.draw.DefaultDrawing,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawing,findFiguresWithin --> TRANSFORM,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawing,ensureSorted --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawing,ensureSorted --> INSTANCE,org.jhotdraw.draw.FigureLayerComparator,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawing,indexOf --> children,org.jhotdraw.draw.AbstractCompositeFigure,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawing,drawCanvas --> CANVAS_WIDTH,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawing,drawCanvas --> CANVAS_HEIGHT,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawing,drawCanvas --> CANVAS_FILL_COLOR,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawing,drawCanvas --> CANVAS_FILL_OPACITY,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,<init> --> <init>,org.jhotdraw.draw.AbstractDrawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,basicAdd --> basicAdd$2,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,draw --> getLock,org.jhotdraw.draw.AbstractDrawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,draw --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,draw --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,draw$2 --> isVisible,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,draw$2 --> getDrawingArea,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,draw$2 --> draw,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,sort --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFigure --> isVisible,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFigure --> contains,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFigureExcept --> isVisible,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFigureExcept --> contains,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFigureBehind --> isVisible,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFigureBehind --> contains,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFigureBehind$2 --> isVisible,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFigureBehind$2 --> contains,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFigureExcept$2 --> isVisible,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFigureExcept$2 --> contains,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFigures --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFigures --> isVisible,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFigures --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFiguresWithin --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFiguresWithin --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFiguresWithin --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFiguresWithin --> isVisible,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFiguresWithin --> contains,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,findFigureInside --> findFigureInside,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,getFiguresFrontToBack --> getChildren,org.jhotdraw.draw.AbstractCompositeFigure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,getFiguresFrontToBack --> <init>,org.jhotdraw.util.ReversedList,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawing,drawCanvas --> get,org.jhotdraw.draw.AbstractAttributedCompositeFigure,);
EndClass 352
StartClass 353
Class(org.jhotdraw.draw.DrawingEditorProxy,N,N,Public);
Attribute(target,org.jhotdraw.draw.DrawingEditor,Private,N,N,);
Attribute(forwarder,org.jhotdraw.draw.DrawingEditorProxy$Forwarder,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setTarget,void,Public,N,N);
Method(getTarget,org.jhotdraw.draw.DrawingEditor,Public,N,N);
Method(add,void,Public,N,N);
Method(remove,void,Public,N,N);
Method(getDrawingViews,java.util.Collection,Public,N,N);
Method(getActiveView,org.jhotdraw.draw.DrawingView,Public,N,N);
Method(setActiveView,void,Public,N,N);
Method(getFocusedView,org.jhotdraw.draw.DrawingView,Public,N,N);
Method(setTool,void,Public,N,N);
Method(getTool,org.jhotdraw.draw.tool.Tool,Public,N,N);
Method(setCursor,void,Public,N,N);
Method(findView,org.jhotdraw.draw.DrawingView,Public,N,N);
Method(setDefaultAttribute,void,Public,N,N);
Method(getDefaultAttribute,java.lang.Object,Public,N,N);
Method(applyDefaultAttributesTo,void,Public,N,N);
Method(getDefaultAttributes,java.util.Map,Public,N,N);
Method(setEnabled,void,Public,N,N);
Method(isEnabled,boolean,Public,N,N);
Method(setHandleAttribute,void,Public,N,N);
Method(getHandleAttribute,java.lang.Object,Public,N,N);
Method(setInputMap,void,Public,N,N);
Method(getInputMap,javax.swing.InputMap,Public,N,N);
Method(setActionMap,void,Public,N,N);
Method(getActionMap,javax.swing.ActionMap,Public,N,N);
Method(access$000,void,Public,Y,N);
Parameter(setTarget,org.jhotdraw.draw.DrawingEditor,);
Parameter(add,org.jhotdraw.draw.DrawingView,);
Parameter(remove,org.jhotdraw.draw.DrawingView,);
Parameter(setActiveView,org.jhotdraw.draw.DrawingView,);
Parameter(setTool,org.jhotdraw.draw.tool.Tool,);
Parameter(setCursor,java.awt.Cursor,);
Parameter(findView,java.awt.Container,);
Parameter(setDefaultAttribute,org.jhotdraw.draw.AttributeKey,);
Parameter(setDefaultAttribute,java.lang.Object,);
Parameter(getDefaultAttribute,org.jhotdraw.draw.AttributeKey,);
Parameter(applyDefaultAttributesTo,org.jhotdraw.draw.Figure,);
Parameter(setEnabled,boolean,);
Parameter(setHandleAttribute,org.jhotdraw.draw.AttributeKey,);
Parameter(setHandleAttribute,java.lang.Object,);
Parameter(getHandleAttribute,org.jhotdraw.draw.AttributeKey,);
Parameter(setInputMap,javax.swing.InputMap,);
Parameter(setActionMap,javax.swing.ActionMap,);
Parameter(access$000,org.jhotdraw.draw.DrawingEditorProxy,);
Parameter(access$000,java.lang.String,);
Parameter(access$000,java.lang.Object,);
Parameter(access$000,java.lang.Object,);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.beans.AbstractBean);
Realization(org.jhotdraw.draw.DrawingEditor);
Composition(org.jhotdraw.draw.DrawingEditor);
Composition(org.jhotdraw.draw.DrawingEditorProxy$Forwarder);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,<init> --> forwarder,org.jhotdraw.draw.DrawingEditorProxy,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,setTarget --> target,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,setTarget --> forwarder,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,setTarget --> target,org.jhotdraw.draw.DrawingEditorProxy,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,getTarget --> target,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,add --> target,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,remove --> target,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,getDrawingViews --> target,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,getActiveView --> target,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,setActiveView --> target,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,getFocusedView --> target,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,setTool --> target,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,getTool --> target,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,setCursor --> target,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,findView --> target,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,setDefaultAttribute --> target,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,getDefaultAttribute --> target,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,applyDefaultAttributesTo --> target,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,getDefaultAttributes --> target,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,setEnabled --> target,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,isEnabled --> target,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,setHandleAttribute --> target,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,getHandleAttribute --> target,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,setInputMap --> target,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,getInputMap --> target,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,setActionMap --> target,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy,getActionMap --> target,org.jhotdraw.draw.DrawingEditorProxy,READ);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,<init> --> <init>,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,<init> --> <init>$2,org.jhotdraw.draw.DrawingEditorProxy$Forwarder,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,setTarget --> removePropertyChangeListener,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,setTarget --> addPropertyChangeListener,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,add --> add,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,remove --> remove,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,getDrawingViews --> getDrawingViews,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,getActiveView --> getActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,setActiveView --> setActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,getFocusedView --> getActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,setTool --> setTool,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,getTool --> getTool,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,setCursor --> setCursor,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,findView --> findView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,setDefaultAttribute --> setDefaultAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,getDefaultAttribute --> getDefaultAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,applyDefaultAttributesTo --> applyDefaultAttributesTo,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,getDefaultAttributes --> getDefaultAttributes,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,setEnabled --> setEnabled,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,isEnabled --> isEnabled,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,setHandleAttribute --> setHandleAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,getHandleAttribute --> getHandleAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,setInputMap --> setInputMap,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,getInputMap --> getInputMap,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,setActionMap --> setActionMap,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,getActionMap --> getActionMap,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy,access$000 --> firePropertyChange$3,org.jhotdraw.beans.AbstractBean,);
EndClass 353
StartClass 354
Class(org.jhotdraw.draw.RotationDirection,N,N,Public);
Attribute(CLOCKWISE,org.jhotdraw.draw.RotationDirection,Public,Y,Y,);
Attribute(COUNTER_CLOCKWISE,org.jhotdraw.draw.RotationDirection,Public,Y,Y,);
Attribute($VALUES,org.jhotdraw.draw.RotationDirection[],Private,Y,Y,);
Method(values,org.jhotdraw.draw.RotationDirection[],Public,Y,N);
Method(valueOf,org.jhotdraw.draw.RotationDirection,Public,Y,N);
Method(<init>,void,Private,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(valueOf,java.lang.String,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,int,);
Composition(org.jhotdraw.draw.RotationDirection);
Call(METHOD,org.jhotdraw.draw.RotationDirection,<clinit> --> <init>,org.jhotdraw.draw.RotationDirection,);
Call(ATTRIBUTE,org.jhotdraw.draw.RotationDirection,values --> $VALUES,org.jhotdraw.draw.RotationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RotationDirection,<clinit> --> CLOCKWISE,org.jhotdraw.draw.RotationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RotationDirection,<clinit> --> COUNTER_CLOCKWISE,org.jhotdraw.draw.RotationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.RotationDirection,<clinit> --> CLOCKWISE,org.jhotdraw.draw.RotationDirection,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.RotationDirection,<clinit> --> COUNTER_CLOCKWISE,org.jhotdraw.draw.RotationDirection,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.RotationDirection,<clinit> --> $VALUES,org.jhotdraw.draw.RotationDirection,WRITE);
EndClass 354
StartClass 355
Class(org.jhotdraw.draw.connector.ChopEllipseConnector$1,N,N,NA);
Attribute($SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,int[],Public,Y,Y,);
Method(<clinit>,void,Public,Y,N);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopEllipseConnector$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,org.jhotdraw.draw.connector.ChopEllipseConnector$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopEllipseConnector$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,org.jhotdraw.draw.connector.ChopEllipseConnector$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopEllipseConnector$1,<clinit> --> CENTER,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopEllipseConnector$1,<clinit> --> OUTSIDE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopEllipseConnector$1,<clinit> --> INSIDE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(METHOD,org.jhotdraw.draw.connector.ChopEllipseConnector$1,<clinit> --> values,org.jhotdraw.draw.AttributeKeys$StrokePlacement,);
EndClass 355
StartClass 356
Class(org.jhotdraw.draw.DecoratedFigure,Y,Y,Public);
Method(setDecorator,void,Public,N,Y);
Method(getDecorator,org.jhotdraw.draw.Figure,Public,N,Y);
Parameter(setDecorator,org.jhotdraw.draw.Figure,);
Realization(org.jhotdraw.draw.Figure);
EndClass 356
StartClass 357
Class(org.jhotdraw.draw.handle.LocatorHandle,N,Y,Public);
Attribute(locator,org.jhotdraw.draw.locator.Locator,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getLocationOnDrawing,java.awt.geom.Point2D$Double,Public,N,N);
Method(getLocation,java.awt.Point,Public,N,N);
Method(basicGetBounds,java.awt.Rectangle,Protected,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(<init>,org.jhotdraw.draw.locator.Locator,);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
SubClass(org.jhotdraw.draw.handle.FontSizeHandle);
SubClass(org.jhotdraw.draw.handle.MoveHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$WestHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$NorthWestHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$EastHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$NorthHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$NorthEastHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$SouthHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$SouthWestHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$SouthEastHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$WestHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$NorthEastHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$SouthEastHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$EastHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$SouthWestHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$NorthHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$SouthHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$NorthWestHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle);
Generalization(org.jhotdraw.draw.handle.AbstractHandle);
Composition(org.jhotdraw.draw.locator.Locator);
Call(METHOD,org.jhotdraw.draw.handle.LocatorHandle,basicGetBounds --> getLocation,org.jhotdraw.draw.handle.LocatorHandle,);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.LocatorHandle,<init> --> locator,org.jhotdraw.draw.handle.LocatorHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.LocatorHandle,getLocationOnDrawing --> locator,org.jhotdraw.draw.handle.LocatorHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.LocatorHandle,getLocation --> locator,org.jhotdraw.draw.handle.LocatorHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.LocatorHandle,getLocation --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(METHOD,org.jhotdraw.draw.handle.LocatorHandle,<init> --> <init>,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.LocatorHandle,getLocationOnDrawing --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.LocatorHandle,getLocationOnDrawing --> locate,org.jhotdraw.draw.locator.Locator,);
Call(METHOD,org.jhotdraw.draw.handle.LocatorHandle,getLocation --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.LocatorHandle,getLocation --> locate,org.jhotdraw.draw.locator.Locator,);
Call(METHOD,org.jhotdraw.draw.handle.LocatorHandle,getLocation --> drawingToView,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.LocatorHandle,basicGetBounds --> getHandlesize,org.jhotdraw.draw.handle.AbstractHandle,);
EndClass 357
StartClass 358
Class(org.jhotdraw.draw.locator.FontSizeLocator,N,N,Public);
Method(<init>,void,Public,N,N);
Method(locate,java.awt.geom.Point2D$Double,Public,N,N);
Method(locate$2,java.awt.geom.Point2D$Double,Public,N,N);
Parameter(locate,org.jhotdraw.draw.Figure,);
Parameter(locate$2,org.jhotdraw.draw.Figure,);
Parameter(locate$2,org.jhotdraw.draw.Figure,);
Realization(org.jhotdraw.draw.locator.Locator);
Call(METHOD,org.jhotdraw.draw.locator.FontSizeLocator,locate$2 --> locate,org.jhotdraw.draw.locator.FontSizeLocator,);
Call(ATTRIBUTE,org.jhotdraw.draw.locator.FontSizeLocator,locate --> top,org.jhotdraw.geom.Insets2D$Double,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.locator.FontSizeLocator,locate --> FONT_SIZE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.locator.FontSizeLocator,locate --> TRANSFORM,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.locator.FontSizeLocator,locate --> getStartPoint,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.locator.FontSizeLocator,locate --> getFontSize,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.locator.FontSizeLocator,locate --> getInsets,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.locator.FontSizeLocator,locate --> get,org.jhotdraw.draw.Figure,);
EndClass 358
StartClass 359
Class(org.jhotdraw.draw.handle.FontSizeHandle$2,N,N,NA);
Attribute(val$textOwner,org.jhotdraw.draw.TextHolderFigure,Public,N,Y,);
Attribute(val$editRestoreData,java.lang.Object,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.handle.FontSizeHandle,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.handle.FontSizeHandle,);
Parameter(<init>,org.jhotdraw.draw.TextHolderFigure,);
Parameter(<init>,java.lang.Object,);
Composition(org.jhotdraw.draw.TextHolderFigure);
Composition(org.jhotdraw.draw.handle.FontSizeHandle);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle$2,<init> --> this$0,org.jhotdraw.draw.handle.FontSizeHandle$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle$2,<init> --> val$textOwner,org.jhotdraw.draw.handle.FontSizeHandle$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle$2,<init> --> val$editRestoreData,org.jhotdraw.draw.handle.FontSizeHandle$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle$2,undo --> val$textOwner,org.jhotdraw.draw.handle.FontSizeHandle$2,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle$2,undo --> val$editRestoreData,org.jhotdraw.draw.handle.FontSizeHandle$2,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle$2,redo --> val$textOwner,org.jhotdraw.draw.handle.FontSizeHandle$2,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle$2,redo --> this$0,org.jhotdraw.draw.handle.FontSizeHandle$2,READ);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle$2,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle$2,getPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle$2,undo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle$2,undo --> restoreAttributesTo,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle$2,undo --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle$2,redo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle$2,redo --> access$000,org.jhotdraw.draw.handle.FontSizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle$2,redo --> setFontSize,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle$2,redo --> changed,org.jhotdraw.draw.Figure,);
EndClass 359
StartClass 360
Class(org.jhotdraw.draw.handle.FontSizeHandle$1,N,N,NA);
Attribute(val$textOwner,org.jhotdraw.draw.TextHolderFigure,Public,N,Y,);
Attribute(val$editRestoreData,java.lang.Object,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.handle.FontSizeHandle,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.handle.FontSizeHandle,);
Parameter(<init>,org.jhotdraw.draw.TextHolderFigure,);
Parameter(<init>,java.lang.Object,);
Composition(org.jhotdraw.draw.TextHolderFigure);
Composition(org.jhotdraw.draw.handle.FontSizeHandle);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle$1,<init> --> this$0,org.jhotdraw.draw.handle.FontSizeHandle$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle$1,<init> --> val$textOwner,org.jhotdraw.draw.handle.FontSizeHandle$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle$1,<init> --> val$editRestoreData,org.jhotdraw.draw.handle.FontSizeHandle$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle$1,undo --> val$textOwner,org.jhotdraw.draw.handle.FontSizeHandle$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle$1,undo --> val$editRestoreData,org.jhotdraw.draw.handle.FontSizeHandle$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle$1,redo --> val$textOwner,org.jhotdraw.draw.handle.FontSizeHandle$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.FontSizeHandle$1,redo --> this$0,org.jhotdraw.draw.handle.FontSizeHandle$1,READ);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle$1,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle$1,getPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle$1,undo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle$1,undo --> restoreAttributesTo,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle$1,undo --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle$1,redo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle$1,redo --> access$000,org.jhotdraw.draw.handle.FontSizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle$1,redo --> setFontSize,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.handle.FontSizeHandle$1,redo --> changed,org.jhotdraw.draw.Figure,);
EndClass 360
StartClass 361
Class(org.jhotdraw.draw.tool.TextAreaEditingTool$1,N,N,NA);
Attribute(val$editedFigure,org.jhotdraw.draw.TextHolderFigure,Public,N,Y,);
Attribute(val$oldText,java.lang.String,Public,N,Y,);
Attribute(val$newText,java.lang.String,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.tool.TextAreaEditingTool,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.tool.TextAreaEditingTool,);
Parameter(<init>,org.jhotdraw.draw.TextHolderFigure,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.String,);
Composition(org.jhotdraw.draw.TextHolderFigure);
Composition(org.jhotdraw.draw.tool.TextAreaEditingTool);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaEditingTool$1,<init> --> this$0,org.jhotdraw.draw.tool.TextAreaEditingTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaEditingTool$1,<init> --> val$editedFigure,org.jhotdraw.draw.tool.TextAreaEditingTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaEditingTool$1,<init> --> val$oldText,org.jhotdraw.draw.tool.TextAreaEditingTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaEditingTool$1,<init> --> val$newText,org.jhotdraw.draw.tool.TextAreaEditingTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaEditingTool$1,undo --> val$editedFigure,org.jhotdraw.draw.tool.TextAreaEditingTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaEditingTool$1,undo --> val$oldText,org.jhotdraw.draw.tool.TextAreaEditingTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaEditingTool$1,redo --> val$editedFigure,org.jhotdraw.draw.tool.TextAreaEditingTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextAreaEditingTool$1,redo --> val$newText,org.jhotdraw.draw.tool.TextAreaEditingTool$1,READ);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool$1,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool$1,getPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool$1,undo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool$1,undo --> setText,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool$1,undo --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool$1,redo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool$1,redo --> setText,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.tool.TextAreaEditingTool$1,redo --> changed,org.jhotdraw.draw.Figure,);
EndClass 361
StartClass 362
Class(org.jhotdraw.draw.text.FloatingTextField$1,N,N,NA);
Attribute(this$0,org.jhotdraw.draw.text.FloatingTextField,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(attributeChanged,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.text.FloatingTextField,);
Parameter(attributeChanged,org.jhotdraw.draw.event.FigureEvent,);
SuperClass(org.jhotdraw.draw.event.FigureAdapter);
Generalization(org.jhotdraw.draw.event.FigureAdapter);
Composition(org.jhotdraw.draw.text.FloatingTextField);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextField$1,<init> --> this$0,org.jhotdraw.draw.text.FloatingTextField$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.text.FloatingTextField$1,attributeChanged --> this$0,org.jhotdraw.draw.text.FloatingTextField$1,READ);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextField$1,<init> --> <init>,org.jhotdraw.draw.event.FigureAdapter,);
Call(METHOD,org.jhotdraw.draw.text.FloatingTextField$1,attributeChanged --> updateWidget,org.jhotdraw.draw.text.FloatingTextField,);
EndClass 362
StartClass 363
Class(org.jhotdraw.draw.connector.ChopDiamondConnector$1,N,N,NA);
Attribute($SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,int[],Public,Y,Y,);
Method(<clinit>,void,Public,Y,N);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopDiamondConnector$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,org.jhotdraw.draw.connector.ChopDiamondConnector$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopDiamondConnector$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,org.jhotdraw.draw.connector.ChopDiamondConnector$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopDiamondConnector$1,<clinit> --> INSIDE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopDiamondConnector$1,<clinit> --> OUTSIDE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopDiamondConnector$1,<clinit> --> CENTER,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(METHOD,org.jhotdraw.draw.connector.ChopDiamondConnector$1,<clinit> --> values,org.jhotdraw.draw.AttributeKeys$StrokePlacement,);
EndClass 363
StartClass 364
Class(org.jhotdraw.undo.CompositeEdit,N,N,Public);
Attribute(presentationName,java.lang.String,Private,N,N,);
Attribute(isSignificant,boolean,Private,N,N,);
Attribute(isVerbose,boolean,Private,N,N,);
Method(setVerbose,void,Public,N,N);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(getUndoPresentationName,java.lang.String,Public,N,N);
Method(getRedoPresentationName,java.lang.String,Public,N,N);
Method(addEdit,boolean,Public,N,N);
Method(isSignificant,boolean,Public,N,N);
Method(setSignificant,void,Public,N,N);
Parameter(setVerbose,boolean,);
Parameter(<init>$2,boolean,);
Parameter(<init>$3,java.lang.String,);
Parameter(<init>$4,java.lang.String,);
Parameter(<init>$4,boolean,);
Parameter(addEdit,javax.swing.undo.UndoableEdit,);
Parameter(setSignificant,boolean,);
SubClass(org.jhotdraw.draw.event.CompositeFigureEdit);
Call(ATTRIBUTE,org.jhotdraw.undo.CompositeEdit,setVerbose --> isVerbose,org.jhotdraw.undo.CompositeEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.undo.CompositeEdit,<init> --> isSignificant,org.jhotdraw.undo.CompositeEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.undo.CompositeEdit,<init>$2 --> isSignificant,org.jhotdraw.undo.CompositeEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.undo.CompositeEdit,<init>$3 --> presentationName,org.jhotdraw.undo.CompositeEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.undo.CompositeEdit,<init>$3 --> isSignificant,org.jhotdraw.undo.CompositeEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.undo.CompositeEdit,<init>$4 --> presentationName,org.jhotdraw.undo.CompositeEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.undo.CompositeEdit,<init>$4 --> isSignificant,org.jhotdraw.undo.CompositeEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.undo.CompositeEdit,getPresentationName --> presentationName,org.jhotdraw.undo.CompositeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.undo.CompositeEdit,getUndoPresentationName --> presentationName,org.jhotdraw.undo.CompositeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.undo.CompositeEdit,getRedoPresentationName --> presentationName,org.jhotdraw.undo.CompositeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.undo.CompositeEdit,isSignificant --> isSignificant,org.jhotdraw.undo.CompositeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.undo.CompositeEdit,setSignificant --> isSignificant,org.jhotdraw.undo.CompositeEdit,WRITE);
Call(METHOD,org.jhotdraw.undo.CompositeEdit,getUndoPresentationName --> getLabels,org.jhotdraw.undo.UndoRedoManager,);
Call(METHOD,org.jhotdraw.undo.CompositeEdit,getUndoPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.undo.CompositeEdit,getRedoPresentationName --> getLabels,org.jhotdraw.undo.UndoRedoManager,);
Call(METHOD,org.jhotdraw.undo.CompositeEdit,getRedoPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
EndClass 364
StartClass 365
Class(org.jhotdraw.draw.handle.BezierControlPointHandle,N,N,Public);
Attribute(index,int,Protected,N,N,);
Attribute(controlPointIndex,int,Protected,N,N,);
Attribute(edit,org.jhotdraw.undo.CompositeEdit,Private,N,N,);
Attribute(transformOwner,org.jhotdraw.draw.Figure,Private,N,N,);
Attribute(oldNode,org.jhotdraw.geom.BezierPath$Node,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(dispose,void,Public,N,N);
Method(getBezierFigure,org.jhotdraw.draw.BezierFigure,Protected,N,N);
Method(getTransformOwner,org.jhotdraw.draw.Figure,Protected,N,N);
Method(getLocation,java.awt.Point,Protected,N,N);
Method(getBezierNode,org.jhotdraw.geom.BezierPath$Node,Protected,N,N);
Method(draw,void,Public,N,N);
Method(basicGetBounds,java.awt.Rectangle,Protected,N,N);
Method(trackStart,void,Public,N,N);
Method(trackStep,void,Public,N,N);
Method(fireAreaInvalidated,void,Private,N,N);
Method(trackEnd,void,Public,N,N);
Method(isCombinableWith,boolean,Public,N,N);
Method(getToolTipText,java.lang.String,Public,N,N);
Method(getOwner,org.jhotdraw.draw.BezierFigure,Public,N,N);
Method(keyPressed,void,Public,N,N);
Method(getOwner$2,org.jhotdraw.draw.Figure,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.BezierFigure,);
Parameter(<init>,int,);
Parameter(<init>,int,);
Parameter(<init>$2,org.jhotdraw.draw.BezierFigure,);
Parameter(<init>$2,int,);
Parameter(<init>$2,int,);
Parameter(<init>$2,org.jhotdraw.draw.Figure,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(trackStart,java.awt.Point,);
Parameter(trackStart,int,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,int,);
Parameter(fireAreaInvalidated,org.jhotdraw.geom.BezierPath$Node,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,int,);
Parameter(isCombinableWith,org.jhotdraw.draw.handle.Handle,);
Parameter(getToolTipText,java.awt.Point,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.AbstractHandle);
Composition(org.jhotdraw.undo.CompositeEdit);
Composition(org.jhotdraw.draw.Figure);
Composition(org.jhotdraw.geom.BezierPath$Node);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,<init> --> <init>$2,org.jhotdraw.draw.handle.BezierControlPointHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,getBezierFigure --> getOwner,org.jhotdraw.draw.handle.BezierControlPointHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,getLocation --> getBezierFigure,org.jhotdraw.draw.handle.BezierControlPointHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,getLocation --> getTransformOwner,org.jhotdraw.draw.handle.BezierControlPointHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,getBezierNode --> getBezierFigure,org.jhotdraw.draw.handle.BezierControlPointHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> getBezierFigure,org.jhotdraw.draw.handle.BezierControlPointHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> getTransformOwner,org.jhotdraw.draw.handle.BezierControlPointHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,basicGetBounds --> getLocation,org.jhotdraw.draw.handle.BezierControlPointHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStart --> getOwner,org.jhotdraw.draw.handle.BezierControlPointHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStep --> getBezierFigure,org.jhotdraw.draw.handle.BezierControlPointHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStep --> fireAreaInvalidated,org.jhotdraw.draw.handle.BezierControlPointHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStep --> getTransformOwner,org.jhotdraw.draw.handle.BezierControlPointHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackEnd --> getBezierFigure,org.jhotdraw.draw.handle.BezierControlPointHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,isCombinableWith --> getBezierFigure,org.jhotdraw.draw.handle.BezierControlPointHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,getToolTipText --> getBezierNode,org.jhotdraw.draw.handle.BezierControlPointHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,keyPressed --> getOwner,org.jhotdraw.draw.handle.BezierControlPointHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,getOwner$2 --> getOwner,org.jhotdraw.draw.handle.BezierControlPointHandle,);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,<init>$2 --> index,org.jhotdraw.draw.handle.BezierControlPointHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,<init>$2 --> controlPointIndex,org.jhotdraw.draw.handle.BezierControlPointHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,<init>$2 --> transformOwner,org.jhotdraw.draw.handle.BezierControlPointHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,dispose --> transformOwner,org.jhotdraw.draw.handle.BezierControlPointHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,dispose --> transformOwner,org.jhotdraw.draw.handle.BezierControlPointHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,getTransformOwner --> transformOwner,org.jhotdraw.draw.handle.BezierControlPointHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,getLocation --> index,org.jhotdraw.draw.handle.BezierControlPointHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,getLocation --> controlPointIndex,org.jhotdraw.draw.handle.BezierControlPointHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,getBezierNode --> index,org.jhotdraw.draw.handle.BezierControlPointHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> index,org.jhotdraw.draw.handle.BezierControlPointHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> controlPointIndex,org.jhotdraw.draw.handle.BezierControlPointHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStart --> index,org.jhotdraw.draw.handle.BezierControlPointHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStart --> edit,org.jhotdraw.draw.handle.BezierControlPointHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStart --> oldNode,org.jhotdraw.draw.handle.BezierControlPointHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStep --> index,org.jhotdraw.draw.handle.BezierControlPointHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStep --> controlPointIndex,org.jhotdraw.draw.handle.BezierControlPointHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,trackEnd --> oldNode,org.jhotdraw.draw.handle.BezierControlPointHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,trackEnd --> index,org.jhotdraw.draw.handle.BezierControlPointHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,trackEnd --> controlPointIndex,org.jhotdraw.draw.handle.BezierControlPointHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,trackEnd --> edit,org.jhotdraw.draw.handle.BezierControlPointHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,isCombinableWith --> index,org.jhotdraw.draw.handle.BezierControlPointHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,isCombinableWith --> controlPointIndex,org.jhotdraw.draw.handle.BezierControlPointHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,keyPressed --> index,org.jhotdraw.draw.handle.BezierControlPointHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,keyPressed --> controlPointIndex,org.jhotdraw.draw.handle.BezierControlPointHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,getLocation --> TRANSFORM,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,getLocation --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> TRANSFORM,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> BEZIER_CONTROL_POINT_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> BEZIER_CONTROL_POINT_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> BEZIER_TANGENT_STROKE_1,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> BEZIER_TANGENT_COLOR_1,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> BEZIER_TANGENT_STROKE_2,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> BEZIER_TANGENT_COLOR_2,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> BEZIER_CONTROL_POINT_HANDLE_FILL_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> BEZIER_CONTROL_POINT_HANDLE_STROKE_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> BEZIER_TANGENT_STROKE_1_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> BEZIER_TANGENT_COLOR_1_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> BEZIER_TANGENT_STROKE_2_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> BEZIER_TANGENT_COLOR_2_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> keepColinear,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> mask,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStart --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStep --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStep --> TRANSFORM,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStep --> keepColinear,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStep --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStep --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,fireAreaInvalidated --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,fireAreaInvalidated --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,fireAreaInvalidated --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,trackEnd --> keepColinear,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,trackEnd --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,trackEnd --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,trackEnd --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,trackEnd --> keepColinear,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,getToolTipText --> mask,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,getToolTipText --> keepColinear,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,keyPressed --> x,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,keyPressed --> y,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle,keyPressed --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,<init>$2 --> <init>,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,<init>$2 --> addFigureListener,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,dispose --> dispose,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,dispose --> removeFigureListener,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,getLocation --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,getLocation --> getPoint$2,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,getLocation --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,getLocation --> drawingToView,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,getBezierNode --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,getBezierNode --> getNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> getNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> getEditor,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> getTool,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> supportsHandleInteraction,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> getHandleAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> drawingToView,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> isClosed,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,draw --> drawCircle,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,basicGetBounds --> getHandlesize,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStart --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStart --> <init>$3,org.jhotdraw.undo.CompositeEdit,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStart --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStart --> getNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStep --> getConstrainer,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStep --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStep --> constrainPoint,org.jhotdraw.draw.Constrainer,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStep --> getNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStep --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStep --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStep --> setPoint$2,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackStep --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,fireAreaInvalidated --> drawingToView$2,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,fireAreaInvalidated --> getHandlesize,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,fireAreaInvalidated --> fireAreaInvalidated,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackEnd --> clone,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackEnd --> getNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackEnd --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackEnd --> getPoint$2,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackEnd --> setNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackEnd --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackEnd --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackEnd --> <init>,org.jhotdraw.draw.handle.BezierControlPointHandle$1,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,trackEnd --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,isCombinableWith --> isCombinableWith,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,isCombinableWith --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,getToolTipText --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,getToolTipText --> getFormatted,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,getToolTipText --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,getOwner --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,keyPressed --> getNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,keyPressed --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,keyPressed --> setPoint$2,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,keyPressed --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,keyPressed --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,keyPressed --> <init>,org.jhotdraw.draw.event.BezierNodeEdit,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle,keyPressed --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
EndClass 365
StartClass 366
Class(org.jhotdraw.draw.handle.BezierNodeHandle$2,N,N,NA);
Attribute(val$f,org.jhotdraw.draw.BezierFigure,Public,N,Y,);
Attribute(val$removedNode,org.jhotdraw.geom.BezierPath$Node,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.handle.BezierNodeHandle,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(redo,void,Public,N,N);
Method(undo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.handle.BezierNodeHandle,);
Parameter(<init>,org.jhotdraw.draw.BezierFigure,);
Parameter(<init>,org.jhotdraw.geom.BezierPath$Node,);
Composition(org.jhotdraw.draw.BezierFigure);
Composition(org.jhotdraw.geom.BezierPath$Node);
Composition(org.jhotdraw.draw.handle.BezierNodeHandle);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$2,<init> --> this$0,org.jhotdraw.draw.handle.BezierNodeHandle$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$2,<init> --> val$f,org.jhotdraw.draw.handle.BezierNodeHandle$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$2,<init> --> val$removedNode,org.jhotdraw.draw.handle.BezierNodeHandle$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$2,redo --> this$0,org.jhotdraw.draw.handle.BezierNodeHandle$2,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$2,redo --> val$f,org.jhotdraw.draw.handle.BezierNodeHandle$2,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$2,undo --> this$0,org.jhotdraw.draw.handle.BezierNodeHandle$2,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$2,undo --> val$f,org.jhotdraw.draw.handle.BezierNodeHandle$2,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$2,undo --> val$removedNode,org.jhotdraw.draw.handle.BezierNodeHandle$2,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$2,redo --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$2,redo --> index,org.jhotdraw.draw.handle.BezierNodeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$2,undo --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$2,undo --> index,org.jhotdraw.draw.handle.BezierNodeHandle,READ);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$2,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$2,getPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$2,redo --> removeFromSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$2,redo --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$2,redo --> removeNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$2,redo --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$2,redo --> addToSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$2,undo --> removeFromSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$2,undo --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$2,undo --> addNode$2,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$2,undo --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$2,undo --> addToSelection,org.jhotdraw.draw.DrawingView,);
EndClass 366
StartClass 367
Class(org.jhotdraw.draw.handle.BezierNodeHandle$3,N,N,NA);
Attribute(val$f,org.jhotdraw.draw.BezierFigure,Public,N,Y,);
Attribute(val$removedNode,org.jhotdraw.geom.BezierPath$Node,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.handle.BezierNodeHandle,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(redo,void,Public,N,N);
Method(undo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.handle.BezierNodeHandle,);
Parameter(<init>,org.jhotdraw.draw.BezierFigure,);
Parameter(<init>,org.jhotdraw.geom.BezierPath$Node,);
Composition(org.jhotdraw.draw.BezierFigure);
Composition(org.jhotdraw.geom.BezierPath$Node);
Composition(org.jhotdraw.draw.handle.BezierNodeHandle);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$3,<init> --> this$0,org.jhotdraw.draw.handle.BezierNodeHandle$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$3,<init> --> val$f,org.jhotdraw.draw.handle.BezierNodeHandle$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$3,<init> --> val$removedNode,org.jhotdraw.draw.handle.BezierNodeHandle$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$3,redo --> this$0,org.jhotdraw.draw.handle.BezierNodeHandle$3,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$3,redo --> val$f,org.jhotdraw.draw.handle.BezierNodeHandle$3,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$3,undo --> this$0,org.jhotdraw.draw.handle.BezierNodeHandle$3,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$3,undo --> val$f,org.jhotdraw.draw.handle.BezierNodeHandle$3,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$3,undo --> val$removedNode,org.jhotdraw.draw.handle.BezierNodeHandle$3,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$3,redo --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$3,redo --> index,org.jhotdraw.draw.handle.BezierNodeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$3,undo --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$3,undo --> index,org.jhotdraw.draw.handle.BezierNodeHandle,READ);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$3,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$3,getPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$3,redo --> removeFromSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$3,redo --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$3,redo --> removeNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$3,redo --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$3,redo --> addToSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$3,undo --> removeFromSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$3,undo --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$3,undo --> addNode$2,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$3,undo --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$3,undo --> addToSelection,org.jhotdraw.draw.DrawingView,);
EndClass 367
StartClass 368
Class(org.jhotdraw.draw.event.BezierNodeEdit,N,N,Public);
Attribute(owner,org.jhotdraw.draw.BezierFigure,Private,N,N,);
Attribute(index,int,Private,N,N,);
Attribute(oldValue,org.jhotdraw.geom.BezierPath$Node,Private,N,N,);
Attribute(newValue,org.jhotdraw.geom.BezierPath$Node,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(redo,void,Public,N,N);
Method(undo,void,Public,N,N);
Method(addEdit,boolean,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.BezierFigure,);
Parameter(<init>,int,);
Parameter(<init>,org.jhotdraw.geom.BezierPath$Node,);
Parameter(<init>,org.jhotdraw.geom.BezierPath$Node,);
Parameter(addEdit,javax.swing.undo.UndoableEdit,);
SubClass(org.jhotdraw.draw.handle.BezierNodeHandle$1);
SubClass(org.jhotdraw.draw.handle.BezierControlPointHandle$1);
Composition(org.jhotdraw.draw.BezierFigure);
Composition(org.jhotdraw.geom.BezierPath$Node);
Call(ATTRIBUTE,org.jhotdraw.draw.event.BezierNodeEdit,<init> --> owner,org.jhotdraw.draw.event.BezierNodeEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.BezierNodeEdit,<init> --> index,org.jhotdraw.draw.event.BezierNodeEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.BezierNodeEdit,<init> --> oldValue,org.jhotdraw.draw.event.BezierNodeEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.BezierNodeEdit,<init> --> newValue,org.jhotdraw.draw.event.BezierNodeEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.BezierNodeEdit,getPresentationName --> oldValue,org.jhotdraw.draw.event.BezierNodeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.BezierNodeEdit,getPresentationName --> newValue,org.jhotdraw.draw.event.BezierNodeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.BezierNodeEdit,redo --> owner,org.jhotdraw.draw.event.BezierNodeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.BezierNodeEdit,redo --> index,org.jhotdraw.draw.event.BezierNodeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.BezierNodeEdit,redo --> newValue,org.jhotdraw.draw.event.BezierNodeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.BezierNodeEdit,redo --> oldValue,org.jhotdraw.draw.event.BezierNodeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.BezierNodeEdit,undo --> owner,org.jhotdraw.draw.event.BezierNodeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.BezierNodeEdit,undo --> index,org.jhotdraw.draw.event.BezierNodeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.BezierNodeEdit,undo --> oldValue,org.jhotdraw.draw.event.BezierNodeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.BezierNodeEdit,addEdit --> owner,org.jhotdraw.draw.event.BezierNodeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.BezierNodeEdit,addEdit --> index,org.jhotdraw.draw.event.BezierNodeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.BezierNodeEdit,addEdit --> newValue,org.jhotdraw.draw.event.BezierNodeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.BezierNodeEdit,addEdit --> newValue,org.jhotdraw.draw.event.BezierNodeEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.BezierNodeEdit,getPresentationName --> mask,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.BezierNodeEdit,redo --> mask,org.jhotdraw.geom.BezierPath$Node,READ);
Call(METHOD,org.jhotdraw.draw.event.BezierNodeEdit,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.event.BezierNodeEdit,getPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.event.BezierNodeEdit,redo --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.event.BezierNodeEdit,redo --> setNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.event.BezierNodeEdit,redo --> changed,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.event.BezierNodeEdit,undo --> willChange,org.jhotdraw.draw.AbstractFigure,);
Call(METHOD,org.jhotdraw.draw.event.BezierNodeEdit,undo --> setNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.event.BezierNodeEdit,undo --> changed,org.jhotdraw.draw.AbstractFigure,);
EndClass 368
StartClass 369
Class(org.jhotdraw.draw.handle.BezierNodeHandle$1,N,N,NA);
Attribute(this$0,org.jhotdraw.draw.handle.BezierNodeHandle,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(redo,void,Public,N,N);
Method(undo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.handle.BezierNodeHandle,);
Parameter(<init>,org.jhotdraw.draw.BezierFigure,);
Parameter(<init>,int,);
Parameter(<init>,org.jhotdraw.geom.BezierPath$Node,);
Parameter(<init>,org.jhotdraw.geom.BezierPath$Node,);
SuperClass(org.jhotdraw.draw.event.BezierNodeEdit);
Generalization(org.jhotdraw.draw.event.BezierNodeEdit);
Composition(org.jhotdraw.draw.handle.BezierNodeHandle);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$1,<init> --> this$0,org.jhotdraw.draw.handle.BezierNodeHandle$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$1,redo --> this$0,org.jhotdraw.draw.handle.BezierNodeHandle$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierNodeHandle$1,undo --> this$0,org.jhotdraw.draw.handle.BezierNodeHandle$1,READ);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$1,<init> --> <init>,org.jhotdraw.draw.event.BezierNodeEdit,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$1,redo --> redo,org.jhotdraw.draw.event.BezierNodeEdit,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$1,redo --> fireHandleRequestSecondaryHandles,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$1,undo --> undo,org.jhotdraw.draw.event.BezierNodeEdit,);
Call(METHOD,org.jhotdraw.draw.handle.BezierNodeHandle$1,undo --> fireHandleRequestSecondaryHandles,org.jhotdraw.draw.handle.AbstractHandle,);
EndClass 369
StartClass 370
Class(org.jhotdraw.draw.event.FigureAdapter,N,N,Public);
Method(<init>,void,Public,N,N);
Method(areaInvalidated,void,Public,N,N);
Method(attributeChanged,void,Public,N,N);
Method(figureAdded,void,Public,N,N);
Method(figureChanged,void,Public,N,N);
Method(figureRemoved,void,Public,N,N);
Method(figureRequestRemove,void,Public,N,N);
Method(figureHandlesChanged,void,Public,N,N);
Parameter(areaInvalidated,org.jhotdraw.draw.event.FigureEvent,);
Parameter(attributeChanged,org.jhotdraw.draw.event.FigureEvent,);
Parameter(figureAdded,org.jhotdraw.draw.event.FigureEvent,);
Parameter(figureChanged,org.jhotdraw.draw.event.FigureEvent,);
Parameter(figureRemoved,org.jhotdraw.draw.event.FigureEvent,);
Parameter(figureRequestRemove,org.jhotdraw.draw.event.FigureEvent,);
Parameter(figureHandlesChanged,org.jhotdraw.draw.event.FigureEvent,);
SubClass(org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler);
SubClass(org.jhotdraw.draw.event.SelectionComponentRepainter);
SubClass(org.jhotdraw.draw.text.FloatingTextArea$1);
SubClass(org.jhotdraw.draw.DefaultDrawingView$1);
SubClass(org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler);
SubClass(org.jhotdraw.draw.AbstractCompositeFigure$EventHandler);
SubClass(org.jhotdraw.draw.text.FloatingTextField$1);
Realization(org.jhotdraw.draw.event.FigureListener);
EndClass 370
StartClass 371
Class(org.jhotdraw.draw.handle.AbstractConnectionHandle,N,Y,Public);
Attribute(savedTarget,org.jhotdraw.draw.connector.Connector,Private,N,N,);
Attribute(connectableConnector,org.jhotdraw.draw.connector.Connector,Private,N,N,);
Attribute(connectableFigure,org.jhotdraw.draw.Figure,Private,N,N,);
Attribute(start,java.awt.Point,Private,N,N,);
Attribute(savedLiner,org.jhotdraw.draw.liner.Liner,Private,N,N,);
Attribute(connectors,java.util.Collection,Protected,N,N,org.jhotdraw.draw.connector.Connector);
Method(<init>,void,Protected,N,N);
Method(getOwner,org.jhotdraw.draw.ConnectionFigure,Public,N,N);
Method(isCombinableWith,boolean,Public,N,N);
Method(getTarget,org.jhotdraw.draw.connector.Connector,Protected,N,Y);
Method(disconnect,void,Protected,N,Y);
Method(connect,void,Protected,N,Y);
Method(setLocation,void,Protected,N,Y);
Method(getLocation,java.awt.geom.Point2D$Double,Protected,N,Y);
Method(getSource,org.jhotdraw.draw.connector.Connector,Protected,N,N);
Method(trackStart,void,Public,N,N);
Method(trackStep,void,Public,N,N);
Method(trackEnd,void,Public,N,N);
Method(findConnectionTarget,org.jhotdraw.draw.connector.Connector,Private,N,N);
Method(canConnect,boolean,Protected,N,Y);
Method(findConnector,org.jhotdraw.draw.connector.Connector,Protected,N,N);
Method(draw,void,Public,N,N);
Method(findConnectableFigure,org.jhotdraw.draw.Figure,Private,N,N);
Method(setPotentialTarget,void,Protected,N,N);
Method(basicGetBounds,java.awt.Rectangle,Protected,N,N);
Method(getBezierFigure,org.jhotdraw.draw.BezierFigure,Protected,N,N);
Method(getBezierNodeIndex,int,Protected,N,Y);
Method(createSecondaryHandles,java.util.Collection,Public,N,N);
Method(getBezierNode,org.jhotdraw.geom.BezierPath$Node,Protected,N,N);
Method(getToolTipText,java.lang.String,Public,N,N);
Method(repaintConnectors,void,Public,N,N);
Method(getOwner$2,org.jhotdraw.draw.Figure,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.ConnectionFigure,);
Parameter(isCombinableWith,org.jhotdraw.draw.handle.Handle,);
Parameter(connect,org.jhotdraw.draw.connector.Connector,);
Parameter(setLocation,java.awt.geom.Point2D$Double,);
Parameter(trackStart,java.awt.Point,);
Parameter(trackStart,int,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,int,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,int,);
Parameter(findConnectionTarget,java.awt.geom.Point2D$Double,);
Parameter(findConnectionTarget,org.jhotdraw.draw.Drawing,);
Parameter(canConnect,org.jhotdraw.draw.connector.Connector,);
Parameter(canConnect,org.jhotdraw.draw.connector.Connector,);
Parameter(findConnector,java.awt.geom.Point2D$Double,);
Parameter(findConnector,org.jhotdraw.draw.Figure,);
Parameter(findConnector,org.jhotdraw.draw.ConnectionFigure,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(findConnectableFigure,java.awt.geom.Point2D$Double,);
Parameter(findConnectableFigure,org.jhotdraw.draw.Drawing,);
Parameter(setPotentialTarget,org.jhotdraw.draw.connector.Connector,);
Parameter(getToolTipText,java.awt.Point,);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
SubClass(org.jhotdraw.draw.handle.ConnectionEndHandle);
SubClass(org.jhotdraw.draw.handle.ConnectionStartHandle);
Generalization(org.jhotdraw.draw.handle.AbstractHandle);
Composition(org.jhotdraw.draw.connector.Connector);
Composition(org.jhotdraw.draw.Figure);
Composition(org.jhotdraw.draw.liner.Liner);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,getSource --> getTarget,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,getSource --> getOwner,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackStart --> getTarget,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackStart --> getOwner,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackStep --> findConnectableFigure,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackStep --> findConnectionTarget,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackStep --> getOwner,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackStep --> setLocation,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackStep --> repaintConnectors,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> getOwner,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> getBezierNodeIndex,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> findConnectionTarget,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> setLocation,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> disconnect,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> connect,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,findConnectionTarget --> findConnectableFigure,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,findConnectionTarget --> getSource,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,findConnectionTarget --> getOwner,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,findConnectionTarget --> findConnector,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,findConnectionTarget --> canConnect,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,draw --> getTarget,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,findConnectableFigure --> getOwner,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,basicGetBounds --> getLocation,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,getBezierFigure --> getOwner,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,createSecondaryHandles --> getOwner,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,createSecondaryHandles --> getBezierNodeIndex,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,createSecondaryHandles --> getBezierFigure,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,getBezierNode --> getBezierNodeIndex,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,getBezierNode --> getBezierFigure,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,getToolTipText --> getOwner,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,getToolTipText --> getBezierNode,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,repaintConnectors --> getOwner,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,getOwner$2 --> getOwner,org.jhotdraw.draw.handle.AbstractConnectionHandle,);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,<init> --> connectors,org.jhotdraw.draw.handle.AbstractConnectionHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackStart --> savedTarget,org.jhotdraw.draw.handle.AbstractConnectionHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackStart --> start,org.jhotdraw.draw.handle.AbstractConnectionHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackStart --> savedLiner,org.jhotdraw.draw.handle.AbstractConnectionHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackStep --> connectableFigure,org.jhotdraw.draw.handle.AbstractConnectionHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackStep --> connectableFigure,org.jhotdraw.draw.handle.AbstractConnectionHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> savedTarget,org.jhotdraw.draw.handle.AbstractConnectionHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> savedLiner,org.jhotdraw.draw.handle.AbstractConnectionHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> connectableConnector,org.jhotdraw.draw.handle.AbstractConnectionHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> connectors,org.jhotdraw.draw.handle.AbstractConnectionHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,draw --> connectors,org.jhotdraw.draw.handle.AbstractConnectionHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,setPotentialTarget --> connectableConnector,org.jhotdraw.draw.handle.AbstractConnectionHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,createSecondaryHandles --> savedLiner,org.jhotdraw.draw.handle.AbstractConnectionHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,getToolTipText --> savedLiner,org.jhotdraw.draw.handle.AbstractConnectionHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,repaintConnectors --> connectors,org.jhotdraw.draw.handle.AbstractConnectionHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,repaintConnectors --> connectableFigure,org.jhotdraw.draw.handle.AbstractConnectionHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,repaintConnectors --> connectors,org.jhotdraw.draw.handle.AbstractConnectionHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackStep --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> mask,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> mask,org.jhotdraw.geom.BezierPath$Node,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,draw --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,draw --> DISCONNECTED_CONNECTION_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,draw --> DISCONNECTED_CONNECTION_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,draw --> CONNECTED_CONNECTION_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,draw --> CONNECTED_CONNECTION_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,basicGetBounds --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,createSecondaryHandles --> mask,org.jhotdraw.geom.BezierPath$Node,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractConnectionHandle,repaintConnectors --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,<init> --> <init>,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,getOwner --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,getSource --> getStartConnector,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,getSource --> getEndConnector,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackStart --> getLiner,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackStart --> setLiner,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackStart --> fireHandleRequestSecondaryHandles,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackStep --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackStep --> getConstrainer,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackStep --> constrainPoint,org.jhotdraw.draw.Constrainer,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackStep --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackStep --> getAnchor,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackStep --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackStep --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> getNode,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> getNodeCount,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> setNode,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> fireHandleRequestSecondaryHandles,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> getConstrainer,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> constrainPoint,org.jhotdraw.draw.Constrainer,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> setLiner,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,trackEnd --> updateConnection,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,findConnectionTarget --> isConnectable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,findConnectionTarget --> includes,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,findConnector --> findConnector,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,draw --> getDrawingToViewTransform,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,draw --> draw,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,draw --> getEditor,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,draw --> getHandleAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,draw --> drawCircle,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,findConnectableFigure --> getFiguresFrontToBack,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,findConnectableFigure --> includes,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,findConnectableFigure --> isConnectable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,findConnectableFigure --> contains,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,basicGetBounds --> drawingToView,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,basicGetBounds --> getHandlesize,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,createSecondaryHandles --> getLiner,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,createSecondaryHandles --> getNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,createSecondaryHandles --> isClosed,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,createSecondaryHandles --> <init>,org.jhotdraw.draw.handle.BezierControlPointHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,createSecondaryHandles --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,getBezierNode --> getNodeCount,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,getBezierNode --> getNode,org.jhotdraw.draw.BezierFigure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,getToolTipText --> getLiner,org.jhotdraw.draw.ConnectionFigure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,getToolTipText --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,getToolTipText --> getMask,org.jhotdraw.geom.BezierPath$Node,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,getToolTipText --> getFormatted,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,repaintConnectors --> getDrawingArea,org.jhotdraw.draw.connector.Connector,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,repaintConnectors --> getConnectors,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,repaintConnectors --> getComponent,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractConnectionHandle,repaintConnectors --> drawingToView$2,org.jhotdraw.draw.DrawingView,);
EndClass 371
StartClass 372
Class(org.jhotdraw.draw.tool.TextEditingTool$1,N,N,NA);
Attribute(val$editedFigure,org.jhotdraw.draw.TextHolderFigure,Public,N,Y,);
Attribute(val$oldText,java.lang.String,Public,N,Y,);
Attribute(val$newText,java.lang.String,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.tool.TextEditingTool,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.tool.TextEditingTool,);
Parameter(<init>,org.jhotdraw.draw.TextHolderFigure,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.String,);
Composition(org.jhotdraw.draw.TextHolderFigure);
Composition(org.jhotdraw.draw.tool.TextEditingTool);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextEditingTool$1,<init> --> this$0,org.jhotdraw.draw.tool.TextEditingTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextEditingTool$1,<init> --> val$editedFigure,org.jhotdraw.draw.tool.TextEditingTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextEditingTool$1,<init> --> val$oldText,org.jhotdraw.draw.tool.TextEditingTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextEditingTool$1,<init> --> val$newText,org.jhotdraw.draw.tool.TextEditingTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextEditingTool$1,undo --> val$editedFigure,org.jhotdraw.draw.tool.TextEditingTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextEditingTool$1,undo --> val$oldText,org.jhotdraw.draw.tool.TextEditingTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextEditingTool$1,redo --> val$editedFigure,org.jhotdraw.draw.tool.TextEditingTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.TextEditingTool$1,redo --> val$newText,org.jhotdraw.draw.tool.TextEditingTool$1,READ);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool$1,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool$1,getPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool$1,undo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool$1,undo --> setText,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool$1,undo --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool$1,redo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool$1,redo --> setText,org.jhotdraw.draw.TextHolderFigure,);
Call(METHOD,org.jhotdraw.draw.tool.TextEditingTool$1,redo --> changed,org.jhotdraw.draw.Figure,);
EndClass 372
StartClass 373
Class(org.jhotdraw.draw.locator.AbstractLocator,N,Y,Public);
Method(<init>,void,Public,N,N);
Method(locate,java.awt.geom.Point2D$Double,Public,N,N);
Parameter(locate,org.jhotdraw.draw.Figure,);
Parameter(locate,org.jhotdraw.draw.Figure,);
SubClass(org.jhotdraw.draw.locator.RelativeLocator);
Realization(org.jhotdraw.draw.locator.Locator);
Realization(org.jhotdraw.xml.DOMStorable);
Call(METHOD,org.jhotdraw.draw.locator.AbstractLocator,locate --> locate,org.jhotdraw.draw.locator.Locator,);
EndClass 373
StartClass 374
Class(org.jhotdraw.draw.handle.OrientationHandle$1,N,N,NA);
Attribute($SwitchMap$org$jhotdraw$draw$AttributeKeys$Orientation,int[],Public,Y,Y,);
Method(<clinit>,void,Public,Y,N);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$Orientation,org.jhotdraw.draw.handle.OrientationHandle$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$Orientation,org.jhotdraw.draw.handle.OrientationHandle$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle$1,<clinit> --> NORTH,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle$1,<clinit> --> NORTH_EAST,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle$1,<clinit> --> EAST,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle$1,<clinit> --> SOUTH_EAST,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle$1,<clinit> --> SOUTH,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle$1,<clinit> --> SOUTH_WEST,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle$1,<clinit> --> WEST,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.OrientationHandle$1,<clinit> --> NORTH_WEST,org.jhotdraw.draw.AttributeKeys$Orientation,READ);
Call(METHOD,org.jhotdraw.draw.handle.OrientationHandle$1,<clinit> --> values,org.jhotdraw.draw.AttributeKeys$Orientation,);
EndClass 374
StartClass 375
Class(org.jhotdraw.draw.event.AttributeChangeEdit,N,N,Public);
Attribute(owner,org.jhotdraw.draw.Figure,Private,N,N,);
Attribute(name,org.jhotdraw.draw.AttributeKey,Private,N,N,);
Attribute(oldValue,java.lang.Object,Private,N,N,);
Attribute(newValue,java.lang.Object,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(redo,void,Public,N,N);
Method(undo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(<init>,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>,java.lang.Object,);
Parameter(<init>,java.lang.Object,);
Composition(org.jhotdraw.draw.Figure);
Composition(org.jhotdraw.draw.AttributeKey);
Call(ATTRIBUTE,org.jhotdraw.draw.event.AttributeChangeEdit,<init> --> owner,org.jhotdraw.draw.event.AttributeChangeEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.AttributeChangeEdit,<init> --> name,org.jhotdraw.draw.event.AttributeChangeEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.AttributeChangeEdit,<init> --> oldValue,org.jhotdraw.draw.event.AttributeChangeEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.AttributeChangeEdit,<init> --> newValue,org.jhotdraw.draw.event.AttributeChangeEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.AttributeChangeEdit,redo --> owner,org.jhotdraw.draw.event.AttributeChangeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.AttributeChangeEdit,redo --> name,org.jhotdraw.draw.event.AttributeChangeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.AttributeChangeEdit,redo --> newValue,org.jhotdraw.draw.event.AttributeChangeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.AttributeChangeEdit,undo --> owner,org.jhotdraw.draw.event.AttributeChangeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.AttributeChangeEdit,undo --> name,org.jhotdraw.draw.event.AttributeChangeEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.AttributeChangeEdit,undo --> oldValue,org.jhotdraw.draw.event.AttributeChangeEdit,READ);
Call(METHOD,org.jhotdraw.draw.event.AttributeChangeEdit,redo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.event.AttributeChangeEdit,redo --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.event.AttributeChangeEdit,redo --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.event.AttributeChangeEdit,undo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.event.AttributeChangeEdit,undo --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.event.AttributeChangeEdit,undo --> changed,org.jhotdraw.draw.Figure,);
EndClass 375
StartClass 376
Class(org.jhotdraw.draw.handle.TransformHandleKit$WestHandle,N,N,NA);
Method(<init>,void,Public,N,N);
Method(trackStepNormalized,void,Protected,N,N);
Method(keyPressed,void,Public,N,N);
Method(getCursor,java.awt.Cursor,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(trackStepNormalized,java.awt.geom.Point2D$Double,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
SuperClass(org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle);
SuperClass(org.jhotdraw.draw.handle.LocatorHandle);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$WestHandle,<init> --> west,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$WestHandle,<init> --> <init>,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$WestHandle,trackStepNormalized --> getTransformedBounds,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$WestHandle,trackStepNormalized --> transform,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$WestHandle,keyPressed --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$WestHandle,keyPressed --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$WestHandle,keyPressed --> getTransformRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$WestHandle,keyPressed --> getTransformedBounds,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$WestHandle,keyPressed --> transform,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$WestHandle,keyPressed --> <init>,org.jhotdraw.draw.event.TransformRestoreEdit,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$WestHandle,keyPressed --> fireUndoableEditHappened,org.jhotdraw.draw.handle.AbstractHandle,);
EndClass 376
StartClass 377
Class(org.jhotdraw.draw.handle.TransformHandleKit$NorthWestHandle,N,N,NA);
Method(<init>,void,Public,N,N);
Method(trackStepNormalized,void,Protected,N,N);
Method(keyPressed,void,Public,N,N);
Method(getCursor,java.awt.Cursor,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(trackStepNormalized,java.awt.geom.Point2D$Double,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
SuperClass(org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle);
SuperClass(org.jhotdraw.draw.handle.LocatorHandle);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthWestHandle,<init> --> northWest,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthWestHandle,<init> --> <init>,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthWestHandle,trackStepNormalized --> getTransformedBounds,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthWestHandle,trackStepNormalized --> transform,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthWestHandle,keyPressed --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthWestHandle,keyPressed --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthWestHandle,keyPressed --> getTransformRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthWestHandle,keyPressed --> getTransformedBounds,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthWestHandle,keyPressed --> transform,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthWestHandle,keyPressed --> <init>,org.jhotdraw.draw.event.TransformRestoreEdit,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthWestHandle,keyPressed --> fireUndoableEditHappened,org.jhotdraw.draw.handle.AbstractHandle,);
EndClass 377
StartClass 378
Class(org.jhotdraw.draw.handle.TransformHandleKit$EastHandle,N,N,NA);
Method(<init>,void,Public,N,N);
Method(trackStepNormalized,void,Protected,N,N);
Method(keyPressed,void,Public,N,N);
Method(getCursor,java.awt.Cursor,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(trackStepNormalized,java.awt.geom.Point2D$Double,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
SuperClass(org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle);
SuperClass(org.jhotdraw.draw.handle.LocatorHandle);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$EastHandle,<init> --> east,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$EastHandle,<init> --> <init>,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$EastHandle,trackStepNormalized --> getTransformedBounds,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$EastHandle,trackStepNormalized --> transform,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$EastHandle,keyPressed --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$EastHandle,keyPressed --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$EastHandle,keyPressed --> getTransformRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$EastHandle,keyPressed --> getTransformedBounds,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$EastHandle,keyPressed --> transform,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$EastHandle,keyPressed --> <init>,org.jhotdraw.draw.event.TransformRestoreEdit,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$EastHandle,keyPressed --> fireUndoableEditHappened,org.jhotdraw.draw.handle.AbstractHandle,);
EndClass 378
StartClass 379
Class(org.jhotdraw.draw.handle.TransformHandleKit$NorthHandle,N,N,NA);
Method(<init>,void,Public,N,N);
Method(trackStepNormalized,void,Protected,N,N);
Method(keyPressed,void,Public,N,N);
Method(getCursor,java.awt.Cursor,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(trackStepNormalized,java.awt.geom.Point2D$Double,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
SuperClass(org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle);
SuperClass(org.jhotdraw.draw.handle.LocatorHandle);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthHandle,<init> --> north,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthHandle,<init> --> <init>,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthHandle,trackStepNormalized --> getTransformedBounds,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthHandle,trackStepNormalized --> transform,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthHandle,keyPressed --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthHandle,keyPressed --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthHandle,keyPressed --> getTransformRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthHandle,keyPressed --> getTransformedBounds,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthHandle,keyPressed --> transform,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthHandle,keyPressed --> <init>,org.jhotdraw.draw.event.TransformRestoreEdit,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthHandle,keyPressed --> fireUndoableEditHappened,org.jhotdraw.draw.handle.AbstractHandle,);
EndClass 379
StartClass 380
Class(org.jhotdraw.draw.handle.TransformHandleKit$NorthEastHandle,N,N,NA);
Method(<init>,void,Public,N,N);
Method(trackStepNormalized,void,Protected,N,N);
Method(keyPressed,void,Public,N,N);
Method(getCursor,java.awt.Cursor,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(trackStepNormalized,java.awt.geom.Point2D$Double,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
SuperClass(org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle);
SuperClass(org.jhotdraw.draw.handle.LocatorHandle);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthEastHandle,<init> --> northEast,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthEastHandle,<init> --> <init>,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthEastHandle,trackStepNormalized --> getTransformedBounds,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthEastHandle,trackStepNormalized --> transform,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthEastHandle,keyPressed --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthEastHandle,keyPressed --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthEastHandle,keyPressed --> getTransformRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthEastHandle,keyPressed --> getTransformedBounds,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthEastHandle,keyPressed --> transform,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthEastHandle,keyPressed --> <init>,org.jhotdraw.draw.event.TransformRestoreEdit,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$NorthEastHandle,keyPressed --> fireUndoableEditHappened,org.jhotdraw.draw.handle.AbstractHandle,);
EndClass 380
StartClass 381
Class(org.jhotdraw.draw.handle.TransformHandleKit$SouthHandle,N,N,NA);
Method(<init>,void,Public,N,N);
Method(trackStepNormalized,void,Protected,N,N);
Method(keyPressed,void,Public,N,N);
Method(getCursor,java.awt.Cursor,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(trackStepNormalized,java.awt.geom.Point2D$Double,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
SuperClass(org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle);
SuperClass(org.jhotdraw.draw.handle.LocatorHandle);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthHandle,<init> --> south,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthHandle,<init> --> <init>,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthHandle,trackStepNormalized --> getTransformedBounds,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthHandle,trackStepNormalized --> transform,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthHandle,keyPressed --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthHandle,keyPressed --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthHandle,keyPressed --> getTransformRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthHandle,keyPressed --> getTransformedBounds,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthHandle,keyPressed --> transform,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthHandle,keyPressed --> <init>,org.jhotdraw.draw.event.TransformRestoreEdit,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthHandle,keyPressed --> fireUndoableEditHappened,org.jhotdraw.draw.handle.AbstractHandle,);
EndClass 381
StartClass 382
Class(org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,N,N,NA);
Attribute(dx,int,Private,N,N,);
Attribute(dy,int,Private,N,N,);
Attribute(geometry,java.lang.Object,Private,N,N,);
Attribute(isTransformableCache,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getToolTipText,java.lang.String,Public,N,N);
Method(draw,void,Public,N,N);
Method(drawArc,void,Protected,N,N);
Method(getTransformedBounds,java.awt.geom.Rectangle2D$Double,Protected,N,N);
Method(trackStart,void,Public,N,N);
Method(trackStep,void,Public,N,N);
Method(trackEnd,void,Public,N,N);
Method(trackStepNormalized,void,Protected,N,N);
Method(transform,void,Protected,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(<init>,org.jhotdraw.draw.locator.Locator,);
Parameter(getToolTipText,java.awt.Point,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(drawArc,java.awt.Graphics2D,);
Parameter(trackStart,java.awt.Point,);
Parameter(trackStart,int,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,int,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,int,);
Parameter(trackStepNormalized,java.awt.geom.Point2D$Double,);
Parameter(transform,java.awt.geom.Point2D$Double,);
Parameter(transform,java.awt.geom.Point2D$Double,);
SuperClass(org.jhotdraw.draw.handle.LocatorHandle);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$WestHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$NorthWestHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$EastHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$NorthHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$NorthEastHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$SouthHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$SouthWestHandle);
SubClass(org.jhotdraw.draw.handle.TransformHandleKit$SouthEastHandle);
Generalization(org.jhotdraw.draw.handle.LocatorHandle);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,trackStep --> trackStepNormalized,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,transform --> getTransformedBounds,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,trackStart --> isTransformableCache,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,trackStart --> isTransformableCache,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,trackStart --> geometry,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,trackStart --> dx,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,trackStart --> dy,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,trackStep --> isTransformableCache,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,trackStep --> dx,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,trackStep --> dy,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,trackEnd --> isTransformableCache,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,trackEnd --> geometry,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,draw --> TRANSFORM_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,draw --> TRANSFORM_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,draw --> TRANSFORM_HANDLE_FILL_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,draw --> TRANSFORM_HANDLE_STROKE_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,getTransformedBounds --> TRANSFORM,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,trackStep --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,<init> --> <init>,org.jhotdraw.draw.handle.LocatorHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,getToolTipText --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,getToolTipText --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,draw --> getEditor,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,draw --> getTool,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,draw --> supportsHandleInteraction,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,draw --> getHandleAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,draw --> drawDiamond,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,drawArc --> getLocation,org.jhotdraw.draw.handle.LocatorHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,getTransformedBounds --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,getTransformedBounds --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,getTransformedBounds --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,trackStart --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,trackStart --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,trackStart --> getTransformRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,trackStart --> getLocation,org.jhotdraw.draw.handle.LocatorHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,trackStep --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,trackStep --> getConstrainer,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,trackStep --> constrainPoint,org.jhotdraw.draw.Constrainer,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,trackEnd --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,trackEnd --> getTransformRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,trackEnd --> <init>,org.jhotdraw.draw.event.TransformRestoreEdit,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,trackEnd --> fireUndoableEditHappened,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,transform --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,transform --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,transform --> transform,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,transform --> changed,org.jhotdraw.draw.Figure,);
EndClass 382
StartClass 383
Class(org.jhotdraw.draw.handle.RotateHandle,N,N,Public);
Method(<init>,void,Public,N,N);
Method(getCenter,java.awt.geom.Point2D$Double,Protected,N,N);
Method(getOrigin,java.awt.geom.Point2D$Double,Protected,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
SuperClass(org.jhotdraw.draw.handle.AbstractRotateHandle);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.AbstractRotateHandle);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.RotateHandle,getOrigin --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(METHOD,org.jhotdraw.draw.handle.RotateHandle,<init> --> <init>,org.jhotdraw.draw.handle.AbstractRotateHandle,);
Call(METHOD,org.jhotdraw.draw.handle.RotateHandle,getCenter --> getTransformedBounds,org.jhotdraw.draw.handle.AbstractRotateHandle,);
Call(METHOD,org.jhotdraw.draw.handle.RotateHandle,getOrigin --> getTransformedBounds,org.jhotdraw.draw.handle.AbstractRotateHandle,);
Call(METHOD,org.jhotdraw.draw.handle.RotateHandle,getOrigin --> getHandlesize,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.RotateHandle,getOrigin --> getScaleFactor,org.jhotdraw.draw.DrawingView,);
EndClass 383
StartClass 384
Class(org.jhotdraw.draw.handle.TransformHandleKit$SouthWestHandle,N,N,NA);
Method(<init>,void,Public,N,N);
Method(trackStepNormalized,void,Protected,N,N);
Method(keyPressed,void,Public,N,N);
Method(getCursor,java.awt.Cursor,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(trackStepNormalized,java.awt.geom.Point2D$Double,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
SuperClass(org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle);
SuperClass(org.jhotdraw.draw.handle.LocatorHandle);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthWestHandle,<init> --> southWest,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthWestHandle,<init> --> <init>,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthWestHandle,trackStepNormalized --> getTransformedBounds,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthWestHandle,trackStepNormalized --> transform,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthWestHandle,keyPressed --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthWestHandle,keyPressed --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthWestHandle,keyPressed --> getTransformRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthWestHandle,keyPressed --> getTransformedBounds,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthWestHandle,keyPressed --> transform,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthWestHandle,keyPressed --> <init>,org.jhotdraw.draw.event.TransformRestoreEdit,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthWestHandle,keyPressed --> fireUndoableEditHappened,org.jhotdraw.draw.handle.AbstractHandle,);
EndClass 384
StartClass 385
Class(org.jhotdraw.draw.handle.TransformHandleKit$SouthEastHandle,N,N,NA);
Method(<init>,void,Public,N,N);
Method(trackStepNormalized,void,Protected,N,N);
Method(keyPressed,void,Public,N,N);
Method(getCursor,java.awt.Cursor,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(trackStepNormalized,java.awt.geom.Point2D$Double,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
SuperClass(org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle);
SuperClass(org.jhotdraw.draw.handle.LocatorHandle);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthEastHandle,<init> --> southEast,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthEastHandle,<init> --> <init>,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthEastHandle,trackStepNormalized --> getTransformedBounds,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthEastHandle,trackStepNormalized --> transform,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthEastHandle,keyPressed --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthEastHandle,keyPressed --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthEastHandle,keyPressed --> getTransformRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthEastHandle,keyPressed --> getTransformedBounds,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthEastHandle,keyPressed --> transform,org.jhotdraw.draw.handle.TransformHandleKit$TransformHandle,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthEastHandle,keyPressed --> <init>,org.jhotdraw.draw.event.TransformRestoreEdit,);
Call(METHOD,org.jhotdraw.draw.handle.TransformHandleKit$SouthEastHandle,keyPressed --> fireUndoableEditHappened,org.jhotdraw.draw.handle.AbstractHandle,);
EndClass 385
StartClass 386
Class(org.jhotdraw.draw.event.TransformRestoreEdit,N,N,Public);
Attribute(owner,org.jhotdraw.draw.Figure,Private,N,N,);
Attribute(oldTransformRestoreData,java.lang.Object,Private,N,N,);
Attribute(newTransformRestoreData,java.lang.Object,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(<init>,java.lang.Object,);
Parameter(<init>,java.lang.Object,);
Composition(org.jhotdraw.draw.Figure);
Call(ATTRIBUTE,org.jhotdraw.draw.event.TransformRestoreEdit,<init> --> owner,org.jhotdraw.draw.event.TransformRestoreEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.TransformRestoreEdit,<init> --> oldTransformRestoreData,org.jhotdraw.draw.event.TransformRestoreEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.TransformRestoreEdit,<init> --> newTransformRestoreData,org.jhotdraw.draw.event.TransformRestoreEdit,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.TransformRestoreEdit,undo --> owner,org.jhotdraw.draw.event.TransformRestoreEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.TransformRestoreEdit,undo --> oldTransformRestoreData,org.jhotdraw.draw.event.TransformRestoreEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.TransformRestoreEdit,redo --> owner,org.jhotdraw.draw.event.TransformRestoreEdit,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.TransformRestoreEdit,redo --> newTransformRestoreData,org.jhotdraw.draw.event.TransformRestoreEdit,READ);
Call(METHOD,org.jhotdraw.draw.event.TransformRestoreEdit,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.event.TransformRestoreEdit,getPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.event.TransformRestoreEdit,undo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.event.TransformRestoreEdit,undo --> restoreTransformTo,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.event.TransformRestoreEdit,undo --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.event.TransformRestoreEdit,redo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.event.TransformRestoreEdit,redo --> restoreTransformTo,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.event.TransformRestoreEdit,redo --> changed,org.jhotdraw.draw.Figure,);
EndClass 386
StartClass 387
Class(org.jhotdraw.draw.connector.AbstractConnector,N,N,Public);
Attribute(owner,org.jhotdraw.draw.Figure,Private,N,N,);
Attribute(isConnectToDecorator,boolean,Private,N,N,);
Attribute(isStatePersistent,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(setConnectToDecorator,void,Public,N,N);
Method(isConnectToDecorator,boolean,Public,N,N);
Method(getConnectorTarget,org.jhotdraw.draw.Figure,Protected,N,N);
Method(contains,boolean,Public,N,N);
Method(findStart,java.awt.geom.Point2D$Double,Public,N,N);
Method(findEnd,java.awt.geom.Point2D$Double,Public,N,N);
Method(findPoint,java.awt.geom.Point2D$Double,Protected,N,N);
Method(getOwner,org.jhotdraw.draw.Figure,Public,N,N);
Method(setOwner,void,Protected,N,N);
Method(clone,java.lang.Object,Public,N,N);
Method(updateStartLocation,void,Public,N,N);
Method(updateEndLocation,void,Public,N,N);
Method(getAnchor,java.awt.geom.Point2D$Double,Public,N,N);
Method(updateAnchor,void,Public,N,N);
Method(getBounds,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(read,void,Public,N,N);
Method(write,void,Public,N,N);
Method(getDrawingArea,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(draw,void,Public,N,N);
Parameter(<init>$2,org.jhotdraw.draw.Figure,);
Parameter(setConnectToDecorator,boolean,);
Parameter(getConnectorTarget,org.jhotdraw.draw.Figure,);
Parameter(contains,java.awt.geom.Point2D$Double,);
Parameter(findStart,org.jhotdraw.draw.ConnectionFigure,);
Parameter(findEnd,org.jhotdraw.draw.ConnectionFigure,);
Parameter(findPoint,org.jhotdraw.draw.ConnectionFigure,);
Parameter(setOwner,org.jhotdraw.draw.Figure,);
Parameter(updateStartLocation,java.awt.geom.Point2D$Double,);
Parameter(updateEndLocation,java.awt.geom.Point2D$Double,);
Parameter(updateAnchor,java.awt.geom.Point2D$Double,);
Parameter(read,org.jhotdraw.xml.DOMInput,);
Parameter(write,org.jhotdraw.xml.DOMOutput,);
Parameter(draw,java.awt.Graphics2D,);
SubClass(org.jhotdraw.draw.connector.ChopRoundRectangleConnector);
SubClass(org.jhotdraw.draw.connector.ChopEllipseConnector);
SubClass(org.jhotdraw.draw.connector.ChopDiamondConnector);
SubClass(org.jhotdraw.draw.connector.ChopTriangleConnector);
SubClass(org.jhotdraw.draw.connector.ChopBezierConnector);
SubClass(org.jhotdraw.draw.connector.ChopRectangleConnector);
Realization(org.jhotdraw.draw.connector.Connector);
Realization(org.jhotdraw.xml.DOMStorable);
Composition(org.jhotdraw.draw.Figure);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,contains --> getOwner,org.jhotdraw.draw.connector.AbstractConnector,);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,findStart --> findPoint,org.jhotdraw.draw.connector.AbstractConnector,);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,findEnd --> findPoint,org.jhotdraw.draw.connector.AbstractConnector,);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,findPoint --> getBounds,org.jhotdraw.draw.connector.AbstractConnector,);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,getAnchor --> getBounds,org.jhotdraw.draw.connector.AbstractConnector,);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,getBounds --> isConnectToDecorator,org.jhotdraw.draw.connector.AbstractConnector,);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,getBounds --> getOwner,org.jhotdraw.draw.connector.AbstractConnector,);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,write --> getOwner,org.jhotdraw.draw.connector.AbstractConnector,);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,getDrawingArea --> getAnchor,org.jhotdraw.draw.connector.AbstractConnector,);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,draw --> getAnchor,org.jhotdraw.draw.connector.AbstractConnector,);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.AbstractConnector,<init> --> owner,org.jhotdraw.draw.connector.AbstractConnector,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.AbstractConnector,<init>$2 --> owner,org.jhotdraw.draw.connector.AbstractConnector,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.AbstractConnector,setConnectToDecorator --> isConnectToDecorator,org.jhotdraw.draw.connector.AbstractConnector,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.AbstractConnector,isConnectToDecorator --> isConnectToDecorator,org.jhotdraw.draw.connector.AbstractConnector,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.AbstractConnector,getConnectorTarget --> isConnectToDecorator,org.jhotdraw.draw.connector.AbstractConnector,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.AbstractConnector,getOwner --> owner,org.jhotdraw.draw.connector.AbstractConnector,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.AbstractConnector,setOwner --> owner,org.jhotdraw.draw.connector.AbstractConnector,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.AbstractConnector,read --> isStatePersistent,org.jhotdraw.draw.connector.AbstractConnector,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.AbstractConnector,read --> isConnectToDecorator,org.jhotdraw.draw.connector.AbstractConnector,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.AbstractConnector,read --> owner,org.jhotdraw.draw.connector.AbstractConnector,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.AbstractConnector,write --> isStatePersistent,org.jhotdraw.draw.connector.AbstractConnector,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.AbstractConnector,write --> isConnectToDecorator,org.jhotdraw.draw.connector.AbstractConnector,READ);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,getConnectorTarget --> getDecorator,org.jhotdraw.draw.DecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,contains --> contains,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,findPoint --> center$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,getAnchor --> center$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,getBounds --> getDecorator,org.jhotdraw.draw.DecoratedFigure,);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,getBounds --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,read --> getAttribute$4,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,read --> getElementCount$2,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,read --> openElement$2,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,read --> readObject$2,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,read --> closeElement,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,write --> addAttribute$5,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,write --> openElement,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,write --> writeObject,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.draw.connector.AbstractConnector,write --> closeElement,org.jhotdraw.xml.DOMOutput,);
EndClass 387
StartClass 388
Class(org.jhotdraw.draw.connector.ChopRectangleConnector$1,N,N,NA);
Attribute($SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,int[],Public,Y,Y,);
Method(<clinit>,void,Public,Y,N);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopRectangleConnector$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,org.jhotdraw.draw.connector.ChopRectangleConnector$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopRectangleConnector$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$AttributeKeys$StrokePlacement,org.jhotdraw.draw.connector.ChopRectangleConnector$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopRectangleConnector$1,<clinit> --> CENTER,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopRectangleConnector$1,<clinit> --> OUTSIDE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.connector.ChopRectangleConnector$1,<clinit> --> INSIDE,org.jhotdraw.draw.AttributeKeys$StrokePlacement,READ);
Call(METHOD,org.jhotdraw.draw.connector.ChopRectangleConnector$1,<clinit> --> values,org.jhotdraw.draw.AttributeKeys$StrokePlacement,);
EndClass 388
StartClass 389
Class(org.jhotdraw.io.Base64$OutputStream,N,N,Public);
Attribute(encode,boolean,Private,N,N,);
Attribute(position,int,Private,N,N,);
Attribute(buffer,byte[],Private,N,N,);
Attribute(bufferLength,int,Private,N,N,);
Attribute(lineLength,int,Private,N,N,);
Attribute(breakLines,boolean,Private,N,N,);
Attribute(b4,byte[],Private,N,N,);
Attribute(suspendEncoding,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(write,void,Public,N,N);
Method(write$2,void,Public,N,N);
Method(flushBase64,void,Public,N,N);
Method(close,void,Public,N,N);
Method(suspendEncoding,void,Public,N,N);
Method(resumeEncoding,void,Public,N,N);
Parameter(<init>,java.io.OutputStream,);
Parameter(<init>$2,java.io.OutputStream,);
Parameter(<init>$2,int,);
Parameter(write,int,);
Parameter(write$2,byte[],);
Parameter(write$2,int,);
Parameter(write$2,int,);
Call(METHOD,org.jhotdraw.io.Base64$OutputStream,<init> --> <init>$2,org.jhotdraw.io.Base64$OutputStream,);
Call(METHOD,org.jhotdraw.io.Base64$OutputStream,write$2 --> write,org.jhotdraw.io.Base64$OutputStream,);
Call(METHOD,org.jhotdraw.io.Base64$OutputStream,close --> flushBase64,org.jhotdraw.io.Base64$OutputStream,);
Call(METHOD,org.jhotdraw.io.Base64$OutputStream,suspendEncoding --> flushBase64,org.jhotdraw.io.Base64$OutputStream,);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,<init>$2 --> encode,org.jhotdraw.io.Base64$OutputStream,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,<init>$2 --> bufferLength,org.jhotdraw.io.Base64$OutputStream,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,<init>$2 --> breakLines,org.jhotdraw.io.Base64$OutputStream,WRITE);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,<init>$2 --> encode,org.jhotdraw.io.Base64$OutputStream,WRITE);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,<init>$2 --> bufferLength,org.jhotdraw.io.Base64$OutputStream,WRITE);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,<init>$2 --> buffer,org.jhotdraw.io.Base64$OutputStream,WRITE);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,<init>$2 --> position,org.jhotdraw.io.Base64$OutputStream,WRITE);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,<init>$2 --> lineLength,org.jhotdraw.io.Base64$OutputStream,WRITE);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,<init>$2 --> suspendEncoding,org.jhotdraw.io.Base64$OutputStream,WRITE);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,<init>$2 --> b4,org.jhotdraw.io.Base64$OutputStream,WRITE);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,write --> suspendEncoding,org.jhotdraw.io.Base64$OutputStream,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,write --> encode,org.jhotdraw.io.Base64$OutputStream,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,write --> buffer,org.jhotdraw.io.Base64$OutputStream,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,write --> position,org.jhotdraw.io.Base64$OutputStream,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,write --> bufferLength,org.jhotdraw.io.Base64$OutputStream,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,write --> b4,org.jhotdraw.io.Base64$OutputStream,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,write --> lineLength,org.jhotdraw.io.Base64$OutputStream,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,write --> breakLines,org.jhotdraw.io.Base64$OutputStream,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,write --> position,org.jhotdraw.io.Base64$OutputStream,WRITE);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,write --> lineLength,org.jhotdraw.io.Base64$OutputStream,WRITE);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,write$2 --> suspendEncoding,org.jhotdraw.io.Base64$OutputStream,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,flushBase64 --> position,org.jhotdraw.io.Base64$OutputStream,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,flushBase64 --> encode,org.jhotdraw.io.Base64$OutputStream,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,flushBase64 --> b4,org.jhotdraw.io.Base64$OutputStream,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,flushBase64 --> buffer,org.jhotdraw.io.Base64$OutputStream,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,flushBase64 --> position,org.jhotdraw.io.Base64$OutputStream,WRITE);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,close --> buffer,org.jhotdraw.io.Base64$OutputStream,WRITE);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,suspendEncoding --> suspendEncoding,org.jhotdraw.io.Base64$OutputStream,WRITE);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$OutputStream,resumeEncoding --> suspendEncoding,org.jhotdraw.io.Base64$OutputStream,WRITE);
Call(METHOD,org.jhotdraw.io.Base64$OutputStream,write --> access$300,org.jhotdraw.io.Base64,);
Call(METHOD,org.jhotdraw.io.Base64$OutputStream,write --> access$100,org.jhotdraw.io.Base64,);
Call(METHOD,org.jhotdraw.io.Base64$OutputStream,write --> access$200,org.jhotdraw.io.Base64,);
Call(METHOD,org.jhotdraw.io.Base64$OutputStream,flushBase64 --> access$300,org.jhotdraw.io.Base64,);
EndClass 389
StartClass 390
Class(org.jhotdraw.io.Base64$InputStream,N,N,Public);
Attribute(encode,boolean,Private,N,N,);
Attribute(position,int,Private,N,N,);
Attribute(buffer,byte[],Private,N,N,);
Attribute(bufferLength,int,Private,N,N,);
Attribute(numSigBytes,int,Private,N,N,);
Attribute(lineLength,int,Private,N,N,);
Attribute(breakLines,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(read,int,Public,N,N);
Method(read$2,int,Public,N,N);
Parameter(<init>,java.io.InputStream,);
Parameter(<init>$2,java.io.InputStream,);
Parameter(<init>$2,int,);
Parameter(read$2,byte[],);
Parameter(read$2,int,);
Parameter(read$2,int,);
Call(METHOD,org.jhotdraw.io.Base64$InputStream,<init> --> <init>$2,org.jhotdraw.io.Base64$InputStream,);
Call(METHOD,org.jhotdraw.io.Base64$InputStream,read$2 --> read,org.jhotdraw.io.Base64$InputStream,);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$InputStream,<init>$2 --> encode,org.jhotdraw.io.Base64$InputStream,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$InputStream,<init>$2 --> bufferLength,org.jhotdraw.io.Base64$InputStream,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$InputStream,<init>$2 --> breakLines,org.jhotdraw.io.Base64$InputStream,WRITE);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$InputStream,<init>$2 --> encode,org.jhotdraw.io.Base64$InputStream,WRITE);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$InputStream,<init>$2 --> bufferLength,org.jhotdraw.io.Base64$InputStream,WRITE);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$InputStream,<init>$2 --> buffer,org.jhotdraw.io.Base64$InputStream,WRITE);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$InputStream,<init>$2 --> position,org.jhotdraw.io.Base64$InputStream,WRITE);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$InputStream,<init>$2 --> lineLength,org.jhotdraw.io.Base64$InputStream,WRITE);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$InputStream,read --> position,org.jhotdraw.io.Base64$InputStream,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$InputStream,read --> encode,org.jhotdraw.io.Base64$InputStream,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$InputStream,read --> buffer,org.jhotdraw.io.Base64$InputStream,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$InputStream,read --> numSigBytes,org.jhotdraw.io.Base64$InputStream,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$InputStream,read --> breakLines,org.jhotdraw.io.Base64$InputStream,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$InputStream,read --> lineLength,org.jhotdraw.io.Base64$InputStream,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$InputStream,read --> bufferLength,org.jhotdraw.io.Base64$InputStream,READ);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$InputStream,read --> position,org.jhotdraw.io.Base64$InputStream,WRITE);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$InputStream,read --> numSigBytes,org.jhotdraw.io.Base64$InputStream,WRITE);
Call(ATTRIBUTE,org.jhotdraw.io.Base64$InputStream,read --> lineLength,org.jhotdraw.io.Base64$InputStream,WRITE);
Call(METHOD,org.jhotdraw.io.Base64$InputStream,read --> access$000,org.jhotdraw.io.Base64,);
Call(METHOD,org.jhotdraw.io.Base64$InputStream,read --> access$100,org.jhotdraw.io.Base64,);
Call(METHOD,org.jhotdraw.io.Base64$InputStream,read --> access$200,org.jhotdraw.io.Base64,);
EndClass 390
StartClass 391
Class(org.jhotdraw.draw.tool.SelectionTool,N,N,Public);
Attribute(tracker,org.jhotdraw.draw.tool.Tool,Private,N,N,);
Attribute(handleTracker,org.jhotdraw.draw.tool.HandleTracker,Private,N,N,);
Attribute(selectAreaTracker,org.jhotdraw.draw.tool.SelectAreaTracker,Private,N,N,);
Attribute(dragTracker,org.jhotdraw.draw.tool.DragTracker,Private,N,N,);
Attribute(trackerHandler,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,Private,N,N,);
Attribute(SELECT_BEHIND_ENABLED_PROPERTY,java.lang.String,Public,Y,Y,);
Attribute(isSelectBehindEnabled,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setSelectBehindEnabled,void,Public,N,N);
Method(isSelectBehindEnabled,boolean,Public,N,N);
Method(activate,void,Public,N,N);
Method(deactivate,void,Public,N,N);
Method(keyPressed,void,Public,N,N);
Method(keyReleased,void,Public,N,N);
Method(keyTyped,void,Public,N,N);
Method(mouseClicked,void,Public,N,N);
Method(mouseDragged,void,Public,N,N);
Method(mouseEntered,void,Public,N,N);
Method(mouseExited,void,Public,N,N);
Method(mouseMoved,void,Public,N,N);
Method(mouseReleased,void,Public,N,N);
Method(draw,void,Public,N,N);
Method(mousePressed,void,Public,N,N);
Method(setTracker,void,Protected,N,N);
Method(getHandleTracker,org.jhotdraw.draw.tool.HandleTracker,Protected,N,N);
Method(getDragTracker,org.jhotdraw.draw.tool.DragTracker,Protected,N,N);
Method(getSelectAreaTracker,org.jhotdraw.draw.tool.SelectAreaTracker,Protected,N,N);
Method(setHandleTracker,void,Public,N,N);
Method(setSelectAreaTracker,void,Public,N,N);
Method(setDragTracker,void,Public,N,N);
Method(supportsHandleInteraction,boolean,Public,N,N);
Method(access$000,org.jhotdraw.draw.tool.Tool,Public,Y,N);
Method(access$002,org.jhotdraw.draw.tool.Tool,Public,Y,N);
Parameter(setSelectBehindEnabled,boolean,);
Parameter(activate,org.jhotdraw.draw.DrawingEditor,);
Parameter(deactivate,org.jhotdraw.draw.DrawingEditor,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
Parameter(keyReleased,java.awt.event.KeyEvent,);
Parameter(keyTyped,java.awt.event.KeyEvent,);
Parameter(mouseClicked,java.awt.event.MouseEvent,);
Parameter(mouseDragged,java.awt.event.MouseEvent,);
Parameter(mouseEntered,java.awt.event.MouseEvent,);
Parameter(mouseExited,java.awt.event.MouseEvent,);
Parameter(mouseMoved,java.awt.event.MouseEvent,);
Parameter(mouseReleased,java.awt.event.MouseEvent,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(mousePressed,java.awt.event.MouseEvent,);
Parameter(setTracker,org.jhotdraw.draw.tool.Tool,);
Parameter(getHandleTracker,org.jhotdraw.draw.handle.Handle,);
Parameter(getDragTracker,org.jhotdraw.draw.Figure,);
Parameter(setHandleTracker,org.jhotdraw.draw.tool.HandleTracker,);
Parameter(setSelectAreaTracker,org.jhotdraw.draw.tool.SelectAreaTracker,);
Parameter(setDragTracker,org.jhotdraw.draw.tool.DragTracker,);
Parameter(access$000,org.jhotdraw.draw.tool.SelectionTool,);
Parameter(access$002,org.jhotdraw.draw.tool.SelectionTool,);
Parameter(access$002,org.jhotdraw.draw.tool.Tool,);
SuperClass(org.jhotdraw.draw.tool.AbstractTool);
SuperClass(org.jhotdraw.beans.AbstractBean);
SubClass(org.jhotdraw.draw.tool.DelegationSelectionTool);
Generalization(org.jhotdraw.draw.tool.AbstractTool);
Composition(org.jhotdraw.draw.tool.Tool);
Composition(org.jhotdraw.draw.tool.HandleTracker);
Composition(org.jhotdraw.draw.tool.SelectAreaTracker);
Composition(org.jhotdraw.draw.tool.DragTracker);
Composition(org.jhotdraw.draw.tool.SelectionTool$TrackerHandler);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,<init> --> getSelectAreaTracker,org.jhotdraw.draw.tool.SelectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mousePressed --> getHandleTracker,org.jhotdraw.draw.tool.SelectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mousePressed --> isSelectBehindEnabled,org.jhotdraw.draw.tool.SelectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mousePressed --> getDragTracker,org.jhotdraw.draw.tool.SelectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mousePressed --> getSelectAreaTracker,org.jhotdraw.draw.tool.SelectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mousePressed --> setTracker,org.jhotdraw.draw.tool.SelectionTool,);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,<init> --> tracker,org.jhotdraw.draw.tool.SelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,<init> --> trackerHandler,org.jhotdraw.draw.tool.SelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,<init> --> isSelectBehindEnabled,org.jhotdraw.draw.tool.SelectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,<init> --> tracker,org.jhotdraw.draw.tool.SelectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,<init> --> trackerHandler,org.jhotdraw.draw.tool.SelectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,setSelectBehindEnabled --> isSelectBehindEnabled,org.jhotdraw.draw.tool.SelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,setSelectBehindEnabled --> isSelectBehindEnabled,org.jhotdraw.draw.tool.SelectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,isSelectBehindEnabled --> isSelectBehindEnabled,org.jhotdraw.draw.tool.SelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,activate --> tracker,org.jhotdraw.draw.tool.SelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,deactivate --> tracker,org.jhotdraw.draw.tool.SelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,keyPressed --> tracker,org.jhotdraw.draw.tool.SelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,keyReleased --> tracker,org.jhotdraw.draw.tool.SelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,keyTyped --> tracker,org.jhotdraw.draw.tool.SelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,mouseClicked --> tracker,org.jhotdraw.draw.tool.SelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,mouseDragged --> tracker,org.jhotdraw.draw.tool.SelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,mouseEntered --> tracker,org.jhotdraw.draw.tool.SelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,mouseExited --> tracker,org.jhotdraw.draw.tool.SelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,mouseMoved --> tracker,org.jhotdraw.draw.tool.SelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,mouseReleased --> tracker,org.jhotdraw.draw.tool.SelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,draw --> tracker,org.jhotdraw.draw.tool.SelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,mousePressed --> tracker,org.jhotdraw.draw.tool.SelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,setTracker --> tracker,org.jhotdraw.draw.tool.SelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,setTracker --> trackerHandler,org.jhotdraw.draw.tool.SelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,setTracker --> tracker,org.jhotdraw.draw.tool.SelectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,getHandleTracker --> handleTracker,org.jhotdraw.draw.tool.SelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,getHandleTracker --> handleTracker,org.jhotdraw.draw.tool.SelectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,getDragTracker --> dragTracker,org.jhotdraw.draw.tool.SelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,getDragTracker --> dragTracker,org.jhotdraw.draw.tool.SelectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,getSelectAreaTracker --> selectAreaTracker,org.jhotdraw.draw.tool.SelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,getSelectAreaTracker --> selectAreaTracker,org.jhotdraw.draw.tool.SelectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,setHandleTracker --> handleTracker,org.jhotdraw.draw.tool.SelectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,setSelectAreaTracker --> selectAreaTracker,org.jhotdraw.draw.tool.SelectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,setDragTracker --> dragTracker,org.jhotdraw.draw.tool.SelectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,access$000 --> tracker,org.jhotdraw.draw.tool.SelectionTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,access$002 --> tracker,org.jhotdraw.draw.tool.SelectionTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool,mousePressed --> anchor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,<init> --> <init>,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,<init> --> <init>$2,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,<init> --> addToolListener,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,setSelectBehindEnabled --> firePropertyChange,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,activate --> activate,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,activate --> activate,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,deactivate --> deactivate,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,deactivate --> deactivate,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,keyPressed --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,keyPressed --> isEnabled,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,keyReleased --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,keyReleased --> isEnabled,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,keyTyped --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,keyTyped --> isEnabled,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mouseClicked --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mouseClicked --> isEnabled,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mouseDragged --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mouseDragged --> isEnabled,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mouseEntered --> mouseEntered,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mouseExited --> mouseExited,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mouseReleased --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mouseReleased --> isEnabled,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,draw --> draw,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mousePressed --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mousePressed --> isEnabled,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mousePressed --> mousePressed,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mousePressed --> findHandle,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mousePressed --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mousePressed --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mousePressed --> findFigure,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mousePressed --> isSelectable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mousePressed --> findFigureBehind,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mousePressed --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mousePressed --> findFigureBehind$2,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mousePressed --> contains,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mousePressed --> clearSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,mousePressed --> setHandleDetailLevel,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,setTracker --> getEditor,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,setTracker --> deactivate,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,setTracker --> removeToolListener,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,setTracker --> activate,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,setTracker --> addToolListener,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,getHandleTracker --> <init>$3,org.jhotdraw.draw.tool.DefaultHandleTracker,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,getHandleTracker --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,getHandleTracker --> getCompatibleHandles,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,getHandleTracker --> setHandles,org.jhotdraw.draw.tool.HandleTracker,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,getDragTracker --> <init>$2,org.jhotdraw.draw.tool.DefaultDragTracker,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,getDragTracker --> setDraggedFigure,org.jhotdraw.draw.tool.DragTracker,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool,getSelectAreaTracker --> <init>,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,);
EndClass 391
StartClass 392
Class(org.jhotdraw.draw.tool.DelegationSelectionTool$1,N,N,NA);
Attribute(val$evt,java.awt.event.MouseEvent,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.tool.DelegationSelectionTool,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.tool.DelegationSelectionTool,);
Parameter(<init>,java.awt.event.MouseEvent,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Composition(org.jhotdraw.draw.tool.DelegationSelectionTool);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool$1,<init> --> this$0,org.jhotdraw.draw.tool.DelegationSelectionTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool$1,<init> --> val$evt,org.jhotdraw.draw.tool.DelegationSelectionTool$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool$1,actionPerformed --> this$0,org.jhotdraw.draw.tool.DelegationSelectionTool$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DelegationSelectionTool$1,actionPerformed --> val$evt,org.jhotdraw.draw.tool.DelegationSelectionTool$1,READ);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool$1,actionPerformed --> handlePopupMenu,org.jhotdraw.draw.tool.DelegationSelectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.DelegationSelectionTool$1,actionPerformed --> access$002,org.jhotdraw.draw.tool.DelegationSelectionTool,);
EndClass 392
StartClass 393
Class(org.jhotdraw.draw.action.AttributeToggler$1,N,N,NA);
Attribute(val$restoreData,java.util.ArrayList,Public,N,Y,);
Attribute(val$selectedFigures,java.util.ArrayList,Public,N,Y,);
Attribute(val$newValue,java.lang.Object,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.action.AttributeToggler,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.action.AttributeToggler,);
Parameter(<init>,java.util.ArrayList,);
Parameter(<init>,java.util.ArrayList,);
Parameter(<init>,java.lang.Object,);
Composition(org.jhotdraw.draw.action.AttributeToggler);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeToggler$1,<init> --> this$0,org.jhotdraw.draw.action.AttributeToggler$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeToggler$1,<init> --> val$restoreData,org.jhotdraw.draw.action.AttributeToggler$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeToggler$1,<init> --> val$selectedFigures,org.jhotdraw.draw.action.AttributeToggler$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeToggler$1,<init> --> val$newValue,org.jhotdraw.draw.action.AttributeToggler$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeToggler$1,getPresentationName --> this$0,org.jhotdraw.draw.action.AttributeToggler$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeToggler$1,undo --> val$restoreData,org.jhotdraw.draw.action.AttributeToggler$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeToggler$1,undo --> val$selectedFigures,org.jhotdraw.draw.action.AttributeToggler$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeToggler$1,redo --> val$selectedFigures,org.jhotdraw.draw.action.AttributeToggler$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeToggler$1,redo --> this$0,org.jhotdraw.draw.action.AttributeToggler$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeToggler$1,redo --> val$newValue,org.jhotdraw.draw.action.AttributeToggler$1,READ);
Call(METHOD,org.jhotdraw.draw.action.AttributeToggler$1,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.AttributeToggler$1,getPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.AttributeToggler$1,undo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AttributeToggler$1,undo --> restoreAttributesTo,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AttributeToggler$1,undo --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AttributeToggler$1,redo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AttributeToggler$1,redo --> access$000,org.jhotdraw.draw.action.AttributeToggler,);
Call(METHOD,org.jhotdraw.draw.action.AttributeToggler$1,redo --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AttributeToggler$1,redo --> changed,org.jhotdraw.draw.Figure,);
EndClass 393
StartClass 394
Class(org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler,N,N,NA);
Attribute(this$0,org.jhotdraw.draw.action.AbstractSelectedAction,Public,N,Y,);
Method(<init>,void,Private,N,N);
Method(propertyChange,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(selectionChanged,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.action.AbstractSelectedAction,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Parameter(selectionChanged,org.jhotdraw.draw.event.FigureSelectionEvent,);
Parameter(<init>$2,org.jhotdraw.draw.action.AbstractSelectedAction,);
Parameter(<init>$2,org.jhotdraw.draw.action.AbstractSelectedAction$1,);
Realization(org.jhotdraw.draw.event.FigureSelectionListener);
Composition(org.jhotdraw.draw.action.AbstractSelectedAction);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler,<init>$2 --> <init>,org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler,<init> --> this$0,org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler,propertyChange --> this$0,org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler,toString --> this$0,org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler,selectionChanged --> this$0,org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler,READ);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler,propertyChange --> access$000,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler,propertyChange --> removeFigureSelectionListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler,propertyChange --> removePropertyChangeListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler,propertyChange --> access$002,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler,propertyChange --> addFigureSelectionListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler,propertyChange --> addPropertyChangeListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler,propertyChange --> updateEnabledState,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler,selectionChanged --> updateEnabledState,org.jhotdraw.draw.action.AbstractSelectedAction,);
EndClass 394
StartClass 395
Class(org.jhotdraw.draw.action.AbstractSelectedAction$1,N,N,NA);
EndClass 395
StartClass 396
Class(org.jhotdraw.draw.action.GroupAction$1,N,N,NA);
Attribute(val$view,org.jhotdraw.draw.DrawingView,Public,N,Y,);
Attribute(val$group,org.jhotdraw.draw.CompositeFigure,Public,N,Y,);
Attribute(val$ungroupedFigures,java.util.LinkedList,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.action.GroupAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(redo,void,Public,N,N);
Method(undo,void,Public,N,N);
Method(addEdit,boolean,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.action.GroupAction,);
Parameter(<init>,org.jhotdraw.draw.DrawingView,);
Parameter(<init>,org.jhotdraw.draw.CompositeFigure,);
Parameter(<init>,java.util.LinkedList,);
Parameter(addEdit,javax.swing.undo.UndoableEdit,);
Composition(org.jhotdraw.draw.DrawingView);
Composition(org.jhotdraw.draw.CompositeFigure);
Composition(org.jhotdraw.draw.action.GroupAction);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction$1,<init> --> this$0,org.jhotdraw.draw.action.GroupAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction$1,<init> --> val$view,org.jhotdraw.draw.action.GroupAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction$1,<init> --> val$group,org.jhotdraw.draw.action.GroupAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction$1,<init> --> val$ungroupedFigures,org.jhotdraw.draw.action.GroupAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction$1,redo --> this$0,org.jhotdraw.draw.action.GroupAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction$1,redo --> val$view,org.jhotdraw.draw.action.GroupAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction$1,redo --> val$group,org.jhotdraw.draw.action.GroupAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction$1,redo --> val$ungroupedFigures,org.jhotdraw.draw.action.GroupAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction$1,undo --> this$0,org.jhotdraw.draw.action.GroupAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction$1,undo --> val$view,org.jhotdraw.draw.action.GroupAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction$1,undo --> val$group,org.jhotdraw.draw.action.GroupAction$1,READ);
Call(METHOD,org.jhotdraw.draw.action.GroupAction$1,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction$1,getPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction$1,redo --> groupFigures,org.jhotdraw.draw.action.GroupAction,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction$1,undo --> ungroupFigures,org.jhotdraw.draw.action.GroupAction,);
EndClass 396
StartClass 397
Class(org.jhotdraw.draw.action.GroupAction$2,N,N,NA);
Attribute(val$view,org.jhotdraw.draw.DrawingView,Public,N,Y,);
Attribute(val$group,org.jhotdraw.draw.CompositeFigure,Public,N,Y,);
Attribute(val$ungroupedFigures,java.util.LinkedList,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.action.GroupAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(redo,void,Public,N,N);
Method(undo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.action.GroupAction,);
Parameter(<init>,org.jhotdraw.draw.DrawingView,);
Parameter(<init>,org.jhotdraw.draw.CompositeFigure,);
Parameter(<init>,java.util.LinkedList,);
Composition(org.jhotdraw.draw.DrawingView);
Composition(org.jhotdraw.draw.CompositeFigure);
Composition(org.jhotdraw.draw.action.GroupAction);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction$2,<init> --> this$0,org.jhotdraw.draw.action.GroupAction$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction$2,<init> --> val$view,org.jhotdraw.draw.action.GroupAction$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction$2,<init> --> val$group,org.jhotdraw.draw.action.GroupAction$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction$2,<init> --> val$ungroupedFigures,org.jhotdraw.draw.action.GroupAction$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction$2,redo --> this$0,org.jhotdraw.draw.action.GroupAction$2,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction$2,redo --> val$view,org.jhotdraw.draw.action.GroupAction$2,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction$2,redo --> val$group,org.jhotdraw.draw.action.GroupAction$2,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction$2,undo --> this$0,org.jhotdraw.draw.action.GroupAction$2,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction$2,undo --> val$view,org.jhotdraw.draw.action.GroupAction$2,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction$2,undo --> val$group,org.jhotdraw.draw.action.GroupAction$2,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.GroupAction$2,undo --> val$ungroupedFigures,org.jhotdraw.draw.action.GroupAction$2,READ);
Call(METHOD,org.jhotdraw.draw.action.GroupAction$2,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction$2,getPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction$2,redo --> ungroupFigures,org.jhotdraw.draw.action.GroupAction,);
Call(METHOD,org.jhotdraw.draw.action.GroupAction$2,undo --> groupFigures,org.jhotdraw.draw.action.GroupAction,);
EndClass 397
StartClass 398
Class(org.jhotdraw.draw.action.AttributeAction$1,N,N,NA);
Attribute(val$restoreData,java.util.ArrayList,Public,N,Y,);
Attribute(val$selectedFigures,java.util.ArrayList,Public,N,Y,);
Attribute(val$a,java.util.Map,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.action.AttributeAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.action.AttributeAction,);
Parameter(<init>,java.util.ArrayList,);
Parameter(<init>,java.util.ArrayList,);
Parameter(<init>,java.util.Map,);
Composition(org.jhotdraw.draw.action.AttributeAction);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeAction$1,<init> --> this$0,org.jhotdraw.draw.action.AttributeAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeAction$1,<init> --> val$restoreData,org.jhotdraw.draw.action.AttributeAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeAction$1,<init> --> val$selectedFigures,org.jhotdraw.draw.action.AttributeAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeAction$1,<init> --> val$a,org.jhotdraw.draw.action.AttributeAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeAction$1,getPresentationName --> this$0,org.jhotdraw.draw.action.AttributeAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeAction$1,undo --> val$restoreData,org.jhotdraw.draw.action.AttributeAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeAction$1,undo --> val$selectedFigures,org.jhotdraw.draw.action.AttributeAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeAction$1,redo --> val$selectedFigures,org.jhotdraw.draw.action.AttributeAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AttributeAction$1,redo --> val$a,org.jhotdraw.draw.action.AttributeAction$1,READ);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction$1,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction$1,getPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction$1,undo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction$1,undo --> restoreAttributesTo,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction$1,undo --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction$1,redo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction$1,redo --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.AttributeAction$1,redo --> changed,org.jhotdraw.draw.Figure,);
EndClass 398
StartClass 399
Class(org.jhotdraw.draw.action.SendToBackAction$1,N,N,NA);
Attribute(val$view,org.jhotdraw.draw.DrawingView,Public,N,Y,);
Attribute(val$figures,java.util.LinkedList,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.action.SendToBackAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(redo,void,Public,N,N);
Method(undo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.action.SendToBackAction,);
Parameter(<init>,org.jhotdraw.draw.DrawingView,);
Parameter(<init>,java.util.LinkedList,);
Composition(org.jhotdraw.draw.DrawingView);
Composition(org.jhotdraw.draw.action.SendToBackAction);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SendToBackAction$1,<init> --> this$0,org.jhotdraw.draw.action.SendToBackAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SendToBackAction$1,<init> --> val$view,org.jhotdraw.draw.action.SendToBackAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SendToBackAction$1,<init> --> val$figures,org.jhotdraw.draw.action.SendToBackAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SendToBackAction$1,redo --> val$view,org.jhotdraw.draw.action.SendToBackAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SendToBackAction$1,redo --> val$figures,org.jhotdraw.draw.action.SendToBackAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SendToBackAction$1,undo --> val$view,org.jhotdraw.draw.action.SendToBackAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SendToBackAction$1,undo --> val$figures,org.jhotdraw.draw.action.SendToBackAction$1,READ);
Call(METHOD,org.jhotdraw.draw.action.SendToBackAction$1,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.SendToBackAction$1,getPresentationName --> getTextProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.SendToBackAction$1,redo --> sendToBack,org.jhotdraw.draw.action.SendToBackAction,);
Call(METHOD,org.jhotdraw.draw.action.SendToBackAction$1,undo --> bringToFront,org.jhotdraw.draw.action.BringToFrontAction,);
EndClass 399
StartClass 400
Class(org.jhotdraw.draw.action.DefaultAttributeAction$1,N,N,NA);
Attribute(this$0,org.jhotdraw.draw.action.DefaultAttributeAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(propertyChange,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.action.DefaultAttributeAction,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Composition(org.jhotdraw.draw.action.DefaultAttributeAction);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DefaultAttributeAction$1,<init> --> this$0,org.jhotdraw.draw.action.DefaultAttributeAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DefaultAttributeAction$1,propertyChange --> this$0,org.jhotdraw.draw.action.DefaultAttributeAction$1,READ);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction$1,propertyChange --> access$000,org.jhotdraw.draw.action.DefaultAttributeAction,);
Call(METHOD,org.jhotdraw.draw.action.DefaultAttributeAction$1,propertyChange --> getKey,org.jhotdraw.draw.AttributeKey,);
EndClass 400
StartClass 401
Class(org.jhotdraw.gui.JComponentPopup$Handler,N,N,NA);
Attribute(this$0,org.jhotdraw.gui.JComponentPopup,Public,N,Y,);
Method(<init>,void,Private,N,N);
Method(eventDispatched,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>,org.jhotdraw.gui.JComponentPopup,);
Parameter(eventDispatched,java.awt.AWTEvent,);
Parameter(<init>$2,org.jhotdraw.gui.JComponentPopup,);
Parameter(<init>$2,org.jhotdraw.gui.JComponentPopup$1,);
Composition(org.jhotdraw.gui.JComponentPopup);
Call(METHOD,org.jhotdraw.gui.JComponentPopup$Handler,<init>$2 --> <init>,org.jhotdraw.gui.JComponentPopup$Handler,);
Call(ATTRIBUTE,org.jhotdraw.gui.JComponentPopup$Handler,<init> --> this$0,org.jhotdraw.gui.JComponentPopup$Handler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JComponentPopup$Handler,eventDispatched --> this$0,org.jhotdraw.gui.JComponentPopup$Handler,READ);
Call(METHOD,org.jhotdraw.gui.JComponentPopup$Handler,eventDispatched --> setVisible,org.jhotdraw.gui.JComponentPopup,);
EndClass 401
StartClass 402
Class(org.jhotdraw.gui.JComponentPopup$1,N,N,NA);
EndClass 402
StartClass 403
Class(org.jhotdraw.color.NamedColorSpace,Y,Y,Public);
Method(getName,java.lang.String,Public,N,Y);
EndClass 403
StartClass 404
Class(org.jhotdraw.draw.action.BringToFrontAction$1,N,N,NA);
Attribute(val$view,org.jhotdraw.draw.DrawingView,Public,N,Y,);
Attribute(val$figures,java.util.LinkedList,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.action.BringToFrontAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(redo,void,Public,N,N);
Method(undo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.action.BringToFrontAction,);
Parameter(<init>,org.jhotdraw.draw.DrawingView,);
Parameter(<init>,java.util.LinkedList,);
Composition(org.jhotdraw.draw.DrawingView);
Composition(org.jhotdraw.draw.action.BringToFrontAction);
Call(ATTRIBUTE,org.jhotdraw.draw.action.BringToFrontAction$1,<init> --> this$0,org.jhotdraw.draw.action.BringToFrontAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.BringToFrontAction$1,<init> --> val$view,org.jhotdraw.draw.action.BringToFrontAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.BringToFrontAction$1,<init> --> val$figures,org.jhotdraw.draw.action.BringToFrontAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.BringToFrontAction$1,redo --> val$view,org.jhotdraw.draw.action.BringToFrontAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.BringToFrontAction$1,redo --> val$figures,org.jhotdraw.draw.action.BringToFrontAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.BringToFrontAction$1,undo --> val$view,org.jhotdraw.draw.action.BringToFrontAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.BringToFrontAction$1,undo --> val$figures,org.jhotdraw.draw.action.BringToFrontAction$1,READ);
Call(METHOD,org.jhotdraw.draw.action.BringToFrontAction$1,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.BringToFrontAction$1,getPresentationName --> getTextProperty,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.BringToFrontAction$1,redo --> bringToFront,org.jhotdraw.draw.action.BringToFrontAction,);
Call(METHOD,org.jhotdraw.draw.action.BringToFrontAction$1,undo --> sendToBack,org.jhotdraw.draw.action.SendToBackAction,);
EndClass 404
StartClass 405
Class(org.jhotdraw.draw.action.FontChooserHandler$1,N,N,NA);
Attribute(val$restoreData,java.util.ArrayList,Public,N,Y,);
Attribute(val$selectedFigures,java.util.ArrayList,Public,N,Y,);
Attribute(val$undoValue,java.awt.Font,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.action.FontChooserHandler,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.action.FontChooserHandler,);
Parameter(<init>,java.util.ArrayList,);
Parameter(<init>,java.util.ArrayList,);
Parameter(<init>,java.awt.Font,);
Composition(org.jhotdraw.draw.action.FontChooserHandler);
Call(ATTRIBUTE,org.jhotdraw.draw.action.FontChooserHandler$1,<init> --> this$0,org.jhotdraw.draw.action.FontChooserHandler$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.FontChooserHandler$1,<init> --> val$restoreData,org.jhotdraw.draw.action.FontChooserHandler$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.FontChooserHandler$1,<init> --> val$selectedFigures,org.jhotdraw.draw.action.FontChooserHandler$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.FontChooserHandler$1,<init> --> val$undoValue,org.jhotdraw.draw.action.FontChooserHandler$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.FontChooserHandler$1,undo --> val$restoreData,org.jhotdraw.draw.action.FontChooserHandler$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.FontChooserHandler$1,undo --> val$selectedFigures,org.jhotdraw.draw.action.FontChooserHandler$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.FontChooserHandler$1,redo --> val$selectedFigures,org.jhotdraw.draw.action.FontChooserHandler$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.FontChooserHandler$1,redo --> this$0,org.jhotdraw.draw.action.FontChooserHandler$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.FontChooserHandler$1,redo --> val$undoValue,org.jhotdraw.draw.action.FontChooserHandler$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.FontChooserHandler$1,getPresentationName --> FONT_FACE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.FontChooserHandler$1,redo --> key,org.jhotdraw.draw.action.FontChooserHandler,READ);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler$1,getPresentationName --> getPresentationName,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler$1,undo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler$1,undo --> restoreAttributesTo,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler$1,undo --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler$1,redo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler$1,redo --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.FontChooserHandler$1,redo --> changed,org.jhotdraw.draw.Figure,);
EndClass 405
StartClass 406
Class(org.jhotdraw.draw.action.AbstractDrawingViewAction,N,Y,Public);
Attribute(editor,org.jhotdraw.draw.DrawingEditor,Private,N,N,);
Attribute(specificView,org.jhotdraw.draw.DrawingView,Private,N,N,);
Attribute(activeView,org.jhotdraw.draw.DrawingView,Private,N,N,);
Attribute(eventHandler,org.jhotdraw.draw.action.AbstractDrawingViewAction$EventHandler,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(setEditor,void,Protected,N,N);
Method(getEditor,org.jhotdraw.draw.DrawingEditor,Protected,N,N);
Method(getView,org.jhotdraw.draw.DrawingView,Protected,N,N);
Method(getDrawing,org.jhotdraw.draw.Drawing,Protected,N,N);
Method(fireUndoableEditHappened,void,Protected,N,N);
Method(updateEnabledState,void,Protected,N,N);
Method(updateViewState,void,Protected,N,N);
Method(dispose,void,Public,N,N);
Method(setUpdateEnabledState,void,Public,N,N);
Method(isUpdatEnabledState,boolean,Public,N,N);
Method(unregisterEventHandler,void,Private,N,N);
Method(registerEventHandler,void,Private,N,N);
Method(access$000,org.jhotdraw.draw.DrawingView,Public,Y,N);
Method(access$100,org.jhotdraw.draw.action.AbstractDrawingViewAction$EventHandler,Public,Y,N);
Method(access$002,org.jhotdraw.draw.DrawingView,Public,Y,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$2,org.jhotdraw.draw.DrawingView,);
Parameter(setEditor,org.jhotdraw.draw.DrawingEditor,);
Parameter(fireUndoableEditHappened,javax.swing.undo.UndoableEdit,);
Parameter(setUpdateEnabledState,boolean,);
Parameter(access$000,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Parameter(access$100,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Parameter(access$002,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Parameter(access$002,org.jhotdraw.draw.DrawingView,);
SubClass(org.jhotdraw.draw.action.DrawingAttributeAction);
SubClass(org.jhotdraw.draw.action.DrawingColorChooserHandler);
SubClass(org.jhotdraw.draw.action.ButtonFactory$5);
SubClass(org.jhotdraw.draw.action.ZoomAction);
Realization(org.jhotdraw.app.Disposable);
Composition(org.jhotdraw.draw.DrawingEditor);
Composition(org.jhotdraw.draw.DrawingView);
Composition(org.jhotdraw.draw.action.AbstractDrawingViewAction$EventHandler);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,<init> --> setEditor,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,<init>$2 --> registerEventHandler,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,setEditor --> unregisterEventHandler,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,setEditor --> registerEventHandler,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,setEditor --> updateEnabledState,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,getDrawing --> getView,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,fireUndoableEditHappened --> getDrawing,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,updateEnabledState --> getView,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,dispose --> setEditor,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,setUpdateEnabledState --> registerEventHandler,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,setUpdateEnabledState --> unregisterEventHandler,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,setUpdateEnabledState --> updateEnabledState,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction,<init> --> eventHandler,org.jhotdraw.draw.action.AbstractDrawingViewAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction,<init>$2 --> eventHandler,org.jhotdraw.draw.action.AbstractDrawingViewAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction,<init>$2 --> specificView,org.jhotdraw.draw.action.AbstractDrawingViewAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction,setEditor --> eventHandler,org.jhotdraw.draw.action.AbstractDrawingViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction,setEditor --> editor,org.jhotdraw.draw.action.AbstractDrawingViewAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction,getEditor --> editor,org.jhotdraw.draw.action.AbstractDrawingViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction,getView --> specificView,org.jhotdraw.draw.action.AbstractDrawingViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction,getView --> editor,org.jhotdraw.draw.action.AbstractDrawingViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction,setUpdateEnabledState --> eventHandler,org.jhotdraw.draw.action.AbstractDrawingViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction,setUpdateEnabledState --> eventHandler,org.jhotdraw.draw.action.AbstractDrawingViewAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction,isUpdatEnabledState --> eventHandler,org.jhotdraw.draw.action.AbstractDrawingViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction,unregisterEventHandler --> editor,org.jhotdraw.draw.action.AbstractDrawingViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction,unregisterEventHandler --> eventHandler,org.jhotdraw.draw.action.AbstractDrawingViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction,unregisterEventHandler --> activeView,org.jhotdraw.draw.action.AbstractDrawingViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction,unregisterEventHandler --> specificView,org.jhotdraw.draw.action.AbstractDrawingViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction,unregisterEventHandler --> activeView,org.jhotdraw.draw.action.AbstractDrawingViewAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction,registerEventHandler --> specificView,org.jhotdraw.draw.action.AbstractDrawingViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction,registerEventHandler --> eventHandler,org.jhotdraw.draw.action.AbstractDrawingViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction,registerEventHandler --> editor,org.jhotdraw.draw.action.AbstractDrawingViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction,registerEventHandler --> activeView,org.jhotdraw.draw.action.AbstractDrawingViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction,registerEventHandler --> activeView,org.jhotdraw.draw.action.AbstractDrawingViewAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction,access$000 --> activeView,org.jhotdraw.draw.action.AbstractDrawingViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction,access$100 --> eventHandler,org.jhotdraw.draw.action.AbstractDrawingViewAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction,access$002 --> activeView,org.jhotdraw.draw.action.AbstractDrawingViewAction,WRITE);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,<init> --> <init>$2,org.jhotdraw.draw.action.AbstractDrawingViewAction$EventHandler,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,<init>$2 --> <init>$2,org.jhotdraw.draw.action.AbstractDrawingViewAction$EventHandler,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,getView --> getActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,getDrawing --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,fireUndoableEditHappened --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,updateEnabledState --> isEnabled,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,setUpdateEnabledState --> <init>$2,org.jhotdraw.draw.action.AbstractDrawingViewAction$EventHandler,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,unregisterEventHandler --> removePropertyChangeListener,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,unregisterEventHandler --> removePropertyChangeListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,registerEventHandler --> addPropertyChangeListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,registerEventHandler --> <init>,org.jhotdraw.beans.WeakPropertyChangeListener,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,registerEventHandler --> addPropertyChangeListener,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,registerEventHandler --> removePropertyChangeListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction,registerEventHandler --> getActiveView,org.jhotdraw.draw.DrawingEditor,);
EndClass 406
StartClass 407
Class(org.jhotdraw.draw.action.DrawingAttributeAction$1,N,N,NA);
Attribute(val$restoreData,java.util.ArrayList,Public,N,Y,);
Attribute(val$drawing,org.jhotdraw.draw.Figure,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.action.DrawingAttributeAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.action.DrawingAttributeAction,);
Parameter(<init>,java.util.ArrayList,);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Composition(org.jhotdraw.draw.Figure);
Composition(org.jhotdraw.draw.action.DrawingAttributeAction);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingAttributeAction$1,<init> --> this$0,org.jhotdraw.draw.action.DrawingAttributeAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingAttributeAction$1,<init> --> val$restoreData,org.jhotdraw.draw.action.DrawingAttributeAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingAttributeAction$1,<init> --> val$drawing,org.jhotdraw.draw.action.DrawingAttributeAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingAttributeAction$1,getPresentationName --> this$0,org.jhotdraw.draw.action.DrawingAttributeAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingAttributeAction$1,undo --> val$restoreData,org.jhotdraw.draw.action.DrawingAttributeAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingAttributeAction$1,undo --> val$drawing,org.jhotdraw.draw.action.DrawingAttributeAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingAttributeAction$1,redo --> val$drawing,org.jhotdraw.draw.action.DrawingAttributeAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingAttributeAction$1,redo --> this$0,org.jhotdraw.draw.action.DrawingAttributeAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingAttributeAction$1,redo --> attributes,org.jhotdraw.draw.action.DrawingAttributeAction,READ);
Call(METHOD,org.jhotdraw.draw.action.DrawingAttributeAction$1,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.DrawingAttributeAction$1,getPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.action.DrawingAttributeAction$1,undo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.DrawingAttributeAction$1,undo --> restoreAttributesTo,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.DrawingAttributeAction$1,undo --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.DrawingAttributeAction$1,redo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.DrawingAttributeAction$1,redo --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.DrawingAttributeAction$1,redo --> changed,org.jhotdraw.draw.Figure,);
EndClass 407
StartClass 408
Class(org.jhotdraw.draw.action.SelectionColorChooserHandler,N,N,Public);
Attribute(key,org.jhotdraw.draw.AttributeKey,Protected,N,N,java.awt.Color);
Attribute(colorChooser,javax.swing.JColorChooser,Protected,N,N,);
Attribute(popupMenu,javax.swing.JPopupMenu,Protected,N,N,);
Attribute(isUpdating,int,Protected,N,N,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(applySelectedColorToFigures,void,Protected,N,N);
Method(updateEnabledState,void,Protected,N,N);
Method(stateChanged,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(<init>,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>,javax.swing.JColorChooser,);
Parameter(<init>,javax.swing.JPopupMenu,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(stateChanged,javax.swing.event.ChangeEvent,);
SuperClass(org.jhotdraw.draw.action.AbstractSelectedAction);
Generalization(org.jhotdraw.draw.action.AbstractSelectedAction);
Composition(org.jhotdraw.draw.AttributeKey);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler,<init> --> updateEnabledState,org.jhotdraw.draw.action.SelectionColorChooserHandler,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler,stateChanged --> applySelectedColorToFigures,org.jhotdraw.draw.action.SelectionColorChooserHandler,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserHandler,<init> --> key,org.jhotdraw.draw.action.SelectionColorChooserHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserHandler,<init> --> colorChooser,org.jhotdraw.draw.action.SelectionColorChooserHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserHandler,<init> --> popupMenu,org.jhotdraw.draw.action.SelectionColorChooserHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserHandler,actionPerformed --> popupMenu,org.jhotdraw.draw.action.SelectionColorChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserHandler,applySelectedColorToFigures --> colorChooser,org.jhotdraw.draw.action.SelectionColorChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserHandler,applySelectedColorToFigures --> key,org.jhotdraw.draw.action.SelectionColorChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserHandler,updateEnabledState --> colorChooser,org.jhotdraw.draw.action.SelectionColorChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserHandler,updateEnabledState --> popupMenu,org.jhotdraw.draw.action.SelectionColorChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserHandler,updateEnabledState --> isUpdating,org.jhotdraw.draw.action.SelectionColorChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserHandler,updateEnabledState --> key,org.jhotdraw.draw.action.SelectionColorChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserHandler,updateEnabledState --> isUpdating,org.jhotdraw.draw.action.SelectionColorChooserHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserHandler,stateChanged --> isUpdating,org.jhotdraw.draw.action.SelectionColorChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserHandler,stateChanged --> isUpdating,org.jhotdraw.draw.action.SelectionColorChooserHandler,WRITE);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler,<init> --> <init>,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler,applySelectedColorToFigures --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler,applySelectedColorToFigures --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler,applySelectedColorToFigures --> getAttributesRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler,applySelectedColorToFigures --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler,applySelectedColorToFigures --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler,applySelectedColorToFigures --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler,applySelectedColorToFigures --> getEditor,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler,applySelectedColorToFigures --> setDefaultAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler,applySelectedColorToFigures --> <init>,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler,applySelectedColorToFigures --> fireUndoableEditHappened,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler,updateEnabledState --> getEditor,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler,updateEnabledState --> isEnabled,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler,updateEnabledState --> getView,org.jhotdraw.draw.action.AbstractSelectedAction,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler,updateEnabledState --> getSelectionCount,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler,updateEnabledState --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler,updateEnabledState --> get,org.jhotdraw.draw.Figure,);
EndClass 408
StartClass 409
Class(org.jhotdraw.draw.action.DrawingColorChooserHandler,N,N,Public);
Attribute(key,org.jhotdraw.draw.AttributeKey,Protected,N,N,java.awt.Color);
Attribute(colorChooser,javax.swing.JColorChooser,Protected,N,N,);
Attribute(popupMenu,javax.swing.JPopupMenu,Protected,N,N,);
Attribute(isUpdating,int,Protected,N,N,);
Method(<init>,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(applySelectedColorToFigures,void,Protected,N,N);
Method(updateEnabledState,void,Protected,N,N);
Method(stateChanged,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,java.awt.Color);
Parameter(<init>,org.jhotdraw.draw.AttributeKey,);
Parameter(<init>,javax.swing.JColorChooser,);
Parameter(<init>,javax.swing.JPopupMenu,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(stateChanged,javax.swing.event.ChangeEvent,);
SuperClass(org.jhotdraw.draw.action.AbstractDrawingViewAction);
Generalization(org.jhotdraw.draw.action.AbstractDrawingViewAction);
Composition(org.jhotdraw.draw.AttributeKey);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler,<init> --> updateEnabledState,org.jhotdraw.draw.action.DrawingColorChooserHandler,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler,stateChanged --> applySelectedColorToFigures,org.jhotdraw.draw.action.DrawingColorChooserHandler,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserHandler,<init> --> key,org.jhotdraw.draw.action.DrawingColorChooserHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserHandler,<init> --> colorChooser,org.jhotdraw.draw.action.DrawingColorChooserHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserHandler,<init> --> popupMenu,org.jhotdraw.draw.action.DrawingColorChooserHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserHandler,actionPerformed --> popupMenu,org.jhotdraw.draw.action.DrawingColorChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserHandler,applySelectedColorToFigures --> colorChooser,org.jhotdraw.draw.action.DrawingColorChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserHandler,applySelectedColorToFigures --> key,org.jhotdraw.draw.action.DrawingColorChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserHandler,updateEnabledState --> colorChooser,org.jhotdraw.draw.action.DrawingColorChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserHandler,updateEnabledState --> popupMenu,org.jhotdraw.draw.action.DrawingColorChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserHandler,updateEnabledState --> isUpdating,org.jhotdraw.draw.action.DrawingColorChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserHandler,updateEnabledState --> key,org.jhotdraw.draw.action.DrawingColorChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserHandler,updateEnabledState --> isUpdating,org.jhotdraw.draw.action.DrawingColorChooserHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserHandler,stateChanged --> isUpdating,org.jhotdraw.draw.action.DrawingColorChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserHandler,stateChanged --> isUpdating,org.jhotdraw.draw.action.DrawingColorChooserHandler,WRITE);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler,<init> --> <init>,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler,applySelectedColorToFigures --> getView,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler,applySelectedColorToFigures --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler,applySelectedColorToFigures --> getAttributesRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler,applySelectedColorToFigures --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler,applySelectedColorToFigures --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler,applySelectedColorToFigures --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler,applySelectedColorToFigures --> getEditor,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler,applySelectedColorToFigures --> setDefaultAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler,applySelectedColorToFigures --> <init>,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler,applySelectedColorToFigures --> fireUndoableEditHappened,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler,updateEnabledState --> getEditor,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler,updateEnabledState --> isEnabled,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler,updateEnabledState --> getView,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler,updateEnabledState --> getSelectionCount,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler,updateEnabledState --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler,updateEnabledState --> get,org.jhotdraw.draw.Figure,);
EndClass 409
StartClass 410
Class(org.jhotdraw.gui.JPopupButton$Handler,N,N,NA);
Attribute(this$0,org.jhotdraw.gui.JPopupButton,Public,N,Y,);
Method(<init>,void,Private,N,N);
Method(propertyChange,void,Public,N,N);
Method(popupMenuWillBecomeVisible,void,Public,N,N);
Method(popupMenuWillBecomeInvisible,void,Public,N,N);
Method(popupMenuCanceled,void,Public,N,N);
Method(eventDispatched,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>,org.jhotdraw.gui.JPopupButton,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Parameter(popupMenuWillBecomeVisible,javax.swing.event.PopupMenuEvent,);
Parameter(popupMenuWillBecomeInvisible,javax.swing.event.PopupMenuEvent,);
Parameter(popupMenuCanceled,javax.swing.event.PopupMenuEvent,);
Parameter(eventDispatched,java.awt.AWTEvent,);
Parameter(<init>$2,org.jhotdraw.gui.JPopupButton,);
Parameter(<init>$2,org.jhotdraw.gui.JPopupButton$1,);
Composition(org.jhotdraw.gui.JPopupButton);
Call(METHOD,org.jhotdraw.gui.JPopupButton$Handler,<init>$2 --> <init>,org.jhotdraw.gui.JPopupButton$Handler,);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton$Handler,<init> --> this$0,org.jhotdraw.gui.JPopupButton$Handler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton$Handler,propertyChange --> this$0,org.jhotdraw.gui.JPopupButton$Handler,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton$Handler,popupMenuWillBecomeInvisible --> this$0,org.jhotdraw.gui.JPopupButton$Handler,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton$Handler,eventDispatched --> this$0,org.jhotdraw.gui.JPopupButton$Handler,READ);
Call(METHOD,org.jhotdraw.gui.JPopupButton$Handler,popupMenuWillBecomeInvisible --> access$002,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.gui.JPopupButton$Handler,eventDispatched --> access$100,org.jhotdraw.gui.JPopupButton,);
EndClass 410
StartClass 411
Class(org.jhotdraw.gui.plaf.palette.PaletteMenuItemUI,N,N,Public);
Method(<init>,void,Public,N,N);
Method(installDefaults,void,Protected,N,N);
Method(getPreferredMenuItemSize,java.awt.Dimension,Protected,N,N);
Method(paint,void,Public,N,N);
Parameter(getPreferredMenuItemSize,javax.swing.JComponent,);
Parameter(getPreferredMenuItemSize,javax.swing.Icon,);
Parameter(getPreferredMenuItemSize,javax.swing.Icon,);
Parameter(getPreferredMenuItemSize,int,);
Parameter(paint,java.awt.Graphics,);
Parameter(paint,javax.swing.JComponent,);
EndClass 411
StartClass 412
Class(org.jhotdraw.gui.JPopupButton$1,N,N,NA);
Attribute(this$0,org.jhotdraw.gui.JPopupButton,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(mousePressed,void,Public,N,N);
Method(mouseReleased,void,Public,N,N);
Parameter(<init>,org.jhotdraw.gui.JPopupButton,);
Parameter(mousePressed,java.awt.event.MouseEvent,);
Parameter(mouseReleased,java.awt.event.MouseEvent,);
Composition(org.jhotdraw.gui.JPopupButton);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton$1,<init> --> this$0,org.jhotdraw.gui.JPopupButton$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton$1,mousePressed --> this$0,org.jhotdraw.gui.JPopupButton$1,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JPopupButton$1,mouseReleased --> this$0,org.jhotdraw.gui.JPopupButton$1,READ);
Call(METHOD,org.jhotdraw.gui.JPopupButton$1,mousePressed --> access$300,org.jhotdraw.gui.JPopupButton,);
Call(METHOD,org.jhotdraw.gui.JPopupButton$1,mouseReleased --> access$400,org.jhotdraw.gui.JPopupButton,);
EndClass 412
StartClass 413
Class(org.jhotdraw.gui.VerticalGridLayout,N,N,Public);
Attribute(hgap,int,Public,N,N,);
Attribute(vgap,int,Public,N,N,);
Attribute(rows,int,Public,N,N,);
Attribute(cols,int,Public,N,N,);
Attribute(isVertical,boolean,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(<init>$5,void,Public,N,N);
Method(getRows,int,Public,N,N);
Method(setRows,void,Public,N,N);
Method(setVertical,void,Public,N,N);
Method(isVertical,boolean,Public,N,N);
Method(getColumns,int,Public,N,N);
Method(setColumns,void,Public,N,N);
Method(getHgap,int,Public,N,N);
Method(setHgap,void,Public,N,N);
Method(getVgap,int,Public,N,N);
Method(setVgap,void,Public,N,N);
Method(addLayoutComponent,void,Public,N,N);
Method(removeLayoutComponent,void,Public,N,N);
Method(preferredLayoutSize,java.awt.Dimension,Public,N,N);
Method(minimumLayoutSize,java.awt.Dimension,Public,N,N);
Method(layoutContainer,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Parameter(<init>$2,int,);
Parameter(<init>$2,int,);
Parameter(<init>$3,int,);
Parameter(<init>$3,int,);
Parameter(<init>$3,boolean,);
Parameter(<init>$4,int,);
Parameter(<init>$4,int,);
Parameter(<init>$4,int,);
Parameter(<init>$4,int,);
Parameter(<init>$5,int,);
Parameter(<init>$5,int,);
Parameter(<init>$5,int,);
Parameter(<init>$5,int,);
Parameter(<init>$5,boolean,);
Parameter(setRows,int,);
Parameter(setVertical,boolean,);
Parameter(setColumns,int,);
Parameter(setHgap,int,);
Parameter(setVgap,int,);
Parameter(addLayoutComponent,java.lang.String,);
Parameter(addLayoutComponent,java.awt.Component,);
Parameter(removeLayoutComponent,java.awt.Component,);
Parameter(preferredLayoutSize,java.awt.Container,);
Parameter(minimumLayoutSize,java.awt.Container,);
Parameter(layoutContainer,java.awt.Container,);
Call(METHOD,org.jhotdraw.gui.VerticalGridLayout,<init> --> <init>$4,org.jhotdraw.gui.VerticalGridLayout,);
Call(METHOD,org.jhotdraw.gui.VerticalGridLayout,<init>$2 --> <init>$4,org.jhotdraw.gui.VerticalGridLayout,);
Call(METHOD,org.jhotdraw.gui.VerticalGridLayout,<init>$3 --> <init>$5,org.jhotdraw.gui.VerticalGridLayout,);
Call(METHOD,org.jhotdraw.gui.VerticalGridLayout,<init>$4 --> <init>$5,org.jhotdraw.gui.VerticalGridLayout,);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,<init>$5 --> isVertical,org.jhotdraw.gui.VerticalGridLayout,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,<init>$5 --> rows,org.jhotdraw.gui.VerticalGridLayout,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,<init>$5 --> cols,org.jhotdraw.gui.VerticalGridLayout,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,<init>$5 --> hgap,org.jhotdraw.gui.VerticalGridLayout,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,<init>$5 --> vgap,org.jhotdraw.gui.VerticalGridLayout,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,getRows --> rows,org.jhotdraw.gui.VerticalGridLayout,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,setRows --> cols,org.jhotdraw.gui.VerticalGridLayout,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,setRows --> rows,org.jhotdraw.gui.VerticalGridLayout,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,setVertical --> isVertical,org.jhotdraw.gui.VerticalGridLayout,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,isVertical --> isVertical,org.jhotdraw.gui.VerticalGridLayout,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,getColumns --> cols,org.jhotdraw.gui.VerticalGridLayout,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,setColumns --> rows,org.jhotdraw.gui.VerticalGridLayout,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,setColumns --> cols,org.jhotdraw.gui.VerticalGridLayout,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,getHgap --> hgap,org.jhotdraw.gui.VerticalGridLayout,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,setHgap --> hgap,org.jhotdraw.gui.VerticalGridLayout,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,getVgap --> vgap,org.jhotdraw.gui.VerticalGridLayout,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,setVgap --> vgap,org.jhotdraw.gui.VerticalGridLayout,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,preferredLayoutSize --> rows,org.jhotdraw.gui.VerticalGridLayout,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,preferredLayoutSize --> cols,org.jhotdraw.gui.VerticalGridLayout,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,preferredLayoutSize --> hgap,org.jhotdraw.gui.VerticalGridLayout,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,preferredLayoutSize --> vgap,org.jhotdraw.gui.VerticalGridLayout,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,minimumLayoutSize --> rows,org.jhotdraw.gui.VerticalGridLayout,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,minimumLayoutSize --> cols,org.jhotdraw.gui.VerticalGridLayout,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,minimumLayoutSize --> hgap,org.jhotdraw.gui.VerticalGridLayout,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,minimumLayoutSize --> vgap,org.jhotdraw.gui.VerticalGridLayout,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,layoutContainer --> rows,org.jhotdraw.gui.VerticalGridLayout,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,layoutContainer --> cols,org.jhotdraw.gui.VerticalGridLayout,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,layoutContainer --> hgap,org.jhotdraw.gui.VerticalGridLayout,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,layoutContainer --> vgap,org.jhotdraw.gui.VerticalGridLayout,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,layoutContainer --> isVertical,org.jhotdraw.gui.VerticalGridLayout,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,toString --> hgap,org.jhotdraw.gui.VerticalGridLayout,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,toString --> vgap,org.jhotdraw.gui.VerticalGridLayout,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,toString --> rows,org.jhotdraw.gui.VerticalGridLayout,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.VerticalGridLayout,toString --> cols,org.jhotdraw.gui.VerticalGridLayout,READ);
EndClass 413
StartClass 414
Class(org.jhotdraw.gui.fontchooser.FontChooserModel,Y,Y,Public);
Method(isEditable,boolean,Public,N,Y);
Parameter(isEditable,javax.swing.tree.MutableTreeNode,);
EndClass 414
StartClass 415
Class(org.jhotdraw.gui.plaf.FontChooserUI,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI);
EndClass 415
StartClass 416
Class(org.jhotdraw.gui.fontchooser.FontFamilyNode,N,N,Public);
Attribute(parent,org.jhotdraw.gui.fontchooser.FontCollectionNode,Private,N,N,);
Attribute(name,java.lang.String,Private,N,N,);
Attribute(children,java.util.ArrayList,Private,N,N,org.jhotdraw.gui.fontchooser.FontFaceNode);
Method(<init>,void,Public,N,N);
Method(compareTo,int,Public,N,N);
Method(clone,org.jhotdraw.gui.fontchooser.FontFamilyNode,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(add,void,Public,N,N);
Method(insert,void,Public,N,N);
Method(remove,void,Public,N,N);
Method(remove$2,void,Public,N,N);
Method(setUserObject,void,Public,N,N);
Method(removeFromParent,void,Public,N,N);
Method(setParent,void,Public,N,N);
Method(getChildAt,org.jhotdraw.gui.fontchooser.FontFaceNode,Public,N,N);
Method(getChildCount,int,Public,N,N);
Method(getParent,javax.swing.tree.TreeNode,Public,N,N);
Method(getIndex,int,Public,N,N);
Method(getAllowsChildren,boolean,Public,N,N);
Method(isLeaf,boolean,Public,N,N);
Method(children,java.util.Enumeration,Public,N,N);
Method(faces,java.util.List,Public,N,N);
Method(isNodeChild,boolean,Public,N,N);
Method(isEditable,boolean,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(clone$2,java.lang.Object,Public,N,N);
Method(getChildAt$2,javax.swing.tree.TreeNode,Public,N,N);
Method(compareTo$2,int,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(compareTo,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Parameter(add,org.jhotdraw.gui.fontchooser.FontFaceNode,);
Parameter(insert,javax.swing.tree.MutableTreeNode,);
Parameter(insert,int,);
Parameter(remove,int,);
Parameter(remove$2,javax.swing.tree.MutableTreeNode,);
Parameter(setUserObject,java.lang.Object,);
Parameter(setParent,javax.swing.tree.MutableTreeNode,);
Parameter(getChildAt,int,);
Parameter(getIndex,javax.swing.tree.TreeNode,);
Parameter(isNodeChild,javax.swing.tree.TreeNode,);
Parameter(equals,java.lang.Object,);
Parameter(getChildAt$2,int,);
Parameter(compareTo$2,java.lang.Object,);
Composition(org.jhotdraw.gui.fontchooser.FontCollectionNode);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontFamilyNode,clone --> getChildCount,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontFamilyNode,clone --> insert,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontFamilyNode,add --> getChildCount,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontFamilyNode,add --> insert,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontFamilyNode,insert --> remove$2,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontFamilyNode,remove --> getChildAt,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontFamilyNode,remove$2 --> isNodeChild,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontFamilyNode,remove$2 --> getIndex,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontFamilyNode,remove$2 --> remove,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontFamilyNode,isNodeChild --> getChildCount,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontFamilyNode,clone$2 --> clone,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontFamilyNode,getChildAt$2 --> getChildAt,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontFamilyNode,compareTo$2 --> compareTo,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFamilyNode,<init> --> children,org.jhotdraw.gui.fontchooser.FontFamilyNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFamilyNode,<init> --> name,org.jhotdraw.gui.fontchooser.FontFamilyNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFamilyNode,compareTo --> name,org.jhotdraw.gui.fontchooser.FontFamilyNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFamilyNode,clone --> children,org.jhotdraw.gui.fontchooser.FontFamilyNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFamilyNode,clone --> parent,org.jhotdraw.gui.fontchooser.FontFamilyNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFamilyNode,clone --> children,org.jhotdraw.gui.fontchooser.FontFamilyNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFamilyNode,getName --> name,org.jhotdraw.gui.fontchooser.FontFamilyNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFamilyNode,toString --> name,org.jhotdraw.gui.fontchooser.FontFamilyNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFamilyNode,insert --> children,org.jhotdraw.gui.fontchooser.FontFamilyNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFamilyNode,remove --> children,org.jhotdraw.gui.fontchooser.FontFamilyNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFamilyNode,removeFromParent --> parent,org.jhotdraw.gui.fontchooser.FontFamilyNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFamilyNode,setParent --> parent,org.jhotdraw.gui.fontchooser.FontFamilyNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFamilyNode,getChildAt --> children,org.jhotdraw.gui.fontchooser.FontFamilyNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFamilyNode,getChildCount --> children,org.jhotdraw.gui.fontchooser.FontFamilyNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFamilyNode,getParent --> parent,org.jhotdraw.gui.fontchooser.FontFamilyNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFamilyNode,getIndex --> children,org.jhotdraw.gui.fontchooser.FontFamilyNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFamilyNode,isLeaf --> children,org.jhotdraw.gui.fontchooser.FontFamilyNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFamilyNode,children --> children,org.jhotdraw.gui.fontchooser.FontFamilyNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFamilyNode,faces --> children,org.jhotdraw.gui.fontchooser.FontFamilyNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFamilyNode,hashCode --> name,org.jhotdraw.gui.fontchooser.FontFamilyNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFamilyNode,equals --> name,org.jhotdraw.gui.fontchooser.FontFamilyNode,READ);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontFamilyNode,clone --> clone,org.jhotdraw.gui.fontchooser.FontFaceNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontFamilyNode,removeFromParent --> remove$2,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
EndClass 416
StartClass 417
Class(org.jhotdraw.gui.JFontChooser$1,N,N,NA);
Attribute(this$0,org.jhotdraw.gui.JFontChooser,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(treeNodesChanged,void,Public,N,N);
Method(treeNodesInserted,void,Public,N,N);
Method(treeNodesRemoved,void,Public,N,N);
Method(treeStructureChanged,void,Public,N,N);
Parameter(<init>,org.jhotdraw.gui.JFontChooser,);
Parameter(treeNodesChanged,javax.swing.event.TreeModelEvent,);
Parameter(treeNodesInserted,javax.swing.event.TreeModelEvent,);
Parameter(treeNodesRemoved,javax.swing.event.TreeModelEvent,);
Parameter(treeStructureChanged,javax.swing.event.TreeModelEvent,);
Composition(org.jhotdraw.gui.JFontChooser);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser$1,<init> --> this$0,org.jhotdraw.gui.JFontChooser$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser$1,treeNodesChanged --> this$0,org.jhotdraw.gui.JFontChooser$1,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser$1,treeNodesInserted --> this$0,org.jhotdraw.gui.JFontChooser$1,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser$1,treeNodesRemoved --> this$0,org.jhotdraw.gui.JFontChooser$1,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser$1,treeStructureChanged --> this$0,org.jhotdraw.gui.JFontChooser$1,READ);
Call(METHOD,org.jhotdraw.gui.JFontChooser$1,treeNodesChanged --> getSelectedFont,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.JFontChooser$1,treeNodesChanged --> updateSelectionPath,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.JFontChooser$1,treeNodesInserted --> getSelectedFont,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.JFontChooser$1,treeNodesInserted --> updateSelectionPath,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.JFontChooser$1,treeNodesRemoved --> getSelectedFont,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.JFontChooser$1,treeNodesRemoved --> updateSelectionPath,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.JFontChooser$1,treeStructureChanged --> getSelectedFont,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.JFontChooser$1,treeStructureChanged --> updateSelectionPath,org.jhotdraw.gui.JFontChooser,);
EndClass 417
StartClass 418
Class(org.jhotdraw.gui.fontchooser.FontCollectionNode,N,N,Public);
Attribute(parent,javax.swing.tree.MutableTreeNode,Private,N,N,);
Attribute(name,java.lang.String,Private,N,N,);
Attribute(children,java.util.ArrayList,Private,N,N,org.jhotdraw.gui.fontchooser.FontFamilyNode);
Attribute(isEditable,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(compareTo,int,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(clone,org.jhotdraw.gui.fontchooser.FontCollectionNode,Public,N,N);
Method(add,void,Public,N,N);
Method(addAll,void,Public,N,N);
Method(insert,void,Public,N,N);
Method(remove,void,Public,N,N);
Method(remove$2,void,Public,N,N);
Method(setUserObject,void,Public,N,N);
Method(removeFromParent,void,Public,N,N);
Method(setParent,void,Public,N,N);
Method(getChildAt,org.jhotdraw.gui.fontchooser.FontFamilyNode,Public,N,N);
Method(getChildCount,int,Public,N,N);
Method(getParent,javax.swing.tree.MutableTreeNode,Public,N,N);
Method(getIndex,int,Public,N,N);
Method(getAllowsChildren,boolean,Public,N,N);
Method(isLeaf,boolean,Public,N,N);
Method(children,java.util.Enumeration,Public,N,N);
Method(families,java.util.List,Public,N,N);
Method(isNodeChild,boolean,Public,N,N);
Method(isEditable,boolean,Public,N,N);
Method(setEditable,void,Public,N,N);
Method(clone$2,java.lang.Object,Public,N,N);
Method(getParent$2,javax.swing.tree.TreeNode,Public,N,N);
Method(getChildAt$2,javax.swing.tree.TreeNode,Public,N,N);
Method(compareTo$2,int,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>$2,java.lang.String,org.jhotdraw.gui.fontchooser.FontFamilyNode);
Parameter(<init>$2,java.util.ArrayList,);
Parameter(compareTo,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Parameter(add,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Parameter(addAll,java.util.Collection,org.jhotdraw.gui.fontchooser.FontFamilyNode);
Parameter(insert,javax.swing.tree.MutableTreeNode,);
Parameter(insert,int,);
Parameter(remove,int,);
Parameter(remove$2,javax.swing.tree.MutableTreeNode,);
Parameter(setUserObject,java.lang.Object,);
Parameter(setParent,javax.swing.tree.MutableTreeNode,);
Parameter(getChildAt,int,);
Parameter(getIndex,javax.swing.tree.TreeNode,);
Parameter(isNodeChild,javax.swing.tree.TreeNode,);
Parameter(setEditable,boolean,);
Parameter(getChildAt$2,int,);
Parameter(compareTo$2,java.lang.Object,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontCollectionNode,clone --> getChildCount,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontCollectionNode,clone --> insert,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontCollectionNode,add --> getChildCount,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontCollectionNode,add --> insert,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontCollectionNode,insert --> remove$2,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontCollectionNode,remove --> getChildAt,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontCollectionNode,remove$2 --> isNodeChild,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontCollectionNode,remove$2 --> getIndex,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontCollectionNode,remove$2 --> remove,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontCollectionNode,isNodeChild --> getChildCount,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontCollectionNode,clone$2 --> clone,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontCollectionNode,getParent$2 --> getParent,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontCollectionNode,getChildAt$2 --> getChildAt,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontCollectionNode,compareTo$2 --> compareTo,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontCollectionNode,<init> --> name,org.jhotdraw.gui.fontchooser.FontCollectionNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontCollectionNode,<init> --> children,org.jhotdraw.gui.fontchooser.FontCollectionNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontCollectionNode,<init>$2 --> name,org.jhotdraw.gui.fontchooser.FontCollectionNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontCollectionNode,<init>$2 --> children,org.jhotdraw.gui.fontchooser.FontCollectionNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontCollectionNode,compareTo --> name,org.jhotdraw.gui.fontchooser.FontCollectionNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontCollectionNode,getName --> name,org.jhotdraw.gui.fontchooser.FontCollectionNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontCollectionNode,toString --> name,org.jhotdraw.gui.fontchooser.FontCollectionNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontCollectionNode,clone --> children,org.jhotdraw.gui.fontchooser.FontCollectionNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontCollectionNode,clone --> parent,org.jhotdraw.gui.fontchooser.FontCollectionNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontCollectionNode,clone --> children,org.jhotdraw.gui.fontchooser.FontCollectionNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontCollectionNode,addAll --> children,org.jhotdraw.gui.fontchooser.FontCollectionNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontCollectionNode,insert --> children,org.jhotdraw.gui.fontchooser.FontCollectionNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontCollectionNode,remove --> children,org.jhotdraw.gui.fontchooser.FontCollectionNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontCollectionNode,removeFromParent --> parent,org.jhotdraw.gui.fontchooser.FontCollectionNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontCollectionNode,setParent --> parent,org.jhotdraw.gui.fontchooser.FontCollectionNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontCollectionNode,getChildAt --> children,org.jhotdraw.gui.fontchooser.FontCollectionNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontCollectionNode,getChildCount --> children,org.jhotdraw.gui.fontchooser.FontCollectionNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontCollectionNode,getParent --> parent,org.jhotdraw.gui.fontchooser.FontCollectionNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontCollectionNode,getIndex --> children,org.jhotdraw.gui.fontchooser.FontCollectionNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontCollectionNode,isLeaf --> children,org.jhotdraw.gui.fontchooser.FontCollectionNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontCollectionNode,children --> children,org.jhotdraw.gui.fontchooser.FontCollectionNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontCollectionNode,families --> children,org.jhotdraw.gui.fontchooser.FontCollectionNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontCollectionNode,isEditable --> isEditable,org.jhotdraw.gui.fontchooser.FontCollectionNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontCollectionNode,setEditable --> isEditable,org.jhotdraw.gui.fontchooser.FontCollectionNode,WRITE);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontCollectionNode,clone --> clone,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
EndClass 418
StartClass 419
Class(org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,N,N,Public);
Attribute(familyListParent,org.jhotdraw.gui.fontchooser.FontCollectionNode,Private,N,N,);
Attribute(faceListParent,org.jhotdraw.gui.fontchooser.FontFamilyNode,Private,N,N,);
Attribute(fontChooser,org.jhotdraw.gui.JFontChooser,Private,N,N,);
Attribute(selectionPanel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,Private,N,N,);
Attribute(previewPanel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel,Private,N,N,);
Attribute(selectionPanelHandler,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,Private,N,N,);
Attribute(chooserHandler,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,Private,N,N,);
Attribute(isUpdating,int,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(createUI,javax.swing.plaf.ComponentUI,Public,Y,N);
Method(installUI,void,Public,N,N);
Method(installComponents,void,Protected,N,N);
Method(installListeners,void,Protected,N,N);
Method(uninstallUI,void,Public,N,N);
Method(uninstallComponents,void,Protected,N,N);
Method(uninstallListeners,void,Protected,N,N);
Method(updateCollectionList,void,Private,N,N);
Method(updateFamilyList,void,Private,N,N);
Method(updateFaceList,void,Private,N,N);
Method(updatePreview,void,Private,N,N);
Method(doCollectionChanged,void,Private,N,N);
Method(doFamilyChanged,void,Private,N,N);
Method(doFaceChanged,void,Private,N,N);
Method(setNewSelectionPath,void,Private,N,N);
Method(access$200,int,Public,Y,N);
Method(access$300,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,Public,Y,N);
Method(access$400,void,Public,Y,N);
Method(access$500,void,Public,Y,N);
Method(access$600,void,Public,Y,N);
Method(access$700,org.jhotdraw.gui.JFontChooser,Public,Y,N);
Method(access$800,void,Public,Y,N);
Method(access$900,void,Public,Y,N);
Method(access$1000,void,Public,Y,N);
Method(access$1100,void,Public,Y,N);
Parameter(<init>,org.jhotdraw.gui.JFontChooser,);
Parameter(createUI,javax.swing.JComponent,);
Parameter(installUI,javax.swing.JComponent,);
Parameter(installComponents,org.jhotdraw.gui.JFontChooser,);
Parameter(installListeners,org.jhotdraw.gui.JFontChooser,);
Parameter(uninstallUI,javax.swing.JComponent,);
Parameter(uninstallComponents,org.jhotdraw.gui.JFontChooser,);
Parameter(uninstallListeners,org.jhotdraw.gui.JFontChooser,);
Parameter(setNewSelectionPath,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Parameter(setNewSelectionPath,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Parameter(setNewSelectionPath,org.jhotdraw.gui.fontchooser.FontFaceNode,);
Parameter(access$200,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Parameter(access$300,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Parameter(access$400,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Parameter(access$500,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Parameter(access$600,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Parameter(access$700,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Parameter(access$800,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Parameter(access$900,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Parameter(access$1000,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Parameter(access$1100,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
SuperClass(org.jhotdraw.gui.plaf.FontChooserUI);
Generalization(org.jhotdraw.gui.plaf.FontChooserUI);
Composition(org.jhotdraw.gui.fontchooser.FontCollectionNode);
Composition(org.jhotdraw.gui.fontchooser.FontFamilyNode);
Composition(org.jhotdraw.gui.JFontChooser);
Composition(org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel);
Composition(org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel);
Composition(org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler);
Composition(org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,createUI --> <init>,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installUI --> installComponents,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installUI --> installListeners,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installComponents --> updateCollectionList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installComponents --> updateFamilyList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installComponents --> updateFaceList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installComponents --> updatePreview,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,uninstallUI --> uninstallListeners,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,uninstallUI --> uninstallComponents,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doCollectionChanged --> setNewSelectionPath,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doFamilyChanged --> setNewSelectionPath,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doFaceChanged --> setNewSelectionPath,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,access$400 --> doCollectionChanged,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,access$500 --> doFamilyChanged,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,access$600 --> doFaceChanged,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,access$800 --> updateCollectionList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,access$900 --> updateFamilyList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,access$1000 --> updateFaceList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,access$1100 --> updatePreview,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,<init> --> fontChooser,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installUI --> fontChooser,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installComponents --> selectionPanel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installComponents --> previewPanel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installComponents --> selectionPanel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installComponents --> previewPanel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installListeners --> selectionPanel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installListeners --> selectionPanelHandler,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installListeners --> fontChooser,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installListeners --> chooserHandler,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installListeners --> selectionPanelHandler,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installListeners --> chooserHandler,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,uninstallUI --> fontChooser,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,uninstallComponents --> fontChooser,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,uninstallListeners --> fontChooser,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,uninstallListeners --> chooserHandler,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,uninstallListeners --> selectionPanel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,uninstallListeners --> selectionPanelHandler,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,uninstallListeners --> chooserHandler,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,uninstallListeners --> selectionPanelHandler,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateCollectionList --> isUpdating,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateCollectionList --> selectionPanel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateCollectionList --> fontChooser,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateCollectionList --> isUpdating,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateFamilyList --> isUpdating,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateFamilyList --> selectionPanel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateFamilyList --> fontChooser,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateFamilyList --> familyListParent,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateFamilyList --> isUpdating,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateFamilyList --> familyListParent,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateFaceList --> isUpdating,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateFaceList --> selectionPanel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateFaceList --> fontChooser,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateFaceList --> faceListParent,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateFaceList --> isUpdating,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateFaceList --> faceListParent,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updatePreview --> isUpdating,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updatePreview --> previewPanel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updatePreview --> fontChooser,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updatePreview --> isUpdating,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doCollectionChanged --> selectionPanel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doCollectionChanged --> fontChooser,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doFamilyChanged --> selectionPanel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doFamilyChanged --> fontChooser,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doFaceChanged --> selectionPanel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doFaceChanged --> fontChooser,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,setNewSelectionPath --> fontChooser,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,access$200 --> isUpdating,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,access$300 --> selectionPanel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,access$700 --> fontChooser,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,READ);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,<init> --> <init>,org.jhotdraw.gui.plaf.FontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installComponents --> <init>,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installComponents --> <init>,org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installListeners --> <init>$2,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installListeners --> getCollectionList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installListeners --> getFamilyList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installListeners --> getFaceList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installListeners --> <init>$2,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,installListeners --> getModel,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,uninstallListeners --> getCollectionList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,uninstallListeners --> getFamilyList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,uninstallListeners --> getFaceList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,uninstallListeners --> getModel,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateCollectionList --> getCollectionList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateCollectionList --> getModel,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateCollectionList --> getSelectionPath,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateFamilyList --> getFamilyList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateFamilyList --> getModel,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateFamilyList --> getSelectionPath,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateFaceList --> getFaceList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateFaceList --> getModel,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updateFaceList --> getSelectionPath,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updatePreview --> getSelectedFont,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,updatePreview --> setSelectedFont,org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doCollectionChanged --> getCollectionList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doCollectionChanged --> getSelectionPath,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doCollectionChanged --> getSelectedFont,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doCollectionChanged --> <init>,org.jhotdraw.gui.fontchooser.FontFaceNode,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doCollectionChanged --> <init>,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doCollectionChanged --> getChildCount,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doCollectionChanged --> getChildAt,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doCollectionChanged --> compareTo,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doCollectionChanged --> faces,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doCollectionChanged --> compareTo,org.jhotdraw.gui.fontchooser.FontFaceNode,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doCollectionChanged --> families,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doCollectionChanged --> getParent,org.jhotdraw.gui.fontchooser.FontFaceNode,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doCollectionChanged --> getChildCount,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doCollectionChanged --> getChildAt,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doFamilyChanged --> getFamilyList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doFamilyChanged --> getSelectionPath,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doFamilyChanged --> getChildCount,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doFamilyChanged --> getChildAt,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doFamilyChanged --> compareTo,org.jhotdraw.gui.fontchooser.FontFaceNode,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doFamilyChanged --> getChildCount,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doFamilyChanged --> getChildAt,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doFaceChanged --> getFaceList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,doFaceChanged --> getSelectionPath,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,setNewSelectionPath --> getModel,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,setNewSelectionPath --> setSelectionPath,org.jhotdraw.gui.JFontChooser,);
EndClass 419
StartClass 420
Class(org.jhotdraw.gui.fontchooser.DefaultFontChooserModel$UIResource,N,N,Public);
Method(<init>,void,Public,N,N);
SuperClass(org.jhotdraw.gui.fontchooser.DefaultFontChooserModel);
SuperClass(org.jhotdraw.gui.fontchooser.AbstractFontChooserModel);
Generalization(org.jhotdraw.gui.fontchooser.DefaultFontChooserModel);
Call(METHOD,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel$UIResource,<init> --> <init>,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,);
EndClass 420
StartClass 421
Class(org.jhotdraw.gui.fontchooser.FontFaceNode,N,N,Public);
Attribute(parent,org.jhotdraw.gui.fontchooser.FontFamilyNode,Private,N,N,);
Attribute(typeface,java.awt.Font,Private,N,N,);
Attribute(name,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(beautifyName,java.lang.String,Protected,N,N);
Method(setName,void,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(getFont,java.awt.Font,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(insert,void,Public,N,N);
Method(remove,void,Public,N,N);
Method(remove$2,void,Public,N,N);
Method(setUserObject,void,Public,N,N);
Method(removeFromParent,void,Public,N,N);
Method(setParent,void,Public,N,N);
Method(getChildAt,javax.swing.tree.TreeNode,Public,N,N);
Method(getChildCount,int,Public,N,N);
Method(getParent,javax.swing.tree.TreeNode,Public,N,N);
Method(getIndex,int,Public,N,N);
Method(getAllowsChildren,boolean,Public,N,N);
Method(isLeaf,boolean,Public,N,N);
Method(children,java.util.Enumeration,Public,N,N);
Method(compareTo,int,Public,N,N);
Method(clone,org.jhotdraw.gui.fontchooser.FontFaceNode,Public,N,N);
Method(isEditable,boolean,Public,N,N);
Method(clone$2,java.lang.Object,Public,N,N);
Method(compareTo$2,int,Public,N,N);
Parameter(<init>,java.awt.Font,);
Parameter(beautifyName,java.lang.String,);
Parameter(setName,java.lang.String,);
Parameter(insert,javax.swing.tree.MutableTreeNode,);
Parameter(insert,int,);
Parameter(remove,int,);
Parameter(remove$2,javax.swing.tree.MutableTreeNode,);
Parameter(setUserObject,java.lang.Object,);
Parameter(setParent,javax.swing.tree.MutableTreeNode,);
Parameter(getChildAt,int,);
Parameter(getIndex,javax.swing.tree.TreeNode,);
Parameter(compareTo,org.jhotdraw.gui.fontchooser.FontFaceNode,);
Parameter(compareTo$2,java.lang.Object,);
Composition(org.jhotdraw.gui.fontchooser.FontFamilyNode);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontFaceNode,<init> --> beautifyName,org.jhotdraw.gui.fontchooser.FontFaceNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontFaceNode,clone$2 --> clone,org.jhotdraw.gui.fontchooser.FontFaceNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontFaceNode,compareTo$2 --> compareTo,org.jhotdraw.gui.fontchooser.FontFaceNode,);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFaceNode,<init> --> typeface,org.jhotdraw.gui.fontchooser.FontFaceNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFaceNode,<init> --> name,org.jhotdraw.gui.fontchooser.FontFaceNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFaceNode,setName --> name,org.jhotdraw.gui.fontchooser.FontFaceNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFaceNode,getName --> name,org.jhotdraw.gui.fontchooser.FontFaceNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFaceNode,getFont --> typeface,org.jhotdraw.gui.fontchooser.FontFaceNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFaceNode,toString --> name,org.jhotdraw.gui.fontchooser.FontFaceNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFaceNode,removeFromParent --> parent,org.jhotdraw.gui.fontchooser.FontFaceNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFaceNode,setParent --> parent,org.jhotdraw.gui.fontchooser.FontFaceNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFaceNode,getParent --> parent,org.jhotdraw.gui.fontchooser.FontFaceNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFaceNode,compareTo --> name,org.jhotdraw.gui.fontchooser.FontFaceNode,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.FontFaceNode,clone --> parent,org.jhotdraw.gui.fontchooser.FontFaceNode,WRITE);
Call(METHOD,org.jhotdraw.gui.fontchooser.FontFaceNode,removeFromParent --> remove$2,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
EndClass 421
StartClass 422
Class(org.jhotdraw.gui.JFontChooser$2,N,N,NA);
Attribute(this$0,org.jhotdraw.gui.JFontChooser,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(propertyChange,void,Public,N,N);
Parameter(<init>,org.jhotdraw.gui.JFontChooser,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Composition(org.jhotdraw.gui.JFontChooser);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser$2,<init> --> this$0,org.jhotdraw.gui.JFontChooser$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.JFontChooser$2,propertyChange --> this$0,org.jhotdraw.gui.JFontChooser$2,READ);
Call(METHOD,org.jhotdraw.gui.JFontChooser$2,propertyChange --> access$000,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.JFontChooser$2,propertyChange --> getAllFonts,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.JFontChooser$2,propertyChange --> setFonts,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,);
EndClass 422
StartClass 423
Class(org.jhotdraw.gui.JFontChooser$3,N,N,NA);
Method(<init>,void,Public,N,N);
Method(call,java.awt.Font[],Public,N,N);
Method(call$2,java.lang.Object,Public,N,N);
Call(METHOD,org.jhotdraw.gui.JFontChooser$3,call$2 --> call,org.jhotdraw.gui.JFontChooser$3,);
EndClass 423
StartClass 424
Class(org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,N,N,Public);
Attribute(root,javax.swing.tree.DefaultMutableTreeNode,Protected,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(setFonts,void,Public,N,N);
Method(collectFamiliesNamed,java.util.ArrayList,Protected,N,N);
Method(isEditable,boolean,Public,N,N);
Method(getRoot,java.lang.Object,Public,N,N);
Method(getChild,java.lang.Object,Public,N,N);
Method(getChildCount,int,Public,N,N);
Method(isLeaf,boolean,Public,N,N);
Method(valueForPathChanged,void,Public,N,N);
Method(getIndexOfChild,int,Public,N,N);
Parameter(<init>$2,java.awt.Font[],);
Parameter(setFonts,java.awt.Font[],);
Parameter(collectFamiliesNamed,java.util.ArrayList,org.jhotdraw.gui.fontchooser.FontFamilyNode;>;[Ljava.lang.String;)Ljava.util.ArrayList<Lorg.jhotdraw.gui.fontchooser.FontFamilyNode);
Parameter(collectFamiliesNamed,java.lang.String[],);
Parameter(isEditable,javax.swing.tree.MutableTreeNode,);
Parameter(getChild,java.lang.Object,);
Parameter(getChild,int,);
Parameter(getChildCount,java.lang.Object,);
Parameter(isLeaf,java.lang.Object,);
Parameter(valueForPathChanged,javax.swing.tree.TreePath,);
Parameter(valueForPathChanged,java.lang.Object,);
Parameter(getIndexOfChild,java.lang.Object,);
Parameter(getIndexOfChild,java.lang.Object,);
SuperClass(org.jhotdraw.gui.fontchooser.AbstractFontChooserModel);
SubClass(org.jhotdraw.gui.fontchooser.DefaultFontChooserModel$UIResource);
Generalization(org.jhotdraw.gui.fontchooser.AbstractFontChooserModel);
Call(METHOD,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,<init>$2 --> setFonts,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,);
Call(METHOD,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,setFonts --> collectFamiliesNamed,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,<init> --> root,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,<init>$2 --> root,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,setFonts --> root,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,getRoot --> root,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,READ);
Call(METHOD,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,<init> --> <init>,org.jhotdraw.gui.fontchooser.AbstractFontChooserModel,);
Call(METHOD,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,<init>$2 --> <init>,org.jhotdraw.gui.fontchooser.AbstractFontChooserModel,);
Call(METHOD,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,setFonts --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,setFonts --> <init>,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,setFonts --> <init>,org.jhotdraw.gui.fontchooser.FontFaceNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,setFonts --> add,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,setFonts --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,setFonts --> <init>$2,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,setFonts --> <init>,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,setFonts --> families,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,setFonts --> clone,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,setFonts --> addAll,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,setFonts --> fireTreeStructureChanged$2,org.jhotdraw.gui.fontchooser.AbstractFontChooserModel,);
Call(METHOD,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,collectFamiliesNamed --> getName,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,collectFamiliesNamed --> clone,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,isEditable --> isEditable,org.jhotdraw.gui.fontchooser.FontFaceNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,isEditable --> isEditable,org.jhotdraw.gui.fontchooser.FontFamilyNode,);
Call(METHOD,org.jhotdraw.gui.fontchooser.DefaultFontChooserModel,isEditable --> isEditable,org.jhotdraw.gui.fontchooser.FontCollectionNode,);
EndClass 424
StartClass 425
Class(org.jhotdraw.draw.action.ZoomAction,N,N,Public);
Attribute(scaleFactor,double,Private,N,N,);
Attribute(button,javax.swing.AbstractButton,Private,N,N,);
Attribute(label,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Method(access$000,double,Public,Y,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>,double,);
Parameter(<init>,javax.swing.AbstractButton,);
Parameter(<init>$2,org.jhotdraw.draw.DrawingView,);
Parameter(<init>$2,double,);
Parameter(<init>$2,javax.swing.AbstractButton,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
Parameter(access$000,org.jhotdraw.draw.action.ZoomAction,);
SuperClass(org.jhotdraw.draw.action.AbstractDrawingViewAction);
SubClass(org.jhotdraw.draw.action.ButtonFactory$5);
Generalization(org.jhotdraw.draw.action.AbstractDrawingViewAction);
Call(METHOD,org.jhotdraw.draw.action.ZoomAction,<init> --> <init>$2,org.jhotdraw.draw.action.ZoomAction,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ZoomAction,<init>$2 --> label,org.jhotdraw.draw.action.ZoomAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ZoomAction,<init>$2 --> scaleFactor,org.jhotdraw.draw.action.ZoomAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ZoomAction,<init>$2 --> button,org.jhotdraw.draw.action.ZoomAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ZoomAction,<init>$2 --> label,org.jhotdraw.draw.action.ZoomAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ZoomAction,actionPerformed --> button,org.jhotdraw.draw.action.ZoomAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ZoomAction,actionPerformed --> label,org.jhotdraw.draw.action.ZoomAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ZoomAction,actionPerformed --> scaleFactor,org.jhotdraw.draw.action.ZoomAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ZoomAction,access$000 --> scaleFactor,org.jhotdraw.draw.action.ZoomAction,READ);
Call(METHOD,org.jhotdraw.draw.action.ZoomAction,<init> --> setEditor,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.ZoomAction,<init>$2 --> <init>$2,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.ZoomAction,actionPerformed --> getView,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.ZoomAction,actionPerformed --> getComponent,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.ZoomAction,actionPerformed --> getScaleFactor,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.ZoomAction,actionPerformed --> setScaleFactor,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.ZoomAction,actionPerformed --> <init>,org.jhotdraw.draw.action.ZoomAction$1,);
EndClass 425
StartClass 426
Class(org.jhotdraw.draw.action.ZoomEditorAction,N,N,Public);
Attribute(ID,java.lang.String,Public,Y,Y,);
Attribute(scaleFactor,double,Private,N,N,);
Attribute(button,javax.swing.AbstractButton,Private,N,N,);
Attribute(label,java.lang.String,Private,N,N,);
Attribute(updateAllViews,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(actionPerformed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>,double,);
Parameter(<init>,javax.swing.AbstractButton,);
Parameter(<init>$2,org.jhotdraw.draw.DrawingEditor,);
Parameter(<init>$2,double,);
Parameter(<init>$2,javax.swing.AbstractButton,);
Parameter(<init>$2,boolean,);
Parameter(actionPerformed,java.awt.event.ActionEvent,);
SuperClass(org.jhotdraw.draw.action.AbstractDrawingEditorAction);
SubClass(org.jhotdraw.draw.action.ButtonFactory$3);
Generalization(org.jhotdraw.draw.action.AbstractDrawingEditorAction);
Call(METHOD,org.jhotdraw.draw.action.ZoomEditorAction,<init> --> <init>$2,org.jhotdraw.draw.action.ZoomEditorAction,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ZoomEditorAction,<init>$2 --> label,org.jhotdraw.draw.action.ZoomEditorAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ZoomEditorAction,<init>$2 --> scaleFactor,org.jhotdraw.draw.action.ZoomEditorAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ZoomEditorAction,<init>$2 --> button,org.jhotdraw.draw.action.ZoomEditorAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ZoomEditorAction,<init>$2 --> updateAllViews,org.jhotdraw.draw.action.ZoomEditorAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ZoomEditorAction,<init>$2 --> label,org.jhotdraw.draw.action.ZoomEditorAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ZoomEditorAction,actionPerformed --> button,org.jhotdraw.draw.action.ZoomEditorAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ZoomEditorAction,actionPerformed --> label,org.jhotdraw.draw.action.ZoomEditorAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ZoomEditorAction,actionPerformed --> updateAllViews,org.jhotdraw.draw.action.ZoomEditorAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ZoomEditorAction,actionPerformed --> scaleFactor,org.jhotdraw.draw.action.ZoomEditorAction,READ);
Call(METHOD,org.jhotdraw.draw.action.ZoomEditorAction,<init>$2 --> <init>,org.jhotdraw.draw.action.AbstractDrawingEditorAction,);
Call(METHOD,org.jhotdraw.draw.action.ZoomEditorAction,actionPerformed --> getEditor,org.jhotdraw.draw.action.AbstractDrawingEditorAction,);
Call(METHOD,org.jhotdraw.draw.action.ZoomEditorAction,actionPerformed --> getDrawingViews,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.ZoomEditorAction,actionPerformed --> setScaleFactor,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.ZoomEditorAction,actionPerformed --> getView,org.jhotdraw.draw.action.AbstractDrawingEditorAction,);
EndClass 426
StartClass 427
Class(org.jhotdraw.draw.layouter.Layouter,Y,Y,Public);
Method(calculateLayout,java.awt.geom.Rectangle2D$Double,Public,N,Y);
Method(layout,java.awt.geom.Rectangle2D$Double,Public,N,Y);
Parameter(calculateLayout,org.jhotdraw.draw.CompositeFigure,);
Parameter(calculateLayout,java.awt.geom.Point2D$Double,);
Parameter(calculateLayout,java.awt.geom.Point2D$Double,);
Parameter(layout,org.jhotdraw.draw.CompositeFigure,);
Parameter(layout,java.awt.geom.Point2D$Double,);
Parameter(layout,java.awt.geom.Point2D$Double,);
EndClass 427
StartClass 428
Class(org.jhotdraw.app.action.file.LoadRecentFileAction$1,N,N,NA);
Attribute(val$view,org.jhotdraw.app.View,Public,N,Y,);
Attribute(this$0,org.jhotdraw.app.action.file.LoadRecentFileAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(construct,java.lang.Object,Protected,N,N);
Method(done,void,Protected,N,N);
Method(failed,void,Protected,N,N);
Parameter(<init>,org.jhotdraw.app.action.file.LoadRecentFileAction,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(done,java.lang.Object,);
Parameter(failed,java.lang.Throwable,);
SuperClass(org.jhotdraw.gui.Worker);
Generalization(org.jhotdraw.gui.Worker);
Composition(org.jhotdraw.app.View);
Composition(org.jhotdraw.app.action.file.LoadRecentFileAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.LoadRecentFileAction$1,<init> --> this$0,org.jhotdraw.app.action.file.LoadRecentFileAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.LoadRecentFileAction$1,<init> --> val$view,org.jhotdraw.app.action.file.LoadRecentFileAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.LoadRecentFileAction$1,construct --> this$0,org.jhotdraw.app.action.file.LoadRecentFileAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.LoadRecentFileAction$1,construct --> val$view,org.jhotdraw.app.action.file.LoadRecentFileAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.LoadRecentFileAction$1,done --> this$0,org.jhotdraw.app.action.file.LoadRecentFileAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.LoadRecentFileAction$1,done --> val$view,org.jhotdraw.app.action.file.LoadRecentFileAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.LoadRecentFileAction$1,failed --> val$view,org.jhotdraw.app.action.file.LoadRecentFileAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.LoadRecentFileAction$1,failed --> this$0,org.jhotdraw.app.action.file.LoadRecentFileAction$1,READ);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction$1,<init> --> <init>,org.jhotdraw.gui.Worker,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction$1,construct --> access$000,org.jhotdraw.app.action.file.LoadRecentFileAction,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction$1,construct --> read,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction$1,construct --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction$1,construct --> getName,org.jhotdraw.net.URIUtil,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction$1,construct --> getFormatted,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction$1,done --> getApplication,org.jhotdraw.app.action.AbstractViewAction,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction$1,done --> access$000,org.jhotdraw.app.action.file.LoadRecentFileAction,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction$1,done --> setURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction$1,done --> setEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction$1,done --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction$1,done --> setEnabled,org.jhotdraw.app.Application,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction$1,failed --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction$1,failed --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction$1,failed --> access$000,org.jhotdraw.app.action.file.LoadRecentFileAction,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction$1,failed --> getName,org.jhotdraw.net.URIUtil,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction$1,failed --> getFormatted,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction$1,failed --> <init>,org.jhotdraw.app.action.file.LoadRecentFileAction$1$1,);
Call(METHOD,org.jhotdraw.app.action.file.LoadRecentFileAction$1,failed --> showMessageSheet$4,org.jhotdraw.gui.JSheet,);
EndClass 428
StartClass 429
Class(org.jhotdraw.app.action.file.OpenRecentFileAction$1,N,N,NA);
Attribute(val$view,org.jhotdraw.app.View,Public,N,Y,);
Attribute(this$0,org.jhotdraw.app.action.file.OpenRecentFileAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(construct,java.lang.Object,Protected,N,N);
Method(done,void,Protected,N,N);
Method(failed,void,Protected,N,N);
Parameter(<init>,org.jhotdraw.app.action.file.OpenRecentFileAction,);
Parameter(<init>,org.jhotdraw.app.View,);
Parameter(done,java.lang.Object,);
Parameter(failed,java.lang.Throwable,);
SuperClass(org.jhotdraw.gui.Worker);
Generalization(org.jhotdraw.gui.Worker);
Composition(org.jhotdraw.app.View);
Composition(org.jhotdraw.app.action.file.OpenRecentFileAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenRecentFileAction$1,<init> --> this$0,org.jhotdraw.app.action.file.OpenRecentFileAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenRecentFileAction$1,<init> --> val$view,org.jhotdraw.app.action.file.OpenRecentFileAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenRecentFileAction$1,construct --> this$0,org.jhotdraw.app.action.file.OpenRecentFileAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenRecentFileAction$1,construct --> val$view,org.jhotdraw.app.action.file.OpenRecentFileAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenRecentFileAction$1,done --> val$view,org.jhotdraw.app.action.file.OpenRecentFileAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenRecentFileAction$1,done --> this$0,org.jhotdraw.app.action.file.OpenRecentFileAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenRecentFileAction$1,failed --> val$view,org.jhotdraw.app.action.file.OpenRecentFileAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenRecentFileAction$1,failed --> this$0,org.jhotdraw.app.action.file.OpenRecentFileAction$1,READ);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction$1,<init> --> <init>,org.jhotdraw.gui.Worker,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction$1,construct --> access$000,org.jhotdraw.app.action.file.OpenRecentFileAction,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction$1,construct --> read,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction$1,construct --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction$1,construct --> getName,org.jhotdraw.net.URIUtil,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction$1,construct --> getFormatted,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction$1,done --> access$000,org.jhotdraw.app.action.file.OpenRecentFileAction,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction$1,done --> setURI,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction$1,done --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction$1,done --> setEnabled,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction$1,failed --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction$1,failed --> getComponent,org.jhotdraw.app.View,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction$1,failed --> access$000,org.jhotdraw.app.action.file.OpenRecentFileAction,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction$1,failed --> getName,org.jhotdraw.net.URIUtil,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction$1,failed --> getFormatted,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction$1,failed --> <init>,org.jhotdraw.app.action.file.OpenRecentFileAction$1$1,);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction$1,failed --> showMessageSheet$4,org.jhotdraw.gui.JSheet,);
EndClass 429
StartClass 430
Class(org.jhotdraw.app.action.edit.AbstractSelectionAction$1,N,N,NA);
Attribute(this$0,org.jhotdraw.app.action.edit.AbstractSelectionAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(propertyChange,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.edit.AbstractSelectionAction,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Composition(org.jhotdraw.app.action.edit.AbstractSelectionAction);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.AbstractSelectionAction$1,<init> --> this$0,org.jhotdraw.app.action.edit.AbstractSelectionAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.edit.AbstractSelectionAction$1,propertyChange --> this$0,org.jhotdraw.app.action.edit.AbstractSelectionAction$1,READ);
Call(METHOD,org.jhotdraw.app.action.edit.AbstractSelectionAction$1,propertyChange --> updateEnabled,org.jhotdraw.app.action.edit.AbstractSelectionAction,);
EndClass 430
StartClass 431
Class(org.jhotdraw.gui.datatransfer.AWTClipboard,N,N,Public);
Attribute(target,java.awt.datatransfer.Clipboard,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getTarget,java.awt.datatransfer.Clipboard,Public,N,N);
Method(getContents,java.awt.datatransfer.Transferable,Public,N,N);
Method(setContents,void,Public,N,N);
Parameter(<init>,java.awt.datatransfer.Clipboard,);
Parameter(getContents,java.lang.Object,);
Parameter(setContents,java.awt.datatransfer.Transferable,);
Parameter(setContents,java.awt.datatransfer.ClipboardOwner,);
SuperClass(org.jhotdraw.gui.datatransfer.AbstractClipboard);
SubClass(org.jhotdraw.gui.datatransfer.OSXClipboard);
Generalization(org.jhotdraw.gui.datatransfer.AbstractClipboard);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.AWTClipboard,<init> --> target,org.jhotdraw.gui.datatransfer.AWTClipboard,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.AWTClipboard,getTarget --> target,org.jhotdraw.gui.datatransfer.AWTClipboard,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.AWTClipboard,getContents --> target,org.jhotdraw.gui.datatransfer.AWTClipboard,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.AWTClipboard,setContents --> target,org.jhotdraw.gui.datatransfer.AWTClipboard,READ);
Call(METHOD,org.jhotdraw.gui.datatransfer.AWTClipboard,<init> --> <init>,org.jhotdraw.gui.datatransfer.AbstractClipboard,);
EndClass 431
StartClass 432
Class(org.jhotdraw.gui.datatransfer.JNLPClipboard,N,N,Public);
Attribute(target,java.lang.Object,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getTarget,java.lang.Object,Public,N,N);
Method(getContents,java.awt.datatransfer.Transferable,Public,N,N);
Method(setContents,void,Public,N,N);
Parameter(<init>,java.lang.Object,);
Parameter(getContents,java.lang.Object,);
Parameter(setContents,java.awt.datatransfer.Transferable,);
Parameter(setContents,java.awt.datatransfer.ClipboardOwner,);
SuperClass(org.jhotdraw.gui.datatransfer.AbstractClipboard);
Generalization(org.jhotdraw.gui.datatransfer.AbstractClipboard);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.JNLPClipboard,<init> --> target,org.jhotdraw.gui.datatransfer.JNLPClipboard,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.JNLPClipboard,getTarget --> target,org.jhotdraw.gui.datatransfer.JNLPClipboard,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.JNLPClipboard,getContents --> target,org.jhotdraw.gui.datatransfer.JNLPClipboard,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.JNLPClipboard,setContents --> target,org.jhotdraw.gui.datatransfer.JNLPClipboard,READ);
Call(METHOD,org.jhotdraw.gui.datatransfer.JNLPClipboard,<init> --> <init>,org.jhotdraw.gui.datatransfer.AbstractClipboard,);
EndClass 432
StartClass 433
Class(org.jhotdraw.gui.datatransfer.OSXClipboard,N,N,Public);
Method(<init>,void,Public,N,N);
Method(getContents,java.awt.datatransfer.Transferable,Public,N,N);
Parameter(<init>,java.awt.datatransfer.Clipboard,);
Parameter(getContents,java.lang.Object,);
SuperClass(org.jhotdraw.gui.datatransfer.AWTClipboard);
SuperClass(org.jhotdraw.gui.datatransfer.AbstractClipboard);
Generalization(org.jhotdraw.gui.datatransfer.AWTClipboard);
Call(METHOD,org.jhotdraw.gui.datatransfer.OSXClipboard,<init> --> <init>,org.jhotdraw.gui.datatransfer.AWTClipboard,);
Call(METHOD,org.jhotdraw.gui.datatransfer.OSXClipboard,getContents --> getContents,org.jhotdraw.gui.datatransfer.AWTClipboard,);
Call(METHOD,org.jhotdraw.gui.datatransfer.OSXClipboard,getContents --> <init>,org.jhotdraw.gui.datatransfer.CompositeTransferable,);
Call(METHOD,org.jhotdraw.gui.datatransfer.OSXClipboard,getContents --> add,org.jhotdraw.gui.datatransfer.CompositeTransferable,);
EndClass 433
StartClass 434
Class(org.jhotdraw.draw.handle.ResizeHandleKit$WestHandle,N,N,NA);
Method(<init>,void,Public,N,N);
Method(trackStepNormalized,void,Protected,N,N);
Method(keyPressed,void,Public,N,N);
Method(getCursor,java.awt.Cursor,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(trackStepNormalized,java.awt.geom.Point2D$Double,);
Parameter(trackStepNormalized,boolean,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
SuperClass(org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle);
SuperClass(org.jhotdraw.draw.handle.LocatorHandle);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$WestHandle,trackStepNormalized --> sb,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,READ);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$WestHandle,<init> --> west$2,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$WestHandle,<init> --> <init>,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$WestHandle,trackStepNormalized --> setBounds,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$WestHandle,keyPressed --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$WestHandle,keyPressed --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$WestHandle,keyPressed --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$WestHandle,keyPressed --> setBounds,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$WestHandle,getCursor --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$WestHandle,getCursor --> isTransformable,org.jhotdraw.draw.Figure,);
EndClass 434
StartClass 435
Class(org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,N,N,NA);
Attribute(sx,int,Private,N,N,);
Attribute(sy,int,Private,N,N,);
Attribute(geometry,java.lang.Object,Private,N,N,);
Attribute(sb,java.awt.geom.Rectangle2D$Double,Protected,N,N,);
Attribute(aspectRatio,double,Public,N,N,);
Attribute(isTransformableCache,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getToolTipText,java.lang.String,Public,N,N);
Method(draw,void,Public,N,N);
Method(trackStart,void,Public,N,N);
Method(trackStep,void,Public,N,N);
Method(trackEnd,void,Public,N,N);
Method(trackStepNormalized,void,Protected,N,N);
Method(setBounds,void,Protected,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(<init>,org.jhotdraw.draw.locator.Locator,);
Parameter(getToolTipText,java.awt.Point,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(trackStart,java.awt.Point,);
Parameter(trackStart,int,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,int,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,int,);
Parameter(trackStepNormalized,java.awt.geom.Point2D$Double,);
Parameter(trackStepNormalized,boolean,);
Parameter(setBounds,java.awt.geom.Point2D$Double,);
Parameter(setBounds,java.awt.geom.Point2D$Double,);
SuperClass(org.jhotdraw.draw.handle.LocatorHandle);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$WestHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$NorthEastHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$SouthEastHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$EastHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$SouthWestHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$NorthHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$SouthHandle);
SubClass(org.jhotdraw.draw.handle.ResizeHandleKit$NorthWestHandle);
Generalization(org.jhotdraw.draw.handle.LocatorHandle);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackStep --> trackStepNormalized,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackStart --> isTransformableCache,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackStart --> sb,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackStart --> isTransformableCache,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackStart --> geometry,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackStart --> sx,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackStart --> sy,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackStart --> sb,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackStart --> aspectRatio,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackStep --> isTransformableCache,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackStep --> sx,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackStep --> sy,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackEnd --> isTransformableCache,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackEnd --> geometry,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,draw --> RESIZE_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,draw --> RESIZE_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,draw --> NULL_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,draw --> NULL_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,draw --> HANDLE_FILL_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,draw --> HANDLE_STROKE_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackStep --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackStep --> TRANSFORM,org.jhotdraw.draw.AttributeKeys,READ);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,<init> --> <init>,org.jhotdraw.draw.handle.LocatorHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,getToolTipText --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,getToolTipText --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,draw --> getEditor,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,draw --> getTool,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,draw --> supportsHandleInteraction,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,draw --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,draw --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,draw --> getHandleAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,draw --> drawRectangle,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackStart --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackStart --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackStart --> getTransformRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackStart --> getLocation,org.jhotdraw.draw.handle.LocatorHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackStart --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackStep --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackStep --> getConstrainer,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackStep --> constrainPoint,org.jhotdraw.draw.Constrainer,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackStep --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackStep --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackEnd --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackEnd --> getTransformRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackEnd --> <init>,org.jhotdraw.draw.event.TransformRestoreEdit,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,trackEnd --> fireUndoableEditHappened,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,setBounds --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,setBounds --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,setBounds --> setBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,setBounds --> changed,org.jhotdraw.draw.Figure,);
EndClass 435
StartClass 436
Class(org.jhotdraw.draw.handle.ResizeHandleKit$NorthEastHandle,N,N,NA);
Method(<init>,void,Public,N,N);
Method(trackStepNormalized,void,Protected,N,N);
Method(keyPressed,void,Public,N,N);
Method(getCursor,java.awt.Cursor,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(trackStepNormalized,java.awt.geom.Point2D$Double,);
Parameter(trackStepNormalized,boolean,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
SuperClass(org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle);
SuperClass(org.jhotdraw.draw.handle.LocatorHandle);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$NorthEastHandle,trackStepNormalized --> sb,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$NorthEastHandle,trackStepNormalized --> aspectRatio,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,READ);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthEastHandle,<init> --> northEast$2,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthEastHandle,<init> --> <init>,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthEastHandle,trackStepNormalized --> setBounds,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthEastHandle,keyPressed --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthEastHandle,keyPressed --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthEastHandle,keyPressed --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthEastHandle,keyPressed --> setBounds,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthEastHandle,getCursor --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthEastHandle,getCursor --> isTransformable,org.jhotdraw.draw.Figure,);
EndClass 436
StartClass 437
Class(org.jhotdraw.draw.handle.ResizeHandleKit$SouthEastHandle,N,N,NA);
Method(<init>,void,Public,N,N);
Method(trackStepNormalized,void,Protected,N,N);
Method(keyPressed,void,Public,N,N);
Method(getCursor,java.awt.Cursor,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(trackStepNormalized,java.awt.geom.Point2D$Double,);
Parameter(trackStepNormalized,boolean,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
SuperClass(org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle);
SuperClass(org.jhotdraw.draw.handle.LocatorHandle);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$SouthEastHandle,trackStepNormalized --> sb,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$SouthEastHandle,trackStepNormalized --> aspectRatio,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,READ);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthEastHandle,<init> --> southEast$2,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthEastHandle,<init> --> <init>,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthEastHandle,trackStepNormalized --> setBounds,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthEastHandle,keyPressed --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthEastHandle,keyPressed --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthEastHandle,keyPressed --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthEastHandle,keyPressed --> setBounds,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthEastHandle,getCursor --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthEastHandle,getCursor --> isTransformable,org.jhotdraw.draw.Figure,);
EndClass 437
StartClass 438
Class(org.jhotdraw.draw.handle.ResizeHandleKit$EastHandle,N,N,NA);
Method(<init>,void,Public,N,N);
Method(trackStepNormalized,void,Protected,N,N);
Method(keyPressed,void,Public,N,N);
Method(getCursor,java.awt.Cursor,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(trackStepNormalized,java.awt.geom.Point2D$Double,);
Parameter(trackStepNormalized,boolean,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
SuperClass(org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle);
SuperClass(org.jhotdraw.draw.handle.LocatorHandle);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$EastHandle,trackStepNormalized --> sb,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,READ);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$EastHandle,<init> --> east$2,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$EastHandle,<init> --> <init>,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$EastHandle,trackStepNormalized --> setBounds,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$EastHandle,keyPressed --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$EastHandle,keyPressed --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$EastHandle,keyPressed --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$EastHandle,keyPressed --> setBounds,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$EastHandle,getCursor --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$EastHandle,getCursor --> isTransformable,org.jhotdraw.draw.Figure,);
EndClass 438
StartClass 439
Class(org.jhotdraw.draw.handle.ResizeHandleKit$SouthWestHandle,N,N,NA);
Method(<init>,void,Public,N,N);
Method(trackStepNormalized,void,Protected,N,N);
Method(keyPressed,void,Public,N,N);
Method(getCursor,java.awt.Cursor,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(trackStepNormalized,java.awt.geom.Point2D$Double,);
Parameter(trackStepNormalized,boolean,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
SuperClass(org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle);
SuperClass(org.jhotdraw.draw.handle.LocatorHandle);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$SouthWestHandle,trackStepNormalized --> sb,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$SouthWestHandle,trackStepNormalized --> aspectRatio,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,READ);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthWestHandle,<init> --> southWest$2,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthWestHandle,<init> --> <init>,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthWestHandle,trackStepNormalized --> setBounds,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthWestHandle,keyPressed --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthWestHandle,keyPressed --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthWestHandle,keyPressed --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthWestHandle,keyPressed --> setBounds,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthWestHandle,getCursor --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthWestHandle,getCursor --> isTransformable,org.jhotdraw.draw.Figure,);
EndClass 439
StartClass 440
Class(org.jhotdraw.draw.handle.ResizeHandleKit$NorthHandle,N,N,NA);
Method(<init>,void,Public,N,N);
Method(trackStepNormalized,void,Protected,N,N);
Method(keyPressed,void,Public,N,N);
Method(getCursor,java.awt.Cursor,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(trackStepNormalized,java.awt.geom.Point2D$Double,);
Parameter(trackStepNormalized,boolean,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
SuperClass(org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle);
SuperClass(org.jhotdraw.draw.handle.LocatorHandle);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$NorthHandle,trackStepNormalized --> sb,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,READ);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthHandle,<init> --> north$2,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthHandle,<init> --> <init>,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthHandle,trackStepNormalized --> setBounds,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthHandle,keyPressed --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthHandle,keyPressed --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthHandle,keyPressed --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthHandle,keyPressed --> setBounds,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthHandle,getCursor --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthHandle,getCursor --> isTransformable,org.jhotdraw.draw.Figure,);
EndClass 440
StartClass 441
Class(org.jhotdraw.draw.handle.ResizeHandleKit$SouthHandle,N,N,NA);
Method(<init>,void,Public,N,N);
Method(trackStepNormalized,void,Protected,N,N);
Method(keyPressed,void,Public,N,N);
Method(getCursor,java.awt.Cursor,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(trackStepNormalized,java.awt.geom.Point2D$Double,);
Parameter(trackStepNormalized,boolean,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
SuperClass(org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle);
SuperClass(org.jhotdraw.draw.handle.LocatorHandle);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$SouthHandle,trackStepNormalized --> sb,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,READ);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthHandle,<init> --> south$2,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthHandle,<init> --> <init>,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthHandle,trackStepNormalized --> setBounds,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthHandle,keyPressed --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthHandle,keyPressed --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthHandle,keyPressed --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthHandle,keyPressed --> setBounds,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthHandle,getCursor --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$SouthHandle,getCursor --> isTransformable,org.jhotdraw.draw.Figure,);
EndClass 441
StartClass 442
Class(org.jhotdraw.draw.handle.ResizeHandleKit$NorthWestHandle,N,N,NA);
Method(<init>,void,Public,N,N);
Method(trackStepNormalized,void,Protected,N,N);
Method(keyPressed,void,Public,N,N);
Method(getCursor,java.awt.Cursor,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(trackStepNormalized,java.awt.geom.Point2D$Double,);
Parameter(trackStepNormalized,boolean,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
SuperClass(org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle);
SuperClass(org.jhotdraw.draw.handle.LocatorHandle);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
Generalization(org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$NorthWestHandle,trackStepNormalized --> sb,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.ResizeHandleKit$NorthWestHandle,trackStepNormalized --> aspectRatio,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,READ);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthWestHandle,<init> --> northWest$2,org.jhotdraw.draw.locator.RelativeLocator,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthWestHandle,<init> --> <init>,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthWestHandle,trackStepNormalized --> setBounds,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthWestHandle,keyPressed --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthWestHandle,keyPressed --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthWestHandle,keyPressed --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthWestHandle,keyPressed --> setBounds,org.jhotdraw.draw.handle.ResizeHandleKit$ResizeHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthWestHandle,getCursor --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.ResizeHandleKit$NorthWestHandle,getCursor --> isTransformable,org.jhotdraw.draw.Figure,);
EndClass 442
StartClass 443
Class(org.jhotdraw.draw.event.HandleEvent,N,N,Public);
Attribute(invalidatedArea,java.awt.Rectangle,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getHandle,org.jhotdraw.draw.handle.Handle,Public,N,N);
Method(getInvalidatedArea,java.awt.Rectangle,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.handle.Handle,);
Parameter(<init>,java.awt.Rectangle,);
Call(ATTRIBUTE,org.jhotdraw.draw.event.HandleEvent,<init> --> invalidatedArea,org.jhotdraw.draw.event.HandleEvent,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.HandleEvent,getInvalidatedArea --> invalidatedArea,org.jhotdraw.draw.event.HandleEvent,READ);
EndClass 443
StartClass 444
Class(org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,N,N,NA);
Attribute(val$files,java.util.List,Public,N,Y,);
Attribute(val$drawing,org.jhotdraw.draw.Drawing,Public,N,Y,);
Attribute(val$existingFigures,java.util.LinkedList,Public,N,Y,);
Attribute(val$view,org.jhotdraw.draw.DrawingView,Public,N,Y,);
Attribute(val$transferFigures,java.util.HashSet,Public,N,Y,);
Attribute(val$comp,javax.swing.JComponent,Public,N,Y,);
Attribute(val$dropPoint,java.awt.Point,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(construct,java.util.LinkedList,Public,N,N);
Method(failed,void,Public,N,N);
Method(done,void,Public,N,N);
Method(finished,void,Public,N,N);
Method(done$2,void,Public,N,N);
Method(construct$2,java.lang.Object,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,);
Parameter(<init>,java.util.List,);
Parameter(<init>,org.jhotdraw.draw.Drawing,);
Parameter(<init>,java.util.LinkedList,);
Parameter(<init>,org.jhotdraw.draw.DrawingView,);
Parameter(<init>,java.util.HashSet,);
Parameter(<init>,javax.swing.JComponent,);
Parameter(<init>,java.awt.Point,);
Parameter(failed,java.lang.Throwable,);
Parameter(done,java.util.LinkedList,org.jhotdraw.draw.Figure);
Parameter(done$2,java.lang.Object,);
SuperClass(org.jhotdraw.gui.Worker);
Generalization(org.jhotdraw.gui.Worker);
Composition(org.jhotdraw.draw.Drawing);
Composition(org.jhotdraw.draw.DrawingView);
Composition(org.jhotdraw.draw.DefaultDrawingViewTransferHandler);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,done$2 --> done,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,construct$2 --> construct,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,<init> --> this$0,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,<init> --> val$files,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,<init> --> val$drawing,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,<init> --> val$existingFigures,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,<init> --> val$view,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,<init> --> val$transferFigures,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,<init> --> val$comp,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,<init> --> val$dropPoint,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,construct --> val$files,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,construct --> val$drawing,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,done --> val$existingFigures,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,done --> val$view,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,done --> val$transferFigures,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,done --> this$0,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,done --> val$comp,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,done --> val$dropPoint,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,done --> val$drawing,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,finished --> val$view,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,READ);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,<init> --> <init>,org.jhotdraw.gui.Worker,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,construct --> getInputFormats,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,construct --> getFileFilter,org.jhotdraw.draw.io.InputFormat,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,construct --> read$2,org.jhotdraw.draw.io.InputFormat,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,construct --> getChildren,org.jhotdraw.draw.CompositeFigure,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,done --> clearSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,done --> addToSelection$2,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,done --> moveToDropPoint,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,done --> <init>,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3$1,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,done --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,finished --> getEditor,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,finished --> setEnabled,org.jhotdraw.draw.DrawingEditor,);
EndClass 444
StartClass 445
Class(org.jhotdraw.draw.DefaultDrawingViewTransferHandler$2,N,N,NA);
Attribute(val$drawing,org.jhotdraw.draw.Drawing,Public,N,Y,);
Attribute(val$importedFigures,java.util.LinkedList,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,);
Parameter(<init>,org.jhotdraw.draw.Drawing,);
Parameter(<init>,java.util.LinkedList,);
Composition(org.jhotdraw.draw.Drawing);
Composition(org.jhotdraw.draw.DefaultDrawingViewTransferHandler);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$2,<init> --> this$0,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$2,<init> --> val$drawing,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$2,<init> --> val$importedFigures,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$2,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$2,undo --> val$drawing,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$2,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$2,undo --> val$importedFigures,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$2,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$2,redo --> val$drawing,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$2,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$2,redo --> val$importedFigures,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$2,READ);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$2,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$2,getPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$2,undo --> removeAll,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$2,redo --> addAll,org.jhotdraw.draw.Drawing,);
EndClass 445
StartClass 446
Class(org.jhotdraw.draw.DefaultDrawingViewTransferHandler$1,N,N,NA);
Attribute(val$drawing,org.jhotdraw.draw.Drawing,Public,N,Y,);
Attribute(val$importedFigures,java.util.LinkedList,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,);
Parameter(<init>,org.jhotdraw.draw.Drawing,);
Parameter(<init>,java.util.LinkedList,);
Composition(org.jhotdraw.draw.Drawing);
Composition(org.jhotdraw.draw.DefaultDrawingViewTransferHandler);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$1,<init> --> this$0,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$1,<init> --> val$drawing,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$1,<init> --> val$importedFigures,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$1,undo --> val$drawing,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$1,undo --> val$importedFigures,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$1,redo --> val$drawing,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$1,redo --> val$importedFigures,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$1,READ);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$1,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$1,getPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$1,undo --> removeAll,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$1,redo --> addAll,org.jhotdraw.draw.Drawing,);
EndClass 446
StartClass 447
Class(org.jhotdraw.draw.DefaultDrawingViewTransferHandler$4,N,N,NA);
Attribute(val$deletionEvents,java.util.LinkedList,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(figureAdded,void,Public,N,N);
Method(figureRemoved,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,);
Parameter(<init>,java.util.LinkedList,);
Parameter(figureAdded,org.jhotdraw.draw.event.CompositeFigureEvent,);
Parameter(figureRemoved,org.jhotdraw.draw.event.CompositeFigureEvent,);
Realization(org.jhotdraw.draw.event.CompositeFigureListener);
Composition(org.jhotdraw.draw.DefaultDrawingViewTransferHandler);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$4,<init> --> this$0,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$4,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$4,<init> --> val$deletionEvents,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$4,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$4,figureRemoved --> val$deletionEvents,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$4,READ);
EndClass 447
StartClass 448
Class(org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,N,N,NA);
Attribute(val$view,org.jhotdraw.draw.DrawingView,Public,N,Y,);
Attribute(val$deletionEvents,java.util.LinkedList,Public,N,Y,);
Attribute(val$drawing,org.jhotdraw.draw.Drawing,Public,N,Y,);
Attribute(val$selectedFigures,java.util.LinkedList,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,);
Parameter(<init>,org.jhotdraw.draw.DrawingView,);
Parameter(<init>,java.util.LinkedList,);
Parameter(<init>,org.jhotdraw.draw.Drawing,);
Parameter(<init>,java.util.LinkedList,);
Composition(org.jhotdraw.draw.DrawingView);
Composition(org.jhotdraw.draw.Drawing);
Composition(org.jhotdraw.draw.DefaultDrawingViewTransferHandler);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,<init> --> this$0,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,<init> --> val$view,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,<init> --> val$deletionEvents,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,<init> --> val$drawing,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,<init> --> val$selectedFigures,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,undo --> val$view,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,undo --> val$deletionEvents,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,undo --> val$drawing,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,undo --> val$selectedFigures,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,redo --> val$deletionEvents,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,redo --> val$drawing,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,READ);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,getPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,undo --> clearSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,undo --> getIndex,org.jhotdraw.draw.event.CompositeFigureEvent,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,undo --> getChildFigure,org.jhotdraw.draw.event.CompositeFigureEvent,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,undo --> add$2,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,undo --> addToSelection$2,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,redo --> <init>,org.jhotdraw.util.ReversedList,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,redo --> getChildFigure,org.jhotdraw.draw.event.CompositeFigureEvent,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$5,redo --> remove,org.jhotdraw.draw.Drawing,);
EndClass 448
StartClass 449
Class(org.jhotdraw.gui.datatransfer.CompositeTransferable,N,N,Public);
Attribute(transferables,java.util.HashMap,Private,N,N,java.awt.datatransfer.DataFlavor;java.awt.datatransfer.Transferable);
Attribute(flavors,java.util.LinkedList,Private,N,N,java.awt.datatransfer.DataFlavor);
Method(<init>,void,Public,N,N);
Method(add,void,Public,N,N);
Method(getTransferData,java.lang.Object,Public,N,N);
Method(getTransferDataFlavors,java.awt.datatransfer.DataFlavor[],Public,N,N);
Method(isDataFlavorSupported,boolean,Public,N,N);
Method(lostOwnership,void,Public,N,N);
Parameter(add,java.awt.datatransfer.Transferable,);
Parameter(getTransferData,java.awt.datatransfer.DataFlavor,);
Parameter(isDataFlavorSupported,java.awt.datatransfer.DataFlavor,);
Parameter(lostOwnership,java.awt.datatransfer.Clipboard,);
Parameter(lostOwnership,java.awt.datatransfer.Transferable,);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.CompositeTransferable,<init> --> transferables,org.jhotdraw.gui.datatransfer.CompositeTransferable,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.CompositeTransferable,<init> --> flavors,org.jhotdraw.gui.datatransfer.CompositeTransferable,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.CompositeTransferable,add --> transferables,org.jhotdraw.gui.datatransfer.CompositeTransferable,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.CompositeTransferable,add --> flavors,org.jhotdraw.gui.datatransfer.CompositeTransferable,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.CompositeTransferable,getTransferData --> transferables,org.jhotdraw.gui.datatransfer.CompositeTransferable,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.CompositeTransferable,getTransferDataFlavors --> flavors,org.jhotdraw.gui.datatransfer.CompositeTransferable,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.CompositeTransferable,getTransferDataFlavors --> transferables,org.jhotdraw.gui.datatransfer.CompositeTransferable,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.CompositeTransferable,isDataFlavorSupported --> transferables,org.jhotdraw.gui.datatransfer.CompositeTransferable,READ);
EndClass 449
StartClass 450
Class(org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler,N,N,NA);
Attribute(scrolls,boolean,Private,N,N,);
Attribute(transferable,java.awt.datatransfer.Transferable,Private,N,N,);
Attribute(imageOffset,java.awt.Point,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(dragGestureRecognized,void,Public,N,N);
Method(dragEnter,void,Public,N,N);
Method(dragOver,void,Public,N,N);
Method(dragExit,void,Public,N,N);
Method(dragDropEnd,void,Public,N,N);
Method(dropActionChanged,void,Public,N,N);
Parameter(<init>,java.awt.datatransfer.Transferable,);
Parameter(<init>,java.awt.Point,);
Parameter(dragGestureRecognized,java.awt.dnd.DragGestureEvent,);
Parameter(dragEnter,java.awt.dnd.DragSourceDragEvent,);
Parameter(dragOver,java.awt.dnd.DragSourceDragEvent,);
Parameter(dragExit,java.awt.dnd.DragSourceEvent,);
Parameter(dragDropEnd,java.awt.dnd.DragSourceDropEvent,);
Parameter(dropActionChanged,java.awt.dnd.DragSourceDragEvent,);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler,<init> --> transferable,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler,<init> --> imageOffset,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler,dragGestureRecognized --> transferable,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler,dragGestureRecognized --> imageOffset,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler,dragGestureRecognized --> scrolls,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler,dragGestureRecognized --> scrolls,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler,dragDropEnd --> scrolls,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler,READ);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler,dragGestureRecognized --> getVisualRepresentation,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler,dragGestureRecognized --> exportDone,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$DragHandler,dragDropEnd --> exportDone,org.jhotdraw.draw.DefaultDrawingViewTransferHandler,);
EndClass 450
StartClass 451
Class(org.jhotdraw.draw.DefaultDrawingViewTransferHandler$SwingDragGestureRecognizer,N,N,NA);
Method(<init>,void,Public,N,N);
Method(gestured,void,Public,N,N);
Method(registerListeners,void,Protected,N,N);
Method(unregisterListeners,void,Protected,N,N);
Parameter(<init>,java.awt.dnd.DragGestureListener,);
Parameter(gestured,javax.swing.JComponent,);
Parameter(gestured,java.awt.event.MouseEvent,);
Parameter(gestured,int,);
Parameter(gestured,int,);
EndClass 451
StartClass 452
Class(org.jhotdraw.draw.AbstractConstrainer,N,Y,Public);
Attribute(listenerList,javax.swing.event.EventListenerList,Protected,N,N,);
Attribute(changeEvent,javax.swing.event.ChangeEvent,Protected,N,N,);
Method(<init>,void,Public,N,N);
Method(addChangeListener,void,Public,N,N);
Method(removeChangeListener,void,Public,N,N);
Method(fireStateChanged,void,Protected,N,N);
Method(clone,org.jhotdraw.draw.AbstractConstrainer,Public,N,N);
Method(clone$2,org.jhotdraw.beans.AbstractBean,Public,N,N);
Method(clone$3,java.lang.Object,Public,N,N);
Parameter(addChangeListener,javax.swing.event.ChangeListener,);
Parameter(removeChangeListener,javax.swing.event.ChangeListener,);
SuperClass(org.jhotdraw.beans.AbstractBean);
SubClass(org.jhotdraw.draw.GridConstrainer);
Generalization(org.jhotdraw.beans.AbstractBean);
Realization(org.jhotdraw.draw.Constrainer);
Call(METHOD,org.jhotdraw.draw.AbstractConstrainer,clone$2 --> clone,org.jhotdraw.draw.AbstractConstrainer,);
Call(METHOD,org.jhotdraw.draw.AbstractConstrainer,clone$3 --> clone,org.jhotdraw.draw.AbstractConstrainer,);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractConstrainer,<init> --> listenerList,org.jhotdraw.draw.AbstractConstrainer,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractConstrainer,<init> --> changeEvent,org.jhotdraw.draw.AbstractConstrainer,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractConstrainer,addChangeListener --> listenerList,org.jhotdraw.draw.AbstractConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractConstrainer,removeChangeListener --> listenerList,org.jhotdraw.draw.AbstractConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractConstrainer,fireStateChanged --> listenerList,org.jhotdraw.draw.AbstractConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractConstrainer,fireStateChanged --> changeEvent,org.jhotdraw.draw.AbstractConstrainer,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractConstrainer,fireStateChanged --> changeEvent,org.jhotdraw.draw.AbstractConstrainer,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.AbstractConstrainer,clone --> listenerList,org.jhotdraw.draw.AbstractConstrainer,WRITE);
Call(METHOD,org.jhotdraw.draw.AbstractConstrainer,<init> --> <init>,org.jhotdraw.beans.AbstractBean,);
Call(METHOD,org.jhotdraw.draw.AbstractConstrainer,clone --> clone,org.jhotdraw.beans.AbstractBean,);
EndClass 452
StartClass 453
Class(org.jhotdraw.draw.GridConstrainer$1,N,N,NA);
Attribute($SwitchMap$org$jhotdraw$draw$TranslationDirection,int[],Public,Y,Y,);
Attribute($SwitchMap$org$jhotdraw$draw$RotationDirection,int[],Public,Y,Y,);
Method(<clinit>,void,Public,Y,N);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$RotationDirection,org.jhotdraw.draw.GridConstrainer$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$TranslationDirection,org.jhotdraw.draw.GridConstrainer$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$RotationDirection,org.jhotdraw.draw.GridConstrainer$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer$1,<clinit> --> $SwitchMap$org$jhotdraw$draw$TranslationDirection,org.jhotdraw.draw.GridConstrainer$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer$1,<clinit> --> CLOCKWISE,org.jhotdraw.draw.RotationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer$1,<clinit> --> COUNTER_CLOCKWISE,org.jhotdraw.draw.RotationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer$1,<clinit> --> NORTH,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer$1,<clinit> --> NORTH_WEST,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer$1,<clinit> --> NORTH_EAST,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer$1,<clinit> --> SOUTH,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer$1,<clinit> --> SOUTH_WEST,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer$1,<clinit> --> SOUTH_EAST,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer$1,<clinit> --> WEST,org.jhotdraw.draw.TranslationDirection,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.GridConstrainer$1,<clinit> --> EAST,org.jhotdraw.draw.TranslationDirection,READ);
Call(METHOD,org.jhotdraw.draw.GridConstrainer$1,<clinit> --> values,org.jhotdraw.draw.RotationDirection,);
Call(METHOD,org.jhotdraw.draw.GridConstrainer$1,<clinit> --> values,org.jhotdraw.draw.TranslationDirection,);
EndClass 453
StartClass 454
Class(org.jhotdraw.draw.event.CompositeFigureEvent,N,N,Public);
Attribute(invalidatedArea,java.awt.geom.Rectangle2D$Double,Private,N,N,);
Attribute(child,org.jhotdraw.draw.Figure,Private,N,N,);
Attribute(index,int,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getCompositeFigure,org.jhotdraw.draw.CompositeFigure,Public,N,N);
Method(getChildFigure,org.jhotdraw.draw.Figure,Public,N,N);
Method(getInvalidatedArea,java.awt.geom.Rectangle2D$Double,Public,N,N);
Method(getIndex,int,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.CompositeFigure,);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(<init>,java.awt.geom.Rectangle2D$Double,);
Parameter(<init>,int,);
Composition(org.jhotdraw.draw.Figure);
Call(ATTRIBUTE,org.jhotdraw.draw.event.CompositeFigureEvent,<init> --> child,org.jhotdraw.draw.event.CompositeFigureEvent,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.CompositeFigureEvent,<init> --> invalidatedArea,org.jhotdraw.draw.event.CompositeFigureEvent,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.CompositeFigureEvent,<init> --> index,org.jhotdraw.draw.event.CompositeFigureEvent,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.CompositeFigureEvent,getChildFigure --> child,org.jhotdraw.draw.event.CompositeFigureEvent,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.CompositeFigureEvent,getInvalidatedArea --> invalidatedArea,org.jhotdraw.draw.event.CompositeFigureEvent,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.CompositeFigureEvent,getIndex --> index,org.jhotdraw.draw.event.CompositeFigureEvent,READ);
EndClass 454
StartClass 455
Class(org.jhotdraw.gui.datatransfer.AbstractTransferable,N,Y,Public);
Attribute(flavors,java.awt.datatransfer.DataFlavor[],Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getTransferDataFlavors,java.awt.datatransfer.DataFlavor[],Public,N,N);
Method(isDataFlavorSupported,boolean,Public,N,N);
Parameter(<init>,java.awt.datatransfer.DataFlavor,);
Parameter(<init>$2,java.awt.datatransfer.DataFlavor[],);
Parameter(isDataFlavorSupported,java.awt.datatransfer.DataFlavor,);
SubClass(org.jhotdraw.gui.datatransfer.InputStreamTransferable);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.AbstractTransferable,<init> --> flavors,org.jhotdraw.gui.datatransfer.AbstractTransferable,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.AbstractTransferable,<init>$2 --> flavors,org.jhotdraw.gui.datatransfer.AbstractTransferable,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.AbstractTransferable,getTransferDataFlavors --> flavors,org.jhotdraw.gui.datatransfer.AbstractTransferable,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.datatransfer.AbstractTransferable,isDataFlavorSupported --> flavors,org.jhotdraw.gui.datatransfer.AbstractTransferable,READ);
EndClass 455
StartClass 456
Class(net.n3.nanoxml.XMLElement,N,N,Public);
Attribute(serialVersionUID,long,Public,Y,Y,);
Attribute(NO_LINE,int,Public,Y,Y,);
Attribute(parent,net.n3.nanoxml.IXMLElement,Private,N,N,);
Attribute(attributes,java.util.ArrayList,Private,N,N,);
Attribute(children,java.util.ArrayList,Private,N,N,net.n3.nanoxml.IXMLElement);
Attribute(name,java.lang.String,Private,N,N,);
Attribute(fullName,java.lang.String,Private,N,N,);
Attribute(namespace,java.lang.String,Private,N,N,);
Attribute(content,java.lang.String,Private,N,N,);
Attribute(systemID,java.lang.String,Private,N,N,);
Attribute(lineNr,int,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(<init>$5,void,Public,N,N);
Method(createPCDataElement,net.n3.nanoxml.IXMLElement,Public,N,N);
Method(createElement,net.n3.nanoxml.IXMLElement,Public,N,N);
Method(createElement$2,net.n3.nanoxml.IXMLElement,Public,N,N);
Method(createElement$3,net.n3.nanoxml.IXMLElement,Public,N,N);
Method(createElement$4,net.n3.nanoxml.IXMLElement,Public,N,N);
Method(getParent,net.n3.nanoxml.IXMLElement,Public,N,N);
Method(getFullName,java.lang.String,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(getNamespace,java.lang.String,Public,N,N);
Method(setName,void,Public,N,N);
Method(setName$2,void,Public,N,N);
Method(addChild,void,Public,N,N);
Method(insertChild,void,Public,N,N);
Method(removeChild,void,Public,N,N);
Method(removeChildAtIndex,void,Public,N,N);
Method(iterateChildren,java.util.Iterator,Public,N,N);
Method(isLeaf,boolean,Public,N,N);
Method(hasChildren,boolean,Public,N,N);
Method(getChildrenCount,int,Public,N,N);
Method(getChildren,java.util.ArrayList,Public,N,N);
Method(getChildAtIndex,net.n3.nanoxml.IXMLElement,Public,N,N);
Method(getFirstChildNamed,net.n3.nanoxml.IXMLElement,Public,N,N);
Method(getFirstChildNamed$2,net.n3.nanoxml.IXMLElement,Public,N,N);
Method(getChildrenNamed,java.util.ArrayList,Public,N,N);
Method(getChildrenNamed$2,java.util.ArrayList,Public,N,N);
Method(findAttribute,net.n3.nanoxml.XMLAttribute,Private,N,N);
Method(findAttribute$2,net.n3.nanoxml.XMLAttribute,Private,N,N);
Method(getAttributeCount,int,Public,N,N);
Method(getAttribute,java.lang.String,Public,N,N);
Method(getAttribute$2,java.lang.String,Public,N,N);
Method(getAttribute$3,java.lang.String,Public,N,N);
Method(getDoubleAttribute,double,Public,N,N);
Method(getAttribute$4,int,Public,N,N);
Method(getAttribute$5,int,Public,N,N);
Method(getAttribute$6,java.lang.Object,Public,N,N);
Method(getAttributeType,java.lang.String,Public,N,N);
Method(getAttributeNamespace,java.lang.String,Public,N,N);
Method(getAttributeType$2,java.lang.String,Public,N,N);
Method(setAttribute,void,Public,N,N);
Method(setAttribute$2,void,Public,N,N);
Method(removeAttribute,void,Public,N,N);
Method(removeAttribute$2,void,Public,N,N);
Method(iterateAttributeNames,java.util.Iterator,Public,N,N);
Method(hasAttribute,boolean,Public,N,N);
Method(hasAttribute$2,boolean,Public,N,N);
Method(getAttributes,java.util.Properties,Public,N,N);
Method(getAttributesInNamespace,java.util.Properties,Public,N,N);
Method(getSystemID,java.lang.String,Public,N,N);
Method(getLineNr,int,Public,N,N);
Method(getContent,java.lang.String,Public,N,N);
Method(setContent,void,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(equalsXMLElement,boolean,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(dispose,void,Public,N,N);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$3,java.lang.String,);
Parameter(<init>$3,java.lang.String,);
Parameter(<init>$3,int,);
Parameter(<init>$4,java.lang.String,);
Parameter(<init>$4,java.lang.String,);
Parameter(<init>$5,java.lang.String,);
Parameter(<init>$5,java.lang.String,);
Parameter(<init>$5,java.lang.String,);
Parameter(<init>$5,int,);
Parameter(createElement,java.lang.String,);
Parameter(createElement$2,java.lang.String,);
Parameter(createElement$2,java.lang.String,);
Parameter(createElement$2,int,);
Parameter(createElement$3,java.lang.String,);
Parameter(createElement$3,java.lang.String,);
Parameter(createElement$4,java.lang.String,);
Parameter(createElement$4,java.lang.String,);
Parameter(createElement$4,java.lang.String,);
Parameter(createElement$4,int,);
Parameter(setName,java.lang.String,);
Parameter(setName$2,java.lang.String,);
Parameter(setName$2,java.lang.String,);
Parameter(addChild,net.n3.nanoxml.IXMLElement,);
Parameter(insertChild,net.n3.nanoxml.IXMLElement,);
Parameter(insertChild,int,);
Parameter(removeChild,net.n3.nanoxml.IXMLElement,);
Parameter(removeChildAtIndex,int,);
Parameter(getChildAtIndex,int,);
Parameter(getFirstChildNamed,java.lang.String,);
Parameter(getFirstChildNamed$2,java.lang.String,);
Parameter(getFirstChildNamed$2,java.lang.String,);
Parameter(getChildrenNamed,java.lang.String,);
Parameter(getChildrenNamed$2,java.lang.String,);
Parameter(getChildrenNamed$2,java.lang.String,);
Parameter(findAttribute,java.lang.String,);
Parameter(findAttribute$2,java.lang.String,);
Parameter(findAttribute$2,java.lang.String,);
Parameter(getAttribute,java.lang.String,);
Parameter(getAttribute$2,java.lang.String,);
Parameter(getAttribute$2,java.lang.String,);
Parameter(getAttribute$3,java.lang.String,);
Parameter(getAttribute$3,java.lang.String,);
Parameter(getAttribute$3,java.lang.String,);
Parameter(getDoubleAttribute,java.lang.String,);
Parameter(getDoubleAttribute,java.lang.String,);
Parameter(getDoubleAttribute,double,);
Parameter(getAttribute$4,java.lang.String,);
Parameter(getAttribute$4,int,);
Parameter(getAttribute$5,java.lang.String,);
Parameter(getAttribute$5,java.lang.String,);
Parameter(getAttribute$5,int,);
Parameter(getAttribute$6,java.lang.String,);
Parameter(getAttribute$6,java.lang.String,);
Parameter(getAttribute$6,java.util.Map,);
Parameter(getAttribute$6,java.lang.String,);
Parameter(getAttributeType,java.lang.String,);
Parameter(getAttributeNamespace,java.lang.String,);
Parameter(getAttributeType$2,java.lang.String,);
Parameter(getAttributeType$2,java.lang.String,);
Parameter(setAttribute,java.lang.String,);
Parameter(setAttribute,java.lang.String,);
Parameter(setAttribute$2,java.lang.String,);
Parameter(setAttribute$2,java.lang.String,);
Parameter(setAttribute$2,java.lang.String,);
Parameter(removeAttribute,java.lang.String,);
Parameter(removeAttribute$2,java.lang.String,);
Parameter(removeAttribute$2,java.lang.String,);
Parameter(hasAttribute,java.lang.String,);
Parameter(hasAttribute$2,java.lang.String,);
Parameter(hasAttribute$2,java.lang.String,);
Parameter(getAttributesInNamespace,java.lang.String,);
Parameter(setContent,java.lang.String,);
Parameter(equals,java.lang.Object,);
Parameter(equalsXMLElement,net.n3.nanoxml.IXMLElement,);
Realization(net.n3.nanoxml.IXMLElement);
Composition(net.n3.nanoxml.IXMLElement);
Call(METHOD,net.n3.nanoxml.XMLElement,<init> --> <init>$5,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,<init>$2 --> <init>$5,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,<init>$3 --> <init>$5,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,<init>$4 --> <init>$5,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,createPCDataElement --> <init>,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,createElement --> <init>$2,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,createElement$2 --> <init>$3,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,createElement$3 --> <init>$4,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,createElement$4 --> <init>$5,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,getAttribute --> getAttribute$2,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,getAttribute$2 --> findAttribute,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,getAttribute$3 --> findAttribute$2,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,getDoubleAttribute --> findAttribute$2,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,getAttribute$4 --> getAttribute$2,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,getAttribute$5 --> getAttribute$3,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,getAttribute$6 --> getAttribute$3,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,getAttributeType --> findAttribute,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,getAttributeNamespace --> findAttribute,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,getAttributeType$2 --> findAttribute$2,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,setAttribute --> findAttribute,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,setAttribute$2 --> findAttribute$2,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,hasAttribute --> findAttribute,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,hasAttribute$2 --> findAttribute$2,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,equals --> equalsXMLElement,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,equalsXMLElement --> getChildAtIndex,net.n3.nanoxml.XMLElement,);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,<init>$5 --> attributes,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,<init>$5 --> children,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,<init>$5 --> fullName,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,<init>$5 --> name,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,<init>$5 --> namespace,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,<init>$5 --> content,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,<init>$5 --> lineNr,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,<init>$5 --> systemID,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,<init>$5 --> parent,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,getParent --> parent,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,getFullName --> fullName,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,getName --> name,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,getNamespace --> namespace,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,setName --> name,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,setName --> fullName,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,setName --> namespace,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,setName$2 --> name,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,setName$2 --> fullName,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,setName$2 --> namespace,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,addChild --> children,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,addChild --> parent,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,insertChild --> children,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,insertChild --> parent,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,removeChild --> children,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,removeChildAtIndex --> children,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,iterateChildren --> children,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,isLeaf --> children,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,hasChildren --> children,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,getChildrenCount --> children,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,getChildren --> children,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,getChildAtIndex --> children,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,getFirstChildNamed --> children,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,getFirstChildNamed$2 --> children,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,getChildrenNamed --> children,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,getChildrenNamed$2 --> children,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,findAttribute --> attributes,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,findAttribute$2 --> attributes,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,getAttributeCount --> attributes,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,setAttribute --> attributes,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,setAttribute$2 --> attributes,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,removeAttribute --> attributes,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,removeAttribute$2 --> attributes,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,iterateAttributeNames --> attributes,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,getAttributes --> attributes,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,getAttributesInNamespace --> attributes,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,getSystemID --> systemID,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,getLineNr --> lineNr,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,getContent --> content,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,setContent --> content,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,equalsXMLElement --> name,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,equalsXMLElement --> attributes,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,equalsXMLElement --> children,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,dispose --> children,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,dispose --> attributes,net.n3.nanoxml.XMLElement,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,dispose --> attributes,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,dispose --> children,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,dispose --> fullName,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,dispose --> name,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,dispose --> namespace,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,dispose --> content,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,dispose --> systemID,net.n3.nanoxml.XMLElement,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLElement,dispose --> parent,net.n3.nanoxml.XMLElement,WRITE);
Call(METHOD,net.n3.nanoxml.XMLElement,addChild --> getName,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,addChild --> getContent,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,addChild --> setContent,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,insertChild --> getName,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,insertChild --> getContent,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,insertChild --> setContent,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,getFirstChildNamed --> getFullName,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,getFirstChildNamed$2 --> getName,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,getFirstChildNamed$2 --> getNamespace,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,getChildrenNamed --> getFullName,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,getChildrenNamed$2 --> getName,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,getChildrenNamed$2 --> getNamespace,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,findAttribute --> getFullName,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,findAttribute$2 --> getName,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,findAttribute$2 --> getNamespace,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,getAttribute$2 --> getValue,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,getAttribute$3 --> getValue,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,getDoubleAttribute --> getValue,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,getAttributeType --> getType,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,getAttributeNamespace --> getNamespace,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,getAttributeType$2 --> getType,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,setAttribute --> <init>,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,setAttribute --> setValue,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,setAttribute$2 --> <init>,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,setAttribute$2 --> setValue,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,removeAttribute --> getFullName,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,removeAttribute$2 --> getName,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,removeAttribute$2 --> getNamespace,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,iterateAttributeNames --> getFullName,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,getAttributes --> getFullName,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,getAttributes --> getValue,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,getAttributesInNamespace --> getNamespace,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,getAttributesInNamespace --> getName,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,getAttributesInNamespace --> getValue,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,equalsXMLElement --> getName,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,equalsXMLElement --> getAttributeCount,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,equalsXMLElement --> getName,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,equalsXMLElement --> getNamespace,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,equalsXMLElement --> hasAttribute$2,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,equalsXMLElement --> getAttribute$3,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,equalsXMLElement --> getValue,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,equalsXMLElement --> getAttributeType$2,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,equalsXMLElement --> getType,net.n3.nanoxml.XMLAttribute,);
Call(METHOD,net.n3.nanoxml.XMLElement,equalsXMLElement --> getChildrenCount,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,equalsXMLElement --> getChildAtIndex,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,equalsXMLElement --> equalsXMLElement,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLElement,toString --> <init>,net.n3.nanoxml.XMLWriter,);
Call(METHOD,net.n3.nanoxml.XMLElement,toString --> write,net.n3.nanoxml.XMLWriter,);
Call(METHOD,net.n3.nanoxml.XMLElement,dispose --> dispose,net.n3.nanoxml.IXMLElement,);
EndClass 456
StartClass 457
Class(net.n3.nanoxml.StdXMLReader,N,N,Public);
Attribute(readers,java.util.Stack,Private,N,N,);
Attribute(currentReader,net.n3.nanoxml.StdXMLReader$StackedReader,Private,N,N,);
Method(stringReader,net.n3.nanoxml.IXMLReader,Public,Y,N);
Method(fileReader,net.n3.nanoxml.IXMLReader,Public,Y,N);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(finalize,void,Protected,N,N);
Method(getEncoding,java.lang.String,Protected,N,N);
Method(stream2reader,java.io.Reader,Protected,N,N);
Method(<init>$3,void,Public,N,N);
Method(read,char,Public,N,N);
Method(atEOFOfCurrentStream,boolean,Public,N,N);
Method(atEOF,boolean,Public,N,N);
Method(unread,void,Public,N,N);
Method(openStream,java.io.Reader,Public,N,N);
Method(startNewStream,void,Public,N,N);
Method(startNewStream$2,void,Public,N,N);
Method(getStreamLevel,int,Public,N,N);
Method(getLineNr,int,Public,N,N);
Method(setSystemID,void,Public,N,N);
Method(setPublicID,void,Public,N,N);
Method(getSystemID,java.lang.String,Public,N,N);
Method(getPublicID,java.lang.String,Public,N,N);
Parameter(stringReader,java.lang.String,);
Parameter(fileReader,java.lang.String,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.String,);
Parameter(<init>$2,java.io.Reader,);
Parameter(getEncoding,java.lang.String,);
Parameter(stream2reader,java.io.InputStream,);
Parameter(stream2reader,java.lang.StringBuffer,);
Parameter(<init>$3,java.io.InputStream,);
Parameter(unread,char,);
Parameter(openStream,java.lang.String,);
Parameter(openStream,java.lang.String,);
Parameter(startNewStream,java.io.Reader,);
Parameter(startNewStream$2,java.io.Reader,);
Parameter(startNewStream$2,boolean,);
Parameter(setSystemID,java.lang.String,);
Parameter(setPublicID,java.lang.String,);
Realization(net.n3.nanoxml.IXMLReader);
Composition(net.n3.nanoxml.StdXMLReader$StackedReader);
Call(METHOD,net.n3.nanoxml.StdXMLReader,stringReader --> <init>$2,net.n3.nanoxml.StdXMLReader,);
Call(METHOD,net.n3.nanoxml.StdXMLReader,fileReader --> <init>$3,net.n3.nanoxml.StdXMLReader,);
Call(METHOD,net.n3.nanoxml.StdXMLReader,fileReader --> setSystemID,net.n3.nanoxml.StdXMLReader,);
Call(METHOD,net.n3.nanoxml.StdXMLReader,<init> --> openStream,net.n3.nanoxml.StdXMLReader,);
Call(METHOD,net.n3.nanoxml.StdXMLReader,stream2reader --> getEncoding,net.n3.nanoxml.StdXMLReader,);
Call(METHOD,net.n3.nanoxml.StdXMLReader,<init>$3 --> stream2reader,net.n3.nanoxml.StdXMLReader,);
Call(METHOD,net.n3.nanoxml.StdXMLReader,<init>$3 --> startNewStream,net.n3.nanoxml.StdXMLReader,);
Call(METHOD,net.n3.nanoxml.StdXMLReader,openStream --> stream2reader,net.n3.nanoxml.StdXMLReader,);
Call(METHOD,net.n3.nanoxml.StdXMLReader,startNewStream --> startNewStream$2,net.n3.nanoxml.StdXMLReader,);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,fileReader --> readers,net.n3.nanoxml.StdXMLReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,fileReader --> currentReader,net.n3.nanoxml.StdXMLReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,<init> --> currentReader,net.n3.nanoxml.StdXMLReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,<init> --> currentReader,net.n3.nanoxml.StdXMLReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,<init> --> readers,net.n3.nanoxml.StdXMLReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,<init>$2 --> currentReader,net.n3.nanoxml.StdXMLReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,<init>$2 --> currentReader,net.n3.nanoxml.StdXMLReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,<init>$2 --> readers,net.n3.nanoxml.StdXMLReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,finalize --> currentReader,net.n3.nanoxml.StdXMLReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,finalize --> readers,net.n3.nanoxml.StdXMLReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,finalize --> currentReader,net.n3.nanoxml.StdXMLReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,<init>$3 --> currentReader,net.n3.nanoxml.StdXMLReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,<init>$3 --> currentReader,net.n3.nanoxml.StdXMLReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,<init>$3 --> readers,net.n3.nanoxml.StdXMLReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,read --> currentReader,net.n3.nanoxml.StdXMLReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,read --> readers,net.n3.nanoxml.StdXMLReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,read --> currentReader,net.n3.nanoxml.StdXMLReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,atEOFOfCurrentStream --> currentReader,net.n3.nanoxml.StdXMLReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,atEOF --> currentReader,net.n3.nanoxml.StdXMLReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,atEOF --> readers,net.n3.nanoxml.StdXMLReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,atEOF --> currentReader,net.n3.nanoxml.StdXMLReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,unread --> currentReader,net.n3.nanoxml.StdXMLReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,openStream --> currentReader,net.n3.nanoxml.StdXMLReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,startNewStream$2 --> currentReader,net.n3.nanoxml.StdXMLReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,startNewStream$2 --> readers,net.n3.nanoxml.StdXMLReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,startNewStream$2 --> currentReader,net.n3.nanoxml.StdXMLReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,getStreamLevel --> readers,net.n3.nanoxml.StdXMLReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,getLineNr --> currentReader,net.n3.nanoxml.StdXMLReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,getLineNr --> readers,net.n3.nanoxml.StdXMLReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,setSystemID --> currentReader,net.n3.nanoxml.StdXMLReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,setPublicID --> currentReader,net.n3.nanoxml.StdXMLReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,getSystemID --> currentReader,net.n3.nanoxml.StdXMLReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,getPublicID --> currentReader,net.n3.nanoxml.StdXMLReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,fileReader --> systemId,net.n3.nanoxml.StdXMLReader$StackedReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,fileReader --> systemId,net.n3.nanoxml.StdXMLReader$StackedReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,<init> --> lineReader,net.n3.nanoxml.StdXMLReader$StackedReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,<init> --> lineReader,net.n3.nanoxml.StdXMLReader$StackedReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,<init> --> pbReader,net.n3.nanoxml.StdXMLReader$StackedReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,<init>$2 --> lineReader,net.n3.nanoxml.StdXMLReader$StackedReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,<init>$2 --> lineReader,net.n3.nanoxml.StdXMLReader$StackedReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,<init>$2 --> pbReader,net.n3.nanoxml.StdXMLReader$StackedReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,<init>$2 --> publicId,net.n3.nanoxml.StdXMLReader$StackedReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,<init>$2 --> systemId,net.n3.nanoxml.StdXMLReader$StackedReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,finalize --> lineReader,net.n3.nanoxml.StdXMLReader$StackedReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,finalize --> pbReader,net.n3.nanoxml.StdXMLReader$StackedReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,finalize --> systemId,net.n3.nanoxml.StdXMLReader$StackedReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,finalize --> publicId,net.n3.nanoxml.StdXMLReader$StackedReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,<init>$3 --> lineReader,net.n3.nanoxml.StdXMLReader$StackedReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,<init>$3 --> lineReader,net.n3.nanoxml.StdXMLReader$StackedReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,<init>$3 --> pbReader,net.n3.nanoxml.StdXMLReader$StackedReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,<init>$3 --> publicId,net.n3.nanoxml.StdXMLReader$StackedReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,<init>$3 --> systemId,net.n3.nanoxml.StdXMLReader$StackedReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,read --> pbReader,net.n3.nanoxml.StdXMLReader$StackedReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,atEOFOfCurrentStream --> pbReader,net.n3.nanoxml.StdXMLReader$StackedReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,atEOF --> pbReader,net.n3.nanoxml.StdXMLReader$StackedReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,unread --> pbReader,net.n3.nanoxml.StdXMLReader$StackedReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,openStream --> systemId,net.n3.nanoxml.StdXMLReader$StackedReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,openStream --> publicId,net.n3.nanoxml.StdXMLReader$StackedReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,openStream --> systemId,net.n3.nanoxml.StdXMLReader$StackedReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,startNewStream$2 --> lineReader,net.n3.nanoxml.StdXMLReader$StackedReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,startNewStream$2 --> systemId,net.n3.nanoxml.StdXMLReader$StackedReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,startNewStream$2 --> publicId,net.n3.nanoxml.StdXMLReader$StackedReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,startNewStream$2 --> lineReader,net.n3.nanoxml.StdXMLReader$StackedReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,startNewStream$2 --> pbReader,net.n3.nanoxml.StdXMLReader$StackedReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,startNewStream$2 --> systemId,net.n3.nanoxml.StdXMLReader$StackedReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,startNewStream$2 --> publicId,net.n3.nanoxml.StdXMLReader$StackedReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,getLineNr --> lineReader,net.n3.nanoxml.StdXMLReader$StackedReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,setSystemID --> systemId,net.n3.nanoxml.StdXMLReader$StackedReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,setSystemID --> systemId,net.n3.nanoxml.StdXMLReader$StackedReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,setPublicID --> publicId,net.n3.nanoxml.StdXMLReader$StackedReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,getSystemID --> systemId,net.n3.nanoxml.StdXMLReader$StackedReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader,getPublicID --> publicId,net.n3.nanoxml.StdXMLReader$StackedReader,READ);
Call(METHOD,net.n3.nanoxml.StdXMLReader,<init> --> <init>$2,net.n3.nanoxml.StdXMLReader$StackedReader,);
Call(METHOD,net.n3.nanoxml.StdXMLReader,<init>$2 --> <init>$2,net.n3.nanoxml.StdXMLReader$StackedReader,);
Call(METHOD,net.n3.nanoxml.StdXMLReader,<init>$3 --> <init>$2,net.n3.nanoxml.StdXMLReader$StackedReader,);
Call(METHOD,net.n3.nanoxml.StdXMLReader,startNewStream$2 --> <init>$2,net.n3.nanoxml.StdXMLReader$StackedReader,);
EndClass 457
StartClass 458
Class(net.n3.nanoxml.XMLParserFactory,N,N,Public);
Attribute(DEFAULT_CLASS,java.lang.String,Public,Y,Y,);
Attribute(CLASS_KEY,java.lang.String,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(createDefaultXMLParser,net.n3.nanoxml.IXMLParser,Public,Y,N);
Method(createDefaultXMLParser$2,net.n3.nanoxml.IXMLParser,Public,Y,N);
Method(createXMLParser,net.n3.nanoxml.IXMLParser,Public,Y,N);
Parameter(createDefaultXMLParser$2,net.n3.nanoxml.IXMLBuilder,);
Parameter(createXMLParser,java.lang.String,);
Parameter(createXMLParser,net.n3.nanoxml.IXMLBuilder,);
Call(METHOD,net.n3.nanoxml.XMLParserFactory,createDefaultXMLParser --> createXMLParser,net.n3.nanoxml.XMLParserFactory,);
Call(METHOD,net.n3.nanoxml.XMLParserFactory,createDefaultXMLParser$2 --> createXMLParser,net.n3.nanoxml.XMLParserFactory,);
Call(METHOD,net.n3.nanoxml.XMLParserFactory,createDefaultXMLParser --> <init>,net.n3.nanoxml.StdXMLBuilder,);
Call(METHOD,net.n3.nanoxml.XMLParserFactory,createXMLParser --> setBuilder,net.n3.nanoxml.IXMLParser,);
Call(METHOD,net.n3.nanoxml.XMLParserFactory,createXMLParser --> <init>,net.n3.nanoxml.NonValidator,);
Call(METHOD,net.n3.nanoxml.XMLParserFactory,createXMLParser --> setValidator,net.n3.nanoxml.IXMLParser,);
EndClass 458
StartClass 459
Class(net.n3.nanoxml.IXMLParser,Y,Y,Public);
Method(setReader,void,Public,N,Y);
Method(getReader,net.n3.nanoxml.IXMLReader,Public,N,Y);
Method(setBuilder,void,Public,N,Y);
Method(getBuilder,net.n3.nanoxml.IXMLBuilder,Public,N,Y);
Method(setValidator,void,Public,N,Y);
Method(getValidator,net.n3.nanoxml.IXMLValidator,Public,N,Y);
Method(setResolver,void,Public,N,Y);
Method(getResolver,net.n3.nanoxml.IXMLEntityResolver,Public,N,Y);
Method(parse,java.lang.Object,Public,N,Y);
Parameter(setReader,net.n3.nanoxml.IXMLReader,);
Parameter(setBuilder,net.n3.nanoxml.IXMLBuilder,);
Parameter(setValidator,net.n3.nanoxml.IXMLValidator,);
Parameter(setResolver,net.n3.nanoxml.IXMLEntityResolver,);
EndClass 459
StartClass 460
Class(net.n3.nanoxml.IXMLReader,Y,Y,Public);
Method(read,char,Public,N,Y);
Method(atEOFOfCurrentStream,boolean,Public,N,Y);
Method(atEOF,boolean,Public,N,Y);
Method(unread,void,Public,N,Y);
Method(getLineNr,int,Public,N,Y);
Method(openStream,java.io.Reader,Public,N,Y);
Method(startNewStream,void,Public,N,Y);
Method(startNewStream$2,void,Public,N,Y);
Method(getStreamLevel,int,Public,N,Y);
Method(setSystemID,void,Public,N,Y);
Method(setPublicID,void,Public,N,Y);
Method(getSystemID,java.lang.String,Public,N,Y);
Method(getPublicID,java.lang.String,Public,N,Y);
Parameter(unread,char,);
Parameter(openStream,java.lang.String,);
Parameter(openStream,java.lang.String,);
Parameter(startNewStream,java.io.Reader,);
Parameter(startNewStream$2,java.io.Reader,);
Parameter(startNewStream$2,boolean,);
Parameter(setSystemID,java.lang.String,);
Parameter(setPublicID,java.lang.String,);
EndClass 460
StartClass 461
Class(net.n3.nanoxml.IXMLElement,Y,Y,Public);
Attribute(NO_LINE,int,Public,Y,Y,);
Method(createPCDataElement,net.n3.nanoxml.IXMLElement,Public,N,Y);
Method(createElement,net.n3.nanoxml.IXMLElement,Public,N,Y);
Method(createElement$2,net.n3.nanoxml.IXMLElement,Public,N,Y);
Method(createElement$3,net.n3.nanoxml.IXMLElement,Public,N,Y);
Method(createElement$4,net.n3.nanoxml.IXMLElement,Public,N,Y);
Method(getParent,net.n3.nanoxml.IXMLElement,Public,N,Y);
Method(getFullName,java.lang.String,Public,N,Y);
Method(getName,java.lang.String,Public,N,Y);
Method(getNamespace,java.lang.String,Public,N,Y);
Method(setName,void,Public,N,Y);
Method(setName$2,void,Public,N,Y);
Method(addChild,void,Public,N,Y);
Method(removeChild,void,Public,N,Y);
Method(removeChildAtIndex,void,Public,N,Y);
Method(iterateChildren,java.util.Iterator,Public,N,Y);
Method(isLeaf,boolean,Public,N,Y);
Method(hasChildren,boolean,Public,N,Y);
Method(getChildrenCount,int,Public,N,Y);
Method(getChildren,java.util.ArrayList,Public,N,Y);
Method(getChildAtIndex,net.n3.nanoxml.IXMLElement,Public,N,Y);
Method(getFirstChildNamed,net.n3.nanoxml.IXMLElement,Public,N,Y);
Method(getFirstChildNamed$2,net.n3.nanoxml.IXMLElement,Public,N,Y);
Method(getChildrenNamed,java.util.ArrayList,Public,N,Y);
Method(getChildrenNamed$2,java.util.ArrayList,Public,N,Y);
Method(getAttributeCount,int,Public,N,Y);
Method(getAttribute,java.lang.String,Public,N,Y);
Method(getAttribute$2,java.lang.String,Public,N,Y);
Method(getAttribute$3,java.lang.String,Public,N,Y);
Method(getAttribute$4,int,Public,N,Y);
Method(getAttribute$5,int,Public,N,Y);
Method(getAttribute$6,java.lang.Object,Public,N,Y);
Method(getDoubleAttribute,double,Public,N,Y);
Method(getAttributeType,java.lang.String,Public,N,Y);
Method(getAttributeNamespace,java.lang.String,Public,N,Y);
Method(getAttributeType$2,java.lang.String,Public,N,Y);
Method(setAttribute,void,Public,N,Y);
Method(setAttribute$2,void,Public,N,Y);
Method(removeAttribute,void,Public,N,Y);
Method(removeAttribute$2,void,Public,N,Y);
Method(iterateAttributeNames,java.util.Iterator,Public,N,Y);
Method(hasAttribute,boolean,Public,N,Y);
Method(hasAttribute$2,boolean,Public,N,Y);
Method(getAttributes,java.util.Properties,Public,N,Y);
Method(getAttributesInNamespace,java.util.Properties,Public,N,Y);
Method(getSystemID,java.lang.String,Public,N,Y);
Method(getLineNr,int,Public,N,Y);
Method(getContent,java.lang.String,Public,N,Y);
Method(setContent,void,Public,N,Y);
Method(equals,boolean,Public,N,Y);
Method(equalsXMLElement,boolean,Public,N,Y);
Method(dispose,void,Public,N,Y);
Parameter(createElement,java.lang.String,);
Parameter(createElement$2,java.lang.String,);
Parameter(createElement$2,java.lang.String,);
Parameter(createElement$2,int,);
Parameter(createElement$3,java.lang.String,);
Parameter(createElement$3,java.lang.String,);
Parameter(createElement$4,java.lang.String,);
Parameter(createElement$4,java.lang.String,);
Parameter(createElement$4,java.lang.String,);
Parameter(createElement$4,int,);
Parameter(setName,java.lang.String,);
Parameter(setName$2,java.lang.String,);
Parameter(setName$2,java.lang.String,);
Parameter(addChild,net.n3.nanoxml.IXMLElement,);
Parameter(removeChild,net.n3.nanoxml.IXMLElement,);
Parameter(removeChildAtIndex,int,);
Parameter(getChildAtIndex,int,);
Parameter(getFirstChildNamed,java.lang.String,);
Parameter(getFirstChildNamed$2,java.lang.String,);
Parameter(getFirstChildNamed$2,java.lang.String,);
Parameter(getChildrenNamed,java.lang.String,net.n3.nanoxml.IXMLElement);
Parameter(getChildrenNamed$2,java.lang.String,net.n3.nanoxml.IXMLElement);
Parameter(getChildrenNamed$2,java.lang.String,);
Parameter(getAttribute,java.lang.String,);
Parameter(getAttribute$2,java.lang.String,);
Parameter(getAttribute$2,java.lang.String,);
Parameter(getAttribute$3,java.lang.String,);
Parameter(getAttribute$3,java.lang.String,);
Parameter(getAttribute$3,java.lang.String,);
Parameter(getAttribute$4,java.lang.String,);
Parameter(getAttribute$4,int,);
Parameter(getAttribute$5,java.lang.String,);
Parameter(getAttribute$5,java.lang.String,);
Parameter(getAttribute$5,int,);
Parameter(getAttribute$6,java.lang.String,);
Parameter(getAttribute$6,java.lang.String,);
Parameter(getAttribute$6,java.util.Map,);
Parameter(getAttribute$6,java.lang.String,);
Parameter(getDoubleAttribute,java.lang.String,);
Parameter(getDoubleAttribute,java.lang.String,);
Parameter(getDoubleAttribute,double,);
Parameter(getAttributeType,java.lang.String,);
Parameter(getAttributeNamespace,java.lang.String,);
Parameter(getAttributeType$2,java.lang.String,);
Parameter(getAttributeType$2,java.lang.String,);
Parameter(setAttribute,java.lang.String,);
Parameter(setAttribute,java.lang.String,);
Parameter(setAttribute$2,java.lang.String,);
Parameter(setAttribute$2,java.lang.String,);
Parameter(setAttribute$2,java.lang.String,);
Parameter(removeAttribute,java.lang.String,);
Parameter(removeAttribute$2,java.lang.String,);
Parameter(removeAttribute$2,java.lang.String,);
Parameter(hasAttribute,java.lang.String,);
Parameter(hasAttribute$2,java.lang.String,);
Parameter(hasAttribute$2,java.lang.String,);
Parameter(getAttributesInNamespace,java.lang.String,);
Parameter(setContent,java.lang.String,);
Parameter(equals,java.lang.Object,);
Parameter(equalsXMLElement,net.n3.nanoxml.IXMLElement,);
EndClass 461
StartClass 462
Class(net.n3.nanoxml.XMLWriter,N,N,Public);
Attribute(writer,java.io.PrintWriter,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(finalize,void,Protected,N,N);
Method(write,void,Public,N,N);
Method(write$2,void,Public,N,N);
Method(write$3,void,Public,N,N);
Method(write$4,void,Public,N,N);
Method(writeEncoded,void,Private,N,N);
Parameter(<init>,java.io.Writer,);
Parameter(<init>$2,java.io.OutputStream,);
Parameter(write,net.n3.nanoxml.IXMLElement,);
Parameter(write$2,net.n3.nanoxml.IXMLElement,);
Parameter(write$2,boolean,);
Parameter(write$3,net.n3.nanoxml.IXMLElement,);
Parameter(write$3,boolean,);
Parameter(write$3,int,);
Parameter(write$4,net.n3.nanoxml.IXMLElement,);
Parameter(write$4,boolean,);
Parameter(write$4,int,);
Parameter(write$4,boolean,);
Parameter(writeEncoded,java.lang.String,);
Call(METHOD,net.n3.nanoxml.XMLWriter,write --> write$4,net.n3.nanoxml.XMLWriter,);
Call(METHOD,net.n3.nanoxml.XMLWriter,write$2 --> write$4,net.n3.nanoxml.XMLWriter,);
Call(METHOD,net.n3.nanoxml.XMLWriter,write$3 --> write$4,net.n3.nanoxml.XMLWriter,);
Call(METHOD,net.n3.nanoxml.XMLWriter,write$4 --> writeEncoded,net.n3.nanoxml.XMLWriter,);
Call(METHOD,net.n3.nanoxml.XMLWriter,write$4 --> write$4,net.n3.nanoxml.XMLWriter,);
Call(ATTRIBUTE,net.n3.nanoxml.XMLWriter,<init> --> writer,net.n3.nanoxml.XMLWriter,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLWriter,<init>$2 --> writer,net.n3.nanoxml.XMLWriter,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLWriter,finalize --> writer,net.n3.nanoxml.XMLWriter,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLWriter,write$4 --> writer,net.n3.nanoxml.XMLWriter,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLWriter,writeEncoded --> writer,net.n3.nanoxml.XMLWriter,READ);
Call(METHOD,net.n3.nanoxml.XMLWriter,write$4 --> getName,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLWriter,write$4 --> getContent,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLWriter,write$4 --> getFullName,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLWriter,write$4 --> getNamespace,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLWriter,write$4 --> iterateAttributeNames,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLWriter,write$4 --> getAttributeNamespace,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLWriter,write$4 --> getAttribute$2,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLWriter,write$4 --> hasChildren,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.XMLWriter,write$4 --> iterateChildren,net.n3.nanoxml.IXMLElement,);
EndClass 462
StartClass 463
Class(org.jhotdraw.geom.QuadTree$QuadNode,N,N,NA);
Attribute(bounds,java.awt.geom.Rectangle2D$Double,Private,N,N,);
Attribute(objects,java.util.HashMap,Private,N,N,);
Attribute(northEast,org.jhotdraw.geom.QuadTree$QuadNode,Private,N,N,,);
Attribute(northWest,org.jhotdraw.geom.QuadTree$QuadNode,Private,N,N,,);
Attribute(southEast,org.jhotdraw.geom.QuadTree$QuadNode,Private,N,N,,);
Attribute(southWest,org.jhotdraw.geom.QuadTree$QuadNode,Private,N,N,,);
Attribute(this$0,org.jhotdraw.geom.QuadTree,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(isLeaf,boolean,Public,N,N);
Method(remove,void,Public,N,N);
Method(add,void,Public,N,N);
Method(split,void,Public,N,N);
Method(join,void,Public,N,N);
Method(findContains,void,Public,N,N);
Method(findIntersects,void,Public,N,N);
Method(findInside,void,Public,N,N);
Method(access$000,java.awt.geom.Rectangle2D$Double,Public,Y,N);
Method(access$100,java.util.HashMap,Public,Y,N);
Method(access$002,java.awt.geom.Rectangle2D$Double,Public,Y,N);
Parameter(<init>,org.jhotdraw.geom.QuadTree,);
Parameter(<init>,java.awt.geom.Rectangle2D$Double,);
Parameter(remove,java.lang.Object,);
Parameter(add,java.lang.Object,);
Parameter(add,java.awt.geom.Rectangle2D$Double,);
Parameter(findContains,java.awt.geom.Point2D$Double,);
Parameter(findContains,java.util.HashSet,);
Parameter(findIntersects,java.awt.geom.Rectangle2D$Double,);
Parameter(findIntersects,java.util.HashSet,);
Parameter(findInside,java.awt.geom.Rectangle2D$Double,);
Parameter(findInside,java.util.HashSet,);
Parameter(access$000,org.jhotdraw.geom.QuadTree$QuadNode,);
Parameter(access$100,org.jhotdraw.geom.QuadTree$QuadNode,);
Parameter(access$002,org.jhotdraw.geom.QuadTree$QuadNode,);
Parameter(access$002,java.awt.geom.Rectangle2D$Double,);
Composition(org.jhotdraw.geom.QuadTree$QuadNode);
Composition(org.jhotdraw.geom.QuadTree);
Call(METHOD,org.jhotdraw.geom.QuadTree$QuadNode,remove --> isLeaf,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree$QuadNode,remove --> remove,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree$QuadNode,add --> isLeaf,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree$QuadNode,add --> split,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree$QuadNode,add --> add,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree$QuadNode,split --> isLeaf,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree$QuadNode,split --> <init>,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree$QuadNode,split --> add,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree$QuadNode,join --> isLeaf,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree$QuadNode,join --> join,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree$QuadNode,findContains --> isLeaf,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree$QuadNode,findContains --> findContains,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree$QuadNode,findIntersects --> isLeaf,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree$QuadNode,findIntersects --> findIntersects,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree$QuadNode,findInside --> isLeaf,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(METHOD,org.jhotdraw.geom.QuadTree$QuadNode,findInside --> findInside,org.jhotdraw.geom.QuadTree$QuadNode,);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,<init> --> this$0,org.jhotdraw.geom.QuadTree$QuadNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,<init> --> bounds,org.jhotdraw.geom.QuadTree$QuadNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,<init> --> objects,org.jhotdraw.geom.QuadTree$QuadNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,isLeaf --> northEast,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,remove --> objects,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,remove --> northEast,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,remove --> northWest,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,remove --> southEast,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,remove --> southWest,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,add --> objects,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,add --> this$0,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,add --> bounds,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,add --> northEast,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,add --> northWest,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,add --> southEast,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,add --> southWest,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,split --> bounds,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,split --> this$0,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,split --> objects,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,split --> northWest,org.jhotdraw.geom.QuadTree$QuadNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,split --> northEast,org.jhotdraw.geom.QuadTree$QuadNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,split --> southWest,org.jhotdraw.geom.QuadTree$QuadNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,split --> southEast,org.jhotdraw.geom.QuadTree$QuadNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,split --> objects,org.jhotdraw.geom.QuadTree$QuadNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,join --> northWest,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,join --> northEast,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,join --> southWest,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,join --> southEast,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,join --> objects,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,join --> northWest,org.jhotdraw.geom.QuadTree$QuadNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,join --> northEast,org.jhotdraw.geom.QuadTree$QuadNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,join --> southWest,org.jhotdraw.geom.QuadTree$QuadNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,join --> southEast,org.jhotdraw.geom.QuadTree$QuadNode,WRITE);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,findContains --> bounds,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,findContains --> objects,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,findContains --> northWest,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,findContains --> northEast,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,findContains --> southWest,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,findContains --> southEast,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,findIntersects --> bounds,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,findIntersects --> objects,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,findIntersects --> northWest,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,findIntersects --> northEast,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,findIntersects --> southWest,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,findIntersects --> southEast,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,findInside --> bounds,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,findInside --> objects,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,findInside --> northWest,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,findInside --> northEast,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,findInside --> southWest,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,findInside --> southEast,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,access$000 --> bounds,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,access$100 --> objects,org.jhotdraw.geom.QuadTree$QuadNode,READ);
Call(ATTRIBUTE,org.jhotdraw.geom.QuadTree$QuadNode,access$002 --> bounds,org.jhotdraw.geom.QuadTree$QuadNode,WRITE);
Call(METHOD,org.jhotdraw.geom.QuadTree$QuadNode,add --> access$200,org.jhotdraw.geom.QuadTree,);
Call(METHOD,org.jhotdraw.geom.QuadTree$QuadNode,add --> access$300,org.jhotdraw.geom.QuadTree,);
EndClass 463
StartClass 464
Class(org.jhotdraw.xml.JavaPrimitivesDOMFactory,N,N,Public);
Method(<init>,void,Public,N,N);
Method(escape,java.lang.String,Private,N,N);
Method(unescape,java.lang.String,Private,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(create,java.lang.Object,Public,N,N);
Method(getEnumName,java.lang.String,Protected,N,N);
Method(getEnumValue,java.lang.String,Protected,N,N);
Method(createEnum,java.lang.Enum,Protected,N,N);
Method(write,void,Public,N,N);
Method(read,java.lang.Object,Public,N,N);
Parameter(escape,java.lang.String,);
Parameter(unescape,java.lang.String,);
Parameter(getName,java.lang.Object,);
Parameter(create,java.lang.String,);
Parameter(getEnumName,java.lang.Enum,);
Parameter(getEnumValue,java.lang.Enum,);
Parameter(createEnum,java.lang.String,);
Parameter(createEnum,java.lang.String,);
Parameter(write,org.jhotdraw.xml.DOMOutput,);
Parameter(write,java.lang.Object,);
Parameter(read,org.jhotdraw.xml.DOMInput,);
SubClass(org.jhotdraw.samples.draw.DrawFigureFactory);
SubClass(org.jhotdraw.xml.DefaultDOMFactory);
Realization(org.jhotdraw.xml.DOMFactory);
Call(METHOD,org.jhotdraw.xml.JavaPrimitivesDOMFactory,getName --> escape,org.jhotdraw.xml.JavaPrimitivesDOMFactory,);
Call(METHOD,org.jhotdraw.xml.JavaPrimitivesDOMFactory,create --> unescape,org.jhotdraw.xml.JavaPrimitivesDOMFactory,);
Call(METHOD,org.jhotdraw.xml.JavaPrimitivesDOMFactory,getEnumName --> escape,org.jhotdraw.xml.JavaPrimitivesDOMFactory,);
Call(METHOD,org.jhotdraw.xml.JavaPrimitivesDOMFactory,createEnum --> unescape,org.jhotdraw.xml.JavaPrimitivesDOMFactory,);
Call(METHOD,org.jhotdraw.xml.JavaPrimitivesDOMFactory,write --> write,org.jhotdraw.xml.JavaPrimitivesDOMFactory,);
Call(METHOD,org.jhotdraw.xml.JavaPrimitivesDOMFactory,write --> getEnumName,org.jhotdraw.xml.JavaPrimitivesDOMFactory,);
Call(METHOD,org.jhotdraw.xml.JavaPrimitivesDOMFactory,write --> getEnumValue,org.jhotdraw.xml.JavaPrimitivesDOMFactory,);
Call(METHOD,org.jhotdraw.xml.JavaPrimitivesDOMFactory,read --> createEnum,org.jhotdraw.xml.JavaPrimitivesDOMFactory,);
Call(METHOD,org.jhotdraw.xml.JavaPrimitivesDOMFactory,read --> create,org.jhotdraw.xml.JavaPrimitivesDOMFactory,);
Call(METHOD,org.jhotdraw.xml.JavaPrimitivesDOMFactory,write --> write,org.jhotdraw.xml.DOMStorable,);
Call(METHOD,org.jhotdraw.xml.JavaPrimitivesDOMFactory,write --> addText,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.xml.JavaPrimitivesDOMFactory,write --> addAttribute,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.xml.JavaPrimitivesDOMFactory,write --> openElement,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.xml.JavaPrimitivesDOMFactory,write --> closeElement,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.xml.JavaPrimitivesDOMFactory,write --> addAttribute$3,org.jhotdraw.xml.DOMOutput,);
Call(METHOD,org.jhotdraw.xml.JavaPrimitivesDOMFactory,read --> getTagName,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.xml.JavaPrimitivesDOMFactory,read --> getText,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.xml.JavaPrimitivesDOMFactory,read --> getAttribute,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.xml.JavaPrimitivesDOMFactory,read --> getAttribute$2,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.xml.JavaPrimitivesDOMFactory,read --> getElementCount,org.jhotdraw.xml.DOMInput,);
Call(METHOD,org.jhotdraw.xml.JavaPrimitivesDOMFactory,read --> readObject$2,org.jhotdraw.xml.DOMInput,);
EndClass 464
StartClass 465
Class(org.jhotdraw.draw.DrawingEditorProxy$Forwarder,N,N,NA);
Attribute(this$0,org.jhotdraw.draw.DrawingEditorProxy,Public,N,Y,);
Method(<init>,void,Private,N,N);
Method(propertyChange,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditorProxy,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Parameter(<init>$2,org.jhotdraw.draw.DrawingEditorProxy,);
Parameter(<init>$2,org.jhotdraw.draw.DrawingEditorProxy$1,);
Composition(org.jhotdraw.draw.DrawingEditorProxy);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy$Forwarder,<init>$2 --> <init>,org.jhotdraw.draw.DrawingEditorProxy$Forwarder,);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy$Forwarder,<init> --> this$0,org.jhotdraw.draw.DrawingEditorProxy$Forwarder,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DrawingEditorProxy$Forwarder,propertyChange --> this$0,org.jhotdraw.draw.DrawingEditorProxy$Forwarder,READ);
Call(METHOD,org.jhotdraw.draw.DrawingEditorProxy$Forwarder,propertyChange --> access$000,org.jhotdraw.draw.DrawingEditorProxy,);
EndClass 465
StartClass 466
Class(org.jhotdraw.draw.DrawingEditorProxy$1,N,N,NA);
EndClass 466
StartClass 467
Class(org.jhotdraw.draw.handle.BezierControlPointHandle$1,N,N,NA);
Attribute(this$0,org.jhotdraw.draw.handle.BezierControlPointHandle,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(redo,void,Public,N,N);
Method(undo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.handle.BezierControlPointHandle,);
Parameter(<init>,org.jhotdraw.draw.BezierFigure,);
Parameter(<init>,int,);
Parameter(<init>,org.jhotdraw.geom.BezierPath$Node,);
Parameter(<init>,org.jhotdraw.geom.BezierPath$Node,);
SuperClass(org.jhotdraw.draw.event.BezierNodeEdit);
Generalization(org.jhotdraw.draw.event.BezierNodeEdit);
Composition(org.jhotdraw.draw.handle.BezierControlPointHandle);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle$1,<init> --> this$0,org.jhotdraw.draw.handle.BezierControlPointHandle$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle$1,redo --> this$0,org.jhotdraw.draw.handle.BezierControlPointHandle$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.BezierControlPointHandle$1,undo --> this$0,org.jhotdraw.draw.handle.BezierControlPointHandle$1,READ);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle$1,<init> --> <init>,org.jhotdraw.draw.event.BezierNodeEdit,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle$1,redo --> redo,org.jhotdraw.draw.event.BezierNodeEdit,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle$1,redo --> fireHandleRequestSecondaryHandles,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle$1,undo --> undo,org.jhotdraw.draw.event.BezierNodeEdit,);
Call(METHOD,org.jhotdraw.draw.handle.BezierControlPointHandle$1,undo --> fireHandleRequestSecondaryHandles,org.jhotdraw.draw.handle.AbstractHandle,);
EndClass 467
StartClass 468
Class(org.jhotdraw.draw.handle.AbstractRotateHandle,N,Y,Public);
Attribute(location,java.awt.Point,Private,N,N,);
Attribute(restoreData,java.lang.Object,Private,N,N,);
Attribute(transform,java.awt.geom.AffineTransform,Private,N,N,);
Attribute(center,java.awt.geom.Point2D$Double,Private,N,N,);
Attribute(startTheta,double,Private,N,N,);
Attribute(startLength,double,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(isCombinableWith,boolean,Public,N,N);
Method(getToolTipText,java.lang.String,Public,N,N);
Method(draw,void,Public,N,N);
Method(basicGetBounds,java.awt.Rectangle,Protected,N,N);
Method(getLocation,java.awt.Point,Public,N,N);
Method(getTransformedBounds,java.awt.geom.Rectangle2D$Double,Protected,N,N);
Method(getRestoreData,java.lang.Object,Protected,N,N);
Method(getStartTheta,double,Protected,N,N);
Method(getOrigin,java.awt.geom.Point2D$Double,Protected,N,Y);
Method(getCenter,java.awt.geom.Point2D$Double,Protected,N,Y);
Method(trackStart,void,Public,N,N);
Method(trackStep,void,Public,N,N);
Method(trackEnd,void,Public,N,N);
Method(keyPressed,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(isCombinableWith,org.jhotdraw.draw.handle.Handle,);
Parameter(getToolTipText,java.awt.Point,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(trackStart,java.awt.Point,);
Parameter(trackStart,int,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,int,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,int,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
SuperClass(org.jhotdraw.draw.handle.AbstractHandle);
SubClass(org.jhotdraw.draw.handle.RotateHandle);
Generalization(org.jhotdraw.draw.handle.AbstractHandle);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,basicGetBounds --> getLocation,org.jhotdraw.draw.handle.AbstractRotateHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,getLocation --> getOrigin,org.jhotdraw.draw.handle.AbstractRotateHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStart --> getCenter,org.jhotdraw.draw.handle.AbstractRotateHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,keyPressed --> getCenter,org.jhotdraw.draw.handle.AbstractRotateHandle,);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,getLocation --> location,org.jhotdraw.draw.handle.AbstractRotateHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,getRestoreData --> restoreData,org.jhotdraw.draw.handle.AbstractRotateHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,getStartTheta --> startTheta,org.jhotdraw.draw.handle.AbstractRotateHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStart --> center,org.jhotdraw.draw.handle.AbstractRotateHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStart --> location,org.jhotdraw.draw.handle.AbstractRotateHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStart --> restoreData,org.jhotdraw.draw.handle.AbstractRotateHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStart --> transform,org.jhotdraw.draw.handle.AbstractRotateHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStart --> center,org.jhotdraw.draw.handle.AbstractRotateHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStart --> startTheta,org.jhotdraw.draw.handle.AbstractRotateHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStart --> startLength,org.jhotdraw.draw.handle.AbstractRotateHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStep --> center,org.jhotdraw.draw.handle.AbstractRotateHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStep --> startTheta,org.jhotdraw.draw.handle.AbstractRotateHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStep --> transform,org.jhotdraw.draw.handle.AbstractRotateHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStep --> restoreData,org.jhotdraw.draw.handle.AbstractRotateHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStep --> location,org.jhotdraw.draw.handle.AbstractRotateHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,trackEnd --> restoreData,org.jhotdraw.draw.handle.AbstractRotateHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,trackEnd --> location,org.jhotdraw.draw.handle.AbstractRotateHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,keyPressed --> center,org.jhotdraw.draw.handle.AbstractRotateHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,keyPressed --> center,org.jhotdraw.draw.handle.AbstractRotateHandle,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,draw --> ROTATE_HANDLE_FILL_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,draw --> ROTATE_HANDLE_STROKE_COLOR,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,draw --> ROTATE_HANDLE_FILL_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,draw --> ROTATE_HANDLE_STROKE_COLOR_DISABLED,org.jhotdraw.draw.handle.HandleAttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,getLocation --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,getTransformedBounds --> TRANSFORM,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStart --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStep --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.handle.AbstractRotateHandle,trackEnd --> view,org.jhotdraw.draw.handle.AbstractHandle,READ);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,<init> --> <init>,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,getToolTipText --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,getToolTipText --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,draw --> getEditor,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,draw --> getTool,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,draw --> supportsHandleInteraction,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,draw --> getHandleAttribute,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,draw --> drawCircle,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,basicGetBounds --> getHandlesize,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,getLocation --> drawingToView,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,getTransformedBounds --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,getTransformedBounds --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,getTransformedBounds --> get,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStart --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStart --> getTransformRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStart --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStart --> angle,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStart --> length$2,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStep --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStep --> angle,org.jhotdraw.geom.Geom,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStep --> getConstrainer,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStep --> constrainAngle,org.jhotdraw.draw.Constrainer,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStep --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStep --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStep --> restoreTransformTo,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStep --> transform,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,trackStep --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,trackEnd --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,trackEnd --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,trackEnd --> getTransformRestoreData,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,trackEnd --> <init>,org.jhotdraw.draw.event.TransformRestoreEdit,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,trackEnd --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,trackEnd --> getDrawingArea,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,trackEnd --> fireAreaInvalidated,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,trackEnd --> invalidate,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,keyPressed --> getOwner,org.jhotdraw.draw.handle.AbstractHandle,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,keyPressed --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,keyPressed --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,keyPressed --> transform,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,keyPressed --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,keyPressed --> <init>,org.jhotdraw.draw.event.TransformEdit,);
Call(METHOD,org.jhotdraw.draw.handle.AbstractRotateHandle,keyPressed --> fireUndoableEditHappened,org.jhotdraw.draw.handle.AbstractHandle,);
EndClass 468
StartClass 469
Class(org.jhotdraw.draw.tool.HandleTracker,Y,Y,Public);
Method(setHandles,void,Public,N,Y);
Parameter(setHandles,org.jhotdraw.draw.handle.Handle,org.jhotdraw.draw.handle.Handle);
Parameter(setHandles,java.util.Collection,);
Realization(org.jhotdraw.draw.tool.Tool);
EndClass 469
StartClass 470
Class(org.jhotdraw.draw.tool.SelectAreaTracker,Y,Y,Public);
Realization(org.jhotdraw.draw.tool.Tool);
EndClass 470
StartClass 471
Class(org.jhotdraw.draw.tool.DragTracker,Y,Y,Public);
Method(setDraggedFigure,void,Public,N,Y);
Parameter(setDraggedFigure,org.jhotdraw.draw.Figure,);
Realization(org.jhotdraw.draw.tool.Tool);
EndClass 471
StartClass 472
Class(org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,N,N,NA);
Attribute(this$0,org.jhotdraw.draw.tool.SelectionTool,Public,N,Y,);
Method(<init>,void,Private,N,N);
Method(toolDone,void,Public,N,N);
Method(areaInvalidated,void,Public,N,N);
Method(boundsInvalidated,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.tool.SelectionTool,);
Parameter(toolDone,org.jhotdraw.draw.event.ToolEvent,);
Parameter(areaInvalidated,org.jhotdraw.draw.event.ToolEvent,);
Parameter(boundsInvalidated,org.jhotdraw.draw.event.ToolEvent,);
Parameter(<init>$2,org.jhotdraw.draw.tool.SelectionTool,);
Parameter(<init>$2,org.jhotdraw.draw.tool.SelectionTool$1,);
SuperClass(org.jhotdraw.draw.event.ToolAdapter);
Generalization(org.jhotdraw.draw.event.ToolAdapter);
Composition(org.jhotdraw.draw.tool.SelectionTool);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,<init>$2 --> <init>,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,<init> --> this$0,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,toolDone --> this$0,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,areaInvalidated --> this$0,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,boundsInvalidated --> this$0,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,READ);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,<init> --> <init>,org.jhotdraw.draw.event.ToolAdapter,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,toolDone --> getSelectAreaTracker,org.jhotdraw.draw.tool.SelectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,toolDone --> access$000,org.jhotdraw.draw.tool.SelectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,toolDone --> getEditor,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,toolDone --> deactivate,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,toolDone --> removeToolListener,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,toolDone --> access$002,org.jhotdraw.draw.tool.SelectionTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,toolDone --> activate,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,toolDone --> addToolListener,org.jhotdraw.draw.tool.Tool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,toolDone --> fireToolDone,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,areaInvalidated --> getInvalidatedArea,org.jhotdraw.draw.event.ToolEvent,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,areaInvalidated --> fireAreaInvalidated$2,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,boundsInvalidated --> getInvalidatedArea,org.jhotdraw.draw.event.ToolEvent,);
Call(METHOD,org.jhotdraw.draw.tool.SelectionTool$TrackerHandler,boundsInvalidated --> fireBoundsInvalidated,org.jhotdraw.draw.tool.AbstractTool,);
EndClass 472
StartClass 473
Class(org.jhotdraw.draw.tool.SelectionTool$1,N,N,NA);
EndClass 473
StartClass 474
Class(org.jhotdraw.draw.tool.DefaultHandleTracker,N,N,Public);
Attribute(dragLocation,java.awt.Point,Private,N,N,);
Attribute(masterHandle,org.jhotdraw.draw.handle.Handle,Private,N,N,);
Attribute(multicaster,org.jhotdraw.draw.event.HandleMulticaster,Private,N,N,);
Attribute(hoverHandles,java.util.LinkedList,Private,N,N,org.jhotdraw.draw.handle.Handle);
Attribute(hoverFigure,org.jhotdraw.draw.Figure,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(draw,void,Public,N,N);
Method(activate,void,Public,N,N);
Method(deactivate,void,Public,N,N);
Method(keyPressed,void,Public,N,N);
Method(keyReleased,void,Public,N,N);
Method(keyTyped,void,Public,N,N);
Method(mouseClicked,void,Public,N,N);
Method(mouseDragged,void,Public,N,N);
Method(mouseEntered,void,Public,N,N);
Method(mouseExited,void,Public,N,N);
Method(mouseMoved,void,Public,N,N);
Method(mousePressed,void,Public,N,N);
Method(mouseReleased,void,Public,N,N);
Method(clearHoverHandles,void,Protected,N,N);
Method(updateHoverHandles,void,Protected,N,N);
Method(setHandles,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.handle.Handle,);
Parameter(<init>$2,org.jhotdraw.draw.handle.Handle,org.jhotdraw.draw.handle.Handle);
Parameter(<init>$2,java.util.Collection,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(activate,org.jhotdraw.draw.DrawingEditor,);
Parameter(deactivate,org.jhotdraw.draw.DrawingEditor,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
Parameter(keyReleased,java.awt.event.KeyEvent,);
Parameter(keyTyped,java.awt.event.KeyEvent,);
Parameter(mouseClicked,java.awt.event.MouseEvent,);
Parameter(mouseDragged,java.awt.event.MouseEvent,);
Parameter(mouseEntered,java.awt.event.MouseEvent,);
Parameter(mouseExited,java.awt.event.MouseEvent,);
Parameter(mouseMoved,java.awt.event.MouseEvent,);
Parameter(mousePressed,java.awt.event.MouseEvent,);
Parameter(mouseReleased,java.awt.event.MouseEvent,);
Parameter(updateHoverHandles,org.jhotdraw.draw.DrawingView,);
Parameter(updateHoverHandles,org.jhotdraw.draw.Figure,);
Parameter(setHandles,org.jhotdraw.draw.handle.Handle,org.jhotdraw.draw.handle.Handle);
Parameter(setHandles,java.util.Collection,);
SuperClass(org.jhotdraw.draw.tool.AbstractTool);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.draw.tool.AbstractTool);
Realization(org.jhotdraw.draw.tool.HandleTracker);
Composition(org.jhotdraw.draw.handle.Handle);
Composition(org.jhotdraw.draw.event.HandleMulticaster);
Composition(org.jhotdraw.draw.Figure);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,activate --> clearHoverHandles,org.jhotdraw.draw.tool.DefaultHandleTracker,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,deactivate --> clearHoverHandles,org.jhotdraw.draw.tool.DefaultHandleTracker,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseDragged --> clearHoverHandles,org.jhotdraw.draw.tool.DefaultHandleTracker,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseExited --> updateHoverHandles,org.jhotdraw.draw.tool.DefaultHandleTracker,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseMoved --> clearHoverHandles,org.jhotdraw.draw.tool.DefaultHandleTracker,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseMoved --> updateHoverHandles,org.jhotdraw.draw.tool.DefaultHandleTracker,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mousePressed --> clearHoverHandles,org.jhotdraw.draw.tool.DefaultHandleTracker,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,clearHoverHandles --> updateHoverHandles,org.jhotdraw.draw.tool.DefaultHandleTracker,);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,<init> --> hoverHandles,org.jhotdraw.draw.tool.DefaultHandleTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,<init> --> hoverFigure,org.jhotdraw.draw.tool.DefaultHandleTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,<init> --> masterHandle,org.jhotdraw.draw.tool.DefaultHandleTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,<init> --> multicaster,org.jhotdraw.draw.tool.DefaultHandleTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,<init>$2 --> hoverHandles,org.jhotdraw.draw.tool.DefaultHandleTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,<init>$2 --> hoverFigure,org.jhotdraw.draw.tool.DefaultHandleTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,<init>$2 --> masterHandle,org.jhotdraw.draw.tool.DefaultHandleTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,<init>$2 --> multicaster,org.jhotdraw.draw.tool.DefaultHandleTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,<init>$3 --> hoverHandles,org.jhotdraw.draw.tool.DefaultHandleTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,<init>$3 --> hoverFigure,org.jhotdraw.draw.tool.DefaultHandleTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,draw --> hoverHandles,org.jhotdraw.draw.tool.DefaultHandleTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,draw --> hoverFigure,org.jhotdraw.draw.tool.DefaultHandleTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,activate --> masterHandle,org.jhotdraw.draw.tool.DefaultHandleTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,deactivate --> dragLocation,org.jhotdraw.draw.tool.DefaultHandleTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,keyPressed --> multicaster,org.jhotdraw.draw.tool.DefaultHandleTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,keyPressed --> dragLocation,org.jhotdraw.draw.tool.DefaultHandleTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,keyReleased --> multicaster,org.jhotdraw.draw.tool.DefaultHandleTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,keyReleased --> dragLocation,org.jhotdraw.draw.tool.DefaultHandleTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,keyTyped --> multicaster,org.jhotdraw.draw.tool.DefaultHandleTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseClicked --> multicaster,org.jhotdraw.draw.tool.DefaultHandleTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseDragged --> multicaster,org.jhotdraw.draw.tool.DefaultHandleTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseDragged --> dragLocation,org.jhotdraw.draw.tool.DefaultHandleTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseDragged --> dragLocation,org.jhotdraw.draw.tool.DefaultHandleTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseExited --> dragLocation,org.jhotdraw.draw.tool.DefaultHandleTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,mousePressed --> multicaster,org.jhotdraw.draw.tool.DefaultHandleTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseReleased --> multicaster,org.jhotdraw.draw.tool.DefaultHandleTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseReleased --> dragLocation,org.jhotdraw.draw.tool.DefaultHandleTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseReleased --> dragLocation,org.jhotdraw.draw.tool.DefaultHandleTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,updateHoverHandles --> hoverFigure,org.jhotdraw.draw.tool.DefaultHandleTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,updateHoverHandles --> hoverHandles,org.jhotdraw.draw.tool.DefaultHandleTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,updateHoverHandles --> hoverFigure,org.jhotdraw.draw.tool.DefaultHandleTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,setHandles --> masterHandle,org.jhotdraw.draw.tool.DefaultHandleTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,setHandles --> multicaster,org.jhotdraw.draw.tool.DefaultHandleTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,keyPressed --> anchor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,keyReleased --> anchor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseDragged --> anchor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseExited --> editor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseMoved --> editor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,mousePressed --> anchor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,mousePressed --> anchor,org.jhotdraw.draw.tool.AbstractTool,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseReleased --> anchor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,<init> --> <init>,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,<init> --> <init>,org.jhotdraw.draw.event.HandleMulticaster,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,<init>$2 --> <init>,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,<init>$2 --> <init>$2,org.jhotdraw.draw.event.HandleMulticaster,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,<init>$3 --> <init>,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,draw --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,draw --> isFigureSelected,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,draw --> draw,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,activate --> activate,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,activate --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,activate --> getCursor,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,activate --> setCursor,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,activate --> setActiveHandle,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,deactivate --> deactivate,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,deactivate --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,deactivate --> setCursor,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,deactivate --> setActiveHandle,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,keyPressed --> keyPressed,org.jhotdraw.draw.event.HandleMulticaster,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,keyPressed --> keyPressed,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,keyPressed --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,keyPressed --> trackStep,org.jhotdraw.draw.event.HandleMulticaster,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,keyReleased --> keyReleased,org.jhotdraw.draw.event.HandleMulticaster,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,keyReleased --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,keyReleased --> trackStep,org.jhotdraw.draw.event.HandleMulticaster,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,keyTyped --> keyTyped,org.jhotdraw.draw.event.HandleMulticaster,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseClicked --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseClicked --> trackDoubleClick,org.jhotdraw.draw.event.HandleMulticaster,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseDragged --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseDragged --> trackStep,org.jhotdraw.draw.event.HandleMulticaster,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseExited --> findView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseMoved --> findView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseMoved --> updateCursor,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseMoved --> getActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseMoved --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseMoved --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseMoved --> contains,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseMoved --> findFigure,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseMoved --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseMoved --> isSelectable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseMoved --> findFigureBehind,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mousePressed --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mousePressed --> trackStart,org.jhotdraw.draw.event.HandleMulticaster,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseReleased --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseReleased --> trackEnd,org.jhotdraw.draw.event.HandleMulticaster,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,mouseReleased --> maybeFireBoundsInvalidated,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,updateHoverHandles --> isSelectable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,updateHoverHandles --> getDrawingArea,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,updateHoverHandles --> setView,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,updateHoverHandles --> dispose,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,updateHoverHandles --> createHandles,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,updateHoverHandles --> fireAreaInvalidated$2,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultHandleTracker,setHandles --> <init>,org.jhotdraw.draw.event.HandleMulticaster,);
EndClass 474
StartClass 475
Class(org.jhotdraw.draw.tool.DefaultDragTracker,N,N,Public);
Attribute(anchorFigure,org.jhotdraw.draw.Figure,Protected,N,N,);
Attribute(dragRect,java.awt.geom.Rectangle2D$Double,Protected,N,N,);
Attribute(previousOrigin,java.awt.geom.Point2D$Double,Protected,N,N,);
Attribute(anchorOrigin,java.awt.geom.Point2D$Double,Protected,N,N,);
Attribute(previousPoint,java.awt.geom.Point2D$Double,Protected,N,N,);
Attribute(anchorPoint,java.awt.geom.Point2D$Double,Protected,N,N,);
Attribute(isDragging,boolean,Private,N,N,);
Attribute(transformedFigures,java.util.HashSet,Private,N,N,org.jhotdraw.draw.Figure,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(mouseMoved,void,Public,N,N);
Method(mousePressed,void,Public,N,N);
Method(mouseDragged,void,Public,N,N);
Method(mouseReleased,void,Public,N,N);
Method(setDraggedFigure,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.Figure,);
Parameter(mouseMoved,java.awt.event.MouseEvent,);
Parameter(mousePressed,java.awt.event.MouseEvent,);
Parameter(mouseDragged,java.awt.event.MouseEvent,);
Parameter(mouseReleased,java.awt.event.MouseEvent,);
Parameter(setDraggedFigure,org.jhotdraw.draw.Figure,);
SuperClass(org.jhotdraw.draw.tool.AbstractTool);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.draw.tool.AbstractTool);
Realization(org.jhotdraw.draw.tool.DragTracker);
Composition(org.jhotdraw.draw.Figure);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,<init> --> anchorFigure,org.jhotdraw.draw.tool.DefaultDragTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mousePressed --> anchorFigure,org.jhotdraw.draw.tool.DefaultDragTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mousePressed --> transformedFigures,org.jhotdraw.draw.tool.DefaultDragTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mousePressed --> dragRect,org.jhotdraw.draw.tool.DefaultDragTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mousePressed --> anchorFigure,org.jhotdraw.draw.tool.DefaultDragTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mousePressed --> dragRect,org.jhotdraw.draw.tool.DefaultDragTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mousePressed --> transformedFigures,org.jhotdraw.draw.tool.DefaultDragTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mousePressed --> previousPoint,org.jhotdraw.draw.tool.DefaultDragTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mousePressed --> anchorPoint,org.jhotdraw.draw.tool.DefaultDragTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mousePressed --> previousOrigin,org.jhotdraw.draw.tool.DefaultDragTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mousePressed --> anchorOrigin,org.jhotdraw.draw.tool.DefaultDragTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mouseDragged --> transformedFigures,org.jhotdraw.draw.tool.DefaultDragTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mouseDragged --> isDragging,org.jhotdraw.draw.tool.DefaultDragTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mouseDragged --> dragRect,org.jhotdraw.draw.tool.DefaultDragTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mouseDragged --> previousPoint,org.jhotdraw.draw.tool.DefaultDragTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mouseDragged --> previousOrigin,org.jhotdraw.draw.tool.DefaultDragTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mouseDragged --> isDragging,org.jhotdraw.draw.tool.DefaultDragTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mouseDragged --> previousPoint,org.jhotdraw.draw.tool.DefaultDragTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mouseDragged --> previousOrigin,org.jhotdraw.draw.tool.DefaultDragTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mouseReleased --> transformedFigures,org.jhotdraw.draw.tool.DefaultDragTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mouseReleased --> anchorOrigin,org.jhotdraw.draw.tool.DefaultDragTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mouseReleased --> previousOrigin,org.jhotdraw.draw.tool.DefaultDragTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mouseReleased --> isDragging,org.jhotdraw.draw.tool.DefaultDragTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mouseReleased --> transformedFigures,org.jhotdraw.draw.tool.DefaultDragTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,setDraggedFigure --> anchorFigure,org.jhotdraw.draw.tool.DefaultDragTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mouseMoved --> editor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mousePressed --> anchor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mouseDragged --> editor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mouseReleased --> editor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultDragTracker,mouseReleased --> anchor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,<init> --> <init>,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,<init>$2 --> <init>,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseMoved --> findView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseMoved --> updateCursor,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mousePressed --> mousePressed,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mousePressed --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mousePressed --> setHandleDetailLevel,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mousePressed --> toggleSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mousePressed --> isFigureSelected,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mousePressed --> clearSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mousePressed --> addToSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mousePressed --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mousePressed --> isTransformable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mousePressed --> getBounds,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mousePressed --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseDragged --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseDragged --> findView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseDragged --> updateCursor,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseDragged --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseDragged --> getConstrainer,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseDragged --> constrainRectangle,org.jhotdraw.draw.Constrainer,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseDragged --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseDragged --> transform,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseDragged --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseReleased --> mouseReleased,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseReleased --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseReleased --> findView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseReleased --> updateCursor,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseReleased --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseReleased --> getDrawing,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseReleased --> findFigureExcept$2,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseReleased --> handleDrop,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseReleased --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseReleased --> transform,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseReleased --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseReleased --> maybeFireBoundsInvalidated,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseReleased --> fireToolDone,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseReleased --> <init>$2,org.jhotdraw.draw.event.TransformEdit,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultDragTracker,mouseReleased --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
EndClass 475
StartClass 476
Class(org.jhotdraw.draw.tool.DefaultSelectAreaTracker,N,N,Public);
Attribute(rubberband,java.awt.Rectangle,Private,N,N,);
Attribute(rubberbandColor,java.awt.Color,Private,N,N,);
Attribute(rubberbandStroke,java.awt.Stroke,Private,N,N,);
Attribute(hoverHandles,java.util.LinkedList,Private,N,N,org.jhotdraw.draw.handle.Handle);
Attribute(hoverFigure,org.jhotdraw.draw.Figure,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(mousePressed,void,Public,N,N);
Method(mouseReleased,void,Public,N,N);
Method(mouseDragged,void,Public,N,N);
Method(mouseMoved,void,Public,N,N);
Method(mouseExited,void,Public,N,N);
Method(clearRubberBand,void,Private,N,N);
Method(draw,void,Public,N,N);
Method(selectGroup,void,Private,N,N);
Method(clearHoverHandles,void,Protected,N,N);
Method(updateHoverHandles,void,Protected,N,N);
Method(activate,void,Public,N,N);
Method(deactivate,void,Public,N,N);
Parameter(mousePressed,java.awt.event.MouseEvent,);
Parameter(mouseReleased,java.awt.event.MouseEvent,);
Parameter(mouseDragged,java.awt.event.MouseEvent,);
Parameter(mouseMoved,java.awt.event.MouseEvent,);
Parameter(mouseExited,java.awt.event.MouseEvent,);
Parameter(draw,java.awt.Graphics2D,);
Parameter(selectGroup,boolean,);
Parameter(updateHoverHandles,org.jhotdraw.draw.DrawingView,);
Parameter(updateHoverHandles,org.jhotdraw.draw.Figure,);
Parameter(activate,org.jhotdraw.draw.DrawingEditor,);
Parameter(deactivate,org.jhotdraw.draw.DrawingEditor,);
SuperClass(org.jhotdraw.draw.tool.AbstractTool);
SuperClass(org.jhotdraw.beans.AbstractBean);
Generalization(org.jhotdraw.draw.tool.AbstractTool);
Realization(org.jhotdraw.draw.tool.SelectAreaTracker);
Composition(org.jhotdraw.draw.Figure);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,mousePressed --> clearRubberBand,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,mouseReleased --> selectGroup,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,mouseReleased --> clearRubberBand,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,mouseMoved --> clearRubberBand,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,mouseMoved --> clearHoverHandles,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,mouseMoved --> updateHoverHandles,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,mouseExited --> updateHoverHandles,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,clearHoverHandles --> updateHoverHandles,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,activate --> clearHoverHandles,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,deactivate --> clearHoverHandles,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,<init> --> rubberband,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,<init> --> rubberbandColor,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,<init> --> rubberbandStroke,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,<init> --> hoverHandles,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,<init> --> hoverFigure,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,mouseDragged --> rubberband,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,clearRubberBand --> rubberband,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,draw --> rubberbandStroke,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,draw --> rubberbandColor,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,draw --> rubberband,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,draw --> hoverHandles,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,draw --> hoverFigure,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,selectGroup --> rubberband,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,updateHoverHandles --> hoverFigure,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,updateHoverHandles --> hoverHandles,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,updateHoverHandles --> hoverFigure,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,mouseDragged --> anchor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,mouseMoved --> editor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,mouseExited --> editor,org.jhotdraw.draw.tool.AbstractTool,READ);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,<init> --> <init>,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,mousePressed --> mousePressed,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,mouseDragged --> fireAreaInvalidated$2,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,mouseMoved --> findView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,mouseMoved --> updateCursor,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,mouseMoved --> getActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,mouseMoved --> viewToDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,mouseMoved --> getSelectedFigures,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,mouseMoved --> contains,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,mouseMoved --> findFigure,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,mouseMoved --> isSelectable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,mouseMoved --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,mouseMoved --> findFigureBehind,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,mouseExited --> findView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,clearRubberBand --> fireAreaInvalidated$2,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,draw --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,draw --> isFigureSelected,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,draw --> draw,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,selectGroup --> getView,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,selectGroup --> findFiguresWithin,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,selectGroup --> isSelectable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,selectGroup --> addToSelection,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,updateHoverHandles --> getDrawingArea,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,updateHoverHandles --> setView,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,updateHoverHandles --> dispose,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,updateHoverHandles --> isSelectable,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,updateHoverHandles --> createHandles,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,updateHoverHandles --> fireAreaInvalidated$2,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,activate --> activate,org.jhotdraw.draw.tool.AbstractTool,);
Call(METHOD,org.jhotdraw.draw.tool.DefaultSelectAreaTracker,deactivate --> deactivate,org.jhotdraw.draw.tool.AbstractTool,);
EndClass 476
StartClass 477
Class(org.jhotdraw.draw.action.AbstractDrawingViewAction$EventHandler,N,N,NA);
Attribute(this$0,org.jhotdraw.draw.action.AbstractDrawingViewAction,Public,N,Y,);
Method(<init>,void,Private,N,N);
Method(propertyChange,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Parameter(<init>$2,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Parameter(<init>$2,org.jhotdraw.draw.action.AbstractDrawingViewAction$1,);
Composition(org.jhotdraw.draw.action.AbstractDrawingViewAction);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction$EventHandler,<init>$2 --> <init>,org.jhotdraw.draw.action.AbstractDrawingViewAction$EventHandler,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction$EventHandler,<init> --> this$0,org.jhotdraw.draw.action.AbstractDrawingViewAction$EventHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction$EventHandler,propertyChange --> this$0,org.jhotdraw.draw.action.AbstractDrawingViewAction$EventHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingViewAction$EventHandler,toString --> this$0,org.jhotdraw.draw.action.AbstractDrawingViewAction$EventHandler,READ);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction$EventHandler,propertyChange --> updateEnabledState,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction$EventHandler,propertyChange --> access$000,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction$EventHandler,propertyChange --> access$100,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction$EventHandler,propertyChange --> removePropertyChangeListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction$EventHandler,propertyChange --> access$002,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction$EventHandler,propertyChange --> addPropertyChangeListener,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingViewAction$EventHandler,propertyChange --> updateViewState,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
EndClass 477
StartClass 478
Class(org.jhotdraw.draw.action.AbstractDrawingViewAction$1,N,N,NA);
EndClass 478
StartClass 479
Class(org.jhotdraw.draw.action.SelectionColorChooserHandler$1,N,N,NA);
Attribute(val$restoreData,java.util.ArrayList,Public,N,Y,);
Attribute(val$selectedFigures,java.util.ArrayList,Public,N,Y,);
Attribute(val$undoValue,java.awt.Color,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.action.SelectionColorChooserHandler,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.action.SelectionColorChooserHandler,);
Parameter(<init>,java.util.ArrayList,);
Parameter(<init>,java.util.ArrayList,);
Parameter(<init>,java.awt.Color,);
Composition(org.jhotdraw.draw.action.SelectionColorChooserHandler);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,<init> --> this$0,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,<init> --> val$restoreData,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,<init> --> val$selectedFigures,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,<init> --> val$undoValue,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,undo --> val$restoreData,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,undo --> val$selectedFigures,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,redo --> val$selectedFigures,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,redo --> this$0,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,redo --> val$undoValue,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,getPresentationName --> FONT_FACE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,redo --> key,org.jhotdraw.draw.action.SelectionColorChooserHandler,READ);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,getPresentationName --> getPresentationName,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,undo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,undo --> restoreAttributesTo,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,undo --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,redo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,redo --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.SelectionColorChooserHandler$1,redo --> changed,org.jhotdraw.draw.Figure,);
EndClass 479
StartClass 480
Class(org.jhotdraw.draw.action.DrawingColorChooserHandler$1,N,N,NA);
Attribute(val$drawing,org.jhotdraw.draw.Drawing,Public,N,Y,);
Attribute(val$restoreData,java.lang.Object,Public,N,Y,);
Attribute(val$undoValue,java.awt.Color,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.action.DrawingColorChooserHandler,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.action.DrawingColorChooserHandler,);
Parameter(<init>,org.jhotdraw.draw.Drawing,);
Parameter(<init>,java.lang.Object,);
Parameter(<init>,java.awt.Color,);
Composition(org.jhotdraw.draw.Drawing);
Composition(org.jhotdraw.draw.action.DrawingColorChooserHandler);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,<init> --> this$0,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,<init> --> val$drawing,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,<init> --> val$restoreData,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,<init> --> val$undoValue,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,undo --> val$drawing,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,undo --> val$restoreData,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,redo --> val$drawing,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,redo --> this$0,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,redo --> val$undoValue,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,getPresentationName --> FONT_FACE,org.jhotdraw.draw.AttributeKeys,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,redo --> key,org.jhotdraw.draw.action.DrawingColorChooserHandler,READ);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,getPresentationName --> getPresentationName,org.jhotdraw.draw.AttributeKey,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,undo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,undo --> restoreAttributesTo,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,undo --> changed,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,redo --> willChange,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,redo --> set,org.jhotdraw.draw.Figure,);
Call(METHOD,org.jhotdraw.draw.action.DrawingColorChooserHandler$1,redo --> changed,org.jhotdraw.draw.Figure,);
EndClass 480
StartClass 481
Class(org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,N,N,Public);
Attribute(labels,org.jhotdraw.util.ResourceBundleUtil,Private,N,N,);
Attribute(collectionList,javax.swing.JList,Private,N,N,);
Attribute(collectionsLabel,javax.swing.JLabel,Private,N,N,);
Attribute(collectionsPanel,javax.swing.JPanel,Private,N,N,);
Attribute(collectionsScrollPane,javax.swing.JScrollPane,Private,N,N,);
Attribute(faceLabel,javax.swing.JLabel,Private,N,N,);
Attribute(faceList,javax.swing.JList,Private,N,N,);
Attribute(facesPanel,javax.swing.JPanel,Private,N,N,);
Attribute(facesScrollPane,javax.swing.JScrollPane,Private,N,N,);
Attribute(familiesPanel,javax.swing.JPanel,Private,N,N,);
Attribute(familiesScrollPane,javax.swing.JScrollPane,Private,N,N,);
Attribute(familyLabel,javax.swing.JLabel,Private,N,N,);
Attribute(familyList,javax.swing.JList,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getCollectionList,javax.swing.JList,Public,N,N);
Method(getFamilyList,javax.swing.JList,Public,N,N);
Method(getFaceList,javax.swing.JList,Public,N,N);
Method(initComponents,void,Private,N,N);
Composition(org.jhotdraw.util.ResourceBundleUtil);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,<init> --> initComponents,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,<init> --> collectionList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,<init> --> familyList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,<init> --> faceList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,<init> --> collectionsScrollPane,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,<init> --> familiesScrollPane,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,<init> --> facesScrollPane,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,<init> --> labels,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,getCollectionList --> collectionList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,getFamilyList --> familyList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,getFaceList --> faceList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> collectionsPanel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> collectionsScrollPane,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> collectionList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> collectionsLabel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> labels,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> familiesPanel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> familiesScrollPane,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> familyList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> familyLabel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> facesPanel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> facesScrollPane,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> faceList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> faceLabel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> collectionsPanel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> collectionsScrollPane,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> collectionList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> collectionsLabel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> familiesPanel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> familiesScrollPane,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> familyList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> familyLabel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> facesPanel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> facesScrollPane,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> faceList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> faceLabel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,WRITE);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,<init> --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,initComponents --> getString,org.jhotdraw.util.ResourceBundleUtil,);
EndClass 481
StartClass 482
Class(org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel,N,N,Public);
Attribute(previewLabel,javax.swing.JLabel,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setSelectedFont,void,Public,N,N);
Method(beautifyName,java.lang.String,Private,N,N);
Method(initComponents,void,Private,N,N);
Parameter(setSelectedFont,java.awt.Font,);
Parameter(beautifyName,java.lang.String,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel,<init> --> initComponents,org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel,setSelectedFont --> beautifyName,org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel,);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel,<init> --> previewLabel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel,setSelectedFont --> previewLabel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel,initComponents --> previewLabel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel,initComponents --> previewLabel,org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel,WRITE);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel,<init> --> createUI,org.jhotdraw.gui.plaf.palette.PaletteLabelUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel,setSelectedFont --> getInstance,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserPreviewPanel,setSelectedFont --> get,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,);
EndClass 482
StartClass 483
Class(org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,N,N,NA);
Attribute(this$0,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,Public,N,Y,);
Method(<init>,void,Private,N,N);
Method(valueChanged,void,Public,N,N);
Method(keyReleased,void,Public,N,N);
Method(keyPressed,void,Public,N,N);
Method(keyTyped,void,Public,N,N);
Method(mouseClicked,void,Public,N,N);
Method(mousePressed,void,Public,N,N);
Method(mouseReleased,void,Public,N,N);
Method(mouseEntered,void,Public,N,N);
Method(mouseExited,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Parameter(valueChanged,javax.swing.event.ListSelectionEvent,);
Parameter(keyReleased,java.awt.event.KeyEvent,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
Parameter(keyTyped,java.awt.event.KeyEvent,);
Parameter(mouseClicked,java.awt.event.MouseEvent,);
Parameter(mousePressed,java.awt.event.MouseEvent,);
Parameter(mouseReleased,java.awt.event.MouseEvent,);
Parameter(mouseEntered,java.awt.event.MouseEvent,);
Parameter(mouseExited,java.awt.event.MouseEvent,);
Parameter(<init>$2,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Parameter(<init>$2,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$1,);
Composition(org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,<init>$2 --> <init>,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,<init> --> this$0,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,valueChanged --> this$0,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,keyReleased --> this$0,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,mouseClicked --> this$0,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,READ);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,valueChanged --> access$200,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,valueChanged --> access$300,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,valueChanged --> getCollectionList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,valueChanged --> access$400,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,valueChanged --> getFamilyList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,valueChanged --> access$500,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,valueChanged --> getFaceList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,valueChanged --> access$600,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,keyReleased --> access$300,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,keyReleased --> getCollectionList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,keyReleased --> getFamilyList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,keyReleased --> getFaceList,org.jhotdraw.gui.plaf.palette.PaletteFontChooserSelectionPanel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,keyReleased --> access$700,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,keyReleased --> cancelSelection,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,keyReleased --> approveSelection,org.jhotdraw.gui.JFontChooser,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,mouseClicked --> access$700,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$SelectionPanelHandler,mouseClicked --> approveSelection,org.jhotdraw.gui.JFontChooser,);
EndClass 483
StartClass 484
Class(org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,N,N,NA);
Attribute(this$0,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,Public,N,Y,);
Method(<init>,void,Private,N,N);
Method(propertyChange,void,Public,N,N);
Method(treeNodesChanged,void,Public,N,N);
Method(treeNodesInserted,void,Public,N,N);
Method(treeNodesRemoved,void,Public,N,N);
Method(treeStructureChanged,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Parameter(treeNodesChanged,javax.swing.event.TreeModelEvent,);
Parameter(treeNodesInserted,javax.swing.event.TreeModelEvent,);
Parameter(treeNodesRemoved,javax.swing.event.TreeModelEvent,);
Parameter(treeStructureChanged,javax.swing.event.TreeModelEvent,);
Parameter(<init>$2,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Parameter(<init>$2,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$1,);
Composition(org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,<init>$2 --> <init>,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,<init> --> this$0,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,propertyChange --> this$0,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,treeNodesChanged --> this$0,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,treeNodesInserted --> this$0,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,treeNodesRemoved --> this$0,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,treeStructureChanged --> this$0,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,READ);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,propertyChange --> access$800,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,propertyChange --> access$900,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,propertyChange --> access$1000,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,propertyChange --> access$1100,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,treeNodesChanged --> access$800,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,treeNodesChanged --> access$900,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,treeNodesChanged --> access$1000,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,treeNodesInserted --> access$800,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,treeNodesInserted --> access$900,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,treeNodesInserted --> access$1000,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,treeNodesRemoved --> access$800,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,treeNodesRemoved --> access$900,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,treeNodesRemoved --> access$1000,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,treeStructureChanged --> access$800,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,treeStructureChanged --> access$900,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$FontChooserHandler,treeStructureChanged --> access$1000,org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI,);
EndClass 484
StartClass 485
Class(org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI$1,N,N,NA);
EndClass 485
StartClass 486
Class(org.jhotdraw.gui.fontchooser.AbstractFontChooserModel,N,Y,Public);
Attribute(listenerList,javax.swing.event.EventListenerList,Protected,N,N,);
Method(<init>,void,Public,N,N);
Method(addTreeModelListener,void,Public,N,N);
Method(removeTreeModelListener,void,Public,N,N);
Method(getTreeModelListeners,javax.swing.event.TreeModelListener[],Public,N,N);
Method(fireTreeNodesChanged,void,Protected,N,N);
Method(fireTreeNodesInserted,void,Protected,N,N);
Method(fireTreeNodesRemoved,void,Protected,N,N);
Method(fireTreeStructureChanged,void,Protected,N,N);
Method(fireTreeStructureChanged$2,void,Protected,N,N);
Method(getListeners,java.util.EventListener[],Public,N,N);
Parameter(addTreeModelListener,javax.swing.event.TreeModelListener,);
Parameter(removeTreeModelListener,javax.swing.event.TreeModelListener,);
Parameter(fireTreeNodesChanged,java.lang.Object,);
Parameter(fireTreeNodesChanged,java.lang.Object[],);
Parameter(fireTreeNodesChanged,int[],);
Parameter(fireTreeNodesChanged,java.lang.Object[],);
Parameter(fireTreeNodesInserted,java.lang.Object,);
Parameter(fireTreeNodesInserted,java.lang.Object[],);
Parameter(fireTreeNodesInserted,int[],);
Parameter(fireTreeNodesInserted,java.lang.Object[],);
Parameter(fireTreeNodesRemoved,java.lang.Object,);
Parameter(fireTreeNodesRemoved,java.lang.Object[],);
Parameter(fireTreeNodesRemoved,int[],);
Parameter(fireTreeNodesRemoved,java.lang.Object[],);
Parameter(fireTreeStructureChanged,java.lang.Object,);
Parameter(fireTreeStructureChanged,java.lang.Object[],);
Parameter(fireTreeStructureChanged,int[],);
Parameter(fireTreeStructureChanged,java.lang.Object[],);
Parameter(fireTreeStructureChanged$2,java.lang.Object,);
Parameter(fireTreeStructureChanged$2,javax.swing.tree.TreePath,);
Parameter(getListeners,java.lang.Class,);
SubClass(org.jhotdraw.gui.fontchooser.DefaultFontChooserModel$UIResource);
SubClass(org.jhotdraw.gui.fontchooser.DefaultFontChooserModel);
Realization(org.jhotdraw.gui.fontchooser.FontChooserModel);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.AbstractFontChooserModel,<init> --> listenerList,org.jhotdraw.gui.fontchooser.AbstractFontChooserModel,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.AbstractFontChooserModel,addTreeModelListener --> listenerList,org.jhotdraw.gui.fontchooser.AbstractFontChooserModel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.AbstractFontChooserModel,removeTreeModelListener --> listenerList,org.jhotdraw.gui.fontchooser.AbstractFontChooserModel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.AbstractFontChooserModel,getTreeModelListeners --> listenerList,org.jhotdraw.gui.fontchooser.AbstractFontChooserModel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.AbstractFontChooserModel,fireTreeNodesChanged --> listenerList,org.jhotdraw.gui.fontchooser.AbstractFontChooserModel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.AbstractFontChooserModel,fireTreeNodesInserted --> listenerList,org.jhotdraw.gui.fontchooser.AbstractFontChooserModel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.AbstractFontChooserModel,fireTreeNodesRemoved --> listenerList,org.jhotdraw.gui.fontchooser.AbstractFontChooserModel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.AbstractFontChooserModel,fireTreeStructureChanged --> listenerList,org.jhotdraw.gui.fontchooser.AbstractFontChooserModel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.AbstractFontChooserModel,fireTreeStructureChanged$2 --> listenerList,org.jhotdraw.gui.fontchooser.AbstractFontChooserModel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.fontchooser.AbstractFontChooserModel,getListeners --> listenerList,org.jhotdraw.gui.fontchooser.AbstractFontChooserModel,READ);
EndClass 486
StartClass 487
Class(org.jhotdraw.draw.action.ZoomAction$1,N,N,NA);
Attribute(val$vRect,java.awt.Rectangle,Public,N,Y,);
Attribute(val$oldFactor,double,Public,N,Y,);
Attribute(this$0,org.jhotdraw.draw.action.ZoomAction,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(run,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.action.ZoomAction,);
Parameter(<init>,java.awt.Rectangle,);
Parameter(<init>,double,);
Composition(org.jhotdraw.draw.action.ZoomAction);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ZoomAction$1,<init> --> this$0,org.jhotdraw.draw.action.ZoomAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ZoomAction$1,<init> --> val$vRect,org.jhotdraw.draw.action.ZoomAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ZoomAction$1,<init> --> val$oldFactor,org.jhotdraw.draw.action.ZoomAction$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ZoomAction$1,run --> val$vRect,org.jhotdraw.draw.action.ZoomAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ZoomAction$1,run --> val$oldFactor,org.jhotdraw.draw.action.ZoomAction$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.ZoomAction$1,run --> this$0,org.jhotdraw.draw.action.ZoomAction$1,READ);
Call(METHOD,org.jhotdraw.draw.action.ZoomAction$1,run --> access$000,org.jhotdraw.draw.action.ZoomAction,);
Call(METHOD,org.jhotdraw.draw.action.ZoomAction$1,run --> getView,org.jhotdraw.draw.action.AbstractDrawingViewAction,);
Call(METHOD,org.jhotdraw.draw.action.ZoomAction$1,run --> getComponent,org.jhotdraw.draw.DrawingView,);
EndClass 487
StartClass 488
Class(org.jhotdraw.draw.action.AbstractDrawingEditorAction,N,Y,Public);
Attribute(editor,org.jhotdraw.draw.DrawingEditor,Protected,N,N,);
Attribute(eventHandler,org.jhotdraw.draw.action.AbstractDrawingEditorAction$EventHandler,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(setEditor,void,Public,N,N);
Method(updateEnabledState,void,Protected,N,N);
Method(getEditor,org.jhotdraw.draw.DrawingEditor,Public,N,N);
Method(getView,org.jhotdraw.draw.DrawingView,Protected,N,N);
Method(getDrawing,org.jhotdraw.draw.Drawing,Protected,N,N);
Method(fireUndoableEditHappened,void,Protected,N,N);
Method(setUpdateEnabledState,void,Public,N,N);
Method(isUpdatEnabledState,boolean,Public,N,N);
Method(unregisterEventHandler,void,Private,N,N);
Method(registerEventHandler,void,Private,N,N);
Parameter(<init>,org.jhotdraw.draw.DrawingEditor,);
Parameter(setEditor,org.jhotdraw.draw.DrawingEditor,);
Parameter(fireUndoableEditHappened,javax.swing.undo.UndoableEdit,);
Parameter(setUpdateEnabledState,boolean,);
SubClass(org.jhotdraw.draw.action.ButtonFactory$3);
SubClass(org.jhotdraw.draw.action.ZoomEditorAction);
Composition(org.jhotdraw.draw.DrawingEditor);
Composition(org.jhotdraw.draw.action.AbstractDrawingEditorAction$EventHandler);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingEditorAction,<init> --> setEditor,org.jhotdraw.draw.action.AbstractDrawingEditorAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingEditorAction,setEditor --> unregisterEventHandler,org.jhotdraw.draw.action.AbstractDrawingEditorAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingEditorAction,setEditor --> registerEventHandler,org.jhotdraw.draw.action.AbstractDrawingEditorAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingEditorAction,setEditor --> updateEnabledState,org.jhotdraw.draw.action.AbstractDrawingEditorAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingEditorAction,getDrawing --> getView,org.jhotdraw.draw.action.AbstractDrawingEditorAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingEditorAction,fireUndoableEditHappened --> getDrawing,org.jhotdraw.draw.action.AbstractDrawingEditorAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingEditorAction,setUpdateEnabledState --> registerEventHandler,org.jhotdraw.draw.action.AbstractDrawingEditorAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingEditorAction,setUpdateEnabledState --> unregisterEventHandler,org.jhotdraw.draw.action.AbstractDrawingEditorAction,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingEditorAction,setUpdateEnabledState --> updateEnabledState,org.jhotdraw.draw.action.AbstractDrawingEditorAction,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingEditorAction,<init> --> eventHandler,org.jhotdraw.draw.action.AbstractDrawingEditorAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingEditorAction,setEditor --> eventHandler,org.jhotdraw.draw.action.AbstractDrawingEditorAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingEditorAction,setEditor --> editor,org.jhotdraw.draw.action.AbstractDrawingEditorAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingEditorAction,updateEnabledState --> editor,org.jhotdraw.draw.action.AbstractDrawingEditorAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingEditorAction,getEditor --> editor,org.jhotdraw.draw.action.AbstractDrawingEditorAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingEditorAction,getView --> editor,org.jhotdraw.draw.action.AbstractDrawingEditorAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingEditorAction,setUpdateEnabledState --> eventHandler,org.jhotdraw.draw.action.AbstractDrawingEditorAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingEditorAction,setUpdateEnabledState --> eventHandler,org.jhotdraw.draw.action.AbstractDrawingEditorAction,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingEditorAction,isUpdatEnabledState --> eventHandler,org.jhotdraw.draw.action.AbstractDrawingEditorAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingEditorAction,unregisterEventHandler --> editor,org.jhotdraw.draw.action.AbstractDrawingEditorAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingEditorAction,unregisterEventHandler --> eventHandler,org.jhotdraw.draw.action.AbstractDrawingEditorAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingEditorAction,registerEventHandler --> editor,org.jhotdraw.draw.action.AbstractDrawingEditorAction,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingEditorAction,registerEventHandler --> eventHandler,org.jhotdraw.draw.action.AbstractDrawingEditorAction,READ);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingEditorAction,<init> --> <init>$2,org.jhotdraw.draw.action.AbstractDrawingEditorAction$EventHandler,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingEditorAction,updateEnabledState --> isEnabled,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingEditorAction,getView --> getActiveView,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingEditorAction,getDrawing --> getDrawing,org.jhotdraw.draw.DrawingView,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingEditorAction,fireUndoableEditHappened --> fireUndoableEditHappened,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingEditorAction,setUpdateEnabledState --> <init>$2,org.jhotdraw.draw.action.AbstractDrawingEditorAction$EventHandler,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingEditorAction,unregisterEventHandler --> removePropertyChangeListener,org.jhotdraw.draw.DrawingEditor,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingEditorAction,registerEventHandler --> <init>,org.jhotdraw.beans.WeakPropertyChangeListener,);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingEditorAction,registerEventHandler --> addPropertyChangeListener,org.jhotdraw.draw.DrawingEditor,);
EndClass 488
StartClass 489
Class(org.jhotdraw.app.action.file.LoadRecentFileAction$1$1,N,N,NA);
Attribute(this$1,org.jhotdraw.app.action.file.LoadRecentFileAction$1,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(optionSelected,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.file.LoadRecentFileAction$1,);
Parameter(optionSelected,org.jhotdraw.gui.event.SheetEvent,);
Realization(org.jhotdraw.gui.event.SheetListener);
Composition(org.jhotdraw.app.action.file.LoadRecentFileAction$1);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.LoadRecentFileAction$1$1,<init> --> this$1,org.jhotdraw.app.action.file.LoadRecentFileAction$1$1,WRITE);
EndClass 489
StartClass 490
Class(org.jhotdraw.app.action.file.OpenRecentFileAction$1$1,N,N,NA);
Attribute(this$1,org.jhotdraw.app.action.file.OpenRecentFileAction$1,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(optionSelected,void,Public,N,N);
Parameter(<init>,org.jhotdraw.app.action.file.OpenRecentFileAction$1,);
Parameter(optionSelected,org.jhotdraw.gui.event.SheetEvent,);
Realization(org.jhotdraw.gui.event.SheetListener);
Composition(org.jhotdraw.app.action.file.OpenRecentFileAction$1);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenRecentFileAction$1$1,<init> --> this$1,org.jhotdraw.app.action.file.OpenRecentFileAction$1$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenRecentFileAction$1$1,optionSelected --> this$1,org.jhotdraw.app.action.file.OpenRecentFileAction$1$1,READ);
Call(ATTRIBUTE,org.jhotdraw.app.action.file.OpenRecentFileAction$1$1,optionSelected --> val$view,org.jhotdraw.app.action.file.OpenRecentFileAction$1,READ);
Call(METHOD,org.jhotdraw.app.action.file.OpenRecentFileAction$1$1,optionSelected --> setEnabled,org.jhotdraw.app.View,);
EndClass 490
StartClass 491
Class(org.jhotdraw.gui.datatransfer.AbstractClipboard,N,Y,Public);
Method(<init>,void,Public,N,N);
Method(getContents,java.awt.datatransfer.Transferable,Public,N,Y);
Method(setContents,void,Public,N,Y);
Parameter(getContents,java.lang.Object,);
Parameter(setContents,java.awt.datatransfer.Transferable,);
Parameter(setContents,java.awt.datatransfer.ClipboardOwner,);
SubClass(org.jhotdraw.gui.datatransfer.OSXClipboard);
SubClass(org.jhotdraw.gui.datatransfer.AWTClipboard);
SubClass(org.jhotdraw.gui.datatransfer.JNLPClipboard);
EndClass 491
StartClass 492
Class(org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3$1,N,N,NA);
Attribute(val$importedFigures,java.util.LinkedList,Public,N,Y,);
Attribute(this$1,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,Public,N,Y,);
Method(<init>,void,Public,N,N);
Method(getPresentationName,java.lang.String,Public,N,N);
Method(undo,void,Public,N,N);
Method(redo,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,);
Parameter(<init>,java.util.LinkedList,);
Composition(org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3$1,<init> --> this$1,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3$1,<init> --> val$importedFigures,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3$1,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3$1,undo --> this$1,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3$1,undo --> val$importedFigures,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3$1,redo --> this$1,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3$1,redo --> val$importedFigures,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3$1,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3$1,undo --> val$drawing,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3$1,redo --> val$drawing,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3,READ);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3$1,getPresentationName --> getBundle,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3$1,getPresentationName --> getString,org.jhotdraw.util.ResourceBundleUtil,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3$1,undo --> removeAll,org.jhotdraw.draw.Drawing,);
Call(METHOD,org.jhotdraw.draw.DefaultDrawingViewTransferHandler$3$1,redo --> addAll,org.jhotdraw.draw.Drawing,);
EndClass 492
StartClass 493
Class(net.n3.nanoxml.XMLAttribute,N,N,NA);
Attribute(fullName,java.lang.String,Private,N,N,);
Attribute(name,java.lang.String,Private,N,N,);
Attribute(namespace,java.lang.String,Private,N,N,);
Attribute(value,java.lang.String,Private,N,N,);
Attribute(type,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getFullName,java.lang.String,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(getNamespace,java.lang.String,Public,N,N);
Method(getValue,java.lang.String,Public,N,N);
Method(setValue,void,Public,N,N);
Method(getType,java.lang.String,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.String,);
Parameter(setValue,java.lang.String,);
Call(ATTRIBUTE,net.n3.nanoxml.XMLAttribute,<init> --> fullName,net.n3.nanoxml.XMLAttribute,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLAttribute,<init> --> name,net.n3.nanoxml.XMLAttribute,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLAttribute,<init> --> namespace,net.n3.nanoxml.XMLAttribute,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLAttribute,<init> --> value,net.n3.nanoxml.XMLAttribute,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLAttribute,<init> --> type,net.n3.nanoxml.XMLAttribute,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLAttribute,getFullName --> fullName,net.n3.nanoxml.XMLAttribute,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLAttribute,getName --> name,net.n3.nanoxml.XMLAttribute,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLAttribute,getNamespace --> namespace,net.n3.nanoxml.XMLAttribute,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLAttribute,getValue --> value,net.n3.nanoxml.XMLAttribute,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLAttribute,setValue --> value,net.n3.nanoxml.XMLAttribute,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLAttribute,getType --> type,net.n3.nanoxml.XMLAttribute,READ);
EndClass 493
StartClass 494
Class(net.n3.nanoxml.StdXMLReader$StackedReader,N,N,NA);
Attribute(pbReader,java.io.PushbackReader,Public,N,N,);
Attribute(lineReader,java.io.LineNumberReader,Public,N,N,);
Attribute(systemId,java.net.URL,Public,N,N,);
Attribute(publicId,java.lang.String,Public,N,N,);
Attribute(this$0,net.n3.nanoxml.StdXMLReader,Public,N,Y,);
Method(<init>,void,Private,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>,net.n3.nanoxml.StdXMLReader,);
Parameter(<init>$2,net.n3.nanoxml.StdXMLReader,);
Parameter(<init>$2,net.n3.nanoxml.StdXMLReader$1,);
Composition(net.n3.nanoxml.StdXMLReader);
Call(METHOD,net.n3.nanoxml.StdXMLReader$StackedReader,<init>$2 --> <init>,net.n3.nanoxml.StdXMLReader$StackedReader,);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLReader$StackedReader,<init> --> this$0,net.n3.nanoxml.StdXMLReader$StackedReader,WRITE);
EndClass 494
StartClass 495
Class(net.n3.nanoxml.StdXMLReader$1,N,N,NA);
EndClass 495
StartClass 496
Class(net.n3.nanoxml.IXMLBuilder,Y,Y,Public);
Method(startBuilding,void,Public,N,Y);
Method(newProcessingInstruction,void,Public,N,Y);
Method(startElement,void,Public,N,Y);
Method(addAttribute,void,Public,N,Y);
Method(elementAttributesProcessed,void,Public,N,Y);
Method(endElement,void,Public,N,Y);
Method(addPCData,void,Public,N,Y);
Method(getResult,java.lang.Object,Public,N,Y);
Parameter(startBuilding,java.lang.String,);
Parameter(startBuilding,int,);
Parameter(newProcessingInstruction,java.lang.String,);
Parameter(newProcessingInstruction,java.io.Reader,);
Parameter(startElement,java.lang.String,);
Parameter(startElement,java.lang.String,);
Parameter(startElement,java.lang.String,);
Parameter(startElement,java.lang.String,);
Parameter(startElement,int,);
Parameter(addAttribute,java.lang.String,);
Parameter(addAttribute,java.lang.String,);
Parameter(addAttribute,java.lang.String,);
Parameter(addAttribute,java.lang.String,);
Parameter(addAttribute,java.lang.String,);
Parameter(elementAttributesProcessed,java.lang.String,);
Parameter(elementAttributesProcessed,java.lang.String,);
Parameter(elementAttributesProcessed,java.lang.String,);
Parameter(endElement,java.lang.String,);
Parameter(endElement,java.lang.String,);
Parameter(endElement,java.lang.String,);
Parameter(addPCData,java.io.Reader,);
Parameter(addPCData,java.lang.String,);
Parameter(addPCData,int,);
EndClass 496
StartClass 497
Class(net.n3.nanoxml.StdXMLBuilder,N,N,Public);
Attribute(stack,java.util.Stack,Private,N,N,);
Attribute(root,net.n3.nanoxml.IXMLElement,Private,N,N,);
Attribute(prototype,net.n3.nanoxml.IXMLElement,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(finalize,void,Protected,N,N);
Method(startBuilding,void,Public,N,N);
Method(newProcessingInstruction,void,Public,N,N);
Method(startElement,void,Public,N,N);
Method(elementAttributesProcessed,void,Public,N,N);
Method(endElement,void,Public,N,N);
Method(addAttribute,void,Public,N,N);
Method(addPCData,void,Public,N,N);
Method(getResult,java.lang.Object,Public,N,N);
Parameter(<init>$2,net.n3.nanoxml.IXMLElement,);
Parameter(startBuilding,java.lang.String,);
Parameter(startBuilding,int,);
Parameter(newProcessingInstruction,java.lang.String,);
Parameter(newProcessingInstruction,java.io.Reader,);
Parameter(startElement,java.lang.String,);
Parameter(startElement,java.lang.String,);
Parameter(startElement,java.lang.String,);
Parameter(startElement,java.lang.String,);
Parameter(startElement,int,);
Parameter(elementAttributesProcessed,java.lang.String,);
Parameter(elementAttributesProcessed,java.lang.String,);
Parameter(elementAttributesProcessed,java.lang.String,);
Parameter(endElement,java.lang.String,);
Parameter(endElement,java.lang.String,);
Parameter(endElement,java.lang.String,);
Parameter(addAttribute,java.lang.String,);
Parameter(addAttribute,java.lang.String,);
Parameter(addAttribute,java.lang.String,);
Parameter(addAttribute,java.lang.String,);
Parameter(addAttribute,java.lang.String,);
Parameter(addPCData,java.io.Reader,);
Parameter(addPCData,java.lang.String,);
Parameter(addPCData,int,);
Realization(net.n3.nanoxml.IXMLBuilder);
Composition(net.n3.nanoxml.IXMLElement);
Call(METHOD,net.n3.nanoxml.StdXMLBuilder,<init> --> <init>$2,net.n3.nanoxml.StdXMLBuilder,);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLBuilder,<init>$2 --> stack,net.n3.nanoxml.StdXMLBuilder,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLBuilder,<init>$2 --> root,net.n3.nanoxml.StdXMLBuilder,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLBuilder,<init>$2 --> prototype,net.n3.nanoxml.StdXMLBuilder,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLBuilder,finalize --> stack,net.n3.nanoxml.StdXMLBuilder,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLBuilder,finalize --> prototype,net.n3.nanoxml.StdXMLBuilder,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLBuilder,finalize --> root,net.n3.nanoxml.StdXMLBuilder,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLBuilder,finalize --> stack,net.n3.nanoxml.StdXMLBuilder,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLBuilder,startBuilding --> stack,net.n3.nanoxml.StdXMLBuilder,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLBuilder,startBuilding --> root,net.n3.nanoxml.StdXMLBuilder,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLBuilder,startElement --> prototype,net.n3.nanoxml.StdXMLBuilder,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLBuilder,startElement --> stack,net.n3.nanoxml.StdXMLBuilder,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLBuilder,startElement --> root,net.n3.nanoxml.StdXMLBuilder,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLBuilder,endElement --> stack,net.n3.nanoxml.StdXMLBuilder,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLBuilder,addAttribute --> stack,net.n3.nanoxml.StdXMLBuilder,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLBuilder,addPCData --> prototype,net.n3.nanoxml.StdXMLBuilder,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLBuilder,addPCData --> stack,net.n3.nanoxml.StdXMLBuilder,READ);
Call(ATTRIBUTE,net.n3.nanoxml.StdXMLBuilder,getResult --> root,net.n3.nanoxml.StdXMLBuilder,READ);
Call(METHOD,net.n3.nanoxml.StdXMLBuilder,<init> --> <init>,net.n3.nanoxml.XMLElement,);
Call(METHOD,net.n3.nanoxml.StdXMLBuilder,startElement --> createElement$4,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.StdXMLBuilder,startElement --> addChild,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.StdXMLBuilder,endElement --> getChildrenCount,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.StdXMLBuilder,endElement --> getChildAtIndex,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.StdXMLBuilder,endElement --> getName,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.StdXMLBuilder,endElement --> getContent,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.StdXMLBuilder,endElement --> setContent,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.StdXMLBuilder,endElement --> removeChildAtIndex,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.StdXMLBuilder,addAttribute --> hasAttribute,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.StdXMLBuilder,addAttribute --> getSystemID,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.StdXMLBuilder,addAttribute --> getLineNr,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.StdXMLBuilder,addAttribute --> <init>$2,net.n3.nanoxml.XMLParseException,);
Call(METHOD,net.n3.nanoxml.StdXMLBuilder,addAttribute --> setAttribute$2,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.StdXMLBuilder,addAttribute --> setAttribute,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.StdXMLBuilder,addPCData --> createElement$2,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.StdXMLBuilder,addPCData --> setContent,net.n3.nanoxml.IXMLElement,);
Call(METHOD,net.n3.nanoxml.StdXMLBuilder,addPCData --> addChild,net.n3.nanoxml.IXMLElement,);
EndClass 497
StartClass 498
Class(net.n3.nanoxml.IXMLValidator,Y,Y,Public);
Method(setParameterEntityResolver,void,Public,N,Y);
Method(getParameterEntityResolver,net.n3.nanoxml.IXMLEntityResolver,Public,N,Y);
Method(parseDTD,void,Public,N,Y);
Method(elementStarted,void,Public,N,Y);
Method(elementEnded,void,Public,N,Y);
Method(attributeAdded,void,Public,N,Y);
Method(elementAttributesProcessed,void,Public,N,Y);
Method(PCDataAdded,void,Public,N,Y);
Parameter(setParameterEntityResolver,net.n3.nanoxml.IXMLEntityResolver,);
Parameter(parseDTD,java.lang.String,);
Parameter(parseDTD,net.n3.nanoxml.IXMLReader,);
Parameter(parseDTD,net.n3.nanoxml.IXMLEntityResolver,);
Parameter(parseDTD,boolean,);
Parameter(elementStarted,java.lang.String,);
Parameter(elementStarted,java.lang.String,);
Parameter(elementStarted,int,);
Parameter(elementEnded,java.lang.String,);
Parameter(elementEnded,java.lang.String,);
Parameter(elementEnded,int,);
Parameter(attributeAdded,java.lang.String,);
Parameter(attributeAdded,java.lang.String,);
Parameter(attributeAdded,java.lang.String,);
Parameter(attributeAdded,int,);
Parameter(elementAttributesProcessed,java.lang.String,);
Parameter(elementAttributesProcessed,java.util.Properties,);
Parameter(elementAttributesProcessed,java.lang.String,);
Parameter(elementAttributesProcessed,int,);
Parameter(PCDataAdded,java.lang.String,);
Parameter(PCDataAdded,int,);
EndClass 498
StartClass 499
Class(net.n3.nanoxml.NonValidator,N,N,Public);
Attribute(parameterEntityResolver,net.n3.nanoxml.IXMLEntityResolver,Protected,N,N,);
Attribute(attributeDefaultValues,java.util.Hashtable,Protected,N,N,);
Attribute(currentElements,java.util.Stack,Protected,N,N,);
Method(<init>,void,Public,N,N);
Method(finalize,void,Protected,N,N);
Method(setParameterEntityResolver,void,Public,N,N);
Method(getParameterEntityResolver,net.n3.nanoxml.IXMLEntityResolver,Public,N,N);
Method(parseDTD,void,Public,N,N);
Method(processElement,void,Protected,N,N);
Method(processConditionalSection,void,Protected,N,N);
Method(processIgnoreSection,void,Protected,N,N);
Method(processAttList,void,Protected,N,N);
Method(processEntity,void,Protected,N,N);
Method(elementStarted,void,Public,N,N);
Method(elementEnded,void,Public,N,N);
Method(elementAttributesProcessed,void,Public,N,N);
Method(attributeAdded,void,Public,N,N);
Method(PCDataAdded,void,Public,N,N);
Parameter(setParameterEntityResolver,net.n3.nanoxml.IXMLEntityResolver,);
Parameter(parseDTD,java.lang.String,);
Parameter(parseDTD,net.n3.nanoxml.IXMLReader,);
Parameter(parseDTD,net.n3.nanoxml.IXMLEntityResolver,);
Parameter(parseDTD,boolean,);
Parameter(processElement,net.n3.nanoxml.IXMLReader,);
Parameter(processElement,net.n3.nanoxml.IXMLEntityResolver,);
Parameter(processConditionalSection,net.n3.nanoxml.IXMLReader,);
Parameter(processConditionalSection,net.n3.nanoxml.IXMLEntityResolver,);
Parameter(processIgnoreSection,net.n3.nanoxml.IXMLReader,);
Parameter(processIgnoreSection,net.n3.nanoxml.IXMLEntityResolver,);
Parameter(processAttList,net.n3.nanoxml.IXMLReader,);
Parameter(processAttList,net.n3.nanoxml.IXMLEntityResolver,);
Parameter(processEntity,net.n3.nanoxml.IXMLReader,);
Parameter(processEntity,net.n3.nanoxml.IXMLEntityResolver,);
Parameter(elementStarted,java.lang.String,);
Parameter(elementStarted,java.lang.String,);
Parameter(elementStarted,int,);
Parameter(elementEnded,java.lang.String,);
Parameter(elementEnded,java.lang.String,);
Parameter(elementEnded,int,);
Parameter(elementAttributesProcessed,java.lang.String,);
Parameter(elementAttributesProcessed,java.util.Properties,);
Parameter(elementAttributesProcessed,java.lang.String,);
Parameter(elementAttributesProcessed,int,);
Parameter(attributeAdded,java.lang.String,);
Parameter(attributeAdded,java.lang.String,);
Parameter(attributeAdded,java.lang.String,);
Parameter(attributeAdded,int,);
Parameter(PCDataAdded,java.lang.String,);
Parameter(PCDataAdded,int,);
Realization(net.n3.nanoxml.IXMLValidator);
Composition(net.n3.nanoxml.IXMLEntityResolver);
Call(METHOD,net.n3.nanoxml.NonValidator,parseDTD --> processElement,net.n3.nanoxml.NonValidator,);
Call(METHOD,net.n3.nanoxml.NonValidator,processElement --> processConditionalSection,net.n3.nanoxml.NonValidator,);
Call(METHOD,net.n3.nanoxml.NonValidator,processElement --> processEntity,net.n3.nanoxml.NonValidator,);
Call(METHOD,net.n3.nanoxml.NonValidator,processElement --> processAttList,net.n3.nanoxml.NonValidator,);
Call(METHOD,net.n3.nanoxml.NonValidator,processConditionalSection --> processIgnoreSection,net.n3.nanoxml.NonValidator,);
Call(ATTRIBUTE,net.n3.nanoxml.NonValidator,<init> --> attributeDefaultValues,net.n3.nanoxml.NonValidator,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.NonValidator,<init> --> currentElements,net.n3.nanoxml.NonValidator,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.NonValidator,<init> --> parameterEntityResolver,net.n3.nanoxml.NonValidator,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.NonValidator,finalize --> attributeDefaultValues,net.n3.nanoxml.NonValidator,READ);
Call(ATTRIBUTE,net.n3.nanoxml.NonValidator,finalize --> currentElements,net.n3.nanoxml.NonValidator,READ);
Call(ATTRIBUTE,net.n3.nanoxml.NonValidator,finalize --> parameterEntityResolver,net.n3.nanoxml.NonValidator,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.NonValidator,finalize --> attributeDefaultValues,net.n3.nanoxml.NonValidator,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.NonValidator,finalize --> currentElements,net.n3.nanoxml.NonValidator,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.NonValidator,setParameterEntityResolver --> parameterEntityResolver,net.n3.nanoxml.NonValidator,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.NonValidator,getParameterEntityResolver --> parameterEntityResolver,net.n3.nanoxml.NonValidator,READ);
Call(ATTRIBUTE,net.n3.nanoxml.NonValidator,parseDTD --> parameterEntityResolver,net.n3.nanoxml.NonValidator,READ);
Call(ATTRIBUTE,net.n3.nanoxml.NonValidator,processAttList --> parameterEntityResolver,net.n3.nanoxml.NonValidator,READ);
Call(ATTRIBUTE,net.n3.nanoxml.NonValidator,processAttList --> attributeDefaultValues,net.n3.nanoxml.NonValidator,READ);
Call(ATTRIBUTE,net.n3.nanoxml.NonValidator,processEntity --> parameterEntityResolver,net.n3.nanoxml.NonValidator,READ);
Call(ATTRIBUTE,net.n3.nanoxml.NonValidator,elementStarted --> attributeDefaultValues,net.n3.nanoxml.NonValidator,READ);
Call(ATTRIBUTE,net.n3.nanoxml.NonValidator,elementStarted --> currentElements,net.n3.nanoxml.NonValidator,READ);
Call(ATTRIBUTE,net.n3.nanoxml.NonValidator,elementAttributesProcessed --> currentElements,net.n3.nanoxml.NonValidator,READ);
Call(ATTRIBUTE,net.n3.nanoxml.NonValidator,attributeAdded --> currentElements,net.n3.nanoxml.NonValidator,READ);
Call(METHOD,net.n3.nanoxml.NonValidator,<init> --> <init>,net.n3.nanoxml.XMLEntityResolver,);
Call(METHOD,net.n3.nanoxml.NonValidator,parseDTD --> skipWhitespace,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,parseDTD --> getStreamLevel,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.NonValidator,parseDTD --> read,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,parseDTD --> processEntity,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,parseDTD --> getSystemID,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.NonValidator,parseDTD --> getLineNr,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.NonValidator,parseDTD --> errorInvalidInput,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,parseDTD --> read,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.NonValidator,parseDTD --> unread,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.NonValidator,processElement --> read,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,processElement --> skipTag,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,processElement --> skipComment,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,processConditionalSection --> skipWhitespace,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,processConditionalSection --> read,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,processConditionalSection --> skipTag,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,processConditionalSection --> checkLiteral,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,processConditionalSection --> <init>,net.n3.nanoxml.CDATAReader,);
Call(METHOD,net.n3.nanoxml.NonValidator,processConditionalSection --> startNewStream,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.NonValidator,processIgnoreSection --> checkLiteral,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,processIgnoreSection --> skipTag,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,processIgnoreSection --> skipWhitespace,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,processIgnoreSection --> read,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,processIgnoreSection --> <init>,net.n3.nanoxml.CDATAReader,);
Call(METHOD,net.n3.nanoxml.NonValidator,processAttList --> checkLiteral,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,processAttList --> skipTag,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,processAttList --> skipWhitespace,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,processAttList --> read,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,processAttList --> processEntity,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,processAttList --> unread,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.NonValidator,processAttList --> scanIdentifier,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,processAttList --> scanString,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,processEntity --> checkLiteral,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,processEntity --> skipTag,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,processEntity --> skipWhitespace,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,processEntity --> readChar,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,processEntity --> unread,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.NonValidator,processEntity --> scanIdentifier,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,processEntity --> scanString,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.NonValidator,processEntity --> addInternalEntity,net.n3.nanoxml.IXMLEntityResolver,);
Call(METHOD,net.n3.nanoxml.NonValidator,processEntity --> addExternalEntity,net.n3.nanoxml.IXMLEntityResolver,);
EndClass 499
StartClass 500
Class(net.n3.nanoxml.XMLException,N,N,Public);
Attribute(msg,java.lang.String,Private,N,N,);
Attribute(systemID,java.lang.String,Private,N,N,);
Attribute(lineNr,int,Private,N,N,);
Attribute(encapsulatedException,java.lang.Exception,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(<init>$5,void,Public,N,N);
Method(buildMessage,java.lang.String,Private,Y,N);
Method(finalize,void,Protected,N,N);
Method(getSystemID,java.lang.String,Public,N,N);
Method(getLineNr,int,Public,N,N);
Method(getException,java.lang.Exception,Public,N,N);
Method(printStackTrace,void,Public,N,N);
Method(printStackTrace$2,void,Public,N,N);
Method(printStackTrace$3,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>$2,java.lang.Exception,);
Parameter(<init>$3,java.lang.String,);
Parameter(<init>$3,int,);
Parameter(<init>$3,java.lang.Exception,);
Parameter(<init>$4,java.lang.String,);
Parameter(<init>$4,int,);
Parameter(<init>$4,java.lang.String,);
Parameter(<init>$5,java.lang.String,);
Parameter(<init>$5,int,);
Parameter(<init>$5,java.lang.Exception,);
Parameter(<init>$5,java.lang.String,);
Parameter(<init>$5,boolean,);
Parameter(buildMessage,java.lang.String,);
Parameter(buildMessage,int,);
Parameter(buildMessage,java.lang.Exception,);
Parameter(buildMessage,java.lang.String,);
Parameter(buildMessage,boolean,);
Parameter(printStackTrace,java.io.PrintWriter,);
Parameter(printStackTrace$2,java.io.PrintStream,);
SubClass(net.n3.nanoxml.XMLParseException);
SubClass(net.n3.nanoxml.XMLValidationException);
Call(METHOD,net.n3.nanoxml.XMLException,<init> --> <init>$5,net.n3.nanoxml.XMLException,);
Call(METHOD,net.n3.nanoxml.XMLException,<init>$2 --> <init>$5,net.n3.nanoxml.XMLException,);
Call(METHOD,net.n3.nanoxml.XMLException,<init>$3 --> <init>$5,net.n3.nanoxml.XMLException,);
Call(METHOD,net.n3.nanoxml.XMLException,<init>$4 --> <init>$5,net.n3.nanoxml.XMLException,);
Call(METHOD,net.n3.nanoxml.XMLException,<init>$5 --> buildMessage,net.n3.nanoxml.XMLException,);
Call(ATTRIBUTE,net.n3.nanoxml.XMLException,<init>$5 --> systemID,net.n3.nanoxml.XMLException,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLException,<init>$5 --> lineNr,net.n3.nanoxml.XMLException,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLException,<init>$5 --> encapsulatedException,net.n3.nanoxml.XMLException,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLException,<init>$5 --> msg,net.n3.nanoxml.XMLException,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLException,finalize --> systemID,net.n3.nanoxml.XMLException,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLException,finalize --> encapsulatedException,net.n3.nanoxml.XMLException,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLException,getSystemID --> systemID,net.n3.nanoxml.XMLException,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLException,getLineNr --> lineNr,net.n3.nanoxml.XMLException,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLException,getException --> encapsulatedException,net.n3.nanoxml.XMLException,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLException,printStackTrace --> encapsulatedException,net.n3.nanoxml.XMLException,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLException,printStackTrace$2 --> encapsulatedException,net.n3.nanoxml.XMLException,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLException,printStackTrace$3 --> encapsulatedException,net.n3.nanoxml.XMLException,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLException,toString --> msg,net.n3.nanoxml.XMLException,READ);
EndClass 500
StartClass 501
Class(net.n3.nanoxml.IXMLEntityResolver,Y,Y,Public);
Method(addInternalEntity,void,Public,N,Y);
Method(addExternalEntity,void,Public,N,Y);
Method(getEntity,java.io.Reader,Public,N,Y);
Method(isExternalEntity,boolean,Public,N,Y);
Parameter(addInternalEntity,java.lang.String,);
Parameter(addInternalEntity,java.lang.String,);
Parameter(addExternalEntity,java.lang.String,);
Parameter(addExternalEntity,java.lang.String,);
Parameter(addExternalEntity,java.lang.String,);
Parameter(getEntity,net.n3.nanoxml.IXMLReader,);
Parameter(getEntity,java.lang.String,);
Parameter(isExternalEntity,java.lang.String,);
EndClass 501
StartClass 502
Class(org.jhotdraw.draw.event.HandleMulticaster,N,N,Public);
Attribute(handles,java.util.LinkedList,Public,N,N,org.jhotdraw.draw.handle.Handle);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(draw,void,Public,N,N);
Method(keyPressed,void,Public,N,N);
Method(keyReleased,void,Public,N,N);
Method(keyTyped,void,Public,N,N);
Method(trackEnd,void,Public,N,N);
Method(trackStart,void,Public,N,N);
Method(trackDoubleClick,void,Public,N,N);
Method(trackStep,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.handle.Handle,);
Parameter(<init>$2,java.util.Collection,org.jhotdraw.draw.handle.Handle);
Parameter(draw,java.awt.Graphics2D,);
Parameter(keyPressed,java.awt.event.KeyEvent,);
Parameter(keyReleased,java.awt.event.KeyEvent,);
Parameter(keyTyped,java.awt.event.KeyEvent,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,java.awt.Point,);
Parameter(trackEnd,int,);
Parameter(trackEnd,org.jhotdraw.draw.DrawingView,);
Parameter(trackStart,java.awt.Point,);
Parameter(trackStart,int,);
Parameter(trackStart,org.jhotdraw.draw.DrawingView,);
Parameter(trackDoubleClick,java.awt.Point,);
Parameter(trackDoubleClick,int,);
Parameter(trackDoubleClick,org.jhotdraw.draw.DrawingView,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,java.awt.Point,);
Parameter(trackStep,int,);
Parameter(trackStep,org.jhotdraw.draw.DrawingView,);
Call(ATTRIBUTE,org.jhotdraw.draw.event.HandleMulticaster,<init> --> handles,org.jhotdraw.draw.event.HandleMulticaster,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.HandleMulticaster,<init> --> handles,org.jhotdraw.draw.event.HandleMulticaster,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.HandleMulticaster,<init>$2 --> handles,org.jhotdraw.draw.event.HandleMulticaster,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.event.HandleMulticaster,draw --> handles,org.jhotdraw.draw.event.HandleMulticaster,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.HandleMulticaster,keyPressed --> handles,org.jhotdraw.draw.event.HandleMulticaster,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.HandleMulticaster,keyReleased --> handles,org.jhotdraw.draw.event.HandleMulticaster,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.HandleMulticaster,keyTyped --> handles,org.jhotdraw.draw.event.HandleMulticaster,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.HandleMulticaster,trackEnd --> handles,org.jhotdraw.draw.event.HandleMulticaster,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.HandleMulticaster,trackStart --> handles,org.jhotdraw.draw.event.HandleMulticaster,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.HandleMulticaster,trackDoubleClick --> handles,org.jhotdraw.draw.event.HandleMulticaster,READ);
Call(ATTRIBUTE,org.jhotdraw.draw.event.HandleMulticaster,trackStep --> handles,org.jhotdraw.draw.event.HandleMulticaster,READ);
Call(METHOD,org.jhotdraw.draw.event.HandleMulticaster,draw --> draw,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.event.HandleMulticaster,trackEnd --> <init>,org.jhotdraw.util.ReversedList,);
Call(METHOD,org.jhotdraw.draw.event.HandleMulticaster,trackEnd --> trackEnd,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.event.HandleMulticaster,trackStart --> trackStart,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.event.HandleMulticaster,trackDoubleClick --> trackDoubleClick,org.jhotdraw.draw.handle.Handle,);
Call(METHOD,org.jhotdraw.draw.event.HandleMulticaster,trackStep --> trackStep,org.jhotdraw.draw.handle.Handle,);
EndClass 502
StartClass 503
Class(org.jhotdraw.gui.plaf.palette.PaletteLabelUI,N,N,Public);
Attribute(labelUI,org.jhotdraw.gui.plaf.palette.PaletteLabelUI,Protected,Y,Y,);
Attribute(iconR,java.awt.Rectangle,Private,Y,N,);
Attribute(textR,java.awt.Rectangle,Private,Y,N,);
Attribute(viewR,java.awt.Rectangle,Private,Y,N,);
Attribute(viewInsets,java.awt.Insets,Private,Y,N,);
Method(<init>,void,Public,N,N);
Method(createUI,javax.swing.plaf.ComponentUI,Public,Y,N);
Method(installDefaults,void,Protected,N,N);
Method(paint,void,Public,N,N);
Method(paintDisabledText,void,Protected,N,N);
Method(paintEnabledText,void,Protected,N,N);
Method(layoutCL,java.lang.String,Protected,N,N);
Method(propertyChange,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(createUI,javax.swing.JComponent,);
Parameter(installDefaults,javax.swing.JLabel,);
Parameter(paint,java.awt.Graphics,);
Parameter(paint,javax.swing.JComponent,);
Parameter(paintDisabledText,javax.swing.JLabel,);
Parameter(paintDisabledText,java.awt.Graphics,);
Parameter(paintDisabledText,java.lang.String,);
Parameter(paintDisabledText,int,);
Parameter(paintDisabledText,int,);
Parameter(paintEnabledText,javax.swing.JLabel,);
Parameter(paintEnabledText,java.awt.Graphics,);
Parameter(paintEnabledText,java.lang.String,);
Parameter(paintEnabledText,int,);
Parameter(paintEnabledText,int,);
Parameter(layoutCL,javax.swing.JLabel,);
Parameter(layoutCL,java.awt.FontMetrics,);
Parameter(layoutCL,java.lang.String,);
Parameter(layoutCL,javax.swing.Icon,);
Parameter(layoutCL,java.awt.Rectangle,);
Parameter(layoutCL,java.awt.Rectangle,);
Parameter(layoutCL,java.awt.Rectangle,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Composition(org.jhotdraw.gui.plaf.palette.PaletteLabelUI);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLabelUI,<clinit> --> <init>,org.jhotdraw.gui.plaf.palette.PaletteLabelUI,);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteLabelUI,createUI --> labelUI,org.jhotdraw.gui.plaf.palette.PaletteLabelUI,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteLabelUI,<clinit> --> labelUI,org.jhotdraw.gui.plaf.palette.PaletteLabelUI,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteLabelUI,<clinit> --> iconR,org.jhotdraw.gui.plaf.palette.PaletteLabelUI,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteLabelUI,<clinit> --> textR,org.jhotdraw.gui.plaf.palette.PaletteLabelUI,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteLabelUI,<clinit> --> viewR,org.jhotdraw.gui.plaf.palette.PaletteLabelUI,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteLabelUI,<clinit> --> viewInsets,org.jhotdraw.gui.plaf.palette.PaletteLabelUI,WRITE);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLabelUI,installDefaults --> installBorder,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLabelUI,installDefaults --> installColorsAndFont,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLabelUI,paint --> beginGraphics,org.jhotdraw.gui.plaf.palette.PaletteUtilities,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLabelUI,paint --> endGraphics,org.jhotdraw.gui.plaf.palette.PaletteUtilities,);
EndClass 503
StartClass 504
Class(org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,N,N,Public);
Attribute(instance,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,Private,Y,N,);
Attribute(cachedDefaults,javax.swing.UIDefaults,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getInstance,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,Public,Y,N);
Method(getName,java.lang.String,Public,N,N);
Method(getID,java.lang.String,Public,N,N);
Method(getDescription,java.lang.String,Public,N,N);
Method(isNativeLookAndFeel,boolean,Public,N,N);
Method(isSupportedLookAndFeel,boolean,Public,N,N);
Method(getCachedDefaults,javax.swing.UIDefaults,Public,N,N);
Method(get,java.lang.Object,Public,N,N);
Method(getBoolean,boolean,Public,N,N);
Method(getBorder,javax.swing.border.Border,Public,N,N);
Method(getColor,java.awt.Color,Public,N,N);
Method(getFont,java.awt.Font,Public,N,N);
Method(getIcon,javax.swing.Icon,Public,N,N);
Method(getInt,int,Public,N,N);
Method(getInsets,java.awt.Insets,Public,N,N);
Method(getString,java.lang.String,Public,N,N);
Method(installColorsAndFont,void,Public,Y,N);
Method(installBorder,void,Public,Y,N);
Method(installColors,void,Public,Y,N);
Method(initComponentDefaults,void,Protected,N,N);
Method(getUIOfType,java.lang.Object,Public,Y,N);
Parameter(get,java.lang.Object,);
Parameter(getBoolean,java.lang.String,);
Parameter(getBorder,java.lang.String,);
Parameter(getColor,java.lang.String,);
Parameter(getFont,java.lang.String,);
Parameter(getIcon,java.lang.String,);
Parameter(getInt,java.lang.String,);
Parameter(getInsets,java.lang.String,);
Parameter(getString,java.lang.String,);
Parameter(installColorsAndFont,javax.swing.JComponent,);
Parameter(installColorsAndFont,java.lang.String,);
Parameter(installColorsAndFont,java.lang.String,);
Parameter(installColorsAndFont,java.lang.String,);
Parameter(installBorder,javax.swing.JComponent,);
Parameter(installBorder,java.lang.String,);
Parameter(installColors,javax.swing.JComponent,);
Parameter(installColors,java.lang.String,);
Parameter(installColors,java.lang.String,);
Parameter(initComponentDefaults,javax.swing.UIDefaults,);
Parameter(getUIOfType,javax.swing.plaf.ComponentUI,);
Parameter(getUIOfType,java.lang.Class,);
Composition(org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,getInstance --> <init>,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,get --> getCachedDefaults,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,getBoolean --> get,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,getBorder --> get,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,getColor --> get,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,getFont --> get,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,getIcon --> get,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,getInt --> get,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,getInsets --> get,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,getString --> get,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,installColorsAndFont --> getInstance,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,installColorsAndFont --> getFont,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,installColorsAndFont --> installColors,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,installBorder --> getInstance,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,installBorder --> getBorder,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,installColors --> getInstance,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,installColors --> getColor,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,getInstance --> instance,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,getInstance --> instance,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,getCachedDefaults --> cachedDefaults,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,getCachedDefaults --> cachedDefaults,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,WRITE);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,initComponentDefaults --> <init>,org.jhotdraw.gui.plaf.palette.PaletteButtonBorder,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,initComponentDefaults --> <init>,org.jhotdraw.gui.plaf.palette.BackdropBorder$UIResource,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteLookAndFeel,initComponentDefaults --> <init>,org.jhotdraw.gui.plaf.palette.PaletteTextComponentBorder,);
EndClass 504
StartClass 505
Class(org.jhotdraw.draw.action.AbstractDrawingEditorAction$EventHandler,N,N,NA);
Attribute(this$0,org.jhotdraw.draw.action.AbstractDrawingEditorAction,Public,N,Y,);
Method(<init>,void,Private,N,N);
Method(propertyChange,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>,org.jhotdraw.draw.action.AbstractDrawingEditorAction,);
Parameter(propertyChange,java.beans.PropertyChangeEvent,);
Parameter(<init>$2,org.jhotdraw.draw.action.AbstractDrawingEditorAction,);
Parameter(<init>$2,org.jhotdraw.draw.action.AbstractDrawingEditorAction$1,);
Composition(org.jhotdraw.draw.action.AbstractDrawingEditorAction);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingEditorAction$EventHandler,<init>$2 --> <init>,org.jhotdraw.draw.action.AbstractDrawingEditorAction$EventHandler,);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingEditorAction$EventHandler,<init> --> this$0,org.jhotdraw.draw.action.AbstractDrawingEditorAction$EventHandler,WRITE);
Call(ATTRIBUTE,org.jhotdraw.draw.action.AbstractDrawingEditorAction$EventHandler,propertyChange --> this$0,org.jhotdraw.draw.action.AbstractDrawingEditorAction$EventHandler,READ);
Call(METHOD,org.jhotdraw.draw.action.AbstractDrawingEditorAction$EventHandler,propertyChange --> updateEnabledState,org.jhotdraw.draw.action.AbstractDrawingEditorAction,);
EndClass 505
StartClass 506
Class(org.jhotdraw.draw.action.AbstractDrawingEditorAction$1,N,N,NA);
EndClass 506
StartClass 507
Class(net.n3.nanoxml.XMLParseException,N,N,Public);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,int,);
Parameter(<init>$2,java.lang.String,);
SuperClass(net.n3.nanoxml.XMLException);
Generalization(net.n3.nanoxml.XMLException);
Call(METHOD,net.n3.nanoxml.XMLParseException,<init> --> <init>,net.n3.nanoxml.XMLException,);
Call(METHOD,net.n3.nanoxml.XMLParseException,<init>$2 --> <init>$5,net.n3.nanoxml.XMLException,);
EndClass 507
StartClass 508
Class(net.n3.nanoxml.XMLUtil,N,N,NA);
Method(<init>,void,Public,N,N);
Method(skipComment,void,Public,Y,N);
Method(skipTag,void,Public,Y,N);
Method(scanPublicID,java.lang.String,Public,Y,N);
Method(scanSystemID,java.lang.String,Public,Y,N);
Method(scanIdentifier,java.lang.String,Public,Y,N);
Method(scanString,java.lang.String,Public,Y,N);
Method(processEntity,void,Public,Y,N);
Method(processCharLiteral,char,Public,Y,N);
Method(skipWhitespace,void,Public,Y,N);
Method(read,java.lang.String,Public,Y,N);
Method(readChar,char,Public,Y,N);
Method(checkLiteral,boolean,Public,Y,N);
Method(errorExpectedInput,void,Public,Y,N);
Method(errorInvalidEntity,void,Public,Y,N);
Method(errorUnexpectedEntity,void,Public,Y,N);
Method(errorUnexpectedCDATA,void,Public,Y,N);
Method(errorInvalidInput,void,Public,Y,N);
Method(errorWrongClosingTag,void,Public,Y,N);
Method(errorClosingTagNotEmpty,void,Public,Y,N);
Method(errorMissingElement,void,Public,Y,N);
Method(errorUnexpectedElement,void,Public,Y,N);
Method(errorMissingAttribute,void,Public,Y,N);
Method(errorUnexpectedAttribute,void,Public,Y,N);
Method(errorInvalidAttributeValue,void,Public,Y,N);
Method(errorMissingPCData,void,Public,Y,N);
Method(errorUnexpectedPCData,void,Public,Y,N);
Method(validationError,void,Public,Y,N);
Parameter(skipComment,net.n3.nanoxml.IXMLReader,);
Parameter(skipTag,net.n3.nanoxml.IXMLReader,);
Parameter(scanPublicID,java.lang.StringBuffer,);
Parameter(scanPublicID,net.n3.nanoxml.IXMLReader,);
Parameter(scanSystemID,net.n3.nanoxml.IXMLReader,);
Parameter(scanIdentifier,net.n3.nanoxml.IXMLReader,);
Parameter(scanString,net.n3.nanoxml.IXMLReader,);
Parameter(scanString,char,);
Parameter(scanString,net.n3.nanoxml.IXMLEntityResolver,);
Parameter(processEntity,java.lang.String,);
Parameter(processEntity,net.n3.nanoxml.IXMLReader,);
Parameter(processEntity,net.n3.nanoxml.IXMLEntityResolver,);
Parameter(processCharLiteral,java.lang.String,);
Parameter(skipWhitespace,net.n3.nanoxml.IXMLReader,);
Parameter(skipWhitespace,java.lang.StringBuffer,);
Parameter(read,net.n3.nanoxml.IXMLReader,);
Parameter(read,char,);
Parameter(readChar,net.n3.nanoxml.IXMLReader,);
Parameter(readChar,char,);
Parameter(checkLiteral,net.n3.nanoxml.IXMLReader,);
Parameter(checkLiteral,java.lang.String,);
Parameter(errorExpectedInput,java.lang.String,);
Parameter(errorExpectedInput,int,);
Parameter(errorExpectedInput,java.lang.String,);
Parameter(errorInvalidEntity,java.lang.String,);
Parameter(errorInvalidEntity,int,);
Parameter(errorInvalidEntity,java.lang.String,);
Parameter(errorUnexpectedEntity,java.lang.String,);
Parameter(errorUnexpectedEntity,int,);
Parameter(errorUnexpectedEntity,java.lang.String,);
Parameter(errorUnexpectedCDATA,java.lang.String,);
Parameter(errorUnexpectedCDATA,int,);
Parameter(errorInvalidInput,java.lang.String,);
Parameter(errorInvalidInput,int,);
Parameter(errorInvalidInput,java.lang.String,);
Parameter(errorWrongClosingTag,java.lang.String,);
Parameter(errorWrongClosingTag,int,);
Parameter(errorWrongClosingTag,java.lang.String,);
Parameter(errorWrongClosingTag,java.lang.String,);
Parameter(errorClosingTagNotEmpty,java.lang.String,);
Parameter(errorClosingTagNotEmpty,int,);
Parameter(errorMissingElement,java.lang.String,);
Parameter(errorMissingElement,int,);
Parameter(errorMissingElement,java.lang.String,);
Parameter(errorMissingElement,java.lang.String,);
Parameter(errorUnexpectedElement,java.lang.String,);
Parameter(errorUnexpectedElement,int,);
Parameter(errorUnexpectedElement,java.lang.String,);
Parameter(errorUnexpectedElement,java.lang.String,);
Parameter(errorMissingAttribute,java.lang.String,);
Parameter(errorMissingAttribute,int,);
Parameter(errorMissingAttribute,java.lang.String,);
Parameter(errorMissingAttribute,java.lang.String,);
Parameter(errorUnexpectedAttribute,java.lang.String,);
Parameter(errorUnexpectedAttribute,int,);
Parameter(errorUnexpectedAttribute,java.lang.String,);
Parameter(errorUnexpectedAttribute,java.lang.String,);
Parameter(errorInvalidAttributeValue,java.lang.String,);
Parameter(errorInvalidAttributeValue,int,);
Parameter(errorInvalidAttributeValue,java.lang.String,);
Parameter(errorInvalidAttributeValue,java.lang.String,);
Parameter(errorInvalidAttributeValue,java.lang.String,);
Parameter(errorMissingPCData,java.lang.String,);
Parameter(errorMissingPCData,int,);
Parameter(errorMissingPCData,java.lang.String,);
Parameter(errorUnexpectedPCData,java.lang.String,);
Parameter(errorUnexpectedPCData,int,);
Parameter(errorUnexpectedPCData,java.lang.String,);
Parameter(validationError,java.lang.String,);
Parameter(validationError,int,);
Parameter(validationError,java.lang.String,);
Parameter(validationError,java.lang.String,);
Parameter(validationError,java.lang.String,);
Parameter(validationError,java.lang.String,);
Call(METHOD,net.n3.nanoxml.XMLUtil,skipComment --> errorExpectedInput,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.XMLUtil,scanPublicID --> checkLiteral,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.XMLUtil,scanPublicID --> skipWhitespace,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.XMLUtil,scanPublicID --> scanString,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.XMLUtil,scanSystemID --> checkLiteral,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.XMLUtil,scanSystemID --> skipWhitespace,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.XMLUtil,scanSystemID --> scanString,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.XMLUtil,scanString --> errorExpectedInput,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.XMLUtil,scanString --> read,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.XMLUtil,scanString --> processCharLiteral,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.XMLUtil,scanString --> processEntity,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.XMLUtil,processEntity --> errorInvalidEntity,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.XMLUtil,readChar --> read,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.XMLUtil,readChar --> errorUnexpectedEntity,net.n3.nanoxml.XMLUtil,);
Call(METHOD,net.n3.nanoxml.XMLUtil,skipComment --> read,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.XMLUtil,skipComment --> getSystemID,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.XMLUtil,skipComment --> getLineNr,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.XMLUtil,skipTag --> read,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.XMLUtil,scanIdentifier --> read,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.XMLUtil,scanIdentifier --> unread,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.XMLUtil,scanString --> getStreamLevel,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.XMLUtil,scanString --> read,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.XMLUtil,scanString --> getSystemID,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.XMLUtil,scanString --> getLineNr,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.XMLUtil,scanString --> unread,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.XMLUtil,processEntity --> getEntity,net.n3.nanoxml.IXMLEntityResolver,);
Call(METHOD,net.n3.nanoxml.XMLUtil,processEntity --> getSystemID,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.XMLUtil,processEntity --> getLineNr,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.XMLUtil,processEntity --> isExternalEntity,net.n3.nanoxml.IXMLEntityResolver,);
Call(METHOD,net.n3.nanoxml.XMLUtil,processEntity --> startNewStream$2,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.XMLUtil,skipWhitespace --> read,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.XMLUtil,skipWhitespace --> unread,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.XMLUtil,read --> read,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.XMLUtil,readChar --> getSystemID,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.XMLUtil,readChar --> getLineNr,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.XMLUtil,checkLiteral --> read,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.XMLUtil,errorExpectedInput --> <init>$2,net.n3.nanoxml.XMLParseException,);
Call(METHOD,net.n3.nanoxml.XMLUtil,errorInvalidEntity --> <init>$2,net.n3.nanoxml.XMLParseException,);
Call(METHOD,net.n3.nanoxml.XMLUtil,errorUnexpectedEntity --> <init>$2,net.n3.nanoxml.XMLParseException,);
Call(METHOD,net.n3.nanoxml.XMLUtil,errorUnexpectedCDATA --> <init>$2,net.n3.nanoxml.XMLParseException,);
Call(METHOD,net.n3.nanoxml.XMLUtil,errorInvalidInput --> <init>$2,net.n3.nanoxml.XMLParseException,);
Call(METHOD,net.n3.nanoxml.XMLUtil,errorWrongClosingTag --> <init>$2,net.n3.nanoxml.XMLParseException,);
Call(METHOD,net.n3.nanoxml.XMLUtil,errorClosingTagNotEmpty --> <init>$2,net.n3.nanoxml.XMLParseException,);
Call(METHOD,net.n3.nanoxml.XMLUtil,errorMissingElement --> <init>,net.n3.nanoxml.XMLValidationException,);
Call(METHOD,net.n3.nanoxml.XMLUtil,errorUnexpectedElement --> <init>,net.n3.nanoxml.XMLValidationException,);
Call(METHOD,net.n3.nanoxml.XMLUtil,errorMissingAttribute --> <init>,net.n3.nanoxml.XMLValidationException,);
Call(METHOD,net.n3.nanoxml.XMLUtil,errorUnexpectedAttribute --> <init>,net.n3.nanoxml.XMLValidationException,);
Call(METHOD,net.n3.nanoxml.XMLUtil,errorInvalidAttributeValue --> <init>,net.n3.nanoxml.XMLValidationException,);
Call(METHOD,net.n3.nanoxml.XMLUtil,errorMissingPCData --> <init>,net.n3.nanoxml.XMLValidationException,);
Call(METHOD,net.n3.nanoxml.XMLUtil,errorUnexpectedPCData --> <init>,net.n3.nanoxml.XMLValidationException,);
Call(METHOD,net.n3.nanoxml.XMLUtil,validationError --> <init>,net.n3.nanoxml.XMLValidationException,);
EndClass 508
StartClass 509
Class(net.n3.nanoxml.XMLEntityResolver,N,N,Public);
Attribute(entities,java.util.Hashtable,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(finalize,void,Protected,N,N);
Method(addInternalEntity,void,Public,N,N);
Method(addExternalEntity,void,Public,N,N);
Method(getEntity,java.io.Reader,Public,N,N);
Method(isExternalEntity,boolean,Public,N,N);
Method(openExternalEntity,java.io.Reader,Protected,N,N);
Parameter(addInternalEntity,java.lang.String,);
Parameter(addInternalEntity,java.lang.String,);
Parameter(addExternalEntity,java.lang.String,);
Parameter(addExternalEntity,java.lang.String,);
Parameter(addExternalEntity,java.lang.String,);
Parameter(getEntity,net.n3.nanoxml.IXMLReader,);
Parameter(getEntity,java.lang.String,);
Parameter(isExternalEntity,java.lang.String,);
Parameter(openExternalEntity,net.n3.nanoxml.IXMLReader,);
Parameter(openExternalEntity,java.lang.String,);
Parameter(openExternalEntity,java.lang.String,);
Realization(net.n3.nanoxml.IXMLEntityResolver);
Call(METHOD,net.n3.nanoxml.XMLEntityResolver,getEntity --> openExternalEntity,net.n3.nanoxml.XMLEntityResolver,);
Call(ATTRIBUTE,net.n3.nanoxml.XMLEntityResolver,<init> --> entities,net.n3.nanoxml.XMLEntityResolver,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLEntityResolver,<init> --> entities,net.n3.nanoxml.XMLEntityResolver,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLEntityResolver,finalize --> entities,net.n3.nanoxml.XMLEntityResolver,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLEntityResolver,finalize --> entities,net.n3.nanoxml.XMLEntityResolver,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLEntityResolver,addInternalEntity --> entities,net.n3.nanoxml.XMLEntityResolver,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLEntityResolver,addExternalEntity --> entities,net.n3.nanoxml.XMLEntityResolver,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLEntityResolver,getEntity --> entities,net.n3.nanoxml.XMLEntityResolver,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLEntityResolver,isExternalEntity --> entities,net.n3.nanoxml.XMLEntityResolver,READ);
Call(METHOD,net.n3.nanoxml.XMLEntityResolver,openExternalEntity --> getSystemID,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.XMLEntityResolver,openExternalEntity --> openStream,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.XMLEntityResolver,openExternalEntity --> getLineNr,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.XMLEntityResolver,openExternalEntity --> <init>$2,net.n3.nanoxml.XMLParseException,);
EndClass 509
StartClass 510
Class(net.n3.nanoxml.CDATAReader,N,N,NA);
Attribute(reader,net.n3.nanoxml.IXMLReader,Private,N,N,);
Attribute(savedChar,char,Private,N,N,);
Attribute(atEndOfData,boolean,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(finalize,void,Protected,N,N);
Method(read,int,Public,N,N);
Method(close,void,Public,N,N);
Parameter(<init>,net.n3.nanoxml.IXMLReader,);
Parameter(read,char[],);
Parameter(read,int,);
Parameter(read,int,);
Composition(net.n3.nanoxml.IXMLReader);
Call(ATTRIBUTE,net.n3.nanoxml.CDATAReader,<init> --> reader,net.n3.nanoxml.CDATAReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.CDATAReader,<init> --> savedChar,net.n3.nanoxml.CDATAReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.CDATAReader,<init> --> atEndOfData,net.n3.nanoxml.CDATAReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.CDATAReader,finalize --> reader,net.n3.nanoxml.CDATAReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.CDATAReader,read --> atEndOfData,net.n3.nanoxml.CDATAReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.CDATAReader,read --> savedChar,net.n3.nanoxml.CDATAReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.CDATAReader,read --> reader,net.n3.nanoxml.CDATAReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.CDATAReader,read --> savedChar,net.n3.nanoxml.CDATAReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.CDATAReader,read --> atEndOfData,net.n3.nanoxml.CDATAReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.CDATAReader,close --> atEndOfData,net.n3.nanoxml.CDATAReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.CDATAReader,close --> savedChar,net.n3.nanoxml.CDATAReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.CDATAReader,close --> reader,net.n3.nanoxml.CDATAReader,READ);
Call(ATTRIBUTE,net.n3.nanoxml.CDATAReader,close --> savedChar,net.n3.nanoxml.CDATAReader,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.CDATAReader,close --> atEndOfData,net.n3.nanoxml.CDATAReader,WRITE);
Call(METHOD,net.n3.nanoxml.CDATAReader,read --> read,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.CDATAReader,read --> unread,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.CDATAReader,close --> read,net.n3.nanoxml.IXMLReader,);
Call(METHOD,net.n3.nanoxml.CDATAReader,close --> unread,net.n3.nanoxml.IXMLReader,);
EndClass 510
StartClass 511
Class(org.jhotdraw.gui.plaf.palette.PaletteUtilities,N,N,Public);
Method(<init>,void,Public,N,N);
Method(beginGraphics,java.lang.Object,Public,Y,N);
Method(endGraphics,void,Public,Y,N);
Method(drawStringUnderlineCharAt,void,Public,Y,N);
Method(isLeftToRight,boolean,Public,Y,N);
Method(getFontMetrics,java.awt.FontMetrics,Public,Y,N);
Method(getFontMetrics$2,java.awt.FontMetrics,Public,Y,N);
Parameter(beginGraphics,java.awt.Graphics2D,);
Parameter(endGraphics,java.awt.Graphics2D,);
Parameter(endGraphics,java.lang.Object,);
Parameter(drawStringUnderlineCharAt,javax.swing.JComponent,);
Parameter(drawStringUnderlineCharAt,java.awt.Graphics,);
Parameter(drawStringUnderlineCharAt,java.lang.String,);
Parameter(drawStringUnderlineCharAt,int,);
Parameter(drawStringUnderlineCharAt,int,);
Parameter(drawStringUnderlineCharAt,int,);
Parameter(isLeftToRight,java.awt.Component,);
Parameter(getFontMetrics,javax.swing.JComponent,);
Parameter(getFontMetrics,java.awt.Graphics,);
Parameter(getFontMetrics$2,javax.swing.JComponent,);
Parameter(getFontMetrics$2,java.awt.Graphics,);
Parameter(getFontMetrics$2,java.awt.Font,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteUtilities,getFontMetrics --> getFontMetrics$2,org.jhotdraw.gui.plaf.palette.PaletteUtilities,);
EndClass 511
StartClass 512
Class(org.jhotdraw.gui.plaf.palette.BackdropBorder,N,N,Public);
Attribute(backgroundBorder,javax.swing.border.Border,Private,N,N,);
Attribute(foregroundBorder,javax.swing.border.Border,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getBackdropBorder,javax.swing.border.Border,Public,N,N);
Method(paintBorder,void,Public,N,N);
Method(getBorderInsets,java.awt.Insets,Public,N,N);
Method(isBorderOpaque,boolean,Public,N,N);
Parameter(<init>,javax.swing.border.Border,);
Parameter(<init>$2,javax.swing.border.Border,);
Parameter(<init>$2,javax.swing.border.Border,);
Parameter(paintBorder,java.awt.Component,);
Parameter(paintBorder,java.awt.Graphics,);
Parameter(paintBorder,int,);
Parameter(paintBorder,int,);
Parameter(paintBorder,int,);
Parameter(paintBorder,int,);
Parameter(getBorderInsets,java.awt.Component,);
SubClass(org.jhotdraw.gui.plaf.palette.BackdropBorder$UIResource);
Call(METHOD,org.jhotdraw.gui.plaf.palette.BackdropBorder,<init> --> <init>$2,org.jhotdraw.gui.plaf.palette.BackdropBorder,);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.BackdropBorder,<init>$2 --> foregroundBorder,org.jhotdraw.gui.plaf.palette.BackdropBorder,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.BackdropBorder,<init>$2 --> backgroundBorder,org.jhotdraw.gui.plaf.palette.BackdropBorder,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.BackdropBorder,getBackdropBorder --> backgroundBorder,org.jhotdraw.gui.plaf.palette.BackdropBorder,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.BackdropBorder,paintBorder --> foregroundBorder,org.jhotdraw.gui.plaf.palette.BackdropBorder,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.BackdropBorder,getBorderInsets --> foregroundBorder,org.jhotdraw.gui.plaf.palette.BackdropBorder,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.BackdropBorder,getBorderInsets --> backgroundBorder,org.jhotdraw.gui.plaf.palette.BackdropBorder,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.BackdropBorder,isBorderOpaque --> backgroundBorder,org.jhotdraw.gui.plaf.palette.BackdropBorder,READ);
EndClass 512
StartClass 513
Class(org.jhotdraw.gui.plaf.palette.PaletteTextComponentBorder,N,N,Public);
Attribute(enabledStops,float[],Private,Y,Y,);
Attribute(enabledStopColors,java.awt.Color[],Private,Y,Y,);
Method(<init>,void,Public,N,N);
Method(paintBorder,void,Public,N,N);
Method(getSegmentPosition,java.lang.String,Private,N,N);
Method(getBorderInsets,java.awt.Insets,Public,N,N);
Method(isBorderOpaque,boolean,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(paintBorder,java.awt.Component,);
Parameter(paintBorder,java.awt.Graphics,);
Parameter(paintBorder,int,);
Parameter(paintBorder,int,);
Parameter(paintBorder,int,);
Parameter(paintBorder,int,);
Parameter(getSegmentPosition,java.awt.Component,);
Parameter(getBorderInsets,java.awt.Component,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteTextComponentBorder,paintBorder --> getSegmentPosition,org.jhotdraw.gui.plaf.palette.PaletteTextComponentBorder,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteTextComponentBorder,getBorderInsets --> getSegmentPosition,org.jhotdraw.gui.plaf.palette.PaletteTextComponentBorder,);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteTextComponentBorder,paintBorder --> enabledStops,org.jhotdraw.gui.plaf.palette.PaletteTextComponentBorder,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteTextComponentBorder,paintBorder --> enabledStopColors,org.jhotdraw.gui.plaf.palette.PaletteTextComponentBorder,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteTextComponentBorder,<clinit> --> enabledStops,org.jhotdraw.gui.plaf.palette.PaletteTextComponentBorder,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteTextComponentBorder,<clinit> --> enabledStopColors,org.jhotdraw.gui.plaf.palette.PaletteTextComponentBorder,WRITE);
EndClass 513
StartClass 514
Class(org.jhotdraw.gui.plaf.palette.BackdropBorder$UIResource,N,N,Public);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Parameter(<init>,javax.swing.border.Border,);
Parameter(<init>$2,javax.swing.border.Border,);
Parameter(<init>$2,javax.swing.border.Border,);
SuperClass(org.jhotdraw.gui.plaf.palette.BackdropBorder);
Generalization(org.jhotdraw.gui.plaf.palette.BackdropBorder);
Call(METHOD,org.jhotdraw.gui.plaf.palette.BackdropBorder$UIResource,<init> --> <init>$2,org.jhotdraw.gui.plaf.palette.BackdropBorder$UIResource,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.BackdropBorder$UIResource,<init>$2 --> <init>$2,org.jhotdraw.gui.plaf.palette.BackdropBorder,);
EndClass 514
StartClass 515
Class(org.jhotdraw.gui.plaf.palette.PaletteButtonBorder,N,N,Public);
Attribute(enabledStops,float[],Private,Y,Y,);
Attribute(enabledStopColors,java.awt.Color[],Private,Y,Y,);
Attribute(selectedStops,float[],Private,Y,Y,);
Attribute(selectedStopColors,java.awt.Color[],Private,Y,Y,);
Method(<init>,void,Public,N,N);
Method(paintBorder,void,Public,N,N);
Method(paintBorder$2,void,Public,N,N);
Method(getSegmentPosition,java.lang.String,Private,N,N);
Method(getBorderInsets,java.awt.Insets,Public,N,N);
Method(isBorderOpaque,boolean,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(paintBorder,java.awt.Component,);
Parameter(paintBorder,java.awt.Graphics,);
Parameter(paintBorder,int,);
Parameter(paintBorder,int,);
Parameter(paintBorder,int,);
Parameter(paintBorder,int,);
Parameter(paintBorder$2,javax.swing.AbstractButton,);
Parameter(paintBorder$2,java.awt.Graphics,);
Parameter(paintBorder$2,int,);
Parameter(paintBorder$2,int,);
Parameter(paintBorder$2,int,);
Parameter(paintBorder$2,int,);
Parameter(getSegmentPosition,java.awt.Component,);
Parameter(getBorderInsets,java.awt.Component,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteButtonBorder,paintBorder --> paintBorder$2,org.jhotdraw.gui.plaf.palette.PaletteButtonBorder,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteButtonBorder,paintBorder$2 --> getSegmentPosition,org.jhotdraw.gui.plaf.palette.PaletteButtonBorder,);
Call(METHOD,org.jhotdraw.gui.plaf.palette.PaletteButtonBorder,getBorderInsets --> getSegmentPosition,org.jhotdraw.gui.plaf.palette.PaletteButtonBorder,);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteButtonBorder,paintBorder$2 --> enabledStops,org.jhotdraw.gui.plaf.palette.PaletteButtonBorder,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteButtonBorder,paintBorder$2 --> enabledStopColors,org.jhotdraw.gui.plaf.palette.PaletteButtonBorder,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteButtonBorder,paintBorder$2 --> selectedStops,org.jhotdraw.gui.plaf.palette.PaletteButtonBorder,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteButtonBorder,paintBorder$2 --> selectedStopColors,org.jhotdraw.gui.plaf.palette.PaletteButtonBorder,READ);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteButtonBorder,<clinit> --> enabledStops,org.jhotdraw.gui.plaf.palette.PaletteButtonBorder,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteButtonBorder,<clinit> --> enabledStopColors,org.jhotdraw.gui.plaf.palette.PaletteButtonBorder,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteButtonBorder,<clinit> --> selectedStops,org.jhotdraw.gui.plaf.palette.PaletteButtonBorder,WRITE);
Call(ATTRIBUTE,org.jhotdraw.gui.plaf.palette.PaletteButtonBorder,<clinit> --> selectedStopColors,org.jhotdraw.gui.plaf.palette.PaletteButtonBorder,WRITE);
EndClass 515
StartClass 516
Class(net.n3.nanoxml.XMLValidationException,N,N,Public);
Attribute(MISSING_ELEMENT,int,Public,Y,Y,);
Attribute(UNEXPECTED_ELEMENT,int,Public,Y,Y,);
Attribute(MISSING_ATTRIBUTE,int,Public,Y,Y,);
Attribute(UNEXPECTED_ATTRIBUTE,int,Public,Y,Y,);
Attribute(ATTRIBUTE_WITH_INVALID_VALUE,int,Public,Y,Y,);
Attribute(MISSING_PCDATA,int,Public,Y,Y,);
Attribute(UNEXPECTED_PCDATA,int,Public,Y,Y,);
Attribute(MISC_ERROR,int,Public,Y,Y,);
Attribute(errorType,int,Private,N,N,);
Attribute(elementName,java.lang.String,Private,N,N,);
Attribute(attributeName,java.lang.String,Private,N,N,);
Attribute(attributeValue,java.lang.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(finalize,void,Protected,N,N);
Method(getElementName,java.lang.String,Public,N,N);
Method(getAttributeName,java.lang.String,Public,N,N);
Method(getAttributeValue,java.lang.String,Public,N,N);
Parameter(<init>,int,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,int,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.String,);
SuperClass(net.n3.nanoxml.XMLException);
Generalization(net.n3.nanoxml.XMLException);
Call(ATTRIBUTE,net.n3.nanoxml.XMLValidationException,<init> --> elementName,net.n3.nanoxml.XMLValidationException,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLValidationException,<init> --> attributeName,net.n3.nanoxml.XMLValidationException,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLValidationException,<init> --> attributeValue,net.n3.nanoxml.XMLValidationException,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLValidationException,finalize --> elementName,net.n3.nanoxml.XMLValidationException,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLValidationException,finalize --> attributeName,net.n3.nanoxml.XMLValidationException,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLValidationException,finalize --> attributeValue,net.n3.nanoxml.XMLValidationException,WRITE);
Call(ATTRIBUTE,net.n3.nanoxml.XMLValidationException,getElementName --> elementName,net.n3.nanoxml.XMLValidationException,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLValidationException,getAttributeName --> attributeName,net.n3.nanoxml.XMLValidationException,READ);
Call(ATTRIBUTE,net.n3.nanoxml.XMLValidationException,getAttributeValue --> attributeValue,net.n3.nanoxml.XMLValidationException,READ);
Call(METHOD,net.n3.nanoxml.XMLValidationException,<init> --> <init>$5,net.n3.nanoxml.XMLException,);
Call(METHOD,net.n3.nanoxml.XMLValidationException,finalize --> finalize,net.n3.nanoxml.XMLException,);
EndClass 516