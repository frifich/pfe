StartClass 1
Class(com.creditdatamw.zerocell.column.ColumnInfo,N,N,Public);
Attribute(name,java.lang.String,Private,N,N,);
Attribute(fieldName,java.lang.String,Private,N,N,);
Attribute(index,int,Private,N,N,);
Attribute(dataFormat,java.lang.String,Private,N,N,);
Attribute(type,java.lang.Class,Private,N,N,);
Attribute(converterClass,java.lang.Class,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(getFieldName,java.lang.String,Public,N,N);
Method(getIndex,int,Public,N,N);
Method(getDataFormat,java.lang.String,Public,N,N);
Method(getType,java.lang.Class,Public,N,N);
Method(getConverterClass,java.lang.Class,Public,N,N);
Method(annotationsOf,java.util.List,Public,Y,N);
Method(columnsOf,java.lang.String[],Public,Y,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,int,);
Parameter(<init>,java.lang.Class,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,int,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,java.lang.Class,);
Parameter(<init>$2,java.lang.Class,);
Parameter(annotationsOf,java.lang.Class,);
Parameter(columnsOf,java.lang.Class,);
SubClass(com.creditdatamw.zerocell.column.RowNumberInfo);
Call(ATTRIBUTE,com.creditdatamw.zerocell.column.ColumnInfo,<init> --> name,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.column.ColumnInfo,<init> --> fieldName,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.column.ColumnInfo,<init> --> index,int,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.column.ColumnInfo,<init>$2 --> name,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.column.ColumnInfo,<init>$2 --> fieldName,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.column.ColumnInfo,<init>$2 --> index,int,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.column.ColumnInfo,<init>$2 --> dataFormat,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.column.ColumnInfo,<init>$2 --> type,java.lang.Class,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.column.ColumnInfo,<init>$2 --> converterClass,java.lang.Class,READ);
Call(METHOD,com.creditdatamw.zerocell.column.ColumnInfo,annotationsOf --> getDeclaredFields,java.lang.Class,);
Call(METHOD,com.creditdatamw.zerocell.column.ColumnInfo,annotationsOf --> getAnnotation,null,);
Call(METHOD,com.creditdatamw.zerocell.column.ColumnInfo,annotationsOf --> isNull,null,);
Call(METHOD,com.creditdatamw.zerocell.column.ColumnInfo,annotationsOf --> add,java.util.List,);
Call(METHOD,com.creditdatamw.zerocell.column.ColumnInfo,columnsOf --> annotationsOf,com.creditdatamw.zerocell.column.ColumnInfo,);
Call(METHOD,com.creditdatamw.zerocell.column.ColumnInfo,columnsOf --> size,java.util.List,);
Call(METHOD,com.creditdatamw.zerocell.column.ColumnInfo,columnsOf --> getLogger,null,);
Call(METHOD,com.creditdatamw.zerocell.column.ColumnInfo,columnsOf --> debug,null,);
Call(METHOD,com.creditdatamw.zerocell.column.ColumnInfo,columnsOf --> format,null,);
Call(METHOD,com.creditdatamw.zerocell.column.ColumnInfo,columnsOf --> getName,java.lang.Class,);
Call(METHOD,com.creditdatamw.zerocell.column.ColumnInfo,columnsOf --> index,null,);
Call(METHOD,com.creditdatamw.zerocell.column.ColumnInfo,columnsOf --> name,null,);
Call(METHOD,com.creditdatamw.zerocell.column.ColumnInfo,columnsOf --> trim,null,);
EndClass 1
StartClass 2
Class(com.creditdatamw.zerocell.column.RowNumberInfo,N,N,Public);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.Class,);
SuperClass(com.creditdatamw.zerocell.column.ColumnInfo);
Generalization(com.creditdatamw.zerocell.column.ColumnInfo);
Call(METHOD,com.creditdatamw.zerocell.column.RowNumberInfo,<init> --> super,com.creditdatamw.zerocell.column.RowNumberInfo,);
EndClass 2
StartClass 3
Class(com.creditdatamw.zerocell.column.ColumnMapping,N,N,Public);
Attribute(rowNumberInfo,com.creditdatamw.zerocell.column.ColumnInfo,Private,N,Y,);
Attribute(columns,java.util.List,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(getRowNumberInfo,com.creditdatamw.zerocell.column.ColumnInfo,Public,N,N);
Method(getColumns,java.util.List,Public,N,N);
Parameter(<init>,com.creditdatamw.zerocell.column.ColumnInfo,);
Parameter(<init>,java.util.List,);
Parameter(<init>$2,com.creditdatamw.zerocell.column.ColumnInfo,);
Composition(com.creditdatamw.zerocell.column.ColumnInfo);
Call(ATTRIBUTE,com.creditdatamw.zerocell.column.ColumnMapping,<init> --> rowNumberInfo,com.creditdatamw.zerocell.column.ColumnInfo,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.column.ColumnMapping,<init> --> columns,java.util.List,READ);
Call(METHOD,com.creditdatamw.zerocell.column.ColumnMapping,<init>$2 --> asList,null,);
Call(ATTRIBUTE,com.creditdatamw.zerocell.column.ColumnMapping,<init>$2 --> rowNumberInfo,com.creditdatamw.zerocell.column.ColumnInfo,READ);
EndClass 3
StartClass 4
Class(com.creditdatamw.zerocell.converter.Converters,N,N,Public);
Attribute(LOGGER,org.slf4j.Logger,Private,Y,Y,);
Attribute(toFloat,com.creditdatamw.zerocell.converter.Converter,Public,Y,Y,);
Attribute(noop,com.creditdatamw.zerocell.converter.Converter,Public,Y,Y,);
Attribute(toLocalDateTime,com.creditdatamw.zerocell.converter.Converter,Public,Y,Y,);
Attribute(toLocalDate,com.creditdatamw.zerocell.converter.Converter,Public,Y,Y,);
Attribute(toSqlDate,com.creditdatamw.zerocell.converter.Converter,Public,Y,Y,);
Attribute(toSqlTimestamp,com.creditdatamw.zerocell.converter.Converter,Public,Y,Y,);
Attribute(toInteger,com.creditdatamw.zerocell.converter.Converter,Public,Y,Y,);
Attribute(toLong,com.creditdatamw.zerocell.converter.Converter,Public,Y,Y,);
Attribute(toDouble,com.creditdatamw.zerocell.converter.Converter,Public,Y,Y,);
Attribute(toBoolean,com.creditdatamw.zerocell.converter.Converter,Public,Y,Y,);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
EndClass 4
StartClass 5
Class(com.creditdatamw.zerocell.converter.NoopConverter,N,N,Public);
Method(convert,java.lang.String,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(convert,java.lang.String,);
Parameter(convert,java.lang.String,);
Parameter(convert,int,);
Realization(com.creditdatamw.zerocell.converter.Converter);
EndClass 5
StartClass 6
Class(com.creditdatamw.zerocell.converter.Converter,Y,Y,Public);
EndClass 6
StartClass 7
Class(com.creditdatamw.zerocell.handler.EntityHandler,N,N,Public);
Attribute(LOGGER,org.slf4j.Logger,Private,Y,Y,);
Attribute(DEFAULT_SHEET,java.lang.String,Private,Y,Y,);
Attribute(type,java.lang.Class,Private,N,Y,);
Attribute(entitySheetHandler,com.creditdatamw.zerocell.handler.EntityExcelSheetHandler,Private,N,Y,);
Attribute(sheetName,java.lang.String,Private,N,Y,);
Attribute(skipHeaderRow,boolean,Private,N,Y,);
Attribute(skipFirstNRows,int,Private,N,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(createSheetHandler,com.creditdatamw.zerocell.handler.EntityExcelSheetHandler,Private,N,N);
Method(readColumnInfoViaReflection,com.creditdatamw.zerocell.column.ColumnMapping,Private,N,N);
Method(readAsList,java.util.List,Public,N,N);
Method(process,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,java.lang.Class,);
Parameter(<init>,boolean,);
Parameter(<init>,int,);
Parameter(<init>$2,java.lang.Class,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,boolean,);
Parameter(<init>$2,int,);
Parameter(<init>$3,java.lang.Class,);
Parameter(<init>$3,com.creditdatamw.zerocell.column.ColumnMapping,);
Parameter(<init>$3,boolean,);
Parameter(<init>$3,int,);
Parameter(<init>$4,java.lang.Class,);
Parameter(<init>$4,java.lang.String,);
Parameter(<init>$4,com.creditdatamw.zerocell.column.ColumnMapping,);
Parameter(<init>$4,boolean,);
Parameter(<init>$4,int,);
Parameter(createSheetHandler,java.lang.Class,);
Parameter(createSheetHandler,com.creditdatamw.zerocell.column.ColumnMapping,);
Parameter(readColumnInfoViaReflection,java.lang.Class,);
Parameter(process,java.io.File,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,<init> --> requireNonNull,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,<init> --> createSheetHandler,com.creditdatamw.zerocell.handler.EntityHandler,);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler,<init> --> DEFAULT_SHEET,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler,<init> --> skipHeaderRow,boolean,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler,<init> --> skipFirstNRows,int,READ);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,<init>$2 --> requireNonNull,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,<init>$2 --> createSheetHandler,com.creditdatamw.zerocell.handler.EntityHandler,);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler,<init>$2 --> sheetName,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler,<init>$2 --> skipHeaderRow,boolean,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler,<init>$2 --> skipFirstNRows,int,READ);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,<init>$3 --> requireNonNull,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,<init>$3 --> createSheetHandler,com.creditdatamw.zerocell.handler.EntityHandler,);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler,<init>$3 --> DEFAULT_SHEET,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler,<init>$3 --> skipHeaderRow,boolean,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler,<init>$3 --> skipFirstNRows,int,READ);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,<init>$4 --> requireNonNull,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,<init>$4 --> createSheetHandler,com.creditdatamw.zerocell.handler.EntityHandler,);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler,<init>$4 --> sheetName,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler,<init>$4 --> skipHeaderRow,boolean,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler,<init>$4 --> skipFirstNRows,int,READ);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,createSheetHandler --> readColumnInfoViaReflection,com.creditdatamw.zerocell.handler.EntityHandler,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,createSheetHandler --> getRowNumberInfo,com.creditdatamw.zerocell.column.ColumnMapping,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,createSheetHandler --> getColumns,com.creditdatamw.zerocell.column.ColumnMapping,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,createSheetHandler --> size,java.util.List,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,createSheetHandler --> getIndex,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,createSheetHandler --> isNull,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,readColumnInfoViaReflection --> getDeclaredFields,java.lang.Class,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,readColumnInfoViaReflection --> getAnnotation,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,readColumnInfoViaReflection --> isNull,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,readColumnInfoViaReflection --> getName,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,readColumnInfoViaReflection --> getAnnotation,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,readColumnInfoViaReflection --> isNull,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,readColumnInfoViaReflection --> convertorClass,com.creditdatamw.zerocell.annotation.Column,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,readColumnInfoViaReflection --> add,java.util.ArrayList,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,readColumnInfoViaReflection --> name,com.creditdatamw.zerocell.annotation.Column,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,readColumnInfoViaReflection --> trim,com.creditdatamw.zerocell.annotation.Column,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,readColumnInfoViaReflection --> getName,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,readColumnInfoViaReflection --> index,com.creditdatamw.zerocell.annotation.Column,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,readColumnInfoViaReflection --> dataFormat,com.creditdatamw.zerocell.annotation.Column,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,readColumnInfoViaReflection --> getType,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,readColumnInfoViaReflection --> isEmpty,java.util.ArrayList,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,readColumnInfoViaReflection --> format,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,readColumnInfoViaReflection --> getName,java.lang.Class,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,readColumnInfoViaReflection --> trimToSize,java.util.ArrayList,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,readAsList --> unmodifiableList,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,readAsList --> read,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,process --> process,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler,process --> getLogger,null,);
EndClass 7
StartClass 8
Class(com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,N,N,Private);
Attribute(LOGGER,org.slf4j.Logger,Private,N,Y,);
Attribute(rowNumberColumn,com.creditdatamw.zerocell.column.ColumnInfo,Private,N,Y,);
Attribute(columns,com.creditdatamw.zerocell.column.ColumnInfo[],Private,N,Y,);
Attribute(entities,java.util.List,Private,N,Y,);
Attribute(NOOP_CONVERTER,com.creditdatamw.zerocell.converter.Converter,Private,N,Y,);
Attribute(converters,com.creditdatamw.zerocell.converter.Converter[],Private,N,Y,);
Attribute(MAXIMUM_COL_INDEX,int,Private,N,Y,);
Attribute(isHeaderRow,boolean,Private,N,N,);
Attribute(currentRow,int,Private,N,N,);
Attribute(currentCol,int,Private,N,N,);
Attribute(cur,com.creditdatamw.zerocell.handler.T,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(cacheConverters,com.creditdatamw.zerocell.converter.Converter[],Private,N,N);
Method(read,java.util.List,Public,N,N);
Method(clear,void,Public,N,N);
Method(startRow,void,Public,N,N);
Method(endRow,void,Public,N,N);
Method(cell,void,Public,N,N);
Method(writeColumnField,void,Private,N,N);
Method(convertValueToType,java.lang.Object,Public,N,N);
Method(headerFooter,void,Public,N,N);
Parameter(<init>,com.creditdatamw.zerocell.column.ColumnInfo,);
Parameter(<init>,com.creditdatamw.zerocell.column.ColumnInfo[],);
Parameter(read,java.io.File,);
Parameter(read,java.lang.String,);
Parameter(startRow,int,);
Parameter(endRow,int,);
Parameter(cell,java.lang.String,);
Parameter(cell,java.lang.String,);
Parameter(cell,org.apache.poi.xssf.usermodel.XSSFComment,);
Parameter(writeColumnField,com.creditdatamw.zerocell.handler.T,);
Parameter(writeColumnField,java.lang.String,);
Parameter(writeColumnField,com.creditdatamw.zerocell.column.ColumnInfo,);
Parameter(writeColumnField,int,);
Parameter(convertValueToType,java.lang.Class,);
Parameter(convertValueToType,java.lang.String,);
Parameter(convertValueToType,java.lang.String,);
Parameter(convertValueToType,int,);
Parameter(headerFooter,java.lang.String,);
Parameter(headerFooter,boolean,);
Parameter(headerFooter,java.lang.String,);
Realization(com.creditdatamw.zerocell.ZeroCellReader);
Composition(com.creditdatamw.zerocell.column.ColumnInfo);
Composition(com.creditdatamw.zerocell.converter.Converter);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,<init> --> cacheConverters,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,<init> --> rowNumberColumn,com.creditdatamw.zerocell.column.ColumnInfo,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,<init> --> columns,com.creditdatamw.zerocell.column.ColumnInfo[],READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,<init> --> columns,com.creditdatamw.zerocell.column.ColumnInfo[],READ);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,cacheConverters --> getIndex,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,cacheConverters --> getConverterClass,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,cacheConverters --> equals,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,cacheConverters --> getIndex,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,cacheConverters --> getConverterClass,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,cacheConverters --> newInstance,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,cacheConverters --> error,org.slf4j.Logger,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,cacheConverters --> getConverterClass,null,);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,cacheConverters --> NOOP_CONVERTER,com.creditdatamw.zerocell.converter.Converter,READ);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,read --> unmodifiableList,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,clear --> clear,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,startRow --> newInstance,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,startRow --> isNull,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,startRow --> writeColumnField,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,startRow --> valueOf,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,startRow --> getName,null,);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,startRow --> currentRow,int,WRITE);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,startRow --> currentRow,int,WRITE);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,startRow --> currentRow,int,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,startRow --> isHeaderRow,boolean,WRITE);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,startRow --> isHeaderRow,boolean,WRITE);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,startRow --> cur,com.creditdatamw.zerocell.handler.T,WRITE);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,endRow --> isNull,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,endRow --> add,null,);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,endRow --> cur,com.creditdatamw.zerocell.handler.T,WRITE);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,cell --> formatAsString,org.apache.poi.ss.util.CellAddress,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,cell --> getCol,org.apache.poi.hssf.util.CellReference,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,cell --> trace,org.slf4j.Logger,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,cell --> getName,com.creditdatamw.zerocell.column.ColumnInfo,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,cell --> equalsIgnoreCase,com.creditdatamw.zerocell.column.ColumnInfo,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,cell --> trim,java.lang.String,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,cell --> format,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,cell --> getName,com.creditdatamw.zerocell.column.ColumnInfo,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,cell --> isNull,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,cell --> writeColumnField,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,cell --> currentCol,int,WRITE);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,writeColumnField --> getFieldName,com.creditdatamw.zerocell.column.ColumnInfo,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,writeColumnField --> getIndex,com.creditdatamw.zerocell.column.ColumnInfo,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,writeColumnField --> getIndex,com.creditdatamw.zerocell.column.ColumnInfo,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,writeColumnField --> getIndex,com.creditdatamw.zerocell.column.ColumnInfo,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,writeColumnField --> convertValueToType,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,writeColumnField --> getType,com.creditdatamw.zerocell.column.ColumnInfo,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,writeColumnField --> getName,com.creditdatamw.zerocell.column.ColumnInfo,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,writeColumnField --> convert,com.creditdatamw.zerocell.converter.Converter,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,writeColumnField --> getName,com.creditdatamw.zerocell.column.ColumnInfo,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,writeColumnField --> format,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,writeColumnField --> getClass,com.creditdatamw.zerocell.converter.Converter,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,writeColumnField --> getName,com.creditdatamw.zerocell.converter.Converter,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,writeColumnField --> getDeclaredField,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,writeColumnField --> getFieldName,com.creditdatamw.zerocell.column.ColumnInfo,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,writeColumnField --> isAccessible,java.lang.reflect.Field,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,writeColumnField --> setAccessible,java.lang.reflect.Field,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,writeColumnField --> set,java.lang.reflect.Field,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,writeColumnField --> setAccessible,java.lang.reflect.Field,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,writeColumnField --> isAccessible,java.lang.reflect.Field,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,writeColumnField --> format,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,writeColumnField --> error,org.slf4j.Logger,);
Call(ATTRIBUTE,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,writeColumnField --> converters,com.creditdatamw.zerocell.converter.Converter[],READ);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,convertValueToType --> valueOf,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,convertValueToType --> convert,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,convertValueToType --> convert,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,convertValueToType --> convert,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,convertValueToType --> convert,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,convertValueToType --> convert,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,convertValueToType --> convert,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,convertValueToType --> convert,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,convertValueToType --> convert,null,);
Call(METHOD,com.creditdatamw.zerocell.handler.EntityHandler.EntityExcelSheetHandler,convertValueToType --> convert,null,);
EndClass 8
StartClass 9
Class(com.creditdatamw.zerocell.converter.Converter,Y,Y,Public);
Method(convert,com.creditdatamw.zerocell.converter.T,Public,N,Y);
Parameter(convert,java.lang.String,);
Parameter(convert,java.lang.String,);
Parameter(convert,int,);
EndClass 9
StartClass 10
Class(com.creditdatamw.zerocell.ZeroCellReader,Y,Y,Public);
Method(read,java.util.List,Public,N,Y);
Parameter(read,java.io.File,);
Parameter(read,java.lang.String,);
EndClass 10
StartClass 11
Class(com.creditdatamw.zerocell.Reader,N,N,Public);
Method(columnsOf,java.lang.String[],Public,N,N);
Method(of,com.creditdatamw.zerocell.ReaderBuilder,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(columnsOf,java.lang.Class,);
Parameter(of,java.lang.Class,);
Call(METHOD,com.creditdatamw.zerocell.Reader,columnsOf --> columnsOf,null,);
EndClass 11
StartClass 12
Class(com.creditdatamw.zerocell.Reader.ReaderBuilder,N,N,Public);
Attribute(clazz,java.lang.Class,Private,N,Y,);
Attribute(file,java.io.File,Private,N,N,);
Attribute(sheetName,java.lang.String,Private,N,N,);
Attribute(columnMapping,com.creditdatamw.zerocell.column.ColumnMapping,Private,N,N,);
Attribute(skipHeaderRow,boolean,Private,N,N,);
Attribute(skipFirstNRows,int,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(from,com.creditdatamw.zerocell.ReaderBuilder,Public,N,N);
Method(using,com.creditdatamw.zerocell.ReaderBuilder,Public,N,N);
Method(using$2,com.creditdatamw.zerocell.ReaderBuilder,Public,N,N);
Method(sheet,com.creditdatamw.zerocell.ReaderBuilder,Public,N,N);
Method(skipHeaderRow,com.creditdatamw.zerocell.ReaderBuilder,Public,N,N);
Method(skipFirstNRows,com.creditdatamw.zerocell.ReaderBuilder,Public,N,N);
Method(list,java.util.List,Public,N,N);
Parameter(<init>,java.lang.Class,);
Parameter(from,java.io.File,);
Parameter(using,com.creditdatamw.zerocell.column.RowNumberInfo,);
Parameter(sheet,java.lang.String,);
Parameter(skipHeaderRow,boolean,);
Parameter(skipFirstNRows,int,);
Composition(com.creditdatamw.zerocell.column.ColumnMapping);
Call(ATTRIBUTE,com.creditdatamw.zerocell.Reader.ReaderBuilder,<init> --> clazz,java.lang.Class,READ);
Call(METHOD,com.creditdatamw.zerocell.Reader.ReaderBuilder,from --> requireNonNull,null,);
Call(ATTRIBUTE,com.creditdatamw.zerocell.Reader.ReaderBuilder,from --> file,java.io.File,READ);
Call(METHOD,com.creditdatamw.zerocell.Reader.ReaderBuilder,sheet --> requireNonNull,null,);
Call(ATTRIBUTE,com.creditdatamw.zerocell.Reader.ReaderBuilder,sheet --> sheetName,java.lang.String,READ);
Call(METHOD,com.creditdatamw.zerocell.Reader.ReaderBuilder,list --> isNull,null,);
Call(METHOD,com.creditdatamw.zerocell.Reader.ReaderBuilder,list --> isNull,null,);
Call(METHOD,com.creditdatamw.zerocell.Reader.ReaderBuilder,list --> isNull,null,);
Call(METHOD,com.creditdatamw.zerocell.Reader.ReaderBuilder,list --> isNull,null,);
Call(METHOD,com.creditdatamw.zerocell.Reader.ReaderBuilder,list --> isNull,null,);
Call(METHOD,com.creditdatamw.zerocell.Reader.ReaderBuilder,list --> isNull,null,);
Call(METHOD,com.creditdatamw.zerocell.Reader.ReaderBuilder,list --> process,com.creditdatamw.zerocell.handler.EntityHandler,);
Call(METHOD,com.creditdatamw.zerocell.Reader.ReaderBuilder,list --> readAsList,com.creditdatamw.zerocell.handler.EntityHandler,);
EndClass 12
StartClass 13
Class(com.creditdatamw.zerocell.ReaderUtil,N,N,Public);
Method(process,void,Public,Y,N);
Method(process$2,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(process,java.io.File,);
Parameter(process,java.io.String,);
Parameter(process,java.io.ZeroCellReader,);
Parameter(process$2,java.io.InputStream,);
Parameter(process$2,java.io.String,);
Parameter(process$2,java.io.ZeroCellReader,);
Call(METHOD,com.creditdatamw.zerocell.ReaderUtil,process --> process,com.creditdatamw.zerocell.ReaderUtil,);
Call(METHOD,com.creditdatamw.zerocell.ReaderUtil,process$2 --> open,null,);
Call(METHOD,com.creditdatamw.zerocell.ReaderUtil,process$2 --> getStylesTable,java.io.XSSFReader,);
Call(METHOD,com.creditdatamw.zerocell.ReaderUtil,process$2 --> getSheetsData,java.io.XSSFReader,);
Call(METHOD,com.creditdatamw.zerocell.ReaderUtil,process$2 --> hasNext,java.io.XSSFReader.XSSFReader.SheetIterator,);
Call(METHOD,com.creditdatamw.zerocell.ReaderUtil,process$2 --> next,java.io.XSSFReader.XSSFReader.SheetIterator,);
Call(METHOD,com.creditdatamw.zerocell.ReaderUtil,process$2 --> getSheetName,java.io.XSSFReader.XSSFReader.SheetIterator,);
Call(METHOD,com.creditdatamw.zerocell.ReaderUtil,process$2 --> equalsIgnoreCase,java.io.XSSFReader.XSSFReader.SheetIterator,);
Call(METHOD,com.creditdatamw.zerocell.ReaderUtil,process$2 --> isNull,null,);
Call(METHOD,com.creditdatamw.zerocell.ReaderUtil,process$2 --> newXMLReader,null,);
Call(METHOD,com.creditdatamw.zerocell.ReaderUtil,process$2 --> setContentHandler,java.io.XMLReader,);
Call(METHOD,com.creditdatamw.zerocell.ReaderUtil,process$2 --> parse,java.io.XMLReader,);
Call(METHOD,com.creditdatamw.zerocell.ReaderUtil,process$2 --> close,java.io.InputStream,);
Call(METHOD,com.creditdatamw.zerocell.ReaderUtil,process$2 --> getMessage,null,);
EndClass 13
StartClass 14
Class(com.creditdatamw.zerocell.SheetNotFoundException,N,N,Public);
Method(<init>,void,Public,N,N);
Parameter(<init>,java.lang.String,);
SuperClass(java.lang.Exception);
Generalization(java.lang.Exception);
Call(METHOD,com.creditdatamw.zerocell.SheetNotFoundException,<init> --> super,com.creditdatamw.zerocell.SheetNotFoundException,);
Call(METHOD,com.creditdatamw.zerocell.SheetNotFoundException,<init> --> format,null,);
EndClass 14
StartClass 15
Class(java.lang.Exception,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.creditdatamw.zerocell.SheetNotFoundException);
EndClass 15
StartClass 16
Class(com.creditdatamw.zerocell.ZeroCellException,N,N,Public);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>$2,java.lang.String,);
Parameter(<init>$2,java.lang.Throwable,);
Parameter(<init>$3,java.lang.Throwable,);
Parameter(<init>$4,java.lang.String,);
Parameter(<init>$4,java.lang.Throwable,);
Parameter(<init>$4,boolean,);
Parameter(<init>$4,boolean,);
SuperClass(java.lang.RuntimeException);
Generalization(java.lang.RuntimeException);
Call(METHOD,com.creditdatamw.zerocell.ZeroCellException,<init> --> super,com.creditdatamw.zerocell.ZeroCellException,);
Call(METHOD,com.creditdatamw.zerocell.ZeroCellException,<init>$2 --> super,com.creditdatamw.zerocell.ZeroCellException,);
Call(METHOD,com.creditdatamw.zerocell.ZeroCellException,<init>$3 --> super,com.creditdatamw.zerocell.ZeroCellException,);
Call(METHOD,com.creditdatamw.zerocell.ZeroCellException,<init>$4 --> super,com.creditdatamw.zerocell.ZeroCellException,);
EndClass 16
StartClass 17
Class(java.lang.RuntimeException,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.creditdatamw.zerocell.ZeroCellException);
EndClass 17
StartClass 18
Class(com.creditdatamw.zerocell.Person,N,N,Public);
Attribute(rowNumber,int,Private,N,N,);
Attribute(id,java.lang.String,Private,N,N,);
Attribute(firstName,java.lang.String,Private,N,N,);
Attribute(middleName,java.lang.String,Private,N,N,);
Attribute(lastName,java.lang.String,Private,N,N,);
Attribute(dateOfBirth,java.time.LocalDate,Private,N,N,);
Attribute(dateOfRegistration,java.sql.Date,Private,N,N,);
Attribute(favouriteNumber,int,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getRowNumber,int,Public,N,N);
Method(setRowNumber,void,Public,N,N);
Method(getId,java.lang.String,Public,N,N);
Method(setId,void,Public,N,N);
Method(getFirstName,java.lang.String,Public,N,N);
Method(setFirstName,void,Public,N,N);
Method(getMiddleName,java.lang.String,Public,N,N);
Method(setMiddleName,void,Public,N,N);
Method(getLastName,java.lang.String,Public,N,N);
Method(setLastName,void,Public,N,N);
Method(getDateOfRegistration,java.sql.Date,Public,N,N);
Method(setDateOfRegistration,void,Public,N,N);
Method(getDateOfBirth,java.time.LocalDate,Public,N,N);
Method(setDateOfBirth,void,Public,N,N);
Method(getFavouriteNumber,int,Public,N,N);
Method(setFavouriteNumber,void,Public,N,N);
Parameter(setRowNumber,int,);
Parameter(setId,java.lang.String,);
Parameter(setFirstName,java.lang.String,);
Parameter(setMiddleName,java.lang.String,);
Parameter(setLastName,java.lang.String,);
Parameter(setDateOfRegistration,java.sql.Date,);
Parameter(setDateOfBirth,java.time.LocalDate,);
Parameter(setFavouriteNumber,int,);
Call(ATTRIBUTE,com.creditdatamw.zerocell.Person,setRowNumber --> rowNumber,int,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.Person,setId --> id,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.Person,setFirstName --> firstName,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.Person,setMiddleName --> middleName,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.Person,setLastName --> lastName,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.Person,setDateOfRegistration --> dateOfRegistration,java.sql.Date,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.Person,setDateOfBirth --> dateOfBirth,java.time.LocalDate,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.Person,setFavouriteNumber --> favouriteNumber,int,READ);
EndClass 18
StartClass 19
Class(com.creditdatamw.zerocell.TestHandler,N,N,Public);
Attribute(thrown,org.junit.rules.ExpectedException,Public,N,N,);
Method(testFS701MissingColumnIssue,void,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,com.creditdatamw.zerocell.TestHandler,testFS701MissingColumnIssue --> expect,org.junit.rules.ExpectedException,);
Call(METHOD,com.creditdatamw.zerocell.TestHandler,testFS701MissingColumnIssue --> expectMessage,org.junit.rules.ExpectedException,);
Call(METHOD,com.creditdatamw.zerocell.TestHandler,testFS701MissingColumnIssue --> of,null,);
Call(METHOD,com.creditdatamw.zerocell.TestHandler,testFS701MissingColumnIssue --> from,null,);
Call(METHOD,com.creditdatamw.zerocell.TestHandler,testFS701MissingColumnIssue --> sheet,null,);
Call(METHOD,com.creditdatamw.zerocell.TestHandler,testFS701MissingColumnIssue --> list,null,);
EndClass 19
StartClass 20
Class(com.creditdatamw.zerocell.TestHandler.Row,N,N,Public);
Attribute(first,java.lang.String,Public,N,N,);
Attribute(second,java.lang.String,Public,N,N,);
Attribute(third,java.lang.String,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(getFirst,java.lang.String,Public,N,N);
Method(setFirst,void,Public,N,N);
Method(getSecond,java.lang.String,Public,N,N);
Method(setSecond,void,Public,N,N);
Method(getThird,java.lang.String,Public,N,N);
Method(setThird,void,Public,N,N);
Parameter(setFirst,java.lang.String,);
Parameter(setSecond,java.lang.String,);
Parameter(setThird,java.lang.String,);
Call(ATTRIBUTE,com.creditdatamw.zerocell.TestHandler.Row,setFirst --> first,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.TestHandler.Row,setSecond --> second,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.TestHandler.Row,setThird --> third,java.lang.String,READ);
EndClass 20
StartClass 21
Class(com.creditdatamw.zerocell.TestProgrammaticApi,N,N,Public);
Method(testCanCreateReaderWithConfiguration,void,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,com.creditdatamw.zerocell.TestProgrammaticApi,testCanCreateReaderWithConfiguration --> of,null,);
Call(METHOD,com.creditdatamw.zerocell.TestProgrammaticApi,testCanCreateReaderWithConfiguration --> from,null,);
Call(METHOD,com.creditdatamw.zerocell.TestProgrammaticApi,testCanCreateReaderWithConfiguration --> using,null,);
Call(METHOD,com.creditdatamw.zerocell.TestProgrammaticApi,testCanCreateReaderWithConfiguration --> sheet,null,);
Call(METHOD,com.creditdatamw.zerocell.TestProgrammaticApi,testCanCreateReaderWithConfiguration --> list,null,);
Call(METHOD,com.creditdatamw.zerocell.TestProgrammaticApi,testCanCreateReaderWithConfiguration --> assertNotNull,com.creditdatamw.zerocell.TestProgrammaticApi,);
Call(METHOD,com.creditdatamw.zerocell.TestProgrammaticApi,testCanCreateReaderWithConfiguration --> assertFalse,com.creditdatamw.zerocell.TestProgrammaticApi,);
Call(METHOD,com.creditdatamw.zerocell.TestProgrammaticApi,testCanCreateReaderWithConfiguration --> isEmpty,java.util.List,);
Call(METHOD,com.creditdatamw.zerocell.TestProgrammaticApi,testCanCreateReaderWithConfiguration --> assertEquals,com.creditdatamw.zerocell.TestProgrammaticApi,);
Call(METHOD,com.creditdatamw.zerocell.TestProgrammaticApi,testCanCreateReaderWithConfiguration --> size,java.util.List,);
Call(METHOD,com.creditdatamw.zerocell.TestProgrammaticApi,testCanCreateReaderWithConfiguration --> get,java.util.List,);
Call(METHOD,com.creditdatamw.zerocell.TestProgrammaticApi,testCanCreateReaderWithConfiguration --> assertEquals,com.creditdatamw.zerocell.TestProgrammaticApi,);
Call(METHOD,com.creditdatamw.zerocell.TestProgrammaticApi,testCanCreateReaderWithConfiguration --> getRowNumber,org.junit.Assert.PersonWithoutAnnotation,);
Call(METHOD,com.creditdatamw.zerocell.TestProgrammaticApi,testCanCreateReaderWithConfiguration --> assertEquals,com.creditdatamw.zerocell.TestProgrammaticApi,);
Call(METHOD,com.creditdatamw.zerocell.TestProgrammaticApi,testCanCreateReaderWithConfiguration --> getFirstName,org.junit.Assert.PersonWithoutAnnotation,);
EndClass 21
StartClass 22
Class(com.creditdatamw.zerocell.TestProgrammaticApi.PersonWithoutAnnotation,N,N,Public);
Attribute(rowNumber,int,Private,N,N,);
Attribute(id,org.junit.Assert.String,Private,N,N,);
Attribute(firstName,org.junit.Assert.String,Private,N,N,);
Attribute(middleName,org.junit.Assert.String,Private,N,N,);
Attribute(lastName,org.junit.Assert.String,Private,N,N,);
Attribute(dateOfBirth,java.time.LocalDate,Private,N,N,);
Attribute(dateOfRegistration,org.junit.Assert.Date,Private,N,N,);
Attribute(favouriteNumber,int,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getRowNumber,int,Public,N,N);
Method(setRowNumber,void,Public,N,N);
Method(getId,org.junit.Assert.String,Public,N,N);
Method(setId,void,Public,N,N);
Method(getFirstName,org.junit.Assert.String,Public,N,N);
Method(setFirstName,void,Public,N,N);
Method(getMiddleName,org.junit.Assert.String,Public,N,N);
Method(setMiddleName,void,Public,N,N);
Method(getLastName,org.junit.Assert.String,Public,N,N);
Method(setLastName,void,Public,N,N);
Method(getDateOfRegistration,org.junit.Assert.Date,Public,N,N);
Method(setDateOfRegistration,void,Public,N,N);
Method(getDateOfBirth,java.time.LocalDate,Public,N,N);
Method(setDateOfBirth,void,Public,N,N);
Method(getFavouriteNumber,int,Public,N,N);
Method(setFavouriteNumber,void,Public,N,N);
Parameter(setRowNumber,int,);
Parameter(setId,org.junit.Assert.String,);
Parameter(setFirstName,org.junit.Assert.String,);
Parameter(setMiddleName,org.junit.Assert.String,);
Parameter(setLastName,org.junit.Assert.String,);
Parameter(setDateOfRegistration,org.junit.Assert.Date,);
Parameter(setDateOfBirth,java.time.LocalDate,);
Parameter(setFavouriteNumber,int,);
Call(ATTRIBUTE,com.creditdatamw.zerocell.TestProgrammaticApi.PersonWithoutAnnotation,setRowNumber --> rowNumber,int,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.TestProgrammaticApi.PersonWithoutAnnotation,setId --> id,org.junit.Assert.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.TestProgrammaticApi.PersonWithoutAnnotation,setFirstName --> firstName,org.junit.Assert.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.TestProgrammaticApi.PersonWithoutAnnotation,setMiddleName --> middleName,org.junit.Assert.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.TestProgrammaticApi.PersonWithoutAnnotation,setLastName --> lastName,org.junit.Assert.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.TestProgrammaticApi.PersonWithoutAnnotation,setDateOfRegistration --> dateOfRegistration,org.junit.Assert.Date,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.TestProgrammaticApi.PersonWithoutAnnotation,setDateOfBirth --> dateOfBirth,java.time.LocalDate,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.TestProgrammaticApi.PersonWithoutAnnotation,setFavouriteNumber --> favouriteNumber,int,READ);
EndClass 22
StartClass 23
Class(com.creditdatamw.zerocell.TestReader,N,N,Public);
Attribute(temporaryFolder,org.junit.Assert.TemporaryFolder,Public,N,N,);
Attribute(thrown,org.junit.Assert.ExpectedException,Public,N,N,);
Method(testShouldExtractPeopleFromFile,void,Public,N,N);
Method(testShouldSkipFirst3RowsFromFile,void,Public,N,N);
Method(testShouldExtractColumns,void,Public,N,N);
Method(testShouldThrowOnInvalidSheetName,void,Public,N,N);
Method(testShouldThrowOnDuplicateIndex,void,Public,N,N);
Method(testShouldThrowOnIncorrectColumnName,void,Public,N,N);
Method(testShouldThrowForNonOpenXMLFile,void,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldExtractPeopleFromFile --> of,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldExtractPeopleFromFile --> from,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldExtractPeopleFromFile --> sheet,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldExtractPeopleFromFile --> list,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldExtractPeopleFromFile --> assertNotNull,com.creditdatamw.zerocell.TestReader,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldExtractPeopleFromFile --> assertFalse,com.creditdatamw.zerocell.TestReader,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldExtractPeopleFromFile --> isEmpty,java.util.List,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldExtractPeopleFromFile --> assertEquals,com.creditdatamw.zerocell.TestReader,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldExtractPeopleFromFile --> size,java.util.List,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldExtractPeopleFromFile --> get,java.util.List,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldExtractPeopleFromFile --> assertEquals,com.creditdatamw.zerocell.TestReader,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldExtractPeopleFromFile --> getRowNumber,org.junit.Assert.Person,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldExtractPeopleFromFile --> assertEquals,com.creditdatamw.zerocell.TestReader,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldExtractPeopleFromFile --> getFirstName,org.junit.Assert.Person,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldSkipFirst3RowsFromFile --> of,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldSkipFirst3RowsFromFile --> from,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldSkipFirst3RowsFromFile --> sheet,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldSkipFirst3RowsFromFile --> skipFirstNRows,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldSkipFirst3RowsFromFile --> list,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldSkipFirst3RowsFromFile --> assertNotNull,com.creditdatamw.zerocell.TestReader,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldSkipFirst3RowsFromFile --> assertFalse,com.creditdatamw.zerocell.TestReader,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldSkipFirst3RowsFromFile --> isEmpty,java.util.List,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldSkipFirst3RowsFromFile --> assertEquals,com.creditdatamw.zerocell.TestReader,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldSkipFirst3RowsFromFile --> size,java.util.List,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldSkipFirst3RowsFromFile --> get,java.util.List,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldSkipFirst3RowsFromFile --> assertEquals,com.creditdatamw.zerocell.TestReader,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldSkipFirst3RowsFromFile --> getRowNumber,org.junit.Assert.Person,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldSkipFirst3RowsFromFile --> assertEquals,com.creditdatamw.zerocell.TestReader,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldSkipFirst3RowsFromFile --> getFirstName,org.junit.Assert.Person,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldExtractColumns --> assertArrayEquals,com.creditdatamw.zerocell.TestReader,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldExtractColumns --> columnsOf,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowOnInvalidSheetName --> expect,org.junit.Assert.ExpectedException,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowOnInvalidSheetName --> expectMessage,org.junit.Assert.ExpectedException,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowOnInvalidSheetName --> of,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowOnInvalidSheetName --> from,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowOnInvalidSheetName --> sheet,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowOnInvalidSheetName --> list,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowOnDuplicateIndex --> expect,org.junit.Assert.ExpectedException,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowOnDuplicateIndex --> expectMessage,org.junit.Assert.ExpectedException,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowOnDuplicateIndex --> of,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowOnDuplicateIndex --> from,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowOnDuplicateIndex --> sheet,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowOnDuplicateIndex --> list,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowOnIncorrectColumnName --> expect,org.junit.Assert.ExpectedException,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowOnIncorrectColumnName --> expectMessage,org.junit.Assert.ExpectedException,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowOnIncorrectColumnName --> of,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowOnIncorrectColumnName --> from,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowOnIncorrectColumnName --> sheet,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowOnIncorrectColumnName --> list,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowForNonOpenXMLFile --> newFile,org.junit.Assert.TemporaryFolder,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowForNonOpenXMLFile --> expect,org.junit.Assert.ExpectedException,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowForNonOpenXMLFile --> expectMessage,org.junit.Assert.ExpectedException,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowForNonOpenXMLFile --> of,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowForNonOpenXMLFile --> from,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowForNonOpenXMLFile --> sheet,null,);
Call(METHOD,com.creditdatamw.zerocell.TestReader,testShouldThrowForNonOpenXMLFile --> list,null,);
EndClass 23
StartClass 24
Class(com.creditdatamw.zerocell.TestReader.DuplicateIndex,N,N,Public);
Attribute(id1,org.junit.Assert.String,Private,N,N,);
Attribute(id2,org.junit.Assert.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getId1,org.junit.Assert.String,Public,N,N);
Method(setId1,void,Public,N,N);
Method(getId2,org.junit.Assert.String,Public,N,N);
Method(setId2,void,Public,N,N);
Parameter(setId1,org.junit.Assert.String,);
Parameter(setId2,org.junit.Assert.String,);
Call(ATTRIBUTE,com.creditdatamw.zerocell.TestReader.DuplicateIndex,setId1 --> id1,org.junit.Assert.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.TestReader.DuplicateIndex,setId2 --> id2,org.junit.Assert.String,READ);
EndClass 24
StartClass 25
Class(com.creditdatamw.zerocell.TestReader.DuplicateIndex.Person2,N,N,Public);
Attribute(rowNumber,int,Private,N,N,);
Attribute(id,org.junit.Assert.String,Private,N,N,);
Attribute(firstName,org.junit.Assert.String,Private,N,N,);
Attribute(middleName,org.junit.Assert.String,Private,N,N,);
Attribute(lastName,org.junit.Assert.String,Private,N,N,);
Attribute(dateOfBirth,java.time.LocalDate,Private,N,N,);
Attribute(dateOfRegistration,org.junit.Assert.Date,Private,N,N,);
Attribute(favouriteNumber,int,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getRowNumber,int,Public,N,N);
Method(setRowNumber,void,Public,N,N);
Method(getId,org.junit.Assert.String,Public,N,N);
Method(setId,void,Public,N,N);
Method(getFirstName,org.junit.Assert.String,Public,N,N);
Method(setFirstName,void,Public,N,N);
Method(getMiddleName,org.junit.Assert.String,Public,N,N);
Method(setMiddleName,void,Public,N,N);
Method(getLastName,org.junit.Assert.String,Public,N,N);
Method(setLastName,void,Public,N,N);
Method(getDateOfBirth,java.time.LocalDate,Public,N,N);
Method(setDateOfBirth,void,Public,N,N);
Method(getDateOfRegistration,org.junit.Assert.Date,Public,N,N);
Method(setDateOfRegistration,void,Public,N,N);
Method(getFavouriteNumber,int,Public,N,N);
Method(setFavouriteNumber,void,Public,N,N);
Parameter(setRowNumber,int,);
Parameter(setId,org.junit.Assert.String,);
Parameter(setFirstName,org.junit.Assert.String,);
Parameter(setMiddleName,org.junit.Assert.String,);
Parameter(setLastName,org.junit.Assert.String,);
Parameter(setDateOfBirth,java.time.LocalDate,);
Parameter(setDateOfRegistration,org.junit.Assert.Date,);
Parameter(setFavouriteNumber,int,);
Call(ATTRIBUTE,com.creditdatamw.zerocell.TestReader.DuplicateIndex.Person2,setRowNumber --> rowNumber,int,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.TestReader.DuplicateIndex.Person2,setId --> id,org.junit.Assert.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.TestReader.DuplicateIndex.Person2,setFirstName --> firstName,org.junit.Assert.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.TestReader.DuplicateIndex.Person2,setMiddleName --> middleName,org.junit.Assert.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.TestReader.DuplicateIndex.Person2,setLastName --> lastName,org.junit.Assert.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.TestReader.DuplicateIndex.Person2,setDateOfBirth --> dateOfBirth,java.time.LocalDate,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.TestReader.DuplicateIndex.Person2,setDateOfRegistration --> dateOfRegistration,org.junit.Assert.Date,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.TestReader.DuplicateIndex.Person2,setFavouriteNumber --> favouriteNumber,int,READ);
EndClass 25
StartClass 26
Class(com.creditdatamw.zerocell.example.AnnotationProcessorExample,N,N,Public);
Method(main,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Call(METHOD,com.creditdatamw.zerocell.example.AnnotationProcessorExample,main --> read,com.creditdatamw.zerocell.ZeroCellReader,);
Call(METHOD,com.creditdatamw.zerocell.example.AnnotationProcessorExample,main --> println,null,);
Call(METHOD,com.creditdatamw.zerocell.example.AnnotationProcessorExample,main --> println,null,);
Call(METHOD,com.creditdatamw.zerocell.example.AnnotationProcessorExample,main --> format,null,);
Call(METHOD,com.creditdatamw.zerocell.example.AnnotationProcessorExample,main --> getRow,null,);
Call(METHOD,com.creditdatamw.zerocell.example.AnnotationProcessorExample,main --> toString,null,);
EndClass 26
StartClass 27
Class(com.creditdatamw.zerocell.example.BasicUsageExample,N,N,Public);
Method(main,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Call(METHOD,com.creditdatamw.zerocell.example.BasicUsageExample,main --> of,null,);
Call(METHOD,com.creditdatamw.zerocell.example.BasicUsageExample,main --> from,null,);
Call(METHOD,com.creditdatamw.zerocell.example.BasicUsageExample,main --> sheet,null,);
Call(METHOD,com.creditdatamw.zerocell.example.BasicUsageExample,main --> list,null,);
Call(METHOD,com.creditdatamw.zerocell.example.BasicUsageExample,main --> println,null,);
Call(METHOD,com.creditdatamw.zerocell.example.BasicUsageExample,main --> println,null,);
Call(METHOD,com.creditdatamw.zerocell.example.BasicUsageExample,main --> format,null,);
Call(METHOD,com.creditdatamw.zerocell.example.BasicUsageExample,main --> getRow,null,);
Call(METHOD,com.creditdatamw.zerocell.example.BasicUsageExample,main --> toString,null,);
EndClass 27
StartClass 28
Class(com.creditdatamw.zerocell.example.IdPrefixingConverter,N,N,Public);
Method(convert,java.lang.String,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(convert,java.lang.String,);
Parameter(convert,java.lang.String,);
Parameter(convert,int,);
Realization(com.creditdatamw.zerocell.example.Converter);
Call(METHOD,com.creditdatamw.zerocell.example.IdPrefixingConverter,convert --> format,null,);
EndClass 28
StartClass 29
Class(com.creditdatamw.zerocell.example.Converter,Y,Y,Public);
EndClass 29
StartClass 30
Class(com.creditdatamw.zerocell.example.ManualColumnMappingExample,N,N,Public);
Method(main,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Call(METHOD,com.creditdatamw.zerocell.example.ManualColumnMappingExample,main --> of,null,);
Call(METHOD,com.creditdatamw.zerocell.example.ManualColumnMappingExample,main --> from,null,);
Call(METHOD,com.creditdatamw.zerocell.example.ManualColumnMappingExample,main --> sheet,null,);
Call(METHOD,com.creditdatamw.zerocell.example.ManualColumnMappingExample,main --> using,null,);
Call(METHOD,com.creditdatamw.zerocell.example.ManualColumnMappingExample,main --> list,null,);
Call(METHOD,com.creditdatamw.zerocell.example.ManualColumnMappingExample,main --> println,null,);
Call(METHOD,com.creditdatamw.zerocell.example.ManualColumnMappingExample,main --> println,null,);
Call(METHOD,com.creditdatamw.zerocell.example.ManualColumnMappingExample,main --> format,null,);
Call(METHOD,com.creditdatamw.zerocell.example.ManualColumnMappingExample,main --> getRow,null,);
Call(METHOD,com.creditdatamw.zerocell.example.ManualColumnMappingExample,main --> toString,null,);
EndClass 30
StartClass 31
Class(com.creditdatamw.zerocell.example.Patient,N,N,Public);
Attribute(row,int,Private,N,N,);
Attribute(patientID,java.lang.String,Private,N,N,);
Attribute(forename,java.lang.String,Private,N,N,);
Attribute(otherNames,java.lang.String,Private,N,N,);
Attribute(surname,java.lang.String,Private,N,N,);
Attribute(dateOfBirth,java.time.LocalDate,Private,N,N,);
Attribute(dateAdmitted,java.time.LocalDate,Private,N,N,);
Method(getRow,int,Public,N,N);
Method(setRow,void,Public,N,N);
Method(getPatientID,java.lang.String,Public,N,N);
Method(setPatientID,void,Public,N,N);
Method(getForename,java.lang.String,Public,N,N);
Method(setForename,void,Public,N,N);
Method(getOtherNames,java.lang.String,Public,N,N);
Method(setOtherNames,void,Public,N,N);
Method(getSurname,java.lang.String,Public,N,N);
Method(setSurname,void,Public,N,N);
Method(getDateOfBirth,java.time.LocalDate,Public,N,N);
Method(setDateOfBirth,void,Public,N,N);
Method(getDateAdmitted,java.time.LocalDate,Public,N,N);
Method(setDateAdmitted,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(setRow,int,);
Parameter(setPatientID,java.lang.String,);
Parameter(setForename,java.lang.String,);
Parameter(setOtherNames,java.lang.String,);
Parameter(setSurname,java.lang.String,);
Parameter(setDateOfBirth,java.time.LocalDate,);
Parameter(setDateAdmitted,java.time.LocalDate,);
Call(ATTRIBUTE,com.creditdatamw.zerocell.example.Patient,setRow --> row,int,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.example.Patient,setPatientID --> patientID,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.example.Patient,setForename --> forename,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.example.Patient,setOtherNames --> otherNames,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.example.Patient,setSurname --> surname,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.example.Patient,setDateOfBirth --> dateOfBirth,java.time.LocalDate,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.example.Patient,setDateAdmitted --> dateAdmitted,java.time.LocalDate,READ);
EndClass 31
StartClass 32
Class(com.creditdatamw.zerocell.example.Person,N,N,Public);
Attribute(row,int,Private,N,N,);
Attribute(id,java.lang.String,Private,N,N,);
Attribute(firstName,java.lang.String,Private,N,N,);
Attribute(middleName,java.lang.String,Private,N,N,);
Attribute(lastName,java.lang.String,Private,N,N,);
Attribute(dateOfBirth,java.time.LocalDate,Private,N,N,);
Attribute(dateOfRegistration,java.time.LocalDate,Private,N,N,);
Attribute(favouriteNumber,int,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getRow,int,Public,N,N);
Method(setRow,void,Public,N,N);
Method(getId,java.lang.String,Public,N,N);
Method(setId,void,Public,N,N);
Method(getFirstName,java.lang.String,Public,N,N);
Method(setFirstName,void,Public,N,N);
Method(getMiddleName,java.lang.String,Public,N,N);
Method(setMiddleName,void,Public,N,N);
Method(getLastName,java.lang.String,Public,N,N);
Method(setLastName,void,Public,N,N);
Method(getDateOfBirth,java.time.LocalDate,Public,N,N);
Method(setDateOfBirth,void,Public,N,N);
Method(getDateOfRegistration,java.time.LocalDate,Public,N,N);
Method(setDateOfRegistration,void,Public,N,N);
Method(getFavouriteNumber,int,Public,N,N);
Method(setFavouriteNumber,void,Public,N,N);
Parameter(setRow,int,);
Parameter(setId,java.lang.String,);
Parameter(setFirstName,java.lang.String,);
Parameter(setMiddleName,java.lang.String,);
Parameter(setLastName,java.lang.String,);
Parameter(setDateOfBirth,java.time.LocalDate,);
Parameter(setDateOfRegistration,java.time.LocalDate,);
Parameter(setFavouriteNumber,int,);
Call(ATTRIBUTE,com.creditdatamw.zerocell.example.Person,setRow --> row,int,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.example.Person,setId --> id,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.example.Person,setFirstName --> firstName,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.example.Person,setMiddleName --> middleName,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.example.Person,setLastName --> lastName,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.example.Person,setDateOfBirth --> dateOfBirth,java.time.LocalDate,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.example.Person,setDateOfRegistration --> dateOfRegistration,java.time.LocalDate,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.example.Person,setFavouriteNumber --> favouriteNumber,int,READ);
EndClass 32
StartClass 33
Class(com.creditdatamw.zerocell.processor.spec.CellMethodSpec,N,N,Public);
Method(build,com.squareup.javapoet.MethodSpec,Public,Y,N);
Method(converterStatementFor,void,Private,Y,N);
Method(converterStatementFor$2,java.lang.String,Public,Y,N);
Method(beanSetterPropertyName,java.lang.String,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(build,java.util.List,);
Parameter(converterStatementFor,com.creditdatamw.zerocell.processor.spec.CodeBlock.Builder,);
Parameter(converterStatementFor,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,);
Parameter(converterStatementFor,java.lang.String,);
Parameter(converterStatementFor$2,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,);
Parameter(beanSetterPropertyName,java.lang.String,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> builder,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> getLogger,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> info,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> size,java.util.List,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> forEach,java.util.List,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> getIndex,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> getFieldName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> beanSetterPropertyName,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> beginControlFlow,com.creditdatamw.zerocell.processor.spec.CodeBlock.Builder,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> addStatement,com.creditdatamw.zerocell.processor.spec.CodeBlock.Builder,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> getName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> converterStatementFor,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> addStatement,com.creditdatamw.zerocell.processor.spec.CodeBlock.Builder,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> endControlFlow,com.creditdatamw.zerocell.processor.spec.CodeBlock.Builder,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> methodBuilder,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> addAnnotation,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> addModifiers,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> addParameter,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> addParameter,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> addParameter,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> addComment,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> beginControlFlow,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> endControlFlow,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> addCode,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> build,com.creditdatamw.zerocell.processor.spec.CodeBlock.Builder,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,build --> build,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor --> getName,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor --> format,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor --> getConverterClass,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor --> builder,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor --> beginControlFlow,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor --> nextControlFlow,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor --> endControlFlow,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor --> build,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor --> equals,java.lang.String,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor --> getTypeName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor --> addStatement,com.creditdatamw.zerocell.processor.spec.CodeBlock.Builder,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor --> converterStatementFor,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor --> add,com.creditdatamw.zerocell.processor.spec.CodeBlock.Builder,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> format,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> getType,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> equals,java.lang.String,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> getTypeName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> equals,java.lang.String,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> getTypeName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> equals,java.lang.String,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> getTypeName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> equals,java.lang.String,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> getTypeName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> equals,java.lang.String,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> getTypeName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> equals,java.lang.String,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> getTypeName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> equals,java.lang.String,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> getTypeName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> equals,java.lang.String,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> getTypeName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> equals,java.lang.String,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> getTypeName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> equals,java.lang.String,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> getTypeName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> equals,java.lang.String,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> getTypeName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> equals,java.lang.String,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> getTypeName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> equals,java.lang.String,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,converterStatementFor$2 --> getTypeName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,beanSetterPropertyName --> valueOf,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,beanSetterPropertyName --> charAt,java.lang.String,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,beanSetterPropertyName --> toUpperCase,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,beanSetterPropertyName --> concat,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.CellMethodSpec,beanSetterPropertyName --> substring,java.lang.String,);
EndClass 33
StartClass 34
Class(com.creditdatamw.zerocell.processor.spec.ColumnInfoType,N,N,Public);
Attribute(name,java.lang.String,Private,N,N,);
Attribute(fieldName,java.lang.String,Private,N,N,);
Attribute(index,int,Private,N,N,);
Attribute(dataFormat,java.lang.String,Private,N,N,);
Attribute(type,javax.lang.model.type.TypeMirror,Private,N,N,);
Attribute(converterClass,javax.lang.model.type.TypeMirror,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(setName,void,Public,N,N);
Method(getFieldName,java.lang.String,Public,N,N);
Method(setFieldName,void,Public,N,N);
Method(getIndex,int,Public,N,N);
Method(setIndex,void,Public,N,N);
Method(getDataFormat,java.lang.String,Public,N,N);
Method(setDataFormat,void,Public,N,N);
Method(getType,javax.lang.model.type.TypeMirror,Public,N,N);
Method(setType,void,Public,N,N);
Method(getConverterClass,javax.lang.model.type.TypeMirror,Public,N,N);
Method(setConverterClass,void,Public,N,N);
Method(columnsOf,java.util.List,Public,Y,N);
Parameter(<init>,java.lang.String,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,int,);
Parameter(<init>,java.lang.String,);
Parameter(<init>,javax.lang.model.type.TypeMirror,);
Parameter(<init>,javax.lang.model.type.TypeMirror,);
Parameter(setName,java.lang.String,);
Parameter(setFieldName,java.lang.String,);
Parameter(setIndex,int,);
Parameter(setDataFormat,java.lang.String,);
Parameter(setType,javax.lang.model.type.TypeMirror,);
Parameter(setConverterClass,javax.lang.model.type.TypeMirror,);
Parameter(columnsOf,javax.lang.model.element.TypeElement,);
Call(ATTRIBUTE,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,<init> --> name,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,<init> --> fieldName,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,<init> --> index,int,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,<init> --> dataFormat,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,<init> --> type,javax.lang.model.type.TypeMirror,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,<init> --> converterClass,javax.lang.model.type.TypeMirror,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,setName --> name,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,setFieldName --> fieldName,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,setIndex --> index,int,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,setDataFormat --> dataFormat,java.lang.String,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,setType --> type,javax.lang.model.type.TypeMirror,READ);
Call(ATTRIBUTE,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,setConverterClass --> converterClass,javax.lang.model.type.TypeMirror,READ);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,columnsOf --> getEnclosedElements,javax.lang.model.element.TypeElement,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,columnsOf --> getKind,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,columnsOf --> isField,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,columnsOf --> getAnnotation,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,columnsOf --> isNull,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,columnsOf --> asType,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,columnsOf --> getTypeMirror,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,columnsOf --> convertorClass,com.creditdatamw.zerocell.annotation.Column,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,columnsOf --> getTypeMirror,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,columnsOf --> add,java.util.List,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,columnsOf --> name,com.creditdatamw.zerocell.annotation.Column,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,columnsOf --> getSimpleName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,columnsOf --> toString,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,columnsOf --> index,com.creditdatamw.zerocell.annotation.Column,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,columnsOf --> dataFormat,com.creditdatamw.zerocell.annotation.Column,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,columnsOf --> size,java.util.List,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,columnsOf --> getIndex,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,columnsOf --> format,null,);
Call(ATTRIBUTE,com.creditdatamw.zerocell.processor.spec.ColumnInfoType,columnsOf --> index,int,WRITE);
EndClass 34
StartClass 35
Class(com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,N,N,Public);
Attribute(typeElement,javax.lang.model.element.TypeElement,Private,N,Y,);
Attribute(readerClassName,java.util.String,Private,N,Y,);
Attribute(INVALID_CHARS_REGEX,java.util.String,Private,Y,Y,);
Method(<init>,void,Public,N,N);
Method(build,java.util.JavaFile,Public,N,N);
Method(assertReaderName,void,Private,N,N);
Method(checkRowNumberField,java.util.Optional,Private,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,javax.lang.model.element.TypeElement,);
Parameter(<init>,java.util.Optional,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,<init> --> requireNonNull,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,<init> --> orElse,java.util.Optional,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,<init> --> format,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,<init> --> getSimpleName,javax.lang.model.element.TypeElement,);
Call(ATTRIBUTE,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,<init> --> typeElement,javax.lang.model.element.TypeElement,READ);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> assertReaderName,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> getLogger,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> info,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> get,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> get,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> get,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> get,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> get,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> get,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> get,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> get,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> methodBuilder,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addModifiers,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> build,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> methodBuilder,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addModifiers,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addAnnotation,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addParameter,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addParameter,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> returns,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> build,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> methodBuilder,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addAnnotation,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addModifiers,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addParameter,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addComment,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> beginControlFlow,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> endControlFlow,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> checkRowNumberField,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> ifPresent,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addStatement,java.util.MethodSpec.MethodSpec.Builder,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> build,java.util.MethodSpec.MethodSpec.Builder,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> methodBuilder,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addAnnotation,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addModifiers,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addParameter,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> beginControlFlow,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> endControlFlow,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> build,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> methodBuilder,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addAnnotation,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addModifiers,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addParameter,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addParameter,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addParameter,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addComment,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> build,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> columnsOf,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> forEach,java.util.List,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> getIndex,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> getName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> format,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> getIndex,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> toUpperCase,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> add,java.util.List,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> builder,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> initializer,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> build,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> constructorBuilder,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addModifiers,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> build,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> build,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> methodBuilder,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addParameter,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addParameter,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> beginControlFlow,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> beginControlFlow,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addStatement,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> endControlFlow,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> endControlFlow,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> build,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> classBuilder,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addModifiers,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addSuperinterface,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addField,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> builder,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> initializer,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> getQualifiedName,javax.lang.model.element.TypeElement,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> build,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addFields,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addField,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> builder,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> build,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addField,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> builder,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> build,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addField,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> builder,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> build,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addField,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> builder,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> build,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addField,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> builder,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> build,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addField,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> builder,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> build,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addMethod,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addMethod,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addMethod,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addMethod,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addMethod,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addMethod,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addMethod,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addMethod,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> build,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> builder,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> packageName,java.util.ClassName,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> addStaticImport,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> build,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> getLogger,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,build --> info,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,assertReaderName --> matches,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,checkRowNumberField --> getEnclosedElements,javax.lang.model.element.TypeElement,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,checkRowNumberField --> getKind,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,checkRowNumberField --> isField,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,checkRowNumberField --> getAnnotation,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,checkRowNumberField --> isNull,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,checkRowNumberField --> asType,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,checkRowNumberField --> getTypeMirror,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,checkRowNumberField --> format,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,checkRowNumberField --> getSimpleName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,checkRowNumberField --> toString,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,checkRowNumberField --> equals,java.util.String,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,checkRowNumberField --> getTypeName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,checkRowNumberField --> equals,java.util.String,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,checkRowNumberField --> getTypeName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,checkRowNumberField --> equals,java.util.String,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,checkRowNumberField --> getTypeName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,checkRowNumberField --> equals,java.util.String,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,checkRowNumberField --> getTypeName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,checkRowNumberField --> of,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,checkRowNumberField --> beanSetterPropertyName,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,checkRowNumberField --> format,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.spec.ReaderTypeSpec,checkRowNumberField --> empty,null,);
EndClass 35
StartClass 36
Class(com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,N,N,Public);
Attribute(typeUtils,javax.lang.model.util.Types,Private,N,N,);
Attribute(elementUtils,javax.lang.model.util.Elements,Private,N,N,);
Attribute(filer,javax.annotation.processing.Filer,Private,N,N,);
Attribute(messager,javax.annotation.processing.Messager,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(getSupportedAnnotationTypes,java.util.Set,Public,N,N);
Method(getSupportedSourceVersion,javax.lang.model.SourceVersion,Public,N,N);
Method(init,void,Public,N,N);
Method(process,boolean,Public,N,N);
Parameter(init,javax.annotation.processing.ProcessingEnvironment,);
Parameter(process,java.util.Set,);
Parameter(process,javax.annotation.processing.RoundEnvironment,);
SuperClass(javax.annotation.processing.AbstractProcessor);
Generalization(javax.annotation.processing.AbstractProcessor);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,getSupportedAnnotationTypes --> add,java.util.Set,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,getSupportedAnnotationTypes --> getCanonicalName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,getSupportedAnnotationTypes --> add,java.util.Set,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,getSupportedAnnotationTypes --> getCanonicalName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,getSupportedAnnotationTypes --> add,java.util.Set,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,getSupportedAnnotationTypes --> getCanonicalName,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,getSupportedSourceVersion --> latestSupported,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,init --> init,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,init --> getTypeUtils,javax.annotation.processing.ProcessingEnvironment,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,init --> getElementUtils,javax.annotation.processing.ProcessingEnvironment,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,init --> getFiler,javax.annotation.processing.ProcessingEnvironment,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,init --> getMessager,javax.annotation.processing.ProcessingEnvironment,);
Call(ATTRIBUTE,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,init --> typeUtils,javax.lang.model.util.Types,WRITE);
Call(ATTRIBUTE,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,init --> elementUtils,javax.lang.model.util.Elements,WRITE);
Call(ATTRIBUTE,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,init --> filer,javax.annotation.processing.Filer,WRITE);
Call(ATTRIBUTE,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,init --> messager,javax.annotation.processing.Messager,WRITE);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,process --> getElementsAnnotatedWith,javax.annotation.processing.RoundEnvironment,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,process --> getKind,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,process --> errorRaised,javax.annotation.processing.RoundEnvironment,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,process --> getAnnotation,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,process --> empty,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,process --> value,com.creditdatamw.zerocell.annotation.ZerocellReaderBuilder,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,process --> equals,javax.annotation.processing.String,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,process --> isEmpty,javax.annotation.processing.String,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,process --> of,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,process --> build,javax.annotation.processing.ReaderTypeSpec,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,process --> writeTo,com.squareup.javapoet.JavaFile,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,process --> printStackTrace,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,process --> printMessage,javax.annotation.processing.Messager,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,process --> format,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,process --> getQualifiedName,javax.lang.model.element.TypeElement,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,process --> toString,javax.lang.model.element.TypeElement,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,process --> getMessage,null,);
Call(METHOD,com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor,process --> errorRaised,javax.annotation.processing.RoundEnvironment,);
EndClass 36
StartClass 37
Class(javax.annotation.processing.AbstractProcessor,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(com.creditdatamw.zerocell.processor.ZeroCellAnnotationProcessor);
EndClass 37
