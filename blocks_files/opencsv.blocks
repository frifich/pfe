StartClass 1
Class(default.AddressExample,N,N,Public);
Attribute(ADDRESS_FILE,java.lang.String,Private,Y,Y,);
Method(main,void,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(main,java.lang.String[],);
Call(METHOD,default.AddressExample,main --> readNext,au.com.bytecode.opencsv.CSVReader,);
Call(METHOD,default.AddressExample,main --> println,null,);
Call(METHOD,default.AddressExample,main --> readAll,au.com.bytecode.opencsv.CSVReader,);
Call(METHOD,default.AddressExample,main --> writeAll,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,default.AddressExample,main --> println,null,);
Call(METHOD,default.AddressExample,main --> println,null,);
Call(METHOD,default.AddressExample,main --> toString,java.io.StringWriter,);
EndClass 1
StartClass 2
Class(au.com.bytecode.opencsv.CSVReader,N,N,Public);
Attribute(br,java.io.BufferedReader,Private,N,N,);
Attribute(hasNext,boolean,Private,N,N,);
Attribute(parser,au.com.bytecode.opencsv.CSVParser,Public,N,N,);
Attribute(skipLines,int,Public,N,N,);
Attribute(linesSkiped,boolean,Private,N,N,);
Attribute(DEFAULT_SKIP_LINES,int,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(<init>$5,void,Public,N,N);
Method(<init>$6,void,Public,N,N);
Method(<init>$7,void,Public,N,N);
Method(<init>$8,void,Public,N,N);
Method(<init>$9,void,Public,N,N);
Method(<init>$10,void,Public,N,N);
Method(readAll,au.com.bytecode.opencsv.List,Public,N,N);
Method(readNext,java.lang.String[],Public,N,N);
Method(getNextLine,java.lang.String,Private,N,N);
Method(close,void,Public,N,N);
Method(iterator,au.com.bytecode.opencsv.Iterator,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,java.io.Reader,);
Parameter(<init>$2,java.io.Reader,);
Parameter(<init>$2,au.com.bytecode.opencsv.char,);
Parameter(<init>$3,java.io.Reader,);
Parameter(<init>$3,au.com.bytecode.opencsv.char,);
Parameter(<init>$3,au.com.bytecode.opencsv.char,);
Parameter(<init>$4,java.io.Reader,);
Parameter(<init>$4,au.com.bytecode.opencsv.char,);
Parameter(<init>$4,au.com.bytecode.opencsv.char,);
Parameter(<init>$4,boolean,);
Parameter(<init>$5,java.io.Reader,);
Parameter(<init>$5,au.com.bytecode.opencsv.char,);
Parameter(<init>$5,au.com.bytecode.opencsv.char,);
Parameter(<init>$5,au.com.bytecode.opencsv.char,);
Parameter(<init>$6,java.io.Reader,);
Parameter(<init>$6,au.com.bytecode.opencsv.char,);
Parameter(<init>$6,au.com.bytecode.opencsv.char,);
Parameter(<init>$6,int,);
Parameter(<init>$7,java.io.Reader,);
Parameter(<init>$7,au.com.bytecode.opencsv.char,);
Parameter(<init>$7,au.com.bytecode.opencsv.char,);
Parameter(<init>$7,au.com.bytecode.opencsv.char,);
Parameter(<init>$7,int,);
Parameter(<init>$8,java.io.Reader,);
Parameter(<init>$8,au.com.bytecode.opencsv.char,);
Parameter(<init>$8,au.com.bytecode.opencsv.char,);
Parameter(<init>$8,au.com.bytecode.opencsv.char,);
Parameter(<init>$8,int,);
Parameter(<init>$8,boolean,);
Parameter(<init>$9,java.io.Reader,);
Parameter(<init>$9,au.com.bytecode.opencsv.char,);
Parameter(<init>$9,au.com.bytecode.opencsv.char,);
Parameter(<init>$9,au.com.bytecode.opencsv.char,);
Parameter(<init>$9,int,);
Parameter(<init>$9,boolean,);
Parameter(<init>$9,boolean,);
Parameter(<init>$10,java.io.Reader,);
Parameter(<init>$10,int,);
Parameter(<init>$10,au.com.bytecode.opencsv.CSVParser,);
Realization(java.io.Closeable);
Realization(au.com.bytecode.opencsv.Iterable);
Composition(au.com.bytecode.opencsv.CSVParser);
Call(METHOD,au.com.bytecode.opencsv.CSVReader,<init> --> this,au.com.bytecode.opencsv.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReader,<init>$2 --> this,au.com.bytecode.opencsv.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReader,<init>$3 --> this,au.com.bytecode.opencsv.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReader,<init>$4 --> this,au.com.bytecode.opencsv.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReader,<init>$5 --> this,au.com.bytecode.opencsv.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReader,<init>$6 --> this,au.com.bytecode.opencsv.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReader,<init>$7 --> this,au.com.bytecode.opencsv.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReader,<init>$8 --> this,au.com.bytecode.opencsv.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReader,<init>$9 --> <init>$10,au.com.bytecode.opencsv.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReader,readAll --> readNext,au.com.bytecode.opencsv.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReader,readAll --> add,au.com.bytecode.opencsv.List,);
Call(METHOD,au.com.bytecode.opencsv.CSVReader,readNext --> getNextLine,au.com.bytecode.opencsv.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReader,readNext --> parseLineMulti,au.com.bytecode.opencsv.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVReader,readNext --> arraycopy,null,);
Call(METHOD,au.com.bytecode.opencsv.CSVReader,readNext --> arraycopy,null,);
Call(METHOD,au.com.bytecode.opencsv.CSVReader,readNext --> isPending,au.com.bytecode.opencsv.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVReader,getNextLine --> readLine,java.io.BufferedReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReader,getNextLine --> readLine,java.io.BufferedReader,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVReader,getNextLine --> hasNext,boolean,WRITE);
Call(METHOD,au.com.bytecode.opencsv.CSVReader,close --> close,java.io.BufferedReader,);
EndClass 2
StartClass 3
Class(au.com.bytecode.opencsv.CSVParser,N,N,Public);
Attribute(separator,au.com.bytecode.opencsv.char,Public,N,Y,);
Attribute(quotechar,au.com.bytecode.opencsv.char,Public,N,Y,);
Attribute(escape,au.com.bytecode.opencsv.char,Public,N,Y,);
Attribute(strictQuotes,boolean,Public,N,Y,);
Attribute(pending,java.lang.String,Private,N,N,);
Attribute(inField,boolean,Private,N,N,);
Attribute(ignoreLeadingWhiteSpace,boolean,Public,N,Y,);
Attribute(ignoreQuotations,boolean,Public,N,Y,);
Attribute(DEFAULT_SEPARATOR,au.com.bytecode.opencsv.char,Public,Y,Y,);
Attribute(INITIAL_READ_SIZE,int,Public,Y,Y,);
Attribute(DEFAULT_QUOTE_CHARACTER,au.com.bytecode.opencsv.char,Public,Y,Y,);
Attribute(DEFAULT_ESCAPE_CHARACTER,au.com.bytecode.opencsv.char,Public,Y,Y,);
Attribute(DEFAULT_STRICT_QUOTES,boolean,Public,Y,Y,);
Attribute(DEFAULT_IGNORE_LEADING_WHITESPACE,boolean,Public,Y,Y,);
Attribute(DEFAULT_IGNORE_QUOTATIONS,boolean,Public,Y,Y,);
Attribute(NULL_CHARACTER,au.com.bytecode.opencsv.char,Public,Y,Y,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(<init>$5,void,Public,N,N);
Method(<init>$6,void,Public,N,N);
Method(<init>$7,void,Public,N,N);
Method(anyCharactersAreTheSame,boolean,Private,N,N);
Method(isSameCharacter,boolean,Private,N,N);
Method(isPending,boolean,Public,N,N);
Method(parseLineMulti,java.lang.String[],Public,N,N);
Method(parseLine,java.lang.String[],Public,N,N);
Method(parseLine$2,java.lang.String[],Private,N,N);
Method(isNextCharacterEscapedQuote,boolean,Private,N,N);
Method(isNextCharacterEscapable,boolean,Protected,N,N);
Method(isAllWhiteSpace,boolean,Protected,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>$2,au.com.bytecode.opencsv.char,);
Parameter(<init>$3,au.com.bytecode.opencsv.char,);
Parameter(<init>$3,au.com.bytecode.opencsv.char,);
Parameter(<init>$4,au.com.bytecode.opencsv.char,);
Parameter(<init>$4,au.com.bytecode.opencsv.char,);
Parameter(<init>$4,au.com.bytecode.opencsv.char,);
Parameter(<init>$5,au.com.bytecode.opencsv.char,);
Parameter(<init>$5,au.com.bytecode.opencsv.char,);
Parameter(<init>$5,au.com.bytecode.opencsv.char,);
Parameter(<init>$5,boolean,);
Parameter(<init>$6,au.com.bytecode.opencsv.char,);
Parameter(<init>$6,au.com.bytecode.opencsv.char,);
Parameter(<init>$6,au.com.bytecode.opencsv.char,);
Parameter(<init>$6,boolean,);
Parameter(<init>$6,boolean,);
Parameter(<init>$7,au.com.bytecode.opencsv.char,);
Parameter(<init>$7,au.com.bytecode.opencsv.char,);
Parameter(<init>$7,au.com.bytecode.opencsv.char,);
Parameter(<init>$7,boolean,);
Parameter(<init>$7,boolean,);
Parameter(<init>$7,boolean,);
Parameter(anyCharactersAreTheSame,au.com.bytecode.opencsv.char,);
Parameter(anyCharactersAreTheSame,au.com.bytecode.opencsv.char,);
Parameter(anyCharactersAreTheSame,au.com.bytecode.opencsv.char,);
Parameter(isSameCharacter,au.com.bytecode.opencsv.char,);
Parameter(isSameCharacter,au.com.bytecode.opencsv.char,);
Parameter(parseLineMulti,java.lang.String,);
Parameter(parseLine,java.lang.String,);
Parameter(parseLine$2,java.lang.String,);
Parameter(parseLine$2,boolean,);
Parameter(isNextCharacterEscapedQuote,java.lang.String,);
Parameter(isNextCharacterEscapedQuote,boolean,);
Parameter(isNextCharacterEscapedQuote,int,);
Parameter(isNextCharacterEscapable,java.lang.String,);
Parameter(isNextCharacterEscapable,boolean,);
Parameter(isNextCharacterEscapable,int,);
Parameter(isAllWhiteSpace,java.lang.CharSequence,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,<init> --> <init>$4,au.com.bytecode.opencsv.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,<init>$2 --> <init>$4,au.com.bytecode.opencsv.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,<init>$3 --> <init>$4,au.com.bytecode.opencsv.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,<init>$4 --> <init>$5,au.com.bytecode.opencsv.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,<init>$5 --> <init>$6,au.com.bytecode.opencsv.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,<init>$6 --> <init>$7,au.com.bytecode.opencsv.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,<init>$7 --> anyCharactersAreTheSame,au.com.bytecode.opencsv.CSVParser,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParser,<init>$7 --> separator,au.com.bytecode.opencsv.char,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParser,<init>$7 --> quotechar,au.com.bytecode.opencsv.char,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParser,<init>$7 --> escape,au.com.bytecode.opencsv.char,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParser,<init>$7 --> strictQuotes,boolean,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParser,<init>$7 --> ignoreLeadingWhiteSpace,boolean,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParser,<init>$7 --> ignoreQuotations,boolean,READ);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,anyCharactersAreTheSame --> isSameCharacter,au.com.bytecode.opencsv.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,anyCharactersAreTheSame --> isSameCharacter,au.com.bytecode.opencsv.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,anyCharactersAreTheSame --> isSameCharacter,au.com.bytecode.opencsv.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLineMulti --> parseLine,au.com.bytecode.opencsv.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine --> parseLine,au.com.bytecode.opencsv.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> append,au.com.bytecode.opencsv.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> length,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> charAt,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> isNextCharacterEscapable,au.com.bytecode.opencsv.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> append,au.com.bytecode.opencsv.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> charAt,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> isNextCharacterEscapedQuote,au.com.bytecode.opencsv.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> append,au.com.bytecode.opencsv.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> charAt,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> charAt,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> length,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> charAt,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> length,au.com.bytecode.opencsv.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> isAllWhiteSpace,au.com.bytecode.opencsv.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> append,au.com.bytecode.opencsv.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> add,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> toString,au.com.bytecode.opencsv.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> append,au.com.bytecode.opencsv.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> append,au.com.bytecode.opencsv.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> toString,au.com.bytecode.opencsv.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> add,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> toString,au.com.bytecode.opencsv.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> toArray,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> size,java.util.List,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> pending,java.lang.String,WRITE);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> pending,java.lang.String,WRITE);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> pending,java.lang.String,WRITE);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> inField,boolean,WRITE);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> inField,boolean,WRITE);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> inField,boolean,WRITE);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParser,parseLine$2 --> pending,java.lang.String,WRITE);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,isNextCharacterEscapedQuote --> length,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,isNextCharacterEscapedQuote --> charAt,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,isNextCharacterEscapable --> length,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,isNextCharacterEscapable --> charAt,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,isNextCharacterEscapable --> charAt,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,isAllWhiteSpace --> length,java.lang.CharSequence,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,isAllWhiteSpace --> charAt,java.lang.CharSequence,);
Call(METHOD,au.com.bytecode.opencsv.CSVParser,isAllWhiteSpace --> isWhitespace,null,);
EndClass 3
StartClass 4
Class(java.io.Closeable,Y,Y,Public);
EndClass 4
StartClass 5
Class(au.com.bytecode.opencsv.Iterable,Y,Y,Public);
EndClass 5
StartClass 6
Class(au.com.bytecode.opencsv.CSVWriter,N,N,Public);
Attribute(INITIAL_STRING_SIZE,int,Public,Y,Y,);
Attribute(rawWriter,java.io.Writer,Private,N,N,);
Attribute(pw,java.io.PrintWriter,Private,N,N,);
Attribute(separator,java.io.char,Private,N,N,);
Attribute(quotechar,java.io.char,Private,N,N,);
Attribute(escapechar,java.io.char,Private,N,N,);
Attribute(lineEnd,java.io.String,Private,N,N,);
Attribute(DEFAULT_ESCAPE_CHARACTER,java.io.char,Public,Y,Y,);
Attribute(DEFAULT_SEPARATOR,java.io.char,Public,Y,Y,);
Attribute(DEFAULT_QUOTE_CHARACTER,java.io.char,Public,Y,Y,);
Attribute(NO_QUOTE_CHARACTER,java.io.char,Public,Y,Y,);
Attribute(NO_ESCAPE_CHARACTER,java.io.char,Public,Y,Y,);
Attribute(DEFAULT_LINE_END,java.io.String,Public,Y,Y,);
Attribute(resultService,java.io.ResultSetHelper,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(<init>$2,void,Public,N,N);
Method(<init>$3,void,Public,N,N);
Method(<init>$4,void,Public,N,N);
Method(<init>$5,void,Public,N,N);
Method(<init>$6,void,Public,N,N);
Method(writeAll,void,Public,N,N);
Method(writeAll$2,void,Public,N,N);
Method(writeColumnNames,void,Protected,N,N);
Method(writeAll$3,void,Public,N,N);
Method(writeAll$4,void,Public,N,N);
Method(writeNext,void,Public,N,N);
Method(writeNext$2,void,Public,N,N);
Method(stringContainsSpecialCharacters,boolean,Private,N,N);
Method(processLine,java.io.StringBuilder,Protected,N,N);
Method(flush,void,Public,N,N);
Method(close,void,Public,N,N);
Method(checkError,boolean,Public,N,N);
Method(setResultService,void,Public,N,N);
Method(flushQuietly,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Parameter(<init>,java.io.Writer,);
Parameter(<init>$2,java.io.Writer,);
Parameter(<init>$2,java.io.char,);
Parameter(<init>$3,java.io.Writer,);
Parameter(<init>$3,java.io.char,);
Parameter(<init>$3,java.io.char,);
Parameter(<init>$4,java.io.Writer,);
Parameter(<init>$4,java.io.char,);
Parameter(<init>$4,java.io.char,);
Parameter(<init>$4,java.io.char,);
Parameter(<init>$5,java.io.Writer,);
Parameter(<init>$5,java.io.char,);
Parameter(<init>$5,java.io.char,);
Parameter(<init>$5,java.io.String,);
Parameter(<init>$6,java.io.Writer,);
Parameter(<init>$6,java.io.char,);
Parameter(<init>$6,java.io.char,);
Parameter(<init>$6,java.io.char,);
Parameter(<init>$6,java.io.String,);
Parameter(writeAll,java.io.List,);
Parameter(writeAll,boolean,);
Parameter(writeAll$2,java.io.List,);
Parameter(writeColumnNames,java.sql.ResultSet,);
Parameter(writeAll$3,java.io.java.sql.java.sql.ResultSet,);
Parameter(writeAll$3,boolean,);
Parameter(writeAll$4,java.io.java.sql.java.sql.ResultSet,);
Parameter(writeAll$4,boolean,);
Parameter(writeAll$4,boolean,);
Parameter(writeNext,java.io.String[],);
Parameter(writeNext,boolean,);
Parameter(writeNext$2,java.io.String[],);
Parameter(stringContainsSpecialCharacters,java.io.String,);
Parameter(processLine,java.io.String,);
Parameter(setResultService,java.io.ResultSetHelper,);
SubClass(au.com.bytecode.opencsv.CSVWriterExceptionThrower);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,<init> --> <init>$2,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,<init>$2 --> <init>$3,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,<init>$3 --> <init>$4,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,<init>$4 --> <init>$6,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,<init>$5 --> <init>$6,au.com.bytecode.opencsv.CSVWriter,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVWriter,<init>$6 --> separator,java.io.char,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVWriter,<init>$6 --> quotechar,java.io.char,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVWriter,<init>$6 --> escapechar,java.io.char,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVWriter,<init>$6 --> lineEnd,java.io.String,READ);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,writeAll --> writeNext,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,writeAll$2 --> writeNext,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,writeColumnNames --> writeNext,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,writeColumnNames --> getColumnNames,java.io.ResultSetHelper,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,writeAll$3 --> writeAll,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,writeAll$4 --> writeColumnNames,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,writeAll$4 --> next,java.io.java.sql.java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,writeAll$4 --> writeNext,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,writeAll$4 --> getColumnValues,java.io.ResultSetHelper,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,writeNext --> append,java.io.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,writeNext --> stringContainsSpecialCharacters,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,writeNext --> append,java.io.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,writeNext --> append,java.io.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,writeNext --> processLine,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,writeNext --> append,java.io.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,writeNext --> append,java.io.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,writeNext --> append,java.io.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,writeNext --> write,java.io.PrintWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,writeNext --> toString,java.io.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,writeNext$2 --> writeNext,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,stringContainsSpecialCharacters --> indexOf,java.io.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,stringContainsSpecialCharacters --> indexOf,java.io.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,stringContainsSpecialCharacters --> indexOf,java.io.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,stringContainsSpecialCharacters --> indexOf,java.io.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,stringContainsSpecialCharacters --> indexOf,java.io.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,processLine --> length,java.io.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,processLine --> charAt,java.io.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,processLine --> append,java.io.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,processLine --> append,java.io.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,processLine --> append,java.io.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,processLine --> append,java.io.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,processLine --> append,java.io.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,flush --> flush,java.io.PrintWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,close --> flush,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,close --> close,java.io.PrintWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,close --> close,java.io.Writer,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,checkError --> checkError,java.io.PrintWriter,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVWriter,setResultService --> resultService,java.io.ResultSetHelper,READ);
Call(METHOD,au.com.bytecode.opencsv.CSVWriter,flushQuietly --> flush,au.com.bytecode.opencsv.CSVWriter,);
EndClass 6
StartClass 7
Class(au.com.bytecode.opencsv.CSVWriterExceptionThrower,N,N,Public);
Method(<init>,void,Public,N,N);
Method(flush,void,Public,N,N);
Parameter(<init>,java.io.Writer,);
SuperClass(au.com.bytecode.opencsv.CSVWriter);
Generalization(au.com.bytecode.opencsv.CSVWriter);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterExceptionThrower,<init> --> <init>,au.com.bytecode.opencsv.CSVWriter,);
EndClass 7
StartClass 8
Class(au.com.bytecode.opencsv.bean.BeanToCsv,N,N,Public);
Method(<init>,void,Public,N,N);
Method(write,boolean,Public,N,N);
Method(write$2,boolean,Public,N,N);
Method(processHeader,java.lang.String[],Protected,N,N);
Method(processObject,java.lang.String[],Protected,N,N);
Method(findGetters,java.util.List,Private,N,N);
Parameter(write,au.com.bytecode.opencsv.bean.MappingStrategy,);
Parameter(write,java.io.Writer,);
Parameter(write,java.util.List,);
Parameter(write$2,au.com.bytecode.opencsv.bean.MappingStrategy,);
Parameter(write$2,au.com.bytecode.opencsv.CSVWriter,);
Parameter(write$2,java.util.List,);
Parameter(processHeader,au.com.bytecode.opencsv.bean.MappingStrategy,);
Parameter(processObject,java.util.List,);
Parameter(processObject,java.lang.Object,);
Parameter(findGetters,au.com.bytecode.opencsv.bean.MappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsv,write --> write,au.com.bytecode.opencsv.bean.BeanToCsv,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsv,write$2 --> isEmpty,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsv,write$2 --> writeNext,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsv,write$2 --> processHeader,au.com.bytecode.opencsv.bean.BeanToCsv,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsv,write$2 --> findGetters,au.com.bytecode.opencsv.bean.BeanToCsv,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsv,write$2 --> processObject,au.com.bytecode.opencsv.bean.BeanToCsv,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsv,write$2 --> writeNext,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsv,processHeader --> findDescriptor,au.com.bytecode.opencsv.bean.MappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsv,processHeader --> add,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsv,processHeader --> getName,java.beans.PropertyDescriptor,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsv,processHeader --> findDescriptor,au.com.bytecode.opencsv.bean.MappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsv,processHeader --> toArray,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsv,processObject --> invoke,null,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsv,processObject --> add,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsv,processObject --> add,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsv,processObject --> toString,java.lang.Object,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsv,processObject --> toArray,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsv,findGetters --> findDescriptor,au.com.bytecode.opencsv.bean.MappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsv,findGetters --> add,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsv,findGetters --> getReadMethod,java.beans.PropertyDescriptor,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsv,findGetters --> findDescriptor,au.com.bytecode.opencsv.bean.MappingStrategy,);
EndClass 8
StartClass 9
Class(au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategy,N,N,Public);
Attribute(columnMapping,java.lang.String[],Private,N,N,);
Method(captureHeader,void,Public,N,N);
Method(getColumnName,java.lang.String,Protected,N,N);
Method(getColumnMapping,java.lang.String[],Public,N,N);
Method(setColumnMapping,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(captureHeader,au.com.bytecode.opencsv.CSVReader,);
Parameter(getColumnName,int,);
SuperClass(au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy);
Generalization(au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategy,getColumnMapping --> clone,java.lang.String[],);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategy,setColumnMapping --> clone,java.lang.String[],);
Call(ATTRIBUTE,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategy,setColumnMapping --> columnMapping,java.lang.String[],READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategy,setColumnMapping --> columnMapping,java.lang.String[],READ);
EndClass 9
StartClass 10
Class(au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,N,N,Public);
Method(<init>,void,Public,N,N);
SubClass(au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategy);
SubClass(au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategy);
EndClass 10
StartClass 11
Class(au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategy,N,N,Public);
Attribute(columnMapping,java.util.Map,Private,N,N,);
Method(getColumnName,java.lang.String,Protected,N,N);
Method(getColumnMapping,java.util.Map,Public,N,N);
Method(setColumnMapping,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(getColumnName,int,);
Parameter(setColumnMapping,java.util.Map,);
SuperClass(au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy);
Generalization(au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategy,getColumnName --> get,java.util.Map,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategy,getColumnName --> toUpperCase,null,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategy,setColumnMapping --> keySet,java.util.Map,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategy,setColumnMapping --> put,null,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategy,setColumnMapping --> toUpperCase,null,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategy,setColumnMapping --> get,java.util.Map,);
EndClass 11
StartClass 12
Class(au.com.bytecode.opencsv.bean.CsvToBean,N,N,Public);
Attribute(editorMap,java.util.Map,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(parse,java.util.List,Public,N,N);
Method(parse$2,java.util.List,Public,N,N);
Method(processLine,au.com.bytecode.opencsv.bean.T,Protected,N,N);
Method(checkForTrim,java.lang.String,Private,N,N);
Method(trimmableProperty,boolean,Private,N,N);
Method(convertValue,java.lang.Object,Protected,N,N);
Method(getPropertyEditorValue,java.beans.PropertyEditor,Private,N,N);
Method(addEditorToMap,void,Private,N,N);
Method(getPropertyEditor,java.beans.PropertyEditor,Protected,N,N);
Parameter(parse,au.com.bytecode.opencsv.bean.MappingStrategy,);
Parameter(parse,java.io.Reader,);
Parameter(parse$2,au.com.bytecode.opencsv.bean.MappingStrategy,);
Parameter(parse$2,au.com.bytecode.opencsv.CSVReader,);
Parameter(processLine,au.com.bytecode.opencsv.bean.MappingStrategy,);
Parameter(processLine,java.lang.String[],);
Parameter(checkForTrim,java.lang.String,);
Parameter(checkForTrim,java.beans.PropertyDescriptor,);
Parameter(trimmableProperty,java.beans.PropertyDescriptor,);
Parameter(convertValue,java.lang.String,);
Parameter(convertValue,java.beans.PropertyDescriptor,);
Parameter(getPropertyEditorValue,java.lang.Class,);
Parameter(addEditorToMap,java.lang.Class,);
Parameter(addEditorToMap,java.beans.PropertyEditor,);
Parameter(getPropertyEditor,java.beans.PropertyDescriptor,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,parse --> parse,au.com.bytecode.opencsv.bean.CsvToBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,parse$2 --> captureHeader,au.com.bytecode.opencsv.bean.MappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,parse$2 --> readNext,au.com.bytecode.opencsv.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,parse$2 --> processLine,au.com.bytecode.opencsv.bean.CsvToBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,parse$2 --> add,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,processLine --> createBean,au.com.bytecode.opencsv.bean.MappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,processLine --> findDescriptor,au.com.bytecode.opencsv.bean.MappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,processLine --> checkForTrim,au.com.bytecode.opencsv.bean.CsvToBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,processLine --> convertValue,au.com.bytecode.opencsv.bean.CsvToBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,processLine --> getWriteMethod,java.beans.PropertyDescriptor,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,processLine --> invoke,java.beans.PropertyDescriptor,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,checkForTrim --> trimmableProperty,au.com.bytecode.opencsv.bean.CsvToBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,checkForTrim --> trim,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,trimmableProperty --> getPropertyType,java.beans.PropertyDescriptor,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,trimmableProperty --> getName,java.beans.PropertyDescriptor,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,trimmableProperty --> contains,java.beans.PropertyDescriptor,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,convertValue --> getPropertyEditor,au.com.bytecode.opencsv.bean.CsvToBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,convertValue --> setAsText,java.beans.PropertyEditor,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,convertValue --> getValue,java.beans.PropertyEditor,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,getPropertyEditorValue --> get,java.util.Map,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,getPropertyEditorValue --> findEditor,null,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,getPropertyEditorValue --> addEditorToMap,au.com.bytecode.opencsv.bean.CsvToBean,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.bean.CsvToBean,getPropertyEditorValue --> editorMap,java.util.Map,WRITE);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,addEditorToMap --> put,java.util.Map,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,getPropertyEditor --> getPropertyEditorClass,java.beans.PropertyDescriptor,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,getPropertyEditor --> newInstance,java.lang.Class,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,getPropertyEditor --> getPropertyEditorValue,au.com.bytecode.opencsv.bean.CsvToBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBean,getPropertyEditor --> getPropertyType,java.beans.PropertyDescriptor,);
EndClass 12
StartClass 13
Class(au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,N,N,Public);
Attribute(header,java.lang.String[],Protected,N,N,);
Attribute(descriptorMap,java.util.Map,Protected,N,N,);
Attribute(type,java.lang.Class,Protected,N,N,);
Method(captureHeader,void,Public,N,N);
Method(findDescriptor,java.beans.PropertyDescriptor,Public,N,N);
Method(getColumnName,java.lang.String,Protected,N,N);
Method(findDescriptor$2,java.beans.PropertyDescriptor,Protected,N,N);
Method(matches,boolean,Protected,N,N);
Method(loadDescriptorMap,java.util.Map,Protected,N,N);
Method(loadDescriptors,java.beans.PropertyDescriptor[],Private,N,N);
Method(createBean,au.com.bytecode.opencsv.bean.T,Public,N,N);
Method(getType,java.lang.Class,Public,N,N);
Method(setType,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(captureHeader,au.com.bytecode.opencsv.CSVReader,);
Parameter(findDescriptor,int,);
Parameter(getColumnName,int,);
Parameter(findDescriptor$2,java.lang.String,);
Parameter(matches,java.lang.String,);
Parameter(matches,java.beans.PropertyDescriptor,);
Parameter(loadDescriptorMap,java.lang.Class,);
Parameter(loadDescriptors,java.lang.Class,);
Parameter(setType,java.lang.Class,);
Realization(au.com.bytecode.opencsv.bean.MappingStrategy);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,captureHeader --> readNext,au.com.bytecode.opencsv.CSVReader,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,captureHeader --> header,java.lang.String[],WRITE);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,findDescriptor --> getColumnName,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,findDescriptor --> trim,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,findDescriptor --> length,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,findDescriptor --> findDescriptor,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,findDescriptor$2 --> loadDescriptorMap,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,findDescriptor$2 --> getType,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,findDescriptor$2 --> get,java.util.Map,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,findDescriptor$2 --> toUpperCase,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,findDescriptor$2 --> trim,java.lang.String,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,findDescriptor$2 --> descriptorMap,java.util.Map,WRITE);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,matches --> getName,java.beans.PropertyDescriptor,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,matches --> equals,java.beans.PropertyDescriptor,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,matches --> trim,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,loadDescriptorMap --> loadDescriptors,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,loadDescriptorMap --> getType,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,loadDescriptorMap --> put,java.util.Map,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,loadDescriptorMap --> getName,null,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,loadDescriptorMap --> toUpperCase,null,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,loadDescriptorMap --> trim,null,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,loadDescriptors --> getBeanInfo,null,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,loadDescriptors --> getPropertyDescriptors,java.beans.BeanInfo,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,createBean --> newInstance,java.lang.Class,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,setType --> type,java.lang.Class,READ);
EndClass 13
StartClass 14
Class(au.com.bytecode.opencsv.bean.MappingStrategy,Y,Y,Public);
EndClass 14
StartClass 15
Class(au.com.bytecode.opencsv.CSVIterator,N,N,Public);
Attribute(reader,au.com.bytecode.opencsv.CSVReader,Private,N,N,);
Attribute(nextLine,java.lang.String[],Private,N,N,);
Method(<init>,void,Public,N,N);
Method(hasNext,boolean,Public,N,N);
Method(next,java.lang.String[],Public,N,N);
Method(remove,void,Public,N,N);
Parameter(<init>,au.com.bytecode.opencsv.CSVReader,);
Realization(au.com.bytecode.opencsv.Iterator);
Composition(au.com.bytecode.opencsv.CSVReader);
Call(METHOD,au.com.bytecode.opencsv.CSVIterator,<init> --> readNext,au.com.bytecode.opencsv.CSVReader,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVIterator,<init> --> reader,au.com.bytecode.opencsv.CSVReader,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVIterator,<init> --> nextLine,java.lang.String[],WRITE);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVIterator,<init> --> reader,au.com.bytecode.opencsv.CSVReader,READ);
Call(METHOD,au.com.bytecode.opencsv.CSVIterator,next --> readNext,au.com.bytecode.opencsv.CSVReader,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVIterator,next --> nextLine,java.lang.String[],WRITE);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVIterator,next --> reader,au.com.bytecode.opencsv.CSVReader,READ);
EndClass 15
StartClass 16
Class(au.com.bytecode.opencsv.Iterator,Y,Y,Public);
EndClass 16
StartClass 17
Class(au.com.bytecode.opencsv.CSVParserBuilder,N,N,Public);
Attribute(separator,au.com.bytecode.opencsv.char,Public,N,N,);
Attribute(quoteChar,au.com.bytecode.opencsv.char,Public,N,N,);
Attribute(escapeChar,au.com.bytecode.opencsv.char,Public,N,N,);
Attribute(strictQuotes,boolean,Public,N,N,);
Attribute(ignoreLeadingWhiteSpace,boolean,Public,N,N,);
Attribute(ignoreQuotations,boolean,Public,N,N,);
Method(withSeparator,au.com.bytecode.opencsv.CSVParserBuilder,Public,N,N);
Method(withQuoteChar,au.com.bytecode.opencsv.CSVParserBuilder,Public,N,N);
Method(withEscapeChar,au.com.bytecode.opencsv.CSVParserBuilder,Public,N,N);
Method(withStrictQuotes,au.com.bytecode.opencsv.CSVParserBuilder,Public,N,N);
Method(withIgnoreLeadingWhiteSpace,au.com.bytecode.opencsv.CSVParserBuilder,Public,N,N);
Method(withIgnoreQuotations,au.com.bytecode.opencsv.CSVParserBuilder,Public,N,N);
Method(build,au.com.bytecode.opencsv.CSVParser,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(withSeparator,au.com.bytecode.opencsv.char,);
Parameter(withQuoteChar,au.com.bytecode.opencsv.char,);
Parameter(withEscapeChar,au.com.bytecode.opencsv.char,);
Parameter(withStrictQuotes,boolean,);
Parameter(withIgnoreLeadingWhiteSpace,boolean,);
Parameter(withIgnoreQuotations,boolean,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParserBuilder,withSeparator --> separator,au.com.bytecode.opencsv.char,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParserBuilder,withQuoteChar --> quoteChar,au.com.bytecode.opencsv.char,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParserBuilder,withEscapeChar --> escapeChar,au.com.bytecode.opencsv.char,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParserBuilder,withStrictQuotes --> strictQuotes,boolean,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParserBuilder,withIgnoreLeadingWhiteSpace --> ignoreLeadingWhiteSpace,boolean,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParserBuilder,withIgnoreQuotations --> ignoreQuotations,boolean,READ);
EndClass 17
StartClass 18
Class(au.com.bytecode.opencsv.CSVReaderBuilder,N,N,Public);
Attribute(reader,java.io.Reader,Public,N,Y,);
Attribute(skipLines,int,Public,N,N,);
Attribute(csvParserBuilder,au.com.bytecode.opencsv.CSVParserBuilder,Public,N,N,);
Attribute(csvParser,au.com.bytecode.opencsv.CSVParser,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(withSkipLines,au.com.bytecode.opencsv.CSVReaderBuilder,Public,N,N);
Method(withCSVParser,au.com.bytecode.opencsv.CSVReaderBuilder,Public,N,N);
Method(build,au.com.bytecode.opencsv.CSVReader,Public,N,N);
Parameter(<init>,java.io.Reader,);
Parameter(withSkipLines,int,);
Parameter(withCSVParser,au.com.bytecode.opencsv.CSVParser,);
Composition(au.com.bytecode.opencsv.CSVParserBuilder);
Composition(au.com.bytecode.opencsv.CSVParser);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVReaderBuilder,<init> --> reader,java.io.Reader,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVReaderBuilder,withCSVParser --> csvParser,au.com.bytecode.opencsv.CSVParser,READ);
EndClass 18
StartClass 19
Class(au.com.bytecode.opencsv.ResultSetHelperService,N,N,Public);
Attribute(CLOBBUFFERSIZE,int,Public,Y,Y,);
Attribute(NVARCHAR,int,Public,Y,Y,);
Attribute(NCHAR,int,Public,Y,Y,);
Attribute(LONGNVARCHAR,int,Public,Y,Y,);
Attribute(NCLOB,int,Public,Y,Y,);
Attribute(DEFAULT_DATE_FORMAT,java.sql.String,Public,Y,Y,);
Attribute(DEFAULT_TIMESTAMP_FORMAT,java.sql.String,Public,Y,Y,);
Method(getColumnNames,java.sql.String[],Public,N,N);
Method(getColumnValues,java.sql.String[],Public,N,N);
Method(getColumnValues$2,java.sql.String[],Public,N,N);
Method(getColumnValues$3,java.sql.String[],Public,N,N);
Method(handleObject,java.sql.String,Private,N,N);
Method(handleBigDecimal,java.sql.String,Private,N,N);
Method(handleLong,java.sql.String,Private,N,N);
Method(handleInteger,java.sql.String,Private,N,N);
Method(handleDate,java.sql.String,Private,N,N);
Method(handleTime,java.sql.String,Private,N,N);
Method(handleTimestamp,java.sql.String,Private,N,N);
Method(getColumnValue,java.sql.String,Private,N,N);
Method(read,java.sql.String,Private,Y,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(getColumnNames,java.sql.ResultSet,);
Parameter(getColumnValues,java.sql.ResultSet,);
Parameter(getColumnValues$2,java.sql.ResultSet,);
Parameter(getColumnValues$2,boolean,);
Parameter(getColumnValues$3,java.sql.ResultSet,);
Parameter(getColumnValues$3,boolean,);
Parameter(getColumnValues$3,java.sql.String,);
Parameter(getColumnValues$3,java.sql.String,);
Parameter(handleObject,java.sql.Object,);
Parameter(handleBigDecimal,java.math.BigDecimal,);
Parameter(handleLong,java.sql.ResultSet,);
Parameter(handleLong,int,);
Parameter(handleInteger,java.sql.ResultSet,);
Parameter(handleInteger,int,);
Parameter(handleDate,java.sql.ResultSet,);
Parameter(handleDate,int,);
Parameter(handleDate,java.sql.String,);
Parameter(handleTime,java.sql.Time,);
Parameter(handleTimestamp,java.sql.Timestamp,);
Parameter(handleTimestamp,java.sql.String,);
Parameter(getColumnValue,java.sql.ResultSet,);
Parameter(getColumnValue,int,);
Parameter(getColumnValue,int,);
Parameter(getColumnValue,boolean,);
Parameter(getColumnValue,java.sql.String,);
Parameter(getColumnValue,java.sql.String,);
Parameter(read,java.sql.Clob,);
Realization(java.sql.ResultSetHelper);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnNames --> getMetaData,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnNames --> getColumnCount,java.sql.ResultSetMetaData,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnNames --> add,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnNames --> getColumnName,java.sql.ResultSetMetaData,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnNames --> size,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnNames --> toArray,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValues --> getColumnValues,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValues$2 --> getColumnValues,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValues$3 --> getMetaData,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValues$3 --> getColumnCount,java.sql.ResultSetMetaData,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValues$3 --> add,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValues$3 --> getColumnValue,au.com.bytecode.opencsv.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValues$3 --> getColumnType,java.sql.ResultSetMetaData,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValues$3 --> size,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValues$3 --> toArray,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,handleObject --> valueOf,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,handleBigDecimal --> toString,java.math.BigDecimal,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,handleLong --> getLong,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,handleLong --> wasNull,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,handleLong --> toString,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,handleInteger --> getInt,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,handleInteger --> wasNull,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,handleInteger --> toString,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,handleDate --> getDate,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,handleDate --> format,java.sql.SimpleDateFormat,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,handleTime --> toString,java.sql.Time,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,handleTimestamp --> format,java.sql.SimpleDateFormat,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValue --> handleObject,au.com.bytecode.opencsv.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValue --> getObject,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValue --> getBoolean,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValue --> valueOf,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValue --> toString,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValue --> getClob,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValue --> read,au.com.bytecode.opencsv.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValue --> handleLong,au.com.bytecode.opencsv.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValue --> handleBigDecimal,au.com.bytecode.opencsv.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValue --> getBigDecimal,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValue --> handleInteger,au.com.bytecode.opencsv.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValue --> handleDate,au.com.bytecode.opencsv.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValue --> handleTime,au.com.bytecode.opencsv.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValue --> getTime,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValue --> handleTimestamp,au.com.bytecode.opencsv.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValue --> getTimestamp,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValue --> getString,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,getColumnValue --> trim,java.sql.String,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,read --> length,java.sql.Clob,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,read --> getCharacterStream,java.sql.Clob,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,read --> read,java.sql.Reader,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,read --> append,java.sql.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperService,read --> toString,java.sql.StringBuilder,);
EndClass 19
StartClass 20
Class(java.sql.ResultSetHelper,Y,Y,Public);
EndClass 20
StartClass 21
Class(au.com.bytecode.opencsv.bean.BeanToCsvTest,N,N,Public);
Attribute(TEST_STRING,java.lang.String,Private,Y,Y,);
Attribute(NULL_TEST_STRING,java.lang.String,Private,Y,Y,);
Attribute(testData,java.util.List,Private,N,N,);
Attribute(nullData,java.util.List,Private,N,N,);
Attribute(bean,au.com.bytecode.opencsv.bean.BeanToCsv,Private,N,N,);
Method(setUp,void,Public,N,N);
Method(setTestData,void,Public,N,N);
Method(setNullData,void,Public,N,N);
Method(createErrorMappingStrategy,au.com.bytecode.opencsv.bean.MappingStrategy,Private,N,N);
Method(findDescriptor,java.beans.PropertyDescriptor,Public,N,N);
Method(createBean,java.lang.Object,Public,N,N);
Method(captureHeader,void,Public,N,N);
Method(throwRuntimeExceptionWhenExceptionIsThrown,void,Public,N,N);
Method(beanReturnsFalseOnEmptyList,void,Public,N,N);
Method(beanReturnsFalseOnNull,void,Public,N,N);
Method(testWriteQuotes,void,Public,N,N);
Method(testWriteNulls,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(findDescriptor,int,);
Parameter(captureHeader,au.com.bytecode.opencsv.CSVReader,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.bean.BeanToCsvTest,setUp --> bean,au.com.bytecode.opencsv.bean.BeanToCsv,WRITE);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,setTestData --> setName,au.com.bytecode.opencsv.bean.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,setTestData --> setOrderNumber,au.com.bytecode.opencsv.bean.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,setTestData --> setNum,au.com.bytecode.opencsv.bean.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,setTestData --> add,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,setTestData --> setName,au.com.bytecode.opencsv.bean.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,setTestData --> setOrderNumber,au.com.bytecode.opencsv.bean.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,setTestData --> setNum,au.com.bytecode.opencsv.bean.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,setTestData --> add,java.util.List,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.bean.BeanToCsvTest,setTestData --> testData,java.util.List,WRITE);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,setNullData --> setName,au.com.bytecode.opencsv.bean.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,setNullData --> setOrderNumber,au.com.bytecode.opencsv.bean.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,setNullData --> setNum,au.com.bytecode.opencsv.bean.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,setNullData --> add,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,setNullData --> setName,au.com.bytecode.opencsv.bean.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,setNullData --> setOrderNumber,au.com.bytecode.opencsv.bean.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,setNullData --> setNum,au.com.bytecode.opencsv.bean.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,setNullData --> add,java.util.List,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.bean.BeanToCsvTest,setNullData --> nullData,java.util.List,WRITE);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,throwRuntimeExceptionWhenExceptionIsThrown --> write,au.com.bytecode.opencsv.bean.BeanToCsv,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,throwRuntimeExceptionWhenExceptionIsThrown --> createErrorMappingStrategy,au.com.bytecode.opencsv.bean.BeanToCsvTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,beanReturnsFalseOnEmptyList --> setType,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,beanReturnsFalseOnEmptyList --> setColumnMapping,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,beanReturnsFalseOnEmptyList --> assertFalse,au.com.bytecode.opencsv.bean.BeanToCsvTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,beanReturnsFalseOnEmptyList --> write,au.com.bytecode.opencsv.bean.BeanToCsv,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,beanReturnsFalseOnNull --> setType,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,beanReturnsFalseOnNull --> setColumnMapping,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,beanReturnsFalseOnNull --> assertFalse,au.com.bytecode.opencsv.bean.BeanToCsvTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,beanReturnsFalseOnNull --> write,au.com.bytecode.opencsv.bean.BeanToCsv,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,testWriteQuotes --> setType,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,testWriteQuotes --> setColumnMapping,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,testWriteQuotes --> write,au.com.bytecode.opencsv.bean.BeanToCsv,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,testWriteQuotes --> assertTrue,null,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,testWriteQuotes --> getBuffer,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,testWriteQuotes --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,testWriteQuotes --> assertNotNull,null,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,testWriteQuotes --> assertEquals,null,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,testWriteNulls --> setType,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,testWriteNulls --> setColumnMapping,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,testWriteNulls --> write,au.com.bytecode.opencsv.bean.BeanToCsv,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,testWriteNulls --> assertTrue,null,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,testWriteNulls --> getBuffer,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,testWriteNulls --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,testWriteNulls --> assertNotNull,null,);
Call(METHOD,au.com.bytecode.opencsv.bean.BeanToCsvTest,testWriteNulls --> assertEquals,null,);
EndClass 21
StartClass 22
Class(au.com.bytecode.opencsv.bean.MappingStrategy,Y,Y,Public);
Method(findDescriptor,java.beans.PropertyDescriptor,Public,N,Y);
Method(createBean,au.com.bytecode.opencsv.bean.T,Public,N,Y);
Method(captureHeader,void,Public,N,Y);
Parameter(findDescriptor,int,);
Parameter(captureHeader,au.com.bytecode.opencsv.CSVReader,);
EndClass 22
StartClass 23
Class(au.com.bytecode.opencsv.bean.MockBean,N,N,Public);
Attribute(name,java.lang.String,Private,N,N,);
Attribute(id,java.lang.String,Private,N,N,);
Attribute(orderNumber,java.lang.String,Private,N,N,);
Attribute(num,int,Private,N,N,);
Method(getId,java.lang.String,Public,N,N);
Method(setId,void,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(setName,void,Public,N,N);
Method(getOrderNumber,java.lang.String,Public,N,N);
Method(setOrderNumber,void,Public,N,N);
Method(getNum,int,Public,N,N);
Method(setNum,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(setId,java.lang.String,);
Parameter(setName,java.lang.String,);
Parameter(setOrderNumber,java.lang.String,);
Parameter(setNum,int,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.bean.MockBean,setId --> id,java.lang.String,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.bean.MockBean,setName --> name,java.lang.String,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.bean.MockBean,setOrderNumber --> orderNumber,java.lang.String,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.bean.MockBean,setNum --> num,int,READ);
EndClass 23
StartClass 24
Class(au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,N,N,Public);
Attribute(strat,org.junit.Assert.ColumnPositionMappingStrategy,Private,N,N,);
Method(setUp,void,Public,N,N);
Method(testParse,void,Public,N,N);
Method(testParseWithTrailingSpaces,void,Public,N,N);
Method(testGetColumnMapping,void,Public,N,N);
Method(testGetColumnNames,void,Public,N,N);
Method(testGetColumnNamesArray,void,Public,N,N);
Method(getColumnNamesWhenNullArray,void,Public,N,N);
Method(getColumnNamesWhenNullColumnName,void,Public,N,N);
Method(getColumnNamesWhenEmptyMapping,void,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,setUp --> setType,org.junit.Assert.ColumnPositionMappingStrategy,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,setUp --> strat,org.junit.Assert.ColumnPositionMappingStrategy,WRITE);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParse --> setColumnMapping,org.junit.Assert.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParse --> parse,org.junit.Assert.CsvToBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParse --> assertNotNull,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParse --> assertTrue,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParse --> size,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParse --> get,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParse --> assertEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParse --> getName,org.junit.Assert.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParse --> assertEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParse --> getOrderNumber,org.junit.Assert.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParse --> assertEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParse --> getId,org.junit.Assert.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParse --> assertEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParse --> getNum,org.junit.Assert.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParseWithTrailingSpaces --> setColumnMapping,org.junit.Assert.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParseWithTrailingSpaces --> parse,org.junit.Assert.CsvToBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParseWithTrailingSpaces --> assertNotNull,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParseWithTrailingSpaces --> assertTrue,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParseWithTrailingSpaces --> size,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParseWithTrailingSpaces --> get,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParseWithTrailingSpaces --> assertEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParseWithTrailingSpaces --> getName,org.junit.Assert.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParseWithTrailingSpaces --> assertEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParseWithTrailingSpaces --> getOrderNumber,org.junit.Assert.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParseWithTrailingSpaces --> assertEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParseWithTrailingSpaces --> getId,org.junit.Assert.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParseWithTrailingSpaces --> assertEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testParseWithTrailingSpaces --> getNum,org.junit.Assert.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testGetColumnMapping --> getColumnMapping,org.junit.Assert.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testGetColumnMapping --> assertNotNull,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testGetColumnMapping --> assertEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testGetColumnMapping --> setColumnMapping,org.junit.Assert.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testGetColumnMapping --> getColumnMapping,org.junit.Assert.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testGetColumnMapping --> assertNotNull,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testGetColumnMapping --> assertEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testGetColumnMapping --> assertArrayEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testGetColumnMapping --> strat,org.junit.Assert.ColumnPositionMappingStrategy,READ);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testGetColumnNames --> setColumnMapping,org.junit.Assert.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testGetColumnNames --> assertEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testGetColumnNames --> getColumnName,org.junit.Assert.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testGetColumnNames --> assertEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testGetColumnNames --> getColumnName,org.junit.Assert.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testGetColumnNames --> assertEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testGetColumnNames --> getColumnName,org.junit.Assert.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testGetColumnNames --> assertEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testGetColumnNames --> getColumnName,org.junit.Assert.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testGetColumnNamesArray --> setColumnMapping,org.junit.Assert.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testGetColumnNamesArray --> getColumnMapping,org.junit.Assert.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testGetColumnNamesArray --> assertEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testGetColumnNamesArray --> assertEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testGetColumnNamesArray --> assertEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,testGetColumnNamesArray --> assertEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,getColumnNamesWhenNullArray --> setColumnMapping,org.junit.Assert.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,getColumnNamesWhenNullArray --> assertEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,getColumnNamesWhenNullArray --> getColumnName,org.junit.Assert.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,getColumnNamesWhenNullArray --> assertEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,getColumnNamesWhenNullArray --> getColumnName,org.junit.Assert.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,getColumnNamesWhenNullArray --> assertArrayEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,getColumnNamesWhenNullArray --> getColumnMapping,org.junit.Assert.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,getColumnNamesWhenNullColumnName --> setColumnMapping,org.junit.Assert.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,getColumnNamesWhenNullColumnName --> assertEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,getColumnNamesWhenNullColumnName --> getColumnName,org.junit.Assert.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,getColumnNamesWhenNullColumnName --> assertEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,getColumnNamesWhenNullColumnName --> getColumnName,org.junit.Assert.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,getColumnNamesWhenNullColumnName --> assertArrayEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,getColumnNamesWhenNullColumnName --> getColumnMapping,org.junit.Assert.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,getColumnNamesWhenEmptyMapping --> setColumnMapping,org.junit.Assert.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,getColumnNamesWhenEmptyMapping --> assertEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,getColumnNamesWhenEmptyMapping --> getColumnName,org.junit.Assert.ColumnPositionMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,getColumnNamesWhenEmptyMapping --> assertArrayEquals,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest,getColumnNamesWhenEmptyMapping --> getColumnMapping,org.junit.Assert.ColumnPositionMappingStrategy,);
EndClass 24
StartClass 25
Class(au.com.bytecode.opencsv.bean.CsvToBeanTest,N,N,Public);
Attribute(TEST_STRING,java.lang.String,Private,Y,Y,);
Method(createReader,au.com.bytecode.opencsv.CSVReader,Private,N,N);
Method(createErrorMappingStrategy,au.com.bytecode.opencsv.bean.MappingStrategy,Private,N,N);
Method(findDescriptor,java.beans.PropertyDescriptor,Public,N,N);
Method(createBean,java.lang.Object,Public,N,N);
Method(captureHeader,void,Public,N,N);
Method(throwRuntimeExceptionWhenExceptionIsThrown,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(findDescriptor,int,);
Parameter(captureHeader,au.com.bytecode.opencsv.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBeanTest,throwRuntimeExceptionWhenExceptionIsThrown --> parse,au.com.bytecode.opencsv.bean.CsvToBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBeanTest,throwRuntimeExceptionWhenExceptionIsThrown --> createErrorMappingStrategy,au.com.bytecode.opencsv.bean.CsvToBeanTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.CsvToBeanTest,throwRuntimeExceptionWhenExceptionIsThrown --> createReader,au.com.bytecode.opencsv.bean.CsvToBeanTest,);
EndClass 25
StartClass 26
Class(au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,N,N,Public);
Attribute(TEST_STRING,org.junit.Assert.String,Private,Y,Y,);
Attribute(TEST_QUOTED_STRING,org.junit.Assert.String,Private,Y,Y,);
Method(createTestParseResult,java.util.List,Private,N,N);
Method(testParse,void,Public,N,N);
Method(testQuotedString,void,Public,N,N);
Method(testParseWithSpacesInHeader,void,Public,N,N);
Method(verifyColumnNames,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(createTestParseResult,org.junit.Assert.String,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,createTestParseResult --> setType,org.junit.Assert.HeaderColumnNameMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,createTestParseResult --> parse,org.junit.Assert.CsvToBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testParse --> createTestParseResult,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testParse --> assertNotNull,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testParse --> assertTrue,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testParse --> size,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testParse --> get,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testParse --> assertEquals,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testParse --> getName,org.junit.Assert.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testParse --> assertEquals,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testParse --> getOrderNumber,org.junit.Assert.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testParse --> assertEquals,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testParse --> getNum,org.junit.Assert.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testQuotedString --> createTestParseResult,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testQuotedString --> assertNotNull,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testQuotedString --> assertTrue,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testQuotedString --> size,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testQuotedString --> get,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testQuotedString --> assertEquals,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testQuotedString --> getName,org.junit.Assert.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testQuotedString --> assertEquals,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testQuotedString --> getOrderNumber,org.junit.Assert.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testQuotedString --> assertEquals,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testQuotedString --> getNum,org.junit.Assert.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testParseWithSpacesInHeader --> createTestParseResult,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testParseWithSpacesInHeader --> assertNotNull,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testParseWithSpacesInHeader --> assertTrue,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testParseWithSpacesInHeader --> size,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testParseWithSpacesInHeader --> get,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testParseWithSpacesInHeader --> assertEquals,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testParseWithSpacesInHeader --> getName,org.junit.Assert.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testParseWithSpacesInHeader --> assertEquals,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testParseWithSpacesInHeader --> getOrderNumber,org.junit.Assert.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testParseWithSpacesInHeader --> assertEquals,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,testParseWithSpacesInHeader --> getNum,org.junit.Assert.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,verifyColumnNames --> setType,org.junit.Assert.HeaderColumnNameMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,verifyColumnNames --> assertNull,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,verifyColumnNames --> getColumnName,org.junit.Assert.HeaderColumnNameMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,verifyColumnNames --> assertNull,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,verifyColumnNames --> findDescriptor,org.junit.Assert.HeaderColumnNameMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,verifyColumnNames --> captureHeader,org.junit.Assert.HeaderColumnNameMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,verifyColumnNames --> assertEquals,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,verifyColumnNames --> getColumnName,org.junit.Assert.HeaderColumnNameMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,verifyColumnNames --> assertEquals,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,verifyColumnNames --> findDescriptor,org.junit.Assert.HeaderColumnNameMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,verifyColumnNames --> findDescriptor,org.junit.Assert.HeaderColumnNameMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,verifyColumnNames --> assertTrue,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,verifyColumnNames --> matches,org.junit.Assert.HeaderColumnNameMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest,verifyColumnNames --> findDescriptor,org.junit.Assert.HeaderColumnNameMappingStrategy,);
EndClass 26
StartClass 27
Class(au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,N,N,Public);
Method(testParse,void,Public,N,N);
Method(getColumnNameReturnsNullIfColumnNumberIsTooLarge,void,Public,N,N);
Method(columnNameMappingShouldBeCaseInsensitive,void,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,testParse --> setType,org.junit.Assert.HeaderColumnNameTranslateMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,testParse --> put,java.util.Map,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,testParse --> put,java.util.Map,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,testParse --> put,java.util.Map,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,testParse --> setColumnMapping,org.junit.Assert.HeaderColumnNameTranslateMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,testParse --> parse,org.junit.Assert.CsvToBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,testParse --> assertNotNull,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,testParse --> assertTrue,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,testParse --> size,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,testParse --> get,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,testParse --> assertEquals,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,testParse --> getName,org.junit.Assert.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,testParse --> assertEquals,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,testParse --> getOrderNumber,org.junit.Assert.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,testParse --> assertEquals,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,testParse --> getId,org.junit.Assert.MockBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,getColumnNameReturnsNullIfColumnNumberIsTooLarge --> setType,org.junit.Assert.HeaderColumnNameTranslateMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,getColumnNameReturnsNullIfColumnNumberIsTooLarge --> put,java.util.Map,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,getColumnNameReturnsNullIfColumnNumberIsTooLarge --> put,java.util.Map,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,getColumnNameReturnsNullIfColumnNumberIsTooLarge --> put,java.util.Map,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,getColumnNameReturnsNullIfColumnNumberIsTooLarge --> setColumnMapping,org.junit.Assert.HeaderColumnNameTranslateMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,getColumnNameReturnsNullIfColumnNumberIsTooLarge --> parse,org.junit.Assert.CsvToBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,getColumnNameReturnsNullIfColumnNumberIsTooLarge --> assertEquals,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,getColumnNameReturnsNullIfColumnNumberIsTooLarge --> getColumnName,org.junit.Assert.HeaderColumnNameTranslateMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,getColumnNameReturnsNullIfColumnNumberIsTooLarge --> assertEquals,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,getColumnNameReturnsNullIfColumnNumberIsTooLarge --> getColumnName,org.junit.Assert.HeaderColumnNameTranslateMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,getColumnNameReturnsNullIfColumnNumberIsTooLarge --> assertEquals,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,getColumnNameReturnsNullIfColumnNumberIsTooLarge --> getColumnName,org.junit.Assert.HeaderColumnNameTranslateMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,getColumnNameReturnsNullIfColumnNumberIsTooLarge --> assertNull,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,getColumnNameReturnsNullIfColumnNumberIsTooLarge --> getColumnName,org.junit.Assert.HeaderColumnNameTranslateMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,columnNameMappingShouldBeCaseInsensitive --> setType,org.junit.Assert.HeaderColumnNameTranslateMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,columnNameMappingShouldBeCaseInsensitive --> put,java.util.Map,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,columnNameMappingShouldBeCaseInsensitive --> put,java.util.Map,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,columnNameMappingShouldBeCaseInsensitive --> put,java.util.Map,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,columnNameMappingShouldBeCaseInsensitive --> setColumnMapping,org.junit.Assert.HeaderColumnNameTranslateMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,columnNameMappingShouldBeCaseInsensitive --> assertNotNull,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,columnNameMappingShouldBeCaseInsensitive --> getColumnMapping,org.junit.Assert.HeaderColumnNameTranslateMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,columnNameMappingShouldBeCaseInsensitive --> parse,org.junit.Assert.CsvToBean,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,columnNameMappingShouldBeCaseInsensitive --> assertEquals,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,columnNameMappingShouldBeCaseInsensitive --> getColumnName,org.junit.Assert.HeaderColumnNameTranslateMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,columnNameMappingShouldBeCaseInsensitive --> assertEquals,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,columnNameMappingShouldBeCaseInsensitive --> getColumnName,org.junit.Assert.HeaderColumnNameTranslateMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,columnNameMappingShouldBeCaseInsensitive --> assertEquals,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,columnNameMappingShouldBeCaseInsensitive --> getColumnName,org.junit.Assert.HeaderColumnNameTranslateMappingStrategy,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,columnNameMappingShouldBeCaseInsensitive --> assertNull,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,);
Call(METHOD,au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest,columnNameMappingShouldBeCaseInsensitive --> getColumnName,org.junit.Assert.HeaderColumnNameTranslateMappingStrategy,);
EndClass 27
StartClass 28
Class(au.com.bytecode.opencsv.CSVIteratorTest,N,N,Public);
Attribute(iterator,org.junit.Assert.CSVIterator,Private,N,N,);
Attribute(mockReader,org.junit.Assert.CSVReader,Private,N,N,);
Attribute(STRINGS,org.junit.Assert.String[],Private,Y,Y,);
Method(setUp,void,Public,N,N);
Method(readerExceptionCausesRunTimeException,void,Public,N,N);
Method(removethrowsUnsupportedOperationException,void,Public,N,N);
Method(initialReadReturnsStrings,void,Public,N,N);
Method(hasNextWorks,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Call(METHOD,au.com.bytecode.opencsv.CSVIteratorTest,setUp --> mock,au.com.bytecode.opencsv.CSVIteratorTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVIteratorTest,setUp --> when,au.com.bytecode.opencsv.CSVIteratorTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVIteratorTest,setUp --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVIteratorTest,setUp --> thenReturn,au.com.bytecode.opencsv.CSVIteratorTest,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVIteratorTest,setUp --> mockReader,org.junit.Assert.CSVReader,WRITE);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVIteratorTest,setUp --> iterator,org.junit.Assert.CSVIterator,WRITE);
Call(METHOD,au.com.bytecode.opencsv.CSVIteratorTest,readerExceptionCausesRunTimeException --> when,au.com.bytecode.opencsv.CSVIteratorTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVIteratorTest,readerExceptionCausesRunTimeException --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVIteratorTest,readerExceptionCausesRunTimeException --> thenThrow,au.com.bytecode.opencsv.CSVIteratorTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVIteratorTest,readerExceptionCausesRunTimeException --> next,org.junit.Assert.CSVIterator,);
Call(METHOD,au.com.bytecode.opencsv.CSVIteratorTest,removethrowsUnsupportedOperationException --> remove,org.junit.Assert.CSVIterator,);
Call(METHOD,au.com.bytecode.opencsv.CSVIteratorTest,initialReadReturnsStrings --> assertArrayEquals,au.com.bytecode.opencsv.CSVIteratorTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVIteratorTest,initialReadReturnsStrings --> next,org.junit.Assert.CSVIterator,);
Call(METHOD,au.com.bytecode.opencsv.CSVIteratorTest,hasNextWorks --> when,au.com.bytecode.opencsv.CSVIteratorTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVIteratorTest,hasNextWorks --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVIteratorTest,hasNextWorks --> thenReturn,au.com.bytecode.opencsv.CSVIteratorTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVIteratorTest,hasNextWorks --> assertTrue,au.com.bytecode.opencsv.CSVIteratorTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVIteratorTest,hasNextWorks --> hasNext,org.junit.Assert.CSVIterator,);
Call(METHOD,au.com.bytecode.opencsv.CSVIteratorTest,hasNextWorks --> next,org.junit.Assert.CSVIterator,);
Call(METHOD,au.com.bytecode.opencsv.CSVIteratorTest,hasNextWorks --> assertFalse,au.com.bytecode.opencsv.CSVIteratorTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVIteratorTest,hasNextWorks --> hasNext,org.junit.Assert.CSVIterator,);
EndClass 28
StartClass 29
Class(au.com.bytecode.opencsv.CSVParserBuilderTest,N,N,Public);
Attribute(builder,au.com.bytecode.opencsv.CSVParserBuilder,Private,N,N,);
Method(setUp,void,Public,N,N);
Method(testDefaultBuilder,void,Public,N,N);
Method(testWithSeparator,void,Public,N,N);
Method(testWithQuoteChar,void,Public,N,N);
Method(testWithEscapeChar,void,Public,N,N);
Method(testWithStrictQuotes,void,Public,N,N);
Method(testWithIgnoreLeadingWhiteSpace,void,Public,N,N);
Method(testWithIgnoreQuotations,void,Public,N,N);
Method(<init>,void,Public,N,N);
Composition(au.com.bytecode.opencsv.CSVParserBuilder);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParserBuilderTest,setUp --> builder,au.com.bytecode.opencsv.CSVParserBuilder,WRITE);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testDefaultBuilder --> assertEquals,au.com.bytecode.opencsv.CSVParserBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testDefaultBuilder --> assertEquals,au.com.bytecode.opencsv.CSVParserBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testDefaultBuilder --> assertEquals,au.com.bytecode.opencsv.CSVParserBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testDefaultBuilder --> assertEquals,au.com.bytecode.opencsv.CSVParserBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testDefaultBuilder --> assertEquals,au.com.bytecode.opencsv.CSVParserBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testDefaultBuilder --> assertEquals,au.com.bytecode.opencsv.CSVParserBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testDefaultBuilder --> build,au.com.bytecode.opencsv.CSVParserBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testDefaultBuilder --> assertEquals,au.com.bytecode.opencsv.CSVParserBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testDefaultBuilder --> assertEquals,au.com.bytecode.opencsv.CSVParserBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testDefaultBuilder --> assertEquals,au.com.bytecode.opencsv.CSVParserBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testDefaultBuilder --> assertEquals,au.com.bytecode.opencsv.CSVParserBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testDefaultBuilder --> assertEquals,au.com.bytecode.opencsv.CSVParserBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testDefaultBuilder --> assertEquals,au.com.bytecode.opencsv.CSVParserBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testWithSeparator --> withSeparator,au.com.bytecode.opencsv.CSVParserBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testWithSeparator --> assertEquals,au.com.bytecode.opencsv.CSVParserBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testWithSeparator --> assertEquals,au.com.bytecode.opencsv.CSVParserBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testWithSeparator --> build,au.com.bytecode.opencsv.CSVParserBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testWithQuoteChar --> withQuoteChar,au.com.bytecode.opencsv.CSVParserBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testWithQuoteChar --> assertEquals,au.com.bytecode.opencsv.CSVParserBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testWithQuoteChar --> assertEquals,au.com.bytecode.opencsv.CSVParserBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testWithQuoteChar --> build,au.com.bytecode.opencsv.CSVParserBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testWithEscapeChar --> withEscapeChar,au.com.bytecode.opencsv.CSVParserBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testWithEscapeChar --> assertEquals,au.com.bytecode.opencsv.CSVParserBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testWithEscapeChar --> assertEquals,au.com.bytecode.opencsv.CSVParserBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testWithEscapeChar --> build,au.com.bytecode.opencsv.CSVParserBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testWithStrictQuotes --> withStrictQuotes,au.com.bytecode.opencsv.CSVParserBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testWithStrictQuotes --> assertEquals,au.com.bytecode.opencsv.CSVParserBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testWithStrictQuotes --> assertEquals,au.com.bytecode.opencsv.CSVParserBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testWithStrictQuotes --> build,au.com.bytecode.opencsv.CSVParserBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testWithIgnoreLeadingWhiteSpace --> withIgnoreLeadingWhiteSpace,au.com.bytecode.opencsv.CSVParserBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testWithIgnoreLeadingWhiteSpace --> assertEquals,au.com.bytecode.opencsv.CSVParserBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testWithIgnoreLeadingWhiteSpace --> assertEquals,au.com.bytecode.opencsv.CSVParserBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testWithIgnoreLeadingWhiteSpace --> build,au.com.bytecode.opencsv.CSVParserBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testWithIgnoreQuotations --> withIgnoreQuotations,au.com.bytecode.opencsv.CSVParserBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testWithIgnoreQuotations --> assertEquals,au.com.bytecode.opencsv.CSVParserBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testWithIgnoreQuotations --> assertEquals,au.com.bytecode.opencsv.CSVParserBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserBuilderTest,testWithIgnoreQuotations --> build,au.com.bytecode.opencsv.CSVParserBuilder,);
EndClass 29
StartClass 30
Class(au.com.bytecode.opencsv.CSVParserTest,N,N,Public);
Attribute(csvParser,org.junit.Assert.CSVParser,Public,N,N,);
Attribute(ESCAPE_TEST_STRING,org.junit.Assert.String,Private,Y,Y,);
Method(setUp,void,Public,N,N);
Method(testParseLine,void,Public,N,N);
Method(parseSimpleString,void,Public,N,N);
Method(parseSimpleQuotedString,void,Public,N,N);
Method(parseSimpleQuotedStringWithSpaces,void,Public,N,N);
Method(testParsedLineWithInternalQuota,void,Public,N,N);
Method(parseQuotedStringWithCommas,void,Public,N,N);
Method(parseQuotedStringWithDefinedSeperator,void,Public,N,N);
Method(parseQuotedStringWithDefinedSeperatorAndQuote,void,Public,N,N);
Method(parseEmptyElements,void,Public,N,N);
Method(parseMultiLinedQuoted,void,Public,N,N);
Method(testADoubleQuoteAsDataElement,void,Public,N,N);
Method(testEscapedDoubleQuoteAsDataElement,void,Public,N,N);
Method(parseQuotedQuoteCharacters,void,Public,N,N);
Method(parseMultipleQuotes,void,Public,N,N);
Method(parseTrickyString,void,Public,N,N);
Method(setUpMultiLineInsideQuotes,org.junit.Assert.String,Private,N,N);
Method(testAMultiLineInsideQuotes,void,Public,N,N);
Method(testStrictQuoteSimple,void,Public,N,N);
Method(testStrictQuoteWithSpacesAndTabs,void,Public,N,N);
Method(testStrictQuoteWithGarbage,void,Public,N,N);
Method(testCanIgnoreQuotations,void,Public,N,N);
Method(testIssue3314579,void,Public,N,N);
Method(testIssue2263439,void,Public,N,N);
Method(testIssue2859181,void,Public,N,N);
Method(testIssue2726363,void,Public,N,N);
Method(anIOExceptionThrownifStringEndsInsideAQuotedString,void,Public,N,N);
Method(parseLineMultiAllowsQuotesAcrossMultipleLines,void,Public,N,N);
Method(pendingIsClearedAfterCallToParseLine,void,Public,N,N);
Method(returnPendingIfNullIsPassedIntoParseLineMulti,void,Public,N,N);
Method(spacesAtEndOfQuotedStringDoNotCountIfStrictQuotesIsTrue,void,Public,N,N);
Method(returnNullWhenNullPassedIn,void,Public,N,N);
Method(validateEscapeStringBeforeRealTest,void,Public,N,N);
Method(whichCharactersAreEscapable,void,Public,N,N);
Method(whitespaceBeforeEscape,void,Public,N,N);
Method(testIssue2958242WithoutQuotes,void,Public,N,N);
Method(quoteAndEscapeCannotBeTheSame,void,Public,N,N);
Method(quoteAndEscapeCanBeTheSameIfNull,void,Public,N,N);
Method(separatorCharacterCannotBeNull,void,Public,N,N);
Method(separatorAndEscapeCannotBeTheSame,void,Public,N,N);
Method(separatorAndQuoteCannotBeTheSame,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParserTest,setUp --> csvParser,org.junit.Assert.CSVParser,WRITE);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testParseLine --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testParseLine --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testParseLine --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testParseLine --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testParseLine --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testParseLine --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseSimpleString --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseSimpleString --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseSimpleString --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseSimpleString --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseSimpleString --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseSimpleString --> assertFalse,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseSimpleString --> isPending,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseSimpleQuotedString --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseSimpleQuotedString --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseSimpleQuotedString --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseSimpleQuotedString --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseSimpleQuotedString --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseSimpleQuotedString --> assertFalse,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseSimpleQuotedString --> isPending,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseSimpleQuotedStringWithSpaces --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseSimpleQuotedStringWithSpaces --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseSimpleQuotedStringWithSpaces --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseSimpleQuotedStringWithSpaces --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseSimpleQuotedStringWithSpaces --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseSimpleQuotedStringWithSpaces --> assertFalse,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseSimpleQuotedStringWithSpaces --> isPending,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testParsedLineWithInternalQuota --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testParsedLineWithInternalQuota --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testParsedLineWithInternalQuota --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseQuotedStringWithCommas --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseQuotedStringWithCommas --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseQuotedStringWithCommas --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseQuotedStringWithCommas --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseQuotedStringWithCommas --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseQuotedStringWithDefinedSeperator --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseQuotedStringWithDefinedSeperator --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseQuotedStringWithDefinedSeperator --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseQuotedStringWithDefinedSeperator --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseQuotedStringWithDefinedSeperator --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParserTest,parseQuotedStringWithDefinedSeperator --> csvParser,org.junit.Assert.CSVParser,WRITE);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseQuotedStringWithDefinedSeperatorAndQuote --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseQuotedStringWithDefinedSeperatorAndQuote --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseQuotedStringWithDefinedSeperatorAndQuote --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseQuotedStringWithDefinedSeperatorAndQuote --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseQuotedStringWithDefinedSeperatorAndQuote --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParserTest,parseQuotedStringWithDefinedSeperatorAndQuote --> csvParser,org.junit.Assert.CSVParser,WRITE);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseEmptyElements --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseEmptyElements --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseEmptyElements --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseEmptyElements --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseEmptyElements --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseMultiLinedQuoted --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseMultiLinedQuoted --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseMultiLinedQuoted --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseMultiLinedQuoted --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseMultiLinedQuoted --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testADoubleQuoteAsDataElement --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testADoubleQuoteAsDataElement --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testADoubleQuoteAsDataElement --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testADoubleQuoteAsDataElement --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testADoubleQuoteAsDataElement --> length,org.junit.Assert.String[],);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testADoubleQuoteAsDataElement --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testADoubleQuoteAsDataElement --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testEscapedDoubleQuoteAsDataElement --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testEscapedDoubleQuoteAsDataElement --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testEscapedDoubleQuoteAsDataElement --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testEscapedDoubleQuoteAsDataElement --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testEscapedDoubleQuoteAsDataElement --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testEscapedDoubleQuoteAsDataElement --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseQuotedQuoteCharacters --> parseLineMulti,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseQuotedQuoteCharacters --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseQuotedQuoteCharacters --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseQuotedQuoteCharacters --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseQuotedQuoteCharacters --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseMultipleQuotes --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseMultipleQuotes --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseMultipleQuotes --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseMultipleQuotes --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseTrickyString --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseTrickyString --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseTrickyString --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseTrickyString --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseTrickyString --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseTrickyString --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,setUpMultiLineInsideQuotes --> append,org.junit.Assert.StringBuffer,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,setUpMultiLineInsideQuotes --> toString,org.junit.Assert.StringBuffer,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testAMultiLineInsideQuotes --> setUpMultiLineInsideQuotes,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testAMultiLineInsideQuotes --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testAMultiLineInsideQuotes --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testAMultiLineInsideQuotes --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testAMultiLineInsideQuotes --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testAMultiLineInsideQuotes --> assertFalse,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testAMultiLineInsideQuotes --> isPending,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testStrictQuoteSimple --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testStrictQuoteSimple --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testStrictQuoteSimple --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testStrictQuoteSimple --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testStrictQuoteSimple --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParserTest,testStrictQuoteSimple --> csvParser,org.junit.Assert.CSVParser,WRITE);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testStrictQuoteWithSpacesAndTabs --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testStrictQuoteWithSpacesAndTabs --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testStrictQuoteWithSpacesAndTabs --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testStrictQuoteWithSpacesAndTabs --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testStrictQuoteWithSpacesAndTabs --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParserTest,testStrictQuoteWithSpacesAndTabs --> csvParser,org.junit.Assert.CSVParser,WRITE);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testStrictQuoteWithGarbage --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testStrictQuoteWithGarbage --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testStrictQuoteWithGarbage --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testStrictQuoteWithGarbage --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testStrictQuoteWithGarbage --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParserTest,testStrictQuoteWithGarbage --> csvParser,org.junit.Assert.CSVParser,WRITE);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testCanIgnoreQuotations --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testCanIgnoreQuotations --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testCanIgnoreQuotations --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testCanIgnoreQuotations --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testCanIgnoreQuotations --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testCanIgnoreQuotations --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParserTest,testCanIgnoreQuotations --> csvParser,org.junit.Assert.CSVParser,WRITE);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue3314579 --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue3314579 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue3314579 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue3314579 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue3314579 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue3314579 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue3314579 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue3314579 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue3314579 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue3314579 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParserTest,testIssue3314579 --> csvParser,org.junit.Assert.CSVParser,WRITE);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2263439 --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2263439 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2263439 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2263439 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2263439 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2263439 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2263439 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParserTest,testIssue2263439 --> csvParser,org.junit.Assert.CSVParser,WRITE);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2859181 --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2859181 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2859181 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2859181 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2859181 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParserTest,testIssue2859181 --> csvParser,org.junit.Assert.CSVParser,WRITE);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2726363 --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2726363 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2726363 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2726363 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2726363 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2726363 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2726363 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2726363 --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,anIOExceptionThrownifStringEndsInsideAQuotedString --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseLineMultiAllowsQuotesAcrossMultipleLines --> parseLineMulti,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseLineMultiAllowsQuotesAcrossMultipleLines --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseLineMultiAllowsQuotesAcrossMultipleLines --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseLineMultiAllowsQuotesAcrossMultipleLines --> assertTrue,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseLineMultiAllowsQuotesAcrossMultipleLines --> isPending,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseLineMultiAllowsQuotesAcrossMultipleLines --> parseLineMulti,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseLineMultiAllowsQuotesAcrossMultipleLines --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseLineMultiAllowsQuotesAcrossMultipleLines --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseLineMultiAllowsQuotesAcrossMultipleLines --> assertFalse,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,parseLineMultiAllowsQuotesAcrossMultipleLines --> isPending,org.junit.Assert.CSVParser,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParserTest,parseLineMultiAllowsQuotesAcrossMultipleLines --> csvParser,org.junit.Assert.CSVParser,READ);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,pendingIsClearedAfterCallToParseLine --> parseLineMulti,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,pendingIsClearedAfterCallToParseLine --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,pendingIsClearedAfterCallToParseLine --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,pendingIsClearedAfterCallToParseLine --> assertTrue,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,pendingIsClearedAfterCallToParseLine --> isPending,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,pendingIsClearedAfterCallToParseLine --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,pendingIsClearedAfterCallToParseLine --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,pendingIsClearedAfterCallToParseLine --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,pendingIsClearedAfterCallToParseLine --> assertFalse,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,pendingIsClearedAfterCallToParseLine --> isPending,org.junit.Assert.CSVParser,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParserTest,pendingIsClearedAfterCallToParseLine --> csvParser,org.junit.Assert.CSVParser,READ);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,returnPendingIfNullIsPassedIntoParseLineMulti --> parseLineMulti,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,returnPendingIfNullIsPassedIntoParseLineMulti --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,returnPendingIfNullIsPassedIntoParseLineMulti --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,returnPendingIfNullIsPassedIntoParseLineMulti --> assertTrue,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,returnPendingIfNullIsPassedIntoParseLineMulti --> isPending,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,returnPendingIfNullIsPassedIntoParseLineMulti --> parseLineMulti,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,returnPendingIfNullIsPassedIntoParseLineMulti --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,returnPendingIfNullIsPassedIntoParseLineMulti --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,returnPendingIfNullIsPassedIntoParseLineMulti --> assertFalse,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,returnPendingIfNullIsPassedIntoParseLineMulti --> isPending,org.junit.Assert.CSVParser,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVParserTest,returnPendingIfNullIsPassedIntoParseLineMulti --> csvParser,org.junit.Assert.CSVParser,READ);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,spacesAtEndOfQuotedStringDoNotCountIfStrictQuotesIsTrue --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,spacesAtEndOfQuotedStringDoNotCountIfStrictQuotesIsTrue --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,spacesAtEndOfQuotedStringDoNotCountIfStrictQuotesIsTrue --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,spacesAtEndOfQuotedStringDoNotCountIfStrictQuotesIsTrue --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,returnNullWhenNullPassedIn --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,returnNullWhenNullPassedIn --> assertNull,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,validateEscapeStringBeforeRealTest --> assertNotNull,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,validateEscapeStringBeforeRealTest --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,validateEscapeStringBeforeRealTest --> length,org.junit.Assert.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whichCharactersAreEscapable --> assertTrue,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whichCharactersAreEscapable --> isNextCharacterEscapable,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whichCharactersAreEscapable --> assertFalse,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whichCharactersAreEscapable --> isNextCharacterEscapable,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whichCharactersAreEscapable --> assertFalse,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whichCharactersAreEscapable --> isNextCharacterEscapable,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whichCharactersAreEscapable --> assertFalse,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whichCharactersAreEscapable --> isNextCharacterEscapable,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whichCharactersAreEscapable --> assertFalse,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whichCharactersAreEscapable --> isNextCharacterEscapable,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whichCharactersAreEscapable --> assertFalse,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whichCharactersAreEscapable --> isNextCharacterEscapable,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whichCharactersAreEscapable --> assertTrue,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whichCharactersAreEscapable --> isNextCharacterEscapable,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whichCharactersAreEscapable --> assertFalse,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whichCharactersAreEscapable --> isNextCharacterEscapable,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whichCharactersAreEscapable --> length,org.junit.Assert.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whichCharactersAreEscapable --> assertFalse,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whichCharactersAreEscapable --> isNextCharacterEscapable,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whichCharactersAreEscapable --> assertFalse,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whichCharactersAreEscapable --> isNextCharacterEscapable,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whitespaceBeforeEscape --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whitespaceBeforeEscape --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whitespaceBeforeEscape --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,whitespaceBeforeEscape --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2958242WithoutQuotes --> parseLine,org.junit.Assert.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2958242WithoutQuotes --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2958242WithoutQuotes --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2958242WithoutQuotes --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2958242WithoutQuotes --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVParserTest,testIssue2958242WithoutQuotes --> assertEquals,au.com.bytecode.opencsv.CSVParserTest,);
EndClass 30
StartClass 31
Class(au.com.bytecode.opencsv.CSVReaderBuilderTest,N,N,Public);
Attribute(builder,org.junit.Assert.CSVReaderBuilder,Private,N,N,);
Attribute(reader,java.io.Reader,Private,N,N,);
Method(setUp,void,Public,N,N);
Method(testDefaultBuilder,void,Public,N,N);
Method(testNullReader,void,Public,N,N);
Method(testWithCSVParserNull,void,Public,N,N);
Method(testWithCSVParser,void,Public,N,N);
Method(testWithSkipLines,void,Public,N,N);
Method(testWithSkipLinesZero,void,Public,N,N);
Method(testWithSkipLinesNegative,void,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,setUp --> mock,au.com.bytecode.opencsv.CSVReaderBuilderTest,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVReaderBuilderTest,setUp --> reader,java.io.Reader,WRITE);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVReaderBuilderTest,setUp --> builder,org.junit.Assert.CSVReaderBuilder,WRITE);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testDefaultBuilder --> assertSame,au.com.bytecode.opencsv.CSVReaderBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testDefaultBuilder --> assertNotNull,au.com.bytecode.opencsv.CSVReaderBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testDefaultBuilder --> assertNull,au.com.bytecode.opencsv.CSVReaderBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testDefaultBuilder --> assertEquals,au.com.bytecode.opencsv.CSVReaderBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testDefaultBuilder --> build,org.junit.Assert.CSVReaderBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testDefaultBuilder --> assertSame,au.com.bytecode.opencsv.CSVReaderBuilderTest,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVReaderBuilderTest,testNullReader --> builder,org.junit.Assert.CSVReaderBuilder,WRITE);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testWithCSVParserNull --> withCSVParser,org.junit.Assert.CSVReaderBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testWithCSVParserNull --> mock,au.com.bytecode.opencsv.CSVReaderBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testWithCSVParserNull --> withCSVParser,org.junit.Assert.CSVReaderBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testWithCSVParserNull --> assertNull,au.com.bytecode.opencsv.CSVReaderBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testWithCSVParser --> mock,au.com.bytecode.opencsv.CSVReaderBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testWithCSVParser --> withCSVParser,org.junit.Assert.CSVReaderBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testWithCSVParser --> assertSame,au.com.bytecode.opencsv.CSVReaderBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testWithCSVParser --> build,org.junit.Assert.CSVReaderBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testWithCSVParser --> assertSame,au.com.bytecode.opencsv.CSVReaderBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testWithSkipLines --> withSkipLines,org.junit.Assert.CSVReaderBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testWithSkipLines --> assertEquals,au.com.bytecode.opencsv.CSVReaderBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testWithSkipLines --> build,org.junit.Assert.CSVReaderBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testWithSkipLines --> assertSame,au.com.bytecode.opencsv.CSVReaderBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testWithSkipLinesZero --> withSkipLines,org.junit.Assert.CSVReaderBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testWithSkipLinesZero --> assertEquals,au.com.bytecode.opencsv.CSVReaderBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testWithSkipLinesZero --> build,org.junit.Assert.CSVReaderBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testWithSkipLinesZero --> assertSame,au.com.bytecode.opencsv.CSVReaderBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testWithSkipLinesNegative --> withSkipLines,org.junit.Assert.CSVReaderBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testWithSkipLinesNegative --> assertEquals,au.com.bytecode.opencsv.CSVReaderBuilderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testWithSkipLinesNegative --> build,org.junit.Assert.CSVReaderBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderBuilderTest,testWithSkipLinesNegative --> assertSame,au.com.bytecode.opencsv.CSVReaderBuilderTest,);
EndClass 31
StartClass 32
Class(au.com.bytecode.opencsv.CSVReaderTest,N,N,Public);
Attribute(csvr,org.junit.Assert.CSVReader,Public,N,N,);
Method(setUp,void,Public,N,N);
Method(testParseLine,void,Public,N,N);
Method(testParseLineStrictQuote,void,Public,N,N);
Method(testParseAll,void,Public,N,N);
Method(testOptionalConstructors,void,Public,N,N);
Method(parseQuotedStringWithDefinedSeperator,void,Public,N,N);
Method(testSkippingLines,void,Public,N,N);
Method(testSkippingLinesWithDifferentEscape,void,Public,N,N);
Method(testNormalParsedLine,void,Public,N,N);
Method(testASingleQuoteAsDataElement,void,Public,N,N);
Method(testASingleQuoteAsDataElementWithEmptyField,void,Public,N,N);
Method(testSpacesAtEndOfString,void,Public,N,N);
Method(testEscapedQuote,void,Public,N,N);
Method(testEscapedEscape,void,Public,N,N);
Method(testSingleQuoteWhenDoubleQuoteIsQuoteChar,void,Public,N,N);
Method(testQuotedParsedLine,void,Public,N,N);
Method(testIssue2992134OutOfPlaceQuotes,void,Public,N,N);
Method(quoteAndEscapeMustBeDifferent,void,Public,N,N);
Method(separatorAndEscapeMustBeDifferent,void,Public,N,N);
Method(separatorAndQuoteMustBeDifferent,void,Public,N,N);
Method(testIteratorFunctionality,void,Public,N,N);
Method(canCloseReader,void,Public,N,N);
Method(canCreateIteratorFromReader,void,Public,N,N);
Method(creatingIteratorForReaderWithNullDataThrowsRuntimeException,void,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,setUp --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,setUp --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,setUp --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,setUp --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,setUp --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,setUp --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,setUp --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,setUp --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,setUp --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,setUp --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,setUp --> toString,org.junit.Assert.StringBuilder,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVReaderTest,setUp --> csvr,org.junit.Assert.CSVReader,WRITE);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> assertNull,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> readNext,org.junit.Assert.CSVReader,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> csvr,org.junit.Assert.CSVReader,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> csvr,org.junit.Assert.CSVReader,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> csvr,org.junit.Assert.CSVReader,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> csvr,org.junit.Assert.CSVReader,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> csvr,org.junit.Assert.CSVReader,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVReaderTest,testParseLine --> csvr,org.junit.Assert.CSVReader,READ);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> toString,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> assertTrue,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> equals,org.junit.Assert.String[],);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> assertTrue,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> equals,org.junit.Assert.String[],);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> assertNull,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> readNext,org.junit.Assert.CSVReader,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> csvr,org.junit.Assert.CSVReader,WRITE);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> csvr,org.junit.Assert.CSVReader,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> csvr,org.junit.Assert.CSVReader,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> csvr,org.junit.Assert.CSVReader,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> csvr,org.junit.Assert.CSVReader,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> csvr,org.junit.Assert.CSVReader,READ);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVReaderTest,testParseLineStrictQuote --> csvr,org.junit.Assert.CSVReader,READ);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseAll --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseAll --> readAll,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testParseAll --> size,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testOptionalConstructors --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testOptionalConstructors --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testOptionalConstructors --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testOptionalConstructors --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testOptionalConstructors --> toString,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testOptionalConstructors --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testOptionalConstructors --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testOptionalConstructors --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testOptionalConstructors --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,parseQuotedStringWithDefinedSeperator --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,parseQuotedStringWithDefinedSeperator --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,parseQuotedStringWithDefinedSeperator --> toString,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,parseQuotedStringWithDefinedSeperator --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,parseQuotedStringWithDefinedSeperator --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSkippingLines --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSkippingLines --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSkippingLines --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSkippingLines --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSkippingLines --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSkippingLines --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSkippingLines --> toString,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSkippingLines --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSkippingLines --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSkippingLines --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSkippingLinesWithDifferentEscape --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSkippingLinesWithDifferentEscape --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSkippingLinesWithDifferentEscape --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSkippingLinesWithDifferentEscape --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSkippingLinesWithDifferentEscape --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSkippingLinesWithDifferentEscape --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSkippingLinesWithDifferentEscape --> toString,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSkippingLinesWithDifferentEscape --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSkippingLinesWithDifferentEscape --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSkippingLinesWithDifferentEscape --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSkippingLinesWithDifferentEscape --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testNormalParsedLine --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testNormalParsedLine --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testNormalParsedLine --> toString,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testNormalParsedLine --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testNormalParsedLine --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testNormalParsedLine --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testNormalParsedLine --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testNormalParsedLine --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testASingleQuoteAsDataElement --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testASingleQuoteAsDataElement --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testASingleQuoteAsDataElement --> toString,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testASingleQuoteAsDataElement --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testASingleQuoteAsDataElement --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testASingleQuoteAsDataElement --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testASingleQuoteAsDataElement --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testASingleQuoteAsDataElement --> length,org.junit.Assert.String[],);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testASingleQuoteAsDataElement --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testASingleQuoteAsDataElement --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testASingleQuoteAsDataElementWithEmptyField --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testASingleQuoteAsDataElementWithEmptyField --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testASingleQuoteAsDataElementWithEmptyField --> toString,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testASingleQuoteAsDataElementWithEmptyField --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testASingleQuoteAsDataElementWithEmptyField --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testASingleQuoteAsDataElementWithEmptyField --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testASingleQuoteAsDataElementWithEmptyField --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testASingleQuoteAsDataElementWithEmptyField --> length,org.junit.Assert.String[],);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testASingleQuoteAsDataElementWithEmptyField --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testASingleQuoteAsDataElementWithEmptyField --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSpacesAtEndOfString --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSpacesAtEndOfString --> toString,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSpacesAtEndOfString --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSpacesAtEndOfString --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSpacesAtEndOfString --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSpacesAtEndOfString --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSpacesAtEndOfString --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testEscapedQuote --> append,org.junit.Assert.StringBuffer,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testEscapedQuote --> append,org.junit.Assert.StringBuffer,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testEscapedQuote --> toString,org.junit.Assert.StringBuffer,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testEscapedQuote --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testEscapedQuote --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testEscapedQuote --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testEscapedEscape --> append,org.junit.Assert.StringBuffer,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testEscapedEscape --> append,org.junit.Assert.StringBuffer,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testEscapedEscape --> toString,org.junit.Assert.StringBuffer,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testEscapedEscape --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testEscapedEscape --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testEscapedEscape --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSingleQuoteWhenDoubleQuoteIsQuoteChar --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSingleQuoteWhenDoubleQuoteIsQuoteChar --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSingleQuoteWhenDoubleQuoteIsQuoteChar --> toString,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSingleQuoteWhenDoubleQuoteIsQuoteChar --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSingleQuoteWhenDoubleQuoteIsQuoteChar --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSingleQuoteWhenDoubleQuoteIsQuoteChar --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSingleQuoteWhenDoubleQuoteIsQuoteChar --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSingleQuoteWhenDoubleQuoteIsQuoteChar --> length,org.junit.Assert.String[],);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSingleQuoteWhenDoubleQuoteIsQuoteChar --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testSingleQuoteWhenDoubleQuoteIsQuoteChar --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testQuotedParsedLine --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testQuotedParsedLine --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testQuotedParsedLine --> toString,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testQuotedParsedLine --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testQuotedParsedLine --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testQuotedParsedLine --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testQuotedParsedLine --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testQuotedParsedLine --> length,org.junit.Assert.String[],);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testQuotedParsedLine --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testQuotedParsedLine --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testIssue2992134OutOfPlaceQuotes --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testIssue2992134OutOfPlaceQuotes --> toString,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testIssue2992134OutOfPlaceQuotes --> readNext,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testIssue2992134OutOfPlaceQuotes --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testIssue2992134OutOfPlaceQuotes --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testIssue2992134OutOfPlaceQuotes --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testIssue2992134OutOfPlaceQuotes --> assertEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,quoteAndEscapeMustBeDifferent --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,quoteAndEscapeMustBeDifferent --> toString,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,separatorAndEscapeMustBeDifferent --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,separatorAndEscapeMustBeDifferent --> toString,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,separatorAndQuoteMustBeDifferent --> append,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,separatorAndQuoteMustBeDifferent --> toString,org.junit.Assert.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,testIteratorFunctionality --> assertArrayEquals,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,canCloseReader --> close,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,canCreateIteratorFromReader --> assertNotNull,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,canCreateIteratorFromReader --> iterator,org.junit.Assert.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,creatingIteratorForReaderWithNullDataThrowsRuntimeException --> mock,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,creatingIteratorForReaderWithNullDataThrowsRuntimeException --> when,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,creatingIteratorForReaderWithNullDataThrowsRuntimeException --> read,org.junit.Assert.Reader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,creatingIteratorForReaderWithNullDataThrowsRuntimeException --> thenThrow,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,creatingIteratorForReaderWithNullDataThrowsRuntimeException --> when,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,creatingIteratorForReaderWithNullDataThrowsRuntimeException --> read,org.junit.Assert.Reader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,creatingIteratorForReaderWithNullDataThrowsRuntimeException --> thenThrow,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,creatingIteratorForReaderWithNullDataThrowsRuntimeException --> when,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,creatingIteratorForReaderWithNullDataThrowsRuntimeException --> read,org.junit.Assert.Reader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,creatingIteratorForReaderWithNullDataThrowsRuntimeException --> notNull,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,creatingIteratorForReaderWithNullDataThrowsRuntimeException --> thenThrow,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,creatingIteratorForReaderWithNullDataThrowsRuntimeException --> when,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,creatingIteratorForReaderWithNullDataThrowsRuntimeException --> read,org.junit.Assert.Reader,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,creatingIteratorForReaderWithNullDataThrowsRuntimeException --> notNull,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,creatingIteratorForReaderWithNullDataThrowsRuntimeException --> anyInt,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,creatingIteratorForReaderWithNullDataThrowsRuntimeException --> anyInt,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,creatingIteratorForReaderWithNullDataThrowsRuntimeException --> thenThrow,au.com.bytecode.opencsv.CSVReaderTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVReaderTest,creatingIteratorForReaderWithNullDataThrowsRuntimeException --> iterator,org.junit.Assert.CSVReader,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.CSVReaderTest,creatingIteratorForReaderWithNullDataThrowsRuntimeException --> csvr,org.junit.Assert.CSVReader,WRITE);
EndClass 32
StartClass 33
Class(au.com.bytecode.opencsv.CSVWriterTest,N,N,Public);
Method(invokeWriter,java.io.String,Private,N,N);
Method(invokeNoEscapeWriter,java.io.String,Private,N,N);
Method(correctlyParseNullString,void,Public,N,N);
Method(correctlyParserNullObject,void,Public,N,N);
Method(testParseLine,void,Public,N,N);
Method(testSpecialCharacters,void,Public,N,N);
Method(parseLineWithBothEscapeAndQuoteChar,void,Public,N,N);
Method(testParseLineWithNoEscapeChar,void,Public,N,N);
Method(parseLineWithNoEscapeCharAndQuotes,void,Public,N,N);
Method(testWriteAll,void,Public,N,N);
Method(testWriteAllObjects,void,Public,N,N);
Method(testNoQuoteChars,void,Public,N,N);
Method(testNoQuoteCharsAndNoEscapeChars,void,Public,N,N);
Method(testIntelligentQuotes,void,Public,N,N);
Method(testNullValues,void,Public,N,N);
Method(testStreamFlushing,void,Public,N,N);
Method(flushWillThrowIOException,void,Public,N,N);
Method(flushQuietlyWillNotThrowException,void,Public,N,N);
Method(testAlternateEscapeChar,void,Public,N,N);
Method(testNoQuotingNoEscaping,void,Public,N,N);
Method(testNestedQuotes,void,Public,N,N);
Method(testAlternateLineFeeds,void,Public,N,N);
Method(testResultSetWithHeaders,void,Public,N,N);
Method(testMultiLineResultSetWithHeaders,void,Public,N,N);
Method(testResultSetWithoutHeaders,void,Public,N,N);
Method(testMultiLineResultSetWithoutHeaders,void,Public,N,N);
Method(testResultSetTrim,void,Public,N,N);
Method(<init>,void,Public,N,N);
Parameter(invokeWriter,java.io.String[],);
Parameter(invokeNoEscapeWriter,java.io.String[],);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,invokeWriter --> writeNext,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,invokeWriter --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,invokeNoEscapeWriter --> writeNext,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,invokeNoEscapeWriter --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,correctlyParseNullString --> writeNext,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,correctlyParseNullString --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,correctlyParseNullString --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,correctlyParseNullString --> length,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,correctlyParserNullObject --> writeNext,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,correctlyParserNullObject --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,correctlyParserNullObject --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,correctlyParserNullObject --> length,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testParseLine --> invokeWriter,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testParseLine --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testParseLine --> invokeWriter,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testParseLine --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testParseLine --> invokeWriter,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testParseLine --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testParseLine --> invokeWriter,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testParseLine --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testParseLine --> invokeWriter,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testParseLine --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testSpecialCharacters --> invokeWriter,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testSpecialCharacters --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,parseLineWithBothEscapeAndQuoteChar --> invokeWriter,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,parseLineWithBothEscapeAndQuoteChar --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testParseLineWithNoEscapeChar --> invokeNoEscapeWriter,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testParseLineWithNoEscapeChar --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testParseLineWithNoEscapeChar --> invokeNoEscapeWriter,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testParseLineWithNoEscapeChar --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testParseLineWithNoEscapeChar --> invokeNoEscapeWriter,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testParseLineWithNoEscapeChar --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testParseLineWithNoEscapeChar --> invokeNoEscapeWriter,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testParseLineWithNoEscapeChar --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,parseLineWithNoEscapeCharAndQuotes --> invokeNoEscapeWriter,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,parseLineWithNoEscapeCharAndQuotes --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testWriteAll --> split,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testWriteAll --> split,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testWriteAll --> split,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testWriteAll --> add,java.io.List,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testWriteAll --> add,java.io.List,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testWriteAll --> add,java.io.List,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testWriteAll --> writeAll,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testWriteAll --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testWriteAll --> split,java.io.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testWriteAll --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testWriteAllObjects --> split,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testWriteAllObjects --> split,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testWriteAllObjects --> split,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testWriteAllObjects --> add,java.io.List,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testWriteAllObjects --> add,java.io.List,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testWriteAllObjects --> add,java.io.List,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testWriteAllObjects --> writeAll,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testWriteAllObjects --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testWriteAllObjects --> split,java.io.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testWriteAllObjects --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testWriteAllObjects --> split,java.io.String[],);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testWriteAllObjects --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNoQuoteChars --> writeNext,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNoQuoteChars --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNoQuoteChars --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNoQuoteCharsAndNoEscapeChars --> writeNext,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNoQuoteCharsAndNoEscapeChars --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNoQuoteCharsAndNoEscapeChars --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testIntelligentQuotes --> writeNext,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testIntelligentQuotes --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testIntelligentQuotes --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNullValues --> writeNext,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNullValues --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNullValues --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testStreamFlushing --> writeNext,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testStreamFlushing --> close,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,flushWillThrowIOException --> writeNext,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,flushWillThrowIOException --> flush,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,flushQuietlyWillNotThrowException --> writeNext,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,flushQuietlyWillNotThrowException --> flushQuietly,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testAlternateEscapeChar --> writeNext,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testAlternateEscapeChar --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testAlternateEscapeChar --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNoQuotingNoEscaping --> writeNext,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNoQuotingNoEscaping --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNoQuotingNoEscaping --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNestedQuotes --> createTempFile,null,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNestedQuotes --> deleteOnExit,java.io.File,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNestedQuotes --> fail,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNestedQuotes --> writeNext,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNestedQuotes --> close,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNestedQuotes --> fail,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNestedQuotes --> flush,java.io.FileWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNestedQuotes --> fail,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNestedQuotes --> fail,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNestedQuotes --> read,java.io.FileReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNestedQuotes --> append,java.io.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNestedQuotes --> close,java.io.FileReader,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNestedQuotes --> fail,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNestedQuotes --> assertTrue,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNestedQuotes --> equals,java.io.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testNestedQuotes --> toString,java.io.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testAlternateLineFeeds --> writeNext,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testAlternateLineFeeds --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testAlternateLineFeeds --> assertTrue,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testAlternateLineFeeds --> endsWith,java.io.String,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testResultSetWithHeaders --> setResultService,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testResultSetWithHeaders --> buildResultSet,null,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testResultSetWithHeaders --> writeAll,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testResultSetWithHeaders --> assertFalse,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testResultSetWithHeaders --> checkError,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testResultSetWithHeaders --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testResultSetWithHeaders --> assertNotNull,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testResultSetWithHeaders --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testMultiLineResultSetWithHeaders --> setResultService,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testMultiLineResultSetWithHeaders --> buildResultSet,null,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testMultiLineResultSetWithHeaders --> writeAll,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testMultiLineResultSetWithHeaders --> assertFalse,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testMultiLineResultSetWithHeaders --> checkError,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testMultiLineResultSetWithHeaders --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testMultiLineResultSetWithHeaders --> assertNotNull,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testMultiLineResultSetWithHeaders --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testResultSetWithoutHeaders --> setResultService,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testResultSetWithoutHeaders --> buildResultSet,null,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testResultSetWithoutHeaders --> writeAll,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testResultSetWithoutHeaders --> assertFalse,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testResultSetWithoutHeaders --> checkError,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testResultSetWithoutHeaders --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testResultSetWithoutHeaders --> assertNotNull,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testResultSetWithoutHeaders --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testMultiLineResultSetWithoutHeaders --> setResultService,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testMultiLineResultSetWithoutHeaders --> buildResultSet,null,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testMultiLineResultSetWithoutHeaders --> writeAll,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testMultiLineResultSetWithoutHeaders --> assertFalse,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testMultiLineResultSetWithoutHeaders --> checkError,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testMultiLineResultSetWithoutHeaders --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testMultiLineResultSetWithoutHeaders --> assertNotNull,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testMultiLineResultSetWithoutHeaders --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testResultSetTrim --> setResultService,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testResultSetTrim --> buildResultSet,null,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testResultSetTrim --> writeAll,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testResultSetTrim --> assertFalse,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testResultSetTrim --> checkError,java.io.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testResultSetTrim --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testResultSetTrim --> assertNotNull,au.com.bytecode.opencsv.CSVWriterTest,);
Call(METHOD,au.com.bytecode.opencsv.CSVWriterTest,testResultSetTrim --> assertEquals,au.com.bytecode.opencsv.CSVWriterTest,);
EndClass 33
StartClass 34
Class(au.com.bytecode.opencsv.MockClob,N,N,Public);
Attribute(clobValue,java.io.String,Private,N,N,);
Method(<init>,void,Public,N,N);
Method(length,long,Public,N,N);
Method(getSubString,java.io.String,Public,N,N);
Method(getCharacterStream,java.io.Reader,Public,N,N);
Method(getAsciiStream,java.io.InputStream,Public,N,N);
Method(position,long,Public,N,N);
Method(position$2,long,Public,N,N);
Method(setString,int,Public,N,N);
Method(setString$2,int,Public,N,N);
Method(setAsciiStream,java.io.OutputStream,Public,N,N);
Method(setCharacterStream,java.io.Writer,Public,N,N);
Method(truncate,void,Public,N,N);
Method(free,void,Public,N,N);
Method(getCharacterStream$2,java.io.Reader,Public,N,N);
Parameter(<init>,java.io.String,);
Parameter(getSubString,long,);
Parameter(getSubString,int,);
Parameter(position,java.io.String,);
Parameter(position,long,);
Parameter(position$2,java.io.Clob,);
Parameter(position$2,long,);
Parameter(setString,long,);
Parameter(setString,java.io.String,);
Parameter(setString$2,long,);
Parameter(setString$2,java.io.String,);
Parameter(setString$2,int,);
Parameter(setString$2,int,);
Parameter(setAsciiStream,long,);
Parameter(setCharacterStream,long,);
Parameter(truncate,long,);
Parameter(getCharacterStream$2,long,);
Parameter(getCharacterStream$2,long,);
Realization(java.io.Clob);
Call(ATTRIBUTE,au.com.bytecode.opencsv.MockClob,<init> --> clobValue,java.io.String,WRITE);
EndClass 34
StartClass 35
Class(java.io.Clob,Y,Y,Public);
EndClass 35
StartClass 36
Class(au.com.bytecode.opencsv.MockResultSetBuilder,N,N,Public);
Method(buildResultSet,java.sql.ResultSet,Public,Y,N);
Method(setExpectToGetColumnValue,void,Private,Y,N);
Method(createClobFromString,java.sql.Clob,Private,Y,N);
Method(createDateFromMilliSeconds,java.sql.Date,Private,Y,N);
Method(createTimeFromMilliSeconds,java.sql.Time,Private,Y,N);
Method(createTimeStampFromMilliSeconds,java.sql.Timestamp,Private,Y,N);
Method(buildResultSet$2,java.sql.ResultSet,Public,Y,N);
Method(buildStringExpects,void,Private,Y,N);
Method(buildNextExpect,void,Private,Y,N);
Method(<init>,void,Public,N,N);
Parameter(buildResultSet,java.sql.ResultSetMetaData,);
Parameter(buildResultSet,java.sql.String[],);
Parameter(buildResultSet,int[],);
Parameter(setExpectToGetColumnValue,java.sql.ResultSet,);
Parameter(setExpectToGetColumnValue,int,);
Parameter(setExpectToGetColumnValue,java.sql.String,);
Parameter(setExpectToGetColumnValue,int,);
Parameter(setExpectToGetColumnValue,java.util.List,);
Parameter(createClobFromString,java.sql.String,);
Parameter(createDateFromMilliSeconds,java.sql.String,);
Parameter(createTimeFromMilliSeconds,java.sql.String,);
Parameter(createTimeStampFromMilliSeconds,java.sql.String,);
Parameter(buildResultSet$2,java.sql.String[],);
Parameter(buildResultSet$2,java.sql.String[],);
Parameter(buildResultSet$2,int,);
Parameter(buildStringExpects,java.sql.ResultSet,);
Parameter(buildStringExpects,int,);
Parameter(buildStringExpects,java.sql.String,);
Parameter(buildStringExpects,int,);
Parameter(buildNextExpect,java.sql.ResultSet,);
Parameter(buildNextExpect,int,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildResultSet --> mock,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildResultSet --> when,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildResultSet --> getMetaData,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildResultSet --> thenReturn,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildResultSet --> setExpectToGetColumnValue,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildResultSet --> isEmpty,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildResultSet --> get,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildResultSet --> remove,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildResultSet --> size,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildResultSet --> isEmpty,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildResultSet --> when,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildResultSet --> wasNull,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildResultSet --> thenReturn,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildResultSet --> when,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildResultSet --> wasNull,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildResultSet --> thenReturn,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> when,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> getObject,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> thenReturn,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> when,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> getBoolean,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> thenReturn,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> valueOf,null,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> when,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> getLong,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> thenReturn,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> valueOf,null,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> longValue,null,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> add,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> when,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> getBigDecimal,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> thenReturn,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> when,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> getInt,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> thenReturn,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> intValue,java.sql.Integer,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> add,java.util.List,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> when,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> getString,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> thenReturn,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> createDateFromMilliSeconds,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> when,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> getDate,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> thenReturn,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> createTimeFromMilliSeconds,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> when,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> getTime,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> thenReturn,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> createTimeStampFromMilliSeconds,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> when,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> getTimestamp,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> thenReturn,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> createClobFromString,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> when,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> getClob,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,setExpectToGetColumnValue --> thenReturn,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,createClobFromString --> toCharArray,java.sql.String,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,createDateFromMilliSeconds --> valueOf,null,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,createTimeFromMilliSeconds --> valueOf,null,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,createTimeStampFromMilliSeconds --> valueOf,null,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildResultSet$2 --> mock,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildResultSet$2 --> buildMetaData,null,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildResultSet$2 --> when,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildResultSet$2 --> getMetaData,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildResultSet$2 --> thenReturn,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildResultSet$2 --> buildStringExpects,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildResultSet$2 --> buildNextExpect,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildStringExpects --> when,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildStringExpects --> getString,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildStringExpects --> thenReturn,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildStringExpects --> when,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildStringExpects --> getString,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildStringExpects --> thenReturn,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildNextExpect --> when,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildNextExpect --> next,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildNextExpect --> thenReturn,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildNextExpect --> when,au.com.bytecode.opencsv.MockResultSetBuilder,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildNextExpect --> next,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetBuilder,buildNextExpect --> thenReturn,au.com.bytecode.opencsv.MockResultSetBuilder,);
EndClass 36
StartClass 37
Class(au.com.bytecode.opencsv.MockResultSetMetaDataBuilder,N,N,Public);
Method(buildMetaData,java.sql.ResultSetMetaData,Public,Y,N);
Method(buildMetaData$2,java.sql.ResultSetMetaData,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(buildMetaData,java.lang.String[],);
Parameter(buildMetaData$2,java.lang.String[],);
Parameter(buildMetaData$2,int[],);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetMetaDataBuilder,buildMetaData --> mock,null,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetMetaDataBuilder,buildMetaData --> when,null,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetMetaDataBuilder,buildMetaData --> getColumnCount,java.sql.ResultSetMetaData,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetMetaDataBuilder,buildMetaData --> thenReturn,null,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetMetaDataBuilder,buildMetaData --> when,null,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetMetaDataBuilder,buildMetaData --> getColumnName,java.sql.ResultSetMetaData,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetMetaDataBuilder,buildMetaData --> thenReturn,null,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetMetaDataBuilder,buildMetaData --> when,null,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetMetaDataBuilder,buildMetaData --> getColumnType,java.sql.ResultSetMetaData,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetMetaDataBuilder,buildMetaData --> thenReturn,null,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetMetaDataBuilder,buildMetaData$2 --> mock,null,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetMetaDataBuilder,buildMetaData$2 --> when,null,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetMetaDataBuilder,buildMetaData$2 --> getColumnCount,java.sql.ResultSetMetaData,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetMetaDataBuilder,buildMetaData$2 --> thenReturn,null,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetMetaDataBuilder,buildMetaData$2 --> when,null,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetMetaDataBuilder,buildMetaData$2 --> getColumnName,java.sql.ResultSetMetaData,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetMetaDataBuilder,buildMetaData$2 --> thenReturn,null,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetMetaDataBuilder,buildMetaData$2 --> when,null,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetMetaDataBuilder,buildMetaData$2 --> getColumnType,java.sql.ResultSetMetaData,);
Call(METHOD,au.com.bytecode.opencsv.MockResultSetMetaDataBuilder,buildMetaData$2 --> thenReturn,null,);
EndClass 37
StartClass 38
Class(au.com.bytecode.opencsv.OpencsvTest,N,N,Public);
Attribute(tempFile,java.io.File,Private,N,N,);
Attribute(writer,au.com.bytecode.opencsv.CSVWriter,Private,N,N,);
Attribute(reader,au.com.bytecode.opencsv.CSVReader,Private,N,N,);
Method(setUp,void,Public,N,N);
Method(testWriteRead,void,Public,N,N);
Method(<init>,void,Public,N,N);
Composition(au.com.bytecode.opencsv.CSVWriter);
Composition(au.com.bytecode.opencsv.CSVReader);
Call(METHOD,au.com.bytecode.opencsv.OpencsvTest,setUp --> createTempFile,null,);
Call(METHOD,au.com.bytecode.opencsv.OpencsvTest,setUp --> deleteOnExit,java.io.File,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.OpencsvTest,setUp --> tempFile,java.io.File,WRITE);
Call(METHOD,au.com.bytecode.opencsv.OpencsvTest,testWriteRead --> writeNext,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.OpencsvTest,testWriteRead --> close,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.OpencsvTest,testWriteRead --> readNext,au.com.bytecode.opencsv.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.OpencsvTest,testWriteRead --> assertTrue,au.com.bytecode.opencsv.OpencsvTest,);
Call(METHOD,au.com.bytecode.opencsv.OpencsvTest,testWriteRead --> assertTrue,au.com.bytecode.opencsv.OpencsvTest,);
Call(METHOD,au.com.bytecode.opencsv.OpencsvTest,testWriteRead --> equals,java.lang.String[],);
Call(METHOD,au.com.bytecode.opencsv.OpencsvTest,testWriteRead --> assertTrue,au.com.bytecode.opencsv.OpencsvTest,);
Call(METHOD,au.com.bytecode.opencsv.OpencsvTest,testWriteRead --> equals,java.lang.String[],);
Call(METHOD,au.com.bytecode.opencsv.OpencsvTest,testWriteRead --> close,au.com.bytecode.opencsv.CSVReader,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.OpencsvTest,testWriteRead --> writer,au.com.bytecode.opencsv.CSVWriter,WRITE);
Call(ATTRIBUTE,au.com.bytecode.opencsv.OpencsvTest,testWriteRead --> reader,au.com.bytecode.opencsv.CSVReader,WRITE);
Call(ATTRIBUTE,au.com.bytecode.opencsv.OpencsvTest,testWriteRead --> reader,au.com.bytecode.opencsv.CSVReader,READ);
EndClass 38
StartClass 39
Class(au.com.bytecode.opencsv.ResultSetHelperServiceTest,N,N,Public);
Attribute(BUILDSTRING,java.sql.String,Private,Y,Y,);
Method(canPrintColumnNames,void,Public,N,N);
Method(getObjectFromResultSet,void,Public,N,N);
Method(getBitFromResultSet,void,Public,N,N);
Method(getBooleanFromResultSet,void,Public,N,N);
Method(getBigIntFromResultSet,void,Public,N,N);
Method(getBigDecimalFromResultSet,void,Public,N,N);
Method(getIntegerFromResultSet,void,Public,N,N);
Method(getCharFromResultSet,void,Public,N,N);
Method(getCharHandlesNulls,void,Public,N,N);
Method(getUnsupportedFromResultSet,void,Public,N,N);
Method(getDateFromResultSet,void,Public,N,N);
Method(getDateFromResultSetUsingCustomFormat,void,Public,N,N);
Method(getTimeFromResultSet,void,Public,N,N);
Method(getTimestampFromResultSet,void,Public,N,N);
Method(getTimestampFromResultSetWithCustomFormat,void,Public,N,N);
Method(getClobFromResultSet,void,Public,N,N);
Method(getEmptyClobFromResultSet,void,Public,N,N);
Method(getLargeClobFromResultSet,void,Public,N,N);
Method(buildClobString,java.sql.String,Private,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(buildClobString,int,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,canPrintColumnNames --> mock,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,canPrintColumnNames --> buildMetaData,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,canPrintColumnNames --> when,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,canPrintColumnNames --> getMetaData,java.sql.ResultSet,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,canPrintColumnNames --> thenReturn,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,canPrintColumnNames --> getColumnNames,java.sql.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,canPrintColumnNames --> assertArrayEquals,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getObjectFromResultSet --> buildMetaData,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getObjectFromResultSet --> buildResultSet,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getObjectFromResultSet --> getColumnValues,java.sql.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getObjectFromResultSet --> assertArrayEquals,au.com.bytecode.opencsv.ResultSetHelperServiceTest,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getBitFromResultSet --> buildMetaData,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getBitFromResultSet --> buildResultSet,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getBitFromResultSet --> getColumnValues,java.sql.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getBitFromResultSet --> assertArrayEquals,au.com.bytecode.opencsv.ResultSetHelperServiceTest,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getBooleanFromResultSet --> buildMetaData,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getBooleanFromResultSet --> buildResultSet,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getBooleanFromResultSet --> getColumnValues,java.sql.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getBooleanFromResultSet --> assertArrayEquals,au.com.bytecode.opencsv.ResultSetHelperServiceTest,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getBigIntFromResultSet --> buildMetaData,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getBigIntFromResultSet --> buildResultSet,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getBigIntFromResultSet --> getColumnValues,java.sql.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getBigIntFromResultSet --> assertArrayEquals,au.com.bytecode.opencsv.ResultSetHelperServiceTest,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getBigDecimalFromResultSet --> buildMetaData,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getBigDecimalFromResultSet --> buildResultSet,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getBigDecimalFromResultSet --> getColumnValues,java.sql.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getBigDecimalFromResultSet --> assertArrayEquals,au.com.bytecode.opencsv.ResultSetHelperServiceTest,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getIntegerFromResultSet --> buildMetaData,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getIntegerFromResultSet --> buildResultSet,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getIntegerFromResultSet --> getColumnValues,java.sql.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getIntegerFromResultSet --> assertArrayEquals,au.com.bytecode.opencsv.ResultSetHelperServiceTest,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getCharFromResultSet --> buildMetaData,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getCharFromResultSet --> buildResultSet,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getCharFromResultSet --> getColumnValues,java.sql.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getCharFromResultSet --> assertArrayEquals,au.com.bytecode.opencsv.ResultSetHelperServiceTest,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getCharHandlesNulls --> buildMetaData,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getCharHandlesNulls --> buildResultSet,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getCharHandlesNulls --> getColumnValues,java.sql.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getCharHandlesNulls --> assertArrayEquals,au.com.bytecode.opencsv.ResultSetHelperServiceTest,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getUnsupportedFromResultSet --> buildMetaData,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getUnsupportedFromResultSet --> buildResultSet,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getUnsupportedFromResultSet --> getColumnValues,java.sql.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getUnsupportedFromResultSet --> assertArrayEquals,au.com.bytecode.opencsv.ResultSetHelperServiceTest,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getDateFromResultSet --> getTime,java.sql.Date,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getDateFromResultSet --> toString,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getDateFromResultSet --> format,java.sql.SimpleDateFormat,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getDateFromResultSet --> buildMetaData,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getDateFromResultSet --> buildResultSet,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getDateFromResultSet --> getColumnValues,java.sql.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getDateFromResultSet --> assertArrayEquals,au.com.bytecode.opencsv.ResultSetHelperServiceTest,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getDateFromResultSetUsingCustomFormat --> getTime,java.sql.Date,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getDateFromResultSetUsingCustomFormat --> toString,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getDateFromResultSetUsingCustomFormat --> format,java.sql.SimpleDateFormat,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getDateFromResultSetUsingCustomFormat --> buildMetaData,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getDateFromResultSetUsingCustomFormat --> buildResultSet,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getDateFromResultSetUsingCustomFormat --> getColumnValues,java.sql.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getDateFromResultSetUsingCustomFormat --> assertArrayEquals,au.com.bytecode.opencsv.ResultSetHelperServiceTest,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getTimeFromResultSet --> getTime,java.sql.Time,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getTimeFromResultSet --> toString,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getTimeFromResultSet --> toString,java.sql.Time,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getTimeFromResultSet --> buildMetaData,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getTimeFromResultSet --> buildResultSet,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getTimeFromResultSet --> getColumnValues,java.sql.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getTimeFromResultSet --> assertArrayEquals,au.com.bytecode.opencsv.ResultSetHelperServiceTest,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getTimestampFromResultSet --> getTime,java.sql.Timestamp,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getTimestampFromResultSet --> toString,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getTimestampFromResultSet --> format,java.sql.SimpleDateFormat,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getTimestampFromResultSet --> buildMetaData,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getTimestampFromResultSet --> buildResultSet,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getTimestampFromResultSet --> getColumnValues,java.sql.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getTimestampFromResultSet --> assertArrayEquals,au.com.bytecode.opencsv.ResultSetHelperServiceTest,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getTimestampFromResultSetWithCustomFormat --> getTime,java.sql.Timestamp,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getTimestampFromResultSetWithCustomFormat --> toString,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getTimestampFromResultSetWithCustomFormat --> format,java.sql.SimpleDateFormat,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getTimestampFromResultSetWithCustomFormat --> buildMetaData,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getTimestampFromResultSetWithCustomFormat --> buildResultSet,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getTimestampFromResultSetWithCustomFormat --> getColumnValues,java.sql.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getTimestampFromResultSetWithCustomFormat --> assertArrayEquals,au.com.bytecode.opencsv.ResultSetHelperServiceTest,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getClobFromResultSet --> buildClobString,au.com.bytecode.opencsv.ResultSetHelperServiceTest,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getClobFromResultSet --> buildMetaData,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getClobFromResultSet --> buildResultSet,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getClobFromResultSet --> getColumnValues,java.sql.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getClobFromResultSet --> assertArrayEquals,au.com.bytecode.opencsv.ResultSetHelperServiceTest,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getEmptyClobFromResultSet --> buildClobString,au.com.bytecode.opencsv.ResultSetHelperServiceTest,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getEmptyClobFromResultSet --> buildMetaData,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getEmptyClobFromResultSet --> buildResultSet,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getEmptyClobFromResultSet --> getColumnValues,java.sql.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getEmptyClobFromResultSet --> assertArrayEquals,au.com.bytecode.opencsv.ResultSetHelperServiceTest,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getLargeClobFromResultSet --> buildClobString,au.com.bytecode.opencsv.ResultSetHelperServiceTest,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getLargeClobFromResultSet --> buildMetaData,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getLargeClobFromResultSet --> buildResultSet,null,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getLargeClobFromResultSet --> getColumnValues,java.sql.ResultSetHelperService,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,getLargeClobFromResultSet --> assertArrayEquals,au.com.bytecode.opencsv.ResultSetHelperServiceTest,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,buildClobString --> length,java.sql.String,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,buildClobString --> length,java.sql.String,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,buildClobString --> append,java.sql.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,buildClobString --> append,java.sql.StringBuilder,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,buildClobString --> substring,java.sql.String,);
Call(METHOD,au.com.bytecode.opencsv.ResultSetHelperServiceTest,buildClobString --> toString,java.sql.StringBuilder,);
EndClass 39
StartClass 40
Class(au.com.bytecode.opencsv.TestUtilities,N,N,Public);
Method(displayStringArray,java.lang.String,Public,Y,N);
Method(appendTab,void,Private,Y,N);
Method(appendNewLine,void,Private,Y,N);
Method(<init>,void,Public,N,N);
Parameter(displayStringArray,java.lang.String,);
Parameter(displayStringArray,java.lang.String[],);
Parameter(appendTab,java.lang.StringBuffer,);
Parameter(appendNewLine,java.lang.StringBuffer,);
Call(METHOD,au.com.bytecode.opencsv.TestUtilities,displayStringArray --> append,java.lang.StringBuffer,);
Call(METHOD,au.com.bytecode.opencsv.TestUtilities,displayStringArray --> appendNewLine,au.com.bytecode.opencsv.TestUtilities,);
Call(METHOD,au.com.bytecode.opencsv.TestUtilities,displayStringArray --> append,java.lang.StringBuffer,);
Call(METHOD,au.com.bytecode.opencsv.TestUtilities,displayStringArray --> appendTab,au.com.bytecode.opencsv.TestUtilities,);
Call(METHOD,au.com.bytecode.opencsv.TestUtilities,displayStringArray --> append,java.lang.StringBuffer,);
Call(METHOD,au.com.bytecode.opencsv.TestUtilities,displayStringArray --> appendNewLine,au.com.bytecode.opencsv.TestUtilities,);
Call(METHOD,au.com.bytecode.opencsv.TestUtilities,displayStringArray --> append,java.lang.StringBuffer,);
Call(METHOD,au.com.bytecode.opencsv.TestUtilities,displayStringArray --> append,java.lang.StringBuffer,);
Call(METHOD,au.com.bytecode.opencsv.TestUtilities,displayStringArray --> append,java.lang.StringBuffer,);
Call(METHOD,au.com.bytecode.opencsv.TestUtilities,displayStringArray --> appendTab,au.com.bytecode.opencsv.TestUtilities,);
Call(METHOD,au.com.bytecode.opencsv.TestUtilities,displayStringArray --> append,java.lang.StringBuffer,);
Call(METHOD,au.com.bytecode.opencsv.TestUtilities,displayStringArray --> appendNewLine,au.com.bytecode.opencsv.TestUtilities,);
Call(METHOD,au.com.bytecode.opencsv.TestUtilities,displayStringArray --> toString,java.lang.StringBuffer,);
Call(METHOD,au.com.bytecode.opencsv.TestUtilities,appendTab --> append,java.lang.StringBuffer,);
Call(METHOD,au.com.bytecode.opencsv.TestUtilities,appendNewLine --> append,java.lang.StringBuffer,);
EndClass 40
StartClass 41
Class(au.com.bytecode.opencsv.TestUtilitiesTest,N,N,Public);
Method(displayStringArray,void,Public,N,N);
Method(<init>,void,Public,N,N);
Call(METHOD,au.com.bytecode.opencsv.TestUtilitiesTest,displayStringArray --> assertEquals,au.com.bytecode.opencsv.TestUtilitiesTest,);
Call(METHOD,au.com.bytecode.opencsv.TestUtilitiesTest,displayStringArray --> displayStringArray,null,);
EndClass 41
StartClass 42
Class(au.com.bytecode.opencsv.UniCodeTest,N,N,Public);
Attribute(csvParser,au.com.bytecode.opencsv.CSVParser,Public,N,N,);
Attribute(COMPOUND_STRING,java.lang.String,Private,Y,Y,);
Attribute(COMPOUND_STRING_WITH_QUOTES,java.lang.String,Private,Y,Y,);
Attribute(FIRST_STRING,java.lang.String,Private,Y,Y,);
Attribute(SECOND_STRING,java.lang.String,Private,Y,Y,);
Attribute(UNICODE_ARRAY,java.lang.String[],Private,Y,Y,);
Attribute(MIXED_ARRAY,java.lang.String[],Private,Y,Y,);
Attribute(ASCII_ARRAY,java.lang.String[],Private,Y,Y,);
Attribute(ASCII_STRING_WITH_QUOTES,java.lang.String,Private,Y,Y,);
Method(canParseUnicode,void,Public,N,N);
Method(readerTest,void,Public,N,N);
Method(writerTest,void,Public,N,N);
Method(runUniCodeThroughCSVReader,void,Public,N,N);
Method(runUniCodeThroughCSVWriter,void,Public,N,N);
Method(runASCIIThroughCSVWriter,void,Public,N,N);
Method(writeThenReadAscii,void,Public,N,N);
Method(writeThenReadTwiceAscii,void,Public,N,N);
Method(writeThenReadTwiceUnicode,void,Public,N,N);
Method(writeThenReadTwiceMixedUnicode,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Composition(au.com.bytecode.opencsv.CSVParser);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,canParseUnicode --> parseLine,au.com.bytecode.opencsv.CSVParser,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,canParseUnicode --> assertEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,canParseUnicode --> assertEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,canParseUnicode --> assertEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,canParseUnicode --> assertArrayEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(ATTRIBUTE,au.com.bytecode.opencsv.UniCodeTest,canParseUnicode --> csvParser,au.com.bytecode.opencsv.CSVParser,WRITE);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,readerTest --> readLine,java.io.BufferedReader,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,readerTest --> assertEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writerTest --> write,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writerTest --> assertEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writerTest --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,runUniCodeThroughCSVReader --> readNext,au.com.bytecode.opencsv.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,runUniCodeThroughCSVReader --> assertEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,runUniCodeThroughCSVReader --> assertEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,runUniCodeThroughCSVReader --> assertEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,runUniCodeThroughCSVReader --> assertArrayEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,runUniCodeThroughCSVWriter --> writeNext,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,runUniCodeThroughCSVWriter --> assertEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,runUniCodeThroughCSVWriter --> trim,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,runUniCodeThroughCSVWriter --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,runUniCodeThroughCSVWriter --> trim,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,runASCIIThroughCSVWriter --> writeNext,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,runASCIIThroughCSVWriter --> assertEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,runASCIIThroughCSVWriter --> trim,java.lang.String,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,runASCIIThroughCSVWriter --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,runASCIIThroughCSVWriter --> trim,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadAscii --> writeNext,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadAscii --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadAscii --> readNext,au.com.bytecode.opencsv.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadAscii --> assertEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadAscii --> assertArrayEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceAscii --> writeNext,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceAscii --> writeNext,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceAscii --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceAscii --> readAll,au.com.bytecode.opencsv.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceAscii --> assertEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceAscii --> size,au.com.bytecode.opencsv.List,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceAscii --> get,au.com.bytecode.opencsv.List,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceAscii --> assertEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceAscii --> assertArrayEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceAscii --> get,au.com.bytecode.opencsv.List,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceAscii --> assertEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceAscii --> assertArrayEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceUnicode --> writeNext,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceUnicode --> writeNext,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceUnicode --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceUnicode --> readAll,au.com.bytecode.opencsv.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceUnicode --> assertEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceUnicode --> size,au.com.bytecode.opencsv.List,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceUnicode --> get,au.com.bytecode.opencsv.List,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceUnicode --> assertEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceUnicode --> assertArrayEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceUnicode --> get,au.com.bytecode.opencsv.List,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceUnicode --> assertEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceUnicode --> assertArrayEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceMixedUnicode --> writeNext,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceMixedUnicode --> writeNext,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceMixedUnicode --> toString,java.io.StringWriter,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceMixedUnicode --> readAll,au.com.bytecode.opencsv.CSVReader,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceMixedUnicode --> assertEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceMixedUnicode --> size,au.com.bytecode.opencsv.List,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceMixedUnicode --> get,au.com.bytecode.opencsv.List,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceMixedUnicode --> assertEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceMixedUnicode --> assertArrayEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceMixedUnicode --> get,au.com.bytecode.opencsv.List,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceMixedUnicode --> assertEquals,au.com.bytecode.opencsv.UniCodeTest,);
Call(METHOD,au.com.bytecode.opencsv.UniCodeTest,writeThenReadTwiceMixedUnicode --> assertArrayEquals,au.com.bytecode.opencsv.UniCodeTest,);
EndClass 42
StartClass 43
Class(integrationTest.issue2153020.DataReader,N,N,Public);
Attribute(ADDRESS_FILE,java.lang.String,Private,Y,Y,);
Method(main,void,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(main,java.lang.String[],);
Call(METHOD,integrationTest.issue2153020.DataReader,main --> readNext,au.com.bytecode.opencsv.CSVReader,);
Call(METHOD,integrationTest.issue2153020.DataReader,main --> println,null,);
Call(METHOD,integrationTest.issue2153020.DataReader,main --> println,null,);
EndClass 43
StartClass 44
Class(integrationTest.issue2564366.DataReader,N,N,Public);
Attribute(ADDRESS_FILE,java.lang.String,Private,Y,Y,);
Method(main,void,Public,Y,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(main,java.lang.String[],);
Call(METHOD,integrationTest.issue2564366.DataReader,main --> readNext,au.com.bytecode.opencsv.CSVReader,);
Call(METHOD,integrationTest.issue2564366.DataReader,main --> println,null,);
Call(METHOD,integrationTest.issue2564366.DataReader,main --> println,null,);
Call(METHOD,integrationTest.issue2564366.DataReader,main --> println,null,);
Call(METHOD,integrationTest.issue2564366.DataReader,main --> println,null,);
Call(METHOD,integrationTest.issue2564366.DataReader,main --> println,null,);
EndClass 44
StartClass 45
Class(integrationTest.issue3189428.CsvSample,N,N,Public);
Attribute(filePath,java.lang.String,Public,N,N,);
Method(main,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Method(doSample,void,Public,N,N);
Method(testRawCsvRead,void,Protected,N,N);
Method(testMappingStrategyRead,void,Protected,N,N);
Method(printfield,void,Private,N,N);
Parameter(main,java.lang.String[],);
Parameter(testRawCsvRead,java.lang.String,);
Parameter(testMappingStrategyRead,java.lang.String,);
Parameter(printfield,java.lang.String,);
Parameter(printfield,java.lang.String,);
Call(METHOD,integrationTest.issue3189428.CsvSample,main --> doSample,integrationTest.issue3189428.CsvSample,);
Call(METHOD,integrationTest.issue3189428.CsvSample,doSample --> writeNext,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,integrationTest.issue3189428.CsvSample,doSample --> writeNext,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,integrationTest.issue3189428.CsvSample,doSample --> writeNext,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,integrationTest.issue3189428.CsvSample,doSample --> close,au.com.bytecode.opencsv.CSVWriter,);
Call(METHOD,integrationTest.issue3189428.CsvSample,doSample --> testRawCsvRead,integrationTest.issue3189428.CsvSample,);
Call(METHOD,integrationTest.issue3189428.CsvSample,doSample --> testMappingStrategyRead,integrationTest.issue3189428.CsvSample,);
Call(METHOD,integrationTest.issue3189428.CsvSample,doSample --> println,null,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testRawCsvRead --> readNext,au.com.bytecode.opencsv.CSVReader,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testRawCsvRead --> equals,java.lang.String[],);
Call(METHOD,integrationTest.issue3189428.CsvSample,testRawCsvRead --> println,null,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testRawCsvRead --> equals,java.lang.String[],);
Call(METHOD,integrationTest.issue3189428.CsvSample,testRawCsvRead --> println,null,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testRawCsvRead --> equals,java.lang.String[],);
Call(METHOD,integrationTest.issue3189428.CsvSample,testRawCsvRead --> println,null,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testRawCsvRead --> equals,java.lang.String[],);
Call(METHOD,integrationTest.issue3189428.CsvSample,testRawCsvRead --> println,null,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testRawCsvRead --> println,null,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testRawCsvRead --> equals,java.lang.String[],);
Call(METHOD,integrationTest.issue3189428.CsvSample,testRawCsvRead --> println,null,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testRawCsvRead --> println,null,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testMappingStrategyRead --> setType,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategy,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testMappingStrategyRead --> setColumnMapping,au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategy,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testMappingStrategyRead --> parse,au.com.bytecode.opencsv.bean.CsvToBean,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testMappingStrategyRead --> size,java.util.List,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testMappingStrategyRead --> println,null,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testMappingStrategyRead --> get,java.util.List,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testMappingStrategyRead --> getName,integrationTest.issue3189428.MyBean,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testMappingStrategyRead --> equals,integrationTest.issue3189428.MyBean,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testMappingStrategyRead --> println,null,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testMappingStrategyRead --> getValue,integrationTest.issue3189428.MyBean,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testMappingStrategyRead --> equals,integrationTest.issue3189428.MyBean,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testMappingStrategyRead --> println,null,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testMappingStrategyRead --> getAmount1,integrationTest.issue3189428.MyBean,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testMappingStrategyRead --> equals,integrationTest.issue3189428.MyBean,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testMappingStrategyRead --> println,null,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testMappingStrategyRead --> getCurrency,integrationTest.issue3189428.MyBean,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testMappingStrategyRead --> equals,integrationTest.issue3189428.MyBean,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testMappingStrategyRead --> println,null,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testMappingStrategyRead --> printfield,integrationTest.issue3189428.CsvSample,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testMappingStrategyRead --> getComments,integrationTest.issue3189428.MyBean,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testMappingStrategyRead --> printfield,integrationTest.issue3189428.CsvSample,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testMappingStrategyRead --> getComments,integrationTest.issue3189428.MyBean,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testMappingStrategyRead --> equals,integrationTest.issue3189428.MyBean,);
Call(METHOD,integrationTest.issue3189428.CsvSample,testMappingStrategyRead --> println,null,);
Call(METHOD,integrationTest.issue3189428.CsvSample,printfield --> println,null,);
Call(METHOD,integrationTest.issue3189428.CsvSample,printfield --> println,null,);
Call(METHOD,integrationTest.issue3189428.CsvSample,printfield --> length,java.lang.String,);
EndClass 45
StartClass 46
Class(integrationTest.issue3189428.MyBean,N,N,Public);
Method(<init>,void,Public,N,N);
EndClass 46
StartClass 47
Class(integrationTest.issue3189428.CsvSample.MyBean,N,N,Public);
Attribute(name,java.lang.String,Public,N,N,);
Attribute(value,java.lang.String,Public,N,N,);
Attribute(amount1,java.lang.String,Public,N,N,);
Attribute(currency,java.lang.String,Public,N,N,);
Attribute(comments,java.lang.String,Public,N,N,);
Method(<init>,void,Public,N,N);
Method(getName,java.lang.String,Public,N,N);
Method(setName,void,Public,N,N);
Method(getValue,java.lang.String,Public,N,N);
Method(setValue,void,Public,N,N);
Method(getAmount1,java.lang.String,Public,N,N);
Method(setAmount1,void,Public,N,N);
Method(getCurrency,java.lang.String,Public,N,N);
Method(setCurrency,void,Public,N,N);
Method(getComments,java.lang.String,Public,N,N);
Method(setComments,void,Public,N,N);
Parameter(setName,java.lang.String,);
Parameter(setValue,java.lang.String,);
Parameter(setAmount1,java.lang.String,);
Parameter(setCurrency,java.lang.String,);
Parameter(setComments,java.lang.String,);
Call(ATTRIBUTE,integrationTest.issue3189428.CsvSample.MyBean,setName --> name,java.lang.String,READ);
Call(ATTRIBUTE,integrationTest.issue3189428.CsvSample.MyBean,setValue --> value,java.lang.String,READ);
Call(ATTRIBUTE,integrationTest.issue3189428.CsvSample.MyBean,setAmount1 --> amount1,java.lang.String,READ);
Call(ATTRIBUTE,integrationTest.issue3189428.CsvSample.MyBean,setCurrency --> currency,java.lang.String,READ);
Call(ATTRIBUTE,integrationTest.issue3189428.CsvSample.MyBean,setComments --> comments,java.lang.String,READ);
EndClass 47
StartClass 48
Class(integrationTest.issue3402853.HeaderColumnNameMappingStrategyUserTest,N,N,Public);
Attribute(USER_FILE,java.lang.String,Private,Y,Y,);
Method(createTestParseResult,java.util.List,Private,N,N);
Method(testParse,void,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Call(METHOD,integrationTest.issue3402853.HeaderColumnNameMappingStrategyUserTest,createTestParseResult --> setType,au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy,);
Call(METHOD,integrationTest.issue3402853.HeaderColumnNameMappingStrategyUserTest,createTestParseResult --> parse,au.com.bytecode.opencsv.bean.CsvToBean,);
Call(METHOD,integrationTest.issue3402853.HeaderColumnNameMappingStrategyUserTest,testParse --> createTestParseResult,integrationTest.issue3402853.HeaderColumnNameMappingStrategyUserTest,);
Call(METHOD,integrationTest.issue3402853.HeaderColumnNameMappingStrategyUserTest,testParse --> assertNotNull,integrationTest.issue3402853.HeaderColumnNameMappingStrategyUserTest,);
Call(METHOD,integrationTest.issue3402853.HeaderColumnNameMappingStrategyUserTest,testParse --> assertEquals,integrationTest.issue3402853.HeaderColumnNameMappingStrategyUserTest,);
Call(METHOD,integrationTest.issue3402853.HeaderColumnNameMappingStrategyUserTest,testParse --> size,java.util.List,);
Call(METHOD,integrationTest.issue3402853.HeaderColumnNameMappingStrategyUserTest,testParse --> get,java.util.List,);
Call(METHOD,integrationTest.issue3402853.HeaderColumnNameMappingStrategyUserTest,testParse --> assertEquals,integrationTest.issue3402853.HeaderColumnNameMappingStrategyUserTest,);
Call(METHOD,integrationTest.issue3402853.HeaderColumnNameMappingStrategyUserTest,testParse --> getEmail,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.HeaderColumnNameMappingStrategyUserTest,testParse --> assertEquals,integrationTest.issue3402853.HeaderColumnNameMappingStrategyUserTest,);
Call(METHOD,integrationTest.issue3402853.HeaderColumnNameMappingStrategyUserTest,testParse --> getFirst_Name,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.HeaderColumnNameMappingStrategyUserTest,testParse --> assertEquals,integrationTest.issue3402853.HeaderColumnNameMappingStrategyUserTest,);
Call(METHOD,integrationTest.issue3402853.HeaderColumnNameMappingStrategyUserTest,testParse --> getLast_Name,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.HeaderColumnNameMappingStrategyUserTest,testParse --> assertEquals,integrationTest.issue3402853.HeaderColumnNameMappingStrategyUserTest,);
Call(METHOD,integrationTest.issue3402853.HeaderColumnNameMappingStrategyUserTest,testParse --> getProfile_Id,integrationTest.issue3402853.MockUserBean,);
EndClass 48
StartClass 49
Class(integrationTest.issue3402853.MockUserBean,N,N,Public);
Attribute(DEFAULT_BLANK_FIELD,java.lang.String,Public,Y,Y,);
Attribute(profile_id,java.lang.String,Private,N,N,);
Attribute(email,java.lang.String,Private,N,N,);
Attribute(secondary_email,java.lang.String,Private,N,N,);
Attribute(first_name,java.lang.String,Private,N,N,);
Attribute(last_name,java.lang.String,Private,N,N,);
Method(getProfile_Id,java.lang.String,Public,N,N);
Method(setProfile_Id,void,Public,N,N);
Method(getEmail,java.lang.String,Public,N,N);
Method(setEmail,void,Public,N,N);
Method(getFirst_Name,java.lang.String,Public,N,N);
Method(setFirst_Name,void,Public,N,N);
Method(getLast_Name,java.lang.String,Public,N,N);
Method(setLast_Name,void,Public,N,N);
Method(toString,java.lang.String,Public,N,N);
Method(equals,boolean,Public,N,N);
Method(hashCode,int,Public,N,N);
Method(isFirstNameEmpty,boolean,Public,N,N);
Method(isLastNameEmpty,boolean,Public,N,N);
Method(isNameEmpty,boolean,Private,N,N);
Method(setSecondary_Email,void,Public,N,N);
Method(getSecondary_Email,java.lang.String,Public,N,N);
Method(isEmpty,boolean,Public,N,N);
Method(<clinit>,void,Public,Y,N);
Method(<init>,void,Public,N,N);
Parameter(setProfile_Id,java.lang.String,);
Parameter(setEmail,java.lang.String,);
Parameter(setFirst_Name,java.lang.String,);
Parameter(setLast_Name,java.lang.String,);
Parameter(equals,java.lang.Object,);
Parameter(isNameEmpty,java.lang.String,);
Parameter(setSecondary_Email,java.lang.String,);
Parameter(isEmpty,java.lang.String,);
Call(ATTRIBUTE,integrationTest.issue3402853.MockUserBean,setEmail --> email,java.lang.String,READ);
Call(METHOD,integrationTest.issue3402853.MockUserBean,toString --> isEmpty,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,toString --> getProfile_Id,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,toString --> getProfile_Id,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,toString --> trim,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,toString --> isEmpty,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,toString --> getFirst_Name,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,toString --> getFirst_Name,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,toString --> trim,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,toString --> isEmpty,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,toString --> getLast_Name,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,toString --> getLast_Name,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,toString --> trim,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,toString --> isEmpty,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,toString --> getEmail,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,toString --> getEmail,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,toString --> trim,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,toString --> append,java.lang.StringBuffer,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,toString --> append,java.lang.StringBuffer,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,toString --> append,java.lang.StringBuffer,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,toString --> append,java.lang.StringBuffer,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,toString --> toString,java.lang.StringBuffer,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,equals --> toString,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,equals --> equalsIgnoreCase,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,equals --> toString,null,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,hashCode --> toString,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,hashCode --> hashCode,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,isFirstNameEmpty --> isNameEmpty,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,isFirstNameEmpty --> getFirst_Name,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,isLastNameEmpty --> isNameEmpty,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,isLastNameEmpty --> getLast_Name,integrationTest.issue3402853.MockUserBean,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,isNameEmpty --> length,java.lang.String,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,isNameEmpty --> equals,java.lang.String,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,isEmpty --> trim,java.lang.String,);
Call(METHOD,integrationTest.issue3402853.MockUserBean,isEmpty --> length,java.lang.String,);
EndClass 49
StartClass 50
Class(au.com.bytecode.opencsv.ResultSetHelper,Y,Y,Public);
Method(getColumnNames,java.lang.String[],Public,N,Y);
Method(getColumnValues,java.lang.String[],Public,N,Y);
Method(getColumnValues$2,java.lang.String[],Public,N,Y);
Method(getColumnValues$3,java.lang.String[],Public,N,Y);
Parameter(getColumnNames,java.sql.ResultSet,);
Parameter(getColumnValues,java.sql.ResultSet,);
Parameter(getColumnValues$2,java.sql.ResultSet,);
Parameter(getColumnValues$2,boolean,);
Parameter(getColumnValues$3,java.sql.ResultSet,);
Parameter(getColumnValues$3,boolean,);
Parameter(getColumnValues$3,java.lang.String,);
Parameter(getColumnValues$3,java.lang.String,);
EndClass 50
